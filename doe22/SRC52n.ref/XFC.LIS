C ##############################################################################Node     2
C ##############################################################################Node     3
C ##############################################################################Node     4
C ##############################################################################Node     5
C ##########                                                          ##########Node     6
C ##########                    INTERFACE ROUTINES                    ##########Node     7
C ##########                                                          ##########Node     8
C ##############################################################################Node     9
C ##############################################################################Node    10
C ##############################################################################Node    11
C ##############################################################################Node    12
c                                                                               Node    13
c  Detach_Node         Detaches a node                                          Node    14
c  NewNode             Creates a node                                           Node    15
c  NewHistory           Creates an iteration block                              Node    16
c  IterateCheck         Determines if iteration is required                     Node    17
c                                                                               Node    18
c  GetLoads_Loop        Sums the demanders on a loop                            Node    19
c  GetLoads_Refg        Sums the suppliers or demanders on a refg ckt           Node    20
c  GetLoads_ER          Sums the parasitic mech losses on a zone                Node    21
c                                                                               Node    22
c  NewEndUse            Creates an end-use block                                Node    23
c  HourRepXfaceEU       Dumps end-uses to a report block buffer                 Node    24
c                                                                               Node    25
c  ListNodes              Creates a list of blocks matching the criteria        Node    26
c  ListAdd              Adds items to a list                                    Node    27
c  LocateNode          Finds a node matching the criteria                       Node    28
c  KXXComponent         Gets pointer to the Xfaced component's node             Node    29
c                                                                               Node    30
c  Xfc_Reports        Outputs monthly and yearly records                        Node    31
c  Report_PSB                                                                   Node    32
c  NewReport_H                                                                  Node    33
c  Report_H                                                                     Node    34
c  NewReport_I                                                                  Node    35
c  Report_I                                                                     Node    36
c  Report_PSC_PSD                                                               Node    37
c  NewReport_SSO                                                                Node    38
c  Report_SSO                                                                   Node    39
c  Report_BEPS                                                                  Node    40
c  Report_BEPSU                                                                 Node    41
c  NewPSE                                                                       Node    42
c  Report_PSE                                                                   Node    43
c  NewPSF                                                                       Node    44
c  Report_PSF                                                                   Node    45
c                                                                               Node    46
c  NewStat1      Total                                                          Node    47
c  NewStat2      Total, peak, peak conditions                                   Node    48
c  NewStat3      Enduses                                                        Node    49
c  NewStat4      Monthly totals for type 3                                      Node    50
c  NewStat5      Bin data, part load ratios                                     Node    51
c  NewStat6      Scatter plot                                                   Node    52
c  NewStat7      Max, min, avg, times and weather                               Node    53
c  NewStat8      Hours on/off                                                   Node    54
c  Xfc_Statistics     Processes statistics blocks                               Node    55
c  SumList              Gets a sum from a list of blocks                        Node    56
c                                                                               Node    57
c  Xfc_Data           Block data                                                Node    58
c  Xfc_Initial        Initializes common blocks to zero                         Node    59
c                                                                               Node    60
      SUBROUTINE DetachNode(KnxX)                                               DetNod   2
c                                                                               DetNod   3
c              Detaches a node from the chain of nodes,                         DetNod   4
c              and removes any reference to this block from all lists.          DetNod   5
c                                                                               DetNod   6
c              KnxX           Pointer to the node to be detached                DetNod   7
c                                                                               DetNod   8
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               DetNod  15
c                                                                               DetNod  16
      IF (KnxX .EQ. 0)  Return                                                  DetNod  17
c                                                                               DetNod  18
c              Verify that this pointer is to a node                            DetNod  19
      Knx = KnxX                                                                DetNod  20
      IF (<nx;Ident> .ne.  IdNode)  THEN                                        DetNod  21
        CALL MSGSIM(-1,II,II,II,II)                                             DetNod  22
        WRITE (IOUTPT,9001)                                                     DetNod  23
        CALL MessageBox( NULL,                                                  DetNod  24
     &    'Error deleting a node -'//                                           DetNod  25
     &     char(10)//char(13)//char(10)//char(13)//                             DetNod  26
     &    'Contact DOE-2 Support'//char(0),                                     DetNod  27
     &    'HVAC Setup Errors'//char(0),                                         DetNod  28
     &    MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                  DetNod  29
        IwinReturn = 1                                                          DetNod  30
        Return                                                                  DetNod  31
      ENDIF                                                                     DetNod  32
      <nx;Ident>  = IdDeleted                                                   DetNod  33
c                                                                               DetNod  34
      KnxNext     = <nx;Next>                                                   DetNod  35
      KnxPrevious = <nx;Previous>                                               DetNod  36
      IF (KnxNext .ne. 0)  THEN                                                 DetNod  37
        IF (KnxPrevious .ne. 0)  THEN                                           DetNod  38
c              cut this block out of the chain                                  DetNod  39
          Knx           = KnxPrevious                                           DetNod  40
          <nx;Next>     = KnxNext                                               DetNod  41
          Knx           = KnxNext                                               DetNod  42
          <nx;Previous> = KnxPrevious                                           DetNod  43
        ELSE                                                                    DetNod  44
c              this block at beginning of chain                                 DetNod  45
          Inx           = KnxNext                                               DetNod  46
          Knx           = KnxNext                                               DetNod  47
          <nx;Previous> = 0                                                     DetNod  48
        ENDIF                                                                   DetNod  49
      ELSEIF (KnxPrevious .GT. 0)  THEN                                         DetNod  50
c              this block at end of chain                                       DetNod  51
        Knx       = KnxPrevious                                                 DetNod  52
        <nx;Next> = 0                                                           DetNod  53
      ELSE                                                                      DetNod  54
c              this is the only block                                           DetNod  55
        Inx    = 0                                                              DetNod  56
      ENDIF                                                                     DetNod  57
c                                                                               DetNod  58
c              Remove from all lists                                            DetNod  59
      CALL DetachFromList(0, KnxX)                                              DetNod  60
      KnxX = 0                                                                  DetNod  61
c                                                                               DetNod  62
      RETURN                                                                    DetNod  63
c                                                                               DetNod  64
 9001 FORMAT(14X,'Programmer error:  DetachNode passed invalid ptr.')           DetNod  65
      End                                                                       DetNod  66
      FUNCTION NewNode(CheckIterFlg, Jsys,Jsubsys,Jcomp,JXcomp,                 NewNod   2
     &                               Type,SubType,EndUse, Multiplier)           NewNod   3
c                                                                               NewNod   4
c              Creates a node for a component.  This block                      NewNod   5
c              allows different components with different data                  NewNod   6
c              structures to be handled in a common format by various           NewNod   7
c              routines                                                         NewNod   8
c                                                                               NewNod   9
c              Knx           Pointer to this block                              NewNod  10
c              CheckIterFlg  Flag if included in IterReqdNode check             NewNod  11
c              Jsys          Parent system (plant, refg, etc.)                  NewNod  12
c                              If zero then ignored in global iteration         NewNod  13
c                              check                                            NewNod  14
c              Jsubsys       Parent subsystem (suction-group, etc.)             NewNod  15
c              Jcomp         Parent component                                   NewNod  16
c              JXcomp        Interfaced component                               NewNod  17
c                                                                               NewNod  18
c              Type          The type of node (supply, demand, etc.)            NewNod  19
c              SubType       Meaning varies according to type                   NewNod  20
c              EndUse        End-use category, pointer to an                    NewNod  21
c                              end-use block, or pointer to component           NewNod  22
c                              containing end-use block                         NewNod  23
c                                                                               NewNod  24
c              Multiplier    Component multiplier                               NewNod  25
c                                                                               NewNod  26
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
                                                                                NewNod  31
      Integer  CheckIterFlg, Type, SubType, EndUse                              NewNod  32
      Real     Multiplier                                                       NewNod  33
      Save     Knx                                                              NewNod  34
                                                                                NewNod  35
      CALL NodeProperties(Type, Length, NumVars)                                NewNod  36
                                                                                NewNod  37
c              Create a record and link                                         NewNod  38
      NewNode = NewRecord(Length)                                               NewNod  39
      IF (Inx .eq. 0)  THEN                                                     NewNod  40
        Inx         = NewNode                                                   NewNod  41
        KnxPrevious = 0                                                         NewNod  42
      ELSE                                                                      NewNod  43
        <nx;Next>   = NewNode                                                   NewNod  44
        KnxPrevious = Knx                                                       NewNod  45
      ENDIF                                                                     NewNod  46
      Knx           = NewNode                                                   NewNod  47
      <nx;Previous> = KnxPrevious                                               NewNod  48
                                                                                NewNod  49
c              Flag if node should be required in 'IterReqdNode' checks,        NewNod  50
c              when checking a list                                             NewNod  51
      <nx;CheckIterFlg> = CheckIterFlg                                          NewNod  52
                                                                                NewNod  53
c              miscellaneous parameters                                         NewNod  54
      <nx;Ident>      = IdNode                                                  NewNod  55
      <nx;Type>       = Type                                                    NewNod  56
      <nx;SubType>    = SubType                                                 NewNod  57
      <nx;System>     = Jsys                                                    NewNod  58
      <nx;SubSystem>  = Jsubsys                                                 NewNod  59
      <nx;Component>  = Jcomp                                                   NewNod  60
      <nx;XComponent> = JXcomp                                                  NewNod  61
      <nx;Multiplier> = Multiplier                                              NewNod  62
                                                                                NewNod  63
c              single-source end-use, or pointer to an end-use block            NewNod  64
c              that has already been created, or pointer to component           NewNod  65
c              containing end-use block                                         NewNod  66
      <nx;EndUse> = EndUse                                                      NewNod  67
                                                                                NewNod  68
      RETURN                                                                    NewNod  69
      END                                                                       NewNod  70
      SUBROUTINE NodeProperties(Type, Length, NumVars)                          NodPrp   2
c                                                                               NodPrp   3
c              Calculates some physical characteristics of a node               NodPrp   4
c                                                                               NodPrp   5
c              Type       Type of node (meter, fluid, refrigerant, etc.)        NodPrp   6
c              Length     Length of node                                        NodPrp   7
c              NumVars    Number of variables in node                           NodPrp   8
c                                                                               NodPrp   9
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
c                                                                               NodPrp  12
      INTEGER Type                                                              NodPrp  13
c                                                                               NodPrp  14
      SELECT CASE (Type)                                                        NodPrp  15
        CASE (10:19)  ! meter                                                   NodPrp  16
          Length  = <+mx~Len>                                                   NodPrp  17
          NumVars = <+mx~Len> - <+mx***Variables**>                             NodPrp  18
        CASE (20:29)  ! control                                                 NodPrp  19
          Length  = <+cs~Len>                                                   NodPrp  20
          NumVars = <+cs~Len> - <+cs***Variables**>                             NodPrp  21
        CASE (30:39)  ! zone extraction                                         NodPrp  22
          Length  = <+ex~Len>                                                   NodPrp  23
          NumVars = <+ex~Len> - <+er***Variables**>                             NodPrp  24
        CASE (40:49)  ! air                                                     NodPrp  25
          Length  = <+ax~Len>                                                   NodPrp  26
          NumVars = <+ax~Len> - <+ax***Variables**>                             NodPrp  27
        CASE (50:59)  ! fluid                                                   NodPrp  28
          Length  = <+fx~Len>                                                   NodPrp  29
          NumVars = <+fx~Len> - <+fx***Variables**>                             NodPrp  30
        CASE (60:69)  ! refrigerant                                             NodPrp  31
          Length  = <+rx~Len>                                                   NodPrp  32
          NumVars = <+rx~Len> - <+rx***Variables**>                             NodPrp  33
        CASE (70:79)  ! shaft power                                             NodPrp  34
          Length  = <+sx~Len>                                                   NodPrp  35
          NumVars = <+sx~Len> - <+sx***Variables**>                             NodPrp  36
        CASE DEFAULT                                                            NodPrp  37
          CALL MSGSIM(-1,II,II,II,II)                                           NodPrp  38
          WRITE (IOUTPT,9001)  Type                                             NodPrp  39
      END SELECT  ! Type                                                        NodPrp  40
c                                                                               NodPrp  41
      RETURN                                                                    NodPrp  42
c                                                                               NodPrp  43
 9001 FORMAT(14X,'PROGRAMMER ERROR:  An node has been'      /                   NodPrp  44
     &       14X,'defined having an undefined type.  Type:',I3         )        NodPrp  45
      END                                                                       NodPrp  46
C ##############################################################################Convrg   2
C ##########                                                          ##########Convrg   3
C ##########                   CONVERGENCE ROUTINES                   ##########Convrg   4
C ##########                                                          ##########Convrg   5
C ##############################################################################Convrg   6
c                                                                               Convrg   7
c              Routines that track the history and check for then               Convrg   8
c              convergence of nodes                                             Convrg   9
c                                                                               Convrg  10
c              CnvgCheck       Checks a node for convergence                    Convrg  11
c              ClearHistory    Clears the history blocks of a given type        Convrg  12
c              IterReqdHsty    Checks the history blocks of a given type        Convrg  13
c                                to see if any require iteration                Convrg  14
c              NewHistory      Creates a history block                          Convrg  15
c                                                                               Convrg  16
      SUBROUTINE CnvgCheck(Mode, Khi)                                           Convrg  17
                                                                                Convrg  18
c              Checks one or more AA variables tracked by a history             Convrg  19
c              block to see if convergence has been achieved.                   Convrg  20
c              Re-estimates a set of AA variables to dampen                     Convrg  21
c              oscillations.  Sets iteration flags in specified                 Convrg  22
c              nodes when non-convergence is detected.                          Convrg  23
c                                                                               Convrg  24
c              Mode   Calling mode                                              Convrg  25
c                       0  Convergence check only                               Convrg  26
c                          Don't update history,                                Convrg  27
c                          Don't set node iteration flags,                      Convrg  28
c                          Reset damped variables to last values                Convrg  29
c                       1  If not converged, #2                                 Convrg  30
c                          If converged, #0                                     Convrg  31
c                       2  Damp variables                                       Convrg  32
c                          Update history                                       Convrg  33
c                          If not converged, set node iteration flags           Convrg  34
c              Khi    Pointer to the history block                              Convrg  35
                                                                                Convrg  36
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
                                                                                Convrg  40
      LOGICAL  NoDampCalc, DampHsty, DampHsty0, Oscillating                     Convrg  41
      REAL     LastError                                                        Convrg  42
c                                                                               Convrg  43
c              While a history block tracks a relatively small                  Convrg  44
c              set of variables, it may dampen any number of variables          Convrg  45
c              based on the performance of the tracked variables.  The          Convrg  46
c              hi;ListDampVars is a superset of the tracked variables,          Convrg  47
c              with the list sorted so that the tracked variables are           Convrg  48
c              the first variables in the list                                  Convrg  49
      EQUIVALENCE (IV, LI,                       L2)                            Convrg  50
c        track index^   ^hi;ListDampVars index    ^hi;LastVarsIn index          Convrg  51
                                                                                Convrg  52
c              Skip if null history block                                       Convrg  53
      IF (Khi .eq. 0)  Return                                                   Convrg  54
                                                                                Convrg  55
      Kli            = <hi;ListDampVars>   ! List of damped variables           Convrg  56
      Kl2            = <hi;LastVarsIn>     ! Last input values of damped        Convrg  57
      NumDampVars    = <li;NumItems>       ! Number of damped variables         Convrg  58
      NumTrackVars   = <hi;NumTrackVars>   ! Number of tracked variables        Convrg  59
      NumIter        = <hi.NumIter> + 1    ! Number of previous iterations      Convrg  60
                                                                                Convrg  61
c              Check if variables should be damped                              Convrg  62
      IF (Mode .eq. 0  .or.  NumIter .lt. <hi;NumIterDamp>)  THEN               Convrg  63
        NoDampCalc = .True.                                                     Convrg  64
      ELSE                                                                      Convrg  65
        NoDampCalc = .False.                                                    Convrg  66
      ENDIF                                                                     Convrg  67
                                                                                Convrg  68
c              Check each tracked variable for convergence                      Convrg  69
      <hi.IterFlag>  = 0                   ! Iteration flag                     Convrg  70
      DampFactor     = 1.0                 ! Initial damping factor             Convrg  71
      Oscillating    = .False.             ! Iterations not oscillating         Convrg  72
      DO  IV=1,NumTrackVars                                                     Convrg  73
        Call CheckCnvgVar                                                       Convrg  74
        DampFactor = MIN(DampFactor, DampFactorVar)                             Convrg  75
      ENDDO                                                                     Convrg  76
                                                                                Convrg  77
      IF (Oscillating)  THEN                                                    Convrg  78
c              Solution is oscillating.  Check if iterations are cycling        Convrg  79
c              between oscillation phases and relaxations.                      Convrg  80
        IF (<hi.Oscillating> .eq. 0)  THEN                                      Convrg  81
          <hi.Osc&RelaxCyc> = <hi.Osc&RelaxCyc> + 1                             Convrg  82
          <hi.Oscillating> = 1                                                  Convrg  83
        ENDIF                                                                   Convrg  84
        <hi.NumIterRelax>  = 0                                                  Convrg  85
        IF (<hi.Osc&RelaxCyc> .gt. 2)  THEN                                     Convrg  86
c              unstable; reduce relaxation factor                               Convrg  87
          <hi.Relax'> = (<hi.Relax'>-1.)*0.75 + 1.                              Convrg  88
          <hi.Relax'> = Max(<hi.Relax'>, Min(1.1, <hi;Relax>*0.25))             Convrg  89
        ENDIF                                                                   Convrg  90
        DampFactor = Max(0.05, Min(DampFactor, <hi.DampFactor>, 0.9))           Convrg  91
                                                                                Convrg  92
      ELSE  ! Not oscillating this iteration                                    Convrg  93
        <hi.Oscillating>  = 0                                                   Convrg  94
        <hi.NumIterRelax> = <hi.NumIterRelax> + 1                               Convrg  95
      ENDIF                                                                     Convrg  96
c              don't change damping factor if converged                         Convrg  97
      IF (DampFactor .eq. 1.)  DampFactor = <hi.DampFactor>                     Convrg  98
                                                                                Convrg  99
c              Update all variables subject to damping                          Convrg 100
      iMode = Mode                                                              Convrg 101
   10 SELECT CASE (iMode)                                                       Convrg 102
        CASE (0)                                                                Convrg 103
c              Keep the output the same as last; except for                     Convrg 104
c              the first iteration                                              Convrg 105
          IF (NumIter .gt. 1)  THEN                                             Convrg 106
            DO  IV=1,NumDampVars                                                Convrg 107
              AA(<li;List>) = <hi.LastVarsOut>                                  Convrg 108
            ENDDO                                                               Convrg 109
          ENDIF                                                                 Convrg 110
        CASE (1)                                                                Convrg 111
          IF (<hi.IterFlag> .GT. 0)  THEN                                       Convrg 112
            iMode = 2                                                           Convrg 113
          ELSE                                                                  Convrg 114
            iMode = 0                                                           Convrg 115
          ENDIF                                                                 Convrg 116
          GOTO 10                                                               Convrg 117
        CASE (2)                                                                Convrg 118
c              Damp the variables                                               Convrg 119
          IF (DampFactor .LT. 1.)  THEN                                         Convrg 120
            DampHsty0 = .TRUE.                                                  Convrg 121
          ELSE                                                                  Convrg 122
            DampHsty0 = .FALSE.                                                 Convrg 123
          ENDIF                                                                 Convrg 124
          DO  IV=1,NumDampVars                                                  Convrg 125
            DampHsty = DampHsty0                                                Convrg 126
c              Skip if variable set to unused                                   Convrg 127
            IF (AA(<li;List>) .EQ. -88888.  .OR.                                Convrg 128
     &                <hi.LastVarsOut> .EQ. -88888.)  DampHsty = .FALSE.        Convrg 129
c              tracking variables                                               Convrg 130
            IF (IV .LE. NumTrackVars)  THEN                                     Convrg 131
c                 if a ratio, don't damp if zero                                Convrg 132
              IF (<hi;ErrorMode> .EQ. 2  .AND.                                  Convrg 133
     &                        AA(<li;List>) .EQ. 0.)  DampHsty = .FALSE.        Convrg 134
              <hi.LastErrorVar> = <hi.ErrorVar>                                 Convrg 135
            ENDIF                                                               Convrg 136
            IF (DampHsty)  THEN                                                 Convrg 137
              Error = (AA(<li;List>)-<hi.LastVarsOut>) * DampFactor             Convrg 138
              AA(<li;List>) = <hi.LastVarsOut> + Error                          Convrg 139
            ENDIF                                                               Convrg 140
            <hi.LastVarsOut> = AA(<li;List>)                                    Convrg 141
          ENDDO                                                                 Convrg 142
          <hi.DampFactor> = DampFactor                                          Convrg 143
c              Number of iterations                                             Convrg 144
          <hi.NumIter> = NumIter                                                Convrg 145
c              Set iteration flags in Xnodes                                    Convrg 146
          IF (<hi;ListIterNodes> .ne. 0)                                        Convrg 147
     &      Call IterSetNode(<hi;Component>, <hi;ListIterNodes>)                Convrg 148
      END SELECT                                                                Convrg 149
c                                                                               Convrg 150
c                                                                               Convrg 151
      RETURN                                                                    Convrg 152
c                                                                               Convrg 153
c                                                                               Convrg 154
      CONTAINS                                                                  Convrg 155
c ============== CheckCnvgVar ================================================= Convrg 156
      Subroutine CheckCnvgVar                                                   Convrg 157
                                                                                Convrg 158
c              Determines whether a variable being tracked has                  Convrg 159
c              converged, and if oscillating, the required damping              Convrg 160
c              factor                                                           Convrg 161
      DampFactorVar = 1.0               ! Damping factor                        Convrg 162
                                                                                Convrg 163
c              Error in current value vs. last iteration's value                Convrg 164
      <hi.ErrorVar> = AA(<li;List>) - <hi.LastVarsOut>                          Convrg 165
      IF (<hi.ErrorVar> .eq. 0.)  Return  ! fully converged                     Convrg 166
                                                                                Convrg 167
c              Check if error sufficient to require iteration                   Convrg 168
      SELECT CASE (<hi;ErrorMode>)                                              Convrg 169
      CASE (1)      ! delta                                                     Convrg 170
        IF (Abs(<hi.ErrorVar>) .le. <hi;MaxError>)  Return                      Convrg 171
      CASE DEFAULT  ! ratio                                                     Convrg 172
        IF (Abs(<hi.LastVarsOut>) .GT. 0.000001)  THEN                          Convrg 173
          ErrorRatio = <hi.ErrorVar> / <hi.LastVarsOut>                         Convrg 174
        ELSE  ! special case for zero value                                     Convrg 175
          ErrorRatio = <hi.ErrorVar>                                            Convrg 176
        ENDIF                                                                   Convrg 177
        IF (Abs(ErrorRatio) .le. <hi;MaxError>)  Return                         Convrg 178
      END SELECT                                                                Convrg 179
                                                                                Convrg 180
c              If here, iteration is required                                   Convrg 181
      <hi.IterFlag> = 1                                                         Convrg 182
      IF (NoDampCalc)  Return                                                   Convrg 183
c              Don't damp if unused now or last time                            Convrg 184
      IF (<hi.LastVarsOut> .EQ. -88888.  .OR.                                   Convrg 185
     &       AA(<li;List>) .EQ. -88888.)  Return                                Convrg 186
                                                                                Convrg 187
c              Investigate the error pattern and calculate damping              Convrg 188
c              factor to improve stability and speed convergence                Convrg 189
                                                                                Convrg 190
      IF (<hi.LastErrorVar> .eq. 0.)  THEN                                      Convrg 191
c              Was converged completely, but not now; use last factor           Convrg 192
        DampFactorVar = <hi.DampFactor>                                         Convrg 193
        Return                                                                  Convrg 194
      ENDIF                                                                     Convrg 195
                                                                                Convrg 196
c              Error in last iteration, and ratio of this iteration's           Convrg 197
c              error to the past iteration's error                              Convrg 198
      LastError  = <hi.LastErrorVar> * <hi.DampFactor>                          Convrg 199
      ErrorRatio = <hi.ErrorVar> / LastError                                    Convrg 200
                                                                                Convrg 201
      IF (ErrorRatio .gt. 0.)  THEN                                             Convrg 202
c              Not oscillating - try relaxing the damping if strongly           Convrg 203
c              clamped and convergence is slow                                  Convrg 204
        IF (ErrorRatio .gt. 0.8  .and.  <hi.DampFactor> .lt. 0.5                Convrg 205
     &                           .and.  <hi.NumIterRelax> .gt. 2)  THEN         Convrg 206
          DampFactorVar = Min(0.5, <hi.DampFactor>*<hi.Relax'>)                 Convrg 207
        ELSE                                                                    Convrg 208
          DampFactorVar = <hi.DampFactor>                                       Convrg 209
        ENDIF                                                                   Convrg 210
                                                                                Convrg 211
      ELSE  ! The solution is oscillating between iterations                    Convrg 212
        Oscillating = .True.                                                    Convrg 213
                                                                                Convrg 214
        IF (ErrorRatio .gt. -0.4)  THEN                                         Convrg 215
c              Converging strongly; retain last factor                          Convrg 216
          DampFactorVar = <hi.DampFactor>                                       Convrg 217
                                                                                Convrg 218
        ELSEIF (ErrorRatio .GT. -1.)  THEN                                      Convrg 219
c              Converging poorly                                                Convrg 220
          R    = -1. / ErrorRatio                                               Convrg 221
          Xavg = (<hi.LastVarsOut>*(1.+R)                                       Convrg 222
     &         + (<hi.ErrorVar>*R-LastError)*0.5) / (1.+R)                      Convrg 223
          DampFactorVar = Abs((Xavg-<hi.LastVarsOut>)/<hi.ErrorVar>)            Convrg 224
                                                                                Convrg 225
        ELSE                                                                    Convrg 226
c              Diverging oscillation                                            Convrg 227
          R    = -ErrorRatio                                                    Convrg 228
          Xavg = (<hi.LastVarsOut>*(1.+R)                                       Convrg 229
     &         + (LastError*R-<hi.ErrorVar>)*0.5) / (1.+R)                      Convrg 230
          DampFactorVar = Abs((Xavg-<hi.LastVarsOut>)/<hi.ErrorVar>)            Convrg 231
        ENDIF  ! ErrorRatio                                                     Convrg 232
      ENDIF  ! ErrorRatio                                                       Convrg 233
c                                                                               Convrg 234
      End Subroutine CheckCnvgVar                                               Convrg 235
c                                                                               Convrg 236
      END                                                                       Convrg 237
      SUBROUTINE CnvgMsg(Jna, Type, Value, Error, ErrorMax)                     CnvMsg   2
c                                                                               CnvMsg   3
c              Outputs an error message when convergence fails                  CnvMsg   4
c                                                                               CnvMsg   5
c              Jna       Pointer to the component                               CnvMsg   6
c              Type      Type of error                                          CnvMsg   7
c              Value     Value of the iterated variable                         CnvMsg   8
c              Error     Error in the iterated variable                         CnvMsg   9
c              ErrorMax  Maximum allowed error                                  CnvMsg  10
c                                                                               CnvMsg  11
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
c                                                                               CnvMsg  17
      INTEGER Type                                                              CnvMsg  18
c                                                                               CnvMsg  19
      IF (IREPRT(3,35) .EQ. 0)  RETURN                                          CnvMsg  20
c                                                                               CnvMsg  21
      WRITE (IOUTPT,9100) (<na:NAME>,II=1,8), IMO,IDAY,IHR                      CnvMsg  22
c                                                                               CnvMsg  23
      SELECT CASE (Type)                                                        CnvMsg  24
        CASE (0)  ! General, no additional info                                 CnvMsg  25
        CASE (1)  ! Load                                                        CnvMsg  26
          WRITE (IOUTPT,9101)  Value, Error, ErrorMax                           CnvMsg  27
        CASE (2)  ! Temperature                                                 CnvMsg  28
          WRITE (IOUTPT,9102)  Value, Error, ErrorMax                           CnvMsg  29
        CASE (3)  ! Pressure                                                    CnvMsg  30
          WRITE (IOUTPT,9103)  Value, Error, ErrorMax                           CnvMsg  31
        CASE (4)  ! Humidity ratio                                              CnvMsg  32
          WRITE (IOUTPT,9104)  Value, Error, ErrorMax                           CnvMsg  33
        CASE (5)  ! Enthalpy                                                    CnvMsg  34
          WRITE (IOUTPT,9105)  Value, Error, ErrorMax                           CnvMsg  35
      END SELECT                                                                CnvMsg  36
c                                                                               CnvMsg  37
      RETURN                                                                    CnvMsg  38
c                                                                               CnvMsg  39
 9100 FORMAT(14X,'Convergence failure: ',8A4,2X,I2,'/',I2,'/',I2       )        CnvMsg  40
 9101 FORMAT(14x,'Load, Error, MaxError:',F10.1,2F10.3                 )        CnvMsg  41
 9102 FORMAT(14x,'Temp, Error, MaxError:',    3F10.3                   )        CnvMsg  42
 9103 FORMAT(14x,'Pressure, Error, MaxError:',3F10.3                   )        CnvMsg  43
 9104 FORMAT(14x,'Humidity, Error, MaxError:',3F10.6                   )        CnvMsg  44
 9105 FORMAT(14x,'Enthalpy, Error, MaxError:',3F10.3                   )        CnvMsg  45
      END                                                                       CnvMsg  46
      SUBROUTINE CnvgMsg2(Location, Routine, Jna)                               CnvMsg2  2
c                                                                               CnvMsg2  3
c              Outputs an error message when convergence fails                  CnvMsg2  4
c                                                                               CnvMsg2  5
c              Location  A unique location in the Routine                       CnvMsg2  6
c              Routine   The name of the routine                                CnvMsg2  7
c              Jna       The pointer to the component                           CnvMsg2  8
c                                                                               CnvMsg2  9
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
c                                                                               CnvMsg2 15
      INTEGER Routine(4)                                                        CnvMsg2 16
c                                                                               CnvMsg2 17
c ??  IF (IREPRT(3,35) .EQ. 0)  RETURN                                          CnvMsg2 18
c                                                                               CnvMsg2 19
      WRITE (IOUTPT,9100) Location, (Routine(II),II=1,4),                       CnvMsg2 20
     &                    IMO,IDAY,IHR, (<na:NAME>,II=1,8)                      CnvMsg2 21
c                                                                               CnvMsg2 22
      RETURN                                                                    CnvMsg2 23
c                                                                               CnvMsg2 24
 9100 FORMAT(                                                                   CnvMsg2 25
     &1x,'Convergence failure: ',I2,1x,4A4,1x,I2,'/',I2,'/',I2,1x,8A4)          CnvMsg2 26
      END                                                                       CnvMsg2 27
      SUBROUTINE DumpHstyDamp(Kli)                                              HstDmp   2
c                                                                               HstDmp   3
c              Lists the history blocks that have failed to converge,           HstDmp   4
c              and their damped variables.                                      HstDmp   5
c                                                                               HstDmp   6
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
c                                                                               HstDmp  12
c                                                                               HstDmp  13
      iHeader = 0                                                               HstDmp  14
c                                                                               HstDmp  15
      IF (Kli .EQ. 1)  THEN                                                     HstDmp  16
c              Look at all histories                                            HstDmp  17
        Khi = Ihi                                                               HstDmp  18
        DO WHILE (Khi .GT. 0)                                                   HstDmp  19
          IF (<hi.IterFlag> .ne. 0  .AND.  <hi;System> .GT. 0)                  HstDmp  20
     &      Call DumpDampVars                                                   HstDmp  21
          Khi = <hi;Next>                                                       HstDmp  22
        ENDDO  ! Khi                                                            HstDmp  23
      ELSEIF (<li;Ident> .EQ. IdListOther)  THEN                                HstDmp  24
c              Look at a list                                                   HstDmp  25
        NumItems = <li;NumItems>                                                HstDmp  26
        DO  LI=1,NumItems                                                       HstDmp  27
          Khi = <li;List>                                                       HstDmp  28
          IF (<hi.IterFlag> .ne. 0)  Call DumpDampVars                          HstDmp  29
        ENDDO                                                                   HstDmp  30
      ELSEIF (<li;Ident> .EQ. IdHistory)  THEN                                  HstDmp  31
c              Dump a single history                                            HstDmp  32
        Khi = Kli                                                               HstDmp  33
        Call DumpDampVars                                                       HstDmp  34
      ELSE                                                                      HstDmp  35
c              Illegal                                                          HstDmp  36
        CALL MSGSIM(-1,II,II,II,II)                                             HstDmp  37
        WRITE (IOUTPT, 9100)                                                    HstDmp  38
        IWinReturn = 1                                                          HstDmp  39
      ENDIF                                                                     HstDmp  40
c                                                                               HstDmp  41
      RETURN                                                                    HstDmp  42
c                                                                               HstDmp  43
c              Message formats                                                  HstDmp  44
 9100 FORMAT(                                                                   HstDmp  45
     &14x,'PROGRAMMER ERROR: Illegal Mode in DumpHstyDamp.'            )        HstDmp  46
c                                                                               HstDmp  47
c                                                                               HstDmp  48
      CONTAINS                                                                  HstDmp  49
c ============== DumpDampVars ================================================= HstDmp  50
      Subroutine DumpDampVars                                                   HstDmp  51
c                                                                               HstDmp  52
      IF (iHeader .EQ. 0)  THEN                                                 HstDmp  53
c              print the header                                                 HstDmp  54
        WRITE (IOUTPT, 9101)                                                    HstDmp  55
        iHeader = 1                                                             HstDmp  56
      ENDIF                                                                     HstDmp  57
c                                                                               HstDmp  58
      Jna       = Jparent(Khi)                                                  HstDmp  59
      Kl2       = <hi;ListDampVars>                                             HstDmp  60
      NumItems2 = <l2;NumItems>                                                 HstDmp  61
      WRITE (IOUTPT,9102) (<na:NAME>,II=1,8),                                   HstDmp  62
     &                    (AA(<l2;List>),L2=1,NumItems2)                        HstDmp  63
c                                                                               HstDmp  64
 9101 FORMAT(/'  Failed History Damp Vars: '                           /        HstDmp  65
     &       '  --------------------------------'                      )        HstDmp  66
 9102 FORMAT(2X,8A4,10F10.2, 4(/34X,10F10.2)                           )        HstDmp  67
                                                                                HstDmp  68
      End Subroutine DumpDampVars                                               HstDmp  69
                                                                                HstDmp  70
      END                                                                       HstDmp  71
      SUBROUTINE DumpHstyTrack(Kli)                                             HstTrk   2
c                                                                               HstTrk   3
c              Lists the history blocks that have failed to converge,           HstTrk   4
c              their damping factor, tracking variables and errors.             HstTrk   5
c                                                                               HstTrk   6
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
c                                                                               HstTrk  12
      EQUIVALENCE (IV, L2)                                                      HstTrk  13
c                                                                               HstTrk  14
      iHeader = 0                                                               HstTrk  15
c                                                                               HstTrk  16
      IF (Kli .EQ. 1)  THEN                                                     HstTrk  17
c              Process all histories                                            HstTrk  18
        Khi = Ihi                                                               HstTrk  19
        DO WHILE (Khi .GT. 0)                                                   HstTrk  20
          IF (<hi.IterFlag> .GT. 0  .AND.  <hi;System> .GT. 0)                  HstTrk  21
     &      Call DumpTrackVars                                                  HstTrk  22
          Khi = <hi;Next>                                                       HstTrk  23
        ENDDO                                                                   HstTrk  24
      ELSEIF (<li;Ident> .EQ. IdListOther)  THEN                                HstTrk  25
c              Process a list of histories                                      HstTrk  26
        NumItems = <li;NumItems>                                                HstTrk  27
        DO  LI=1,NumItems                                                       HstTrk  28
          Khi = <li;List>                                                       HstTrk  29
          IF (<hi.IterFlag> .GT. 0)  Call DumpTrackVars                         HstTrk  30
        ENDDO                                                                   HstTrk  31
      ELSEIF (<li;Ident> .EQ. IdHistory)  THEN                                  HstTrk  32
c              Process a single history                                         HstTrk  33
        Khi = Kli                                                               HstTrk  34
        IF (<hi.IterFlag> .GT. 0)  Call DumpTrackVars                           HstTrk  35
      ELSE                                                                      HstTrk  36
c              Illegal                                                          HstTrk  37
        CALL MSGSIM(-1,II,II,II,II)                                             HstTrk  38
        WRITE (IOUTPT, 9100)                                                    HstTrk  39
        IWinReturn = 1                                                          HstTrk  40
      ENDIF                                                                     HstTrk  41
c                                                                               HstTrk  42
      RETURN                                                                    HstTrk  43
c                                                                               HstTrk  44
c              Message formats                                                  HstTrk  45
 9100 FORMAT(                                                                   HstTrk  46
     &14x,'PROGRAMMER ERROR: Illegal Mode in DumpHstyTrack.'           )        HstTrk  47
c                                                                               HstTrk  48
c                                                                               HstTrk  49
      CONTAINS                                                                  HstTrk  50
c ============== DumpTrackVars ================================================ HstTrk  51
      Subroutine DumpTrackVars                                                  HstTrk  52
c                                                                               HstTrk  53
      IF (iHeader .EQ. 0)  THEN                                                 HstTrk  54
c              print the header                                                 HstTrk  55
        WRITE (IOUTPT, 9101)                                                    HstTrk  56
        iHeader = 1                                                             HstTrk  57
      ENDIF                                                                     HstTrk  58
c                                                                               HstTrk  59
      Jna          = Jparent(Khi)                                               HstTrk  60
      Kl2          = <hi;ListDampVars>                                          HstTrk  61
      NumTrackVars = <hi;NumTrackVars>                                          HstTrk  62
      WRITE (IOUTPT,9102) Khi, (<na:NAME>,II=1,6), <hi.DampFactor>,             HstTrk  63
     &      (AA(<l2;List>),<hi.LastErrorVar>,IV=1,NumTrackVars)                 HstTrk  64
c                                                                               HstTrk  65
 9101 FORMAT(/'  Failed History Subcomponents:      Damp'              ,        HstTrk  66
     &        '   Value 1  Error 1   Value 2  Error 2'                 ,        HstTrk  67
     &        '   Value 3  Error 3   Value 4  Error 4'                 ,        HstTrk  68
     &        '   Value 5  Error 5   Value 6  Error 6'                 /        HstTrk  69
     &        '  --------------------------------  -----'              ,        HstTrk  70
     &        '   -------  -------   -------  -------'                 ,        HstTrk  71
     &        '   -------  -------   -------  -------'                 ,        HstTrk  72
     &        '   -------  -------   -------  -------'                 )        HstTrk  73
 9102 FORMAT(2X,I6,2X,6A4,F7.3,6(F10.3,F9.3))                                   HstTrk  74
                                                                                HstTrk  75
      End Subroutine DumpTrackVars                                              HstTrk  76
                                                                                HstTrk  77
      END                                                                       HstTrk  78
      SUBROUTINE DumpHstyPtrs                                                   HstPtr   2
c                                                                               HstPtr   3
c              Dumps all history blocks and their pointers                      HstPtr   4
c                                                                               HstPtr   5
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
c                                                                               HstPtr  11
      EQUIVALENCE (LI, IV)                                                      HstPtr  12
c                                                                               HstPtr  13
      WRITE(IOUTPT, 9201)                                                       HstPtr  14
c                                                                               HstPtr  15
      Khi = Ihi                                                                 HstPtr  16
      DO WHILE  (Khi .GT. 0)                                                    HstPtr  17
        NumTrackVars = <hi;NumTrackVars>                                        HstPtr  18
        Kli          = <hi;ListDampVars>                                        HstPtr  19
        Jna          = Jparent(Khi)                                             HstPtr  20
        WRITE(IOUTPT, 9202)  (<na:NAME>,II=1,8), Khi, <hi;System>,              HstPtr  21
     &    <hi;Component>, <hi;ListIterNodes>, <hi;ListDampVars>,                HstPtr  22
     &    <hi;NumIterSticky>, <hi;NumIterDamp>, <hi;Relax>,                     HstPtr  23
     &    (<li;List>, <hi;MaxError>, <hi;ErrorMode>,IV=1,NumTrackVars)          HstPtr  24
        NumItems = <li;NumItems>                                                HstPtr  25
        WRITE(IOUTPT, 9203)  Kli, (<li;List>,LI=1,NumItems)                     HstPtr  26
        IF (<hi;ListIterNodes> .GT. 0)  THEN                                    HstPtr  27
          Kli      = <hi;ListIterNodes>                                         HstPtr  28
          NumItems = <li;NumItems>                                              HstPtr  29
          WRITE(IOUTPT, 9204)  Kli, (<li;List>,LI=1,NumItems)                   HstPtr  30
        ENDIF                                                                   HstPtr  31
        Khi = <hi;Next>                                                         HstPtr  32
      ENDDO                                                                     HstPtr  33
c                                                                               HstPtr  34
      RETURN                                                                    HstPtr  35
 9201 FORMAT(/                                                                  HstPtr  36
     &' HISTORY BLOCKs                         Khi      Type'          ,        HstPtr  37
     &'     Jcomp  IterNode  DampVars  NumStick   NumDamp     Relax'   /        HstPtr  38
     &1x,32('-'),8('  --------')                                       )        HstPtr  39
 9202 FORMAT(                                                                   HstPtr  40
     &1x,8A4,7I10,F10.1                                                /        HstPtr  41
     &33x,4(I7,F5.2,I3,3x)                                             )        HstPtr  42
 9203 FORMAT(                                                                   HstPtr  43
     &'                     ListDampVars',10I10,10(/33x,10I10)         )        HstPtr  44
 9204 FORMAT(                                                                   HstPtr  45
     &'                    ListIterNodes',10I10,10(/33x,10I10)         )        HstPtr  46
      END                                                                       HstPtr  47
      SUBROUTINE DumpIterNodes(Kli)                                             ItrNod   2
c                                                                               ItrNod   3
c              Lists the nodes that have iteration flags set                    ItrNod   4
c                                                                               ItrNod   5
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
c                                                                               ItrNod  11
c                                                                               ItrNod  12
      iHeader = 0                                                               ItrNod  13
c                                                                               ItrNod  14
      IF (Kli .EQ. 1)  THEN                                                     ItrNod  15
c              Process all nodes                                                ItrNod  16
        Knx = Inx                                                               ItrNod  17
        DO WHILE (Knx .GT. 0)                                                   ItrNod  18
          IF (<nx.IterFlag> .GT. 0)  Call DumpNodeData                          ItrNod  19
          Knx = <nx;Next>                                                       ItrNod  20
        ENDDO                                                                   ItrNod  21
      ELSEIF (<li;Ident> .EQ. IdListNode)  THEN                                 ItrNod  22
c              Process a list of nodes                                          ItrNod  23
        NumItems = <li;NumItems>                                                ItrNod  24
        DO  LI=1,NumItems                                                       ItrNod  25
          Knx = <li;List>                                                       ItrNod  26
          IF (<nx.IterFlag> .GT. 0)  Call DumpNodeData                          ItrNod  27
        ENDDO                                                                   ItrNod  28
      ELSEIF (<li;Ident> .EQ. IdNode)  THEN                                     ItrNod  29
c              Process a single node                                            ItrNod  30
        Knx = Kli                                                               ItrNod  31
        IF (<nx.IterFlag> .GT. 0)  Call DumpNodeData                            ItrNod  32
      ELSE                                                                      ItrNod  33
c              Illegal                                                          ItrNod  34
        CALL MSGSIM(-1,II,II,II,II)                                             ItrNod  35
        WRITE (IOUTPT, 9100)                                                    ItrNod  36
        IWinReturn = 1                                                          ItrNod  37
      ENDIF                                                                     ItrNod  38
c                                                                               ItrNod  39
      RETURN                                                                    ItrNod  40
c                                                                               ItrNod  41
c              Message formats                                                  ItrNod  42
 9100 FORMAT(                                                                   ItrNod  43
     &14x,'PROGRAMMER ERROR: Illegal Mode in DumpIterNodes.'           )        ItrNod  44
c                                                                               ItrNod  45
c                                                                               ItrNod  46
      CONTAINS                                                                  ItrNod  47
c ============== DumpNodeData ==================================================ItrNod  48
      Subroutine DumpNodeData                                                   ItrNod  49
c                                                                               ItrNod  50
      IF (iHeader .EQ. 0)  THEN                                                 ItrNod  51
c              print the header                                                 ItrNod  52
        WRITE (IOUTPT, 9101)                                                    ItrNod  53
        iHeader = 1                                                             ItrNod  54
      ENDIF                                                                     ItrNod  55
c                                                                               ItrNod  56
      Jna = Jparent(Knx)                                                        ItrNod  57
      Jn2 = Jparent(<nx.IterFlag>)                                              ItrNod  58
      WRITE (IOUTPT,9102) (<na:NAME>,II=1,8), <nx;Type>, <nx;SubType>,          ItrNod  59
     &                    (<na2:NAME>,II=1,8)                                   ItrNod  60
c                                                                               ItrNod  61
 9101 FORMAT(/'  Failed Node Subcomponents:          Type   Subtype'   ,        ItrNod  62
     &        '  Set By'                                               /        ItrNod  63
     &        '  --------------------------------  -------  -------'   ,        ItrNod  64
     &        '  --------------------------------'                     )        ItrNod  65
 9102 FORMAT(2X,8A4,2I9,2X,8A4)                                                 ItrNod  66
c                                                                               ItrNod  67
      End Subroutine DumpNodeData                                               ItrNod  68
                                                                                ItrNod  69
      END                                                                       ItrNod  70
      SUBROUTINE HstySetUp                                                      HstySet  2
c                                                                               HstySet  3
c              Calculates the errors for history block variables                HstySet  4
c              when the error is specified as a fraction of design              HstySet  5
c                                                                               HstySet  6
c              Called after all design calculations are complete                HstySet  7
c                                                                               HstySet  8
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               HstySet 15
      EQUIVALENCE (IV, LI)                                                      HstySet 16
c                                                                               HstySet 17
c                                                                               HstySet 18
c              Search thru all history blocks and convert errors                HstySet 19
c              specified as a fraction of design to the actual value            HstySet 20
      Khi = Ihi                                                                 HstySet 21
      DO WHILE (Khi .GT. 0)                                                     HstySet 22
        Kli          = <hi;ListDampVars>                                        HstySet 23
        NumTrackVars = <hi;NumTrackVars>                                        HstySet 24
        DO  IV=1,NumTrackVars                                                   HstySet 25
          IF (<hi;ErrorMode> .ne. 3)  Cycle                                     HstySet 26
          IF (AA(<li;List>) .ne. 0.)  THEN                                      HstySet 27
c                 design value is nonzero - convert to delta                    HstySet 28
            <hi;MaxError>  = Abs(AA(<li;List>) * <hi;MaxError>)                 HstySet 29
            <hi;ErrorMode> = 1                                                  HstySet 30
          ELSE                                                                  HstySet 31
c              design value is zero - use ratio instead                         HstySet 32
            <hi;ErrorMode> = 2                                                  HstySet 33
            CALL MSGSIM(-3,II,II,II,II)                                         HstySet 34
            Jna = Jparent(<hi;Component>)                                       HstySet 35
            WRITE (IOUTPT, 9001)  (<na:NAME>,II=1,8), Khi, Jna, IV              HstySet 36
          ENDIF                                                                 HstySet 37
        ENDDO                                                                   HstySet 38
        Khi = <hi;Next>                                                         HstySet 39
      ENDDO  ! Khi                                                              HstySet 40
c                                                                               HstySet 41
      RETURN                                                                    HstySet 42
c                                                                               HstySet 43
 9001 FORMAT(14X,'Component: ',8A4,' has a history block'              /        HstySet 44
     &       14X,'with a Mode 3 error having a design value of zero.'  /        HstySet 45
     &       14X,'Will be reset to Mode 2.  Khi/Jna/Variable:',3I8     )        HstySet 46
      END                                                                       HstySet 47
      SUBROUTINE HstyClearFlag(Kli)                                             HstClr   2
c                                                                               HstClr   3
c              Clears a set of history iteration flags                          HstClr   4
c                                                                               HstClr   5
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               HstClr  12
c                                                                               HstClr  13
      IF (<li;Ident> .EQ. IdListOther)  THEN                                    HstClr  14
c              Clear a list of histories                                        HstClr  15
        NumItems = <li;NumItems>                                                HstClr  16
        DO  LI=1,NumItems                                                       HstClr  17
          Khi = <li;List>                                                       HstClr  18
          <hi.IterFlag> = 0                                                     HstClr  19
        ENDDO                                                                   HstClr  20
      ELSEIF (<li;Ident> .EQ. IdHistory)  THEN                                  HstClr  21
c              Clear a single history                                           HstClr  22
        Khi = Kli                                                               HstClr  23
        <hi.IterFlag> = 0                                                       HstClr  24
      ELSEIF (Kli .EQ. 1)  THEN                                                 HstClr  25
c              Clear all histories                                              HstClr  26
        Khi = Ihi                                                               HstClr  27
        DO WHILE (Khi .GT. 0)                                                   HstClr  28
          <hi.IterFlag> = 0                                                     HstClr  29
          Khi = <hi;Next>                                                       HstClr  30
        ENDDO  ! Khi                                                            HstClr  31
      ELSE                                                                      HstClr  32
c              Illegal                                                          HstClr  33
        CALL MSGSIM(-1,II,II,II,II)                                             HstClr  34
        WRITE (IOUTPT, 9100)                                                    HstClr  35
        IWinReturn = 1                                                          HstClr  36
      ENDIF                                                                     HstClr  37
c                                                                               HstClr  38
      RETURN                                                                    HstClr  39
c                                                                               HstClr  40
 9100 FORMAT(                                                                   HstClr  41
     &14x,'PROGRAMMER ERROR: Illegal Mode in HistoryClearFlag.'        )        HstClr  42
      END                                                                       HstClr  43
      SUBROUTINE HistoryInit(Kli)                                               HstIni   2
c                                                                               HstIni   3
c              Initializes the history blocks for a system of                   HstIni   4
c              components for a new set of iterations                           HstIni   5
c                                                                               HstIni   6
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               HstIni  13
      EQUIVALENCE (IV, L2)                                                      HstIni  14
c                                                                               HstIni  15
c              Checks are made in the order most frequently called              HstIni  16
c                                                                               HstIni  17
      IF (<li;Ident> .EQ. IdHistory)  THEN                                      HstIni  18
c              Single history                                                   HstIni  19
        Khi = Kli                                                               HstIni  20
        Call InitializeValues                                                   HstIni  21
      ELSEIF (Kli .EQ. 1)  THEN                                                 HstIni  22
c              Initialize all histories                                         HstIni  23
        Khi = Ihi                                                               HstIni  24
        DO WHILE (Khi .GT. 0)                                                   HstIni  25
          Call InitializeValues                                                 HstIni  26
          Khi = <hi;Next>                                                       HstIni  27
        ENDDO                                                                   HstIni  28
      ELSEIF (<li;Ident> .EQ. IdListOther)  THEN                                HstIni  29
c              Initialize a list of histories                                   HstIni  30
        NumItems = <li;NumItems>                                                HstIni  31
        DO  LI=1,NumItems                                                       HstIni  32
          Khi = <li;List>                                                       HstIni  33
          Call InitializeValues                                                 HstIni  34
        ENDDO                                                                   HstIni  35
      ELSE                                                                      HstIni  36
c              Illegal                                                          HstIni  37
        CALL MSGSIM(-1,II,II,II,II)                                             HstIni  38
        WRITE (IOUTPT, 9100)                                                    HstIni  39
        IWinReturn = 1                                                          HstIni  40
      ENDIF                                                                     HstIni  41
c                                                                               HstIni  42
      RETURN                                                                    HstIni  43
c                                                                               HstIni  44
c              Message formats                                                  HstIni  45
 9100 FORMAT(                                                                   HstIni  46
     &14x,'PROGRAMMER ERROR: Illegal Mode in HistoryInit.'             )        HstIni  47
c                                                                               HstIni  48
c                                                                               HstIni  49
      CONTAINS                                                                  HstIni  50
c ============== InitializeValues ============================================= HstIni  51
      Subroutine InitializeValues                                               HstIni  52
c                                                                               HstIni  53
      <hi.NumIter>       = 0                                                    HstIni  54
      <hi.NumIterRelax>  = 0                                                    HstIni  55
      <hi.Oscillating>   = 0                                                    HstIni  56
      <hi.Osc&RelaxCyc>  = 0                                                    HstIni  57
      <hi.DampFactor>    = 1.                                                   HstIni  58
      <hi.MaxDampFactor> = 1.                                                   HstIni  59
      <hi.Relax'>        = <hi;Relax>                                           HstIni  60
                                                                                HstIni  61
      Kl2              = <hi;ListDampVars>                                      HstIni  62
      NumDampVars      = <l2;NumItems>                                          HstIni  63
      NumTrackVars     = <hi;NumTrackVars>                                      HstIni  64
      DO  L2=1,NumDampVars                                                      HstIni  65
        <hi.LastVarsOut> = AA(<l2;List>)                                        HstIni  66
        IF (IV .LE. NumTrackVars)  THEN                                         HstIni  67
          <hi.ErrorVar>     = 0.                                                HstIni  68
          <hi.LastErrorVar> = 0.                                                HstIni  69
        ENDIF                                                                   HstIni  70
      ENDDO                                                                     HstIni  71
c                                                                               HstIni  72
c              When initializing all histories, don't initialize                HstIni  73
c              non-system level histories                                       HstIni  74
      IF (Kli .ne. 1  .OR.  <hi;System> .ne. 0)  <hi.IterFlag> = 1              HstIni  75
c                                                                               HstIni  76
      End Subroutine InitializeValues                                           HstIni  77
c                                                                               HstIni  78
      END                                                                       HstIni  79
      SUBROUTINE HstyError(Khi, Item, Error)                                    HstUpd   2
c                                                                               HstUpd   3
c              Updates a value in the history definition                        HstUpd   4
c                                                                               HstUpd   5
c              Khi     Pointer to the history                                   HstUpd   6
c              Item    The position in AA of the tracked variable               HstUpd   7
c              Value   The new value                                            HstUpd   8
c                                                                               HstUpd   9
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
c                                                                               HstUpd  13
      EQUIVALENCE (IV, LI)                                                      HstUpd  14
c        error index^   ^hi;ListDampVars index                                  HstUpd  15
c                                                                               HstUpd  16
c              Search the tracking variables for a match                        HstUpd  17
      NumTrackVars = <hi;NumTrackVars>                                          HstUpd  18
      Kli          = <hi;ListDampVars>                                          HstUpd  19
      DO  LI=1,NumTrackVars                                                     HstUpd  20
        IF (<li;List> .EQ. Item)  THEN                                          HstUpd  21
          <hi;MaxError>  = Error                                                HstUpd  22
          EXIT                                                                  HstUpd  23
        ENDIF                                                                   HstUpd  24
      ENDDO                                                                     HstUpd  25
c                                                                               HstUpd  26
      RETURN                                                                    HstUpd  27
      END                                                                       HstUpd  28
      SUBROUTINE IterLinkNode(Kli)                                              CnvStX   2
c                                                                               CnvStX   3
c              Sets the iteration flags in a list of nodes                      CnvStX   4
c              if any of the blocks need to iterate                             CnvStX   5
c                                                                               CnvStX   6
c              Kli    Pointer to the list of nodes                              CnvStX   7
c                                                                               CnvStX   8
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
c                                                                               CnvStX  12
      IF (<li;Ident> .ne. IdListNode)  RETURN                                   CnvStX  13
c                                                                               CnvStX  14
      NumItems = <li;NumItems>                                                  CnvStX  15
      DO  LI=1,NumItems                                                         CnvStX  16
        Knx = <li;List>                                                         CnvStX  17
        IF (<nx.IterFlag> .GT. 0)  GOTO 10                                      CnvStX  18
      ENDDO                                                                     CnvStX  19
      RETURN                                                                    CnvStX  20
c                                                                               CnvStX  21
c              If here, at least one block not converged                        CnvStX  22
   10 DO  LI=1,NumItems                                                         CnvStX  23
        Knx = <li;List>                                                         CnvStX  24
        <nx.IterFlag> = 1                                                       CnvStX  25
      ENDDO                                                                     CnvStX  26
c                                                                               CnvStX  27
      RETURN                                                                    CnvStX  28
      END                                                                       CnvStX  29
      FUNCTION NumHstyFlags(Kli)                                                ItRqdN   2
c                                                                               ItRqdN   3
c              Checks a list of histories to see if                             ItRqdN   4
c              iteration is required, and returns the count                     ItRqdN   5
c                                                                               ItRqdN   6
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
c                                                                               ItRqdN  12
c                                                                               ItRqdN  13
      NumHstyFlags = 0                                                          ItRqdN  14
c                                                                               ItRqdN  15
      IF (Kli .EQ. 1)  THEN                                                     ItRqdN  16
c              Look at all histories                                            ItRqdN  17
        Khi = Ihi                                                               ItRqdN  18
        DO WHILE (Khi .GT. 0)                                                   ItRqdN  19
          NumHstyFlags = NumHstyFlags + <hi.IterFlag>                           ItRqdN  20
          Khi          = <hi;Next>                                              ItRqdN  21
        ENDDO  ! Khi                                                            ItRqdN  22
      ELSEIF (<li;Ident> .EQ. IdListOther)  THEN                                ItRqdN  23
c              Look at a list                                                   ItRqdN  24
        NumItems    = <li;NumItems>                                             ItRqdN  25
        DO  LI=1,NumItems                                                       ItRqdN  26
          Khi          = <li;List>                                              ItRqdN  27
          NumHstyFlags = NumHstyFlags + <hi.IterFlag>                           ItRqdN  28
        ENDDO                                                                   ItRqdN  29
      ELSEIF (<li;Ident> .EQ. IdHistory)  THEN                                  ItRqdN  30
c              Look at a single history                                         ItRqdN  31
        Khi          = Kli                                                      ItRqdN  32
        NumHstyFlags = <hi.IterFlag>                                            ItRqdN  33
      ELSE                                                                      ItRqdN  34
c              Illegal                                                          ItRqdN  35
        CALL MSGSIM(-1,II,II,II,II)                                             ItRqdN  36
        WRITE (IOUTPT, 9100)                                                    ItRqdN  37
        IWinReturn = 1                                                          ItRqdN  38
      ENDIF                                                                     ItRqdN  39
c                                                                               ItRqdN  40
      RETURN                                                                    ItRqdN  41
c                                                                               ItRqdN  42
 9100 FORMAT(                                                                   ItRqdN  43
     &14x,'PROGRAMMER ERROR: Illegal Mode in NumHstyFlags.'            )        ItRqdN  44
      END                                                                       ItRqdN  45
      FUNCTION NumHstyIter(Khi)                                                 NumItr   2
c                                                                               NumItr   3
c              Returns the number of iterations in a history block              NumItr   4
c                                                                               NumItr   5
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
c                                                                               NumItr  11
c                                                                               NumItr  12
      IF (<hi;Ident> .EQ. IdHistory)  THEN                                      NumItr  13
c              Look at a single history                                         NumItr  14
        NumHstyIter = <hi.NumIter>                                              NumItr  15
      ELSE                                                                      NumItr  16
c              Illegal                                                          NumItr  17
        CALL MSGSIM(-1,II,II,II,II)                                             NumItr  18
        WRITE (IOUTPT, 9100)                                                    NumItr  19
        IWinReturn = 1                                                          NumItr  20
      ENDIF                                                                     NumItr  21
c                                                                               NumItr  22
      RETURN                                                                    NumItr  23
c                                                                               NumItr  24
 9100 FORMAT(                                                                   NumItr  25
     &14x,'PROGRAMMER ERROR: Illegal Mode in NumHstyIter.')                     NumItr  26
      END                                                                       NumItr  27
      LOGICAL FUNCTION IterReqdHsty(Kli)                                        ItRqdH   2
c                                                                               ItRqdH   3
c              Checks the iteration flag(s) in one or more histories            ItRqdH   4
c                                                                               ItRqdH   5
c              Kli       Pointer to the list of histories                       ItRqdH   6
c                                                                               ItRqdH   7
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
c                                                                               ItRqdH  13
      IterReqdHsty = .TRUE.                                                     ItRqdH  14
c                                                                               ItRqdH  15
c              Checks are made in the order most frequently called              ItRqdH  16
      IF (<li;Ident> .EQ. IdHistory)  THEN                                      ItRqdH  17
c              Single history                                                   ItRqdH  18
        Khi = Kli                                                               ItRqdH  19
        IF (<hi.IterFlag> .GT. 0)  RETURN                                       ItRqdH  20
      ELSEIF (<li;Ident> .EQ. IdListOther)  THEN                                ItRqdH  21
c              List of histories                                                ItRqdH  22
        NumItems = <li;NumItems>                                                ItRqdH  23
        DO  LI=1,NumItems                                                       ItRqdH  24
          Khi = <li;List>                                                       ItRqdH  25
          IF (<hi.IterFlag> .GT. 0)  RETURN                                     ItRqdH  26
        ENDDO                                                                   ItRqdH  27
      ELSEIF (Kli .EQ. 1)  THEN                                                 ItRqdH  28
c              Check all histories                                              ItRqdH  29
        Khi = Ihi                                                               ItRqdH  30
        DO WHILE (Khi .GT. 0)                                                   ItRqdH  31
          IF (<hi.IterFlag> .GT. 0  .AND.  <hi;System> .GT. 0)  RETURN          ItRqdH  32
          Khi = <hi;Next>                                                       ItRqdH  33
        ENDDO                                                                   ItRqdH  34
      ELSE                                                                      ItRqdH  35
c              Illegal                                                          ItRqdH  36
        CALL MSGSIM(-1,II,II,II,II)                                             ItRqdH  37
        WRITE (IOUTPT, 9100)                                                    ItRqdH  38
        IWinReturn = 1                                                          ItRqdH  39
      ENDIF                                                                     ItRqdH  40
c                                                                               ItRqdH  41
      IterReqdHsty = .FALSE.                                                    ItRqdH  42
c                                                                               ItRqdH  43
      RETURN                                                                    ItRqdH  44
c                                                                               ItRqdH  45
 9100 FORMAT(14x,'PROGRAMMER ERROR: Illegal Mode in IterReqdHsty.'     )        ItRqdH  46
      END                                                                       ItRqdH  47
      LOGICAL FUNCTION IterReqdNode(Mode, Kli)                                  ItRqdX   2
c                                                                               ItRqdX   3
c              Checks the iteration flag(s) in one or more nodes                ItRqdX   4
c                                                                               ItRqdX   5
c              Mode       Indicates whether flag should be cleared              ItRqdX   6
c                           0 = Don't clear the flags                           ItRqdX   7
c                           1   Clear the flags                                 ItRqdX   8
c              Kli        Pointer to the list of nodes                          ItRqdX   9
c                                                                               ItRqdX  10
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
c                                                                               ItRqdX  16
c              Checks are made in the order most frequently called              ItRqdX  17
      IF (<li;Ident> .EQ. IdListNode)  THEN                                     ItRqdX  18
c              List of nodes                                                    ItRqdX  19
        NumItems = <li;NumItems>                                                ItRqdX  20
        IF (Mode .EQ. 0)  THEN                                                  ItRqdX  21
c              Don't clear the iteration flags                                  ItRqdX  22
          IterReqdNode = .TRUE.                                                 ItRqdX  23
          DO  LI=1,NumItems                                                     ItRqdX  24
            Knx = <li;List>                                                     ItRqdX  25
            IF (<nx.IterFlag> .GT. 0  .and.                                     ItRqdX  26
     &          <nx;CheckIterFlg> .gt. 0)  RETURN                               ItRqdX  27
          ENDDO                                                                 ItRqdX  28
          IterReqdNode = .FALSE.                                                ItRqdX  29
        ELSE                                                                    ItRqdX  30
c              Clear the iteration flags                                        ItRqdX  31
          IterReqdNode = .FALSE.                                                ItRqdX  32
          DO  LI=1,NumItems                                                     ItRqdX  33
            Knx = <li;List>                                                     ItRqdX  34
            IF (<nx.IterFlag> .GT. 0)  THEN                                     ItRqdX  35
              IF (<nx;CheckIterFlg> .ne. 0)  IterReqdNode = .TRUE.              ItRqdX  36
              <nx.IterFlag> = 0                                                 ItRqdX  37
            ENDIF                                                               ItRqdX  38
          ENDDO                                                                 ItRqdX  39
        ENDIF                                                                   ItRqdX  40
      ELSEIF (Kli .EQ. 1)  THEN                                                 ItRqdX  41
c              Check all nodes                                                  ItRqdX  42
        Knx = Inx                                                               ItRqdX  43
        IF (Mode .EQ. 0)  THEN                                                  ItRqdX  44
c              Don't clear the iteration flags                                  ItRqdX  45
          IterReqdNode = .TRUE.                                                 ItRqdX  46
          DO WHILE (Knx .GT. 0)                                                 ItRqdX  47
            IF (<nx.IterFlag> .gt. 0  .and.  <nx;System> .gt. 0  .and.          ItRqdX  48
     &                                 <nx;CheckIterFlg> .gt. 0)  RETURN        ItRqdX  49
            Knx = <nx;Next>                                                     ItRqdX  50
          ENDDO                                                                 ItRqdX  51
          IterReqdNode = .FALSE.                                                ItRqdX  52
        ELSE  ! clear the iteration flags                                       ItRqdX  53
          IterReqdNode = .FALSE.                                                ItRqdX  54
          DO WHILE (Knx .GT. 0)                                                 ItRqdX  55
            IF (<nx.IterFlag> .gt. 0  .and.  <nx;System> .gt. 0) THEN           ItRqdX  56
              IF (<nx;CheckIterFlg> .ne. 0)  IterReqdNode = .TRUE.              ItRqdX  57
              <nx.IterFlag> = 0                                                 ItRqdX  58
            ENDIF                                                               ItRqdX  59
            Knx = <nx;Next>                                                     ItRqdX  60
          ENDDO                                                                 ItRqdX  61
        ENDIF                                                                   ItRqdX  62
      ELSEIF (<li;Ident> .EQ. IdNode)  THEN                                     ItRqdX  63
c              Single node                                                      ItRqdX  64
        Knx = Kli                                                               ItRqdX  65
        IF (<nx.IterFlag> .GT. 0)  THEN                                         ItRqdX  66
          IterReqdNode = .TRUE.                                                 ItRqdX  67
          IF (Mode .EQ. 1)  <nx.IterFlag> = 0                                   ItRqdX  68
        ELSE                                                                    ItRqdX  69
          IterReqdNode = .FALSE.                                                ItRqdX  70
        ENDIF                                                                   ItRqdX  71
      ELSE                                                                      ItRqdX  72
c              Illegal                                                          ItRqdX  73
        CALL MSGSIM(-1,II,II,II,II)                                             ItRqdX  74
        WRITE (IOUTPT, 9100)                                                    ItRqdX  75
        IWinReturn = 1                                                          ItRqdX  76
      ENDIF                                                                     ItRqdX  77
c                                                                               ItRqdX  78
      RETURN                                                                    ItRqdX  79
c                                                                               ItRqdX  80
 9100 FORMAT(14x,'PROGRAMMER ERROR: Illegal Mode in IterReqdNode.'     )        ItRqdX  81
      END                                                                       ItRqdX  82
      SUBROUTINE IterSetHsty(IterFlag, Khi)                                     ItSetH   2
c                                                                               ItSetH   3
c              Sets the iteration flag for a history block                      ItSetH   4
c                                                                               ItSetH   5
c              Khi        Pointer to the history block                          ItSetH   6
c              IterFlag   Flag value  0=don't iterate  1=iterate                ItSetH   7
c                                                                               ItSetH   8
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
c                                                                               ItSetH  11
      <hi.IterFlag> = MIN(1, IterFlag)                                          ItSetH  12
c                                                                               ItSetH  13
      RETURN                                                                    ItSetH  14
      END                                                                       ItSetH  15
      SUBROUTINE IterSetNode(IterFlag, Kli)                                     ItSetX   2
c                                                                               ItSetX   3
c              Sets the iteration flags in a list of nodes                      ItSetX   4
c                                                                               ItSetX   5
c              Kli       Pointer to the list of nodes                           ItSetX   6
c              IterFlag  Value of iteration flag                                ItSetX   7
c                                                                               ItSetX   8
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
c                                                                               ItSetX  14
      IF (<li;Ident> .EQ. IdListNode)  THEN                                     ItSetX  15
c              Set the flags in a list of nodes                                 ItSetX  16
        NumItems = <li;NumItems>                                                ItSetX  17
        DO  LI=1,NumItems                                                       ItSetX  18
          Knx           = <li;List>                                             ItSetX  19
          <nx.IterFlag> = IterFlag                                              ItSetX  20
        ENDDO                                                                   ItSetX  21
      ELSEIF (<li;Ident> .EQ. IdNode)  THEN                                     ItSetX  22
c              Set the flag in a single node                                    ItSetX  23
        Knx           = Kli                                                     ItSetX  24
        <nx.IterFlag> = IterFlag                                                ItSetX  25
      ELSEIF (Kli .EQ. 1)  THEN                                                 ItSetX  26
c              Set all node flags                                               ItSetX  27
        Knx = Inx                                                               ItSetX  28
        DO WHILE (Knx .GT. 0)                                                   ItSetX  29
          IF (<nx;System> .GT. 0)  <nx.IterFlag> = IterFlag                     ItSetX  30
          Knx = <nx;Next>                                                       ItSetX  31
        ENDDO                                                                   ItSetX  32
      ELSE                                                                      ItSetX  33
c              Illegal                                                          ItSetX  34
        CALL MSGSIM(-1,II,II,II,II)                                             ItSetX  35
        WRITE (IOUTPT, 9100)                                                    ItSetX  36
        IWinReturn = 1                                                          ItSetX  37
      ENDIF                                                                     ItSetX  38
c                                                                               ItSetX  39
      RETURN                                                                    ItSetX  40
c                                                                               ItSetX  41
 9100 FORMAT(                                                                   ItSetX  42
     &14x,'PROGRAMMER ERROR: Illegal Mode in IterSetNode.'             )        ItSetX  43
      END                                                                       ItSetX  44
      SUBROUTINE DetachHistory(KhiX)                                            DHsty    2
c                                                                               DHsty    3
c              Deletes a history block by removing it from the                  DHsty    4
c              chain of histories.  Also deletes from any list                  DHsty    5
c                                                                               DHsty    6
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               DHsty   13
c                                                                               DHsty   14
c              Skip if never created or already deleted                         DHsty   15
      IF (KhiX .eq. 0)  Return                                                  DHsty   16
c                                                                               DHsty   17
c              Verify that this is a history block                              DHsty   18
      Khi = KhiX                                                                DHsty   19
      IF (<hi;Ident> .ne.  IdHistory)  THEN                                     DHsty   20
        CALL MSGSIM(-1,II,II,II,II)                                             DHsty   21
        WRITE (IOUTPT,9001)                                                     DHsty   22
        CALL MessageBox( NULL,                                                  DHsty   23
     &    'Error deleting a convergence history -'//                            DHsty   24
     &     char(10)//char(13)//char(10)//char(13)//                             DHsty   25
     &    'Contact DOE-2 Support'//char(0),                                     DHsty   26
     &    'HVAC Setup Errors'//char(0),                                         DHsty   27
     &    MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                  DHsty   28
        IwinReturn = 1                                                          DHsty   29
        Return                                                                  DHsty   30
      ENDIF                                                                     DHsty   31
      <hi;Ident> = IdDeleted                                                    DHsty   32
c                                                                               DHsty   33
      IF (Khi .eq. Ihi)  THEN                                                   DHsty   34
c              last one created                                                 DHsty   35
        Ihi = <hi;Next>                                                         DHsty   36
      ELSE                                                                      DHsty   37
c              Find the blocks on either side of KhiX                           DHsty   38
        KhiNext = <hi;Next>                                                     DHsty   39
        Khi     = Ihi                                                           DHsty   40
        DO WHILE (Khi .gt. 0)                                                   DHsty   41
          IF (<hi;Next> .eq. KhiX)  THEN                                        DHsty   42
c              cut KhiX out of the chain                                        DHsty   43
            <hi;Next> = KhiNext                                                 DHsty   44
            Exit                                                                DHsty   45
          ENDIF                                                                 DHsty   46
          Khi = <hi;Next>                                                       DHsty   47
        ENDDO                                                                   DHsty   48
c                                                                               DHsty   49
      ENDIF                                                                     DHsty   50
c                                                                               DHsty   51
c              Remove from all lists                                            DHsty   52
      CALL DetachFromList(0, KhiX)                                              DHsty   53
      KhiX = 0                                                                  DHsty   54
c                                                                               DHsty   55
 9001 FORMAT(14X,'Programmer error:  DetachHistory passed invalid ptr.')        DHsty   56
      End                                                                       DHsty   57
      FUNCTION LocateHistory(Jcomp,JXcomp,Type,SubType)                         LHsty    2
c                                                                               LHsty    3
c              Locates a history block matching the criteria                    LHsty    4
c                                                                               LHsty    5
c              Type       Type of history block                                 LHsty    6
c              Component  Parent component of history block                     LHsty    7
c                                                                               LHsty    8
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               LHsty   14
      INTEGER Type, Subtype                                                     LHsty   15
c                                                                               LHsty   16
      LocateHistory = 0                                                         LHsty   17
c                                                                               LHsty   18
c              Find the node matching the criteria                              LHsty   19
      Knx = LocateNode(0,0,Jcomp,JXcomp, Type,SubType)                          LHsty   20
      IF (Knx .EQ. 0)  THEN                                                     LHsty   21
        CALL MSGSIM(-1,II,II,II,II)                                             LHsty   22
        WRITE (IOUTPT,9001)  Jcomp,JXcomp,Type,SubType                          LHsty   23
        CALL MessageBox( NULL,                                                  LHsty   24
     &    'Error locating a convergence history -'//                            LHsty   25
     &     char(10)//char(13)//char(10)//char(13)//                             LHsty   26
     &    'Contact DOE-2 Support'//char(0),                                     LHsty   27
     &    'HVAC Setup Errors'//char(0),                                         LHsty   28
     &    MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                  LHsty   29
        IwinReturn = 1                                                          LHsty   30
        RETURN                                                                  LHsty   31
      ENDIF                                                                     LHsty   32
c                                                                               LHsty   33
c              Now find this block's history block                              LHsty   34
c                                                                               LHsty   35
      Khi = Ihi                                                                 LHsty   36
      DO WHILE (Khi .GT. 0)                                                     LHsty   37
        IF (Knx .EQ. <hi;Component>)  THEN                                      LHsty   38
          LocateHistory = Khi                                                   LHsty   39
          EXIT                                                                  LHsty   40
        ENDIF                                                                   LHsty   41
        Khi = <hi;Next>                                                         LHsty   42
      ENDDO  ! Khi                                                              LHsty   43
c                                                                               LHsty   44
      IF (LocateHistory .EQ. 0)  THEN                                           LHsty   45
        CALL MSGSIM(-1,II,II,II,II)                                             LHsty   46
        WRITE (IOUTPT,9001)  Jcomp,JXcomp,Type,SubType                          LHsty   47
        CALL MessageBox( NULL,                                                  LHsty   48
     &    'Error locating a convergence history -'//                            LHsty   49
     &     char(10)//char(13)//char(10)//char(13)//                             LHsty   50
     &    'Contact DOE-2 Support'//char(0),                                     LHsty   51
     &    'HVAC Setup Errors'//char(0),                                         LHsty   52
     &    MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                  LHsty   53
        IwinReturn = 1                                                          LHsty   54
        RETURN                                                                  LHsty   55
      ENDIF                                                                     LHsty   56
c                                                                               LHsty   57
      RETURN                                                                    LHsty   58
c                                                                               LHsty   59
 9001 FORMAT(14X,'Programmer error:  LocateHistory has failed for'     /        LHsty   60
     &       14X,'Component/XComponent/Type/SubType:',4I8              )        LHsty   61
c                                                                               LHsty   62
      END                                                                       LHsty   63
      FUNCTION NewHistory(Jsys, Jsubsys, Jcomp,                                 NewHsty  2
     &                    ListIterNodes, ListDampVars,                          NewHsty  3
     &                    NumIterSticky, NumIterDamp, Relax,                    NewHsty  4
     &                    Track1, Error1, Mode1,  Track2, Error2, Mode2,        NewHsty  5
     &                    Track3, Error3, Mode3,  Track4, Error4, Mode4,        NewHsty  6
     &                    Track5, Error5, Mode5,  Track6, Error6, Mode6)        NewHsty  7
c                                                                               NewHsty  8
c              Jsys           Pointer to principal system                       NewHsty  9
c                               If zero then ignored in global iteration        NewHsty 10
c                               check                                           NewHsty 11
c              Jsubsys        Pointer to subsystem                              NewHsty 12
c                                                                               NewHsty 13
c              Jcomp          Pointer to the parent component or                NewHsty 14
c                               subcomponent                                    NewHsty 15
c              ListIterNodes  List of nodes whose iteration flags               NewHsty 16
c                               should be set when non-convergence              NewHsty 17
c                               detected                                        NewHsty 18
c              ListDampVars   List of variables to be damped, or pointer        NewHsty 19
c                               to node, or list of nodes.  If a node,          NewHsty 20
c                               then all of the node's variables will be        NewHsty 21
c                               damped. If zero, then only the tracking         NewHsty 22
c                               variables will be damped.                       NewHsty 23
c                                                                               NewHsty 24
c              NumIterSticky  Number of iterations above which                  NewHsty 25
c                               variables become "sticky" as long as            NewHsty 26
c                               the convergence criteria is satisfied           NewHsty 27
c                               (currently unused)                              NewHsty 28
c              NumIterDamp    Number of iterations after which variables        NewHsty 29
c                               should be damped; 0=don't damp                  NewHsty 30
c              Relax          Factor to ease damping once no oscillation        NewHsty 31
c                               Set to 1.0 if don't want relaxation             NewHsty 32
c                                                                               NewHsty 33
c              Track1         Absolute index in AA of first variable to         NewHsty 34
c                               be tracked for convergence                      NewHsty 35
c              Error1         Maximum error in tracked variable                 NewHsty 36
c              Mode1          Mode of error checking                            NewHsty 37
c                               1  Check delta                                  NewHsty 38
c                               2  Check ratio                                  NewHsty 39
c                               3  Check delta, fraction of design quantity     NewHsty 40
c                                                                               NewHsty 41
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               NewHsty 48
      INTEGER Track1, Track2, Track3, Track4, Track5, Track6,                   NewHsty 49
     &        Track(6), Mode(6)                                                 NewHsty 50
      REAL    Error(6)                                                          NewHsty 51
      LOGICAL Found                                                             NewHsty 52
      DATA    MaxTrackVars /6/                                                  NewHsty 53
      Save    Khi                                                               NewHsty 54
c                                                                               NewHsty 55
c              Load the tracking variables into processing array                NewHsty 56
      IF (Track1 .LE. 0)  GOTO 999                                              NewHsty 57
      Track(1) = Track1                                                         NewHsty 58
      Error(1) = Error1                                                         NewHsty 59
      Mode(1)  = Mode1                                                          NewHsty 60
      Track(2) = Track2                                                         NewHsty 61
      Error(2) = Error2                                                         NewHsty 62
      Mode(2)  = Mode2                                                          NewHsty 63
      Track(3) = Track3                                                         NewHsty 64
      Error(3) = Error3                                                         NewHsty 65
      Mode(3)  = Mode3                                                          NewHsty 66
      Track(4) = Track4                                                         NewHsty 67
      Error(4) = Error4                                                         NewHsty 68
      Mode(4)  = Mode4                                                          NewHsty 69
      Track(5) = Track5                                                         NewHsty 70
      Error(5) = Error5                                                         NewHsty 71
      Mode(5)  = Mode5                                                          NewHsty 72
      Track(6) = Track6                                                         NewHsty 73
      Error(6) = Error6                                                         NewHsty 74
      Mode(6)  = Mode6                                                          NewHsty 75
c                                                                               NewHsty 76
c              Create the list of variables to be damped if not                 NewHsty 77
c              already defined                                                  NewHsty 78
      Kli = 0                                                                   NewHsty 79
      Kid = ListDampVars                                                        NewHsty 80
      IF (<id;Ident> .EQ. IdListVar)  THEN                                      NewHsty 81
c              variables are already in the correct form                        NewHsty 82
        Kli = ListDampVars                                                      NewHsty 83
      ELSEIF (<id;Ident> .EQ. IdNode)  THEN                                     NewHsty 84
c              create a list of variables from a single node                    NewHsty 85
        CALL ListAddVars(Kli, ListDampVars, 0)                                  NewHsty 86
      ELSEIF (<id;Ident> .EQ. IdListNode)  THEN                                 NewHsty 87
c              create a list of variables from multiple nodes                   NewHsty 88
        CALL ListAddVars(Kli, ListDampVars, 0)                                  NewHsty 89
      ELSEIF (ListDampVars .EQ. 0)  THEN                                        NewHsty 90
c              the variables to be corrected are simply the tracking            NewHsty 91
c              variables                                                        NewHsty 92
        DO  IV=1,MaxTrackVars                                                   NewHsty 93
          IF (Track(IV) .GT. 0)  CALL ListAddVars(Kli, Track(IV), 0)            NewHsty 94
        ENDDO                                                                   NewHsty 95
      ELSE                                                                      NewHsty 96
c              illegal                                                          NewHsty 97
        GOTO 999                                                                NewHsty 98
      ENDIF                                                                     NewHsty 99
      NumDampVars = <li;NumItems>                                               NewHsty100
c                                                                               NewHsty101
c              Create a record and link                                         NewHsty102
      Length     = <+hi~Len> + NumDampVars                                      NewHsty103
      NewHistory = NewRecord(Length)                                            NewHsty104
      IF (Ihi .eq. 0)  THEN                                                     NewHsty105
        Ihi       = NewHistory                                                  NewHsty106
      ELSE                                                                      NewHsty107
        <hi;Next> = NewHistory                                                  NewHsty108
      ENDIF                                                                     NewHsty109
      Khi = NewHistory                                                          NewHsty110
c                                                                               NewHsty111
c              Process the tracking variables                                   NewHsty112
      DO  IV=1,MaxTrackVars                                                     NewHsty113
        IF (Track(IV) .EQ. 0)  EXIT                                             NewHsty114
        <hi;NumTrackVars> = IV                                                  NewHsty115
        Found             = .FALSE.                                             NewHsty116
        DO  I=1,NumDampVars                                                     NewHsty117
          LI = I                                                                NewHsty118
          IF (Track(IV) .EQ. <li;List>)  THEN                                   NewHsty119
            Found     = .TRUE.                                                  NewHsty120
            LI        = IV                                                      NewHsty121
            iSave     = <li;List>                                               NewHsty122
            <li;List> = Track(IV)                                               NewHsty123
            LI        = I                                                       NewHsty124
            <li;List> = iSave                                                   NewHsty125
            EXIT                                                                NewHsty126
          ENDIF                                                                 NewHsty127
        ENDDO                                                                   NewHsty128
        IF (.NOT. Found  .OR.  Error(IV) .LE. 0.                                NewHsty129
     &                   .OR.  Mode(IV)  .LT. 1                                 NewHsty130
     &                   .OR.  Mode(IV)  .GT. 3)  GOTO 999                      NewHsty131
        <hi;MaxError>  = Error(IV)                                              NewHsty132
        <hi;ErrorMode> = Mode(IV)                                               NewHsty133
      ENDDO                                                                     NewHsty134
c                                                                               NewHsty135
c              Create list for Last damped inputs                               NewHsty136
      <hi;LastVarsIn> = ListBlank(NumDampVars)                                  NewHsty137
c                                                                               NewHsty138
c              Transfer parameters                                              NewHsty139
      <hi;Ident>         = IdHistory                                            NewHsty140
      <hi;System>        = Jsys                                                 NewHsty141
      <hi;SubSystem>     = Jsubsys                                              NewHsty142
      <hi;Component>     = Jcomp                                                NewHsty143
      <hi;ListIterNodes> = ListIterNodes                                        NewHsty144
      <hi;ListDampVars>  = Kli                                                  NewHsty145
c                                                                               NewHsty146
c ??           NumIterSticky is disabled                 ??????????????????     NewHsty147
c ??  IF (NumIterSticky .GT. 0)  THEN                                           NewHsty148
c ??    <hi;NumIterSticky> = NumIterSticky                                      NewHsty149
c ??  ELSE                                                                      NewHsty150
        dummy = NumIterSticky                                                   NewHsty151
        <hi;NumIterSticky> = 88888                                              NewHsty152
c ??  ENDIF                                                                     NewHsty153
      IF (NumIterDamp .GT. 0)  THEN                                             NewHsty154
        <hi;NumIterDamp> = NumIterDamp                                          NewHsty155
      ELSE                                                                      NewHsty156
        <hi;NumIterDamp> = 88888                                                NewHsty157
      ENDIF                                                                     NewHsty158
      <hi;Relax>       = Relax                                                  NewHsty159
      <hi.DampFactor>  = 1.                                                     NewHsty160
c                                                                               NewHsty161
      RETURN                                                                    NewHsty162
c                                                                               NewHsty163
  999 Jna = Jparent(Jcomp)                                                      NewHsty164
      CALL MSGSIM(-1,II,II,II,II)                                               NewHsty165
      WRITE (IOUTPT, 9001)  (<na:NAME>,II=1,8)                                  NewHsty166
      CALL MessageBox( NULL,                                                    NewHsty167
     &  'Error setting up convergence history -'//                              NewHsty168
     &   char(10)//char(13)//char(10)//char(13)//                               NewHsty169
     &  'Contact DOE-2 Support'//char(0),                                       NewHsty170
     &  'HVAC Setup Errors'//char(0),                                           NewHsty171
     &  MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                    NewHsty172
      IwinReturn = 1                                                            NewHsty173
      RETURN                                                                    NewHsty174
c                                                                               NewHsty175
 9001 FORMAT(14X,'PROGRAMMER ERROR:  Illegal parameter in history'     /        NewHsty176
     &       14X,'creation for component: ',8A4                        )        NewHsty177
      END                                                                       NewHsty178
C ##############################################################################EndUse   2
C ##########                                                          ##########EndUse   3
C ##########                    INTERFACE END-USES                    ##########EndUse   4
C ##########                                                          ##########EndUse   5
C ##############################################################################EndUse   6
      SUBROUTINE EndUseCategories(Knx, EndUse)                                  EUCat    2
                                                                                EUCat    3
c              For an end-use block, calculates the fraction of energy          EUCat    4
c              in each end-use category.                                        EUCat    5
                                                                                EUCat    6
c              Knx      Pointer to the node                                     EUCat    7
c              EndUse   Array of end-use quantities                             EUCat    8
                                                                                EUCat    9
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      DIMENSION  EndUse(18)                                                     /EndUse/ 2
      DATA       NumEndUses /18/                                                /EndUse/ 3
                                                                                EUCat   13
      Double Precision  Total                                                   EUCat   14
                                                                                EUCat   15
c              Do not reallocate percentages if no load or end-use block        EUCat   16
      IF (<nx.Load> .eq. 0.  .or.  <nx;EndUse> .eq. 0)  Return                  EUCat   17
      Keu = <nx;EndUse>                                                         EUCat   18
                                                                                EUCat   19
c              Total of all end-use categories                                  EUCat   20
      Total = 0.                                                                EUCat   21
      IF (<nx.Load> .gt. 0.)  THEN                                              EUCat   22
        DO  IE=1,NumEndUses                                                     EUCat   23
          EndUseIE = Max(0., EndUse(IE))                                        EUCat   24
          <eu.EndUses> = EndUseIE                                               EUCat   25
          Total        = Total + EndUseIE                                       EUCat   26
        ENDDO                                                                   EUCat   27
      ELSE  ! negative demand is a heating load                                 EUCat   28
        DO  IE=1,NumEndUses                                                     EUCat   29
          EndUseIE = Min(0., EndUse(IE))                                        EUCat   30
          <eu.EndUses> = EndUseIE                                               EUCat   31
          Total        = Total + EndUseIE                                       EUCat   32
        ENDDO                                                                   EUCat   33
      ENDIF                                                                     EUCat   34
                                                                                EUCat   35
      IF (Total .eq. 0.) THEN                                                   EUCat   36
        <eu.1/TotalEU> = 0.                                                     EUCat   37
      ELSE                                                                      EUCat   38
        <eu.1/TotalEU> = 1. / Total                                             EUCat   39
      ENDIF                                                                     EUCat   40
                                                                                EUCat   41
      Return                                                                    EUCat   42
      End                                                                       EUCat   43
      FUNCTION NewEndUse(Jcomp)                                                 NewEU    2
c                                                                               NewEU    3
c              Creates an energy end-use list for a node                        NewEU    4
c              that is comprised of more than one end-use.                      NewEU    5
c                                                                               NewEU    6
c              Jcomp       Pointer to parent component                          NewEU    7
c              Keu         Pointer to this block                                NewEU    8
c                                                                               NewEU    9
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
                                                                                NewEU   14
      Save Keu                                                                  NewEU   15
c                                                                               NewEU   16
c              Create a record and link                                         NewEU   17
      NewEndUse = NewRecord(<+eu~Len>)                                          NewEU   18
      IF (Ieu .eq. 0)  THEN                                                     NewEU   19
        Ieu       = NewEndUse                                                   NewEU   20
      ELSE                                                                      NewEU   21
        <eu;Next> = NewEndUse                                                   NewEU   22
      ENDIF                                                                     NewEU   23
      Keu = NewEndUse                                                           NewEU   24
                                                                                NewEU   25
c              transfer parameters                                              NewEU   26
      <eu;Ident>     = IdEnduse                                                 NewEU   27
      <eu;Component> = Jcomp                                                    NewEU   28
c                                                                               NewEU   29
      RETURN                                                                    NewEU   30
      END                                                                       NewEU   31
C ##############################################################################Links    2
C ##########                                                          ##########Links    3
C ##########                       LINKS/LISTS                        ##########Links    4
C ##########                                                          ##########Links    5
C ##############################################################################Links    6
      SUBROUTINE ListAdd(Kli, Knx)                                              LstAdd   2
c                                                                               LstAdd   3
c              Adds an item or a list of items to a list, skipping any          LstAdd   4
c              redundant items.  May be called multiple times to expand         LstAdd   5
c              list                                                             LstAdd   6
c                                                                               LstAdd   7
c              Kli   Pointer to the list, must be initialized to zero           LstAdd   8
c                    before first call                                          LstAdd   9
c              Knx   Item to be added to the list: Component, node,             LstAdd  10
c                      or list                                                  LstAdd  11
c                                                                               LstAdd  12
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                         /IAX/    2
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
c                                                                               LstAdd  20
      IF (Knx .EQ. 0)  RETURN                                                   LstAdd  21
c                                                                               LstAdd  22
c              Create the list if it does not yet exist                         LstAdd  23
      IF (Kli .EQ. 0)  THEN                                                     LstAdd  24
        Kli = NewRecord(<+li~Len>)                                              LstAdd  25
        IF (<nx;Ident> .EQ. IdNode  .OR.                                        LstAdd  26
     &      <nx;Ident> .EQ. IdListNode)  THEN                                   LstAdd  27
          <li;Ident> = IdListNode                                               LstAdd  28
        ELSE                                                                    LstAdd  29
          <li;Ident> = IdListOther                                              LstAdd  30
        ENDIF                                                                   LstAdd  31
c              Link this list to the previous list.  Note that the              LstAdd  32
c              linkage propagates backwards from the most recent                LstAdd  33
        <li;Next> = Ili                                                         LstAdd  34
        Ili       = Kli                                                         LstAdd  35
      ELSE                                                                      LstAdd  36
c              Make sure the list is not closed (something else already         LstAdd  37
c              in AA after the end of the list)                                 LstAdd  38
        IF (Kli+<+li~Len>+<li;NumItems>-1 .ne. IAX)  THEN                       LstAdd  39
          CALL MSGSIM(-1,II,II,II,II)                                           LstAdd  40
          WRITE (IOUTPT,9001)                                                   LstAdd  41
          CALL MessageBox( NULL,                                                LstAdd  42
     &      'Item added to a closed list -'//                                   LstAdd  43
     &       char(10)//char(13)//char(10)//char(13)//                           LstAdd  44
     &      'Contact DOE-2 Support'//char(0),                                   LstAdd  45
     &      'HVAC Setup Errors'//char(0),                                       LstAdd  46
     &      MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                LstAdd  47
          IwinReturn = 1                                                        LstAdd  48
          RETURN                                                                LstAdd  49
        ENDIF                                                                   LstAdd  50
      ENDIF                                                                     LstAdd  51
c                                                                               LstAdd  52
c              Number of items already in list                                  LstAdd  53
      NumItems = <li;NumItems>                                                  LstAdd  54
c                                                                               LstAdd  55
      IF (<nx;Ident> .EQ. IdListNode  .OR.                                      LstAdd  56
     &    <nx;Ident> .EQ. IdListOther)  THEN                                    LstAdd  57
c              Add a list to the list                                           LstAdd  58
        Kl2       = Knx                                                         LstAdd  59
        NumItems2 = <l2;NumItems>                                               LstAdd  60
        DO  L2=1,NumItems2                                                      LstAdd  61
          Item = <l2;List>                                                      LstAdd  62
          Call AddItemToList                                                    LstAdd  63
        ENDDO                                                                   LstAdd  64
      ELSE                                                                      LstAdd  65
c              Add a single item to the list                                    LstAdd  66
        Item = Knx                                                              LstAdd  67
        Call AddItemToList                                                      LstAdd  68
      ENDIF                                                                     LstAdd  69
c                                                                               LstAdd  70
      <li;NumItems> = NumItems                                                  LstAdd  71
c                                                                               LstAdd  72
      RETURN                                                                    LstAdd  73
c                                                                               LstAdd  74
c              Message formats                                                  LstAdd  75
 9001 FORMAT(14X,'Programmer error:  Item added to closed list.'       )        LstAdd  76
c                                                                               LstAdd  77
c                                                                               LstAdd  78
      CONTAINS                                                                  LstAdd  79
c ============== AddItemToList ================================================ LstAdd  80
      Subroutine AddItemToList                                                  LstAdd  81
c                                                                               LstAdd  82
c              Merge the next item, deleting any redundant items                LstAdd  83
c                                                                               LstAdd  84
c              See if this item is already in the list                          LstAdd  85
      DO  LI=1,NumItems                                                         LstAdd  86
        IF (<li;List> .EQ. Item)  GOTO 10                                       LstAdd  87
      ENDDO                                                                     LstAdd  88
c              create space for the new entry and add the item                  LstAdd  89
      Idummy    = NewRecord(1)                                                  LstAdd  90
      NumItems  = NumItems + 1                                                  LstAdd  91
      LI        = NumItems                                                      LstAdd  92
      <li;List> = Item                                                          LstAdd  93
c                                                                               LstAdd  94
   10 CONTINUE                                                                  LstAdd  95
      End Subroutine AddItemToList                                              LstAdd  96
c                                                                               LstAdd  97
      END                                                                       LstAdd  98
      SUBROUTINE ListAddVars(Kli, Index1, Index2)                               LstAdV   2
c                                                                               LstAdV   3
c              Adds a range of AA variables (actually, the variables'           LstAdV   4
c              pointers) to a list, skipping over any redundant items           LstAdV   5
c                                                                               LstAdV   6
c              Kli      Pointer to the list, must be initialized to zero        LstAdV   7
c                         before first call                                     LstAdV   8
c              Index1   Pointer in AA to the item to be added to the            LstAdV   9
c                         list; may be a:                                       LstAdV  10
c                           Absolute pointer to a single variable               LstAdV  11
c                           Absolute pointer to the first variable              LstAdV  12
c                             in a set of variables                             LstAdV  13
c                           Pointer to a node - add all the node                LstAdV  14
c                             variables                                         LstAdV  15
c                           List of a set of nodes - add all                    LstAdV  16
c                             the variables in all the nodes                    LstAdV  17
c                           List of variable indexes                            LstAdV  18
c              Index2   When Index1 is the pointer to the first variable        LstAdV  19
c                         of a set of variables, the closing index              LstAdV  20
c                                                                               LstAdV  21
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                         /IAX/    2
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
c                                                                               LstAdV  29
c                                                                               LstAdV  30
      IF (Index1 .EQ. 0)  RETURN                                                LstAdV  31
c                                                                               LstAdV  32
c              Create the list if it does not yet exist                         LstAdV  33
      IF (Kli .EQ. 0)  THEN                                                     LstAdV  34
        Kli        = NewRecord(<+li~Len>)                                       LstAdV  35
        <li;Ident> = IdListVar                                                  LstAdV  36
c              Link this list to the previous list.  Note that the              LstAdV  37
c              linkage propagates backwards from the most recent                LstAdV  38
        <li;Next> = Ili                                                         LstAdV  39
        Ili       = Kli                                                         LstAdV  40
      ELSE                                                                      LstAdV  41
c              Make sure the list is not closed (something else already         LstAdV  42
c              in AA after the end of the list)                                 LstAdV  43
        IF (Kli+<+li~Len>+<li;NumItems>-1 .ne. IAX)  THEN                       LstAdV  44
          CALL MSGSIM(-1,II,II,II,II)                                           LstAdV  45
          WRITE (IOUTPT,9001)                                                   LstAdV  46
          CALL MessageBox( NULL,                                                LstAdV  47
     &      'Item added to a closed list -'//                                   LstAdV  48
     &       char(10)//char(13)//char(10)//char(13)//                           LstAdV  49
     &      'Contact DOE-2 Support'//char(0),                                   LstAdV  50
     &      'HVAC Setup Errors'//char(0),                                       LstAdV  51
     &      MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                LstAdV  52
          IwinReturn = 1                                                        LstAdV  53
          RETURN                                                                LstAdV  54
        ENDIF                                                                   LstAdV  55
      ENDIF                                                                     LstAdV  56
c                                                                               LstAdV  57
c              Number of items already in list                                  LstAdV  58
      NumItems = <li;NumItems>                                                  LstAdV  59
c                                                                               LstAdV  60
      Knx = Index1                                                              LstAdV  61
      IF (<nx;Ident> .EQ. IdNode)  THEN                                         LstAdV  62
c              Add a set of node variables                                      LstAdV  63
        CALL NodeProperties(<nx;Type>, xx, NumVars)                             LstAdV  64
        DO  IV=1,NumVars                                                        LstAdV  65
          Item = <#nx.Vars>                                                     LstAdV  66
          Call AddItemToList1                                                   LstAdV  67
        ENDDO                                                                   LstAdV  68
      ELSEIF (<nx;Ident> .EQ. IdListNode)  THEN                                 LstAdV  69
c              In a list of nodes, add the sets of node variables               LstAdV  70
        Kl2       = Knx                                                         LstAdV  71
        NumItems2 = <l2;NumItems>                                               LstAdV  72
        DO  L2=1,NumItems2                                                      LstAdV  73
          Knx = <l2;List>                                                       LstAdV  74
          CALL NodeProperties(<nx;Type>, xx, NumVars)                           LstAdV  75
          DO  IV=1,NumVars                                                      LstAdV  76
            Item = <#nx.Vars>                                                   LstAdV  77
            Call AddItemToList1                                                 LstAdV  78
          ENDDO                                                                 LstAdV  79
        ENDDO                                                                   LstAdV  80
      ELSEIF (<nx;Ident> .EQ. IdListVar)  THEN                                  LstAdV  81
c              Add a list of variables - the list must contain                  LstAdV  82
c              absolute indexes to the variables                                LstAdV  83
        Kl2       = Knx                                                         LstAdV  84
        NumItems2 = <l2;NumItems>                                               LstAdV  85
        DO  L2=1,NumItems2                                                      LstAdV  86
          Item = <l2;List>                                                      LstAdV  87
          Call AddItemToList1                                                   LstAdV  88
        ENDDO                                                                   LstAdV  89
      ELSEIF (Index2 .GT. 0)  THEN                                              LstAdV  90
c              Add a range of variables                                         LstAdV  91
        IF (Index2 .LT. Index1)  THEN                                           LstAdV  92
          CALL MSGSIM(-1,II,II,II,II)                                           LstAdV  93
          WRITE(IOUTPT,9002)                                                    LstAdV  94
          CALL MessageBox( NULL,                                                LstAdV  95
     &      'ListAddVars has negative range -'//                                LstAdV  96
     &       char(10)//char(13)//char(10)//char(13)//                           LstAdV  97
     &      'Contact DOE-2 Support'//char(0),                                   LstAdV  98
     &      'HVAC Setup Errors'//char(0),                                       LstAdV  99
     &      MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                LstAdV 100
          IwinReturn = 1                                                        LstAdV 101
          RETURN                                                                LstAdV 102
        ENDIF                                                                   LstAdV 103
        DO  Item=Index1,Index2                                                  LstAdV 104
          Call AddItemToList1                                                   LstAdV 105
        ENDDO                                                                   LstAdV 106
      ELSE                                                                      LstAdV 107
c              Add a single item to the list                                    LstAdV 108
        Item = Index1                                                           LstAdV 109
        Call AddItemToList1                                                     LstAdV 110
      ENDIF                                                                     LstAdV 111
c                                                                               LstAdV 112
      <li;NumItems> = NumItems                                                  LstAdV 113
c                                                                               LstAdV 114
      RETURN                                                                    LstAdV 115
c                                                                               LstAdV 116
c              Message formats                                                  LstAdV 117
 9001 FORMAT(14X,'Programmer error:  Item added to closed list.'       )        LstAdV 118
 9002 FORMAT(14X,'Programmer error:  ListAddVars has negative range.'  )        LstAdV 119
c                                                                               LstAdV 120
c                                                                               LstAdV 121
      CONTAINS                                                                  LstAdV 122
c ============== AddItemToList1 =============================================== LstAdV 123
      Subroutine AddItemToList1                                                 LstAdV 124
c                                                                               LstAdV 125
c              Merge the next item, deleting any redundant items                LstAdV 126
c                                                                               LstAdV 127
c              See if this item is already in the list                          LstAdV 128
      DO  LI=1,NumItems                                                         LstAdV 129
        IF (<li;List> .EQ. Item)  GOTO 10                                       LstAdV 130
      ENDDO                                                                     LstAdV 131
c              create space for the new entry and add the item                  LstAdV 132
      Idummy    = NewRecord(1)                                                  LstAdV 133
      NumItems  = NumItems + 1                                                  LstAdV 134
      LI        = NumItems                                                      LstAdV 135
      <li;List> = Item                                                          LstAdV 136
c                                                                               LstAdV 137
   10 CONTINUE                                                                  LstAdV 138
      End Subroutine AddItemToList1                                             LstAdV 139
c                                                                               LstAdV 140
      END                                                                       LstAdV 141
      FUNCTION ListBlank(Length)                                                LstBlk   2
c                                                                               LstBlk   3
c              Creates a blank list of the specified Length                     LstBlk   4
c                                                                               LstBlk   5
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                         /IAX/    2
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
c                                                                               LstBlk  13
c              Create the list                                                  LstBlk  14
      Kli           = NewRecord(<+li~Len>+Length)                               LstBlk  15
      <li;Ident>    = IdListOther                                               LstBlk  16
      <li;NumItems> = Length                                                    LstBlk  17
c                                                                               LstBlk  18
c              Link this list to the previous list.  Note that the              LstBlk  19
c              linkage propagates backwards from the most recent                LstBlk  20
      <li;Next> = Ili                                                           LstBlk  21
      Ili       = Kli                                                           LstBlk  22
c                                                                               LstBlk  23
      ListBlank = Kli                                                           LstBlk  24
c                                                                               LstBlk  25
      RETURN                                                                    LstBlk  26
      END                                                                       LstBlk  27
      SUBROUTINE DetachFromList(Klx, Kxx)                                       LstsDch  2
c                                                                               LstsDch  3
c              Detaches an item, such as a node or history block,               LstsDch  4
c              from all lists                                                   LstsDch  5
c                                                                               LstsDch  6
c              Klx   Pointer to the list; if zero then all lists                LstsDch  7
c              Kxx   Pointer to the item to be detached                         LstsDch  8
c                                                                               LstsDch  9
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               LstsDch 16
                                                                                LstsDch 17
      Kli = Klx                                                                 LstsDch 18
                                                                                LstsDch 19
c              Loop thru all lists, and eliminate all references to             LstsDch 20
c              this component                                                   LstsDch 21
      IF (Kli .gt. 0)  THEN                                                     LstsDch 22
c              Verify that this pointer is to a list                            LstsDch 23
        IF (<li;Ident> .ne.  IdListNode  .and.                                  LstsDch 24
     &      <li;Ident> .ne.  IdListOther)  THEN                                 LstsDch 25
          CALL MSGSIM(-1,II,II,II,II)                                           LstsDch 26
          WRITE (IOUTPT,9001)                                                   LstsDch 27
          CALL MessageBox( NULL,                                                LstsDch 28
     &      'Error detaching from a list -'//                                   LstsDch 29
     &       char(10)//char(13)//char(10)//char(13)//                           LstsDch 30
     &      'Contact DOE-2 Support'//char(0),                                   LstsDch 31
     &      'HVAC Setup Errors'//char(0),                                       LstsDch 32
     &      MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                LstsDch 33
          IwinReturn = 1                                                        LstsDch 34
          Return                                                                LstsDch 35
        ENDIF                                                                   LstsDch 36
        Call DetachKxx                                                          LstsDch 37
      ELSE                                                                      LstsDch 38
        Kli = Ili                                                               LstsDch 39
        DO WHILE (Kli .GT. 0)                                                   LstsDch 40
          Call DetachKxx                                                        LstsDch 41
          Kli = <li;Next>                                                       LstsDch 42
        ENDDO                                                                   LstsDch 43
      ENDIF                                                                     LstsDch 44
c                                                                               LstsDch 45
      RETURN                                                                    LstsDch 46
c                                                                               LstsDch 47
c              Message formats                                                  LstsDch 48
 9001 FORMAT(14X,'Programmer error:  DetachFromList passed invalid ptr')        LstsDch 49
c                                                                               LstsDch 50
c                                                                               LstsDch 51
      CONTAINS                                                                  LstsDch 52
c ============== DetachKxx ==================================================   LstsDch 53
      Subroutine DetachKxx                                                      LstsDch 54
c                                                                               LstsDch 55
      NumItems = <li;NumItems>                                                  LstsDch 56
      DO  LI=1,NumItems                                                         LstsDch 57
        IF (<li;List> .ne. Kxx)  Cycle                                          LstsDch 58
c              component found in this list                                     LstsDch 59
        Kl2 = Kli                                                               LstsDch 60
        Kl3 = Kli                                                               LstsDch 61
        NumItems = NumItems-1                                                   LstsDch 62
        DO  L2=LI,NumItems                                                      LstsDch 63
          L3 = L2+1                                                             LstsDch 64
          <l2;List> = <l3;List>                                                 LstsDch 65
        ENDDO                                                                   LstsDch 66
        <li;NumItems> = NumItems                                                LstsDch 67
        Exit                                                                    LstsDch 68
      ENDDO                                                                     LstsDch 69
c                                                                               LstsDch 70
      End Subroutine DetachKxx                                                  LstsDch 71
c                                                                               LstsDch 72
      End                                                                       LstsDch 73
      SUBROUTINE ListHstys(Kli, Jsys, Jsubsys, Jcomp)                           LstHst   2
c                                                                               LstHst   3
c              Creates a list of the history blocks based on a set of           LstHst   4
c              search criteria                                                  LstHst   5
c                                                                               LstHst   6
c              Kli            Pointer to the list; this routine may             LstHst   7
c                               be called sequentially to add to the list       LstHst   8
c              Jsys           The system of components that the list            LstHst   9
c                               must have in common                             LstHst  10
c              JsubSys        The subsystem of components that the list         LstHst  11
c                               must have in common                             LstHst  12
c              Jcomp          Pointer to parent component that the list         LstHst  13
c                               must have in common                             LstHst  14
c              Kli            Pointer to this list                              LstHst  15
c                                                                               LstHst  16
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
c                                                                               LstHst  23
c              Loop thru all history blocks and find the                        LstHst  24
c              ones that match the criteria                                     LstHst  25
c              Pointer to first block                                           LstHst  26
      Khi = Ihi                                                                 LstHst  27
      DO WHILE (Khi .GT. 0)                                                     LstHst  28
        IF ((<hi;System>     .EQ. Jsys     .OR.  Jsys    .EQ. 0) .AND.          LstHst  29
     &      (<hi;SubSystem>  .EQ. Jsubsys  .OR.  Jsubsys .EQ. 0) .AND.          LstHst  30
     &      (<hi;Component>  .EQ. Jcomp    .OR.  Jcomp   .EQ. 0))               LstHst  31
     &    CALL ListAdd(Kli, Khi)                                                LstHst  32
        Khi = <hi;Next>                                                         LstHst  33
      ENDDO                                                                     LstHst  34
c                                                                               LstHst  35
      RETURN                                                                    LstHst  36
      END                                                                       LstHst  37
      SUBROUTINE ListNodes(Kli, Jsys,Jsubsys,Jcomp,JXcomp, Type,SubType)        LstNod   2
c                                                                               LstNod   3
c              Creates a list of the nodes based on a set of                    LstNod   4
c              search criteria                                                  LstNod   5
c                                                                               LstNod   6
c              Kli       Pointer to list; if non-zero add to existing           LstNod   7
c                                                                               LstNod   8
c              Search criteria:                                                 LstNod   9
c                Jsys         Pointer to parent system                          LstNod  10
c                Jsubsys      Pointer to parent subsystem                       LstNod  11
c                Jcomp        Pointer to parent component                       LstNod  12
c                JXcomp       Pointer to component that parent Xfaces           LstNod  13
c                Type         Type of node - see NewNode for a                  LstNod  14
c                               description of Types and Subtypes               LstNod  15
c                SubType      Subtype of node                                   LstNod  16
c                                                                               LstNod  17
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
c                                                                               LstNod  24
      INTEGER Type, SubType                                                     LstNod  25
c                                                                               LstNod  26
c              Loop thru all nodes and find the                                 LstNod  27
c              ones that match the criteria                                     LstNod  28
c              Pointer to first block                                           LstNod  29
      Knx = Inx                                                                 LstNod  30
      DO WHILE (Knx .GT. 0)                                                     LstNod  31
        IF ((<nx;System>     .EQ. Jsys     .OR.  Jsys    .EQ. 0) .AND.          LstNod  32
     &      (<nx;SubSystem>  .EQ. Jsubsys  .OR.  Jsubsys .EQ. 0) .AND.          LstNod  33
     &      (<nx;Component>  .EQ. Jcomp    .OR.  Jcomp   .EQ. 0) .AND.          LstNod  34
     &      (<nx;XComponent> .EQ. JXcomp   .OR.  JXcomp  .EQ. 0) .AND.          LstNod  35
     &      (<nx;Type>       .EQ. Type     .OR.  Type    .EQ. 0) .AND.          LstNod  36
     &      (<nx;SubType>    .EQ. SubType  .OR.  Subtype .EQ. 0))               LstNod  37
     &    CALL ListAdd(Kli, Knx)                                                LstNod  38
        Knx = <nx;Next>                                                         LstNod  39
      ENDDO                                                                     LstNod  40
c                                                                               LstNod  41
      RETURN                                                                    LstNod  42
      END                                                                       LstNod  43
      SUBROUTINE ListHstysComponent(Kli, Kid)                                   LstHstC  2
c                                                                               LstHstC  3
c              Creates a list of the histories belonging to a component         LstHstC  4
c                                                                               LstHstC  5
c              Kli   Pointer to list; if non-zero add to existing               LstHstC  6
c              Kid   May be a:                                                  LstHstC  7
c                      node                                                     LstHstC  8
c                      Component                                                LstHstC  9
c                      List of nodes or components                              LstHstC 10
c                                                                               LstHstC 11
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
c                                                                               LstHstC 18
c                                                                               LstHstC 19
      IF (<id;Ident> .EQ. IdNode)  THEN                                         LstHstC 20
c              Find all histories belonging to same component                   LstHstC 21
c              as this node                                                     LstHstC 22
        Knx   = Kid                                                             LstHstC 23
        Jcomp = <nx;Component>                                                  LstHstC 24
        Call FindComponentHstys                                                 LstHstC 25
      ELSEIF (<id;Ident> .EQ. IdListNode)  THEN                                 LstHstC 26
c              Find all histories belonging to the same components              LstHstC 27
c              as this list of nodes                                            LstHstC 28
        Kl2 = Kid                                                               LstHstC 29
        NumItems = <l2;NumItems>                                                LstHstC 30
        DO  L2=1,NumItems                                                       LstHstC 31
          Knx   = <l2;List>                                                     LstHstC 32
          Jcomp = <nx;Component>                                                LstHstC 33
          Call FindComponentHstys                                               LstHstC 34
        ENDDO                                                                   LstHstC 35
      ELSEIF (<id;Ident> .EQ. IdListOther  .OR.                                 LstHstC 36
     &        <id;Ident> .EQ. IdListVar  )  THEN                                LstHstC 37
c              Find all histories belonging to this list of components          LstHstC 38
        Kl2 = Kid                                                               LstHstC 39
        NumItems = <l2;NumItems>                                                LstHstC 40
        DO  L2=1,NumItems                                                       LstHstC 41
          Jcomp = <l2;List>                                                     LstHstC 42
          Call FindComponentHstys                                               LstHstC 43
        ENDDO                                                                   LstHstC 44
      ELSEIF (Kid .GT. 0)  THEN                                                 LstHstC 45
c              Find all nodes belonging to this component                       LstHstC 46
        Jcomp = Kid                                                             LstHstC 47
        Call FindComponentHstys                                                 LstHstC 48
      ENDIF                                                                     LstHstC 49
c                                                                               LstHstC 50
      RETURN                                                                    LstHstC 51
c                                                                               LstHstC 52
c                                                                               LstHstC 53
      CONTAINS                                                                  LstHstC 54
c ============== FindComponentHstys =========================================== LstHstC 55
      Subroutine FindComponentHstys                                             LstHstC 56
c                                                                               LstHstC 57
c              Finds all the histories belonging to a component                 LstHstC 58
c                                                                               LstHstC 59
      Khi = Ihi                                                                 LstHstC 60
      DO WHILE (Khi .GT. 0)                                                     LstHstC 61
        IF (<hi;Component> .EQ. Jcomp)  CALL ListAdd(Kli, Khi)                  LstHstC 62
        Khi = <hi;Next>                                                         LstHstC 63
      ENDDO                                                                     LstHstC 64
c                                                                               LstHstC 65
      End Subroutine FindComponentHstys                                         LstHstC 66
c                                                                               LstHstC 67
      END                                                                       LstHstC 68
      SUBROUTINE ListNodesComponent(Kli, Kid)                                   LstNodC  2
c                                                                               LstNodC  3
c              Creates a list of the nodes belonging to a component             LstNodC  4
c                                                                               LstNodC  5
c              Kli   Pointer to list; if non-zero add to existing               LstNodC  6
c              Kid   May be a:                                                  LstNodC  7
c                      node                                                     LstNodC  8
c                      Component                                                LstNodC  9
c                      List of nodes or components                              LstNodC 10
c                                                                               LstNodC 11
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
c                                                                               LstNodC 18
c                                                                               LstNodC 19
      IF (<id;Ident> .EQ. IdNode)  THEN                                         LstNodC 20
c              Find all nodes belonging to same component as this node          LstNodC 21
        Knx   = Kid                                                             LstNodC 22
        Jcomp = <nx;Component>                                                  LstNodC 23
        Call FindComponentNodes                                                 LstNodC 24
      ELSEIF (<id;Ident> .EQ. IdListNode)  THEN                                 LstNodC 25
c              Find all nodes belonging to the same components as this          LstNodC 26
c              list of nodes                                                    LstNodC 27
        Kl2 = Kid                                                               LstNodC 28
        NumItems = <l2;NumItems>                                                LstNodC 29
        DO  L2=1,NumItems                                                       LstNodC 30
          Knx   = <l2;List>                                                     LstNodC 31
          Jcomp = <nx;Component>                                                LstNodC 32
          Call FindComponentNodes                                               LstNodC 33
        ENDDO                                                                   LstNodC 34
      ELSEIF (<id;Ident> .EQ. IdListOther  .OR.                                 LstNodC 35
     &        <id;Ident> .EQ. IdListVar  )  THEN                                LstNodC 36
c              Find all nodes belonging to this list of components              LstNodC 37
        Kl2 = Kid                                                               LstNodC 38
        NumItems = <l2;NumItems>                                                LstNodC 39
        DO  L2=1,NumItems                                                       LstNodC 40
          Jcomp = <l2;List>                                                     LstNodC 41
          Call FindComponentNodes                                               LstNodC 42
        ENDDO                                                                   LstNodC 43
      ELSEIF (Kid .GT. 0)  THEN                                                 LstNodC 44
c              Find all nodes belonging to this component                       LstNodC 45
        Jcomp = Kid                                                             LstNodC 46
        Call FindComponentNodes                                                 LstNodC 47
      ENDIF                                                                     LstNodC 48
c                                                                               LstNodC 49
      RETURN                                                                    LstNodC 50
c                                                                               LstNodC 51
c                                                                               LstNodC 52
      CONTAINS                                                                  LstNodC 53
c ============== FindComponentNodes =========================================== LstNodC 54
      Subroutine FindComponentNodes                                             LstNodC 55
c                                                                               LstNodC 56
c              Finds all the nodes belonging to a component                     LstNodC 57
c                                                                               LstNodC 58
      Knx = Inx                                                                 LstNodC 59
      DO WHILE (Knx .GT. 0)                                                     LstNodC 60
        IF (<nx;Component> .EQ. Jcomp)  CALL ListAdd(Kli, Knx)                  LstNodC 61
        Knx = <nx;Next>                                                         LstNodC 62
      ENDDO                                                                     LstNodC 63
c                                                                               LstNodC 64
      End Subroutine FindComponentNodes                                         LstNodC 65
c                                                                               LstNodC 66
      END                                                                       LstNodC 67
      SUBROUTINE ListXNodes(Kli, KliX)                                          LstXNx   2
c                                                                               LstXNx   3
c              Creates a list of Xnodes corresponding to a list                 LstXNx   4
c              of nodes                                                         LstXNx   5
c                                                                               LstXNx   6
c              Kli    A list of nodes                                           LstXNx   7
c              KliX   A corresponding list of Xnodes                            LstXNx   8
c                                                                               LstXNx   9
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               LstXNx  15
      IF (Kli .EQ. 0)  RETURN                                                   LstXNx  16
c                                                                               LstXNx  17
c              Check to see if legitimate list                                  LstXNx  18
      IF (<li;Ident> .ne. IdListNode)  THEN                                     LstXNx  19
        Call ErrorMsg                                                           LstXNx  20
        RETURN                                                                  LstXNx  21
      ENDIF                                                                     LstXNx  22
c                                                                               LstXNx  23
      NumItems = <li;NumItems>                                                  LstXNx  24
      IF (Kli .EQ. KliX)  THEN                                                  LstXNx  25
c              Substitute Xnodes for nodes in the same list                     LstXNx  26
        Kl2 = Kli                                                               LstXNx  27
        L2  = 0                                                                 LstXNx  28
        DO  LI=1,NumItems                                                       LstXNx  29
          Knx = <li;List>                                                       LstXNx  30
          IF (<nx;Ident> .EQ. IdNode)  THEN                                     LstXNx  31
c              only substitute if Xnode is non-zero                             LstXNx  32
            IF (<nx;Xnode> .GT. 0)  THEN                                        LstXNx  33
              L2 = L2 + 1                                                       LstXNx  34
              <l2;List> = <nx;Xnode>                                            LstXNx  35
            ENDIF                                                               LstXNx  36
          ELSE                                                                  LstXNx  37
c              not a node, no substitution possible                             LstXNx  38
            Call ErrorMsg                                                       LstXNx  39
            RETURN                                                              LstXNx  40
          ENDIF                                                                 LstXNx  41
        ENDDO                                                                   LstXNx  42
        <l2;NumItems> = L2                                                      LstXNx  43
      ELSE                                                                      LstXNx  44
c              Create an entirely new list of Xnodes                            LstXNx  45
        KliX = 0                                                                LstXNx  46
        DO  LI=1,NumItems                                                       LstXNx  47
          Knx = <li;List>                                                       LstXNx  48
          Knx = <nx;Xnode>                                                      LstXNx  49
          IF (<nx;Ident> .EQ. IdNode)  THEN                                     LstXNx  50
            CALL ListAdd(KliX, Knx)                                             LstXNx  51
          ELSEIF (<nx;Ident> .EQ. IdListNode)  THEN                             LstXNx  52
            Kl2 = Knx                                                           LstXNx  53
            NumItems2 = <l2;NumItems>                                           LstXNx  54
            DO  L2=1,NumItems2                                                  LstXNx  55
              Knx = <l2;List>                                                   LstXNx  56
              CALL ListAdd(KliX, Knx)                                           LstXNx  57
            ENDDO                                                               LstXNx  58
          ELSEIF (Knx .EQ. 0)  THEN                                             LstXNx  59
c              this block does not have an Xnode                                LstXNx  60
          ELSE                                                                  LstXNx  61
            Call ErrorMsg                                                       LstXNx  62
            RETURN                                                              LstXNx  63
          ENDIF                                                                 LstXNx  64
        ENDDO                                                                   LstXNx  65
      ENDIF  ! Mode                                                             LstXNx  66
c                                                                               LstXNx  67
      RETURN                                                                    LstXNx  68
c                                                                               LstXNx  69
c                                                                               LstXNx  70
      CONTAINS                                                                  LstXNx  71
c ============== ErrorMsg ===================================================== LstXNx  72
      Subroutine ErrorMsg                                                       LstXNx  73
c                                                                               LstXNx  74
      CALL MSGSIM(-1,II,II,II,II)                                               LstXNx  75
      WRITE (IOUTPT,9001)                                                       LstXNx  76
      CALL MessageBox( NULL,                                                    LstXNx  77
     &  'Error in list creation -'//                                            LstXNx  78
     &  char(10)//char(13)//char(10)//char(13)//                                LstXNx  79
     &  'Contact DOE-2 Support'//char(0),                                       LstXNx  80
     &  'ListXNodes Errors'//char(0),                                           LstXNx  81
     &  MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                    LstXNx  82
        IwinReturn = 1                                                          LstXNx  83
c                                                                               LstXNx  84
c              Message formats                                                  LstXNx  85
 9001 FORMAT(14X,'** PROGRAMMER ERROR:  ListXNodes generated an error'   /      LstXNx  86
     &       14X,'when creating a list.  Please contact DOE-2 program' /        LstXNx  87
     &       14X,'support.'                                            )        LstXNx  88
                                                                                LstXNx  89
      End Subroutine ErrorMsg                                                   LstXNx  90
c                                                                               LstXNx  91
      END                                                                       LstXNx  92
      FUNCTION LocateNode(Jsys,Jsubsys,Jcomp,JXcomp, Type,SubType)              LocNod   2
c                                                                               LocNod   3
c              Finds a node matching the criteria                               LocNod   4
c                                                                               LocNod   5
c              Jsys           Pointer to matching parent system                 LocNod   6
c              Jsubsys        Pointer to matching parent subsystem              LocNod   7
c              Jcomp          Pointer to matching parent component              LocNod   8
c              JXcomp         Pointer to matching Xfaced component              LocNod   9
c              Type           Type of matching node                             LocNod  10
c              SubType        Subtype of matching node                          LocNod  11
c                                                                               LocNod  12
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
c                                                                               LocNod  17
      INTEGER Type, SubType                                                     LocNod  18
c                                                                               LocNod  19
c              Pointer to matching block                                        LocNod  20
      LocateNode = 0                                                            LocNod  21
c                                                                               LocNod  22
c              Loop thru all nodes and find the                                 LocNod  23
c              one that matches the criteria                                    LocNod  24
c              Pointer to first block                                           LocNod  25
      Knx = Inx                                                                 LocNod  26
      DO WHILE (Knx .GT. 0)                                                     LocNod  27
        IF ((<nx;System>     .EQ. Jsys     .OR.  Jsys    .EQ. 0)  .AND.         LocNod  28
     &      (<nx;SubSystem>  .EQ. Jsubsys  .OR.  Jsubsys .EQ. 0)  .AND.         LocNod  29
     &      (<nx;Component>  .EQ. Jcomp    .OR.  Jcomp   .EQ. 0)  .AND.         LocNod  30
     &      (<nx;XComponent> .EQ. JXcomp   .OR.  JXcomp  .EQ. 0)  .AND.         LocNod  31
     &      (<nx;Type>       .EQ. Type     .OR.  Type    .EQ. 0)  .AND.         LocNod  32
     &      (<nx;SubType>    .EQ. SubType  .OR.  Subtype .EQ. 0))  THEN         LocNod  33
          LocateNode = Knx                                                      LocNod  34
          EXIT                                                                  LocNod  35
        ENDIF                                                                   LocNod  36
        Knx = <nx;Next>                                                         LocNod  37
      ENDDO                                                                     LocNod  38
c                                                                               LocNod  39
      RETURN                                                                    LocNod  40
      END                                                                       LocNod  41
      FUNCTION KXXComponent(Knx)                                                JXXfc    2
c                                                                               JXXfc    3
c              Gets the pointer to the node to which the node interfaces        JXXfc    4
c                                                                               JXXfc    5
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
c                                                                               JXXfc    8
      KXXComponent = <nx;Xnode>                                                 JXXfc    9
c                                                                               JXXfc   10
      RETURN                                                                    JXXfc   11
      END                                                                       JXXfc   12
      FUNCTION MatchingSubType(Type, SubType)                                   MtchST   2
c                                                                               MtchST   3
c              Determine the matching subtype for a node when                   MtchST   4
c              linking that block to another                                    MtchST   5
c                                                                               MtchST   6
c              Type     Type of node                                            MtchST   7
c              SubType  SubType of node                                         MtchST   8
c                                                                               MtchST   9
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
c                                                                               MtchST  13
      INTEGER Type, SubType                                                     MtchST  14
c                                                                               MtchST  15
      SELECT CASE (Type)                                                        MtchST  16
        CASE (53)  ! Plant equipment                                            MtchST  17
          MatchingSubType = -SubType                                            MtchST  18
        CASE (65)  ! Refg-plant equipment                                       MtchST  19
          MatchingSubType = -SubType                                            MtchST  20
        CASE DEFAULT                                                            MtchST  21
          SELECT CASE (SubType)                                                 MtchST  22
            CASE (1)  ! Supply or Inlet                                         MtchST  23
              MatchingSubType = 2                                               MtchST  24
            CASE (2)  ! Demand or Outlet                                        MtchST  25
              MatchingSubType = 1                                               MtchST  26
            CASE DEFAULT                                                        MtchST  27
              MatchingSubType = 0                                               MtchST  28
          END SELECT                                                            MtchST  29
      END SELECT                                                                MtchST  30
c                                                                               MtchST  31
      RETURN                                                                    MtchST  32
      END                                                                       MtchST  33
      SUBROUTINE LinkNodes                                                      LinkX    2
c                                                                               LinkX    3
c              Links the nodes to each other                                    LinkX    4
c                                                                               LinkX    5
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               LinkX   13
      INTEGER Type, SubType, s8                                                 LinkX   14
c                                                                               LinkX   15
c              Cycle thru all nodes and link                                    LinkX   16
      Knx = Inx                                                                 LinkX   17
      DO WHILE (Knx .GT. 0)                                                     LinkX   18
c              Set the type and matching subtype for the linked block(s)        LinkX   19
        Type    = <nx;Type>                                                     LinkX   20
        SubType = MatchingSubType(Type, <nx;SubType>)                           LinkX   21
c                                                                               LinkX   22
        IF (<nx;XComponent> .GT. 0)  THEN                                       LinkX   23
c              Link to a single block - find the matching block                 LinkX   24
          JXcomp = <nx;XComponent>                                              LinkX   25
          Kn2    = Inx                                                          LinkX   26
          DO WHILE (Kn2 .GT. 0)                                                 LinkX   27
            IF (<n2;Component> .EQ. JXcomp  .AND.                               LinkX   28
     &               <n2;Type> .EQ. Type    .AND.                               LinkX   29
     &            <n2;SubType> .EQ. SubType)  THEN                              LinkX   30
              <nx;Xnode> = Kn2                                                  LinkX   31
              EXIT                                                              LinkX   32
            ENDIF                                                               LinkX   33
            Kn2 = <n2;Next>                                                     LinkX   34
          ENDDO                                                                 LinkX   35
        ELSE                                                                    LinkX   36
c              Link to one or more blocks - create a list of all blocks         LinkX   37
c              matching the criteria                                            LinkX   38
          CALL ListNodes(<nx;Xnode>, 0,0,0,<nx;Component>, Type,SubType)        LinkX   39
        ENDIF                                                                   LinkX   40
c                                                                               LinkX   41
c              Link to end-use block if requested                               LinkX   42
        Kid = <nx;EndUse>                                                       LinkX   43
        IF (Kid .GT. 100  .AND.  <id;Ident>  .ne.  IdEndUse)  THEN              LinkX   44
c              Kid is pointing to a component - find the end-use                LinkX   45
c              criterion of the specified component                             LinkX   46
          Jcomp = Kid                                                           LinkX   47
          Kn2   = Inx                                                           LinkX   48
          DO WHILE (Kn2 .GT. 0)                                                 LinkX   49
            IF (<n2;Component> .EQ. Jcomp)  THEN                                LinkX   50
              Kid = <n2;EndUse>                                                 LinkX   51
              IF (<id;Ident> .EQ. IdEndUse  .OR.                                LinkX   52
     &            (Kid .GT. 0  .AND.  Kid .LT. 100))  THEN                      LinkX   53
                <nx;EndUse> = Kid                                               LinkX   54
                EXIT                                                            LinkX   55
              ENDIF                                                             LinkX   56
            ENDIF                                                               LinkX   57
            Kn2 = <n2;Next>                                                     LinkX   58
          ENDDO                                                                 LinkX   59
          IF (<nx;EndUse> .EQ. Jcomp)  THEN                                     LinkX   60
            CALL MSGSIM(-1,II,II,II,II)                                         LinkX   61
            WRITE (IOUTPT,9001)  Jparent(Knx)                                   LinkX   62
            IwinReturn = 1                                                      LinkX   63
          ENDIF                                                                 LinkX   64
        ENDIF  ! Kid                                                            LinkX   65
c                                                                               LinkX   66
c              Link to parent's s8 block, if one exists                         LinkX   67
        s8 = Is8                                                                LinkX   68
        DO WHILE (s8 .GT. 0)                                                    LinkX   69
          IF (<s8;Parent> .EQ. <nx;Component>)  THEN                            LinkX   70
            <nx;s8> = s8                                                        LinkX   71
            EXIT                                                                LinkX   72
          ENDIF                                                                 LinkX   73
          s8 = <s8;Next>                                                        LinkX   74
        ENDDO  ! Ks8                                                            LinkX   75
c                                                                               LinkX   76
        Knx = <nx;Next>                                                         LinkX   77
      ENDDO                                                                     LinkX   78
c                                                                               LinkX   79
      RETURN                                                                    LinkX   80
c                                                                               LinkX   81
 9001 FORMAT(14x,'Component: ',8A4,'has a node that'                   /        LinkX   82
     &       14x,'failed to link to an enduse block or catagory'       )        LinkX   83
      END                                                                       LinkX   84
C ##############################################################################Report   2
C ##############################################################################Report   3
C ##############################################################################Report   4
C ##############################################################################Report   5
C ##########                                                          ##########Report   6
C ##########                         REPORTS                          ##########Report   7
C ##########                                                          ##########Report   8
C ##############################################################################Report   9
C ##############################################################################Report  10
C ##############################################################################Report  11
C ##############################################################################Report  12
c                                                                               Report  13
c              General Report types:                                            Report  14
c                A                                                              Report  15
c                B                                                              Report  16
c                C                                                              Report  17
c                D                                                              Report  18
c                E                                                              Report  19
c                F                                                              Report  20
c                G                                                              Report  21
c                H     Equipment component summary                              Report  22
c                O     Scatter plot                                             Report  23
c                                                                               Report  24
c              Special Reports                                                  Report  25
c                PSA                                                            Report  26
c                PSB   Utility and fuel use summary                             Report  27
c                PSE   End-use summary for all utility meters of a given        Report  28
c                        type                                                   Report  29
c                PSF   End-use summary for each utility meter                   Report  30
c                BEPS  Building energy performance                              Report  31
c                BEPU  Building energy performance in billing units             Report  32
c                                                                               Report  33
      SUBROUTINE Xfc_Reports(Mode)                                              XReps    2
c                                                                               XReps    3
c              Outputs the monthly and yearly records of reports using          XReps    4
c              the node formats                                                 XReps    5
c                                                                               XReps    6
c              Mode = 50  Make requests for reports                             XReps    7
c                     51  Second level of requests                              XReps    8
c                     52  Create in proper output order                         XReps    9
c                     53  Titles                                                XReps   10
c                     54  Design records                                        XReps   11
c                     55  Monthly records                                       XReps   12
c                     57  Yearly records                                        XReps   13
c                     58  Yearly summary report records                         XReps   14
c                     59  Close reports                                         XReps   15
c                                                                               XReps   16
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
      COMMON  /XPtrRp/ IrepA,  IrepB,  IrepC, IrepD, IrepE,                     /XPtrRp/ 2
     &                 IrepF,  IrepH,  IrepI, IrepO,                            /XPtrRp/ 3
     &                 xXPtrRp                                                  /XPtrRp/ 4
c                                                                               XReps   22
      INTEGER rE, rF, rH, rI, rO                                                XReps   23
c                                                                               XReps   24
c                                                                               XReps   25
      SELECT CASE (Mode)                                                        XReps   26
c                                                                               XReps   27
c                                                                               XReps   28
c ============ REQUEST REPORTS ================================================ XReps   29
      CASE (50)                                                                 XReps   30
c                                                                               XReps   31
      CALL AllComponents(Mode)                                                  XReps   32
c                                                                               XReps   33
c                                                                               XReps   34
c ============ REQUEST REPORTS ================================================ XReps   35
      CASE (51)                                                                 XReps   36
c                                                                               XReps   37
      CALL AllComponents(Mode)                                                  XReps   38
c                                                                               XReps   39
c                                                                               XReps   40
c ============ REPORT ORDER =================================================== XReps   41
      CASE (52)                                                                 XReps   42
c                                                                               XReps   43
c              Create the reports in the proper output order                    XReps   44
c                                                                               XReps   45
c     CALL Report_PSA(Mode)                                                     XReps   46
      CALL Report_PSB(Mode)                                                     XReps   47
      CALL Report_BEPS(Mode)                                                    XReps   48
      CALL Report_BEPU(Mode)                                                    XReps   49
c     CALL Report_PSC(Mode)                                                     XReps   50
c     CALL Report_PSD(Mode)                                                     XReps   51
c                                                                               XReps   52
c              Waterside plants                                                 XReps   53
      Call PlantReports(Mode)                                                   XReps   54
c                                                                               XReps   55
c              Refrigeration systems                                            XReps   56
      IF (Nrs .ne. 0)  Call RefgReports(Mode)                                   XReps   57
c                                                                               XReps   58
c                                                                               XReps   59
c ============ WRITE TO REPORTS =============================================== XReps   60
      CASE DEFAULT                                                              XReps   61
c                                                                               XReps   62
      CALL AllComponents(Mode)                                                  XReps   63
c                                                                               XReps   64
c              rE records                                                       XReps   65
      rE = IrepE                                                                XReps   66
      DO WHILE (rE .GT. 0)                                                      XReps   67
        CALL Report_PSE(Mode, rE)                                               XReps   68
        rE = <rE;Next>                                                          XReps   69
      ENDDO                                                                     XReps   70
c                                                                               XReps   71
c              rF records                                                       XReps   72
      rF = IrepF                                                                XReps   73
      DO WHILE (rF .GT. 0)                                                      XReps   74
        CALL Report_PSF(Mode, rF)                                               XReps   75
        rF = <rF;Next>                                                          XReps   76
      ENDDO                                                                     XReps   77
c                                                                               XReps   78
c              rH records                                                       XReps   79
      rH = IrepH                                                                XReps   80
      DO WHILE (rH .GT. 0)                                                      XReps   81
        CALL Report_H(Mode, rH)                                                 XReps   82
        rH = <rH;Next>                                                          XReps   83
      ENDDO                                                                     XReps   84
c                                                                               XReps   85
c              rI records                                                       XReps   86
      rI = IrepI                                                                XReps   87
      DO WHILE (rI .GT. 0)                                                      XReps   88
        CALL Report_I(Mode, rI)                                                 XReps   89
        rI = <rI;Next>                                                          XReps   90
      ENDDO                                                                     XReps   91
c                                                                               XReps   92
c              rO records                                                       XReps   93
      rO = IrepO                                                                XReps   94
      DO WHILE (rO .GT. 0)                                                      XReps   95
        CALL Report_SSO(Mode, rO)                                               XReps   96
        rO = <rO;Next>                                                          XReps   97
      ENDDO                                                                     XReps   98
c                                                                               XReps   99
c              Yearly summary reports                                           XReps  100
      IF (Mode .GE. 57)  THEN                                                   XReps  101
c        CALL Report_PSA(Mode)                                                  XReps  102
         CALL Report_PSB(Mode)                                                  XReps  103
         CALL Report_BEPS(Mode)                                                 XReps  104
         CALL Report_BEPU(Mode)                                                 XReps  105
c        CALL Report_PSC(Mode)                                                  XReps  106
c        CALL Report_PSD(Mode)                                                  XReps  107
      ENDIF                                                                     XReps  108
c                                                                               XReps  109
c                                                                               XReps  110
      END SELECT                                                                XReps  111
c                                                                               XReps  112
      RETURN                                                                    XReps  113
      END                                                                       XReps  114
C ##############################################################################BEPS     2
C ##########                                                          ##########BEPS     3
C ##########                           BEPS                           ##########BEPS     4
C ##########                                                          ##########BEPS     5
C ##############################################################################BEPS     6
c                                                                               BEPS     7
      SUBROUTINE Report_BEPS(Mode)                                              BEPS     8
c                                                                               BEPS     9
c              Building Energy Performance Summary                              BEPS    10
c                                                                               BEPS    11
c              Mode = 52  Create in proper output order                         BEPS    12
c                     57  Yearly records                                        BEPS    13
c                     59  Close report                                          BEPS    14
c                                                                               BEPS    15
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /BEPS  / BGAREA, BNAREA, PctSysOvrld, PctPltOvrld,                /BEPS/   2
     &                 SiteEnergy, SourceEnergy                                 /BEPS/   3
      DIMENSION        BEPS(6)                                                  /BEPS/   4
      EQUIVALENCE      (BEPS(1),BGAREA)                                         /BEPS/   5
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /MISCD / TEMPS(4,4096),CONS(5),TEMPSL(4096),                      /MISCD/  2
     1                 BLDGQH,BLDGQC,BLDGQL,BLDGP,BPMULT,                       /MISCD/  3
     2                 DBTMIN,DBTMAX,WMIN,WMAX,NSPZ(4096),                      /MISCD/  4
     3                 DQ, DTP, DTR, DTS, FPI, PLRCC , POM, TC2, TDM,           /MISCD/  5
     4                 TRA,WCOL,WCOLM,WMM,YPI,KWBTU,BTUKW,UNFILD,Unusedm        /MISCD/  6
      REAL             KWBTU                                                    /MISCD/  7
      COMMON  /MtrNam/ MeterName(4,6), MasterMeters(8,4), SubMeter(3,2),        /MtrNam/ 2
     &                 FuelType(4,7)                                            /MtrNam/ 3
      INTEGER          SubMeter, FuelType                                       /MtrNam/ 4
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON  /REPRT1/ IREFG, Iuniq                                             /REPRT1/ 2
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
c                                                                               BEPS    26
      INTEGER s3, s11                                                           BEPS    27
      Real    SumEndUse(13)                                                     BEPS    28
c                                                                               BEPS    29
      DATA NumReportBEPS /34/                                                   BEPS    30
      DATA NumReportTDV1 /95/                                                   BEPS    31
c                                                                               BEPS    32
      IF (IREPRT(3,26) .EQ. 0)  RETURN                                          BEPS    33
c                                                                               BEPS    34
      SELECT CASE (Mode)                                                        BEPS    35
c                                                                               BEPS    36
c                                                                               BEPS    37
c ============ REPORT CREATION ================================================ BEPS    38
      CASE (52)                                                                 BEPS    39
c                                                                               BEPS    40
      WRITE(IREPFL)  4, Iuniq, 4, NumReportBEPS, 1                              BEPS    41
c              store the unique report number for this report                   BEPS    42
      IREPRT(3,26) = Iuniq                                                      BEPS    43
c              increment the unique report number for the next report           BEPS    44
      Iuniq = Iuniq + 1                                                         BEPS    45
c                                                                               BEPS    46
c              Time-dependent valuation                                         BEPS    47
      IF (ITDV .ne. 0)  THEN                                                    BEPS    48
        WRITE(IREPFL)  4, Iuniq, 4, NumReportTDV1, 1                            BEPS    49
        Iuniq = Iuniq + 1                                                       BEPS    50
      ENDIF                                                                     BEPS    51
c                                                                               BEPS    52
c                                                                               BEPS    53
c ============ YEARLY REPORT RECORDS ========================================== BEPS    54
      CASE (57)                                                                 BEPS    55
c                                                                               BEPS    56
      Iuniq = IREPRT(3,26)                                                      BEPS    57
c                                                                               BEPS    58
      DO  IE=1,13                                                               BEPS    59
        SumEndUse(IE) = 0.                                                      BEPS    60
      ENDDO                                                                     BEPS    61
      SourceTotal = 0.                                                          BEPS    62
c              print only the first 4 characters of the meter names             BEPS    63
      II = 1                                                                    BEPS    64
c                                                                               BEPS    65
c              column heading                                                   BEPS    66
      WRITE (IREPFL) 4, Iuniq, 1, 1, 0                                          BEPS    67
c                                                                               BEPS    68
c              Loop thru all meters, and print the                              BEPS    69
c              yearly records for all utility-level meters                      BEPS    70
      DO  MeterType=1,6                                                         BEPS    71
        Jme = Ime                                                               BEPS    72
        DO WHILE (Jme .GT. 0)                                                   BEPS    73
          IF (<me:TYPE> .EQ. MeterType  .AND.  <me;Rank> .EQ. 1)  THEN          BEPS    74
            s3 = <me;s3>                                                        BEPS    75
            SELECT CASE (<me:TYPE>)                                             BEPS    76
              CASE (1,2)  ! Steam/CHW                                           BEPS    77
                WRITE (IREPFL) 22, Iuniq, 1, 2, 18,                             BEPS    78
     &            <me:NAME>, (MeterName(I,<me:TYPE>),I=1,4),                    BEPS    79
     &            (<s3.EndUseYr>,IE=1,12), <s3.TotalYr>                         BEPS    80
                DO  IE=1,12                                                     BEPS    81
                  SumEndUse(IE) = SumEndUse(IE) + <s3.EndUseYr>                 BEPS    82
                ENDDO                                                           BEPS    83
                SumEndUse(13) = SumEndUse(13) + <s3.TotalYr>                    BEPS    84
c                 sum the source energy                                         BEPS    85
                SourceTotal = SourceTotal + <s3.TotalYr>/<me:SOURCE-EFF>        BEPS    86
              CASE (3)  ! Electric                                              BEPS    87
                WRITE (IREPFL) 22, Iuniq, 1, 2, 18,                             BEPS    88
     &            <me:NAME>, (MeterName(I,<me:TYPE>),I=1,4),                    BEPS    89
     &            (<s3.EndUseYr>*BTUKW,IE=1,12), <s3.TotalYr>*BTUKW             BEPS    90
                DO  IE=1,12                                                     BEPS    91
                  SumEndUse(IE) = SumEndUse(IE)+<s3.EndUseYr>*BTUKW             BEPS    92
                ENDDO                                                           BEPS    93
                SumEndUse(13) = SumEndUse(13) + <s3.TotalYr>*BTUKW              BEPS    94
c                 sum the source energy                                         BEPS    95
                SourceTotal = SourceTotal                                       BEPS    96
     &                      + <s3.TotalYr>*BTUKW/<me:SOURCE-EFF>                BEPS    97
              CASE (4)  ! Fuel                                                  BEPS    98
                WRITE (IREPFL) 22, Iuniq, 1, 2, 18,                             BEPS    99
     &            <me:NAME>, (FuelType(I,<me:SUBTYPE>),I=1,4),                  BEPS   100
     &            (<s3.EndUseYr>,IE=1,12), <s3.TotalYr>                         BEPS   101
                DO  IE=1,12                                                     BEPS   102
                  SumEndUse(IE) = SumEndUse(IE) + <s3.EndUseYr>                 BEPS   103
                ENDDO                                                           BEPS   104
                SumEndUse(13) = SumEndUse(13) + <s3.TotalYr>                    BEPS   105
c                 sum the source energy                                         BEPS   106
                SourceTotal = SourceTotal + <s3.TotalYr>/<me:SOURCE-EFF>        BEPS   107
              CASE (5)  ! Electric sale                                         BEPS   108
                WRITE (IREPFL) 22, Iuniq, 1, 2, 18,                             BEPS   109
     &            <me:NAME>, (MeterName(I,<me:TYPE>),I=1,4),                    BEPS   110
     &           (-<s3.EndUseYr>*BTUKW,IE=1,12), -<s3.TotalYr>*BTUKW            BEPS   111
                DO  IE=1,12                                                     BEPS   112
                  SumEndUse(IE) = SumEndUse(IE)-<s3.EndUseYr>*BTUKW             BEPS   113
                ENDDO                                                           BEPS   114
                SumEndUse(13) = SumEndUse(13) - <s3.TotalYr>*BTUKW              BEPS   115
c                 sum the source energy                                         BEPS   116
                SourceTotal = SourceTotal                                       BEPS   117
     &                      - <s3.TotalYr>*BTUKW/<me:SOURCE-EFF>                BEPS   118
            END SELECT  ! me:TYPE                                               BEPS   119
          ENDIF                                                                 BEPS   120
          Jme = <me;Next>                                                       BEPS   121
        ENDDO  ! Jme                                                            BEPS   122
      ENDDO    ! MeterType                                                      BEPS   123
c                                                                               BEPS   124
c              report totals                                                    BEPS   125
      WRITE (IREPFL) 17, Iuniq, 1, 3, 13,                                       BEPS   126
     &  (SumEndUse(IE),IE=1,13)                                                 BEPS   127
      WRITE (IREPFL) 12, Iuniq, 1, 4, 8,                                        BEPS   128
     &  SumEndUse(13), SumEndUse(13)/BGAREA, SumEndUse(13)/BGAREA,              BEPS   129
     &  SourceTotal, SourceTotal/BNAREA, SourceTotal/BNAREA,                    BEPS   130
     &  PctSysOvrld, PctPltOvrld                                                BEPS   131
c                                                                               BEPS   132
      IF (Ntk .GT. 0)  WRITE (IREPFL) 4, Iuniq, 1, 5, 0                         BEPS   133
c                                                                               BEPS   134
c                                                                               BEPS   135
c              Time-dependent valuation                                         BEPS   136
      IF (ITDV .eq. 0)  Return                                                  BEPS   137
      TDVsite = 0.         ! sum of TDV site energy                             BEPS   138
      DO  IE=1,12                                                               BEPS   139
        TDVsite    = TDVsite + SumEndUse(IE) * <mm;IncludeTDV>                  BEPS   140
        SumEndUse(IE) = 0.                                                      BEPS   141
      ENDDO                                                                     BEPS   142
      SumEndUse(13) = 0.      ! sum of TDV source energy                        BEPS   143
c                                                                               BEPS   144
c              column heading                                                   BEPS   145
      WRITE (IREPFL) 4, Iuniq+1, 1, 1, 0                                        BEPS   146
c                                                                               BEPS   147
c              Loop thru elec and fuel meters, and print the                    BEPS   148
c              yearly records for all utility-level meters                      BEPS   149
      DO  MeterType=3,5                                                         BEPS   150
        Jme = Ime                                                               BEPS   151
        DO WHILE (Jme .GT. 0)                                                   BEPS   152
          IF (<me:TYPE> .EQ. MeterType  .AND.  <me;Rank> .EQ. 1)  THEN          BEPS   153
            s11 = <me;s11>                                                      BEPS   154
            IF (<me:TYPE> .ne. 5)  THEN                                         BEPS   155
              WRITE (IREPFL) 22, Iuniq+1, 1, 2, 18,                             BEPS   156
     &          <me:NAME>, (MeterName(I,<me:TYPE>),I=1,4),                      BEPS   157
     &          (<s11.EndUseYr>,IE=1,12), <s11.TotalYr>                         BEPS   158
              DO  IE=1,12                                                       BEPS   159
                SumEndUse(IE) = SumEndUse(IE)+<s11.EndUseYr>                    BEPS   160
              ENDDO                                                             BEPS   161
              SumEndUse(13) = SumEndUse(13) + <s11.TotalYr>                     BEPS   162
            ELSE  ! electric sale  (not debugged)                               BEPS   163
              WRITE (IREPFL) 22, Iuniq+1, 1, 2, 18,                             BEPS   164
     &          <me:NAME>, (MeterName(I,<me:TYPE>),I=1,4),                      BEPS   165
     &          (0.,IE=1,12), -<s11.TotalYr>                                    BEPS   166
              SumEndUse(13) = SumEndUse(13) - <s11.TotalYr>                     BEPS   167
            ENDIF                                                               BEPS   168
c              cogeneration sales (not debugged)                                BEPS   169
            IE = 13                                                             BEPS   170
            IF (<me:TYPE> .eq. 4  .and.  <s11.EndUseYr> .gt. 0.)                BEPS   171
     &        WRITE (IREPFL) 5, Iuniq+1, 1, 6, 1, <s11.EndUseYr>                BEPS   172
          ENDIF                                                                 BEPS   173
          Jme = <me;Next>                                                       BEPS   174
        ENDDO  ! Jme                                                            BEPS   175
      ENDDO    ! MeterType                                                      BEPS   176
c                                                                               BEPS   177
c              report totals                                                    BEPS   178
      WRITE (IREPFL) 17, Iuniq+1, 1, 3, 13,  (SumEndUse(IE),IE=1,13)            BEPS   179
      WRITE (IREPFL) 12, Iuniq+1, 1, 4, 8,                                      BEPS   180
     &  TDVsite, TDVsite/BGAREA, TDVsite/BNAREA,                                BEPS   181
     &  SumEndUse(13), SumEndUse(13)/BGAREA, SumEndUse(13)/BGAREA,              BEPS   182
     &  PctSysOvrld, PctPltOvrld                                                BEPS   183
c                                                                               BEPS   184
c                                                                               BEPS   185
c ============ CLOSING RECORD ================================================= BEPS   186
      CASE (59)                                                                 BEPS   187
c                                                                               BEPS   188
      WRITE (IREPFL) 2, IREPRT(3,26), 7                                         BEPS   189
      IF (ITDV .ne. 0)  WRITE (IREPFL) 2, IREPRT(3,26)+1, 7                     BEPS   190
c                                                                               BEPS   191
c                                                                               BEPS   192
      END SELECT  ! Mode                                                        BEPS   193
c                                                                               BEPS   194
      RETURN                                                                    BEPS   195
      END                                                                       BEPS   196
C ##############################################################################BEPU     2
C ##########                                                          ##########BEPU     3
C ##########                           BEPU                           ##########BEPU     4
C ##########                                                          ##########BEPU     5
C ##############################################################################BEPU     6
c                                                                               BEPU     7
      SUBROUTINE Report_BEPU(Mode)                                              BEPU     8
c                                                                               BEPU     9
c              Building Energy Performance Summary - Utility units              BEPU    10
c                                                                               BEPU    11
c              Mode = 52  Create in proper output order                         BEPU    12
c                     57  Yearly records                                        BEPU    13
c                     59  Close report                                          BEPU    14
c                                                                               BEPU    15
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /BEPS  / BGAREA, BNAREA, PctSysOvrld, PctPltOvrld,                /BEPS/   2
     &                 SiteEnergy, SourceEnergy                                 /BEPS/   3
      DIMENSION        BEPS(6)                                                  /BEPS/   4
      EQUIVALENCE      (BEPS(1),BGAREA)                                         /BEPS/   5
      COMMON  /CTRL  / VERS(2),IRPFLG(4),IOVRLL(7),IWRTFL,IPROG,                /CTRL/   2
     1                 IFATAL,NAMPRG(3,7),MTRICR                                /CTRL/   3
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /MISCD / TEMPS(4,4096),CONS(5),TEMPSL(4096),                      /MISCD/  2
     1                 BLDGQH,BLDGQC,BLDGQL,BLDGP,BPMULT,                       /MISCD/  3
     2                 DBTMIN,DBTMAX,WMIN,WMAX,NSPZ(4096),                      /MISCD/  4
     3                 DQ, DTP, DTR, DTS, FPI, PLRCC , POM, TC2, TDM,           /MISCD/  5
     4                 TRA,WCOL,WCOLM,WMM,YPI,KWBTU,BTUKW,UNFILD,Unusedm        /MISCD/  6
      REAL             KWBTU                                                    /MISCD/  7
      COMMON  /MtrNam/ MeterName(4,6), MasterMeters(8,4), SubMeter(3,2),        /MtrNam/ 2
     &                 FuelType(4,7)                                            /MtrNam/ 3
      INTEGER          SubMeter, FuelType                                       /MtrNam/ 4
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON  /REPRT1/ IREFG, Iuniq                                             /REPRT1/ 2
      COMMON /UNITT/   VKONV(300), DUMLOG(4), JUNITT(4,300,2)                   /UNITT/  2
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
c                                                                               BEPU    28
      INTEGER   s3, UnitIndex(11)                                               BEPU    29
      REAL      UnitTotal(11)                                                   BEPU    30
c                                                                               BEPU    31
      DATA NumReportBEPU /69/                                                   BEPU    32
c                                                                               BEPU    33
      IF (IREPRT(3,27) .EQ. 0)  RETURN                                          BEPU    34
c                                                                               BEPU    35
      SELECT CASE (Mode)                                                        BEPU    36
c                                                                               BEPU    37
c                                                                               BEPU    38
c ============ REPORT CREATION ================================================ BEPU    39
      CASE (52)                                                                 BEPU    40
c                                                                               BEPU    41
      WRITE(IREPFL)  4, Iuniq, 4, NumReportBEPU, 1                              BEPU    42
c              store the unique report number for this report                   BEPU    43
      IREPRT(3,27) = Iuniq                                                      BEPU    44
c              increment the unique report number for the next report           BEPU    45
      Iuniq = Iuniq + 1                                                         BEPU    46
c                                                                               BEPU    47
c                                                                               BEPU    48
c ============ YEARLY REPORT RECORDS ========================================== BEPU    49
      CASE (57)                                                                 BEPU    50
c                                                                               BEPU    51
      Iuniq = IREPRT(3,27)                                                      BEPU    52
c                                                                               BEPU    53
      DO  I=1,11                                                                BEPU    54
        UnitTotal(I) = 0.                                                       BEPU    55
      ENDDO                                                                     BEPU    56
c              Set the units - english or metric                                BEPU    57
      IF (MTRICR .ne. 1)  THEN                                                  BEPU    58
        IUNIT = 2  ! english                                                    BEPU    59
      ELSE                                                                      BEPU    60
        IUNIT = 1  ! metric                                                     BEPU    61
      ENDIF                                                                     BEPU    62
c              print only the first 4 characters of the meter names             BEPU    63
      II = 1                                                                    BEPU    64
c                                                                               BEPU    65
c              column heading                                                   BEPU    66
      WRITE (IREPFL) 4, Iuniq, 1, 1, 0                                          BEPU    67
c                                                                               BEPU    68
c              Loop thru all meters, and print the                              BEPU    69
c              yearly records for all utility-level meters                      BEPU    70
      DO  MeterType=1,6                                                         BEPU    71
        Jme = Ime                                                               BEPU    72
        DO WHILE (Jme .GT. 0)                                                   BEPU    73
          IF (<me:TYPE> .EQ. MeterType  .AND.  <me;Rank> .EQ. 1)  THEN          BEPU    74
            s3 = <me;s3>                                                        BEPU    75
            SELECT CASE (<me:TYPE>)                                             BEPU    76
              CASE (1)  ! Steam                                                 BEPU    77
                WRITE (IREPFL) 24, Iuniq, 1, 2, 20,                             BEPU    78
     &            <me:NAME>, (MeterName(I,<me:TYPE>),I=1,4),                    BEPU    79
     &            (<s3.EndUseYr>*<me:BTU/UNIT>,IE=1,12),                        BEPU    80
     &             <s3.TotalYr>*<me:BTU/UNIT>                                   BEPU    81
                UnitTotal(9) = UnitTotal(9) + <s3.TotalYr>*<me:BTU/UNIT>        BEPU    82
                UnitIndex(9) = <me:UNIT-INDEX>                                  BEPU    83
              CASE (2)  ! Chilled water                                         BEPU    84
                WRITE (IREPFL) 24, Iuniq, 1, 2, 20,                             BEPU    85
     &            <me:NAME>, (MeterName(I,<me:TYPE>),I=1,4),                    BEPU    86
     &            (<s3.EndUseYr>*<me:BTU/UNIT>,IE=1,12),                        BEPU    87
     &             <s3.TotalYr>*<me:BTU/UNIT>                                   BEPU    88
                UnitTotal(10) = UnitTotal(10)+<s3.TotalYr>*<me:BTU/UNIT>        BEPU    89
                UnitIndex(10) = <me:UNIT-INDEX>                                 BEPU    90
              CASE (3)  ! Electric                                              BEPU    91
                WRITE (IREPFL) 24, Iuniq, 1, 2, 20,                             BEPU    92
     &            <me:NAME>, (MeterName(I,<me:TYPE>),I=1,4),                    BEPU    93
     &            (JUNITT(I,<me:UNIT-INDEX>,IUNIT),I=1,2),                      BEPU    94
     &            (<s3.EndUseYr>,IE=1,12), <s3.TotalYr>                         BEPU    95
                UnitTotal(1) = UnitTotal(1) + <s3.TotalYr>                      BEPU    96
                UnitIndex(1) = <me:UNIT-INDEX>                                  BEPU    97
              CASE (4)  ! Fuel                                                  BEPU    98
                WRITE (IREPFL) 24, Iuniq, 1, 2, 20,                             BEPU    99
     &            <me:NAME>,(FuelType(I,<me:SUBTYPE>),I=1,4),                   BEPU   100
     &            (JUNITT(I,<me:UNIT-INDEX>,IUNIT),I=1,2),                      BEPU   101
     &            (<s3.EndUseYr>*<me:BTU/UNIT>,IE=1,12),                        BEPU   102
     &             <s3.TotalYr>*<me:BTU/UNIT>                                   BEPU   103
                UnitTotal(<me:SUBTYPE>+1) = UnitTotal(<me:SUBTYPE>+1)           BEPU   104
     &                                    + <s3.TotalYr>*<me:BTU/UNIT>          BEPU   105
                UnitIndex(<me:SUBTYPE>+1) = <me:UNIT-INDEX>                     BEPU   106
              CASE (5)  ! Electric sale                                         BEPU   107
                WRITE (IREPFL) 24, Iuniq, 1, 2, 20,                             BEPU   108
     &            <me:NAME>, (MeterName(I,<me:TYPE>),I=1,4),                    BEPU   109
     &            (JUNITT(I,<me:UNIT-INDEX>,IUNIT),I=1,2),                      BEPU   110
     &            (-<s3.EndUseYr>,IE=1,12), -<s3.TotalYr>                       BEPU   111
                UnitTotal(1) = UnitTotal(1) - <s3.TotalYr>                      BEPU   112
                UnitIndex(1) = <me:UNIT-INDEX>                                  BEPU   113
            END SELECT  ! me:TYPE                                               BEPU   114
          ENDIF                                                                 BEPU   115
          Jme = <me;Next>                                                       BEPU   116
        ENDDO  ! Jme                                                            BEPU   117
      ENDDO    ! MeterType                                                      BEPU   118
c                                                                               BEPU   119
c              print the summary                                                BEPU   120
      WRITE (IREPFL) 4, Iuniq, 1, 5, 0                                          BEPU   121
c              electric                                                         BEPU   122
      IF (UnitTotal(1) .ne. 0.)                                                 BEPU   123
     &  WRITE (IREPFL) 16, Iuniq, 1, 3, 12,                                     BEPU   124
     &    (MeterName(I,3),I=1,3), UnitTotal(1),                                 BEPU   125
     &                        (JUNITT(I,UnitIndex(1),IUNIT),I=1,2),             BEPU   126
     &    UnitTotal(1)/BGAREA,                                                  BEPU   127
     &                        (JUNITT(I,UnitIndex(1),IUNIT),I=1,2),             BEPU   128
     &    UnitTotal(1)/BNAREA,                                                  BEPU   129
     &                        (JUNITT(I,UnitIndex(1),IUNIT),I=1,2)              BEPU   130
c              fuel - meters of the same fuel type are combined                 BEPU   131
      DO  J=2,8                                                                 BEPU   132
        IF (UnitTotal(J) .ne. 0.)                                               BEPU   133
     &    WRITE (IREPFL) 16, Iuniq, 1, 3, 12,                                   BEPU   134
     &      (FuelType(I,J-1),I=1,3), UnitTotal(J),                              BEPU   135
     &                          (JUNITT(I,UnitIndex(J),IUNIT),I=1,2),           BEPU   136
     &      UnitTotal(J)/BGAREA,                                                BEPU   137
     &                          (JUNITT(I,UnitIndex(J),IUNIT),I=1,2),           BEPU   138
     &      UnitTotal(J)/BNAREA,                                                BEPU   139
     &                          (JUNITT(I,UnitIndex(J),IUNIT),I=1,2)            BEPU   140
      ENDDO                                                                     BEPU   141
c              steam                                                            BEPU   142
      IF (UnitTotal(9) .ne. 0.)                                                 BEPU   143
     &  WRITE (IREPFL) 16, Iuniq, 1, 3, 12,                                     BEPU   144
     &    (MeterName(I,1),I=1,3), UnitTotal(9),                                 BEPU   145
     &                        (JUNITT(I,UnitIndex(9),IUNIT),I=1,2),             BEPU   146
     &    UnitTotal(9)/BGAREA,                                                  BEPU   147
     &                        (JUNITT(I,UnitIndex(9),IUNIT),I=1,2),             BEPU   148
     &    UnitTotal(9)/BNAREA,                                                  BEPU   149
     &                        (JUNITT(I,UnitIndex(9),IUNIT),I=1,2)              BEPU   150
c              chilled-water                                                    BEPU   151
      IF (UnitTotal(10) .ne. 0.)                                                BEPU   152
     &  WRITE (IREPFL) 16, Iuniq, 1, 3, 12,                                     BEPU   153
     &    (MeterName(I,2),I=1,3), UnitTotal(10),                                BEPU   154
     &                         (JUNITT(I,UnitIndex(10),IUNIT),I=1,2),           BEPU   155
     &    UnitTotal(10)/BGAREA,                                                 BEPU   156
     &                         (JUNITT(I,UnitIndex(10),IUNIT),I=1,2),           BEPU   157
     &    UnitTotal(10)/BNAREA,                                                 BEPU   158
     &                         (JUNITT(I,UnitIndex(10),IUNIT),I=1,2)            BEPU   159
c                                                                               BEPU   160
      WRITE (IREPFL) 6, Iuniq, 1, 4, 2,                                         BEPU   161
     &    PctSysOvrld, PctPltOvrld                                              BEPU   162
      IF (Ntk .GT. 0)  WRITE (IREPFL) 4, Iuniq, 1, 6, 0                         BEPU   163
c                                                                               BEPU   164
c                                                                               BEPU   165
c ============ CLOSING RECORD ================================================= BEPU   166
      CASE (59)                                                                 BEPU   167
c                                                                               BEPU   168
      WRITE (IREPFL) 2, IREPRT(3,27), 7                                         BEPU   169
c                                                                               BEPU   170
c                                                                               BEPU   171
      END SELECT                                                                BEPU   172
c                                                                               BEPU   173
      RETURN                                                                    BEPU   174
      END                                                                       BEPU   175
C ##############################################################################PSB      2
C ##########                                                          ##########PSB      3
C ##########                           PS-B                           ##########PSB      4
C ##########                                                          ##########PSB      5
C ##############################################################################PSB      6
c                                                                               PSB      7
      SUBROUTINE Report_PSB(Mode)                                               PSB      8
c                                                                               PSB      9
c              Utility and Fuel Use Summary                                     PSB     10
c                                                                               PSB     11
c              Mode = 52  Create in proper output order                         PSB     12
c                     57  Yearly records                                        PSB     13
c                     59  Close report                                          PSB     14
c                                                                               PSB     15
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /CTRL  / VERS(2),IRPFLG(4),IOVRLL(7),IWRTFL,IPROG,                /CTRL/   2
     1                 IFATAL,NAMPRG(3,7),MTRICR                                /CTRL/   3
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /MISCD / TEMPS(4,4096),CONS(5),TEMPSL(4096),                      /MISCD/  2
     1                 BLDGQH,BLDGQC,BLDGQL,BLDGP,BPMULT,                       /MISCD/  3
     2                 DBTMIN,DBTMAX,WMIN,WMAX,NSPZ(4096),                      /MISCD/  4
     3                 DQ, DTP, DTR, DTS, FPI, PLRCC , POM, TC2, TDM,           /MISCD/  5
     4                 TRA,WCOL,WCOLM,WMM,YPI,KWBTU,BTUKW,UNFILD,Unusedm        /MISCD/  6
      REAL             KWBTU                                                    /MISCD/  7
      COMMON  /MtrNam/ MeterName(4,6), MasterMeters(8,4), SubMeter(3,2),        /MtrNam/ 2
     &                 FuelType(4,7)                                            /MtrNam/ 3
      INTEGER          SubMeter, FuelType                                       /MtrNam/ 4
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON  /REPRT1/ IREFG, Iuniq                                             /REPRT1/ 2
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
      COMMON /UNITT/   VKONV(300), DUMLOG(4), JUNITT(4,300,2)                   /UNITT/  2
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
c                                                                               PSB     27
      INTEGER s3, s4, Rank                                                      PSB     28
      DATA NumReportPSB /21/                                                    PSB     29
c                                                                               PSB     30
      IF (IREPRT(3,17) .EQ. 0)  RETURN                                          PSB     31
c                                                                               PSB     32
      SELECT CASE (Mode)                                                        PSB     33
c                                                                               PSB     34
c                                                                               PSB     35
c ============ REPORT CREATION ================================================ PSB     36
      CASE (52)                                                                 PSB     37
c                                                                               PSB     38
      WRITE(IREPFL)  4, Iuniq, 4, NumReportPSB, 1                               PSB     39
c              store the unique report number for this report                   PSB     40
      IREPRT(3,17) = Iuniq                                                      PSB     41
c              increment the unique report number for the next report           PSB     42
      Iuniq = Iuniq + 1                                                         PSB     43
c                                                                               PSB     44
c                                                                               PSB     45
c ============ YEARLY REPORT RECORDS ========================================== PSB     46
      CASE (57)                                                                 PSB     47
c                                                                               PSB     48
      Iuniq = IREPRT(3,17)                                                      PSB     49
c              Set the units - english or metric                                PSB     50
      IF (MTRICR .ne. 1)  THEN                                                  PSB     51
        IUNIT = 2  ! english                                                    PSB     52
      ELSE                                                                      PSB     53
        IUNIT = 1  ! metric                                                     PSB     54
      ENDIF                                                                     PSB     55
c              print only the first 4 characters of the meter names             PSB     56
      II = 1                                                                    PSB     57
c                                                                               PSB     58
c              column heading                                                   PSB     59
      WRITE (IREPFL) 16, Iuniq, 1, 1, 12, (MONDSC(I),I=1,12)                    PSB     60
c                                                                               PSB     61
c              Loop thru all Type 4 statistic blocks, and print the             PSB     62
c              yearly records for all meters                                    PSB     63
      s4 = Is4                                                                  PSB     64
      DO WHILE (s4 .GT. 0)                                                      PSB     65
c              pointer to the Type 3 block and meter                            PSB     66
        s3  = <s4;s3>                                                           PSB     67
        Jme = Jparent(<s3;Node>)                                                PSB     68
c              Rank >1 means a submeter                                         PSB     69
        Rank = MIN(2, <me;Rank>)                                                PSB     70
        SELECT CASE (<me:TYPE>)                                                 PSB     71
          CASE (4)  ! fuel                                                      PSB     72
            WRITE (IREPFL) 69, Iuniq, 1, 2, 65,                                 PSB     73
     &          <me:NAME>,(FuelType(I,<me:SUBTYPE>),I=1,4),                     PSB     74
     &          (SubMeter(I,Rank),I=1,3),                                       PSB     75
     &          (JUNITT(I,<me:UNIT-INDEX>,IUNIT),I=1,3),                        PSB     76
     &          (<s4.TotalMo>*<me:BTU/UNIT>,MO=1,13),                           PSB     77
     &          (JUNITT(I,<me:DEM-INDEX>,IUNIT),I=1,2),                         PSB     78
     &          (<s4.TotalMaxMo>*<me:BTU/UNIT>,MO=1,13),                        PSB     79
     &          (<s4.TotalMaxDyMo>,<s4.TotalMaxHrMo>,MO=1,13)                   PSB     80
          CASE DEFAULT                                                          PSB     81
            WRITE (IREPFL) 69, Iuniq, 1, 2, 65,                                 PSB     82
     &          <me:NAME>,(MeterName(I,<me:TYPE>),I=1,4),                       PSB     83
     &          (SubMeter(I,Rank),I=1,3),                                       PSB     84
     &          (JUNITT(I,<me:UNIT-INDEX>,IUNIT),I=1,3),                        PSB     85
     &          (<s4.TotalMo>*<me:BTU/UNIT>,MO=1,13),                           PSB     86
     &          (JUNITT(I,<me:DEM-INDEX>,IUNIT),I=1,2),                         PSB     87
     &          (<s4.TotalMaxMo>*<me:BTU/UNIT>,MO=1,13),                        PSB     88
     &          (<s4.TotalMaxDyMo>,<s4.TotalMaxHrMo>,MO=1,13)                   PSB     89
        END SELECT  ! me:TYPE                                                   PSB     90
        s4 = <s4;Next>                                                          PSB     91
      ENDDO    ! Type 4                                                         PSB     92
c                                                                               PSB     93
c                                                                               PSB     94
c ============ CLOSING RECORD ================================================= PSB     95
      CASE (59)                                                                 PSB     96
c                                                                               PSB     97
      WRITE(IREPFL) 2, IREPRT(3,17), 7                                          PSB     98
c                                                                               PSB     99
c                                                                               PSB    100
      END SELECT  ! Mode                                                        PSB    101
c                                                                               PSB    102
      RETURN                                                                    PSB    103
      END                                                                       PSB    104
      SUBROUTINE Report_PSC_PSD                                                 PS-Hs    2
c                                                                               PS-Hs    3
c              Outputs the yearly records for the summary reports               PS-Hs    4
c              that use the "H" format.  PS-C, PS-D, RS-C, RS-D                 PS-Hs    5
c                                                                               PS-Hs    6
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /XPtrRp/ IrepA,  IrepB,  IrepC, IrepD, IrepE,                     /XPtrRp/ 2
     &                 IrepF,  IrepH,  IrepI, IrepO,                            /XPtrRp/ 3
     &                 xXPtrRp                                                  /XPtrRp/ 4
c                                                                               PS-Hs   11
      INTEGER rH, Order                                                         PS-Hs   12
c                                                                               PS-Hs   13
c                                                                               PS-Hs   14
c              quck - print header                                              PS-Hs   15
c                                                                               PS-Hs   16
c              loop thru all rH blocks and print them out to the                PS-Hs   17
c              correct report in the correct order                              PS-Hs   18
                                                                                PS-Hs   19
      DO  Order=1,5                                                             PS-Hs   20
        rH = IrepH                                                              PS-Hs   21
        DO WHILE (rH .GT. 0)                                                    PS-Hs   22
          IF (<rH;SummaryFormat> .GT. 0                                         PS-Hs   23
     &                        .AND.  <rH;SummaryOrder> .EQ. Order)  THEN        PS-Hs   24
c              Block has been found of this rank.  Print the record             PS-Hs   25
            CALL Report_H(rH)                                                   PS-Hs   26
          ENDIF                                                                 PS-Hs   27
c              get next rH block                                                PS-Hs   28
          rH = <rH;Next>                                                        PS-Hs   29
        ENDDO                                                                   PS-Hs   30
      ENDDO                                                                     PS-Hs   31
c                                                                               PS-Hs   32
      WRITE(IREPFL) 2,<rH;SummaryIuniq>,7                                       PS-Hs   33
c                                                                               PS-Hs   34
      RETURN                                                                    PS-Hs   35
      END                                                                       PS-Hs   36
C ##############################################################################PS-E     2
C ##########                                                          ##########PS-E     3
C ##########                           PS-E                           ##########PS-E     4
C ##########                                                          ##########PS-E     5
C ##############################################################################PS-E     6
c                                                                               PS-E     7
      FUNCTION NewReport_PSE(MeterType, s3, s11)                                NewPSE   2
c                                                                               NewPSE   3
c              Creates a block that controls the writing of the monthly         NewPSE   4
c              and yearly data for the PS-E summary reports.                    NewPSE   5
c                                                                               NewPSE   6
c              MeterType     Type of meter                                      NewPSE   7
c                               1  Steam                                        NewPSE   8
c                               2  Chilled water                                NewPSE   9
c                               3  Electricity                                  NewPSE  10
c                               4  Fuel                                         NewPSE  11
c                               5  Electric sale                                NewPSE  12
c                               6  Water                                        NewPSE  13
c              s3           Pointer to a Type 3 statistics block                NewPSE  14
c              s11          Pointer to a Type 11 TDV end-use block              NewPSE  15
c                                                                               NewPSE  16
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /REPRT1/ IREFG, Iuniq                                             /REPRT1/ 2
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrRp/ IrepA,  IrepB,  IrepC, IrepD, IrepE,                     /XPtrRp/ 2
     &                 IrepF,  IrepH,  IrepI, IrepO,                            /XPtrRp/ 3
     &                 xXPtrRp                                                  /XPtrRp/ 4
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               NewPSE  25
      INTEGER rE, s3, s11                                                       NewPSE  26
      SAVE    rE                                                                NewPSE  27
      DATA NameBlock   /4HPS-E /                                                NewPSE  28
c                                                                               NewPSE  29
c              Create the block and link to the previous block                  NewPSE  30
      NewReport_PSE = NewRecord(<+rE~Len>)                                      NewPSE  31
      IF (IrepE .eq. 0)  THEN                                                   NewPSE  32
        IrepE     = NewReport_PSE                                               NewPSE  33
      ELSE                                                                      NewPSE  34
        <rE;Next> = NewReport_PSE                                               NewPSE  35
      ENDIF                                                                     NewPSE  36
      rE = NewReport_PSE                                                        NewPSE  37
c                                                                               NewPSE  38
      IF (s3 .ne. 0)  THEN                                                      NewPSE  39
c              Check to see that statistics block is the correct type           NewPSE  40
        IF (<s3;Ident> .ne. IdStatistics(3))  THEN                              NewPSE  41
c              wrong type of statistics block                                   NewPSE  42
          CALL MSGSIM(-1,II,II,II,II)                                           NewPSE  43
          WRITE (IOUTPT,9100) s3, <s3;Ident>                                    NewPSE  44
          GOTO 999                                                              NewPSE  45
        ENDIF                                                                   NewPSE  46
      ELSE                                                                      NewPSE  47
c              must be a statistics block                                       NewPSE  48
        CALL MSGSIM(-1,II,II,II,II)                                             NewPSE  49
        WRITE (IOUTPT,9101)                                                     NewPSE  50
        GOTO 999                                                                NewPSE  51
      ENDIF                                                                     NewPSE  52
c                                                                               NewPSE  53
c              Transfer parameters                                              NewPSE  54
      <rE;Ident>     = NameBlock                                                NewPSE  55
      <rE;MeterType> = MeterType                                                NewPSE  56
      <rE;s3>        = s3                                                       NewPSE  57
      <rE;Iuniq>     = Iuniq                                                    NewPSE  58
      Iuniq          = Iuniq + 1                                                NewPSE  59
c                                                                               NewPSE  60
c              Time-dependent valuation                                         NewPSE  61
      IF (s11 .ne. 0)  THEN                                                     NewPSE  62
c              Check to see that statistics block is the correct type           NewPSE  63
        IF (<s11;Ident> .ne. IdStatistics(11))  THEN                            NewPSE  64
c              wrong type of statistics block                                   NewPSE  65
          CALL MSGSIM(-1,II,II,II,II)                                           NewPSE  66
          WRITE (IOUTPT,9102) s11, <s11;Ident>                                  NewPSE  67
          GOTO 999                                                              NewPSE  68
        ENDIF                                                                   NewPSE  69
        <rE;s11> = s11                                                          NewPSE  70
        Iuniq    = Iuniq + 1                                                    NewPSE  71
      ENDIF                                                                     NewPSE  72
c                                                                               NewPSE  73
      RETURN                                                                    NewPSE  74
c                                                                               NewPSE  75
  999 CALL MessageBox( NULL,                                                    NewPSE  76
     &  'Error setting up Report PS-E -'//                                      NewPSE  77
     &   char(10)//char(13)//char(10)//char(13)//                               NewPSE  78
     &  'Contact DOE-2 Support'//char(0),                                       NewPSE  79
     &  'HVAC Setup Errors'//char(0),                                           NewPSE  80
     &  MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                    NewPSE  81
      IwinReturn = 1                                                            NewPSE  82
      RETURN                                                                    NewPSE  83
c                                                                               NewPSE  84
c              Message formats                                                  NewPSE  85
 9100 FORMAT(14X,'PROGRAMMER ERROR:  Type E report block was'          /        NewPSE  86
     &       14X,'passed a pointer to a statistics block of the wrong' /        NewPSE  87
     &       14X,' type.  s3:',I7,' Ident: ',A4                        )        NewPSE  88
 9101 FORMAT(14X,'PROGRAMMER ERROR:  Type E report block was'          /        NewPSE  89
     &       14X,'passed a pointer to a statistics block having a    ' /        NewPSE  90
     &       14X,'zero value.'                                         )        NewPSE  91
 9102 FORMAT(14X,'PROGRAMMER ERROR:  Type E report block was'          /        NewPSE  92
     &       14X,'passed a pointer to a statistics block of the wrong' /        NewPSE  93
     &       14X,' type.  s11:',I7,' Ident: ',A4                       )        NewPSE  94
c                                                                               NewPSE  95
      END                                                                       NewPSE  96
      SUBROUTINE Report_PSE(Mode, rE)                                           RepPSE   2
c                                                                               RepPSE   3
c              Outputs the PS-E and TDV2 reports                                RepPSE   4
c                                                                               RepPSE   5
c              rE        Pointer to the report block                            RepPSE   6
c              Mode = 50  Make requests for reports                             RepPSE   7
c                     51  Second level of requests                              RepPSE   8
c                     52  Create in proper output order                         RepPSE   9
c                     53  Titles                                                RepPSE  10
c                     54  Design records                                        RepPSE  11
c                     55  Monthly records                                       RepPSE  12
c                     57  Yearly records                                        RepPSE  13
c                     59  Close report                                          RepPSE  14
c                                                                               RepPSE  15
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /CTRL  / VERS(2),IRPFLG(4),IOVRLL(7),IWRTFL,IPROG,                /CTRL/   2
     1                 IFATAL,NAMPRG(3,7),MTRICR                                /CTRL/   3
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /MtrNam/ MeterName(4,6), MasterMeters(8,4), SubMeter(3,2),        /MtrNam/ 2
     &                 FuelType(4,7)                                            /MtrNam/ 3
      INTEGER          SubMeter, FuelType                                       /MtrNam/ 4
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
c                                                                               RepPSE  22
      INTEGER  rE, s3, s11, TitlePSE(9), Blank3(3), NumHdrfil(6),               RepPSE  23
     &         NumTDV2(4)                                                       RepPSE  24
c                                                                               RepPSE  25
      DATA TitlePSE  /4HPS-E,4H Ene,4Hrgy ,4HEnd-,                              RepPSE  26
     &                4HUse ,4HSumm,4Hary ,4Hfor ,                              RepPSE  27
     &                4Hall                      /                              RepPSE  28
      DATA Blank3    /4H    ,4H    ,4H    /                                     RepPSE  29
c              Report numbers in the HDRFIL                                     RepPSE  30
      DATA NumHdrfil /76,76,67,76,67,77/                                        RepPSE  31
c                     ^MBtu ^kWh     ^gallons                                   RepPSE  32
      DATA NumTDV2   /0, 0, 98, 99/                                             RepPSE  33
c                                                                               RepPSE  34
      IF (rE .eq. 0)  Return                                                    RepPSE  35
c              Pointer to statistics block                                      RepPSE  36
      s3  = <rE;s3>                                                             RepPSE  37
      s11 = <rE;s11>                                                            RepPSE  38
c                                                                               RepPSE  39
      SELECT CASE (Mode)                                                        RepPSE  40
c                                                                               RepPSE  41
c                                                                               RepPSE  42
c ============ REPORT CREATION ================================================ RepPSE  43
      CASE (52)                                                                 RepPSE  44
c                                                                               RepPSE  45
      WRITE(IREPFL)  4, <rE;Iuniq>, 4,                                          RepPSE  46
     &  NumHdrfil(<rE;MeterType>), 1                                            RepPSE  47
c                                                                               RepPSE  48
      IF (s11 .ne. 0)  WRITE(IREPFL)  4, <rE;Iuniq>+1, 4,                       RepPSE  49
     &  NumTDV2(<rE;MeterType>), 1                                              RepPSE  50
c                                                                               RepPSE  51
c                                                                               RepPSE  52
c ============ REPORT TITLE =================================================== RepPSE  53
      CASE (53)                                                                 RepPSE  54
c                                                                               RepPSE  55
      WRITE(IREPFL) 22, <rE;Iuniq>, 6,                                          RepPSE  56
     &    TitlePSE, (MasterMeters(I,<rE;MeterType>),I=1,8), Blank3              RepPSE  57
c                                                                               RepPSE  58
c                                                                               RepPSE  59
c ============ MONTHLY REPORT RECORDS ========================================= RepPSE  60
      CASE (55)                                                                 RepPSE  61
c                                                                               RepPSE  62
c              conversion for peak percent                                      RepPSE  63
      IF (<s3.TotalMaxMo> .ne. 0.)  THEN                                        RepPSE  64
        Pct = 100.0 / <s3.TotalMaxMo>                                           RepPSE  65
      ELSE                                                                      RepPSE  66
        Pct = 0.                                                                RepPSE  67
      ENDIF                                                                     RepPSE  68
c                                                                               RepPSE  69
c              monthly header record                                            RepPSE  70
      IF (<rE;MonthHeader> .EQ. 0)  THEN                                        RepPSE  71
        WRITE(IREPFL)  4, <rE;Iuniq>, 1, 1, 0                                   RepPSE  72
        <rE;MonthHeader> = 1                                                    RepPSE  73
        IF (s11 .ne. 0)  WRITE(IREPFL)  4, <rE;Iuniq>+1, 1, 1, 0                RepPSE  74
      ENDIF                                                                     RepPSE  75
c              print the data                                                   RepPSE  76
      WRITE(IREPFL) 81, <rE;Iuniq>, 1, 2, 77,                                   RepPSE  77
     &  MONDSC(IMO),                                                            RepPSE  78
     &  (<s3.EndUseMo>,IE=1,12),<s3.TotalMo>,                                   RepPSE  79
     &  (<s3.EndUseMaxMo>,    IE=1,12),<s3.TotalMaxMo>,                         RepPSE  80
     &  (<s3.EndUseMaxDyMo>, <s3.EndUseMaxHrMo>,IE=1,12),                       RepPSE  81
     &   <s3.TotalMaxDyMo>,  <s3.TotalMaxHrMo>,                                 RepPSE  82
     &  (<s3.EndUsePeakMo>, IE=1,12),                                           RepPSE  83
     &  (<s3.EndUsePeakMo>*Pct, IE=1,12)                                        RepPSE  84
c                                                                               RepPSE  85
      IF (s11 .ne. 0)  THEN                                                     RepPSE  86
        WRITE(IREPFL) 70, <rE;Iuniq>+1, 1, 2, 66,                               RepPSE  87
     &    MONDSC(IMO),                                                          RepPSE  88
     &    (<s11.EndUseMo>,IE=1,12),<s11.TotalMo>,                               RepPSE  89
     &    (<s11.EndUseMxMo>,IE=1,12),<s11.TotalMxMo>,                           RepPSE  90
     &    (<s11.EndUseMxDyMo>, <s11.EndUseMxHrMo>,IE=1,12),                     RepPSE  91
     &     <s11.TotalMxDyMo>, <s11.TotalMxHrMo>,                                RepPSE  92
     &    (<s11.EndUseMo>/Max(0.0001,<s3.EndUseMo>),IE=1,12),                   RepPSE  93
     &     <s11.TotalMo>/Max(0.0001,<s3.TotalMo>)                               RepPSE  94
      ENDIF                                                                     RepPSE  95
c                                                                               RepPSE  96
c                                                                               RepPSE  97
c ============ YEARLY REPORT RECORDS ========================================== RepPSE  98
      CASE (57)                                                                 RepPSE  99
c                                                                               RepPSE 100
c              conversion for peak percent                                      RepPSE 101
      IF (<s3.TotalMaxYr> .ne. 0.)  THEN                                        RepPSE 102
        Pct = 100.0 / <s3.TotalMaxYr>                                           RepPSE 103
      ELSE                                                                      RepPSE 104
        Pct = 0.                                                                RepPSE 105
      ENDIF                                                                     RepPSE 106
      WRITE(IREPFL) 80, <rE;Iuniq>, 1, 3, 76,                                   RepPSE 107
     &  (<s3.EndUseYr>,IE=1,12),<s3.TotalYr>,                                   RepPSE 108
     &  (<s3.EndUseMaxYr>,    IE=1,12),<s3.TotalMaxYr>,                         RepPSE 109
     &  (<s3.EndUseMaxMoYr>, <s3.EndUseMaxDyYr>,IE=1,12),                       RepPSE 110
     &   <s3.TotalMaxMoYr>,  <s3.TotalMaxDyYr>,                                 RepPSE 111
     &  (<s3.EndUsePeakYr>, IE=1,12),                                           RepPSE 112
     &  (<s3.EndUsePeakYr>*Pct, IE=1,12)                                        RepPSE 113
c                                                                               RepPSE 114
      IF (s11 .ne. 0)  THEN                                                     RepPSE 115
        WRITE(IREPFL) 69, <rE;Iuniq>+1, 1, 3, 65,                               RepPSE 116
     &    (<s11.EndUseYr>,IE=1,12),<s11.TotalYr>,                               RepPSE 117
     &    (<s11.EndUseMxYr>,IE=1,12),<s11.TotalMxYr>,                           RepPSE 118
     &    (<s11.EndUseMxMoYr>, <s11.EndUseMxDyYr>,IE=1,12),                     RepPSE 119
     &     <s11.TotalMxMoYr>, <s11.TotalMxDyYr>,                                RepPSE 120
     &    (<s11.EndUseYr>/Max(0.0001,<s3.EndUseYr>),IE=1,12),                   RepPSE 121
     &     <s11.TotalYr>/Max(0.0001,<s3.TotalYr>)                               RepPSE 122
      ENDIF                                                                     RepPSE 123
c                                                                               RepPSE 124
c                                                                               RepPSE 125
c ============ CLOSING RECORD ================================================= RepPSE 126
      CASE (59)                                                                 RepPSE 127
c                                                                               RepPSE 128
      WRITE(IREPFL) 2, <rE;Iuniq>, 7                                            RepPSE 129
      IF (s11 .ne. 0)  WRITE(IREPFL) 2, <rE;Iuniq>+1, 7                         RepPSE 130
c                                                                               RepPSE 131
c                                                                               RepPSE 132
      END SELECT                                                                RepPSE 133
c                                                                               RepPSE 134
      RETURN                                                                    RepPSE 135
      END                                                                       RepPSE 136
C ##############################################################################PS-F     2
C ##########                                                          ##########PS-F     3
C ##########                           PS-F                           ##########PS-F     4
C ##########                                                          ##########PS-F     5
C ##############################################################################PS-F     6
      FUNCTION NewReport_PSF(s3, s1, s11)                                       NewPSF   2
c                                                                               NewPSF   3
c              Creates a block that controls the writing of the monthly         NewPSF   4
c              and yearly data for PS-F summary reports.                        NewPSF   5
c                                                                               NewPSF   6
c              s3         Pointer to variable's statistics block                NewPSF   7
c                           Statistics block must be Type 3                     NewPSF   8
c              s1         Pointer to a sum statistics block for                 NewPSF   9
c                           distribution losses                                 NewPSF  10
c              s11        Pointer to Type 11 TDV end-use block                  NewPSF  11
c              rF         Pointer to this block                                 NewPSF  12
c                                                                               NewPSF  13
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /REPRT1/ IREFG, Iuniq                                             /REPRT1/ 2
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrRp/ IrepA,  IrepB,  IrepC, IrepD, IrepE,                     /XPtrRp/ 2
     &                 IrepF,  IrepH,  IrepI, IrepO,                            /XPtrRp/ 3
     &                 xXPtrRp                                                  /XPtrRp/ 4
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               NewPSF  22
      Integer rF, s3, s1, s11                                                   NewPSF  23
      Save    rF                                                                NewPSF  24
c                                                                               NewPSF  25
      Data NameBlock   /4HPS-F /                                                NewPSF  26
c                                                                               NewPSF  27
c                                                                               NewPSF  28
c              Create the block and link to the previous block                  NewPSF  29
      NewReport_PSF = NewRecord(<+rF~Len>)                                      NewPSF  30
      IF (IrepF .eq. 0)  THEN                                                   NewPSF  31
        IrepF     = NewReport_PSF                                               NewPSF  32
      ELSE                                                                      NewPSF  33
        <rF;Next> = NewReport_PSF                                               NewPSF  34
      ENDIF                                                                     NewPSF  35
      rF = NewReport_PSF                                                        NewPSF  36
c                                                                               NewPSF  37
c              Check to see that statistics block is the correct type           NewPSF  38
      IF (s3 .ne. 0)  THEN                                                      NewPSF  39
        IF (<s3;Ident> .ne. IdStatistics(3))  THEN                              NewPSF  40
c              wrong type of statistics block                                   NewPSF  41
          CALL MSGSIM(-1,II,II,II,II)                                           NewPSF  42
          WRITE (IOUTPT,9100) s3, <s3;Ident>                                    NewPSF  43
          GOTO 999                                                              NewPSF  44
        ENDIF                                                                   NewPSF  45
      ELSE                                                                      NewPSF  46
c              must be at least one variable                                    NewPSF  47
        CALL MSGSIM(-1,II,II,II,II)                                             NewPSF  48
        WRITE (IOUTPT,9101)                                                     NewPSF  49
        GOTO 999                                                                NewPSF  50
      ENDIF                                                                     NewPSF  51
c                                                                               NewPSF  52
c              Transfer parameters                                              NewPSF  53
      <rF;Ident> = NameBlock                                                    NewPSF  54
      <rF;s3>    = s3                                                           NewPSF  55
      <rF;s1>    = s1                                                           NewPSF  56
      <rF;Iuniq> = Iuniq                                                        NewPSF  57
      Iuniq      = Iuniq + 1                                                    NewPSF  58
c                                                                               NewPSF  59
      IF (s11 .ne. 0)  THEN  ! time-dependent valuation                         NewPSF  60
        IF (<s11;Ident> .ne. IdStatistics(11))  THEN                            NewPSF  61
c              wrong type of statistics block                                   NewPSF  62
          CALL MSGSIM(-1,II,II,II,II)                                           NewPSF  63
          WRITE (IOUTPT,9102) s11, <s11;Ident>                                  NewPSF  64
          GOTO 999                                                              NewPSF  65
        ENDIF                                                                   NewPSF  66
        <rF;s11> = s11                                                          NewPSF  67
        Iuniq    = Iuniq + 1                                                    NewPSF  68
      ENDIF                                                                     NewPSF  69
c                                                                               NewPSF  70
      RETURN                                                                    NewPSF  71
c                                                                               NewPSF  72
  999 CALL MessageBox( NULL,                                                    NewPSF  73
     &  'Error setting up Report PS-F -'//                                      NewPSF  74
     &   char(10)//char(13)//char(10)//char(13)//                               NewPSF  75
     &  'Contact DOE-2 Support'//char(0),                                       NewPSF  76
     &  'HVAC Setup Errors'//char(0),                                           NewPSF  77
     &  MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                    NewPSF  78
      IwinReturn = 1                                                            NewPSF  79
      RETURN                                                                    NewPSF  80
c                                                                               NewPSF  81
c              Message formats                                                  NewPSF  82
 9100 FORMAT(14X,'PROGRAMMER ERROR:  Type F report block was'          /        NewPSF  83
     &       14X,'passed a pointer to a statistics block of the wrong' /        NewPSF  84
     &       14X,' type.  VarPtr:',I7,' Ident: ',A4                    )        NewPSF  85
 9101 FORMAT(14X,'PROGRAMMER ERROR:  Type F report block was'          /        NewPSF  86
     &       14X,'passed a pointer to a statistics block having a    ' /        NewPSF  87
     &       14X,'zero value.'                                         )        NewPSF  88
 9102 FORMAT(14X,'PROGRAMMER ERROR:  Type F report block was'          /        NewPSF  89
     &       14X,'passed a pointer to a statistics block of the wrong' /        NewPSF  90
     &       14X,' type.  VarPtr:',I7,' Ident: ',A4                    )        NewPSF  91
c                                                                               NewPSF  92
      END                                                                       NewPSF  93
      SUBROUTINE Report_PSF(Mode, rF)                                           RepPSF   2
c                                                                               RepPSF   3
c              Outputs the PS-F & TDV3 reports                                  RepPSF   4
c                                                                               RepPSF   5
c              rF       Pointer to the report block                             RepPSF   6
c              Mode = 50  Make requests for reports                             RepPSF   7
c                     51  Second level of requests                              RepPSF   8
c                     52  Create in proper output order                         RepPSF   9
c                     53  Titles                                                RepPSF  10
c                     54  Design records                                        RepPSF  11
c                     55  Monthly records                                       RepPSF  12
c                     57  Yearly records                                        RepPSF  13
c                     59  Close report                                          RepPSF  14
c                                                                               RepPSF  15
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /CTRL  / VERS(2),IRPFLG(4),IOVRLL(7),IWRTFL,IPROG,                /CTRL/   2
     1                 IFATAL,NAMPRG(3,7),MTRICR                                /CTRL/   3
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
      COMMON /UNITT/   VKONV(300), DUMLOG(4), JUNITT(4,300,2)                   /UNITT/  2
c                                                                               RepPSF  22
      INTEGER rF, s1, s3, s11, TitlePSF(9), TitleTDV3(9), Blank3(3),            RepPSF  23
     &        NumTDV3(4)                                                        RepPSF  24
c                                                                               RepPSF  25
      DATA TitlePSF  /4HPS-F,4H Ene,4Hrgy ,4HEnd-,                              RepPSF  26
     &                4HUse ,4HSumm,4Hary ,4Hfor ,                              RepPSF  27
     &                4H                         /                              RepPSF  28
      DATA TitleTDV3 /4HTDV3,4H TDV,4H Ene,4Hrgy ,                              RepPSF  29
     &                4HEnd-,4HUse ,4HSumm,4Hary ,                              RepPSF  30
     &                4Hfor /                                                   RepPSF  31
      DATA Blank3    /4H    , 4H    , 4H    /                                   RepPSF  32
                                                                                RepPSF  33
c              Report number in the HDRFIL                                      RepPSF  34
      DATA NumHdrfil /68/                                                       RepPSF  35
      DATA NumTDV3   /0, 0, 96, 97/                                             RepPSF  36
c                                                                               RepPSF  37
c                                                                               RepPSF  38
      IF (rF .eq. 0)  Return                                                    RepPSF  39
c                                                                               RepPSF  40
c              Pointers to end-use statistics block and parent meter            RepPSF  41
      s3  = <rF;s3>                                                             RepPSF  42
      s11 = <rF;s11>                                                            RepPSF  43
      Jme = Jparent(<s3;Node>)                                                  RepPSF  44
c              Set the units - english or metric                                RepPSF  45
      IF (MTRICR .ne. 1)  THEN                                                  RepPSF  46
        IUNIT = 2  ! english                                                    RepPSF  47
      ELSE                                                                      RepPSF  48
        IUNIT = 1  ! metric                                                     RepPSF  49
      ENDIF                                                                     RepPSF  50
c                                                                               RepPSF  51
      SELECT CASE (Mode)                                                        RepPSF  52
c                                                                               RepPSF  53
c                                                                               RepPSF  54
c ============ REPORT CREATION ================================================ RepPSF  55
      CASE (52)                                                                 RepPSF  56
c                                                                               RepPSF  57
      WRITE(IREPFL)  4, <rF;Iuniq>, 4, NumHdrfil, 1                             RepPSF  58
c                                                                               RepPSF  59
      IF (s11 .ne. 0)                                                           RepPSF  60
     &  WRITE(IREPFL)  4, <rF;Iuniq>+1, 4, NumTDV3(<me:TYPE>), 1                RepPSF  61
c                                                                               RepPSF  62
c                                                                               RepPSF  63
c ============ REPORT TITLE =================================================== RepPSF  64
      CASE (53)                                                                 RepPSF  65
c                                                                               RepPSF  66
      WRITE(IREPFL) 22, <rF;Iuniq>, 6,                                          RepPSF  67
     &  TitlePSF, (<me:NAME>,II=1,8), Blank3                                    RepPSF  68
c                                                                               RepPSF  69
      IF (s11 .ne. 0)  WRITE(IREPFL) 22, <rF;Iuniq>+1, 6,                       RepPSF  70
     &  TitleTDV3, (<me:NAME>,II=1,8), Blank3                                   RepPSF  71
c                                                                               RepPSF  72
c                                                                               RepPSF  73
c ============ MONTHLY REPORT RECORDS ========================================= RepPSF  74
      CASE (55)                                                                 RepPSF  75
c                                                                               RepPSF  76
      IF (<s3.TotalMaxMo> .GT. 0.)  THEN                                        RepPSF  77
        Pct = 100. / <s3.TotalMaxMo>                                            RepPSF  78
      ELSE                                                                      RepPSF  79
        Pct = 0.                                                                RepPSF  80
      ENDIF                                                                     RepPSF  81
c                                                                               RepPSF  82
c              monthly header record                                            RepPSF  83
      IF (<rF;MonthHeader> .EQ. 0)  THEN                                        RepPSF  84
        WRITE(IREPFL)  4, <rF;Iuniq>, 1, 1, 0                                   RepPSF  85
        <rF;MonthHeader> = 1                                                    RepPSF  86
        IF (s11 .ne. 0)  WRITE(IREPFL)  4, <rF;Iuniq>+1, 1, 1, 0                RepPSF  87
      ENDIF                                                                     RepPSF  88
c              print the data                                                   RepPSF  89
      WRITE(IREPFL) 85, <rF;Iuniq>, 1, 2, 81,                                   RepPSF  90
     &  MONDSC(IMO),                                                            RepPSF  91
     &  (JUNITT(I,<me:UNIT-INDEX>,IUNIT),I=1,2),                                RepPSF  92
     &  (<s3.EndUseMo>*<me:BTU/UNIT>,IE=1,12),                                  RepPSF  93
     &                                 <s3.TotalMo>*<me:BTU/UNIT>,              RepPSF  94
     &  (JUNITT(I,<me:DEM-INDEX>,IUNIT),I=1,2),                                 RepPSF  95
     &  (<s3.EndUseMaxMo>*<me:BTU/UNIT>,IE=1,12),                               RepPSF  96
     &                                 <s3.TotalMaxMo>*<me:BTU/UNIT>,           RepPSF  97
     &  (<s3.EndUseMaxDyMo>, <s3.EndUseMaxHrMo>,IE=1,12),                       RepPSF  98
     &   <s3.TotalMaxDyMo>,  <s3.TotalMaxHrMo>,                                 RepPSF  99
     &  (<s3.EndUsePeakMo>*<me:BTU/UNIT>, IE=1,12),                             RepPSF 100
     &  (<s3.EndUsePeakMo>*Pct, IE=1,12)                                        RepPSF 101
c                                                                               RepPSF 102
      IF (s11 .ne. 0)  THEN                                                     RepPSF 103
        WRITE(IREPFL) 73, <rF;Iuniq>+1, 1, 2, 69,                               RepPSF 104
     &    MONDSC(IMO),                                                          RepPSF 105
     &    (<s11.EndUseMo>,IE=1,12),<s11.TotalMo>,                               RepPSF 106
     &    (<s11.EndUseMxMo>,IE=1,12),<s11.TotalMxMo>,                           RepPSF 107
     &    (<s11.EndUseMxDyMo>, <s11.EndUseMxHrMo>,IE=1,12),                     RepPSF 108
     &     <s11.TotalMxDyMo>, <s11.TotalMxHrMo>,                                RepPSF 109
     &    (<s11.EndUseMo>/Max(0.0001,<s3.EndUseMo>),IE=1,12),                   RepPSF 110
     &     <s11.TotalMo>/Max(0.0001,<s3.TotalMo>),                              RepPSF 111
     &     <s11.TDVmaxMo>, <s11.TDVminMo>,                                      RepPSF 112
     &     <s11.TDVavgMo>/Max(1.,<s11.TDVhrsMo>)                                RepPSF 113
      ENDIF                                                                     RepPSF 114
c                                                                               RepPSF 115
c                                                                               RepPSF 116
c ============ YEARLY REPORT RECORDS ========================================== RepPSF 117
      CASE (57)                                                                 RepPSF 118
c                                                                               RepPSF 119
      IF (<s3.TotalMaxYr> .GT. 0.)  THEN                                        RepPSF 120
        Pct = 100. / <s3.TotalMaxYr>                                            RepPSF 121
      ELSE                                                                      RepPSF 122
        Pct = 0.                                                                RepPSF 123
      ENDIF                                                                     RepPSF 124
c                                                                               RepPSF 125
      WRITE(IREPFL) 84, <rF;Iuniq>, 1, 3, 80,                                   RepPSF 126
     &  (JUNITT(I,<me:UNIT-INDEX>,IUNIT),I=1,2),                                RepPSF 127
     &  (<s3.EndUseYr>*<me:BTU/UNIT>,IE=1,12),                                  RepPSF 128
     &                                 <s3.TotalYr>*<me:BTU/UNIT>,              RepPSF 129
     &  (JUNITT(I,<me:DEM-INDEX>,IUNIT),I=1,2),                                 RepPSF 130
     &  (<s3.EndUseMaxYr>*<me:BTU/UNIT>,IE=1,12),                               RepPSF 131
     &                                 <s3.TotalMaxYr>*<me:BTU/UNIT>,           RepPSF 132
     &  (<s3.EndUseMaxMoYr>, <s3.EndUseMaxDyYr>,IE=1,12),                       RepPSF 133
     &   <s3.TotalMaxMoYr>,  <s3.TotalMaxDyYr>,                                 RepPSF 134
     &  (<s3.EndUsePeakYr>*<me:BTU/UNIT>, IE=1,12),                             RepPSF 135
     &  (<s3.EndUsePeakYr>*Pct, IE=1,12)                                        RepPSF 136
c              Transformer or other distribution loss                           RepPSF 137
      IF (<rF;s1> .GT. 0)  THEN                                                 RepPSF 138
        s1 = <rF;s1>                                                            RepPSF 139
        WRITE(IREPFL) 5, <rF;Iuniq>, 1, 5, 1,                                   RepPSF 140
     &    <s1.TotalYr>*<me:BTU/UNIT>                                            RepPSF 141
      ENDIF                                                                     RepPSF 142
c                                                                               RepPSF 143
      IF (s11 .ne. 0)  THEN                                                     RepPSF 144
        WRITE(IREPFL) 72, <rF;Iuniq>+1, 1, 3, 68,                               RepPSF 145
     &    (<s11.EndUseYr>,IE=1,12),<s11.TotalYr>,                               RepPSF 146
     &    (<s11.EndUseMxYr>,IE=1,12),<s11.TotalMxYr>,                           RepPSF 147
     &    (<s11.EndUseMxMoYr>, <s11.EndUseMxDyYr>,IE=1,12),                     RepPSF 148
     &     <s11.TotalMxMoYr>, <s11.TotalMxDyYr>,                                RepPSF 149
     &    (<s11.EndUseYr>/Max(0.0001,<s3.EndUseYr>),IE=1,12),                   RepPSF 150
     &     <s11.TotalYr>/Max(0.0001,<s3.TotalYr>),                              RepPSF 151
     &     <s11.TDVmaxYr>, <s11.TDVminYr>,                                      RepPSF 152
     &     <s11.TDVavgYr>/Max(1.,<s11.TDVhrsYr>)                                RepPSF 153
        SELECT CASE (<me:TYPE>)                                                 RepPSF 154
        CASE (3)  ! electric                                                    RepPSF 155
          WRITE(IREPFL) 5, <rF;Iuniq>+1, 1, 4, 1, <s11.LossYr>                  RepPSF 156
        CASE (4)  ! fuel                                                        RepPSF 157
c                  cogeneration sales                                           RepPSF 158
          IE = 13                                                               RepPSF 159
          IF (<s11.EndUseYr> .GT. 0.)                                           RepPSF 160
     &      WRITE(IREPFL) 5, <rF;Iuniq>+1, 1, 4, 1, <s11.EndUseYr>              RepPSF 161
        END SELECT                                                              RepPSF 162
      ENDIF                                                                     RepPSF 163
c                                                                               RepPSF 164
c                                                                               RepPSF 165
c ============ CLOSING RECORD ================================================= RepPSF 166
      CASE (59)                                                                 RepPSF 167
c                                                                               RepPSF 168
      WRITE(IREPFL) 2, <rF;Iuniq>, 7                                            RepPSF 169
      IF (s11 .ne. 0)  WRITE(IREPFL) 2, <rF;Iuniq>+1, 7                         RepPSF 170
c                                                                               RepPSF 171
      END SELECT                                                                RepPSF 172
c                                                                               RepPSF 173
      RETURN                                                                    RepPSF 174
      END                                                                       RepPSF 175
C ##############################################################################PS-H     2
C ##########                                                          ##########PS-H     3
C ##########                           PS-H                           ##########PS-H     4
C ##########                                                          ##########PS-H     5
C ##############################################################################PS-H     6
      FUNCTION NewReport_H(Jcomp, NumHdrFil,                                    NewRH    2
     &                          ColumnFmt, MonthFmt, YearFmt,                   NewRH    3
     &                          s2_1, s2_2, s2_3, s2_4,                         NewRH    4
     &                          s5_1, s5_2, s5_3,                               NewRH    5
     &                          SummaryIuniq, SummaryFmt, SummaryOrder)         NewRH    6
c                                                                               NewRH    7
c              Creates a block that controls the writing of the monthly         NewRH    8
c              and yearly data for PS-H and RS-H summary reports for a          NewRH    9
c              given component.                                                 NewRH   10
c                                                                               NewRH   11
c              Uses the s2 and s5 statistics blocks                             NewRH   12
c                                                                               NewRH   13
c              For the Type "H" reports:                                        NewRH   14
c              Iuniq         Unique report number                               NewRH   15
c              Jcomp         Pointer to parent component                        NewRH   16
c              NumHdrFil     Report number in HDRFIL                            NewRH   17
c              MonthFmt      Format number for monthly output                   NewRH   18
c              YearFmt       Format number for yearly output                    NewRH   19
c              s2_1,4        Pointers to the s2 statistics blocks               NewRH   20
c              s5_1,3        Pointers to the s5 statistics blocks               NewRH   21
c                                                                               NewRH   22
c              For the summary reports that type "H" reports feed into:         NewRH   23
c              SummaryIuniq  The unique report number for the summary           NewRH   24
c                            report - PS-C, PS-D, RS-C, RS-D                    NewRH   25
c              SummaryFmt    The format number                                  NewRH   26
c              SummaryOrder  The order assignment for printing                  NewRH   27
c              rH            Pointer to this block                              NewRH   28
c                                                                               NewRH   29
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /REPRT1/ IREFG, Iuniq                                             /REPRT1/ 2
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrRp/ IrepA,  IrepB,  IrepC, IrepD, IrepE,                     /XPtrRp/ 2
     &                 IrepF,  IrepH,  IrepI, IrepO,                            /XPtrRp/ 3
     &                 xXPtrRp                                                  /XPtrRp/ 4
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               NewRH   38
      Integer rH, s2,s5, s2_1,s2_2,s2_3,s2_4, s5_1,s5_2,s5_3                    NewRH   39
      Save    rH                                                                NewRH   40
      Integer ColumnFmt, YearFmt, s2Ptrs(4), s5Ptrs(3), SummaryIuniq,           NewRH   41
     &        SummaryFmt, SummaryOrder, NumHdrFil                               NewRH   42
c                                                                               NewRH   43
      Data NameBlock /4HRepH /                                                  NewRH   44
c                                                                               NewRH   45
c              Load the statistics block pointers into an array for             NewRH   46
c              processing                                                       NewRH   47
      s2Ptrs(1) = s2_1                                                          NewRH   48
      s2Ptrs(2) = s2_2                                                          NewRH   49
      s2Ptrs(3) = s2_3                                                          NewRH   50
      s2Ptrs(4) = s2_4                                                          NewRH   51
      s5Ptrs(1) = s5_1                                                          NewRH   52
      s5Ptrs(2) = s5_2                                                          NewRH   53
      s5Ptrs(3) = s5_3                                                          NewRH   54
c                                                                               NewRH   55
c              Create the block and link to the previous block                  NewRH   56
      NewReport_H = NewRecord(<+rH~Len>)                                        NewRH   57
      IF (IrepH .eq. 0)  THEN                                                   NewRH   58
        IrepH     = NewReport_H                                                 NewRH   59
      ELSE                                                                      NewRH   60
        <rH;Next> = NewReport_H                                                 NewRH   61
      ENDIF                                                                     NewRH   62
      rH = NewReport_H                                                          NewRH   63
c                                                                               NewRH   64
c              transfer parameters                                              NewRH   65
      <rH;Ident>        = NameBlock                                             NewRH   66
      <rH;ComponentPtr> = Jcomp                                                 NewRH   67
c                                                                               NewRH   68
c              Process the s2 statistics blocks (total, peak, time)             NewRH   69
      DO  IV=1,4                                                                NewRH   70
        IF (s2Ptrs(IV) .EQ. 0)  EXIT                                            NewRH   71
        <rH;s2Num> = IV                                                         NewRH   72
c              Check to see that statistics block is the correct type           NewRH   73
        s2 = s2Ptrs(IV)                                                         NewRH   74
        IF (<s2;Ident> .EQ. IdStatistics(2))  THEN                              NewRH   75
          <rH;s2Ptrs> = s2                                                      NewRH   76
        ELSE                                                                    NewRH   77
c              wrong type of statistics block                                   NewRH   78
          CALL MSGSIM(-1,II,II,II,II)                                           NewRH   79
          WRITE (IOUTPT,9001) s2, <s2;Ident>                                    NewRH   80
          GOTO 999                                                              NewRH   81
        ENDIF                                                                   NewRH   82
      ENDDO                                                                     NewRH   83
c              must be at least one variable                                    NewRH   84
      IF (<rH;s2Num> .EQ. 0)  THEN                                              NewRH   85
        CALL MSGSIM(-1,II,II,II,II)                                             NewRH   86
        WRITE (IOUTPT,9002)                                                     NewRH   87
        GOTO 999                                                                NewRH   88
      ENDIF                                                                     NewRH   89
c                                                                               NewRH   90
c              Repeat for s5 statistics (bins)                                  NewRH   91
      DO  IV=1,3                                                                NewRH   92
        IF (s5Ptrs(IV) .EQ. 0)  EXIT                                            NewRH   93
          <rH;s5Num> = IV                                                       NewRH   94
c              Check to see that statistics block is the correct type           NewRH   95
        s5 = s5Ptrs(IV)                                                         NewRH   96
        IF (<s5;Ident> .EQ. IdStatistics(5))  THEN                              NewRH   97
          <rH;s5Ptrs> = s5                                                      NewRH   98
        ELSE                                                                    NewRH   99
c              wrong type of statistics block                                   NewRH  100
          CALL MSGSIM(-1,II,II,II,II)                                           NewRH  101
          WRITE (IOUTPT,9003) s5, <s5;Ident>                                    NewRH  102
          GOTO 999                                                              NewRH  103
        ENDIF                                                                   NewRH  104
      ENDDO                                                                     NewRH  105
c                                                                               NewRH  106
c              Report H information                                             NewRH  107
      <rH;NumHdrFil>     = NumHdrFil                                            NewRH  108
      <rH;ColumnFormat>  = ColumnFmt                                            NewRH  109
      <rH;MonthFormat>   = MonthFmt                                             NewRH  110
      <rH;YearFormat>    = YearFmt                                              NewRH  111
      <rH;Iuniq>         = Iuniq                                                NewRH  112
      Iuniq              = Iuniq + 1                                            NewRH  113
c                                                                               NewRH  114
c              Summary report information (PS-C or RS-C)                        NewRH  115
      <rH;SummaryIuniq>  = SummaryIuniq                                         NewRH  116
      <rH;SummaryFormat> = SummaryFmt                                           NewRH  117
      <rH;SummaryOrder>  = SummaryOrder                                         NewRH  118
c                                                                               NewRH  119
      RETURN                                                                    NewRH  120
c                                                                               NewRH  121
  999 CALL MessageBox( NULL,                                                    NewRH  122
     &  'Error setting up Report PS-H -'//                                      NewRH  123
     &   char(10)//char(13)//char(10)//char(13)//                               NewRH  124
     &  'Contact DOE-2 Support'//char(0),                                       NewRH  125
     &  'HVAC Setup Errors'//char(0),                                           NewRH  126
     &  MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                    NewRH  127
      IwinReturn = 1                                                            NewRH  128
      RETURN                                                                    NewRH  129
c                                                                               NewRH  130
c              Message formats                                                  NewRH  131
 9001 FORMAT(14X,'PROGRAMMER ERROR:  Type H report block was'          /        NewRH  132
     &       14X,'passed a pointer to an s2 statistics block of the'   /        NewRH  133
     &       14X,'wrong type.  s2Ptr:',I7,' Ident: ',A4                )        NewRH  134
 9002 FORMAT(14X,'PROGRAMMER ERROR:  Type H report block was'          /        NewRH  135
     &       14X,'no s2 statistics blocks.'                            )        NewRH  136
 9003 FORMAT(14X,'PROGRAMMER ERROR:  Type H report block was'          /        NewRH  137
     &       14X,'passed a pointer to an s5 statistics block of the'   /        NewRH  138
     &       14X,'wrong type.  s5Ptr:',I7,' Ident: ',A4                )        NewRH  139
c                                                                               NewRH  140
      END                                                                       NewRH  141
      SUBROUTINE Report_H(Mode, rH)                                             RepPSH   2
c                                                                               RepPSH   3
c              Prints a single record for Type H reports                        RepPSH   4
c                                                                               RepPSH   5
c              rH        Pointer to the report block                            RepPSH   6
c              Mode = 50  Make requests for reports                             RepPSH   7
c                     51  Second level of requests                              RepPSH   8
c                     52  Create in proper output order                         RepPSH   9
c                     53  Titles                                                RepPSH  10
c                     54  Design records                                        RepPSH  11
c                     55  Monthly records                                       RepPSH  12
c                     57  Yearly records                                        RepPSH  13
c                     58  Yearly summary records                                RepPSH  14
c                     59  Close reports                                         RepPSH  15
c                                                                               RepPSH  16
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
c                                                                               RepPSH  22
      INTEGER rH, TitlePSH(9), Blank3(3), s2offset, s5offset,                   RepPSH  23
     &        RecordFormat                                                      RepPSH  24
      DATA TitlePSH  /4HPS-H,4H Loa,4Hds a,4Hnd E,                              RepPSH  25
     &                4Hnerg,4Hy Us,4Hage ,4Hfor ,                              RepPSH  26
     &                4H                         /                              RepPSH  27
      DATA Blank3 /4H    , 4H    , 4H    /                                      RepPSH  28
      DATA IHYR, IHBlank /3HYR , 3H   /                                         RepPSH  29
c                                                                               RepPSH  30
      IF (rH .eq. 0)  Return                                                    RepPSH  31
c                                                                               RepPSH  32
      SELECT CASE (Mode)                                                        RepPSH  33
c                                                                               RepPSH  34
c                                                                               RepPSH  35
c ============ REPORT CREATION ================================================ RepPSH  36
      CASE (52)                                                                 RepPSH  37
c                                                                               RepPSH  38
      WRITE(IREPFL)  4, <rH;Iuniq>, 4, <rH;NumHdrFil>, 1                        RepPSH  39
c                                                                               RepPSH  40
c                                                                               RepPSH  41
c ============ REPORT TITLE =================================================== RepPSH  42
      CASE (53)                                                                 RepPSH  43
c                                                                               RepPSH  44
      Jna = Jparent(<rH;ComponentPtr>)                                          RepPSH  45
      WRITE (IREPFL) 22, <rH;Iuniq>, 6,                                         RepPSH  46
     &  TitlePSH, (<na:NAME>,II=1,8), Blank3                                    RepPSH  47
c                                                                               RepPSH  48
c                                                                               RepPSH  49
c ============ MONTHLY REPORT RECORDS ========================================= RepPSH  50
      CASE (55:58)                                                              RepPSH  51
c                                                                               RepPSH  52
c              monthly header record                                            RepPSH  53
      IF (<rH;MonthHeader> .EQ. 0)  THEN                                        RepPSH  54
        WRITE (IREPFL) 4, <rH;Iuniq>, 1, <rH;ColumnFormat>, 0                   RepPSH  55
        <rH;MonthHeader> = 1                                                    RepPSH  56
      ENDIF                                                                     RepPSH  57
c                                                                               RepPSH  58
      SELECT CASE (Mode)                                                        RepPSH  59
        CASE (55)   ! Monthly                                                   RepPSH  60
          Iuniq        = <rH;Iuniq>                                             RepPSH  61
          RecordFormat = <rH;MonthFormat>                                       RepPSH  62
          MonYear      = MONDSC(IMO)                                            RepPSH  63
          s2offset     = <+s2~MoZeroStart..> - 1                                RepPSH  64
          s5offset     = <+s5~MoZeroStart..> - 1                                RepPSH  65
        CASE (57)   ! Yearly                                                    RepPSH  66
          Iuniq        = <rH;Iuniq>                                             RepPSH  67
          RecordFormat = <rH;YearFormat>                                        RepPSH  68
          MonYear      = IHYR                                                   RepPSH  69
          s2offset     = <+s2~YrZeroStart..> - 1                                RepPSH  70
          s5offset     = <+s5~YrZeroStart..> - 1                                RepPSH  71
        CASE (58)   ! Summary                                                   RepPSH  72
          Iuniq        = <rH;SummaryIuniq>                                      RepPSH  73
          RecordFormat = <rH;SummaryFormat>                                     RepPSH  74
          MonYear      = IHBlank                                                RepPSH  75
          s2offset     = <+s2~YrZeroStart..> - 1                                RepPSH  76
          s5offset     = <+s5~YrZeroStart..> - 1                                RepPSH  77
c quck?? fix ps-c formats to have a blank MONyear at the beginning              RepPSH  78
      END SELECT                                                                RepPSH  79
c                                                                               RepPSH  80
c              print the record                                                 RepPSH  81
      NumTotl = 1 + <rH;s2Num>*4 + <rH;s5Num>*12                                RepPSH  82
      Nbins1  = 12 * MIN(1, <rH;s5Num>)                                         RepPSH  83
      Nbins2  = 12 * MIN(1, <rH;s5Num>-1)                                       RepPSH  84
      Nbins3  = 12 * MIN(1, <rH;s5Num>-2)                                       RepPSH  85
      WRITE(IREPFL) NumTotl+4, Iuniq, 1, RecordFormat, NumTotl,                 RepPSH  86
     &  MonYear,                                                                RepPSH  87
     &  (AA(<rH;s2Ptrs>+s2offset+1),IV=1,<rH;s2Num>),                           RepPSH  88
     &                  (IA(<rH;s5Ptr1>+s5offset+IB),IB=1,Nbins1),              RepPSH  89
     &  (AA(<rH;s2Ptrs>+s2offset+2),IV=1,<rH;s2Num>),                           RepPSH  90
     &                  (IA(<rH;s5Ptr2>+s5offset+IB),IB=1,Nbins2),              RepPSH  91
     &  (IA(<rH;s2Ptrs>+s2offset+3),                                            RepPSH  92
     &   IA(<rH;s2Ptrs>+s2offset+4),IV=1,<rH;s2Num>),                           RepPSH  93
     &                  (IA(<rH;s5Ptr3>+s5offset+IB),IB=1,Nbins3)               RepPSH  94
c                                                                               RepPSH  95
c                                                                               RepPSH  96
c ============ CLOSING RECORD ================================================= RepPSH  97
      CASE (59)                                                                 RepPSH  98
c                                                                               RepPSH  99
      WRITE(IREPFL) 2, <rH;Iuniq>, 7                                            RepPSH 100
c                                                                               RepPSH 101
c                                                                               RepPSH 102
      END SELECT  ! Mode                                                        RepPSH 103
c                                                                               RepPSH 104
c                                                                               RepPSH 105
      RETURN                                                                    RepPSH 106
      END                                                                       RepPSH 107
C ##############################################################################PS-I     2
C ##########                                                          ##########PS-I     3
C ##########                           PS-I                           ##########PS-I     4
C ##########                                                          ##########PS-I     5
C ##############################################################################PS-I     6
      FUNCTION NewReport_I(Jcomp, NumHdrFil,                                    NewPSI   2
     &                     ColumnFmt, MonthFmt, YearFmt,                        NewPSI   3
     &                     s2_1, s2_2, s2_3, s2_4, s2_5, s2_6,                  NewPSI   4
     &                     s2_7, s2_8, s2_9, s2_10, s2_11, s2_12)               NewPSI   5
c                                                                               NewPSI   6
c              Creates a block that controls the writing of the monthly         NewPSI   7
c              and yearly data for PS-I and RS-I summary reports for a          NewPSI   8
c              given component.                                                 NewPSI   9
c                                                                               NewPSI  10
c              Uses the s2 statistics block                                     NewPSI  11
c                                                                               NewPSI  12
c              For the Type "I" reports:                                        NewPSI  13
c              Iuniq         Unique report number                               NewPSI  14
c              Jcomp         Pointer to parent component                        NewPSI  15
c              NumHdrFil     Report number in HDRFIL                            NewPSI  16
c              ColumnFmt     Format number for the column heatings              NewPSI  17
c              MonthFmt      Format number for monthly output                   NewPSI  18
c              YearFmt       Format number for yearly output                    NewPSI  19
c              s2_1,12       Pointers to the s2 statistics blocks               NewPSI  20
c                                                                               NewPSI  21
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /REPRT1/ IREFG, Iuniq                                             /REPRT1/ 2
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrRp/ IrepA,  IrepB,  IrepC, IrepD, IrepE,                     /XPtrRp/ 2
     &                 IrepF,  IrepH,  IrepI, IrepO,                            /XPtrRp/ 3
     &                 xXPtrRp                                                  /XPtrRp/ 4
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               NewPSI  30
      Integer s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s2_9,             NewPSI  31
     &        s2_10, s2_11, s2_12                                               NewPSI  32
      Integer rI, s2, ColumnFmt, YearFmt, s2Ptrs(12)                            NewPSI  33
      Save    rI                                                                NewPSI  34
c                                                                               NewPSI  35
      Data NameBlock /4HRepI /                                                  NewPSI  36
c                                                                               NewPSI  37
c              Load the statistics block pointers into an array for             NewPSI  38
c              processing                                                       NewPSI  39
      s2Ptrs(1)  = s2_1                                                         NewPSI  40
      s2Ptrs(2)  = s2_2                                                         NewPSI  41
      s2Ptrs(3)  = s2_3                                                         NewPSI  42
      s2Ptrs(4)  = s2_4                                                         NewPSI  43
      s2Ptrs(5)  = s2_5                                                         NewPSI  44
      s2Ptrs(6)  = s2_6                                                         NewPSI  45
      s2Ptrs(7)  = s2_7                                                         NewPSI  46
      s2Ptrs(8)  = s2_8                                                         NewPSI  47
      s2Ptrs(9)  = s2_9                                                         NewPSI  48
      s2Ptrs(10) = s2_10                                                        NewPSI  49
      s2Ptrs(11) = s2_11                                                        NewPSI  50
      s2Ptrs(12) = s2_12                                                        NewPSI  51
c                                                                               NewPSI  52
c              Create the block and link to the previous block                  NewPSI  53
      NewReport_I = NewRecord(<+rI~Len>)                                        NewPSI  54
      IF (IrepI .eq. 0)  THEN                                                   NewPSI  55
        IrepI     = NewReport_I                                                 NewPSI  56
      ELSE                                                                      NewPSI  57
        <rI;Next> = NewReport_I                                                 NewPSI  58
      ENDIF                                                                     NewPSI  59
      rI = NewReport_I                                                          NewPSI  60
c                                                                               NewPSI  61
c              transfer parameters                                              NewPSI  62
      <rI;Ident>        = NameBlock                                             NewPSI  63
      <rI;ComponentPtr> = Jcomp                                                 NewPSI  64
c                                                                               NewPSI  65
c              Set the variable pointers to point directly to                   NewPSI  66
c              the monthly statistics data, rather than pointing                NewPSI  67
c              to the start of the blocks                                       NewPSI  68
      DO  IV=1,12                                                               NewPSI  69
        IF (s2Ptrs(IV) .EQ. 0)  EXIT                                            NewPSI  70
        <rI;s2Num> = IV                                                         NewPSI  71
c              check to see that statistics block is the correct type           NewPSI  72
        s2 = s2Ptrs(IV)                                                         NewPSI  73
        IF (<s2;Ident> .EQ. IdStatistics(2))  THEN                              NewPSI  74
          <rI;s2Ptrs> = s2                                                      NewPSI  75
        ELSE                                                                    NewPSI  76
c              wrong type of statistics block                                   NewPSI  77
          CALL MSGSIM(-1,II,II,II,II)                                           NewPSI  78
          WRITE (IOUTPT,9001) s2, <s2;Ident>                                    NewPSI  79
          GOTO 999                                                              NewPSI  80
        ENDIF                                                                   NewPSI  81
      ENDDO                                                                     NewPSI  82
c              must be at least one variable                                    NewPSI  83
      IF (<rI;s2Num> .EQ. 0)  THEN                                              NewPSI  84
        CALL MSGSIM(-1,II,II,II,II)                                             NewPSI  85
        WRITE (IOUTPT,9002)                                                     NewPSI  86
        GOTO 999                                                                NewPSI  87
      ENDIF                                                                     NewPSI  88
c                                                                               NewPSI  89
      <rI;NumHdrFil>    = NumHdrFil                                             NewPSI  90
      <rI;ColumnFormat> = ColumnFmt                                             NewPSI  91
      <rI;MonthFormat>  = MonthFmt                                              NewPSI  92
      <rI;YearFormat>   = YearFmt                                               NewPSI  93
      <rI;Iuniq>        = Iuniq                                                 NewPSI  94
      Iuniq             = Iuniq + 1                                             NewPSI  95
c                                                                               NewPSI  96
      RETURN                                                                    NewPSI  97
c                                                                               NewPSI  98
  999 CALL MessageBox( NULL,                                                    NewPSI  99
     &  'Error setting up Report PS-I -'//                                      NewPSI 100
     &   char(10)//char(13)//char(10)//char(13)//                               NewPSI 101
     &  'Contact DOE-2 Support'//char(0),                                       NewPSI 102
     &  'HVAC Setup Errors'//char(0),                                           NewPSI 103
     &  MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                    NewPSI 104
      IwinReturn = 1                                                            NewPSI 105
      RETURN                                                                    NewPSI 106
c                                                                               NewPSI 107
c              Message formats                                                  NewPSI 108
 9001 FORMAT(14X,'PROGRAMMER ERROR:  Type I report block was'          /        NewPSI 109
     &       14X,'passed a pointer to a statistics block of the wrong' /        NewPSI 110
     &       14X,' type.  s2Ptr:',I7,' Ident: ',A4                     )        NewPSI 111
 9002 FORMAT(14X,'PROGRAMMER ERROR:  Type I report block has'          /        NewPSI 112
     &       14X,'no statistics blocks.'                               )        NewPSI 113
c                                                                               NewPSI 114
      END                                                                       NewPSI 115
      SUBROUTINE Report_I(Mode, rI)                                             RepPSI   2
c                                                                               RepPSI   3
c              Prints a single record for Type I reports                        RepPSI   4
c                                                                               RepPSI   5
c              rI         Pointer to the report block                           RepPSI   6
c              Mode = 50  Make requests for reports                             RepPSI   7
c                     51  Second level of requests                              RepPSI   8
c                     52  Create in proper output order                         RepPSI   9
c                     53  Titles                                                RepPSI  10
c                     54  Design records                                        RepPSI  11
c                     55  Monthly records                                       RepPSI  12
c                     57  Yearly records                                        RepPSI  13
c                     58  Yearly summary records                                RepPSI  14
c                     59  Close reports                                         RepPSI  15
c                                                                               RepPSI  16
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
c                                                                               RepPSI  22
      INTEGER rI, TitlePSI(9), Blank3(3), s2offset, RecordFormat                RepPSI  23
      DATA TitlePSI  /4HPS-I,4H Loa,4Hds a,4Hnd E,                              RepPSI  24
     &                4Hnerg,4Hy Us,4Hage ,4Hfor ,                              RepPSI  25
     &                4H                         /                              RepPSI  26
      DATA Blank3 /4H    , 4H    , 4H    /                                      RepPSI  27
      DATA IHYR   /3HYR /                                                       RepPSI  28
c                                                                               RepPSI  29
c                                                                               RepPSI  30
      IF (rI .eq. 0)  Return                                                    RepPSI  31
c                                                                               RepPSI  32
      SELECT CASE (Mode)                                                        RepPSI  33
c                                                                               RepPSI  34
c                                                                               RepPSI  35
c ============ REPORT CREATION ================================================ RepPSI  36
      CASE (52)                                                                 RepPSI  37
c                                                                               RepPSI  38
      WRITE(IREPFL)  4, <rI;Iuniq>, 4, <rI;NumHdrFil>, 1                        RepPSI  39
c                                                                               RepPSI  40
c                                                                               RepPSI  41
c ============ REPORT TITLE =================================================== RepPSI  42
      CASE (53)                                                                 RepPSI  43
c                                                                               RepPSI  44
      Jna = Jparent(<rI;ComponentPtr>)                                          RepPSI  45
      WRITE (IREPFL) 22, <rI;Iuniq>, 6,                                         RepPSI  46
     &  TitlePSI, (<na:NAME>,II=1,8), Blank3                                    RepPSI  47
c                                                                               RepPSI  48
c                                                                               RepPSI  49
c ============ MONTHLY REPORT RECORDS ========================================= RepPSI  50
      CASE (55,57)                                                              RepPSI  51
c                                                                               RepPSI  52
c              monthly header record                                            RepPSI  53
      IF (<rI;MonthHeader> .EQ. 0)  THEN                                        RepPSI  54
        WRITE (IREPFL) 4, <rI;Iuniq>, 1, <rI;ColumnFormat>, 0                   RepPSI  55
        <rI;MonthHeader> = 1                                                    RepPSI  56
      ENDIF                                                                     RepPSI  57
c                                                                               RepPSI  58
      SELECT CASE (Mode)                                                        RepPSI  59
        CASE (55)   ! Monthly                                                   RepPSI  60
          RecordFormat = <rI;MonthFormat>                                       RepPSI  61
          MonYear      = MONDSC(IMO)                                            RepPSI  62
          s2offset     = <+s2~MoZeroStart..> - 1                                RepPSI  63
        CASE (57)   ! Yearly                                                    RepPSI  64
          RecordFormat = <rI;YearFormat>                                        RepPSI  65
          MonYear      = IHYR                                                   RepPSI  66
          s2offset     = <+s2~YrZeroStart..> - 1                                RepPSI  67
      END SELECT                                                                RepPSI  68
c                                                                               RepPSI  69
c              print the record                                                 RepPSI  70
      NumTotl = <rI;s2Num>*4+1                                                  RepPSI  71
      WRITE(IREPFL) NumTotl+4, <rI;Iuniq>, 1, RecordFormat, NumTotl,            RepPSI  72
     &      MonYear,                                                            RepPSI  73
     &      (AA(<rI;s2Ptrs>+s2offset+1),IV=1,<rI;s2Num>),                       RepPSI  74
     &      (AA(<rI;s2Ptrs>+s2offset+2),IV=1,<rI;s2Num>),                       RepPSI  75
     &      (IA(<rI;s2Ptrs>+s2offset+3),                                        RepPSI  76
     &       IA(<rI;s2Ptrs>+s2offset+4),IV=1,<rI;s2Num>)                        RepPSI  77
c                                                                               RepPSI  78
c                                                                               RepPSI  79
c ============ CLOSING RECORD ================================================= RepPSI  80
      CASE (59)                                                                 RepPSI  81
c                                                                               RepPSI  82
      WRITE(IREPFL) 2,<rI;Iuniq>,7                                              RepPSI  83
c                                                                               RepPSI  84
c                                                                               RepPSI  85
      END SELECT  ! Mode                                                        RepPSI  86
c                                                                               RepPSI  87
c                                                                               RepPSI  88
      RETURN                                                                    RepPSI  89
      END                                                                       RepPSI  90
C ##############################################################################SS-O     2
C ##########                                                          ##########SS-O     3
C ##########                           SS-O                           ##########SS-O     4
C ##########                                                          ##########SS-O     5
C ##############################################################################SS-O     6
      FUNCTION NewReport_SSO(Jcomp, NumHdrFil, s6)                              New_SSO  2
c                                                                               New_SSO  3
c              Creates a block that controls the writing of the                 New_SSO  4
c              yearly data for SS-N and SS-O scatter plots for a                New_SSO  5
c              given component.                                                 New_SSO  6
c                                                                               New_SSO  7
c              Iuniq         Unique report number                               New_SSO  8
c              Jcomp         Pointer to parent component                        New_SSO  9
c              NumHdrFil     Report number in HDRFIL                            New_SSO 10
c              s6            Pointer to the statistics block                    New_SSO 11
c                                                                               New_SSO 12
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /REPRT1/ IREFG, Iuniq                                             /REPRT1/ 2
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrRp/ IrepA,  IrepB,  IrepC, IrepD, IrepE,                     /XPtrRp/ 2
     &                 IrepF,  IrepH,  IrepI, IrepO,                            /XPtrRp/ 3
     &                 xXPtrRp                                                  /XPtrRp/ 4
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               New_SSO 21
      INTEGER rO, s6                                                            New_SSO 22
      Save    rO                                                                New_SSO 23
c                                                                               New_SSO 24
      DATA NameBlock   /4HRepO /                                                New_SSO 25
c                                                                               New_SSO 26
c              Create the block, and link to previous                           New_SSO 27
      NewReport_SSO = NewRecord(<+rO~Len>)                                      New_SSO 28
      IF (IrepO .eq. 0)  THEN                                                   New_SSO 29
        IrepO     = NewReport_SSO                                               New_SSO 30
      ELSE                                                                      New_SSO 31
        <rO;Next> = NewReport_SSO                                               New_SSO 32
      ENDIF                                                                     New_SSO 33
      rO = NewReport_SSO                                                        New_SSO 34
c                                                                               New_SSO 35
c              transfer parameters                                              New_SSO 36
      <rO;Ident>        = NameBlock                                             New_SSO 37
      <rO;ComponentPtr> = Jcomp                                                 New_SSO 38
c                                                                               New_SSO 39
c              Store the pointer to the statistics                              New_SSO 40
      IF (s6 .GT. 0)  THEN                                                      New_SSO 41
c              also check to see that statistics block is the correct           New_SSO 42
c              type (Type 6)                                                    New_SSO 43
        IF (<s6;Ident> .EQ. IdStatistics(6))  THEN                              New_SSO 44
          <rO;VarPtr> = s6                                                      New_SSO 45
        ELSE                                                                    New_SSO 46
c              wrong type of statistics block                                   New_SSO 47
c              Error messages                                                   New_SSO 48
          CALL MSGSIM(-1,II,II,II,II)                                           New_SSO 49
          WRITE (IOUTPT,9001) s6, <s6;Ident>                                    New_SSO 50
          GOTO 999                                                              New_SSO 51
        ENDIF                                                                   New_SSO 52
      ELSE                                                                      New_SSO 53
c              must be a variable                                               New_SSO 54
        CALL MSGSIM(-1,II,II,II,II)                                             New_SSO 55
        WRITE (IOUTPT,9002)                                                     New_SSO 56
        GOTO 999                                                                New_SSO 57
      ENDIF                                                                     New_SSO 58
c                                                                               New_SSO 59
c              Write the first report record for the "O" report,                New_SSO 60
      <rO;Iuniq> = Iuniq                                                        New_SSO 61
      WRITE(IREPFL)  4, Iuniq, 4, NumHdrFil, 1                                  New_SSO 62
c              increment the unique report number for the next report           New_SSO 63
      Iuniq = Iuniq + 1                                                         New_SSO 64
c                                                                               New_SSO 65
      RETURN                                                                    New_SSO 66
c                                                                               New_SSO 67
  999 CALL MessageBox( NULL,                                                    New_SSO 68
     &  'Error setting up Report SS-O or PS-O -'//                              New_SSO 69
     &   char(10)//char(13)//char(10)//char(13)//                               New_SSO 70
     &  'Contact DOE-2 Support'//char(0),                                       New_SSO 71
     &  'HVAC Setup Errors'//char(0),                                           New_SSO 72
     &  MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                    New_SSO 73
      IwinReturn = 1                                                            New_SSO 74
      RETURN                                                                    New_SSO 75
c                                                                               New_SSO 76
c              Message formats                                                  New_SSO 77
 9001 FORMAT(14X,'PROGRAMMER ERROR:  Type O report block was'          /        New_SSO 78
     &       14X,'passed a pointer to a statistics block of the wrong' /        New_SSO 79
     &       14X,' type.  s6Ptr:',I7,' Ident: ',A4                     )        New_SSO 80
 9002 FORMAT(14X,'PROGRAMMER ERROR:  Type O report block was'          /        New_SSO 81
     &       14X,'passed a pointer to a statistics block having a    ' /        New_SSO 82
     &       14X,'zero value.'                                         )        New_SSO 83
c                                                                               New_SSO 84
      END                                                                       New_SSO 85
      SUBROUTINE Report_SSO(rO)                                                 RepSSO   2
c                                                                               RepSSO   3
c              Prints the entire report for reports using the "O"               RepSSO   4
c              format                                                           RepSSO   5
c                                                                               RepSSO   6
c              rO   Pointer to the report block                                 RepSSO   7
c                                                                               RepSSO   8
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
c                                                                               RepSSO  12
      INTEGER rO, s6                                                            RepSSO  13
c QUCK??                                                                        RepSSO  14
c MODIFY HDRFIL BEFORE USING THIS ROUTINE                                       RepSSO  15
c                                                                               RepSSO  16
c              Unique report number                                             RepSSO  17
      Iuniq = <rO;Iuniq>                                                        RepSSO  18
c              Pointer to statistics block                                      RepSSO  19
      s6   = <rO;VarPtr>                                                        RepSSO  20
c                                                                               RepSSO  21
c              header                                                           RepSSO  22
      WRITE(IREPFL) 4, Iuniq, 1, 1, 0                                           RepSSO  23
c              above maximum range                                              RepSSO  24
      Istart = 1                                                                RepSSO  25
      Iend   = 25                                                               RepSSO  26
      IY     = 1                                                                RepSSO  27
      WRITE(IREPFL) 30, Iuniq, 1, 2, 26,                                        RepSSO  28
     &  <s6;Y-axis>, (<s6.YearBins>,II=Istart,Iend)                             RepSSO  29
c              middle ranges                                                    RepSSO  30
      DO  Irow=2,6                                                              RepSSO  31
        Istart = Istart + 25                                                    RepSSO  32
        Iend   = Iend   + 25                                                    RepSSO  33
        IY     = Irow                                                           RepSSO  34
        Val1   = <s6;Y-axis>                                                    RepSSO  35
        IY     = IY + 1                                                         RepSSO  36
        Val2   = <s6;Y-axis>                                                    RepSSO  37
        WRITE(IREPFL) 31, Iuniq, 1, 3, 27,                                      RepSSO  38
     &    Val1, Val2, (<s6.YearBins>,II=Istart,Iend)                            RepSSO  39
      ENDDO                                                                     RepSSO  40
c              bottom minimum range                                             RepSSO  41
      Istart = Istart + 25                                                      RepSSO  42
      Iend   = Iend   + 25                                                      RepSSO  43
      IY     = 7                                                                RepSSO  44
      WRITE(IREPFL) 30, Iuniq, 1, 4, 26,                                        RepSSO  45
     &  <s6;Y-axis>, (<s6.YearBins>,II=Istart,Iend)                             RepSSO  46
c              column totals                                                    RepSSO  47
      Istart = Istart + 25                                                      RepSSO  48
      Iend   = Iend   + 25                                                      RepSSO  49
      WRITE(IREPFL) 29, Iuniq, 1, 5, 25,                                        RepSSO  50
     &  (<s6.YearBins>,II=Istart,Iend)                                          RepSSO  51
c              comment at bottom                                                RepSSO  52
C QUCK?? shift the following formats by one once hdrfil fixed                   RepSSO  53
      WRITE (IREPFL) 4,IUNIQ,1,4,0                                              RepSSO  54
      WRITE (IREPFL) 4,IUNIQ,1,5,0                                              RepSSO  55
      WRITE (IREPFL) 4,IUNIQ,1,6,0                                              RepSSO  56
      WRITE (IREPFL) 4,IUNIQ,1,5,0                                              RepSSO  57
      WRITE (IREPFL) 4,IUNIQ,1,4,0                                              RepSSO  58
c                                                                               RepSSO  59
      RETURN                                                                    RepSSO  60
      END                                                                       RepSSO  61
      SUBROUTINE Report_s10(Iuniq, NumFormat, s10)                              RepS10   2
c                                                                               RepS10   3
c              Prints a record for the s10 statistics block                     RepS10   4
c                                                                               RepS10   5
c              Iuniq      Unique report number                                  RepS10   6
c              NumFormat  Format number in report                               RepS10   7
c              s10        Pointer to the statistics block                       RepS10   8
c                                                                               RepS10   9
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
c                                                                               RepS10  13
      INTEGER s10                                                               RepS10  14
c                                                                               RepS10  15
      WRITE(IREPFL) 12, Iuniq, 1, NumFormat, 8,                                 RepS10  16
     & <s10;MaxDelta>, <s10.NumEventsYr>,                                       RepS10  17
     & <s10.MaxYr>, <s10.MaxMoYr>,<s10.MaxDyYr>,<s10.MaxHrYr>,                  RepS10  18
     & <s10.MaxDBYr>, <s10.MaxWBYr>                                             RepS10  19
c                                                                               RepS10  20
      RETURN                                                                    RepS10  21
      END                                                                       RepS10  22
C ##############################################################################Statis   2
C ##############################################################################Statis   3
C ##############################################################################Statis   4
C ##############################################################################Statis   5
C ##########                                                          ##########Statis   6
C ##########                        STATISTICS                        ##########Statis   7
C ##########                                                          ##########Statis   8
C ##############################################################################Statis   9
C ##############################################################################Statis  10
C ##############################################################################Statis  11
C ##############################################################################Statis  12
c                                                                               Statis  13
c              Statistics types:                                                Statis  14
c                1  Totals                                                      Statis  15
c                2  Totals, peak, peak time and weather                         Statis  16
c                3  End-use statistics, monthly and yearly                      Statis  17
c                4  Max, Min, Avg, Max/Min times and weather                    Statis  18
c                5  Bin data (part load ratios)                                 Statis  19
c                6  Scatter plot, variable vertical scale vs. hour              Statis  20
c                7  Saves monthly totals for Type 3                             Statis  21
c                                                                               Statis  22
      FUNCTION NewStat1(Jna, Offset, Mode, Mult)                                NewSt1   2
c                                                                               NewSt1   3
c              Creates a Type 1 statistics block (Total)                        NewSt1   4
c                                                                               NewSt1   5
c              Jna     Pointer to Var's component, node, or list                NewSt1   6
c              Offset  Offset of variable from Jna (typical when list)          NewSt1   7
c              Mode    Type of statistics to be performed                       NewSt1   8
c                        -1  Operate only on negative numbers                   NewSt1   9
c                         0  Operate on both negative and positive              NewSt1  10
c                         1  Operate on only positive numbers                   NewSt1  11
c              Mult    Multiplier on statistic                                  NewSt1  12
c              s1      Pointer to this block                                    NewSt1  13
c                                                                               NewSt1  14
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               NewSt1  21
      Real    Mult                                                              NewSt1  22
      INTEGER s1, Offset                                                        NewSt1  23
      Save    s1                                                                NewSt1  24
c                                                                               NewSt1  25
c              Create the block and link to the previous block                  NewSt1  26
      NewStat1 = NewRecord(<+s1~Len>)                                           NewSt1  27
      IF (Is1 .eq. 0)  THEN                                                     NewSt1  28
        Is1       = NewStat1                                                    NewSt1  29
      ELSE                                                                      NewSt1  30
        <s1;Next> = NewStat1                                                    NewSt1  31
      ENDIF                                                                     NewSt1  32
      s1 = NewStat1                                                             NewSt1  33
c                                                                               NewSt1  34
      <s1;Ident>      = IdStatistics(1)                                         NewSt1  35
      <s1;Offset>     = Offset                                                  NewSt1  36
      <s1;Mode>       = Mode                                                    NewSt1  37
      <s1;Parent>     = Jna                                                     NewSt1  38
      <s1;Multiplier> = Mult                                                    NewSt1  39
c                                                                               NewSt1  40
      RETURN                                                                    NewSt1  41
      END                                                                       NewSt1  42
      FUNCTION NewStat2(Jna, Offset, Mode, Mult)                                NewSt2   2
c                                                                               NewSt2   3
c              Creates a Type 2 statistics block                                NewSt2   4
c              (Total, Peak, Peak Conditions)                                   NewSt2   5
c                                                                               NewSt2   6
c              Jna     Pointer to Var's component, node, or list                NewSt2   7
c              Offset  Offset of variable from Jna (typical when list)          NewSt2   8
c              Mode    Type of statistics to be performed                       NewSt2   9
c                        -1  Operate only on negative numbers                   NewSt2  10
c                         0  Operate on both negative and positive              NewSt2  11
c                         1  Operate on only positive numbers                   NewSt2  12
c              Mult    Multiplier on statistic, if                              NewSt2  13
c              s2      Pointer to this block                                    NewSt2  14
c                                                                               NewSt2  15
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               NewSt2  22
      Real    Mult                                                              NewSt2  23
      INTEGER s2, Offset                                                        NewSt2  24
      Save    s2                                                                NewSt2  25
c                                                                               NewSt2  26
c              Create the block and link to the previous block                  NewSt2  27
      NewStat2 = NewRecord(<+s2~Len>)                                           NewSt2  28
      IF (Is2 .eq. 0)  THEN                                                     NewSt2  29
        Is2       = NewStat2                                                    NewSt2  30
      ELSE                                                                      NewSt2  31
        <s2;Next> = NewStat2                                                    NewSt2  32
      ENDIF                                                                     NewSt2  33
      s2 = NewStat2                                                             NewSt2  34
c                                                                               NewSt2  35
      <s2;Ident>      = IdStatistics(2)                                         NewSt2  36
      <s2;Offset>     = Offset                                                  NewSt2  37
      <s2;Mode>       = Mode                                                    NewSt2  38
      <s2;Parent>     = Jna                                                     NewSt2  39
      <s2;Multiplier> = Mult                                                    NewSt2  40
c                                                                               NewSt2  41
      RETURN                                                                    NewSt2  42
      END                                                                       NewSt2  43
      FUNCTION NewStat3(Knx)                                                    NewSt3   2
c                                                                               NewSt3   3
c              Creates a Type 3 statistics block (EndUses)                      NewSt3   4
c                                                                               NewSt3   5
c              Knx        Pointer to node containing energy, or to a            NewSt3   6
c                           list of nodes                                       NewSt3   7
c              s3         Pointer to this block                                 NewSt3   8
c                                                                               NewSt3   9
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
c                                                                               NewSt3  14
      INTEGER s3                                                                NewSt3  15
      Save    s3                                                                NewSt3  16
c                                                                               NewSt3  17
c              Create the block and link to the previous block                  NewSt3  18
      NewStat3 = NewRecord(<+s3~Len>)                                           NewSt3  19
      IF (Is3 .eq. 0)  THEN                                                     NewSt3  20
        Is3       = NewStat3                                                    NewSt3  21
      ELSE                                                                      NewSt3  22
        <s3;Next> = NewStat3                                                    NewSt3  23
      ENDIF                                                                     NewSt3  24
      s3 = NewStat3                                                             NewSt3  25
c                                                                               NewSt3  26
      <s3;Ident> = IdStatistics(3)                                              NewSt3  27
      <s3;Node>  = Knx                                                          NewSt3  28
c                                                                               NewSt3  29
      RETURN                                                                    NewSt3  30
      END                                                                       NewSt3  31
      FUNCTION NewStat4(s3)                                                     NewSt4   2
c                                                                               NewSt4   3
c              Creates a Type 4 statistics block (Saves the monthly             NewSt4   4
c              totals for a Type 3 block)                                       NewSt4   5
c                                                                               NewSt4   6
c              s3     Pointer to the Type 3 statistics block                    NewSt4   7
c              s4     Pointer to this block                                     NewSt4   8
c                                                                               NewSt4   9
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
c                                                                               NewSt4  15
      INTEGER s3,s4                                                             NewSt4  16
      Save       s4                                                             NewSt4  17
c                                                                               NewSt4  18
c              Create the block and link to the previous block                  NewSt4  19
      NewStat4 = NewRecord(<+s4~Len>)                                           NewSt4  20
      IF (Is4 .eq. 0)  THEN                                                     NewSt4  21
        Is4       = NewStat4                                                    NewSt4  22
      ELSE                                                                      NewSt4  23
        <s4;Next> = NewStat4                                                    NewSt4  24
      ENDIF                                                                     NewSt4  25
      s4 = NewStat4                                                             NewSt4  26
c                                                                               NewSt4  27
      <s4;Ident> = IdStatistics(4)                                              NewSt4  28
      <s4;s3>    = s3                                                           NewSt4  29
c                                                                               NewSt4  30
      RETURN                                                                    NewSt4  31
      END                                                                       NewSt4  32
      FUNCTION NewStat5(Jna, Offset, Mode, Mult)                                NewSt5   2
c                                                                               NewSt5   3
c              Creates a Type 5 statistics block                                NewSt5   4
c              (Bin data, part load ratios)                                     NewSt5   5
c                                                                               NewSt5   6
c              Jna     Pointer to Var's component, node, or list                NewSt5   7
c              Offset  Offset of variable from Jna (typical when list)          NewSt5   8
c              Mode    Type of statistics to be performed                       NewSt5   9
c                        -1  Operate only on negative numbers                   NewSt5  10
c                         0  Operate on both negative and positive              NewSt5  11
c                         1  Operate on only positive numbers                   NewSt5  12
c              s5     Pointer to this block                                     NewSt5  13
c                                                                               NewSt5  14
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               NewSt5  21
      Real    Mult                                                              NewSt5  22
      INTEGER s5, Offset                                                        NewSt5  23
      Save    s5                                                                NewSt5  24
c                                                                               NewSt5  25
c              Create the block and link to the previous block                  NewSt5  26
      NewStat5 = NewRecord(<+s5~Len>)                                           NewSt5  27
      IF (Is5 .eq. 0)  THEN                                                     NewSt5  28
        Is5       = NewStat5                                                    NewSt5  29
      ELSE                                                                      NewSt5  30
        <s5;Next> = NewStat5                                                    NewSt5  31
      ENDIF                                                                     NewSt5  32
      s5 = NewStat5                                                             NewSt5  33
c                                                                               NewSt5  34
      <s5;Ident>      = IdStatistics(5)                                         NewSt5  35
      <s5;Offset>     = Offset                                                  NewSt5  36
      <s5;Mode>       = Mode                                                    NewSt5  37
      <s5;Parent>     = Jna                                                     NewSt5  38
      <s5;Multiplier> = Mult                                                    NewSt5  39
c                                                                               NewSt5  40
      RETURN                                                                    NewSt5  41
      END                                                                       NewSt5  42
      FUNCTION NewStat6(Jna, Offset, Mode, Yaxis, Mult)                         NewSt6   2
c                                                                               NewSt6   3
c              Creates a Type 6 statistics block (Scatter plot)                 NewSt6   4
c                                                                               NewSt6   5
c              Jna     Pointer to Var's component, node, or list                NewSt6   6
c              Offset  Variable to be tracked (typical when list)               NewSt6   7
c              Mode    Type of statistics to be performed                       NewSt6   8
c                        -1  Operate only on negative numbers                   NewSt6   9
c                         0  Operate on both negative and positive              NewSt6  10
c                         1  Operate on only positive numbers                   NewSt6  11
c              Yaxis   Specifies the values of the Y-axis                       NewSt6  12
c              s6     Pointer to this block                                     NewSt6  13
c                                                                               NewSt6  14
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               NewSt6  21
      Real    Mult                                                              NewSt6  22
      INTEGER s6, Offset, Yaxis(7)                                              NewSt6  23
      Save    s6                                                                NewSt6  24
c                                                                               NewSt6  25
c              Create the block and link to the previous block                  NewSt6  26
      NewStat6 = NewRecord(<+s6~Len>)                                           NewSt6  27
      IF (Is6 .eq. 0)  THEN                                                     NewSt6  28
        Is6       = NewStat6                                                    NewSt6  29
      ELSE                                                                      NewSt6  30
        <s6;Next> = NewStat6                                                    NewSt6  31
      ENDIF                                                                     NewSt6  32
      s6 = NewStat6                                                             NewSt6  33
c                                                                               NewSt6  34
      <s6;Ident>      = IdStatistics(6)                                         NewSt6  35
      <s6;Offset>     = Offset                                                  NewSt6  36
      <s6;Mode>       = Mode                                                    NewSt6  37
      <s6;Parent>     = Jna                                                     NewSt6  38
      <s6;Multiplier> = Mult                                                    NewSt6  39
c              special initialization                                           NewSt6  40
      DO  IY=1,7                                                                NewSt6  41
        <s6;Y-axis> = Yaxis(IY)                                                 NewSt6  42
      ENDDO                                                                     NewSt6  43
      <s6;LastY-axis> = 4                                                       NewSt6  44
c                                                                               NewSt6  45
      RETURN                                                                    NewSt6  46
      END                                                                       NewSt6  47
      FUNCTION NewStat7(Jna, Offset, Mode, Mult)                                NewSt7   2
c                                                                               NewSt7   3
c              Creates a Type 7 statistics block                                NewSt7   4
c              (Max, Min, Avg, Max/Min times and weather)                       NewSt7   5
c                                                                               NewSt7   6
c              Jna     Pointer to Var's component, node, or list                NewSt7   7
c              Offset  Offset of variable from Jna (typical when list)          NewSt7   8
c              Mode    Type of statistics to be performed                       NewSt7   9
c                        -1  Operate only on negative numbers                   NewSt7  10
c                         0  Operate on both negative and positive              NewSt7  11
c                         1  Operate on only positive numbers                   NewSt7  12
c              s7     Pointer to this block                                     NewSt7  13
c                                                                               NewSt7  14
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               NewSt7  21
      Real    Mult                                                              NewSt7  22
      INTEGER s7, Offset                                                        NewSt7  23
      Save    s7                                                                NewSt7  24
c                                                                               NewSt7  25
c              Create the block and link to the previous block                  NewSt7  26
      NewStat7 = NewRecord(<+s7~Len>)                                           NewSt7  27
      IF (Is7 .eq. 0)  THEN                                                     NewSt7  28
        Is7       = NewStat7                                                    NewSt7  29
      ELSE                                                                      NewSt7  30
        <s7;Next> = NewStat7                                                    NewSt7  31
      ENDIF                                                                     NewSt7  32
      s7 = NewStat7                                                             NewSt7  33
c                                                                               NewSt7  34
      <s7;Ident>      = IdStatistics(7)                                         NewSt7  35
      <s7;Offset>     = Offset                                                  NewSt7  36
      <s7;Mode>       = Mode                                                    NewSt7  37
      <s7;Parent>     = Jna                                                     NewSt7  38
      <s7;Multiplier> = Mult                                                    NewSt7  39
c              special initialization                                           NewSt7  40
      <s7.MaxMo>      = -1.E10                                                  NewSt7  41
      <s7.MinMo>      =  1.E10                                                  NewSt7  42
c                                                                               NewSt7  43
      RETURN                                                                    NewSt7  44
      END                                                                       NewSt7  45
      FUNCTION NewStat8(Jna, IAptr, Mode, PLRmin,StartTime)                     NewSt8   2
c                                                                               NewSt8   3
c              Creates a Type 8 statistics block                                NewSt8   4
c              (Hours of continuous operation and start-up loads)               NewSt8   5
c                                                                               NewSt8   6
c              Jna        Pointer to parent component                           NewSt8   7
c              IAptr      Pointer into AA of monitored variable                 NewSt8   8
c              Mode       Type of statistics to be performed                    NewSt8   9
c                          -1  Operate only on negative numbers                 NewSt8  10
c                           0  Operate on both negative and positive            NewSt8  11
c                           1  Operate on only positive numbers                 NewSt8  12
c              PLRmin     Part-load ratio below which equipment cycles          NewSt8  13
c              StartTime  Start-up time from cold start                         NewSt8  14
c              s8         Pointer to this block                                 NewSt8  15
c                                                                               NewSt8  16
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               NewSt8  24
      INTEGER s8                                                                NewSt8  25
      Save    s8                                                                NewSt8  26
c                                                                               NewSt8  27
c              Create the block and link to the previous block                  NewSt8  28
      NewStat8 = NewRecord(<+s8~Len>)                                           NewSt8  29
      IF (Is8 .eq. 0)  THEN                                                     NewSt8  30
        Is8       = NewStat8                                                    NewSt8  31
      ELSE                                                                      NewSt8  32
        <s8;Next> = NewStat8                                                    NewSt8  33
      ENDIF                                                                     NewSt8  34
      s8 = NewStat8                                                             NewSt8  35
c                                                                               NewSt8  36
      <s8;Ident>  = IdStatistics(8)                                             NewSt8  37
      <s8;Parent> = Jna                                                         NewSt8  38
      <s8;AAptr>  = IAptr                                                       NewSt8  39
      <s8;Mode>   = Mode                                                        NewSt8  40
c                                                                               NewSt8  41
      <s8;MinPLR>   = PLRmin                                                    NewSt8  42
c                 store startime in capacity until design reconciliation        NewSt8  43
      <s8;Capacity> = StartTime                                                 NewSt8  44
c                                                                               NewSt8  45
      RETURN                                                                    NewSt8  46
      END                                                                       NewSt8  47
      FUNCTION NewStat9(Jna, Offset, Mode, Mult)                                NewSt9   2
c                                                                               NewSt9   3
c              Creates a Type 9 statistics block (Event counting)               NewSt9   4
c                                                                               NewSt9   5
c              Jna     Pointer to Var's component or node                       NewSt9   6
c              Offset  Offset of variable from Jna (typical when list)          NewSt9   7
c              Mode    Type of statistics to be performed                       NewSt9   8
c                       -1  Operate only on negative numbers                    NewSt9   9
c                        0  Operate on both negative and positive               NewSt9  10
c                        1  Operate on only positive numbers                    NewSt9  11
c              s9      Pointer to this block                                    NewSt9  12
c                                                                               NewSt9  13
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               NewSt9  21
      Real    Mult                                                              NewSt9  22
      INTEGER s9, Offset                                                        NewSt9  23
      Save    s9                                                                NewSt9  24
c                                                                               NewSt9  25
c              Create the block and link to the previous block                  NewSt9  26
      NewStat9 = NewRecord(<+s9~Len>)                                           NewSt9  27
      IF (Is9 .eq. 0)  THEN                                                     NewSt9  28
        Is9       = NewStat9                                                    NewSt9  29
      ELSE                                                                      NewSt9  30
        <s9;Next> = NewStat9                                                    NewSt9  31
      ENDIF                                                                     NewSt9  32
      s9 = NewStat9                                                             NewSt9  33
c                                                                               NewSt9  34
c              Create the block                                                 NewSt9  35
      <s9;Ident>      = IdStatistics(9)                                         NewSt9  36
      <s9;Offset>     = Offset                                                  NewSt9  37
      <s9;Mode>       = Mode                                                    NewSt9  38
      <s9;Parent>     = Jna                                                     NewSt9  39
      <s9;Multiplier> = Mult                                                    NewSt9  40
c                                                                               NewSt9  41
      RETURN                                                                    NewSt9  42
      END                                                                       NewSt9  43
      FUNCTION NewStat10(Jna, Setpt, Actual, Delta, Mode, Trigger)              NewSt10  2
c                                                                               NewSt10  3
c              Creates a Type 10 statistics block (Setpoint overload)           NewSt10  4
c                                                                               NewSt10  5
c              Jna      Pointer to the component                                NewSt10  6
c              Setpt    AA index of the setpoint                                NewSt10  7
c              Actual   AA index of actual condition                            NewSt10  8
c              Delta    Maximum deviation that triggers event counting          NewSt10  9
c              Mode     Type of statistics to be performed                      NewSt10 10
c                        -1  Operate only on negative deviations                NewSt10 11
c                         0  Operate on both negative and positive              NewSt10 12
c                         1  Operate on only positive deviations                NewSt10 13
c              Trigger  AA index of non-zero trigger                            NewSt10 14
c              s10      Pointer to this block                                   NewSt10 15
c                                                                               NewSt10 16
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               NewSt10 24
      INTEGER s10, Setpt, Actual, Trigger                                       NewSt10 25
      Save    s10                                                               NewSt10 26
c                                                                               NewSt10 27
c              Create the block and link to the previous block                  NewSt10 28
      NewStat10 = NewRecord(<+s10~Len>)                                         NewSt10 29
      IF (Is10 .eq. 0)  THEN                                                    NewSt10 30
        Is10       = NewStat10                                                  NewSt10 31
      ELSE                                                                      NewSt10 32
        <s10;Next> = NewStat10                                                  NewSt10 33
      ENDIF                                                                     NewSt10 34
      s10 = NewStat10                                                           NewSt10 35
c                                                                               NewSt10 36
      IF (Jna .EQ. 0  .OR.  Setpt .EQ. 0  .OR.  Actual .EQ. 0)  THEN            NewSt10 37
        Call ErrorMsg1                                                          NewSt10 38
        RETURN                                                                  NewSt10 39
      ENDIF                                                                     NewSt10 40
c                                                                               NewSt10 41
c              Create the block                                                 NewSt10 42
      <s10;Ident>     = IdStatistics(10)                                        NewSt10 43
      <s10;Parent>    = Jna                                                     NewSt10 44
      <s10;IAsetpt>   = Setpt   ! uses absolute position of these               NewSt10 45
      <s10;IAactual>  = Actual  ! variables in AA                               NewSt10 46
      <s10;MaxDelta>  = Delta                                                   NewSt10 47
      <s10;IAtrigger> = Trigger ! uses absolute position in AA                  NewSt10 48
      <s10;Mode>      = Mode                                                    NewSt10 49
c                                                                               NewSt10 50
      RETURN                                                                    NewSt10 51
c                                                                               NewSt10 52
c                                                                               NewSt10 53
      CONTAINS                                                                  NewSt10 54
c ============== ErrorMsg1 ==================================================== NewSt10 55
      Subroutine ErrorMsg1                                                      NewSt10 56
c                                                                               NewSt10 57
      IF (Jna .GT. 0)  THEN                                                     NewSt10 58
        Jn2 = Jna                                                               NewSt10 59
      ELSE                                                                      NewSt10 60
        Jn2 = Jparent(Jna2)                                                     NewSt10 61
      ENDIF                                                                     NewSt10 62
      WRITE (IOUTPT, 9001)  (<na:NAME>,II=1,8)                                  NewSt10 63
      CALL MessageBox( NULL,                                                    NewSt10 64
     &  'Error setting up Type 10 statistics block -'//                         NewSt10 65
     &   char(10)//char(13)//char(10)//char(13)//                               NewSt10 66
     &  'Contact DOE-2 Support'//char(0),                                       NewSt10 67
     &  'HVAC Setup Errors'//char(0),                                           NewSt10 68
     &  MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                    NewSt10 69
      IwinReturn = 1                                                            NewSt10 70
c                                                                               NewSt10 71
c              Message formats                                                  NewSt10 72
 9001 FORMAT(14X,'Programmer error:  NewStat10 has'             /               NewSt10 73
     &       14x,'detected an invalid index in a block created for:'   /        NewSt10 74
     &       14x,8A4                                                   )        NewSt10 75
                                                                                NewSt10 76
      End Subroutine ErrorMsg1                                                  NewSt10 77
                                                                                NewSt10 78
      END                                                                       NewSt10 79
      FUNCTION NewStat11(Knx)                                                   NewSt11  2
c                                                                               NewSt11  3
c              Creates a Type 11 statistics block (TDV EndUses)                 NewSt11  4
c                                                                               NewSt11  5
c              Knx        Pointer to a node, or a list of nodes                 NewSt11  6
c              s11        Pointer to this block                                 NewSt11  7
c                                                                               NewSt11  8
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
c                                                                               NewSt11 13
      INTEGER s11                                                               NewSt11 14
      Save    s11                                                               NewSt11 15
c                                                                               NewSt11 16
c              Create the block and link to the previous block                  NewSt11 17
      NewStat11 = NewRecord(<+s11~Len>)                                         NewSt11 18
      IF (Is11 .eq. 0)  THEN                                                    NewSt11 19
        Is11       = NewStat11                                                  NewSt11 20
      ELSE                                                                      NewSt11 21
        <s11;Next> = NewStat11                                                  NewSt11 22
      ENDIF                                                                     NewSt11 23
      s11 = NewStat11                                                           NewSt11 24
c                                                                               NewSt11 25
      <s11;Ident> = IdStatistics(11)                                            NewSt11 26
      <s11;Node>  = Knx                                                         NewSt11 27
c              Initialize max/min statistics                                    NewSt11 28
      <s11.TDVminMo> = 1.E6                                                     NewSt11 29
      <s11.TDVminYr> = 1.E6                                                     NewSt11 30
c                                                                               NewSt11 31
      RETURN                                                                    NewSt11 32
      END                                                                       NewSt11 33
      SUBROUTINE Xfc_Statistics(Mode)                                           XStat    2
c                                                                               XStat    3
c              Calculates the statistical data for all node variables           XStat    4
c              used in reports                                                  XStat    5
c                                                                               XStat    6
c              Mode specifies the mode of the statistics calculations           XStat    7
c              Mode = 19  Design reconciliation                                 XStat    8
c                     20  Hourly initialization                                 XStat    9
c                     42  Hourly statistics                                     XStat   10
c                     44  Monthly initialization                                XStat   11
c                     45  Monthly statistics                                    XStat   12
c                     46  Yearly initialization                                 XStat   13
c                     47  Yearly statistics                                     XStat   14
c                                                                               XStat   15
c              Statistics variable types                                        XStat   16
c                      1  Total                                                 XStat   17
c                      2  Total, peak, peak time and weather                    XStat   18
c                      3  Same as 2, but for energy end-uses                    XStat   19
c                      4  Saves monthly totals for type 3                       XStat   20
c                      5  Bin data, part load ratios                            XStat   21
c                      6  Scatter plot, variable vertical scale vs. hour        XStat   22
c                      7  Max, Min, Avg, Max/Min times and weather              XStat   23
c                      8  Hours of continuous operation                         XStat   24
c                      9  Event counting                                        XStat   25
c                     10  Deviation from setpoint                               XStat   26
c                                                                               XStat   27
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
      COMMON  /WEATH / IWDID(5),LRECX,WLAT,WLONG,LTIMZ,IFX,IWSIZ,               /WEATH/  2
     1                 CLRNES,TGNDR,WBT,DBT,PATM,CLDAMT,ISNOW,IRAIN,            /WEATH/  3
     2                 IWNDDR,HUMRAT,DENSTY,ENTHAL,DIFSOL,DIRSOL,SOLRAD,        /WEATH/  4
     3                 ICLDTY,WNDSPD,IDUMMY,DPT,WNDDRR,CLDCOV,RDNCC,            /WEATH/  5
     4                 BSCC,SKYA,DBTR,GTEMP(12),CLR(12),ESKY,EGND,IWINTR        /WEATH/  6
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
c                                                                               XStat   37
      INTEGER s1, s2, s3, s7, s5, s6, s4, s8, s9, s10, s11                      XStat   38
      INTEGER RowTotal, ColumnTotal(25)                                         XStat   39
      REAL    CatTotal(19)                                                      XStat   40
c                                                                               XStat   41
      INDXPL(part,full)=                                                        INDXPL   2
     &      MAX(1,MIN(11,INT((Abs(part)+.001)                                   INDXPL   3
     &                                / AMAX1(1.E-6,Abs(full))*10.)+1))         INDXPL   4
c                                                                               XStat   43
c                                                                               XStat   44
      SELECT CASE (Mode)                                                        XStat   45
c                                                                               XStat   46
c                                                                               XStat   47
c ============ HOURLY INITIALIZATION ========================================== XStat   48
      CASE (10)                                                                 XStat   49
c                                                                               XStat   50
c                                                                               XStat   51
c ============ HOURLY STATISTICS ============================================== XStat   52
      CASE (42)                                                                 XStat   53
c                                                                               XStat   54
c              Type 1 - Total                                                   XStat   55
      s1 = Is1                                                                  XStat   56
      DO WHILE (s1 .GT. 0)                                                      XStat   57
        IF (<s1;Parent> .EQ. 0)  THEN                                           XStat   58
          s1 = <s1;Next>                                                        XStat   59
          Cycle                                                                 XStat   60
        ENDIF                                                                   XStat   61
c              pointer to the block containing the variable                     XStat   62
        Knx    = <s1;Parent>                                                    XStat   63
c              current hour's value - proces only if nonzero                    XStat   64
        IF (<nx;Ident> .ne. IdListNode  .AND.                                   XStat   65
     &      <nx;Ident> .ne. IdListOther)  THEN                                  XStat   66
          X = AA(Knx + <s1;Offset>) * <s1;Multiplier>                           XStat   67
        ELSE                                                                    XStat   68
c              sum the list of current hour's values                            XStat   69
          X = SumList(Knx, <s1;Offset>, <s1;Multiplier>)                        XStat   70
        ENDIF                                                                   XStat   71
        IF (X .ne. 0.)  THEN                                                    XStat   72
c              check for mode                                                   XStat   73
          SELECT CASE (<s1;Mode>)                                               XStat   74
            CASE (-1)                                                           XStat   75
              X = MIN(0., X)                                                    XStat   76
            CASE (1)                                                            XStat   77
              X = MAX(0., X)                                                    XStat   78
          END SELECT                                                            XStat   79
c              monthly total                                                    XStat   80
          <s1.TotalMo> = <s1.TotalMo> + X                                       XStat   81
        ENDIF                                                                   XStat   82
        s1 = <s1;Next>                                                          XStat   83
      ENDDO  ! Type 1                                                           XStat   84
c                                                                               XStat   85
c              Type 2 - Total, Peak, Time and weather                           XStat   86
      s2 = Is2                                                                  XStat   87
      DO WHILE (s2 .GT. 0)                                                      XStat   88
        IF (<s2;Parent> .EQ. 0)  THEN                                           XStat   89
          s2 = <s2;Next>                                                        XStat   90
          Cycle                                                                 XStat   91
        ENDIF                                                                   XStat   92
c              pointer to the block containing the variable                     XStat   93
        Knx = <s2;Parent>                                                       XStat   94
c              current hour's value - process only if nonzero                   XStat   95
        IF (<nx;Ident> .ne. IdListNode  .AND.                                   XStat   96
     &      <nx;Ident> .ne. IdListOther)  THEN                                  XStat   97
          X = AA(Knx + <s2;Offset>) * <s2;Multiplier>                           XStat   98
        ELSE                                                                    XStat   99
c              sum the list of current hour's values                            XStat  100
          X = SumList(Knx, <s2;Offset>, <s2;Multiplier>)                        XStat  101
        ENDIF                                                                   XStat  102
        IF (X .ne. 0.)  THEN                                                    XStat  103
c              check for mode                                                   XStat  104
          SELECT CASE (<s2;Mode>)                                               XStat  105
            CASE (-1)                                                           XStat  106
              X = MIN(0., X)                                                    XStat  107
            CASE (1)                                                            XStat  108
              X = MAX(0., X)                                                    XStat  109
          END SELECT                                                            XStat  110
          IF (X .ne. 0.)  THEN                                                  XStat  111
c              monthly total                                                    XStat  112
            <s2.TotalMo> = <s2.TotalMo> + X                                     XStat  113
c              monthly peak, time, and weather                                  XStat  114
            IF (Abs(X) .GT. Abs(<s2.PeakMo>))  THEN                             XStat  115
              <s2.PeakMo>   = X                                                 XStat  116
              <s2.PeakDyMo> = IDAY                                              XStat  117
              <s2.PeakHrMo> = ISCHR                                             XStat  118
              <s2.PeakDBMo> = DBT                                               XStat  119
              <s2.PeakWBMo> = WBT                                               XStat  120
            ENDIF                                                               XStat  121
          ENDIF                                                                 XStat  122
        ENDIF                                                                   XStat  123
        s2 = <s2;Next>                                                          XStat  124
      ENDDO  ! Type 2                                                           XStat  125
c                                                                               XStat  126
c              Type 3 - End-use totals, peaks, peak conditions                  XStat  127
      s3 = Is3                                                                  XStat  128
      DO WHILE (s3 .GT. 0)                                                      XStat  129
c              pointer to the node                                              XStat  130
        Knx = <s3;Node>                                                         XStat  131
        IF (<nx;Ident> .EQ. IdNode)  THEN                                       XStat  132
c              Single node                                                      XStat  133
          Keu = <nx;EndUse>                                                     XStat  134
c              statistics for each end-use category                             XStat  135
          DO  IE=1,19                                                           XStat  136
            X = <nx.Load>*<eu.1/TotalEU> * <eu.EndUses>                         XStat  137
            IF (X .eq. 0.)  Cycle                                               XStat  138
            <s3.EndUseMo> = <s3.EndUseMo> + X                                   XStat  139
            IF (Abs(X) .GT. Abs(<s3.EndUseMaxMo>))  THEN                        XStat  140
              <s3.EndUseMaxMo>   = X                                            XStat  141
              <s3.EndUseMaxDyMo> = IDAY                                         XStat  142
              <s3.EndUseMaxHrMo> = ISCHR                                        XStat  143
              <s3.EndUseMaxDBMo> = DBT                                          XStat  144
              <s3.EndUseMaxWBMo> = WBT                                          XStat  145
            ENDIF                                                               XStat  146
          ENDDO                                                                 XStat  147
          IF (<nx.Load> .ne. 0.)  THEN                                          XStat  148
            <s3.TotalMo> = <s3.TotalMo> + <nx.Load>                             XStat  149
            IF (Abs(<nx.Load>) .GT. Abs(<s3.TotalMaxMo>))  THEN                 XStat  150
              <s3.TotalMaxMo>   = <nx.Load>                                     XStat  151
              <s3.TotalMaxDyMo> = IDAY                                          XStat  152
              <s3.TotalMaxHrMo> = ISCHR                                         XStat  153
              <s3.TotalMaxDBMo> = DBT                                           XStat  154
              <s3.TotalMaxWBMo> = WBT                                           XStat  155
              DO  IE=1,19                                                       XStat  156
                <s3.EndUsePeakMo> = <nx.Load>*<eu.1/TotalEU>                    XStat  157
     &                                       * <eu.EndUses>                     XStat  158
              ENDDO                                                             XStat  159
            ENDIF                                                               XStat  160
          ENDIF                                                                 XStat  161
        ELSE  ! multiple nodes                                                  XStat  162
c              statistics for the sum of each end-use category                  XStat  163
          DO  IE=1,18                                                           XStat  164
            CatTotal(IE) = 0.                                                   XStat  165
          ENDDO                                                                 XStat  166
          Total    = 0.                                                         XStat  167
          Kli      = <s3;Node>                                                  XStat  168
          NumItems = <li;NumItems>                                              XStat  169
          DO  LI=1,NumItems                                                     XStat  170
            Knx = <li;List>                                                     XStat  171
            Keu = <nx;EndUse>                                                   XStat  172
c              statistics for each end-use category                             XStat  173
            Total = Total + <nx.Load>                                           XStat  174
            DO  IE=1,18                                                         XStat  175
              CatTotal(IE) = CatTotal(IE)                                       XStat  176
     &                     + <nx.Load>*<eu.1/TotalEU> * <eu.EndUses>            XStat  177
            ENDDO                                                               XStat  178
          ENDDO                                                                 XStat  179
          IF (Total .ne. 0.)  THEN                                              XStat  180
            DO  IE=1,18                                                         XStat  181
              IF (CatTotal(IE) .eq. 0.)  Cycle                                  XStat  182
              <s3.EndUseMo> = <s3.EndUseMo> + CatTotal(IE)                      XStat  183
              IF (Abs(CatTotal(IE)) .GT. Abs(<s3.EndUseMaxMo>))  THEN           XStat  184
                <s3.EndUseMaxMo>   = CatTotal(IE)                               XStat  185
                <s3.EndUseMaxDyMo> = IDAY                                       XStat  186
                <s3.EndUseMaxHrMo> = ISCHR                                      XStat  187
                <s3.EndUseMaxDBMo> = DBT                                        XStat  188
                <s3.EndUseMaxWBMo> = WBT                                        XStat  189
              ENDIF                                                             XStat  190
            ENDDO                                                               XStat  191
            <s3.TotalMo> = <s3.TotalMo> + Total                                 XStat  192
            IF (Abs(Total) .GT. Abs(<s3.TotalMaxMo>))  THEN                     XStat  193
              <s3.TotalMaxMo>   = Total                                         XStat  194
              <s3.TotalMaxDyMo> = IDAY                                          XStat  195
              <s3.TotalMaxHrMo> = ISCHR                                         XStat  196
              <s3.TotalMaxDBMo> = DBT                                           XStat  197
              <s3.TotalMaxWBMo> = WBT                                           XStat  198
              DO  IE=1,18                                                       XStat  199
                <s3.EndUsePeakMo> = CatTotal(IE)                                XStat  200
              ENDDO                                                             XStat  201
            ENDIF                                                               XStat  202
          ENDIF                                                                 XStat  203
        ENDIF                                                                   XStat  204
        s3 = <s3;Next>                                                          XStat  205
      ENDDO  ! Type 3                                                           XStat  206
c                                                                               XStat  207
c              Type 5 - Part load bins                                          XStat  208
      s5 = Is5                                                                  XStat  209
      DO WHILE (s5 .GT. 0)                                                      XStat  210
        IF (<s5;Parent> .EQ. 0)  THEN                                           XStat  211
          s5 = <s5;Next>                                                        XStat  212
          Cycle                                                                 XStat  213
        ENDIF                                                                   XStat  214
c              pointer to the block containing the variable                     XStat  215
        Knx = <s5;Parent>                                                       XStat  216
c              current hour's value - process only if non-zero                  XStat  217
        IF (<nx;Ident> .ne. IdListNode  .AND.                                   XStat  218
     &      <nx;Ident> .ne. IdListOther)  THEN                                  XStat  219
          X = AA(Knx + <s5;Offset>) * <s5;Multiplier>                           XStat  220
        ELSE                                                                    XStat  221
c              sum the list of current hour's values                            XStat  222
          X = SumList(Knx, <s5;Offset>, <s5;Multiplier>)                        XStat  223
        ENDIF                                                                   XStat  224
        IF (X .ne. 0.)  THEN                                                    XStat  225
c              check for mode                                                   XStat  226
          SELECT CASE (<s5;Mode>)                                               XStat  227
            CASE (-1)                                                           XStat  228
              X = MIN(0., X)                                                    XStat  229
            CASE (1)                                                            XStat  230
              X = MAX(0., X)                                                    XStat  231
          END SELECT                                                            XStat  232
          IF (X .ne. 0.)  THEN                                                  XStat  233
c              part load bin                                                    XStat  234
            IB = INDXPL(X,<s5;Design>)                                          XStat  235
            <s5.MonthBins> = <s5.MonthBins> + 1                                 XStat  236
          ENDIF                                                                 XStat  237
        ENDIF                                                                   XStat  238
        s5 = <s5;Next>                                                          XStat  239
      ENDDO  ! Type 5                                                           XStat  240
c                                                                               XStat  241
c              Type 6 - Scatter plot                                            XStat  242
c              This algorithm can handle a plot having non-uniform              XStat  243
c              values on the Y-axis                                             XStat  244
      s6 = Is6                                                                  XStat  245
      DO WHILE (s6 .GT. 0)                                                      XStat  246
        IF (<s6;Parent> .EQ. 0)  THEN                                           XStat  247
          s6 = <s6;Next>                                                        XStat  248
          Cycle                                                                 XStat  249
        ENDIF                                                                   XStat  250
c              pointer to the block containing the variable                     XStat  251
        Knx = <s6;Parent>                                                       XStat  252
c              current hour's value - process only if non-zero                  XStat  253
        IF (<nx;Ident> .ne. IdListNode  .AND.                                   XStat  254
     &      <nx;Ident> .ne. IdListOther)  THEN                                  XStat  255
          X = AA(Knx + <s6;Offset>) * <s6;Multiplier>                           XStat  256
        ELSE                                                                    XStat  257
c              sum the list of current hour's values                            XStat  258
          X = SumList(Knx, <s6;Offset>, <s6;Multiplier>)                        XStat  259
        ENDIF                                                                   XStat  260
        IF (X .ne. 0.)  THEN                                                    XStat  261
c              check for mode                                                   XStat  262
          SELECT CASE (<s6;Mode>)                                               XStat  263
            CASE (-1)                                                           XStat  264
              X = MIN(0., X)                                                    XStat  265
            CASE (1)                                                            XStat  266
              X = MAX(0., X)                                                    XStat  267
          END SELECT                                                            XStat  268
          IF (X .ne. 0.)  THEN                                                  XStat  269
c              position on Y-axis - start with the last position                XStat  270
c              found                                                            XStat  271
            IY = <s6;LastY-axis>                                                XStat  272
 4261       IF (X .GT. <s6;Y-axis>)  THEN                                       XStat  273
              IY = IY - 1                                                       XStat  274
              IF (IY .GT. 1)  GOTO 4261                                         XStat  275
c              if here, at top of range - get out                               XStat  276
            ELSE                                                                XStat  277
              IY = IY + 1                                                       XStat  278
              IF (IY .LT. 8)  THEN                                              XStat  279
                IF (X .GT. <s6;Y-axis>)  THEN                                   XStat  280
                  IY = IY - 1                                                   XStat  281
                  GOTO 4269                                                     XStat  282
                ELSE                                                            XStat  283
                  GOTO 4261                                                     XStat  284
                ENDIF                                                           XStat  285
              ELSE                                                              XStat  286
c              bottom of range - get out                                        XStat  287
                IY = 7                                                          XStat  288
              ENDIF                                                             XStat  289
            ENDIF                                                               XStat  290
c              Y-axis index has been found - increment bin                      XStat  291
c              Note that row 1 is the top row, row 8 is the total               XStat  292
 4269       II = (IY-1)*25 + ISCHR                                              XStat  293
            <s6.YearBins> = <s6.YearBins> + 1                                   XStat  294
c              save the Y-axis index as the starting point for next time        XStat  295
            <s6;LastY-axis> = IY                                                XStat  296
          ENDIF                                                                 XStat  297
        ENDIF                                                                   XStat  298
        s6 = <s6;Next>                                                          XStat  299
      ENDDO  ! Type 6                                                           XStat  300
c                                                                               XStat  301
c              Type 7 - Max, Min, Avg, Conditions                               XStat  302
      s7 = Is7                                                                  XStat  303
      DO WHILE (s7 .GT. 0)                                                      XStat  304
        IF (<s7;Parent> .EQ. 0)  THEN                                           XStat  305
          s7 = <s7;Next>                                                        XStat  306
          Cycle                                                                 XStat  307
        ENDIF                                                                   XStat  308
c              pointer to the block containing the variable                     XStat  309
        Knx = <s7;Parent>                                                       XStat  310
c              current hour's value - process only if nonzero                   XStat  311
        IF (<nx;Ident> .ne. IdListNode  .AND.                                   XStat  312
     &      <nx;Ident> .ne. IdListOther)  THEN                                  XStat  313
          X = AA(Knx + <s7;Offset>) * <s7;Multiplier>                           XStat  314
        ELSE                                                                    XStat  315
c              sum the list of current hour's values                            XStat  316
          X = SumList(Knx, <s7;Offset>, <s7;Multiplier>)                        XStat  317
        ENDIF                                                                   XStat  318
        IF (X .ne. 0.)  THEN                                                    XStat  319
c              check for mode                                                   XStat  320
          SELECT CASE (<s7;Mode>)                                               XStat  321
            CASE (-1)                                                           XStat  322
              X = MIN(0., X)                                                    XStat  323
            CASE (1)                                                            XStat  324
              X = MAX(0., X)                                                    XStat  325
          END SELECT                                                            XStat  326
          IF (X .ne. 0.)  THEN                                                  XStat  327
c              monthly average                                                  XStat  328
            <s7.AvgMo>   = <s7.AvgMo> + X                                       XStat  329
            <s7.HoursMo> = <s7.HoursMo> + 1                                     XStat  330
c              monthly peak, time, and weather                                  XStat  331
            IF (X .GT. <s7.MaxMo>)  THEN                                        XStat  332
              <s7.MaxMo>   = X                                                  XStat  333
              <s7.MaxDyMo> = IDAY                                               XStat  334
              <s7.MaxHrMo> = ISCHR                                              XStat  335
              <s7.MaxDBMo> = DBT                                                XStat  336
              <s7.MaxWBMo> = WBT                                                XStat  337
            ELSEIF (X .LT. <s7.MinMo>)  THEN                                    XStat  338
              <s7.MinMo>   = X                                                  XStat  339
              <s7.MinDyMo> = IDAY                                               XStat  340
              <s7.MinHrMo> = ISCHR                                              XStat  341
              <s7.MinDBMo> = DBT                                                XStat  342
              <s7.MinWBMo> = WBT                                                XStat  343
            ENDIF                                                               XStat  344
          ENDIF                                                                 XStat  345
        ENDIF                                                                   XStat  346
        s7 = <s7;Next>                                                          XStat  347
      ENDDO  ! Type 7                                                           XStat  348
c                                                                               XStat  349
c              Type 8 - Hours of continuous operation                           XStat  350
      s8 = Is8                                                                  XStat  351
      DO WHILE (s8 .GT. 0)                                                      XStat  352
c              get the current hour's value                                     XStat  353
        X = AA(<s8;AAptr>)                                                      XStat  354
c              check for mode                                                   XStat  355
        SELECT CASE (<s8;Mode>)                                                 XStat  356
          CASE (-1)                                                             XStat  357
            X = MIN(0., X)                                                      XStat  358
          CASE (1)                                                              XStat  359
            X = MAX(0., X)                                                      XStat  360
        END SELECT                                                              XStat  361
c              hours of operation                                               XStat  362
        IF (X .ne. 0.)  THEN                                                    XStat  363
          <s8.HoursOn>     = MAX(0, <s8.HoursOn>) + 1                           XStat  364
          <s8.LastValueOn> = X                                                  XStat  365
        ELSE                                                                    XStat  366
          <s8.HoursOn>     = MIN(0, <s8.HoursOn>) - 1                           XStat  367
        ENDIF                                                                   XStat  368
        s8 = <s8;Next>                                                          XStat  369
      ENDDO  ! Type 8                                                           XStat  370
c                                                                               XStat  371
c              Type 9 - Event counting                                          XStat  372
      s9 = Is9                                                                  XStat  373
      DO WHILE (s9 .GT. 0)                                                      XStat  374
        IF (<s9;Parent> .EQ. 0)  THEN                                           XStat  375
          s9 = <s9;Next>                                                        XStat  376
          Cycle                                                                 XStat  377
        ENDIF                                                                   XStat  378
c              pointer to the block containing the variable                     XStat  379
        Knx = <s9;Parent>                                                       XStat  380
c              current hour's value - process only if non-zero                  XStat  381
        IF (<nx;Ident> .ne. IdListNode  .AND.                                   XStat  382
     &      <nx;Ident> .ne. IdListOther)  THEN                                  XStat  383
          X = AA(Knx + <s9;Offset>) * <s9;Multiplier>                           XStat  384
        ELSE                                                                    XStat  385
c              sum the list of current hour's values                            XStat  386
          X = SumList(Knx, <s9;Offset>, <s9;Multiplier>)                        XStat  387
        ENDIF                                                                   XStat  388
        IF (X .ne. 0.)  THEN                                                    XStat  389
c              check for mode                                                   XStat  390
          SELECT CASE (<s9;Mode>)                                               XStat  391
            CASE (-1)                                                           XStat  392
              X = MIN(0., X)                                                    XStat  393
            CASE (1)                                                            XStat  394
              X = MAX(0., X)                                                    XStat  395
          END SELECT                                                            XStat  396
c              event hours                                                      XStat  397
          IF (X .ne. 0.)  <s9.NumEventHours> = <s9.NumEventHours> + 1           XStat  398
        ENDIF                                                                   XStat  399
        s9 = <s9;Next>                                                          XStat  400
      ENDDO  ! Type 9                                                           XStat  401
c                                                                               XStat  402
c              Type 10 - Deviation from setpoint, Time and weather              XStat  403
      s10 = Is10                                                                XStat  404
      DO WHILE (s10 .GT. 0)                                                     XStat  405
c              setpoint and actual value                                        XStat  406
        Trigger = AA(<s10;IAtrigger>)                                           XStat  407
        Setpt   = AA(<s10;IAsetpt>)                                             XStat  408
        IF ((Trigger .ne. 0.  .OR.  <s10;IAtrigger> .EQ. 1)  .AND.              XStat  409
     &                                        Setpt .ne. -88888.)  THEN         XStat  410
          Actual = AA(<s10;IAactual>)                                           XStat  411
c              check for mode                                                   XStat  412
          SELECT CASE (<s10;Mode>)                                              XStat  413
            CASE (-1)                                                           XStat  414
              X = MAX(0., Setpt-Actual)                                         XStat  415
            CASE (0)                                                            XStat  416
              X = Abs(Setpt-Actual)                                             XStat  417
            CASE (1)                                                            XStat  418
              X = MAX(0., Actual-Setpt)                                         XStat  419
          END SELECT                                                            XStat  420
c              process only if exceeds threshhold                               XStat  421
          IF (X .GT. <s10;MaxDelta>)  THEN                                      XStat  422
c              monthly total                                                    XStat  423
            <s10.NumEventsMo> = <s10.NumEventsMo> + 1                           XStat  424
c              monthly peak, time, and weather                                  XStat  425
            IF (X .GT. <s10.MaxMo>)  THEN                                       XStat  426
              <s10.MaxMo>   = X                                                 XStat  427
              <s10.MaxDyMo> = IDAY                                              XStat  428
              <s10.MaxHrMo> = ISCHR                                             XStat  429
              <s10.MaxDBMo> = DBT                                               XStat  430
              <s10.MaxWBMo> = WBT                                               XStat  431
            ENDIF                                                               XStat  432
          ENDIF                                                                 XStat  433
        ENDIF                                                                   XStat  434
        s10 = <s10;Next>                                                        XStat  435
      ENDDO  ! Type 10                                                          XStat  436
c                                                                               XStat  437
c              Type 11 - TDV end-use totals, peaks, peak conditions             XStat  438
      s11 = Is11                                                                XStat  439
      DO WHILE (s11 .GT. 0)                                                     XStat  440
c              pointer to the node                                              XStat  441
        Knx = <s11;Node>                                                        XStat  442
        IF (<nx;Ident> .EQ. IdNode)  THEN                                       XStat  443
c              Single node                                                      XStat  444
          Kli          = 0                                                      XStat  445
          Jme          = <nx;Component>                                         XStat  446
          Keu          = <nx;EndUse>                                            XStat  447
          TDVengy      = <nx.Load> * <me.TDVsrc>                                XStat  448
          <s11.LossMo> = <s11.LossMo> + <me;Loss> * <me.TDVsrc>                 XStat  449
c              TDV multiplier statistics                                        XStat  450
          <s11.TDVmaxMo> = Max(<s11.TDVmaxMo>, <me.TDVsrc>)                     XStat  451
          <s11.TDVminMo> = Min(<s11.TDVminMo>, <me.TDVsrc>)                     XStat  452
          <s11.TDVavgMo> = <s11.TDVavgYr> + <me.TDVsrc>                         XStat  453
          <s11.TDVhrsMo> = <s11.TDVhrsYr> + 1                                   XStat  454
        ELSE                                                                    XStat  455
          Kli      = Knx                                                        XStat  456
          NumItems = <li;NumItems>                                              XStat  457
        ENDIF                                                                   XStat  458
c              statistics for each end-use category; note that                  XStat  459
c              mm;IncludeTDV is a mask and has a value of 0 or 1                XStat  460
        Total = 0.                                                              XStat  461
        DO  IE=1,18                                                             XStat  462
          IF (Kli .eq. 0)  THEN                                                 XStat  463
            X = TDVengy*<eu.1/TotalEU> * <eu.EndUses> * <mm;IncludeTDV>         XStat  464
          ELSE                                                                  XStat  465
            X = 0.                                                              XStat  466
            DO  LI=1,NumItems                                                   XStat  467
              Knx = <li;List>                                                   XStat  468
              Jme = <nx;Component>                                              XStat  469
              Keu = <nx;EndUse>                                                 XStat  470
              X   = X + <nx.Load> * <me.TDVsrc>  * <eu.1/TotalEU>               XStat  471
     &                            * <eu.EndUses> * <mm;IncludeTDV>              XStat  472
            ENDDO                                                               XStat  473
          ENDIF                                                                 XStat  474
          IF (X .eq. 0.)  Cycle                                                 XStat  475
          <s11.EndUseMo> = <s11.EndUseMo> + X                                   XStat  476
          Total          = Total          + X                                   XStat  477
          IF (Abs(X) .GT. Abs(<s11.EndUseMxMo>))  THEN                          XStat  478
            <s11.EndUseMxMo>   = X                                              XStat  479
            <s11.EndUseMxDyMo> = IDAY                                           XStat  480
            <s11.EndUseMxHrMo> = ISCHR                                          XStat  481
            <s11.EndUseMxDBMo> = DBT                                            XStat  482
            <s11.EndUseMxWBMo> = WBT                                            XStat  483
          ENDIF                                                                 XStat  484
        ENDDO                                                                   XStat  485
c                                                                               XStat  486
        IF (Total .ne. 0.)  THEN                                                XStat  487
          <s11.TotalMo> = <s11.TotalMo> + Total                                 XStat  488
          IF (Abs(Total) .GT. Abs(<s11.TotalMxMo>))  THEN                       XStat  489
            <s11.TotalMxMo>   = Total                                           XStat  490
            <s11.TotalMxDyMo> = IDAY                                            XStat  491
            <s11.TotalMxHrMo> = ISCHR                                           XStat  492
            <s11.TotalMxDBMo> = DBT                                             XStat  493
            <s11.TotalMxWBMo> = WBT                                             XStat  494
          ENDIF                                                                 XStat  495
        ENDIF                                                                   XStat  496
c                                                                               XStat  497
        s11 = <s11;Next>                                                        XStat  498
      ENDDO    ! Type 11                                                        XStat  499
c                                                                               XStat  500
c                                                                               XStat  501
c ============ INITIALIZE MONTHLY DATA ======================================== XStat  502
      CASE (44)                                                                 XStat  503
c                                                                               XStat  504
c              Type 1 - Total                                                   XStat  505
      s1 = Is1                                                                  XStat  506
      DO WHILE (s1 .GT. 0)                                                      XStat  507
c              monthly total                                                    XStat  508
        <s1.TotalMo> = 0.                                                       XStat  509
        s1 = <s1;Next>                                                          XStat  510
      ENDDO    ! Type 1                                                         XStat  511
c                                                                               XStat  512
c              Type 2 - Total, Peak, Time and weather                           XStat  513
      s2 = Is2                                                                  XStat  514
      DO WHILE (s2 .GT. 0)                                                      XStat  515
        CALL ZeroAA(<#s2~MoZeroStart..>, <#s2.MoZeroEnd....>)                   XStat  516
        s2 = <s2;Next>                                                          XStat  517
      ENDDO    ! Type 2                                                         XStat  518
c                                                                               XStat  519
c              Type 3 - End-use totals, peaks, peak conditions                  XStat  520
      s3 = Is3                                                                  XStat  521
      DO WHILE (s3 .GT. 0)                                                      XStat  522
        CALL ZeroAA(<#s3~MoZeroStart..>, <#s3.MoZeroEnd....>)                   XStat  523
        s3 = <s3;Next>                                                          XStat  524
      ENDDO    ! Type 3                                                         XStat  525
c                                                                               XStat  526
c              Type 4 Accumulates monthly totals - no monthly initial           XStat  527
c                                                                               XStat  528
c              Type 5 - Part load bins                                          XStat  529
      s5 = Is5                                                                  XStat  530
      DO WHILE (s5 .GT. 0)                                                      XStat  531
        CALL ZeroAA(<#s5~MoZeroStart..>, <#s5.MoZeroEnd....>)                   XStat  532
        s5 = <s5;Next>                                                          XStat  533
      ENDDO    ! Type 5                                                         XStat  534
c                                                                               XStat  535
c              Type 6 Scatter plot - no monthly initialization                  XStat  536
c                                                                               XStat  537
c              Type 7 - Max, Min, Avg, Conditions                               XStat  538
      s7 = Is7                                                                  XStat  539
      DO WHILE (s7 .GT. 0)                                                      XStat  540
        CALL ZeroAA(<#s7~MoZeroStart..>, <#s7.MoZeroEnd....>)                   XStat  541
c              special initialization for max and min                           XStat  542
        <s7.MaxMo> = -1.E10                                                     XStat  543
        <s7.MinMo> =  1.E10                                                     XStat  544
        s7 = <s7;Next>                                                          XStat  545
      ENDDO    ! Type 7                                                         XStat  546
c                                                                               XStat  547
c              Type 10 - Deviation from setpoint, Time and weather              XStat  548
      s10 = Is10                                                                XStat  549
      DO WHILE (s10 .GT. 0)                                                     XStat  550
        CALL ZeroAA(<#s10~MoZeroStart.>, <#s10.MoZeroEnd...>)                   XStat  551
        s10 = <s10;Next>                                                        XStat  552
      ENDDO    ! Type 10                                                        XStat  553
c                                                                               XStat  554
c              Type 11 - TDV end-use totals, peaks, peak conditions             XStat  555
      s11 = Is11                                                                XStat  556
      DO WHILE (s11 .GT. 0)                                                     XStat  557
        CALL ZeroAA(<#s11~MoZeroStart.>, <#s11~MoZeroEnd...>)                   XStat  558
        <s11.TDVminMo> = 1.E10                                                  XStat  559
        s11 = <s11;Next>                                                        XStat  560
      ENDDO    ! Type 11                                                        XStat  561
c                                                                               XStat  562
c                                                                               XStat  563
c ============ MONTHLY STATISTICS ============================================= XStat  564
      CASE (45)                                                                 XStat  565
c                                                                               XStat  566
c              Type 1 - Total                                                   XStat  567
      s1 = Is1                                                                  XStat  568
      DO WHILE (s1 .GT. 0)                                                      XStat  569
        <s1.TotalYr> = <s1.TotalYr> + <s1.TotalMo>                              XStat  570
        s1 = <s1;Next>                                                          XStat  571
      ENDDO    ! Type 1                                                         XStat  572
c                                                                               XStat  573
c              Type 2 - Total, Peak, Time and weather                           XStat  574
      s2 = Is2                                                                  XStat  575
      DO WHILE (s2 .GT. 0)                                                      XStat  576
c              pointer to the node and variable                                 XStat  577
        Knx = <s2;Parent>                                                       XStat  578
c              yearly total                                                     XStat  579
        <s2.TotalYr> = <s2.TotalYr> + <s2.TotalMo>                              XStat  580
c              yearly peak and time                                             XStat  581
        X = <s2.PeakMo>                                                         XStat  582
        IF (Abs(X) .GT. Abs(<s2.PeakYr>))  THEN                                 XStat  583
          <s2.PeakYr>   = X                                                     XStat  584
          <s2.PeakMoYr> = IMO                                                   XStat  585
          <s2.PeakDyYr> = <s2.PeakDyMo>                                         XStat  586
          <s2.PeakDBYr> = <s2.PeakDBMo>                                         XStat  587
          <s2.PeakWBYr> = <s2.PeakWBMo>                                         XStat  588
        ENDIF                                                                   XStat  589
        s2 = <s2;Next>                                                          XStat  590
      ENDDO    ! Type 2                                                         XStat  591
c                                                                               XStat  592
c              Type 3 - End-use totals, peaks, peak conditions                  XStat  593
      s3 = Is3                                                                  XStat  594
      DO WHILE (s3 .GT. 0)                                                      XStat  595
c              by end-use                                                       XStat  596
        DO  IE=1,19                                                             XStat  597
          <s3.EndUseYr> = <s3.EndUseYr> + <s3.EndUseMo>                         XStat  598
          IF (Abs(<s3.EndUseMaxMo>) .GT. Abs(<s3.EndUseMaxYr>))  THEN           XStat  599
            <s3.EndUseMaxYr>   = <s3.EndUseMaxMo>                               XStat  600
            <s3.EndUseMaxMoYr> = IMO                                            XStat  601
            <s3.EndUseMaxDyYr> = <s3.EndUseMaxDyMo>                             XStat  602
            <s3.EndUseMaxDBYr> = <s3.EndUseMaxDBMo>                             XStat  603
            <s3.EndUseMaxWBYr> = <s3.EndUseMaxWBMo>                             XStat  604
          ENDIF                                                                 XStat  605
        ENDDO                                                                   XStat  606
c              sum of end-uses                                                  XStat  607
        IE = 20                                                                 XStat  608
        <s3.EndUseYr> = <s3.EndUseYr> + <s3.EndUseMo>                           XStat  609
        IF (Abs(<s3.EndUseMaxMo>) .GT. Abs(<s3.EndUseMaxYr>))  THEN             XStat  610
          <s3.EndUseMaxYr>   = <s3.EndUseMaxMo>                                 XStat  611
          <s3.EndUseMaxMoYr> = IMO                                              XStat  612
          <s3.EndUseMaxDyYr> = <s3.EndUseMaxDyMo>                               XStat  613
          <s3.EndUseMaxDBYr> = <s3.EndUseMaxDBMo>                               XStat  614
          <s3.EndUseMaxWBYr> = <s3.EndUseMaxWBMo>                               XStat  615
          DO  IE=1,19                                                           XStat  616
            <s3.EndUsePeakYr> = <s3.EndUsePeakMo>                               XStat  617
          ENDDO                                                                 XStat  618
        ENDIF                                                                   XStat  619
        s3 = <s3;Next>                                                          XStat  620
      ENDDO    ! Type 3                                                         XStat  621
c                                                                               XStat  622
c              Type 4 Accumulate monthly totals from Type 3                     XStat  623
      MO  = IMO                                                                 XStat  624
      s4 = Is4                                                                  XStat  625
      DO WHILE (s4 .GT. 0)                                                      XStat  626
        s3 = <s4;s3>                                                            XStat  627
        <s4.TotalMo>      = <s3.TotalMo>                                        XStat  628
        <s4.TotalMaxMo>   = <s3.TotalMaxMo>                                     XStat  629
        <s4.TotalMaxDyMo> = <s3.TotalMaxDyMo>                                   XStat  630
        <s4.TotalMaxHrMo> = <s3.TotalMaxHrMo>                                   XStat  631
        s4 = <s4;Next>                                                          XStat  632
      ENDDO    ! Type 4                                                         XStat  633
c                                                                               XStat  634
c              Type 5 - Bin data, part load ratios                              XStat  635
      s5 = Is5                                                                  XStat  636
      DO WHILE (s5 .GT. 0)                                                      XStat  637
        IBtotal = 0                                                             XStat  638
        DO  IB=1,11                                                             XStat  639
          <s5.YearBins> = <s5.YearBins> + <s5.MonthBins>                        XStat  640
          IBtotal       = IBtotal       + <s5.MonthBins>                        XStat  641
        ENDDO                                                                   XStat  642
        IB = 12                                                                 XStat  643
        <s5.MonthBins> = IBtotal                                                XStat  644
        <s5.YearBins>  = <s5.YearBins> + IBtotal                                XStat  645
        s5 = <s5;Next>                                                          XStat  646
      ENDDO    ! Type 5                                                         XStat  647
c                                                                               XStat  648
c              Type 6 Scatter plot - no monthly statistics                      XStat  649
c                                                                               XStat  650
c              Type 7 - Max, Min, Avg, Conditions                               XStat  651
      s7 = Is7                                                                  XStat  652
      DO WHILE (s7 .GT. 0)                                                      XStat  653
c              Yearly average                                                   XStat  654
        <s7.AvgYr>   = <s7.AvgYr>   + <s7.AvgMo>                                XStat  655
        <s7.HoursYr> = <s7.HoursYr> + <s7.HoursMo>                              XStat  656
c              convert the monthly average to the actual                        XStat  657
        IF (<s7.HoursMo> .GT. 0)                                                XStat  658
     &    <s7.AvgMo> = <s7.AvgMo> / <s7.HoursMo>                                XStat  659
c              yearly peak, time, and weather                                   XStat  660
        IF (<s7.MaxMo> .GT. <s7.MaxYr>)  THEN                                   XStat  661
          <s7.MaxYr>   = <s7.MaxMo>                                             XStat  662
          <s7.MaxMoYr> = IMO                                                    XStat  663
          <s7.MaxDyYr> = <s7.MaxDyMo>                                           XStat  664
          <s7.MaxDBYr> = <s7.MaxDBMo>                                           XStat  665
          <s7.MaxWBYr> = <s7.MaxWBMo>                                           XStat  666
        ENDIF                                                                   XStat  667
        IF (<s7.MinMo> .LT. <s7.MinYr>)  THEN                                   XStat  668
          <s7.MinYr>   = <s7.MinMo>                                             XStat  669
          <s7.MinMoYr> = IMO                                                    XStat  670
          <s7.MinDyYr> = <s7.MinDyMo>                                           XStat  671
          <s7.MinDBYr> = <s7.MinDBMo>                                           XStat  672
          <s7.MinWBYr> = <s7.MinWBMo>                                           XStat  673
        ENDIF                                                                   XStat  674
        s7 = <s7;Next>                                                          XStat  675
      ENDDO    ! Type 7                                                         XStat  676
c                                                                               XStat  677
c              Type 10 - Deviation from setpoint, Time and weather              XStat  678
      s10 = Is10                                                                XStat  679
      DO WHILE (s10 .GT. 0)                                                     XStat  680
c              yearly total                                                     XStat  681
        <s10.NumEventsYr> = <s10.NumEventsYr> + <s10.NumEventsMo>               XStat  682
c              yearly peak and time                                             XStat  683
        X = <s10.MaxMo>                                                         XStat  684
        IF (X .GT. <s10.MaxYr>)  THEN                                           XStat  685
          <s10.MaxYr>   = X                                                     XStat  686
          <s10.MaxMoYr> = IMO                                                   XStat  687
          <s10.MaxDyYr> = <s10.MaxDyMo>                                         XStat  688
          <s10.MaxHrYr> = <s10.MaxHrMo>                                         XStat  689
          <s10.MaxDBYr> = <s10.MaxDBMo>                                         XStat  690
          <s10.MaxWBYr> = <s10.MaxWBMo>                                         XStat  691
        ENDIF                                                                   XStat  692
        s10 = <s10;Next>                                                        XStat  693
      ENDDO    ! Type 10                                                        XStat  694
c                                                                               XStat  695
c              Type 11 - End-use totals, peaks, peak conditions                 XStat  696
      s11 = Is11                                                                XStat  697
      DO WHILE (s11 .GT. 0)                                                     XStat  698
c              by end-use                                                       XStat  699
        DO  IE=1,19                                                             XStat  700
          <s11.EndUseYr> = <s11.EndUseYr> + <s11.EndUseMo>                      XStat  701
          IF (Abs(<s11.EndUseMxMo>) .GT. Abs(<s11.EndUseMxYr>))  THEN           XStat  702
            <s11.EndUseMxYr>   = <s11.EndUseMxMo>                               XStat  703
            <s11.EndUseMxMoYr> = IMO                                            XStat  704
            <s11.EndUseMxDyYr> = <s11.EndUseMxDyMo>                             XStat  705
            <s11.EndUseMxDBYr> = <s11.EndUseMxDBMo>                             XStat  706
            <s11.EndUseMxWBYr> = <s11.EndUseMxWBMo>                             XStat  707
          ENDIF                                                                 XStat  708
        ENDDO                                                                   XStat  709
c              sum of end-uses                                                  XStat  710
        IE = 20                                                                 XStat  711
        <s11.EndUseYr> = <s11.EndUseYr> + <s11.EndUseMo>                        XStat  712
        IF (Abs(<s11.EndUseMxMo>) .GT. Abs(<s11.EndUseMxYr>))  THEN             XStat  713
          <s11.EndUseMxYr>   = <s11.EndUseMxMo>                                 XStat  714
          <s11.EndUseMxMoYr> = IMO                                              XStat  715
          <s11.EndUseMxDyYr> = <s11.EndUseMxDyMo>                               XStat  716
          <s11.EndUseMxDBYr> = <s11.EndUseMxDBMo>                               XStat  717
          <s11.EndUseMxWBYr> = <s11.EndUseMxWBMo>                               XStat  718
        ENDIF                                                                   XStat  719
        <s11.LossYr>   = <s11.LossYr> + <s11.LossMo>                            XStat  720
c              TDV multiplier                                                   XStat  721
        <s11.TDVmaxYr> = Max(<s11.TDVmaxMo>, <s11.TDVmaxYr>)                    XStat  722
        <s11.TDVminYr> = Min(<s11.TDVminMo>, <s11.TDVminYr>)                    XStat  723
        <s11.TDVavgYr> = <s11.TDVavgYr> + <s11.TDVavgMo>                        XStat  724
        <s11.TDVhrsYr> = <s11.TDVhrsYr> + <s11.TDVhrsMo>                        XStat  725
c                                                                               XStat  726
        s11 = <s11;Next>                                                        XStat  727
      ENDDO    ! Type 11                                                        XStat  728
c                                                                               XStat  729
c                                                                               XStat  730
c ============ INITIALIZE YEARLY DATA ========================================= XStat  731
      CASE (46)                                                                 XStat  732
c                                                                               XStat  733
c              Type 1 - Total                                                   XStat  734
      s1 = Is1                                                                  XStat  735
      DO WHILE (s1 .GT. 0)                                                      XStat  736
c              monthly total                                                    XStat  737
        <s1.TotalYr> = 0.                                                       XStat  738
        s1 = <s1;Next>                                                          XStat  739
      ENDDO    ! Type 1                                                         XStat  740
c                                                                               XStat  741
c              Type 2 - Total, Peak, Time and weather                           XStat  742
      s2 = Is2                                                                  XStat  743
      DO WHILE (s2 .GT. 0)                                                      XStat  744
        CALL ZeroAA(<#s2~YrZeroStart..>, <#s2.YrZeroEnd....>)                   XStat  745
        s2 = <s2;Next>                                                          XStat  746
      ENDDO    ! Type 2                                                         XStat  747
c                                                                               XStat  748
c              Type 3 - End-use totals, peaks, peak conditions                  XStat  749
      s3 = Is3                                                                  XStat  750
      DO WHILE (s3 .GT. 0)                                                      XStat  751
        CALL ZeroAA(<#s3~YrZeroStart..>, <#s3.YrZeroEnd....>)                   XStat  752
        s3 = <s3;Next>                                                          XStat  753
      ENDDO    ! Type 3                                                         XStat  754
c                                                                               XStat  755
c              Type 4 Accumulate monthly totals from Type 3                     XStat  756
      s4 = Is4                                                                  XStat  757
      DO WHILE (s4 .GT. 0)                                                      XStat  758
        CALL ZeroAA(<#s4~YrZeroStart..>, <#s4.YrZeroEnd....>)                   XStat  759
        s4 = <s4;Next>                                                          XStat  760
      ENDDO    ! Type 4                                                         XStat  761
c                                                                               XStat  762
c              Type 5 - Part load bins                                          XStat  763
      s5 = Is5                                                                  XStat  764
      DO WHILE (s5 .GT. 0)                                                      XStat  765
        CALL ZeroAA(<#s5~YrZeroStart..>, <#s5.YrZeroEnd....>)                   XStat  766
        s5 = <s5;Next>                                                          XStat  767
      ENDDO    ! Type 5                                                         XStat  768
c                                                                               XStat  769
c              Type 6 Scatter plot                                              XStat  770
      s6 = Is6                                                                  XStat  771
      DO WHILE (s6 .GT. 0)                                                      XStat  772
        CALL ZeroAA(<#s6~YrZeroStart..>, <#s6.YrZeroEnd....>)                   XStat  773
        s6 = <s6;Next>                                                          XStat  774
      ENDDO    ! Type 6                                                         XStat  775
c                                                                               XStat  776
c              Type 7 Max, Min, Avg, Conditions                                 XStat  777
      s7 = Is7                                                                  XStat  778
      DO WHILE (s7 .GT. 0)                                                      XStat  779
        CALL ZeroAA(<#s7~YrZeroStart..>, <#s7.YrZeroEnd....>)                   XStat  780
c              special initialization for max and min                           XStat  781
        <s7.MaxYr> = -1.E10                                                     XStat  782
        <s7.MinYr> =  1.E10                                                     XStat  783
        s7 = <s7;Next>                                                          XStat  784
      ENDDO    ! Type 7                                                         XStat  785
c                                                                               XStat  786
c              Type 10 - Deviation from setpoint, Time and weather              XStat  787
      s10 = Is10                                                                XStat  788
      DO WHILE (s10 .GT. 0)                                                     XStat  789
        CALL ZeroAA(<#s10~YrZeroStart.>, <#s10.YrZeroEnd...>)                   XStat  790
        s10 = <s10;Next>                                                        XStat  791
      ENDDO    ! Type 10                                                        XStat  792
c                                                                               XStat  793
c              Type 11 - TDV end-use totals, peaks, peak conditions             XStat  794
      s11 = Is11                                                                XStat  795
      DO WHILE (s11 .GT. 0)                                                     XStat  796
        CALL ZeroAA(<#s11~YrZeroStart.>, <#s11~YrZeroEnd...>)                   XStat  797
        <s11.TDVminYr> = 1.E10                                                  XStat  798
        s11 = <s11;Next>                                                        XStat  799
      ENDDO    ! Type 11                                                        XStat  800
c                                                                               XStat  801
c                                                                               XStat  802
c ============ YEARLY STATISTICS ============================================== XStat  803
      CASE (47)                                                                 XStat  804
c                                                                               XStat  805
c              Curve limit summary                                              XStat  806
      CALL Curves(Mode)                                                         XStat  807
c                                                                               XStat  808
c              Type 4 Accumulate monthly totals from Type 3                     XStat  809
      MO  = 13                                                                  XStat  810
      s4 = Is4                                                                  XStat  811
      DO WHILE (s4 .GT. 0)                                                      XStat  812
        s3 = <s4;s3>                                                            XStat  813
        <s4.TotalMo>      = <s3.TotalYr>                                        XStat  814
        <s4.TotalMaxMo>   = <s3.TotalMaxYr>                                     XStat  815
        <s4.TotalMaxDyMo> = <s3.TotalMaxMoYr>                                   XStat  816
        <s4.TotalMaxHrMo> = <s3.TotalMaxDyYr>                                   XStat  817
        s4 = <s4;Next>                                                          XStat  818
      ENDDO    ! Type 4                                                         XStat  819
c                                                                               XStat  820
c              Type 6 Variable - Scatter plot                                   XStat  821
      s6 = Is6                                                                  XStat  822
      DO WHILE (s6 .GT. 0)                                                      XStat  823
c              row total                                                        XStat  824
        DO  Ncol = 1,25                                                         XStat  825
          ColumnTotal(Ncol) = 0                                                 XStat  826
        ENDDO                                                                   XStat  827
        GrandTotal = 0                                                          XStat  828
        DO  Nrow=1,7                                                            XStat  829
          RowTotal = 0                                                          XStat  830
          Istart   = (Nrow-1)*25                                                XStat  831
          DO  Icol=1,24                                                         XStat  832
            II = Istart + Icol                                                  XStat  833
            RowTotal          = RowTotal          + <s6.YearBins>               XStat  834
            ColumnTotal(Icol) = ColumnTotal(Icol) + <s6.YearBins>               XStat  835
          ENDDO                                                                 XStat  836
          II = II + 1                                                           XStat  837
          <s6.YearBins>   = RowTotal                                            XStat  838
          ColumnTotal(25) = ColumnTotal(25) + RowTotal                          XStat  839
        ENDDO                                                                   XStat  840
c              column totals, including grand total                             XStat  841
        Istart = 7 * 25                                                         XStat  842
        DO  Icol=1,25                                                           XStat  843
          II = Istart + Ncol                                                    XStat  844
          <s6.YearBins> = ColumnTotal(Icol)                                     XStat  845
        ENDDO                                                                   XStat  846
        s6 = <s6;Next>                                                          XStat  847
      ENDDO    ! Type 6                                                         XStat  848
c                                                                               XStat  849
c                                                                               XStat  850
c ============ DESIGN RECONCILIATION ========================================== XStat  851
      CASE (119)                                                                XStat  852
c                                                                               XStat  853
c              Design errors for history blocks                                 XStat  854
      CALL HstySetUp                                                            XStat  855
c                                                                               XStat  856
c              Type 5 - Part load bins                                          XStat  857
      s5 = Is5                                                                  XStat  858
      DO WHILE (s5 .GT. 0)                                                      XStat  859
c              pointer to the node and variable                                 XStat  860
        Knx = <s5;Parent>                                                       XStat  861
c              get the current hour's value                                     XStat  862
        IF (<nx;Ident> .ne. IdListNode  .AND.                                   XStat  863
     &      <nx;Ident> .ne. IdListOther)  THEN                                  XStat  864
          X = AA(Knx + <s5;Offset>) * <s5;Multiplier>                           XStat  865
        ELSE                                                                    XStat  866
c              sum the list of current hour's values                            XStat  867
          X = SumList(Knx, <s5;Offset>, <s5;Multiplier>)                        XStat  868
        ENDIF                                                                   XStat  869
c              can process hourly only if non-zero                              XStat  870
        IF (X .ne. 0.)  THEN                                                    XStat  871
          <s5;Design> = X                                                       XStat  872
        ELSE                                                                    XStat  873
c              cut this block out                                               XStat  874
          Ks5bad = s5                                                           XStat  875
          s5     = Is5                                                          XStat  876
          IF (s5 .EQ. Ks5bad)  THEN                                             XStat  877
            Is5 = <s5;Next>                                                     XStat  878
          ELSE                                                                  XStat  879
            DO                                                                  XStat  880
              IF (Ks5bad .EQ. <s5;Next>)  THEN                                  XStat  881
                Ks5last   = s5                                                  XStat  882
                s5        = Ks5bad                                              XStat  883
                Ks5next   = <s5;Next>                                           XStat  884
                s5        = Ks5last                                             XStat  885
                <s5;Next> = Ks5next                                             XStat  886
                EXIT                                                            XStat  887
              ENDIF                                                             XStat  888
              s5 = <s5;Next>                                                    XStat  889
            ENDDO                                                               XStat  890
          ENDIF                                                                 XStat  891
        ENDIF                                                                   XStat  892
        s5 = <s5;Next>                                                          XStat  893
      ENDDO    ! Type 5                                                         XStat  894
c                                                                               XStat  895
c              Type 8 - Start-up loads                                          XStat  896
      s8 = Is8                                                                  XStat  897
      DO WHILE (s8 .GT. 0)                                                      XStat  898
        IF (<s8;Capacity> .GT. 0.)  THEN                                        XStat  899
c              start-up time was temporarily stored in capacity                 XStat  900
          StartTime = <s8;Capacity>                                             XStat  901
c              get the design value                                             XStat  902
          <s8;Capacity> = AA(<s8;AAptr>)                                        XStat  903
c              fill in the start-up loads                                       XStat  904
          II = 1                                                                XStat  905
          <s8;QStartUp> = <s8;Capacity> * StartTime * .50                       XStat  906
          II = 2                                                                XStat  907
          <s8;QStartUp> = <s8;Capacity> * StartTime * .80                       XStat  908
          II = 3                                                                XStat  909
          <s8;QStartUp> = <s8;Capacity> * StartTime                             XStat  910
          <s8.HoursOn>  = -3                                                    XStat  911
        ENDIF                                                                   XStat  912
        s8 = <s8;Next>                                                          XStat  913
      ENDDO    ! Type 5                                                         XStat  914
c                                                                               XStat  915
c                                                                               XStat  916
      END SELECT   ! Mode                                                       XStat  917
c                                                                               XStat  918
      RETURN                                                                    XStat  919
c                                                                               XStat  920
c              Message formats                                                  XStat  921
c                                                                               XStat  922
      END                                                                       XStat  923
      FUNCTION SumList(Kli, Offset, NodeMult)                                   SumLst   2
c                                                                               SumLst   3
c              Gets a sum from a list of blocks                                 SumLst   4
c                                                                               SumLst   5
c              Kli        Pointer to the list of blocks                         SumLst   6
c              Offset     Variable offset from the block pointer                SumLst   7
c              NodeMult   Include node multiplier if < 0                        SumLst   8
c                                                                               SumLst   9
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
c                                                                               SumLst  13
      Real    NodeMult                                                          SumLst  14
      INTEGER Offset                                                            SumLst  15
c                                                                               SumLst  16
      SumList  = 0.                                                             SumLst  17
      NumItems = <li;NumItems>                                                  SumLst  18
      IF (<li;Ident> .EQ. IdListNode  .and.  NodeMult .lt. 0.)  THEN            SumLst  19
        DO  LI=1,NumItems                                                       SumLst  20
          Knx     = <li;List>                                                   SumLst  21
          SumList = SumList + AA(Knx+Offset) * <nx;Multiplier>                  SumLst  22
        ENDDO                                                                   SumLst  23
      ELSE                                                                      SumLst  24
        DO  LI=1,NumItems                                                       SumLst  25
          Knx     = <li;List>                                                   SumLst  26
          SumList = SumList + AA(Knx+Offset)                                    SumLst  27
        ENDDO                                                                   SumLst  28
      ENDIF                                                                     SumLst  29
c                                                                               SumLst  30
      RETURN                                                                    SumLst  31
      END                                                                       SumLst  32
C ##############################################################################Generl   2
C ##############################################################################Generl   3
C ##############################################################################Generl   4
C ##############################################################################Generl   5
C ##########                                                          ##########Generl   6
C ##########                     GENERAL ROUTINES                     ##########Generl   7
C ##########                                                          ##########Generl   8
C ##############################################################################Generl   9
C ##############################################################################Generl  10
C ##############################################################################Generl  11
C ##############################################################################Generl  12
      SUBROUTINE GetAttachments(Jcomp, Mode)                                    GetAtt   2
c                                                                               GetAtt   3
c              Fills in the Attachments array for use in reports                GetAtt   4
c                                                                               GetAtt   5
c              Jcomp     Pointer to the component                               GetAtt   6
c              Mode      1  Put all attachments into a single column            GetAtt   7
c                        2  Put supplies into a single column, all              GetAtt   8
c                              others into a separate single column             GetAtt   9
c                        3  Put supplies, demands, and others into              GetAtt  10
c                              separate columns                                 GetAtt  11
c                                                                               GetAtt  12
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /Attach/ NameAttachments(8,100,3), NumRowsOfAttachments           /Attach/ 2
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
c                                                                               GetAtt  18
      INTEGER BlankName, Type, NumType(3)                                       GetAtt  19
      DATA    BlankName /4H    /                                                GetAtt  20
      DATA    MaxAttach /100/                                                   GetAtt  21
c                                                                               GetAtt  22
      NumBlank = 8*MaxAttach*Mode                                               GetAtt  23
      DO  I=1,NumBlank                                                          GetAtt  24
        NameAttachments(I,1,1) = BlankName                                      GetAtt  25
      ENDDO                                                                     GetAtt  26
c                                                                               GetAtt  27
      DO  I=1,3                                                                 GetAtt  28
        NumType(I) = 0                                                          GetAtt  29
      ENDDO                                                                     GetAtt  30
c                                                                               GetAtt  31
      Knx = Inx                                                                 GetAtt  32
      DO WHILE (Knx .GT. 0)                                                     GetAtt  33
        IF (<nx;Component> .EQ. Jcomp)  THEN                                    GetAtt  34
          SELECT CASE (<nx;Type>)                                               GetAtt  35
            CASE (11:19)  ! Meters                                              GetAtt  36
              IF (<nx;SubType> .EQ. 1  .OR.  Mode .EQ. 1)  THEN                 GetAtt  37
c                  supplier, or single column                                   GetAtt  38
                Type = 1                                                        GetAtt  39
              ELSEIF (<nx;SubType> .EQ. 2  .OR.  Mode .EQ. 2)  THEN             GetAtt  40
c                  demander, or double column                                   GetAtt  41
                Type = 2                                                        GetAtt  42
              ELSE                                                              GetAtt  43
c              other, only when triple column                                   GetAtt  44
                Type = 3                                                        GetAtt  45
              ENDIF                                                             GetAtt  46
            CASE (31:39)  ! Zonal extraction                                    GetAtt  47
              IF (Mode .EQ. 1)  THEN                                            GetAtt  48
c                  supplier, or single column                                   GetAtt  49
                Type = 1                                                        GetAtt  50
              ELSEIF (Mode .EQ. 2)  THEN                                        GetAtt  51
c                  demander, or double column                                   GetAtt  52
                Type = 2                                                        GetAtt  53
              ELSE                                                              GetAtt  54
c              other, only when triple column                                   GetAtt  55
                Type = 3                                                        GetAtt  56
              ENDIF                                                             GetAtt  57
            CASE (40:49)  ! Air                                                 GetAtt  58
              IF (<nx;SubType> .EQ. 2  .OR.  Mode .EQ. 1)  THEN                 GetAtt  59
c                  supplier, or single column                                   GetAtt  60
                Type = 1                                                        GetAtt  61
              ELSEIF (<nx;SubType> .EQ. 1  .OR.  Mode .EQ. 2)  THEN             GetAtt  62
c                  demander, or double column                                   GetAtt  63
                Type = 2                                                        GetAtt  64
              ENDIF                                                             GetAtt  65
            CASE (50:59)  ! Fluid                                               GetAtt  66
              IF (<nx;SubType> .EQ. 2  .OR.  Mode .EQ. 1)  THEN                 GetAtt  67
c                  supplier, or single column                                   GetAtt  68
                Type = 1                                                        GetAtt  69
              ELSEIF (<nx;SubType> .EQ. 1  .OR.  Mode .EQ. 2)  THEN             GetAtt  70
c                  demander, or double column                                   GetAtt  71
                Type = 2                                                        GetAtt  72
              ENDIF                                                             GetAtt  73
            CASE (60:69)  ! Refrigerant                                         GetAtt  74
              IF (<nx;SubType> .EQ. 2  .OR.  Mode .EQ. 1)  THEN                 GetAtt  75
c                  supplier, or single column                                   GetAtt  76
                Type = 1                                                        GetAtt  77
              ELSEIF (<nx;SubType> .EQ. 1  .OR.  Mode .EQ. 2)  THEN             GetAtt  78
c                  demander, or double column                                   GetAtt  79
                Type = 2                                                        GetAtt  80
              ENDIF                                                             GetAtt  81
            CASE (70:79)  ! Shaft power                                         GetAtt  82
              IF (<nx;SubType> .EQ. 1  .OR.  Mode .EQ. 1)  THEN                 GetAtt  83
c                  supplier, or single column                                   GetAtt  84
                Type = 1                                                        GetAtt  85
              ELSEIF (<nx;SubType> .EQ. 2  .OR.  Mode .EQ. 2)  THEN             GetAtt  86
c                  demander, or double column                                   GetAtt  87
                Type = 2                                                        GetAtt  88
              ELSE                                                              GetAtt  89
c              other, only when triple column                                   GetAtt  90
                Type = 3                                                        GetAtt  91
              ENDIF                                                             GetAtt  92
          END SELECT  ! nx;Type                                                 GetAtt  93
c                                                                               GetAtt  94
c              pointer to the attachment                                        GetAtt  95
          Kn2 = <nx;Xnode>                                                      GetAtt  96
          IF (<n2;Ident> .EQ. IdListNode  .OR.                                  GetAtt  97
     &        <n2;Ident> .EQ. IdListOther)  THEN                                GetAtt  98
c              pointer is to a list                                             GetAtt  99
            Kli = Kn2                                                           GetAtt 100
            NumItems = MIN(<li;NumItems>, MaxAttach-NumType(Type))              GetAtt 101
            DO  LI=1,NumItems                                                   GetAtt 102
              Jna = Jparent(<li;List>)                                          GetAtt 103
              IF (Jna .GT. 0)  THEN                                             GetAtt 104
                NumType(Type) = NumType(Type) + 1                               GetAtt 105
                DO  II=1,8                                                      GetAtt 106
                  NameAttachments(II,NumType(Type),Type) = <na:NAME>            GetAtt 107
                ENDDO                                                           GetAtt 108
              ENDIF                                                             GetAtt 109
            ENDDO                                                               GetAtt 110
          ELSE                                                                  GetAtt 111
c              pointer is to a single component or node                         GetAtt 112
            Jna = Jparent(Kn2)                                                  GetAtt 113
            IF (Jna .GT. 0)  THEN                                               GetAtt 114
              NumType(Type) = NumType(Type) + 1                                 GetAtt 115
              DO  II=1,8                                                        GetAtt 116
                NameAttachments(II,NumType(Type),Type) = <na:NAME>              GetAtt 117
              ENDDO                                                             GetAtt 118
            ENDIF                                                               GetAtt 119
          ENDIF  ! n2;Ident                                                     GetAtt 120
          IF (NumType(Type) .EQ. MaxAttach)  EXIT                               GetAtt 121
        ENDIF                                                                   GetAtt 122
        Knx = <nx;Next>                                                         GetAtt 123
      ENDDO  ! Knx .GT. 0                                                       GetAtt 124
c                                                                               GetAtt 125
c              Maximum number of attachments of any type                        GetAtt 126
      NumRowsOfAttachments = MAX(NumType(1), NumType(2), NumType(3))            GetAtt 127
                                                                                GetAtt 128
c                                                                               GetAtt 129
      RETURN                                                                    GetAtt 130
      END                                                                       GetAtt 131
      FUNCTION IAposition(Knx, Var)                                             IApos    2
c                                                                               IApos    3
c              Calculates the absolute position of a variable in IA             IApos    4
c                                                                               IApos    5
c              Knx    Starting reference pointer                                IApos    6
c              Var    Variable for which position in IA is required             IApos    7
c                                                                               IApos    8
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
c                                                                               IApos   11
      IAposition = Knx + IAoffset(<nx;Ident>, Var, 1)                           IApos   12
c                                                                               IApos   13
      RETURN                                                                    IApos   14
      END                                                                       IApos   15
      FUNCTION IAoffset(Istart, Ipos, Mode)                                     IAoff    2
c                                                                               IAoff    3
c              Mode = 1  Returns the offset in IA of Ipos relative to           IAoff    4
c                        Istart                                                 IAoff    5
c              Mode = 2  Returns the length in IA between Istart and            IAoff    6
c                        Ipos, inclusive of both                                IAoff    7
c                                                                               IAoff    8
c                        Istart may be any variable preceeding Ipos             IAoff    9
c                                                                               IAoff   10
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
c                                                                               IAoff   14
      DIMENSION Istart(1), Ipos(1)                                              IAoff   15
c                                                                               IAoff   16
      Isave   = Ipos(1)                                                         IAoff   17
      Ipos(1) = -99999                                                          IAoff   18
      I = 1                                                                     IAoff   19
      DO                                                                        IAoff   20
        IF (Istart(I) .EQ. -99999)  EXIT                                        IAoff   21
        I = I + 1                                                               IAoff   22
        IF (I .GT. 10000)  THEN                                                 IAoff   23
          CALL MSGSIM(-1,II,II,II,II)                                           IAoff   24
          WRITE (IOUTPT, 9001)  Istart(1), Ipos(1)                              IAoff   25
          IAoffset = 0                                                          IAoff   26
          RETURN                                                                IAoff   27
        ENDIF                                                                   IAoff   28
      ENDDO                                                                     IAoff   29
c                                                                               IAoff   30
      IF (Mode .EQ. 1)  THEN                                                    IAoff   31
        IAoffset = I - 1                                                        IAoff   32
      ELSE                                                                      IAoff   33
        IAoffset = I                                                            IAoff   34
      ENDIF                                                                     IAoff   35
      Ipos(1) = Isave                                                           IAoff   36
c                                                                               IAoff   37
      RETURN                                                                    IAoff   38
c                                                                               IAoff   39
 9001 FORMAT(14X,'PROGRAMMER ERROR:  IAoffset cannot find the'    /             IAoff   40
     &       14X,'offset in 10000 tries.  Istart,Ipos:',2I8            )        IAoff   41
      END                                                                       IAoff   42
      FUNCTION Jparent(iPtr)                                                    JnaPar   2
c                                                                               JnaPar   3
c              Finds the ultimate parent of a subcomponent or an                JnaPar   4
c              node                                                             JnaPar   5
c                                                                               JnaPar   6
c              iPtr  Pointer to subcomponent or node                            JnaPar   7
c                                                                               JnaPar   8
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
c                                                                               JnaPar  11
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
      DATA NameSubcomponent /4H$Sub/                                            /SubNam/ 2
c                                                                               JnaPar  14
      Kid = iPtr                                                                JnaPar  15
c                                                                               JnaPar  16
      DO                                                                        JnaPar  17
        IF     (<id;Ident> .EQ. NameSubcomponent)  THEN                         JnaPar  18
          Kid = <id;Parent>                                                     JnaPar  19
        ELSEIF (<id;Ident> .EQ. IdNode)  THEN                                   JnaPar  20
          Knx = Kid                                                             JnaPar  21
          Kid = <nx;Component>                                                  JnaPar  22
        ELSEIF (<id;Ident> .EQ. IdEnduse)  THEN                                 JnaPar  23
          Keu = Kid                                                             JnaPar  24
          Kid = <eu;Component>                                                  JnaPar  25
        ELSEIF (<id;Ident> .EQ. IdHistory)  THEN                                JnaPar  26
          Khi = Kid                                                             JnaPar  27
          Kid = <hi;Component>                                                  JnaPar  28
        ELSE                                                                    JnaPar  29
          EXIT                                                                  JnaPar  30
        ENDIF                                                                   JnaPar  31
      ENDDO                                                                     JnaPar  32
c                                                                               JnaPar  33
      Jparent = Kid                                                             JnaPar  34
c                                                                               JnaPar  35
      RETURN                                                                    JnaPar  36
      END                                                                       JnaPar  37
      Subroutine Xfc_Initial                                                    XInit    2
c                                                                               XInit    3
c              Initializes all common block variables to zero                   XInit    4
c              in the INTERFACE code section                                    XInit    5
c                                                                               XInit    6
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /XPtrs / Inx, Ili, Ihi, Ieu, xXPtrs                               /XPtrs/  2
      COMMON  /XPtrRp/ IrepA,  IrepB,  IrepC, IrepD, IrepE,                     /XPtrRp/ 2
     &                 IrepF,  IrepH,  IrepI, IrepO,                            /XPtrRp/ 3
     &                 xXPtrRp                                                  /XPtrRp/ 4
      COMMON  /XPtrSt/ Is1, Is2, Is3, Is4, Is5,                                 /XPtrSt/ 2
     &                 Is6, Is7, Is8, Is9, Is10,                                /XPtrSt/ 3
     &                 Is11,                                                    /XPtrSt/ 4
     &                 xXPtrSt                                                  /XPtrSt/ 5
c                                                                               XInit   12
c              /XPtrs/                                                          XInit   13
      CALL ZeroBlock(Inx, xXPtrs)                                               XInit   14
c              /XPtrSt/                                                         XInit   15
      CALL ZeroBlock(Is1, xXPtrSt)                                              XInit   16
c              /XPtrRp/                                                         XInit   17
      CALL ZeroBlock(IrepA, xXPtrRp)                                            XInit   18
c                                                                               XInit   19
      RETURN                                                                    XInit   20
      END                                                                       XInit   21
      INTEGER FUNCTION NewRecord(Length)                                        NewBlk   2
c                                                                               NewBlk   3
c              Allocates space in AA for another data record                    NewBlk   4
c                                                                               NewBlk   5
c              Length     Length of new record                                  NewBlk   6
c                                                                               NewBlk   7
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                         /IAX/    2
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
c                                                                               NewBlk  12
      IF (IAX+Length .LE. IADIM)  THEN                                          NewBlk  13
        Istart = IAX + 1                                                        NewBlk  14
        Iend   = IAX + Length                                                   NewBlk  15
        DO  I=Istart,Iend                                                       NewBlk  16
          IA(I) = 0                                                             NewBlk  17
        ENDDO                                                                   NewBlk  18
        IAX = Iend                                                              NewBlk  19
      ELSE                                                                      NewBlk  20
        CALL MSGSIM(-1,II,II,II,II)                                             NewBlk  21
        WRITE (IOUTPT,9001)  IADIM                                              NewBlk  22
      ENDIF                                                                     NewBlk  23
c                                                                               NewBlk  24
      NewRecord = Istart                                                        NewBlk  25
c                                                                               NewBlk  26
      RETURN                                                                    NewBlk  27
c                                                                               NewBlk  28
 9001 FORMAT(14X,'Program has exceeded the allocated storage capacity' /        NewBlk  29
     &       14X,'of ',I7,' words for the interface variables.  You'   /        NewBlk  30
     &       14X,'will have to use a larger version of the program to' /        NewBlk  31
     &       14X,'accommodate your input.'                             )        NewBlk  32
c                                                                               NewBlk  33
      END                                                                       NewBlk  34
      BLOCK DATA Xfc_Data                                                       XData    2
c                                                                               XData    3
c              Sets values for various symbols                                  XData    4
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON  /MtrNam/ MeterName(4,6), MasterMeters(8,4), SubMeter(3,2),        /MtrNam/ 2
     &                 FuelType(4,7)                                            /MtrNam/ 3
      INTEGER          SubMeter, FuelType                                       /MtrNam/ 4
      COMMON  /Idents/ IdNode, IdHistory, IdEnduse,                             /Idents/ 2
     &                 IdListNode, IdListVar, IdListOther,                      /Idents/ 3
     &                 IdStatistics(11), IdDeleted                              /Idents/ 4
c                                                                               XData    8
c              /MtrNam/                                                         XData    9
      DATA MeterName                                                            XData   10
     &    / 4HSTEA,4HM   ,4H    ,4H    ,  4HCHIL,4HLED-,4HWATE,4HR   ,          XData   11
     &      4HELEC,4HTRIC,4HITY ,4H    ,  4HFUEL,4H    ,4H    ,4H    ,          XData   12
     &      4HELEC,4HTRIC,4H-SAL,4HE   ,  4HWATE,4HR   ,4H    ,4H    /          XData   13
      DATA MasterMeters                                                         XData   14
     &    / 4HStea,4Hm Me,4Hters,4H    ,  4H    ,4H    ,4H    ,4H    ,          XData   15
     &      4HCHW ,4HMete,4Hrs  ,4H    ,  4H    ,4H    ,4H    ,4H    ,          XData   16
     &      4HElec,4Htric,4H Met,4Hers ,  4H    ,4H    ,4H    ,4H    ,          XData   17
     &      4HFuel,4H Met,4Hers ,4H    ,  4H    ,4H    ,4H    ,4H    /          XData   18
      DATA SubMeter                                                             XData   19
     &    / 4H    , 4H    , 4H    ,                                             XData   20
     &      4H (SU, 4HB-ME, 4HTER)/                                             XData   21
      DATA FuelType                                                             XData   22
     &    / 4HNATU,4HRAL-,4HGAS ,4H    ,  4HLPG ,4H    ,4H    ,4H    ,          XData   23
     &      4HFUEL,4H-OIL,4H    ,4H    ,  4HDIES,4HEL-O,4HIL  ,4H    ,          XData   24
     &      4HCOAL,4H    ,4H    ,4H    ,  4HMETH,4HANOL,4H    ,4H    ,          XData   25
     &      4HOTHE,4HR-FU,4HEL  ,4H    /                                        XData   26
c                                                                               XData   27
c              /Idents/                                                         XData   28
      DATA IdNode, IdDeleted                                                    XData   29
     &   /4H$Kno, 4H$xxx/                                                       XData   30
      DATA IdHistory, IdEnduse                                                  XData   31
     &  /4H$Khi, 4H$Keu/                                                        XData   32
      DATA IdListNode, IdListVar, IdListOther                                   XData   33
     &  /4H$LiN, 4H$LiV, 4H$LiO/                                                XData   34
c                                                                               XData   35
      DATA IdStatistics                                                         XData   36
     &  /4H$s1 , 4H$s2 , 4H$s3 , 4H$s4 , 4H$s5 ,                                XData   37
     &   4H$s6 , 4H$s7 , 4H$s8 , 4H$s9 , 4H$s10,                                XData   38
     &   4H$s11/                                                                XData   39
c                                                                               XData   40
      END                                                                       XData   41
