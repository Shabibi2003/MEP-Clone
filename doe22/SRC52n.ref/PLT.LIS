      SUBROUTINE MechEquip_Design                                               MchEqD   2
c                                                                               MchEqD   3
c              Designs the mechanical system components                         MchEqD   4
c                                                                               MchEqD   5
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /ListsP/ ListPlantsByType(10), Num2ndCoolants,                    /ListsP/ 2
     &                 xListsP                                                  /ListsP/ 3
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON  /SimDat/ NumMechIter, NumMechFail, xSimDat                        /SimDat/ 2
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               MchEqD  15
      INTEGER PlantSimIndex                                                     MchEqD  16
      LOGICAL IterReqdHsty                                                      MchEqD  17
c                                                                               MchEqD  18
c              Initialize the component histories                               MchEqD  19
      CALL HistoryInit(1)                                                       MchEqD  20
      CALL HstyClearFlag(1)                                                     MchEqD  21
c                                                                               MchEqD  22
c                                                                               MchEqD  23
c ============ ITERATIVE LOOP ================================================= MchEqD  24
c                                                                               MchEqD  25
      NumMechIter = 0                                                           MchEqD  26
   10 IF (IwinReturn .ne. 0)  RETURN                                            MchEqD  27
      NumMechIter = NumMechIter + 1                                             MchEqD  28
c                                                                               MchEqD  29
c              First type of plant to be simulated                              MchEqD  30
      PlantSimIndex = 1                                                         MchEqD  31
c                                                                               MchEqD  32
c              Loop through all components and calculate the fluid              MchEqD  33
c              circuit loads and flows                                          MchEqD  34
      CALL Coils_Old(111)                                                       MchEqD  35
      IF (IwinReturn .ne. 0)  Return                                            MchEqD  36
c              Process load components                                          MchEqD  37
      Jpq = Ipq                                                                 MchEqD  38
      DO WHILE (Jpq .gt. 0)                                                     MchEqD  39
        CALL ProcessAlgs(111, Jpq)                                              MchEqD  40
        Jpq = <pq;Next>                                                         MchEqD  41
      ENDDO                                                                     MchEqD  42
      IF (IwinReturn .ne. 0)  Return                                            MchEqD  43
c              Recirculation balance valves                                     MchEqD  44
      Kfb = Ifb                                                                 MchEqD  45
      DO WHILE (Kfb .gt. 0)                                                     MchEqD  46
        Call FluidBypass(111, Kfb)                                              MchEqD  47
        Kfb = <fb;Next>                                                         MchEqD  48
      ENDDO                                                                     MchEqD  49
      IF (IwinReturn .ne. 0)  Return                                            MchEqD  50
c                                                                               MchEqD  51
c              Check for refrigeration systems                                  MchEqD  52
      IF (Nrs .gt. 0)  THEN                                                     MchEqD  53
c              First, see if any secondary coolant plants                       MchEqD  54
        IF (Num2ndCoolants .gt. 0)  THEN                                        MchEqD  55
          CALL Plant_Design(PlantSimIndex)                                      MchEqD  56
          IF (IwinReturn .ne. 0)  Return                                        MchEqD  57
        ENDIF                                                                   MchEqD  58
c              Design refrigeration equipment                                   MchEqD  59
        CALL Refrigeration_Design                                               MchEqD  60
      ENDIF                                                                     MchEqD  61
      IF (IwinReturn .ne. 0)  Return                                            MchEqD  62
c                                                                               MchEqD  63
c              Design each group of plant components and its                    MchEqD  64
c              associated fluid circuits.  Design order is                      MchEqD  65
c              CHW, Pipe2, DHW, HW, WLHP, CW, but not all types                 MchEqD  66
c              may be present                                                   MchEqD  67
      DO WHILE (ListPlantsByType(PlantSimIndex) .GT. 0)                         MchEqD  68
        CALL Plant_Design(PlantSimIndex)                                        MchEqD  69
        IF (IwinReturn .ne. 0)  Return                                          MchEqD  70
      ENDDO                                                                     MchEqD  71
c                                                                               MchEqD  72
c              Design the meters                                                MchEqD  73
      CALL Meters(111)                                                          MchEqD  74
      IF (IwinReturn .ne. 0)  Return                                            MchEqD  75
c                                                                               MchEqD  76
c              See if system convergence achieved.  Repeat if not               MchEqD  77
      IF (IterReqdHsty(1))  THEN                                                MchEqD  78
        IF (NumMechIter .GT. 10)  THEN                                          MchEqD  79
          IF (NumMechIter .EQ. 11)  THEN                                        MchEqD  80
c              Warn when convergence not achieved                               MchEqD  81
            CALL MSGSIM(-2,II,II,II,II)                                         MchEqD  82
            WRITE (IOUTPT,9100)  NumHstyFlags(1)                                MchEqD  83
          ENDIF                                                                 MchEqD  84
          IF (IREPRT(3,35) .NE. 0)  THEN                                        MchEqD  85
            CALL DumpHstyTrack(1)                                               MchEqD  86
            CALL DumpHstyDamp(1)                                                MchEqD  87
          ENDIF                                                                 MchEqD  88
        ENDIF                                                                   MchEqD  89
        IF (NumMechIter .LT. 20)  GOTO 10                                       MchEqD  90
      ENDIF                                                                     MchEqD  91
c                                                                               MchEqD  92
      RETURN                                                                    MchEqD  93
c                                                                               MchEqD  94
c              Message formats                                                  MchEqD  95
 9100 FORMAT(14X,'The plant design calculations failed to converge in' /        MchEqD  96
     &       14X,'10 iterations.  Number failed:',I3                   )        MchEqD  97
      END                                                                       MchEqD  98
      SUBROUTINE MechEquip_Read(Mode)                                           MchEqR   2
c                                                                               MchEqR   3
c              Reads standard file for the primary plant equipment              MchEqR   4
c              and sets up pointers                                             MchEqR   5
c                                                                               MchEqR   6
c              Called from READSS   Mode = 1  Read the STANDARD file            MchEqR   7
c                                          2  Set up pointers and               MchEqR   8
c                                             attachments                       MchEqR   9
c                                                                               MchEqR  10
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /COGENn/ CogenMode, CogenIterateIndex, TrackMode,                 /COGEN/  2
     &                 QCogenWaste, xCOGEN                                      /COGEN/  3
      INTEGER          CogenMode, CogenIterateIndex, TrackMode                  /COGEN/  4
      COMMON  /CTRL  / VERS(2),IRPFLG(4),IOVRLL(7),IWRTFL,IPROG,                /CTRL/   2
     1                 IFATAL,NAMPRG(3,7),MTRICR                                /CTRL/   3
      COMMON  /DESDAT/ ZCFM,ICFM,ZVENT,C1,IFLAG                                 /DESDAT/ 2
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /HRREP / Irb, Ihrp, Lrb, Lhrp, Nrb, Nhrp, IVTLIM(3,50),           HRr      1
     &                 IGRPtr, IBRPtr, IRSch, IRSchT(5),                        HRr      2
     &                 NHRTyp(3), ITBUF(3), ITBUFB(3), ITBUFE(3),               HRr      3
     &                 IHREOF, ICDFLG                                           HRr      4
      COMMON  /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                         /IAX/    2
      COMMON  /MISCD / TEMPS(4,4096),CONS(5),TEMPSL(4096),                      /MISCD/  2
     1                 BLDGQH,BLDGQC,BLDGQL,BLDGP,BPMULT,                       /MISCD/  3
     2                 DBTMIN,DBTMAX,WMIN,WMAX,NSPZ(4096),                      /MISCD/  4
     3                 DQ, DTP, DTR, DTS, FPI, PLRCC , POM, TC2, TDM,           /MISCD/  5
     4                 TRA,WCOL,WCOLM,WMM,YPI,KWBTU,BTUKW,UNFILD,Unusedm        /MISCD/  6
      REAL             KWBTU                                                    /MISCD/  7
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
      DIMENSION        Icomp(30), Ncomp(30), Lcomp(30)                          /PTRPL1/ 2
      EQUIVALENCE      (Ipm,Icomp(1)), (Npm,Ncomp(1)), (Lpm,Lcomp(1))           /PTRPL1/ 3
      COMMON  /PTRSYS/ nvect ,                                                  /PTRSYS/ 2
     $                 nsched, its   ,                                          /PTRSYS/ 3
     $                 ncurve, icurve,                                          /PTRSYS/ 4
     $                 nzone , iz    , nczd  , zp2 ,         mtw  ,             /PTRSYS/ 5
     $                 nsys  , is    , nss   , nsp ,  ns   , icode,             /PTRSYS/ 6
     $                 nsz   , isz   , nzd   , zp1 ,  nz   ,                    /PTRSYS/ 7
     $                 nspace, lpr   , Lcv   ,                                  /PTRSYS/ 8
     $                 nattch, iatt  ,                                          /PTRSYS/11
     $                 P2, IDAYHR, IDBWBT,                                      /PTRSYS/12
     $                 IRPPLT, IRPSUM, IRPSYS, IRPZON, MR1, MR2                 /PTRSYS/13
      INTEGER          ZP1, ZP2, P2                                             /PTRSYS/14
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON /UNITT/   VKONV(300), DUMLOG(4), JUNITT(4,300,2)                   /UNITT/  2
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               MchEqR  27
      COMMON  /CHLRKY/ ELCHLR, DBUN, ABSOR, GASABSOR, ENGINE,                   /CHLRKY/ 2
     &                 WaterCool, AirCool                                       /CHLRKY/ 3
      INTEGER          ELCHLR, DBUN, ABSOR, GASABSOR, ENGINE,                   /CHLRKY/ 4
     &                 WaterCool, AirCool                                       /CHLRKY/ 5
      COMMON  /EMKY  / UtilityMeter, BldgMeter, SubMeter, SellMeter             /EMKY/   2
      INTEGER          UtilityMeter, BldgMeter, SubMeter, SellMeter             /EMKY/   3
      COMMON /GLHXKY/  ScheduleOrWthFile, VertWell, HorizStraight,              /GLHXKY/ 2
     &                 HorizSlinky                                              /GLHXKY/ 3
      INTEGER          ScheduleOrWthFile, VertWell, HorizStraight,              /GLHXKY/ 4
     &                 HorizSlinky                                              /GLHXKY/ 5
      COMMON  /PlntKy/ CHW, Pipe2, loop3, HW, loop5, STM, WLHP, DHW,            /PlntKy/ 2
     &                 CW, Deleted, Pipe2h, WLHPh, COGEN, NoType,               /PlntKy/ 3
     &                 Fixed, OA, Sch, Load,  Zone, Outdoor,                    /PlntKy/ 4
     &                 Standby, Demand, Snap, Scheduled,                        /PlntKy/ 5
     &                 CONSTANT, VARIABLE, ModeText(4),                         /PlntKy/ 6
     &                 OffMode, Floating, HeatMode, CoolMode, ElecMode,         /PlntKy/ 7
     &                 AtCoils, EnterLoop, AtPump,                              /PlntKy/ 8
     &                 INDOORS, OUTDOORS, TUNNEL, UNDERGROUND,                  /PlntKy/ 9
     &                 PRIMARY, SECONDARY,                                      /PlntKy/10
     &                 DIRECT, HX,                                              /PlntKy/11
     &                 Water, Ethylene, Propylene, Brine                        /PlntKy/12
      INTEGER          CHW, Pipe2, loop3, HW, loop5, STM, WLHP, DHW,            /PlntKy/13
     &                 CW, Deleted, Pipe2h, WLHPh, COGEN, NoType,               /PlntKy/14
     &                 Fixed, OA, Sch, Load,  Zone, Outdoor,                    /PlntKy/15
     &                 Standby, Demand, Snap, Scheduled,                        /PlntKy/16
     &                 CONSTANT, VARIABLE, ModeText,                            /PlntKy/17
     &                 OffMode, Floating, HeatMode, CoolMode, ElecMode,         /PlntKy/18
     &                 AtCoils, EnterLoop, AtPump,                              /PlntKy/19
     &                 INDOORS, OUTDOORS, TUNNEL, UNDERGROUND,                  /PlntKy/20
     &                 PRIMARY, SECONDARY,                                      /PlntKy/21
     &                 DIRECT, HX,                                              /PlntKy/22
     &                 Water, Ethylene, Propylene, Brine                        /PlntKy/23
      COMMON  /PUMPKY/ OneSpeed, TwoSpeed, VarSpeed, CyclePump,                 /PUMPKY/ 2
     &                 PrimaryPump, SecondaryPump, EquipmentPump                /PUMPKY/ 3
      INTEGER          OneSpeed, TwoSpeed, VarSpeed, CyclePump,                 /PUMPKY/ 4
     &                 PrimaryPump, SecondaryPump, EquipmentPump                /PUMPKY/ 5
      COMMON  /TESKY / ColdTank, HotTank                                        /TESKY/  2
      INTEGER          ColdTank, HotTank                                        /TESKY/  3
      COMMON  /TWRKY / Open, OpenHX, FluidCool,                                 /TWRKY/  2
     &                 Bypass, Speed1, Speed2, SpeedV, Damper,                  /TWRKY/  3
     &                 RunMinCells, RunMaxCells,                                /TWRKY/  4
     &                 ElecPanHtr, NoPanHtr, HWPanHtr,                          /TWRKY/  5
     &                 CycleWithFan, StayOn                                     /TWRKY/  6
      INTEGER          Open, OpenHX, FluidCool,                                 /TWRKY/  7
     &                 Bypass, Speed1, Speed2, SpeedV, Damper,                  /TWRKY/  8
     &                 RunMinCells, RunMaxCells,                                /TWRKY/  9
     &                 ElecPanHtr, NoPanHtr, HWPanHtr,                          /TWRKY/ 10
     &                 CycleWithFan, StayOn                                     /TWRKY/ 11
c                                                                               MchEqR  35
c                                                                               MchEqR  36
      IF (Mode .EQ. 2)  GOTO 200                                                MchEqR  37
c                                                                               MchEqR  38
c              Refer to the comments in READSS for an explanation               MchEqR  39
c              of the dynamic storage techniques used by this program.          MchEqR  40
c              The components read in from the STANDARD file in this            MchEqR  41
c              routine include:                                                 MchEqR  42
c                                                                               MchEqR  43
c                                 Start  Component  Length  Number              MchEqR  44
c              PUMP                Ipm      Jpm       Lpm     Npm               MchEqR  45
c              CIRCULATION-LOOP    Ipl      Jpl       Lpl     Npl               MchEqR  46
c              CHILLER             Ich      Jch       Lch     Nch               MchEqR  47
c              BOILER              Ibl      Jbl       Lbl     Nbl               MchEqR  48
c              DW-HEATER           Idw      Jdw       Ldw     Ndw               MchEqR  49
c              COOLING-TWR         Itw      Jtw       Ltw     Ntw               MchEqR  50
c              TWR-FREE-COOLING    Ifc      Jfc       Lfc     Nfc               MchEqR  51
c              ELEC-GENERATOR      Ign      Jgn       Lgn     Ngn               MchEqR  52
c              THERMAL-STORAGE     Itk      Jtk       Ltk     Ntk               MchEqR  53
c              EQUIP-CTRL          Iec      Jec       Lec     Nec               MchEqR  54
c              LOAD-MANAGEMENT     Ilm      Jlm       Llm     Nlm               MchEqR  55
c              ELEC-METER          Ime      Jme       Lme     Nme               MchEqR  56
c              PROCESS-LOAD        Ipq      Jpq       Lpq     Npq               MchEqR  57
c              MASTER-METERS       Imm                                          MchEqR  58
c              MATERIALS-COST      Imc      Jmc       Lmc     Nmc               MchEqR  59
c              GROUND-LOOP-HX      Igl      Jgl       Lgl     Ngl               MchEqR  60
c              TABLE               Ire      Jre       Lre     Nre               MchEqR  61
c              REFG-FIXTURE        Irf      Jrf       Lrf     Nrf               MchEqR  62
c              REFG-CIRCUIT        Irc      Jrc       Lrc     Nrc               MchEqR  63
c              SUBCOOLER           Isc      Jsc       Lsc     Nsc               MchEqR  64
c              DESUPERHEATER       Ids      Jds       Lds     Nds               MchEqR  65
c              CONDENSER           Icd      Jcd       Lcd     Ncd               MchEqR  66
c              PROCESS-LOAD        Ipq      Jpq       Lpq     Npq               MchEqR  67
c                                                                               MchEqR  68
c              Read in primary equipment blocks                                 MchEqR  69
c              currently 27 total, arrays set up for maximum of 30              MchEqR  70
      DO  I=1,30                                                                MchEqR  71
c              Number of commands of this type, total length of all             MchEqR  72
c              commands of this type                                            MchEqR  73
        READ (ISTNDF,END=100) N,L                                               MchEqR  74
c              call routine to save a buffer for the record                     MchEqR  75
        CALL GetAA(L)                                                           MchEqR  76
        IF (IwinReturn .ne. 0)  RETURN                                          MchEqR  77
c              call routine to read in the record                               MchEqR  78
        CALL READN(ISTNDF,IA(IAX-L+1),L)                                        MchEqR  79
        IF (IwinReturn .ne. 0)  RETURN                                          MchEqR  80
      ENDDO                                                                     MchEqR  81
c              read in primary command pointers                                 MchEqR  82
      READ (ISTNDF,END=100)                                                     MchEqR  83
     &              LEN, IATT,(IREPRT(3,I),I=1,37),                             MchEqR  84
     &              Icomp, Ncomp, Lcomp                                         MchEqR  85
      GO TO 105                                                                 MchEqR  86
  100 CALL MSGSIM(3,ISTD,IBDL,I,I)                                              MchEqR  87
      CALL MessageBox( NULL,                                                    MchEqR  88
     &  'Error reading PLANT standard file -'//                                 MchEqR  89
     &   char(10)//char(13)//char(10)//char(13)//                               MchEqR  90
     &  'Contact DOE-2 Support'//char(0),                                       MchEqR  91
     &  'Read_Plant Errors'//char(0),                                           MchEqR  92
     &  MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                    MchEqR  93
      IwinReturn = 1                                                            MchEqR  94
      RETURN                                                                    MchEqR  95
  105 CONTINUE                                                                  MchEqR  96
c              check to see if BDL and simulation agree on the length           MchEqR  97
c              of the AA array used to date                                     MchEqR  98
      IF (LEN .NE. IAX)  THEN                                                   MchEqR  99
        CALL MSGSIM(-1,II,II,II,II)                                             MchEqR 100
        WRITE (IOUTPT, 9100) LEN, IAX                                           MchEqR 101
        CALL MessageBox( NULL,                                                  MchEqR 102
     &    'Mismatch between BDL and PLANT file -'//                             MchEqR 103
     &     char(10)//char(13)//char(10)//char(13)//                             MchEqR 104
     &    'Contact DOE-2 Support'//char(0),                                     MchEqR 105
     &    'Read_Plant Errors'//char(0),                                         MchEqR 106
     &    MB_OK + MB_ICONSTOP + MB_TASKMODAL)                                   MchEqR 107
        IwinReturn = 1                                                          MchEqR 108
        RETURN                                                                  MchEqR 109
      ENDIF                                                                     MchEqR 110
      IF (IREPRT(3,32) .NE. 0)                                                  MchEqR 111
     &  CALL DUMPIT(20HPlant as Read        ,IA(1),IAX  )                       MchEqR 112
      IENDSF = IAX                                                              MchEqR 113
c                                                                               MchEqR 114
c              Transfer SIM-PARAMETERS pointer for easier access                MchEqR 115
      Jsp = Isp                                                                 MchEqR 116
c              Set previous/next pointers for all components                    MchEqR 117
      CALL SetNextPrevious                                                      MchEqR 118
c                                                                               MchEqR 119
      RETURN                                                                    MchEqR 120
c                                                                               MchEqR 121
c                                                                               MchEqR 122
c ============ SET UP THE POINTERS AND ATTACHMENTS ============================ MchEqR 123
  200 CONTINUE                                                                  MchEqR 124
c                                                                               MchEqR 125
c              Set up the refrigerant tables                                    MchEqR 126
      IF (Ire .GT. 0)  CALL RefgTableSetUp                                      MchEqR 127
c                                                                               MchEqR 128
c              Set up attachments between all components                        MchEqR 129
      CALL Curves(201)                 ! Curve-fit setup                        MchEqR 130
      CALL AllComponents(201)          ! Component attachments                  MchEqR 131
      CALL AllComponents(202)          ! Component attachments, 2nd call        MchEqR 132
      CALL AllComponents(203)          ! Node creation                          MchEqR 133
      CALL AllComponents(204)          ! Node creation, 2nd call                MchEqR 134
      CALL LinkNodes                   ! Link the nodes to each other           MchEqR 135
      CALL Plant_Sort                  ! Sorted lists, plant                    MchEqR 136
      CALL Refrigeration_Sort          ! Sorted lists, refrigeration            MchEqR 137
      CALL AllComponents(205)          ! Links, lists                           MchEqR 138
      CALL AllComponents(206)          ! Links, lists, 2nd call                 MchEqR 139
      CALL AllComponents(208)          ! Histories                              MchEqR 140
      CALL AllComponents(209)          ! Lists of histories                     MchEqR 141
      CALL LoadManagement(209)         ! Load management attachments            MchEqR 142
      IF (IREPRT(3,35) .NE. 0)  THEN                                            MchEqR 143
        CALL AllComponents(210)        ! Dump component pointers                MchEqR 144
        CALL Coils_Old(210)                                                     MchEqR 145
        CALL DumpHstyPtrs              ! Dump history pointers                  MchEqR 146
      ENDIF                                                                     MchEqR 147
      CALL EquipCtrlSetup              ! Sets up Equip-Ctrl sequences           MchEqR 148
c                                                                               MchEqR 149
      IF (IwinReturn .ne. 0)  THEN                                              MchEqR 150
        IFLAG = 1                      ! abort in systems                       MchEqR 151
        RETURN                                                                  MchEqR 152
      ENDIF                                                                     MchEqR 153
c                                                                               MchEqR 154
c              Create reports                                                   MchEqR 155
c              - statistics, initial requests                                   MchEqR 156
      CALL Xfc_Reports(50)                                                      MchEqR 157
      CALL Xfc_Reports(51)                                                      MchEqR 158
c              - create in proper order                                         MchEqR 159
      CALL Xfc_Reports(52)                                                      MchEqR 160
c              - write titles                                                   MchEqR 161
      CALL Xfc_Reports(53)                                                      MchEqR 162
c                                                                               MchEqR 163
      RETURN                                                                    MchEqR 164
c                                                                               MchEqR 165
c              Message formats                                                  MchEqR 166
 9100 FORMAT(14X,'BDL and MechEquip_Read do not agree on the length of'/        MchEqR 167
     &       14X,'the AA array after the PRIMARY read.  Please report' /        MchEqR 168
     &       14X,'this message to your program supplier.'              /        MchEqR 169
     &       14X,'BDL LEN=',I7,' MechEquip_Read IAX=',I7               )        MchEqR 170
      END                                                                       MchEqR 171
      SUBROUTINE MechEquip_Sim(Mode)                                            MchEqS   2
c                                                                               MchEqS   3
c              Simulates the mechanical system components                       MchEqS   4
c                                                                               MchEqS   5
c              Mode  30  Temporary call prior to airside simulation             MchEqS   6
c                    31  Normal call to solve                                   MchEqS   7
c                                                                               MchEqS   8
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /ListsP/ ListPlantsByType(10), Num2ndCoolants,                    /ListsP/ 2
     &                 xListsP                                                  /ListsP/ 3
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
c ?? PtrSys only needed temporarily - see ?? at end of routine                  MchEqS  14
      COMMON  /PTRSYS/ nvect ,                                                  /PTRSYS/ 2
     $                 nsched, its   ,                                          /PTRSYS/ 3
     $                 ncurve, icurve,                                          /PTRSYS/ 4
     $                 nzone , iz    , nczd  , zp2 ,         mtw  ,             /PTRSYS/ 5
     $                 nsys  , is    , nss   , nsp ,  ns   , icode,             /PTRSYS/ 6
     $                 nsz   , isz   , nzd   , zp1 ,  nz   ,                    /PTRSYS/ 7
     $                 nspace, lpr   , Lcv   ,                                  /PTRSYS/ 8
     $                 nattch, iatt  ,                                          /PTRSYS/11
     $                 P2, IDAYHR, IDBWBT,                                      /PTRSYS/12
     $                 IRPPLT, IRPSUM, IRPSYS, IRPZON, MR1, MR2                 /PTRSYS/13
      INTEGER          ZP1, ZP2, P2                                             /PTRSYS/14
c ??                                                                            MchEqS  16
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON  /SimDat/ NumMechIter, NumMechFail, xSimDat                        /SimDat/ 2
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               MchEqS  21
      INTEGER PlantSimIndex                                                     MchEqS  22
      LOGICAL IterNode, IterReqdNode, IterReqdHsty                              MchEqS  23
c                                                                               MchEqS  24
c              Initialize the component histories                               MchEqS  25
      CALL HistoryInit(1)                                                       MchEqS  26
c                                                                               MchEqS  27
      IF (Mode .eq. 31)  THEN                                                   MchEqS  28
c              Re-initialize plants                                             MchEqS  29
        Jpl = Ipl                                                               MchEqS  30
        DO WHILE (Jpl .GT. 0)                                                   MchEqS  31
          CALL FluidPlant(11, Jpl)                                              MchEqS  32
          Jpl = <pl;Next>                                                       MchEqS  33
        ENDDO                                                                   MchEqS  34
      ENDIF                                                                     MchEqS  35
c                                                                               MchEqS  36
c                                                                               MchEqS  37
c ============ ITERATIVE LOOP ================================================= MchEqS  38
c                                                                               MchEqS  39
      NumMechIter = 0                                                           MchEqS  40
   10 IF (IwinReturn .ne. 0)  RETURN                                            MchEqS  41
      NumMechIter = NumMechIter + 1                                             MchEqS  42
c                                                                               MchEqS  43
c                                                                               MchEqS  44
c------------- Simulate end-use loads ----------------------------------------- MchEqS  45
                                                                                MchEqS  46
c              HVAC coils attached to fluid or refrigerant plants               MchEqS  47
      IF (Npl .GT. 0)  CALL Coils_Old(Mode)                                     MchEqS  48
      IF (Nrs .GT. 0)  CALL RefgCoils_Old(Mode)                                 MchEqS  49
                                                                                MchEqS  50
c              Process load components                                          MchEqS  51
      Jpq = Ipq                                                                 MchEqS  52
      DO WHILE (Jpq .gt. 0)                                                     MchEqS  53
        IterNode = IterReqdNode(1, <pq;Nodes>)                                  MchEqS  54
        IF (IterNode  .OR.  IterReqdHsty(<pq;Hstys>))                           MchEqS  55
     &                                      CALL ProcessAlgs(Mode, Jpq)         MchEqS  56
        Jpq = <pq;Next>                                                         MchEqS  57
      ENDDO                                                                     MchEqS  58
                                                                                MchEqS  59
c              Recirculation balance valves                                     MchEqS  60
      Kfb = Ifb                                                                 MchEqS  61
      DO WHILE (Kfb .gt. 0)                                                     MchEqS  62
        IterNode = IterReqdNode(1, <fb;Nodes>)                                  MchEqS  63
        IF (IterNode  .or.  IterReqdHsty(<fb;RecircHsty>))                      MchEqS  64
     &                                      Call FluidBypass(Mode, Kfb)         MchEqS  65
        Kfb = <fb;Next>                                                         MchEqS  66
      ENDDO                                                                     MchEqS  67
                                                                                MchEqS  68
c              Refrigerated fixtures                                            MchEqS  69
      Jrf = Irf                                                                 MchEqS  70
      DO WHILE (Jrf .GT. 0)                                                     MchEqS  71
        IterNode = IterReqdNode(1, <rf;SystemNodes>)                            MchEqS  72
        IF (IterNode  .OR.  IterReqdHsty(<rf;SystemHstys>))                     MchEqS  73
     &                                  CALL RefgFixtureAlgs(Mode, Jrf)         MchEqS  74
        Jrf = <rf;Next>                                                         MchEqS  75
      ENDDO                                                                     MchEqS  76
      IF (IwinReturn .ne. 0)  Return                                            MchEqS  77
c                                                                               MchEqS  78
c                                                                               MchEqS  79
c------------- Simulate from loads down thru equipment ------------------------ MchEqS  80
c                                                                               MchEqS  81
c                                                                               MchEqS  82
c              First type of plant to be simulated                              MchEqS  83
      PlantSimIndex = 1                                                         MchEqS  84
c                                                                               MchEqS  85
c              Secondary coolant loops powered by refrigeration                 MchEqS  86
      IF (Num2ndCoolants .GT. 0)  CALL Plant(31, PlantSimIndex)                 MchEqS  87
c              Refrigeration systems                                            MchEqS  88
      IF (Nrs .gt. 0)  CALL Refrigeration(31)                                   MchEqS  89
      IF (IwinReturn .ne. 0)  Return                                            MchEqS  90
c                                                                               MchEqS  91
c              Simulate each group of plant components and its                  MchEqS  92
c              associated fluid circuits.  Simulation order is                  MchEqS  93
c              CHW, Pipe2, DHW, HW, WLHP, CW, but not all types                 MchEqS  94
c              may be present                                                   MchEqS  95
      DO WHILE (ListPlantsByType(PlantSimIndex) .GT. 0)                         MchEqS  96
        CALL Plant(31, PlantSimIndex)                                           MchEqS  97
        IF (IwinReturn .ne. 0)  Return                                          MchEqS  98
      ENDDO                                                                     MchEqS  99
c                                                                               MchEqS 100
c              Process the meters                                               MchEqS 101
      CALL Meters(31)                                                           MchEqS 102
c                                                                               MchEqS 103
c              See if any conditions cause any of the EQUIP-CTRL                MchEqS 104
c              sequences to change                                              MchEqS 105
      CALL LoadManagement(30)                                                   MchEqS 106
c                                                                               MchEqS 107
c                                                                               MchEqS 108
c------------- Propagate conditions back up to loads -------------------------- MchEqS 109
c                                                                               MchEqS 110
      DO WHILE (PlantSimIndex .GT. 1)                                           MchEqS 111
        CALL Plant(32, PlantSimIndex)                                           MchEqS 112
      ENDDO                                                                     MchEqS 113
c              Check for refrigeration systems                                  MchEqS 114
      IF (Num2ndCoolants .GT. 0)  THEN                                          MchEqS 115
        CALL Refrigeration(32)                                                  MchEqS 116
        CALL Plant(32, PlantSimIndex)                                           MchEqS 117
      ELSE                                                                      MchEqS 118
        IF (PlantSimIndex .GT. 1)  CALL Plant(32, PlantSimIndex)                MchEqS 119
        IF (Nrs .gt. 0)            CALL Refrigeration(32)                       MchEqS 120
      ENDIF                                                                     MchEqS 121
      IF (IwinReturn .ne. 0)  Return                                            MchEqS 122
c                                                                               MchEqS 123
c                                                                               MchEqS 124
c              See if system convergence achieved.  Repeat if not               MchEqS 125
      IterNode = IterReqdNode(0, 1)                                             MchEqS 126
      IF (IterNode  .OR.  IterReqdHsty(1))  THEN                                MchEqS 127
        IF (NumMechIter .GT. 40)  THEN                                          MchEqS 128
          IF (NumMechIter .EQ. 41)  THEN                                        MchEqS 129
c              Warn when convergence not achieved                               MchEqS 130
            IF (NumMechFail .eq. 0)  CALL MSGSIM(-3,II,II,II,II)                MchEqS 131
            NumMechFail = NumMechFail + 1                                       MchEqS 132
            WRITE (IOUTPT,9101)  NumMechFail, IMO, IDAY, IHR                    MchEqS 133
          ENDIF                                                                 MchEqS 134
          IF (IREPRT(3,35) .NE. 0)  THEN                                        MchEqS 135
            WRITE (IOUTPT,9102)  NumMechIter                                    MchEqS 136
            CALL DumpHstyTrack(1)                                               MchEqS 137
            CALL DumpIterNodes(1)                                               MchEqS 138
            CALL DumpHstyDamp(1)                                                MchEqS 139
          ENDIF                                                                 MchEqS 140
        ENDIF                                                                   MchEqS 141
c ??        IF (NumMechIter .GT. 24) STOP                                       MchEqS 142
        IF (NumMechIter .LT. 50)  GOTO 10                                       MchEqS 143
c ??  ELSE                                                                      MchEqS 144
c ??    WRITE (IOUTPT,999) IMO,IDAY,IHR, NumMechIter                            MchEqS 145
 999    FORMAT(3I3,I4)                                                          MchEqS 146
      ENDIF                                                                     MchEqS 147
c ??                                                                            MchEqS 148
c ??           temporary code to force meters and coils to rerun                MchEqS 149
c ??           if this call is prior to airside calcs (Mode 30 only             MchEqS 150
c ??           happens when refrigeration present)                              MchEqS 151
      IF (Mode .EQ. 30)  THEN                                                   MchEqS 152
        Jme = Ime                                                               MchEqS 153
        DO WHILE (Jme .GT. 0)                                                   MchEqS 154
          Kms           = <me;SupplyNode>                                       MchEqS 155
          <ms.IterFlag> = 1                                                     MchEqS 156
          Jme           = <me;Next>                                             MchEqS 157
        ENDDO                                                                   MchEqS 158
        LI = 1                                                                  MchEqS 159
        DO  NS=1,NSYS                                                           MchEqS 160
          NSP = IS + (NS-1)*NSS                                                 MchEqS 161
          IF (<sy;SystemNodes> .GT. 0)                                          MchEqS 162
     &      CALL IterSetNode(1, <sy;SystemNodes>)                               MchEqS 163
        ENDDO                                                                   MchEqS 164
      ENDIF  ! ??                                                               MchEqS 165
c                                                                               MchEqS 166
      RETURN                                                                    MchEqS 167
c                                                                               MchEqS 168
c              Message formats                                                  MchEqS 169
 9101 FORMAT(14X,'MechEquip_Sim convergence failure', I5,                       MchEqS 170
     &           '  Mon/Day/Hr: ',I2,'/',I2,'/',I2                     )        MchEqS 171
 9102 FORMAT(/'  Iteration:',I3)                                                MchEqS 172
c                                                                               MchEqS 173
      END                                                                       MchEqS 174
      SUBROUTINE Plant(Mode, PlantSimIndex)                                     PLANT    2
c                                                                               PLANT    3
c              Simulates all plants of a given type (CHW, HW, etc.)             PLANT    4
c                                                                               PLANT    5
c              Mode 31  Simulate from the loads down thru the plants            PLANT    6
c                   32  Simulate from the plants up to the loads                PLANT    7
c                                                                               PLANT    8
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /ListsP/ ListPlantsByType(10), Num2ndCoolants,                    /ListsP/ 2
     &                 xListsP                                                  /ListsP/ 3
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               PLANT   13
      INTEGER PlantSimIndex                                                     PLANT   14
      LOGICAL IterNode, IterReqdNode, IterReqdHsty                              PLANT   15
c                                                                               PLANT   16
      SELECT CASE (Mode)                                                        PLANT   17
c                                                                               PLANT   18
c                                                                               PLANT   19
c ================ LOADS TO PLANT ============================================= PLANT   20
      CASE (31)                                                                 PLANT   21
c                                                                               PLANT   22
c              Pointer to ranked list of plants of this type                    PLANT   23
      Kli       = ListPlantsByType(PlantSimIndex)                               PLANT   24
      NumPlants = <li;NumItems>                                                 PLANT   25
                                                                                PLANT   26
c              Simulate each plant from the loads down to the primary           PLANT   27
c              equipment, starting with the highest ranked plant                PLANT   28
      DO  LI=NumPlants,1,-1                                                     PLANT   29
        Jpl = <li;List>                  ! pointer to plant                     PLANT   30
c              Skip if nothing in the plant has changed                         PLANT   31
        IterNode = IterReqdNode(0, <pl;SystemNodes>)                            PLANT   32
        IF (.NOT. IterNode  .AND.                                               PLANT   33
     &      .NOT. IterReqdHsty(<pl;SystemHstys>))  CYCLE                        PLANT   34
        Kl2     = <pl;ListFluidCkts>     ! list of fluid ckts                   PLANT   35
        NumCkts = <l2;NumItems>          ! number of ckts                       PLANT   36
                                                                                PLANT   37
c              Simulate the plant's fluid circuits, starting with the           PLANT   38
c              highest ranked                                                   PLANT   39
        DO  L2=NumCkts,1,-1              ! highest to lowest rank ckt           PLANT   40
          Jfc      = <l2;List>                                                  PLANT   41
          IterNode = IterReqdNode(1, <fc;Nodes>)                                PLANT   42
          IF (IterNode  .OR.  IterReqdHsty(<fc;Hstys>))  THEN                   PLANT   43
            CALL FluidCircuitAlgs(Mode, Jfc)                                    PLANT   44
            IF (IwinReturn .ne. 0)  Return                                      PLANT   45
          ENDIF                                                                 PLANT   46
        ENDDO                                                                   PLANT   47
                                                                                PLANT   48
c              Simulate the plant                                               PLANT   49
        IterNode = IterReqdNode(1, <pl;SubSysNodes>)                            PLANT   50
        IF (IterNode  .OR.  IterReqdHsty(<pl;SubSysHstys>))  THEN               PLANT   51
          CALL FluidPlant(Mode, Jpl)                                            PLANT   52
          IF (IwinReturn .ne. 0)  Return                                        PLANT   53
        ENDIF                                                                   PLANT   54
      ENDDO  ! NumPlants                                                        PLANT   55
                                                                                PLANT   56
c              Increment index to point at the next group of plants             PLANT   57
      PlantSimIndex = PlantSimIndex + 1                                         PLANT   58
c                                                                               PLANT   59
c                                                                               PLANT   60
c ================ PLANT TO LOADS ============================================= PLANT   61
      CASE (32)                                                                 PLANT   62
c                                                                               PLANT   63
c              Decrement index to point at the next group of plants             PLANT   64
      PlantSimIndex = PlantSimIndex - 1                                         PLANT   65
c              Pointer to ranked list of plants of this type                    PLANT   66
      Kli       = ListPlantsByType(PlantSimIndex)                               PLANT   67
      NumPlants = <li;NumItems>                                                 PLANT   68
c                                                                               PLANT   69
c              Simulate each plant from the primary equipment up to the         PLANT   70
c              loads, starting with the lowest ranked plant                     PLANT   71
      DO  LI=1,NumPlants                                                        PLANT   72
        Jpl     = <li;List>              ! pointer to plant                     PLANT   73
c              Skip if nothing in the plant has changed                         PLANT   74
        IterNode = IterReqdNode(0, <pl;SystemNodes>)                            PLANT   75
        IF (.NOT. IterNode  .AND.                                               PLANT   76
     &      .NOT. IterReqdHsty(<pl;SystemHstys>))  CYCLE                        PLANT   77
c              Resimulate the plant if anything affecting its primary           PLANT   78
c              equipment has changed                                            PLANT   79
        IterNode = IterReqdNode(1, <pl;SubSysNodes>)                            PLANT   80
        IF (IterNode  .OR.  IterReqdHsty(<pl;SubSysHstys>))  THEN               PLANT   81
          CALL FluidPlant(Mode, Jpl)                                            PLANT   82
          IF (IwinReturn .ne. 0)  Return                                        PLANT   83
        ENDIF                                                                   PLANT   84
c                                                                               PLANT   85
c              Simulate the plant's fluid circuits, starting with the           PLANT   86
c              lowest ranked                                                    PLANT   87
        Kl2     = <pl;ListFluidCkts>     ! list of attached fluid ckts          PLANT   88
        NumCkts = <l2;NumItems>          ! number of ckts                       PLANT   89
        DO  L2=1,NumCkts                 ! lowest to highest rank ckt           PLANT   90
          Jfc = <l2;List>                                                       PLANT   91
          IterNode = IterReqdNode(1, <fc;Nodes>)                                PLANT   92
          IF (IterNode  .OR.  IterReqdHsty(<fc;Hstys>))  THEN                   PLANT   93
            CALL FluidCircuitAlgs(Mode, Jfc)                                    PLANT   94
            IF (IwinReturn .ne. 0)  Return                                      PLANT   95
          ENDIF                                                                 PLANT   96
        ENDDO                                                                   PLANT   97
      ENDDO  ! NumPlants                                                        PLANT   98
c                                                                               PLANT   99
      END SELECT  ! Mode                                                        PLANT  100
c                                                                               PLANT  101
      RETURN                                                                    PLANT  102
      END                                                                       PLANT  103
      SUBROUTINE Plant_Design(PlantSimIndex)                                    PLANTd   2
c                                                                               PLANTd   3
c              Design calculations for central plants of a given                PLANTd   4
c              type (CHW, HW, etc.)                                             PLANTd   5
c                                                                               PLANTd   6
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /ListsP/ ListPlantsByType(10), Num2ndCoolants,                    /ListsP/ 2
     &                 xListsP                                                  /ListsP/ 3
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON  /SimDat/ NumMechIter, NumMechFail, xSimDat                        /SimDat/ 2
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               PLANTd  16
      INTEGER PlantSimIndex                                                     PLANTd  17
c                                                                               PLANTd  18
c              Pointer to ranked list of plants of this type                    PLANTd  19
      Kli       = ListPlantsByType(PlantSimIndex)                               PLANTd  20
      NumPlants = <li;NumItems>                                                 PLANTd  21
c                                                                               PLANTd  22
c              Design each plant and its attached fluid circuits,               PLANTd  23
c              starting with the highest ranked.                                PLANTd  24
      DO  LI=NumPlants,1,-1               ! from highest rank to lowest         PLANTd  25
        Jpl = <li;List>                   ! pointer to central plant            PLANTd  26
c              Design all attached fluid circuits, starting at the              PLANTd  27
c              loads and working down to the plant                              PLANTd  28
        Kl2     = <pl;ListFluidCkts>      ! list of fluid ckts                  PLANTd  29
        NumCkts = <l2;NumItems>           ! number of ckts                      PLANTd  30
        DO  L2=NumCkts,1,-1               ! from highest rank to lowest         PLANTd  31
          CALL FluidCircuitAlgs(111, <l2;List>)                                 PLANTd  32
          IF (IwinReturn .ne. 0)  Return                                        PLANTd  33
        ENDDO                                                                   PLANTd  34
c                                                                               PLANTd  35
c              Design the plant                                                 PLANTd  36
        CALL FluidPlant(111, Jpl)                                               PLANTd  37
        IF (IwinReturn .ne. 0)  Return                                          PLANTd  38
c                                                                               PLANTd  39
c              Propagate the plant conditions back upstream to the              PLANTd  40
c              loads                                                            PLANTd  41
        DO  L2=1,NumCkts                  ! from lowest rank to highest         PLANTd  42
          CALL FluidCircuitAlgs(112, <l2;List>)                                 PLANTd  43
          IF (IwinReturn .ne. 0)  Return                                        PLANTd  44
        ENDDO                                                                   PLANTd  45
      ENDDO  ! NumPlants                                                        PLANTd  46
c                                                                               PLANTd  47
c              Increment index to point at the next group of plants             PLANTd  48
      PlantSimIndex = PlantSimIndex + 1                                         PLANTd  49
c                                                                               PLANTd  50
      RETURN                                                                    PLANTd  51
      END                                                                       PLANTd  52
      BLOCK DATA PlantData                                                      PltDat   2
c                                                                               PltDat   3
c              Plant block data                                                 PltDat   4
c                                                                               PltDat   5
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
c                                                                               PltDat   7
      COMMON  /BLRKY / HWBLR                                                    /BLRKY/  2
      INTEGER          HWBLR                                                    /BLRKY/  3
      COMMON  /CHLRKY/ ELCHLR, DBUN, ABSOR, GASABSOR, ENGINE,                   /CHLRKY/ 2
     &                 WaterCool, AirCool                                       /CHLRKY/ 3
      INTEGER          ELCHLR, DBUN, ABSOR, GASABSOR, ENGINE,                   /CHLRKY/ 4
     &                 WaterCool, AirCool                                       /CHLRKY/ 5
      COMMON  /DHWKY / DHWgas, DHWelec, DHWhtpump                               /DHWKY/  2
      INTEGER          DHWgas, DHWelec, DHWhtpump                               /DHWKY/  3
      COMMON  /EMKY  / UtilityMeter, BldgMeter, SubMeter, SellMeter             /EMKY/   2
      INTEGER          UtilityMeter, BldgMeter, SubMeter, SellMeter             /EMKY/   3
      COMMON  /EQKY  / Always, WhenOn, WhenOff, AuxSched,                       /EQKY/   2
     &                 ConstantFlow, VariableFlow, Yes, No                      /EQKY/   3
      INTEGER          Always, WhenOn, WhenOff, AuxSched,                       /EQKY/   4
     &                 ConstantFlow, VariableFlow, Yes, No                      /EQKY/   5
      COMMON  /GENKY / DontRun, TrackElec, TrackThermal, TrackLesser,           /GENKY/  2
     &                 TrackGreater, MaxOutput                                  /GENKY/  3
      INTEGER          DontRun, TrackElec, TrackThermal, TrackLesser,           /GENKY/  4
     &                 TrackGreater, MaxOutput                                  /GENKY/  5
      COMMON /GLHXKY/  ScheduleOrWthFile, VertWell, HorizStraight,              /GLHXKY/ 2
     &                 HorizSlinky                                              /GLHXKY/ 3
      INTEGER          ScheduleOrWthFile, VertWell, HorizStraight,              /GLHXKY/ 4
     &                 HorizSlinky                                              /GLHXKY/ 5
      COMMON  /HXKY  / Counterflow, Parallelflow, CrossflowNoMix,               /HXKY/   2
     &                 CrossflowBothMix, CrossflowDemMix,                       /HXKY/   3
     &                 CrossflowSupMix                                          /HXKY/   4
      INTEGER          Counterflow, Parallelflow, CrossflowNoMix,               /HXKY/   5
     &                 CrossflowBothMix, CrossflowDemMix,                       /HXKY/   6
     &                 CrossflowSupMix                                          /HXKY/   7
      COMMON  /PlntKy/ CHW, Pipe2, loop3, HW, loop5, STM, WLHP, DHW,            /PlntKy/ 2
     &                 CW, Deleted, Pipe2h, WLHPh, COGEN, NoType,               /PlntKy/ 3
     &                 Fixed, OA, Sch, Load,  Zone, Outdoor,                    /PlntKy/ 4
     &                 Standby, Demand, Snap, Scheduled,                        /PlntKy/ 5
     &                 CONSTANT, VARIABLE, ModeText(4),                         /PlntKy/ 6
     &                 OffMode, Floating, HeatMode, CoolMode, ElecMode,         /PlntKy/ 7
     &                 AtCoils, EnterLoop, AtPump,                              /PlntKy/ 8
     &                 INDOORS, OUTDOORS, TUNNEL, UNDERGROUND,                  /PlntKy/ 9
     &                 PRIMARY, SECONDARY,                                      /PlntKy/10
     &                 DIRECT, HX,                                              /PlntKy/11
     &                 Water, Ethylene, Propylene, Brine                        /PlntKy/12
      INTEGER          CHW, Pipe2, loop3, HW, loop5, STM, WLHP, DHW,            /PlntKy/13
     &                 CW, Deleted, Pipe2h, WLHPh, COGEN, NoType,               /PlntKy/14
     &                 Fixed, OA, Sch, Load,  Zone, Outdoor,                    /PlntKy/15
     &                 Standby, Demand, Snap, Scheduled,                        /PlntKy/16
     &                 CONSTANT, VARIABLE, ModeText,                            /PlntKy/17
     &                 OffMode, Floating, HeatMode, CoolMode, ElecMode,         /PlntKy/18
     &                 AtCoils, EnterLoop, AtPump,                              /PlntKy/19
     &                 INDOORS, OUTDOORS, TUNNEL, UNDERGROUND,                  /PlntKy/20
     &                 PRIMARY, SECONDARY,                                      /PlntKy/21
     &                 DIRECT, HX,                                              /PlntKy/22
     &                 Water, Ethylene, Propylene, Brine                        /PlntKy/23
      COMMON  /LDMGKY/ ScheduledEC, OATemp, PeakShaving                         /LDMGKY/ 2
      INTEGER          ScheduledEC, OATemp, PeakShaving                         /LDMGKY/ 3
      COMMON  /MTRKY / STANDARD, HIEFF, PREMIUM                                 /MTRKY/  2
      INTEGER          STANDARD, HIEFF, PREMIUM                                 /MTRKY/  3
      COMMON  /PUMPKY/ OneSpeed, TwoSpeed, VarSpeed, CyclePump,                 /PUMPKY/ 2
     &                 PrimaryPump, SecondaryPump, EquipmentPump                /PUMPKY/ 3
      INTEGER          OneSpeed, TwoSpeed, VarSpeed, CyclePump,                 /PUMPKY/ 4
     &                 PrimaryPump, SecondaryPump, EquipmentPump                /PUMPKY/ 5
      COMMON  /TESKY / ColdTank, HotTank                                        /TESKY/  2
      INTEGER          ColdTank, HotTank                                        /TESKY/  3
      COMMON  /TWRKY / Open, OpenHX, FluidCool,                                 /TWRKY/  2
     &                 Bypass, Speed1, Speed2, SpeedV, Damper,                  /TWRKY/  3
     &                 RunMinCells, RunMaxCells,                                /TWRKY/  4
     &                 ElecPanHtr, NoPanHtr, HWPanHtr,                          /TWRKY/  5
     &                 CycleWithFan, StayOn                                     /TWRKY/  6
      INTEGER          Open, OpenHX, FluidCool,                                 /TWRKY/  7
     &                 Bypass, Speed1, Speed2, SpeedV, Damper,                  /TWRKY/  8
     &                 RunMinCells, RunMaxCells,                                /TWRKY/  9
     &                 ElecPanHtr, NoPanHtr, HWPanHtr,                          /TWRKY/ 10
     &                 CycleWithFan, StayOn                                     /TWRKY/ 11
c                                                                               PltDat  22
c                                                                               PltDat  23
c              set values for various symbols                                   PltDat  24
c              /blrky/                                                          PltDat  25
      DATA  HWBLR                                       /1/                     PltDat  26
c              /chlrky/                                                         PltDat  27
      DATA  ELCHLR, DBUN, ABSOR, GASABSOR, ENGINE       /1,2,3,4,5/             PltDat  28
      DATA  WaterCool, AirCool                          /1,2/                   PltDat  29
c              /dhwky/                                                          PltDat  30
      DATA  DHWgas, DHWelec, DHWhtpump                  /1,2,3/                 PltDat  31
c              /emky/                                                           PltDat  32
      DATA  UtilityMeter,BldgMeter,SubMeter,SellMeter                           PltDat  33
     &                                                  /1,2,3,4/               PltDat  34
c              /eqky/                                                           PltDat  35
      DATA  Always, WhenOn, WhenOff, AuxSched           /1,2,3,4/               PltDat  36
      DATA  ConstantFlow, VariableFlow                  /1,2/                   PltDat  37
      DATA  Yes, No                                     /1,0/                   PltDat  38
c              /genky/                                                          PltDat  39
      DATA  DontRun, TrackElec, TrackThermal,                                   PltDat  40
     &      TrackLesser, TrackGreater, MaxOutput        /0,1,2,3,4,5/           PltDat  41
c              /glhxky/                                                         PltDat  42
      DATA  ScheduleOrWthFile, VertWell, HorizStraight,                         PltDat  43
     &      HorizSlinky                                 /1,2,3,4/               PltDat  44
c              /hxky/                                                           PltDat  45
      DATA  Counterflow, Parallelflow, CrossflowNoMix,                          PltDat  46
     &      CrossflowBothMix, CrossflowDemMix,                                  PltDat  47
     &      CrossflowSupMix                             /1,2,3,4,5,6/           PltDat  48
c              /ldmgky/                                                         PltDat  49
      DATA  ScheduledEC, OATemp, PeakShaving            /1,2,3/                 PltDat  50
c              /PlntKy/                                                         PltDat  51
      DATA  CHW, Pipe2, loop3, HW, loop5, STM           /1,2,3,4,5,6/           PltDat  52
      DATA  WLHP, DHW, CW                               /7,8,9/                 PltDat  53
      DATA  Deleted, Pipe2h, WLHPh, COGEN, NoType       /0,17,18,19,20/         PltDat  54
      DATA  FIXED, OA, SCH, LOAD                        /1,2,3,4/               PltDat  55
      DATA  ZONE, OUTDOOR                               /1,0/                   PltDat  56
      DATA  STANDBY, DEMAND, SNAP, SCHEDULED            /1,2,3,4/               PltDat  57
      DATA  CONSTANT, VARIABLE                          /1,2/                   PltDat  58
      DATA  ModeText                                    /4H Off,4HFlot,         PltDat  59
     &                                                   4HHeat,4HCool/         PltDat  60
      DATA  OffMode, Floating, HeatMode, CoolMode,                              PltDat  61
     &      ElecMode                                    /0,1,3,5,7/             PltDat  62
      DATA  AtCoils, EnterLoop, AtPump                  /1,2,3/                 PltDat  63
      DATA  INDOORS, OUTDOORS, TUNNEL, UNDERGROUND      /1,2,3,4/               PltDat  64
      DATA  PRIMARY, SECONDARY                          /1,2/                   PltDat  65
      DATA  DIRECT, HX                                  /1,2/                   PltDat  66
      DATA  WATER,ETHYLENE,PROPYLENE,BRINE              /1,2,3,4/               PltDat  67
c              /mtrky/                                                          PltDat  68
      DATA  STANDARD, HIEFF, PREMIUM                    /1,2,3/                 PltDat  69
c              /pumpky/                                                         PltDat  70
      DATA  OneSpeed, TwoSpeed, VarSpeed, CyclePump     /1,2,3,4/               PltDat  71
      DATA  PrimaryPump, SecondaryPump, EquipmentPump   /1,2,3/                 PltDat  72
c              /tesky/                                                          PltDat  73
      DATA  ColdTank, HotTank                           /1,2/                   PltDat  74
c              /twrky/                                                          PltDat  75
      DATA  Open, OpenHX, FluidCool                     /1,2,3/                 PltDat  76
      DATA  Bypass, Speed1, Speed2, SpeedV, Damper      /1,2,3,4,5/             PltDat  77
      DATA  RunMinCells, RunMaxCells                    /0,1/                   PltDat  78
      DATA  ElecPanHtr, NoPanHtr, HWPanHtr              /1, 0, -1/              PltDat  79
      DATA  CycleWithFan, StayOn                        /0,1/                   PltDat  80
c                                                                               PltDat  81
      END                                                                       PltDat  82
      FUNCTION EffMotor(HP, Class)                                              EffMtr   2
c                                                                               EffMtr   3
c              Returns a value for motor efficiency based on the size           EffMtr   4
c              of the motor.                                                    EffMtr   5
c                                                                               EffMtr   6
c              Data taken from Table B-13, Appendix B, Non-Residential          EffMtr   7
c              Manual, California Title 24, July 1992.                          EffMtr   8
c                                                                               EffMtr   9
c                                                                               EffMtr  10
c              Class = 1  Standard efficiency                                   EffMtr  11
c                      2  NEMA high efficiency                                  EffMtr  12
c                      3  Premium efficiency                                    EffMtr  13
c                                                                               EffMtr  14
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
c                                                                               EffMtr  16
      INTEGER Class                                                             EffMtr  17
      DIMENSION Eff(4,20)                                                       EffMtr  18
c                                                                               EffMtr  19
c                         Motor     Efficiency Class                            EffMtr  20
c                          HP,    Std.    Hi  Premium                           EffMtr  21
      DATA      Eff  /    .05,   .400,  .400,  .400,                            EffMtr  22
     &                    .083,  .490,  .490,  .490,                            EffMtr  23
     &                    .125,  .550,  .550,  .550,                            EffMtr  24
     &                    .167,  .600,  .600,  .600,                            EffMtr  25
     &                    .250,  .640,  .640,  .640,                            EffMtr  26
     &                    .333,  .660,  .660,  .660,                            EffMtr  27
     &                    .500,  .700,  .760,  .800,                            EffMtr  28
     &                    .750,  .720,  .770,  .840,                            EffMtr  29
     &                   1.0,    .790,  .825,  .855,                            EffMtr  30
     &                   1.5,    .800,  .840,  .855,                            EffMtr  31
     &                   2.5,    .800,  .840,  .855,                            EffMtr  32
     &                   3.9,    .810,  .865,  .875,                            EffMtr  33
     &                   6.9,    .820,  .875,  .902,                            EffMtr  34
     &                  12.9,    .850,  .885,  .917,                            EffMtr  35
     &                  17.9,    .860,  .910,  .910,                            EffMtr  36
     &                  20.9,    .870,  .910,  .924,                            EffMtr  37
     &                  29.9,    .880,  .917,  .930,                            EffMtr  38
     &                  69.9,    .890,  .930,  .941,                            EffMtr  39
     &                 139.9,    .900,  .941,  .950,                            EffMtr  40
     &             1000000.0,    .910,  .950,  .962/                            EffMtr  41
c                                                                               EffMtr  42
      DO  I=1,19                                                                EffMtr  43
        IF (HP .LE. Eff(1,I))  THEN                                             EffMtr  44
          EffMotor = Eff(Class+1,I)                                             EffMtr  45
          RETURN                                                                EffMtr  46
        ENDIF                                                                   EffMtr  47
      ENDDO                                                                     EffMtr  48
      EffMotor = Eff(Class+1,20)                                                EffMtr  49
c                                                                               EffMtr  50
      RETURN                                                                    EffMtr  51
      END                                                                       EffMtr  52
      Subroutine Plant_Initial                                                  PltIni   2
c                                                                               PltIni   3
c              Initializes all common block variables to zero                   PltIni   4
c              in the PLANT code section                                        PltIni   5
c                                                                               PltIni   6
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
c                                                                               PltIni   8
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /COGENn/ CogenMode, CogenIterateIndex, TrackMode,                 /COGEN/  2
     &                 QCogenWaste, xCOGEN                                      /COGEN/  3
      INTEGER          CogenMode, CogenIterateIndex, TrackMode                  /COGEN/  4
      COMMON  /EqCtrl/ LengthLoadRange, xEqCtrl                                 /EqCtrl/ 2
      COMMON  /HRREP / Irb, Ihrp, Lrb, Lhrp, Nrb, Nhrp, IVTLIM(3,50),           HRr      1
     &                 IGRPtr, IBRPtr, IRSch, IRSchT(5),                        HRr      2
     &                 NHRTyp(3), ITBUF(3), ITBUFB(3), ITBUFE(3),               HRr      3
     &                 IHREOF, ICDFLG                                           HRr      4
      COMMON  /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                         /IAX/    2
      COMMON  /LDMGMT/ LengthCtrlGroup, xLDMGMT                                 /LDMGMT/ 2
      COMMON  /ListsP/ ListPlantsByType(10), Num2ndCoolants,                    /ListsP/ 2
     &                 xListsP                                                  /ListsP/ 3
      COMMON  /MtrDat/ ListRankedSteam, ListRankedCHW,                          /MtrDat/ 2
     &                 ListRankedElec,  ListRankedFuel,                         /MtrDat/ 3
     &                 ListRankedSale,  ListRankedH2O,                          /MtrDat/ 4
     &                 xMtrDat                                                  /MtrDat/ 5
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
      COMMON  /SimDat/ NumMechIter, NumMechFail, xSimDat                        /SimDat/ 2
c                                                                               PltIni  19
c                                                                               PltIni  20
c ============ ZERO ALL THE COMMON BLOCKS ====================================  PltIni  21
c                                                                               PltIni  22
c              /COGEN/                                                          PltIni  23
      CALL ZeroBlock(CogenMode,           xCOGEN)                               PltIni  24
c              /EqCtrl/                                                         PltIni  25
      CALL ZeroBlock(LengthLoadRange,     xEqCtrl)                              PltIni  26
c              /LDMGMT/                                                         PltIni  27
      CALL ZeroBlock(LengthCtrlGroup,     xLDMGMT)                              PltIni  28
c              /ListsP/                                                         PltIni  29
      CALL ZeroBlock(ListPlantsByType(1), xListsP)                              PltIni  30
c              /MtrDat/                                                         PltIni  31
      CALL ZeroBlock(ListRankedSteam,     xMtrDat)                              PltIni  32
c              /PTRPLT/                                                         PltIni  33
      CALL ZeroBlock(Ipm,                 xPTRPLT)                              PltIni  34
c              /SimDat/                                                         PltIni  35
      CALL ZeroBlock(NumMechIter,         xSimDat)                              PltIni  36
c                                                                               PltIni 118
      RETURN                                                                    PltIni 119
      END                                                                       PltIni 120
      SUBROUTINE PlantReports(Mode)                                             RfgRep   2
c                                                                               RfgRep   3
c              Controls the printing of plant reports                           RfgRep   4
c                                                                               RfgRep   5
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /ListsP/ ListPlantsByType(10), Num2ndCoolants,                    /ListsP/ 2
     &                 xListsP                                                  /ListsP/ 3
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
c                                                                               RfgRep  10
      INTEGER PlantSimIndex                                                     RfgRep  11
c                                                                               RfgRep  12
c              Pointer to ranked list of refrigeration plants                   RfgRep  13
      NumPlants = <li;NumItems>                                                 RfgRep  14
c                                                                               RfgRep  15
      SELECT CASE (Mode)                                                        RfgRep  16
c                                                                               RfgRep  17
c                                                                               RfgRep  18
c ============ REPORT ORDER =================================================== RfgRep  19
      CASE (52)                                                                 RfgRep  20
c                                                                               RfgRep  21
c              Meters and generators                                            RfgRep  22
      Call Meters(Mode)                                                         RfgRep  23
C                                                                               RfgRep  24
c              For each waterside plant, create reports in the                  RfgRep  25
c              order simulated from plant to load                               RfgRep  26
      PlantSimIndex = 1                                                         RfgRep  27
      DO WHILE (ListPlantsByType(PlantSimIndex) .GT. 0)                         RfgRep  28
c              Pointer to ranked list of plants of this type                    RfgRep  29
        Kli = ListPlantsByType(PlantSimIndex)                                   RfgRep  30
        DO  LI=1,<li;NumItems>                                                  RfgRep  31
          Jpl = <li;List>                ! pointer to plant                     RfgRep  32
          CALL FluidPlant(Mode, Jpl)                                            RfgRep  33
c                                                                               RfgRep  34
c              Fluid circuits                                                   RfgRep  35
          Kl2 = <pl;ListFluidCkts>       ! list of attached fluid ckts          RfgRep  36
          DO  L2=1,<l2;NumItems>         ! lowest to highest rank ckt           RfgRep  37
            CALL FluidCircuitAlgs(Mode, <l2;List>)                              RfgRep  38
          ENDDO                                                                 RfgRep  39
        ENDDO                                                                   RfgRep  40
c                                                                               RfgRep  41
c              Process loads                                                    RfgRep  42
        IF (Ipq .gt. 0)  THEN                                                   RfgRep  43
          Jpq = Ipq                                                             RfgRep  44
          DO WHILE (Jpq .GT. 0)                                                 RfgRep  45
            IF (<pq:LOOP> .eq. Jpl)  CALL ProcessAlgs(Mode, Jpq)                RfgRep  46
            Jpq = <pq;Next>                                                     RfgRep  47
          ENDDO                                                                 RfgRep  48
        ENDIF                                                                   RfgRep  49
c                                                                               RfgRep  50
        PlantSimIndex = PlantSimIndex + 1                                       RfgRep  51
      ENDDO  ! ListPlantsByType                                                 RfgRep  52
c                                                                               RfgRep  53
      END SELECT  ! Mode                                                        RfgRep  54
c                                                                               RfgRep  55
      Return                                                                    RfgRep  56
      End                                                                       RfgRep  57
      SUBROUTINE Plant_Sort                                                     PltSrt   2
c                                                                               PltSrt   3
c              Determines the simulation order of all plant                     PltSrt   4
c              components                                                       PltSrt   5
c                                                                               PltSrt   6
c                                                                               PltSrt   7
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /ListsP/ ListPlantsByType(10), Num2ndCoolants,                    /ListsP/ 2
     &                 xListsP                                                  /ListsP/ 3
      COMMON  /MtrDat/ ListRankedSteam, ListRankedCHW,                          /MtrDat/ 2
     &                 ListRankedElec,  ListRankedFuel,                         /MtrDat/ 3
     &                 ListRankedSale,  ListRankedH2O,                          /MtrDat/ 4
     &                 xMtrDat                                                  /MtrDat/ 5
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               PltSrt  15
      INTEGER PlantType, PlantSimIndex, Rank, Save                              PltSrt  16
      LOGICAL AllRanksFound, RankFound                                          PltSrt  17
c                                                                               PltSrt  18
c                                                                               PltSrt  19
c ============ METERS ========================================================= PltSrt  20
c                                                                               PltSrt  21
c              Rank all meters in order of utility to submeter                  PltSrt  22
      AllRanksFound = .FALSE.                                                   PltSrt  23
      DO WHILE (.NOT. AllRanksFound)                                            PltSrt  24
        AllRanksFound = .TRUE.                                                  PltSrt  25
        Jme = Ime                                                               PltSrt  26
        DO WHILE (Jme .GT. 0)                                                   PltSrt  27
          IF (<me;Rank> .EQ. 0)  THEN                                           PltSrt  28
            IF (<me:TRUNK-METER> .EQ. 0)  THEN                                  PltSrt  29
              <me;Rank>     = 1                                                 PltSrt  30
              <me;Utility>  = Jme                                               PltSrt  31
              AllRanksFound = .FALSE.                                           PltSrt  32
            ELSE                                                                PltSrt  33
              Save = Jme                                                        PltSrt  34
              Jme  = <me:TRUNK-METER>                                           PltSrt  35
              Rank = <me;Rank>                                                  PltSrt  36
              JmeU = <me;Utility>                                               PltSrt  37
              Jme  = Save                                                       PltSrt  38
              IF (Rank .GT. 0)  THEN                                            PltSrt  39
                <me;Rank>     = Rank + 1                                        PltSrt  40
                <me;Utility>  = JmeU                                            PltSrt  41
                AllRanksFound = .FALSE.                                         PltSrt  42
              ENDIF                                                             PltSrt  43
            ENDIF  ! me:TRUNK-METER                                             PltSrt  44
          ENDIF  ! me;Rank                                                      PltSrt  45
          Jme = <me;Next>                                                       PltSrt  46
        ENDDO  ! Jme                                                            PltSrt  47
      ENDDO    ! AllRanksFound                                                  PltSrt  48
c                                                                               PltSrt  49
c              Create a list of all steam meters in ascending rank.  More       PltSrt  50
c              than one meter may have the same rank.                           PltSrt  51
      Rank      = 0                                                             PltSrt  52
      RankFound = .TRUE.                                                        PltSrt  53
      DO WHILE (RankFound)                                                      PltSrt  54
        Rank      = Rank + 1                                                    PltSrt  55
        RankFound = .FALSE.                                                     PltSrt  56
        Jme = Ime                                                               PltSrt  57
        DO WHILE (Jme .GT. 0)                                                   PltSrt  58
          IF (<me:TYPE> .EQ. 1  .AND.  <me;Rank> .EQ. Rank)  THEN               PltSrt  59
c                            ^ steam                                            PltSrt  60
c                 a meter of the correct rank has been found                    PltSrt  61
            RankFound = .TRUE.                                                  PltSrt  62
            CALL ListAdd(ListRankedSteam, Jme)                                  PltSrt  63
          ENDIF                                                                 PltSrt  64
          Jme = <me;Next>                                                       PltSrt  65
        ENDDO  ! Jme                                                            PltSrt  66
      ENDDO    ! RankFound                                                      PltSrt  67
c              repeat for CHW                                                   PltSrt  68
      Rank      = 0                                                             PltSrt  69
      RankFound = .TRUE.                                                        PltSrt  70
      DO WHILE (RankFound)                                                      PltSrt  71
        Rank      = Rank + 1                                                    PltSrt  72
        RankFound = .FALSE.                                                     PltSrt  73
        Jme = Ime                                                               PltSrt  74
        DO WHILE (Jme .GT. 0)                                                   PltSrt  75
          IF (<me:TYPE> .EQ. 2  .AND.  <me;Rank> .EQ. Rank)  THEN               PltSrt  76
c                            ^ chw                                              PltSrt  77
            RankFound = .TRUE.                                                  PltSrt  78
            CALL ListAdd(ListRankedCHW, Jme)                                    PltSrt  79
          ENDIF                                                                 PltSrt  80
          Jme = <me;Next>                                                       PltSrt  81
        ENDDO  ! Jme                                                            PltSrt  82
      ENDDO    ! RankFound                                                      PltSrt  83
c              repeat for electric                                              PltSrt  84
      Rank      = 0                                                             PltSrt  85
      RankFound = .TRUE.                                                        PltSrt  86
      DO WHILE (RankFound)                                                      PltSrt  87
        Rank      = Rank + 1                                                    PltSrt  88
        RankFound = .FALSE.                                                     PltSrt  89
        Jme = Ime                                                               PltSrt  90
        DO WHILE (Jme .GT. 0)                                                   PltSrt  91
          IF (<me:TYPE> .EQ. 3  .AND.  <me;Rank> .EQ. Rank)  THEN               PltSrt  92
c                            ^ elec                                             PltSrt  93
            RankFound = .TRUE.                                                  PltSrt  94
            CALL ListAdd(ListRankedElec, Jme)                                   PltSrt  95
          ENDIF                                                                 PltSrt  96
          Jme = <me;Next>                                                       PltSrt  97
        ENDDO  ! Jme                                                            PltSrt  98
      ENDDO    ! RankFound                                                      PltSrt  99
c              NumElecMeters is used when writing output to economics           PltSrt 100
      IF (ListRankedElec .GT. 0)  THEN                                          PltSrt 101
        Kli = ListRankedElec                                                    PltSrt 102
        NumElecMeters = <li;NumItems>                                           PltSrt 103
      ELSE                                                                      PltSrt 104
        NumElecMeters = 0                                                       PltSrt 105
      ENDIF                                                                     PltSrt 106
c              repeat for fuel                                                  PltSrt 107
      Rank      = 0                                                             PltSrt 108
      RankFound = .TRUE.                                                        PltSrt 109
      DO WHILE (RankFound)                                                      PltSrt 110
        Rank      = Rank + 1                                                    PltSrt 111
        RankFound = .FALSE.                                                     PltSrt 112
        Jme = Ime                                                               PltSrt 113
        DO WHILE (Jme .GT. 0)                                                   PltSrt 114
          IF (<me:TYPE> .EQ. 4  .AND.  <me;Rank> .EQ. Rank)  THEN               PltSrt 115
c                            ^ fuel                                             PltSrt 116
            RankFound = .TRUE.                                                  PltSrt 117
            CALL ListAdd(ListRankedFuel, Jme)                                   PltSrt 118
          ENDIF                                                                 PltSrt 119
          Jme = <me;Next>                                                       PltSrt 120
        ENDDO  ! Jme                                                            PltSrt 121
      ENDDO    ! RankFound                                                      PltSrt 122
c              repeat for electric sale                                         PltSrt 123
      Rank      = 0                                                             PltSrt 124
      RankFound = .TRUE.                                                        PltSrt 125
      DO WHILE (RankFound)                                                      PltSrt 126
        Rank      = Rank + 1                                                    PltSrt 127
        RankFound = .FALSE.                                                     PltSrt 128
        Jme = Ime                                                               PltSrt 129
        DO WHILE (Jme .GT. 0)                                                   PltSrt 130
          IF (<me:TYPE> .EQ. 5  .AND.  <me;Rank> .EQ. Rank)  THEN               PltSrt 131
c                            ^ elec sale                                        PltSrt 132
            RankFound = .TRUE.                                                  PltSrt 133
            CALL ListAdd(ListRankedSale, Jme)                                   PltSrt 134
          ENDIF                                                                 PltSrt 135
          Jme = <me;Next>                                                       PltSrt 136
        ENDDO  ! Jme                                                            PltSrt 137
      ENDDO    ! RankFound                                                      PltSrt 138
c              repeat for H2O                                                   PltSrt 139
      Rank      = 0                                                             PltSrt 140
      RankFound = .TRUE.                                                        PltSrt 141
      DO WHILE (RankFound)                                                      PltSrt 142
        Rank      = Rank + 1                                                    PltSrt 143
        RankFound = .FALSE.                                                     PltSrt 144
        Jme = Ime                                                               PltSrt 145
        DO WHILE (Jme .GT. 0)                                                   PltSrt 146
          IF (<me:TYPE> .EQ. 6  .AND.  <me;Rank> .EQ. Rank)  THEN               PltSrt 147
c                            ^ h2o                                              PltSrt 148
            RankFound = .TRUE.                                                  PltSrt 149
            CALL ListAdd(ListRankedH2O, Jme)                                    PltSrt 150
          ENDIF                                                                 PltSrt 151
          Jme = <me;Next>                                                       PltSrt 152
        ENDDO  ! Jme                                                            PltSrt 153
      ENDDO    ! RankFound                                                      PltSrt 154
c                                                                               PltSrt 155
c                                                                               PltSrt 156
c ============ FLUID CIRCUITS ================================================= PltSrt 157
c                                                                               PltSrt 158
c              Determine the rank of all circuits.  Trunk circuits first        PltSrt 159
      AllRanksFound = .FALSE.                                                   PltSrt 160
      DO WHILE (.NOT. AllRanksFound)                                            PltSrt 161
        AllRanksFound = .TRUE.                                                  PltSrt 162
        Jfc = Ifc                                                               PltSrt 163
        DO WHILE (Jfc .GT. 0)                                                   PltSrt 164
          IF (<fc;Rank> .EQ. 0)  THEN                                           PltSrt 165
            SELECT CASE (<fc:ATTACH-TO>)                                        PltSrt 166
              CASE (1)  ! plant                                                 PltSrt 167
                <fc;Rank>     = 1                                               PltSrt 168
                AllRanksFound = .FALSE.                                         PltSrt 169
              CASE (2)  ! trunk circuit                                         PltSrt 170
                Save = Jfc                                                      PltSrt 171
                Jfc  = <fc:TRUNK-CKT>                                           PltSrt 172
                Rank = <fc;Rank>                                                PltSrt 173
                Jfc  = Save                                                     PltSrt 174
                IF (Rank .GT. 0)  THEN                                          PltSrt 175
                  <fc;Rank> = Rank + 1                                          PltSrt 176
                  AllRanksFound = .FALSE.                                       PltSrt 177
                ENDIF                                                           PltSrt 178
            END SELECT                                                          PltSrt 179
          ENDIF  ! fc;Rank                                                      PltSrt 180
          Jfc = <fc;Next>                                                       PltSrt 181
        ENDDO  ! Jfc                                                            PltSrt 182
      ENDDO    ! AllRanksFound                                                  PltSrt 183
c                                                                               PltSrt 184
c              Create a list of all circuits attached to a plant, both          PltSrt 185
c              supply and return, in ascending rank                             PltSrt 186
      Jpl = Ipl                                                                 PltSrt 187
      DO WHILE (Jpl .GT. 0)                                                     PltSrt 188
        Rank      = 0                                                           PltSrt 189
        RankFound = .TRUE.                                                      PltSrt 190
        DO WHILE (RankFound)                                                    PltSrt 191
          Rank      = Rank + 1                                                  PltSrt 192
          RankFound = .FALSE.                                                   PltSrt 193
          Jfc = Ifc                                                             PltSrt 194
          DO WHILE (Jfc .GT. 0)                                                 PltSrt 195
            IF (<fc:PLANT> .EQ. Jpl  .AND.  <fc;Rank> .EQ. Rank)  THEN          PltSrt 196
c                 a circuit of the correct rank has been found                  PltSrt 197
              RankFound = .TRUE.                                                PltSrt 198
              CALL ListAdd(<pl;ListFluidCkts>, Jfc)                             PltSrt 199
            ENDIF                                                               PltSrt 200
            Jfc = <fc;Next>                                                     PltSrt 201
          ENDDO  ! Jfc                                                          PltSrt 202
        ENDDO    ! RankFound                                                    PltSrt 203
        Jpl = <pl;Next>                                                         PltSrt 204
      ENDDO  ! Jpl                                                              PltSrt 205
c                                                                               PltSrt 206
c                                                                               PltSrt 207
c ============ PLANTS ========================================================= PltSrt 208
c                                                                               PltSrt 209
c              First, determine the rank of all plants.                         PltSrt 210
c             Now all higher-ranked plants                                      PltSrt 211
      AllRanksFound = .FALSE.                                                   PltSrt 212
      DO WHILE (.NOT. AllRanksFound)                                            PltSrt 213
        AllRanksFound = .TRUE.                                                  PltSrt 214
        Jpl = Ipl                                                               PltSrt 215
        DO WHILE (Jpl .GT. 0)                                                   PltSrt 216
          IF (<pl;Rank> .EQ. 0)  THEN                                           PltSrt 217
            SELECT CASE (<pl:SUBTYPE>)                                          PltSrt 218
              CASE (1)  ! Primary                                               PltSrt 219
                <pl;Rank>     = 1                                               PltSrt 220
                AllRanksFound = .FALSE.                                         PltSrt 221
              CASE (2)  ! Secondary                                             PltSrt 222
                Save = Jpl                                                      PltSrt 223
                Jpl  = <pl:PRIMARY-PLANT>                                       PltSrt 224
                Rank = <pl;Rank>                                                PltSrt 225
                Jpl1 = <pl;1stRankPlant>                                        PltSrt 226
                Jpl  = Save                                                     PltSrt 227
                IF (Rank .GT. 0)  THEN                                          PltSrt 228
                  <pl;Rank>         = Rank + 1                                  PltSrt 229
                  <pl;1stRankPlant> = Jpl1                                      PltSrt 230
                  AllRanksFound     = .FALSE.                                   PltSrt 231
                ENDIF                                                           PltSrt 232
            END SELECT                                                          PltSrt 233
          ENDIF  ! pl;Rank                                                      PltSrt 234
          Jpl = <pl;Next>                                                       PltSrt 235
        ENDDO  ! Jpl                                                            PltSrt 236
      ENDDO    ! AllRanksFound                                                  PltSrt 237
c                                                                               PltSrt 238
c              For each type of plant (CHW, HW, etc.), create a list            PltSrt 239
c              of ranked plants, and store the lists in the order in            PltSrt 240
c              which the different plant types will be simulated                PltSrt 241
      IF (Npl .GT. 0)  THEN                                                     PltSrt 242
        PlantSimIndex = 1                                                       PltSrt 243
c              Secondary coolants                                               PltSrt 244
        PlantType = 3                                                           PltSrt 245
        Call CreateListOfPlants                                                 PltSrt 246
        IF (ListPlantsByType(1) .GT. 0)  Num2ndCoolants = 1                     PltSrt 247
c              CHW                                                              PltSrt 248
        PlantType = 1                                                           PltSrt 249
        Call CreateListOfPlants                                                 PltSrt 250
c              2-pipe                                                           PltSrt 251
        PlantType = 2                                                           PltSrt 252
        Call CreateListOfPlants                                                 PltSrt 253
c              DHW                                                              PltSrt 254
        PlantType = 8                                                           PltSrt 255
        Call CreateListOfPlants                                                 PltSrt 256
c              HW                                                               PltSrt 257
        PlantType = 4                                                           PltSrt 258
        Call CreateListOfPlants                                                 PltSrt 259
c              WLHP                                                             PltSrt 260
        PlantType = 7                                                           PltSrt 261
        Call CreateListOfPlants                                                 PltSrt 262
c              CW                                                               PltSrt 263
        PlantType = 9                                                           PltSrt 264
        Call CreateListOfPlants                                                 PltSrt 265
      ENDIF                                                                     PltSrt 266
c                                                                               PltSrt 267
c              Check components for circularities                               PltSrt 268
c              meters                                                           PltSrt 269
      Jme = Ime                                                                 PltSrt 270
      DO WHILE (Jme .GT. 0)                                                     PltSrt 271
        IF (<me;Rank> .EQ. 0)  THEN                                             PltSrt 272
          CALL MSGSIM(-1,II,II,II,II)                                           PltSrt 273
          WRITE (IOUTPT,9001)  (<me:NAME>,II=1,8)                               PltSrt 274
          CALL MessageBox( NULL,                                                PltSrt 275
     &      'A component has a circularity'//char(10)//char(13)//               PltSrt 276
     &      'in its attachments'//char(0),                                      PltSrt 277
     &      'Plant Errors'//char(0),                                            PltSrt 278
     &      MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                PltSrt 279
          IwinReturn = 1                                                        PltSrt 280
        ENDIF                                                                   PltSrt 281
        Jme = <me;Next>                                                         PltSrt 282
      ENDDO                                                                     PltSrt 283
c              fluid circuits                                                   PltSrt 284
      Jfc = Ifc                                                                 PltSrt 285
      DO WHILE (Jfc .GT. 0)                                                     PltSrt 286
        IF (<fc;Rank> .EQ. 0)  THEN                                             PltSrt 287
          CALL MSGSIM(-1,II,II,II,II)                                           PltSrt 288
C ?? enable once a fluid circuit is a separate component                        PltSrt 289
C ??          WRITE (IOUTPT,9001)  (<fc:NAME>,II=1,8)                           PltSrt 290
          CALL MessageBox( NULL,                                                PltSrt 291
     &      'A component has a circularity'//char(10)//char(13)//               PltSrt 292
     &      'in its attachments'//char(0),                                      PltSrt 293
     &      'Plant Errors'//char(0),                                            PltSrt 294
     &      MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                PltSrt 295
          IwinReturn = 1                                                        PltSrt 296
        ENDIF                                                                   PltSrt 297
        Jfc = <fc;Next>                                                         PltSrt 298
      ENDDO                                                                     PltSrt 299
c              plants                                                           PltSrt 300
      Jpl = Ipl                                                                 PltSrt 301
      DO WHILE (Jpl .GT. 0)                                                     PltSrt 302
        IF (<pl;Rank> .EQ. 0)  THEN                                             PltSrt 303
          CALL MSGSIM(-1,II,II,II,II)                                           PltSrt 304
          WRITE (IOUTPT,9001)  (<pl:NAME>,II=1,8)                               PltSrt 305
          CALL MessageBox( NULL,                                                PltSrt 306
     &      'A component has a circularity'//char(10)//char(13)//               PltSrt 307
     &      'in its attachments'//char(0),                                      PltSrt 308
     &      'Plant Errors'//char(0),                                            PltSrt 309
     &      MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                PltSrt 310
          IwinReturn = 1                                                        PltSrt 311
        ENDIF                                                                   PltSrt 312
        Jpl = <pl;Next>                                                         PltSrt 313
      ENDDO                                                                     PltSrt 314
c                                                                               PltSrt 315
      RETURN                                                                    PltSrt 316
c                                                                               PltSrt 317
c              Message formats                                                  PltSrt 318
 9001 FORMAT(14X,'A circular attachment was found for: ',8A4)                   PltSrt 319
c                                                                               PltSrt 320
      CONTAINS                                                                  PltSrt 321
c ============== CreateListOfPlants =========================================== PltSrt 322
      Subroutine CreateListOfPlants                                             PltSrt 323
c                                                                               PltSrt 324
c              Create a ranked list of plants of a given type.  Note            PltSrt 325
c              that more than one plant may have the same rank.                 PltSrt 326
      Rank      = 0                                                             PltSrt 327
      RankFound = .TRUE.                                                        PltSrt 328
c              Pointer to list                                                  PltSrt 329
      Kli = 0                                                                   PltSrt 330
      DO WHILE (RankFound)                                                      PltSrt 331
        Rank      = Rank + 1                                                    PltSrt 332
        RankFound = .FALSE.                                                     PltSrt 333
        Jpl = Ipl                                                               PltSrt 334
        DO WHILE (Jpl .GT. 0)                                                   PltSrt 335
          IF (<pl:TYPE> .EQ. PlantType .AND. <pl;Rank> .EQ. Rank) THEN          PltSrt 336
c              a plant of the correct type and rank has been found              PltSrt 337
            RankFound = .TRUE.                                                  PltSrt 338
            CALL ListAdd(Kli, Jpl)                                              PltSrt 339
          ENDIF                                                                 PltSrt 340
          Jpl = <pl;Next>                                                       PltSrt 341
        ENDDO  ! Jpl                                                            PltSrt 342
      ENDDO    ! RankFound                                                      PltSrt 343
c              store the pointer to the list of plants                          PltSrt 344
      IF (Kli .GT. 0)  THEN                                                     PltSrt 345
        ListPlantsByType(PlantSimIndex) = Kli                                   PltSrt 346
        PlantSimIndex = PlantSimIndex + 1                                       PltSrt 347
      ENDIF                                                                     PltSrt 348
c                                                                               PltSrt 349
      End Subroutine CreateListOfPlants                                         PltSrt 350
c                                                                               PltSrt 351
      END                                                                       PltSrt 352
      SUBROUTINE Plant_Statistics(Mode)                                         PltSta   2
c                                                                               PltSta   3
      dummy = mode                                                              PltSta   4
c                                                                               PltSta   5
      RETURN                                                                    PltSta   6
      END                                                                       PltSta   7
      SUBROUTINE H2OSetup(Jfl)                                                  Fluid    2
c                                                                               Fluid    3
c              Sets up a fluid for use in a central plant                       Fluid    4
c                                                                               Fluid    5
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
c                                                                               Fluid    9
       <fl:PCT-FT-FREEZE>  = Jcurve(<fl:PCT-FT-FREEZE>)                         Fluid   10
       <fl:DENS-FT&PCT>    = Jcurve(<fl:DENS-FT&PCT>)                           Fluid   11
       <fl:VISC-FT&PCT>    = Jcurve(<fl:VISC-FT&PCT>)                           Fluid   12
       <fl:CP-FT&PCT>      = Jcurve(<fl:CP-FT&PCT>)                             Fluid   13
       <fl:COND-FT&PCT>    = Jcurve(<fl:COND-FT&PCT>)                           Fluid   14
       <fl:DENS-FT&PCT-H>  = Jcurve(<fl:DENS-FT&PCT-H>)                         Fluid   15
       <fl:VISC-FT&PCT-H>  = Jcurve(<fl:VISC-FT&PCT-H>)                         Fluid   16
       <fl:CP-FT&PCT-H>    = Jcurve(<fl:CP-FT&PCT-H>)                           Fluid   17
       <fl:COND-FT&PCT-H>  = Jcurve(<fl:COND-FT&PCT-H>)                         Fluid   18
c                                                                               Fluid   19
c              Check for discontinuities                                        Fluid   20
c              density                                                          Fluid   21
       IF (<fl:DENS-FT&PCT-H> .GT. 0.)  THEN                                    Fluid   22
         Jcv  = <fl:DENS-FT&PCT-H>                                              Fluid   23
         Tmin = <cv:INPUT-MIN-1>                                                Fluid   24
         Jcv  = <fl:DENS-FT&PCT>                                                Fluid   25
         Tmax = <cv:INPUT-MAX-1>                                                Fluid   26
         IF (ABS(Tmax-Tmin) .LT. 2.)  THEN                                      Fluid   27
           CALL MSGSIM(-2,II,II,II,II)                                          Fluid   28
           WRITE (IOUTPT, 9001) (<fl:NAME>,II=1,8),                             Fluid   29
     &                          (<cv:NAME>,II=1,8)                              Fluid   30
           Jcv  = <fl:DENS-FT&PCT-H>                                            Fluid   31
           WRITE (IOUTPT, 9002) (<cv:NAME>,II=1,8)                              Fluid   32
         ENDIF                                                                  Fluid   33
       ENDIF                                                                    Fluid   34
c              viscosity                                                        Fluid   35
       IF (<fl:VISC-FT&PCT-H> .GT. 0.)  THEN                                    Fluid   36
         Jcv  = <fl:VISC-FT&PCT-H>                                              Fluid   37
         Tmin = <cv:INPUT-MIN-1>                                                Fluid   38
         Jcv  = <fl:VISC-FT&PCT>                                                Fluid   39
         Tmax = <cv:INPUT-MAX-1>                                                Fluid   40
         IF (ABS(Tmax-Tmin) .LT. 2.)  THEN                                      Fluid   41
           CALL MSGSIM(-2,II,II,II,II)                                          Fluid   42
           WRITE (IOUTPT, 9001) (<fl:NAME>,II=1,8),                             Fluid   43
     &                          (<cv:NAME>,II=1,8)                              Fluid   44
           Jcv  = <fl:VISC-FT&PCT-H>                                            Fluid   45
           WRITE (IOUTPT, 9002) (<cv:NAME>,II=1,8)                              Fluid   46
         ENDIF                                                                  Fluid   47
       ENDIF                                                                    Fluid   48
c              specific heat                                                    Fluid   49
       IF (<fl:CP-FT&PCT-H> .GT. 0.)  THEN                                      Fluid   50
         Jcv  = <fl:CP-FT&PCT-H>                                                Fluid   51
         Tmin = <cv:INPUT-MIN-1>                                                Fluid   52
         Jcv  = <fl:CP-FT&PCT>                                                  Fluid   53
         Tmax = <cv:INPUT-MAX-1>                                                Fluid   54
         IF (ABS(Tmax-Tmin) .LT. 2.)  THEN                                      Fluid   55
           CALL MSGSIM(-2,II,II,II,II)                                          Fluid   56
           WRITE (IOUTPT, 9001) (<fl:NAME>,II=1,8),                             Fluid   57
     &                          (<cv:NAME>,II=1,8)                              Fluid   58
           Jcv  = <fl:CP-FT&PCT-H>                                              Fluid   59
           WRITE (IOUTPT, 9002) (<cv:NAME>,II=1,8)                              Fluid   60
         ENDIF                                                                  Fluid   61
       ENDIF                                                                    Fluid   62
c              conductivity                                                     Fluid   63
       IF (<fl:COND-FT&PCT-H> .GT. 0.)  THEN                                    Fluid   64
         Jcv  = <fl:COND-FT&PCT-H>                                              Fluid   65
         Tmin = <cv:INPUT-MIN-1>                                                Fluid   66
         Jcv  = <fl:COND-FT&PCT>                                                Fluid   67
         Tmax = <cv:INPUT-MAX-1>                                                Fluid   68
         IF (ABS(Tmax-Tmin) .LT. 2.)  THEN                                      Fluid   69
           CALL MSGSIM(-2,II,II,II,II)                                          Fluid   70
           WRITE (IOUTPT, 9001) (<fl:NAME>,II=1,8),                             Fluid   71
     &                          (<cv:NAME>,II=1,8)                              Fluid   72
           Jcv  = <fl:COND-FT&PCT-H>                                            Fluid   73
           WRITE (IOUTPT, 9002) (<cv:NAME>,II=1,8)                              Fluid   74
         ENDIF                                                                  Fluid   75
       ENDIF                                                                    Fluid   76
c                                                                               Fluid   77
       RETURN                                                                   Fluid   78
                                                                                Fluid   79
c                                                                               Fluid   80
c              Message formats                                                  Fluid   81
 9001 FORMAT(                                                                   Fluid   82
     &14x,'FLUID: ',8A4,' has inconsistent limits'                     /        Fluid   83
     &14x,'between the low and high temperature curves.'               /        Fluid   84
     &14x,'The MAX-T of ',8A4,' should be at least 2F'                 )        Fluid   85
 9002 FORMAT(                                                                   Fluid   86
     &14x,'different than the MIN-T of ',8A4                           )        Fluid   87
c                                                                               Fluid   88
       END                                                                      Fluid   89
       SUBROUTINE H2OProp_fT(Jpl, Tbulk)                                        Fluid   90
c                                                                               Fluid   91
c              Calculates the properties of a fluid based                       Fluid   92
c              on the bulk temperature of the plant                             Fluid   93
c                                                                               Fluid   94
c              Jpl      Pointer to the plant                                    Fluid   95
c              Tbulk    Bulk temperature                                        Fluid   96
c                                                                               Fluid   97
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
c                                                                               Fluid  100
c              Pointer to fluid                                                 Fluid  101
      Jfl = <pl:FLUID>                                                          Fluid  102
c                                                                               Fluid  103
c              Density                                                          Fluid  104
      IF (<fl:DENS-FT&PCT-H> .EQ. 0)  THEN                                      Fluid  105
        <pl.Dens> = Curve(Jfl, <fl:DENS-FT&PCT>, Tbulk, <pl;PctConc>)           Fluid  106
      ELSE                                                                      Fluid  107
        <pl.Dens> = CurveSpline(1, Jfl, <fl:DENS-FT&PCT>,                       Fluid  108
     &                          <fl:DENS-FT&PCT-H>, Tbulk, <pl;PctConc>)        Fluid  109
      ENDIF                                                                     Fluid  110
c                                                                               Fluid  111
c              Viscosity                                                        Fluid  112
      IF (<fl:VISC-FT&PCT-H> .EQ. 0)  THEN                                      Fluid  113
        <pl.Visc> = Curve(Jfl, <fl:VISC-FT&PCT>, Tbulk, <pl;PctConc>)           Fluid  114
      ELSE                                                                      Fluid  115
        <pl.Visc> = CurveSpline(1, Jfl, <fl:VISC-FT&PCT>,                       Fluid  116
     &                          <fl:VISC-FT&PCT-H>, Tbulk, <pl;PctConc>)        Fluid  117
      ENDIF                                                                     Fluid  118
c              convert from log(centipoise) to lbm/(ft-s)                       Fluid  119
      <pl.Visc> = (10.**<pl.Visc>) * 6.71955E-4                                 Fluid  120
c                                                                               Fluid  121
c              Specific Heat                                                    Fluid  122
      IF (<fl:CP-FT&PCT-H> .EQ. 0)  THEN                                        Fluid  123
        <pl.Cp> = Curve(Jfl, <fl:CP-FT&PCT>, Tbulk, <pl;PctConc>)               Fluid  124
      ELSE                                                                      Fluid  125
        <pl.Cp> = CurveSpline(1, Jfl, <fl:CP-FT&PCT>,                           Fluid  126
     &                          <fl:CP-FT&PCT-H>, Tbulk, <pl;PctConc>)          Fluid  127
      ENDIF                                                                     Fluid  128
c                                                                               Fluid  129
c              Conductivity                                                     Fluid  130
      IF (<fl:COND-FT&PCT-H> .EQ. 0)  THEN                                      Fluid  131
        <pl.Cond> = Curve(Jfl, <fl:COND-FT&PCT>, Tbulk, <pl;PctConc>)           Fluid  132
      ELSE                                                                      Fluid  133
        <pl.Cond> = CurveSpline(1, Jfl, <fl:COND-FT&PCT>,                       Fluid  134
     &                          <fl:COND-FT&PCT-H>, Tbulk, <pl;PctConc>)        Fluid  135
      ENDIF                                                                     Fluid  136
c                                                                               Fluid  137
c              Prandtl number - viscosity must be in lbm/(ft-hr)                Fluid  138
      Prandtl      = <pl.Visc>*3600. * <pl.Cp> / <pl.Cond>                      Fluid  139
      <pl.Pr**1/3> = Prandtl**0.333                                             Fluid  140
c                                                                               Fluid  141
c              Heat transport capacity                                          Fluid  142
      <pl.Btuh/GPM-F> = <pl.Dens>/7.47 * <pl.Cp> * 60.                          Fluid  143
c                                                                               Fluid  144
c              Ratio of density to viscosity                                    Fluid  145
      <pl.Dens/Visc>  = <pl.Dens> / <pl.Visc>                                   Fluid  146
c                                                                               Fluid  147
      RETURN                                                                    Fluid  148
      END                                                                       Fluid  149
      SUBROUTINE H2OProp_Rated(Jfl, Trated, Pct,                                Fluid  150
     &                         Dens, Visc, Cp, Cond)                            Fluid  151
c                                                                               Fluid  152
c              Calculates the rated properties of a fluid based                 Fluid  153
c              on the rated temperature of the fluid                            Fluid  154
c                                                                               Fluid  155
c              Jfl      Pointer to the fluid                                    Fluid  156
c              Trated   Rated temperature                                       Fluid  157
c                                                                               Fluid  158
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
c                                                                               Fluid  161
c              Density                                                          Fluid  162
      IF (<fl:DENS-FT&PCT-H> .EQ. 0)  THEN                                      Fluid  163
        Dens = Curve(Jfl, <fl:DENS-FT&PCT>, Trated, Pct)                        Fluid  164
      ELSE                                                                      Fluid  165
        Dens = CurveSpline(1, Jfl, <fl:DENS-FT&PCT>,                            Fluid  166
     &                          <fl:DENS-FT&PCT-H>, Trated, Pct)                Fluid  167
      ENDIF                                                                     Fluid  168
c                                                                               Fluid  169
c              Viscosity                                                        Fluid  170
      IF (<fl:VISC-FT&PCT-H> .EQ. 0)  THEN                                      Fluid  171
        Visc = Curve(Jfl, <fl:VISC-FT&PCT>, Trated, Pct)                        Fluid  172
      ELSE                                                                      Fluid  173
        Visc = CurveSpline(1, Jfl, <fl:VISC-FT&PCT>,                            Fluid  174
     &                          <fl:VISC-FT&PCT-H>, Trated, Pct)                Fluid  175
      ENDIF                                                                     Fluid  176
c              convert from log(centipoise) to lbm/(ft-s)                       Fluid  177
      Visc = (10.**Visc) * 6.71955E-4                                           Fluid  178
c                                                                               Fluid  179
c              Specific Heat                                                    Fluid  180
      IF (<fl:CP-FT&PCT-H> .EQ. 0)  THEN                                        Fluid  181
        Cp = Curve(Jfl, <fl:CP-FT&PCT>, Trated, Pct)                            Fluid  182
      ELSE                                                                      Fluid  183
        Cp = CurveSpline(1, Jfl, <fl:CP-FT&PCT>,                                Fluid  184
     &                        <fl:CP-FT&PCT-H>, Trated, Pct)                    Fluid  185
      ENDIF                                                                     Fluid  186
c                                                                               Fluid  187
c              Conductivity                                                     Fluid  188
      IF (<fl:COND-FT&PCT-H> .EQ. 0)  THEN                                      Fluid  189
        Cond = Curve(Jfl, <fl:COND-FT&PCT>, Trated, Pct)                        Fluid  190
      ELSE                                                                      Fluid  191
        Cond = CurveSpline(1, Jfl, <fl:COND-FT&PCT>,                            Fluid  192
     &                          <fl:COND-FT&PCT-H>, Trated, Pct)                Fluid  193
      ENDIF                                                                     Fluid  194
c                                                                               Fluid  195
      RETURN                                                                    Fluid  196
      END                                                                       Fluid  197
      SUBROUTINE Fluid_EquipCtrl(Jec, Kli, ReqdFlow,                            FEqCtl   2
     &                           FlowCap, EnergyCap, FlowSatisfied)             FEqCtl   3
c                                                                               FEqCtl   4
c              Allocates a fluid flow to a set of central-plant                 FEqCtl   5
c              equipment components using a user-specified control              FEqCtl   6
c              sequence.                                                        FEqCtl   7
c                                                                               FEqCtl   8
c              Control can be specified for up to 5 flow ranges.  The           FEqCtl   9
c              keywords and EDTT variables for each flow range are              FEqCtl  10
c              identical except for the number of the range (1-5); this         FEqCtl  11
c              routine uses the EDTT variables of the first range for           FEqCtl  12
c              all ranges.                                                      FEqCtl  13
c                                                                               FEqCtl  14
c              Jec            Pointer to equip-ctrl sequence                    FEqCtl  15
c              Kli            List of all equipment attached to this node       FEqCtl  16
c              ReqdFlow       Required flow                                     FEqCtl  17
c              FlowCap        Flow capacity of all active equipment             FEqCtl  18
c              EnergyCap      Energy capacity of all active equipment,          FEqCtl  19
c                                                             Btuh or kW        FEqCtl  20
c              FlowSatisfied  Flag to indicate whether equipment can            FEqCtl  21
c                               fully handle load                               FEqCtl  22
c                                                                               FEqCtl  23
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /EqCtrl/ LengthLoadRange, xEqCtrl                                 /EqCtrl/ 2
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
c                                                                               FEqCtl  28
c ?? not debugged ????????????????????????????????????????????????????          FEqCtl  29
c                                                                               FEqCtl  30
      REAL      Mmeter                                                          FEqCtl  31
c ??  REAL      Mtank ??                                                        FEqCtl  32
      LOGICAL   FlowSatisfied                                                   FEqCtl  33
      DIMENSION CapMax(10)                                                      FEqCtl  34
c                                                                               FEqCtl  35
c              total operating capacity enabled                                 FEqCtl  36
      FlowCap   = 0.                                                            FEqCtl  37
      EnergyCap = 0.                                                            FEqCtl  38
c              flow to be prorated to enabled equipment                         FEqCtl  39
      ProrateFlow = ReqdFlow                                                    FEqCtl  40
      ProrateCap  = 0.                                                          FEqCtl  41
c              FlowSatisfied is true if the total equip capacity that           FEqCtl  42
c              is enabled is greater than the required flow                     FEqCtl  43
      FlowSatisfied = .FALSE.                                                   FEqCtl  44
c              Initialize flows                                                 FEqCtl  45
      Neq = <li;NumItems>                                                       FEqCtl  46
      DO  LI=1,Neq                                                              FEqCtl  47
        Kfx          = <li;List>                                                FEqCtl  48
        <fx.Mfluid>  = 0.                                                       FEqCtl  49
        <fx.RunFrac> = 0.                                                       FEqCtl  50
      ENDDO                                                                     FEqCtl  51
c                                                                               FEqCtl  52
c              find the correct range                                           FEqCtl  53
      NumLoadRanges = <ec;NumLoadRanges>                                        FEqCtl  54
      DO  Nrange=1,NumLoadRanges                                                FEqCtl  55
        IR = Nrange                                                             FEqCtl  56
        IF (<ec:FLOWS-THRU> .NE. 0.)  THEN                                      FEqCtl  57
c              user-specified load range                                        FEqCtl  58
          CapRange = <ec:FLOWS-THRU>                                            FEqCtl  59
        ELSE                                                                    FEqCtl  60
c              default range to equipment capacity                              FEqCtl  61
          NumEquipInRange = <ec;NumEquipInRng>  ! using IR index                FEqCtl  62
          CapRange = 0.                                                         FEqCtl  63
          IIstart  = (IR-1)*LengthLoadRange                                     FEqCtl  64
          DO  Neq=1,NumEquipInRange                                             FEqCtl  65
            II       = IIstart + Neq                                            FEqCtl  66
            Kfx      = <ec;EQUIP>                                               FEqCtl  67
            CapRange = CapRange + MIN(<fx.MaxMfluid>,<ec;EQUIP-MAX-LD>)         FEqCtl  68
          ENDDO                                                                 FEqCtl  69
c                 include tank output                                           FEqCtl  70
          IF (<ec:THERMAL-STORG> .GT. 0)  THEN                                  FEqCtl  71
            Kfx      = <ec:THERMAL-STORG>                                       FEqCtl  72
            CapRange = CapRange + MIN(<fx.MaxMfluid>,<ec:STORE-MAX-LD>)         FEqCtl  73
          ENDIF                                                                 FEqCtl  74
c              include meter output                                             FEqCtl  75
          IF (<ec;METER-SEQ> .GT. 0)  THEN                                      FEqCtl  76
            IF (<ec:METER-MAX-LD> .NE. 0.)  THEN                                FEqCtl  77
              CapRange = CapRange + <ec:METER-MAX-LD>                           FEqCtl  78
            ELSE                                                                FEqCtl  79
              CapRange = 1.E10                                                  FEqCtl  80
            ENDIF                                                               FEqCtl  81
          ENDIF                                                                 FEqCtl  82
        ENDIF    ! CapRange calc                                                FEqCtl  83
        IF (ReqdFlow .LE. CapRange)  EXIT                                       FEqCtl  84
      ENDDO  ! Nrange                                                           FEqCtl  85
c                                                                               FEqCtl  86
c              correct range has been found - get maximum sequence number       FEqCtl  87
      NumEquipInRange = <ec;NumEquipInRng>  ! using IR index                    FEqCtl  88
      MaxSequenceNum  = <ec;MaxSeqNum>      ! using IR index                    FEqCtl  89
      DO  Neq=1,NumEquipInRange                                                 FEqCtl  90
        CapMax(Neq) = 0.                                                        FEqCtl  91
      ENDDO                                                                     FEqCtl  92
c                                                                               FEqCtl  93
c              Loop thru and turn on enough equipment to satisfy flow.  If      FEqCtl  94
c              any unit of a given sequence number is activated, all            FEqCtl  95
c              equipment having the same sequence number must be activated,     FEqCtl  96
c              even if the flow has already been satisfied.                     FEqCtl  97
      IIstart = (IR-1)*LengthLoadRange                                          FEqCtl  98
      DO  NumSeq=1,MaxSequenceNum                                               FEqCtl  99
c              maximum capacity of all equipment having this sequence number    FEqCtl 100
        CapSeq = 0.                                                             FEqCtl 101
        DO  Neq=1,NumEquipInRange                                               FEqCtl 102
          II = IIstart + Neq                                                    FEqCtl 103
          IF (<ec;EQUIP-SEQ> .EQ. NumSeq)  THEN                                 FEqCtl 104
            Kfx     = <ec;EQUIP>                                                FEqCtl 105
            KfxLast = Kfx                                                       FEqCtl 106
c              limit maximum output                                             FEqCtl 107
            CapMax(Neq) = MAX(0., MIN(<fx.MaxMfluid>,<ec;EQUIP-MAX-LD>))        FEqCtl 108
            CapSeq      = CapSeq + CapMax(Neq)                                  FEqCtl 109
          ENDIF                                                                 FEqCtl 110
        ENDDO                                                                   FEqCtl 111
c                                                                               FEqCtl 112
c              check to see if a tank is at this sequence number                FEqCtl 113
C ??    IF (<ec;STORE-SEQ> .EQ. NumSeq)  THEN                                   FEqCtl 114
C         Kfx = <ec:THERMAL-STORG>                                              FEqCtl 115
c              maximum tank output                                              FEqCtl 116
C         CapTank = MAX(0., MIN(<fx.MaxMfluid>, <ec:STORE-MAX-LD>))             FEqCtl 117
C         IF (CapSeq .EQ. 0.)  THEN                                             FEqCtl 118
c              tank has its own sequence number - tank will supply as           FEqCtl 119
c              much of the remaining load as it can                             FEqCtl 120
C           Mtank       = MIN(CapTank, ReqdFlow-ProrateCap)                     FEqCtl 121
C           ProrateFlow = ProrateFlow  - Mtank                                  FEqCtl 122
C           FlowCap     = FlowCap + CapTank                                     FEqCtl 123
C           IF (Mtank .GT. 0.)                                                  FEqCtl 124
C    &        EnergyCap = EnergyCap + <fx.MaxQfluid>*CapTank/Mtank              FEqCtl 125
C           <fx.MaxMfluid> = Mtank                                              FEqCtl 126
C         ELSE                                                                  FEqCtl 127
c              tank has same sequence number as other equipment -               FEqCtl 128
c              prorate together                                                 FEqCtl 129
C           CapSeq = CapSeq + CapTank                                           FEqCtl 130
C           Mtank  = -1.0                                                       FEqCtl 131
C         ENDIF                                                                 FEqCtl 132
C       ENDIF  ! storage                                                        FEqCtl 133
c                                                                               FEqCtl 134
c              check to see if a meter is at this sequence number               FEqCtl 135
        IF (<ec;METER-SEQ> .EQ. NumSeq)  THEN                                   FEqCtl 136
c                 maximum meter output                                          FEqCtl 137
          IF (<ec:METER-MAX-LD> .GT. 0.)  THEN                                  FEqCtl 138
            CapMeter = <ec:METER-MAX-LD>                                        FEqCtl 139
          ELSE                                                                  FEqCtl 140
            CapMeter = 1.E10                                                    FEqCtl 141
          ENDIF                                                                 FEqCtl 142
c              meter will supply as much of the remaining load as it can        FEqCtl 143
          Mmeter      = MIN(CapMeter, ReqdFlow-ProrateCap)                      FEqCtl 144
          ProrateFlow = ProrateFlow - Mmeter                                    FEqCtl 145
          IF (Mmeter .GT. 0.)                                                   FEqCtl 146
     &      EnergyCap = EnergyCap + <fx.MaxQfluid>*CapMeter/Mmeter              FEqCtl 147
          FlowCap     = FlowCap + CapMeter                                      FEqCtl 148
        ENDIF  ! meter                                                          FEqCtl 149
c                                                                               FEqCtl 150
c              increment total flow capacity and proration capacity by          FEqCtl 151
c              new capacity to be prorated                                      FEqCtl 152
        FlowCap    = FlowCap    + CapSeq                                        FEqCtl 153
        ProrateCap = ProrateCap + CapSeq                                        FEqCtl 154
        MaxSequenceReqd = NumSeq                                                FEqCtl 155
c              see if equipment activated so far can handle the load            FEqCtl 156
        IF (FlowCap .GT. ReqdFlow)  THEN                                        FEqCtl 157
          FlowSatisfied = .TRUE.                                                FEqCtl 158
          EXIT                                                                  FEqCtl 159
        ENDIF                                                                   FEqCtl 160
      ENDDO  ! NumSeq                                                           FEqCtl 161
c                                                                               FEqCtl 162
c              Now prorate the flow to all activated equipment.                 FEqCtl 163
      IF (FlowSatisfied)  THEN                                                  FEqCtl 164
        IF (<ec:PRORATE-LOAD> .EQ. 1)  THEN                                     FEqCtl 165
c              Prorate the load to the equipment                                FEqCtl 166
          Prorate = ReqdFlow/ProrateCap                                         FEqCtl 167
          DO  Neq=1,NumEquipInRange                                             FEqCtl 168
            II  = IIstart + Neq                                                 FEqCtl 169
            Kfx = <ec;EQUIP>                                                    FEqCtl 170
            IF (<fx.MaxMfluid> .GT. 0.)                                         FEqCtl 171
     &        EnergyCap = EnergyCap                                             FEqCtl 172
     &                  + <fx.MaxQfluid>*CapMax(Neq)/<fx.MaxMfluid>             FEqCtl 173
            <fx.Mfluid> = CapMax(Neq) * Prorate                                 FEqCtl 174
            IF (<fx.Mfluid> .GT. 0.)  THEN                                      FEqCtl 175
              <fx.RunFrac> = 1.                                                 FEqCtl 176
            ELSE                                                                FEqCtl 177
              <fx.RunFrac> = 0.                                                 FEqCtl 178
            ENDIF                                                               FEqCtl 179
          ENDDO                                                                 FEqCtl 180
c              prorate to storage - if Mtank .ne. -1, then tank                 FEqCtl 181
c ??           was already given an unprorated load                             FEqCtl 182
C         IF (<ec:THERMAL-STORG> .GT. 0  .AND.  Mtank .EQ. -1.)  THEN           FEqCtl 183
C           Kfx         = <ec:THERMAL-STORG>                                    FEqCtl 184
C           IF (<fx.MaxMfluid> .GT. 0.)                                         FEqCtl 185
C    &        EnergyCap = EnergyCap + <fx.MaxQfluid>*CapTank/<fx.MaxMfluid>     FEqCtl 186
C           <fx.Mfluid>   = CapTank * Prorate                                   FEqCtl 187
C           IF (<fx.Mfluid> .GT. 0.)  THEN                                      FEqCtl 188
C             <fx.RunFrac> = 1.                                                 FEqCtl 189
C           ELSE                                                                FEqCtl 190
C             <fx.RunFrac> = 0.                                                 FEqCtl 191
C           ENDIF                                                               FEqCtl 192
C         ENDIF                                                                 FEqCtl 193
        ELSE                                                                    FEqCtl 194
c              Fully allocate load to equipment in the sequence order           FEqCtl 195
          DO  NumSeq=1,MaxSequenceReqd                                          FEqCtl 196
c              Get capacity of all equipment at this sequence number            FEqCtl 197
            CapSeq = 0.                                                         FEqCtl 198
            DO  Neq=1,NumEquipInRange                                           FEqCtl 199
              II = IIstart + Neq                                                FEqCtl 200
              IF (<ec;EQUIP-SEQ> .EQ. NumSeq)  THEN                             FEqCtl 201
                CapSeq = CapSeq + CapMax(Neq)                                   FEqCtl 202
              ENDIF                                                             FEqCtl 203
            ENDDO                                                               FEqCtl 204
c ??           check to see if a tank is at this sequence number                FEqCtl 205
C           IF (<ec;STORE-SEQ-NUM> .EQ. NumSeq)  THEN                           FEqCtl 206
C             IF (<ec;STORAGE> .GT. 0  .AND.  Mtank .EQ. -1.)  THEN             FEqCtl 207
C               CapSeq = CapSeq + CapTank                                       FEqCtl 208
C             ENDIF                                                             FEqCtl 209
C           ENDIF                                                               FEqCtl 210
c ?? meters                                                                     FEqCtl 211
c              now allocate to all equipment at this sequence number            FEqCtl 212
            IF (CapSeq .EQ. 0.)  EXIT                                           FEqCtl 213
            Prorate = MIN(1., ProrateLoad/CapSeq)                               FEqCtl 214
            DO  Neq=1,NumEquipInRange                                           FEqCtl 215
              II = IIstart + Neq                                                FEqCtl 216
              IF (<ec;EQUIP-SEQ> .EQ. NumSeq)  THEN                             FEqCtl 217
                Kfx       = <ec;EQUIP>                                          FEqCtl 218
                IF (<fx.MaxMfluid> .GT. 0.)                                     FEqCtl 219
     &            EnergyCap = EnergyCap                                         FEqCtl 220
     &                      + <fx.MaxQfluid>*CapMax(Neq)/<fx.MaxMfluid>         FEqCtl 221
                <fx.Mfluid> = CapMax(Neq) * Prorate                             FEqCtl 222
                IF (<fx.Mfluid> .GT. 0.)  THEN                                  FEqCtl 223
                  <fx.RunFrac> = 1.                                             FEqCtl 224
                ELSE                                                            FEqCtl 225
                  <fx.RunFrac> = 0.                                             FEqCtl 226
                ENDIF                                                           FEqCtl 227
              ENDIF                                                             FEqCtl 228
            ENDDO                                                               FEqCtl 229
c ??           check to see if a tank is at this sequence number                FEqCtl 230
C           IF (<ec;STORE-SEQ-NUM> .EQ. NumSeq)  THEN                           FEqCtl 231
C             IF (<ec;STORAGE> .GT. 0  .AND.  Mtank .EQ. -1.)  THEN             FEqCtl 232
C               Kfx         = <ec:THERMAL-STORG>                                FEqCtl 233
C               IF (<fx.Mfluid> .GT. 0.)                                        FEqCtl 234
C    &            EnergyCap = EnergyCap + <nx.Load>*CapTank/<nx;Flow>           FEqCtl 235
C               <nx;Flow>   = CapTank * Prorate                                 FEqCtl 236
C               IF (<nx;Flow> .GT. 0.)  THEN                                    FEqCtl 237
C                 <nx.RunFrac> = 1.                                             FEqCtl 238
C               ELSE                                                            FEqCtl 239
C                 <nx.RunFrac> = 0.                                             FEqCtl 240
C               ENDIF                                                           FEqCtl 241
C             ENDIF                                                             FEqCtl 242
C           ENDIF                                                               FEqCtl 243
c ??                                                                            FEqCtl 244
C           IF (<ec;METER-SEQ-NUM> .EQ. NumSeq)  THEN                           FEqCtl 245
C             IF (Jme .GT. 0  .AND.  Qmeter .EQ. 1.)                            FEqCtl 246
C    &          <me;LOAD> = CapMeter * Prorate                                  FEqCtl 247
C           ENDIF                                                               FEqCtl 248
            ProrateLoad = ProrateLoad - CapSeq                                  FEqCtl 249
          ENDDO                                                                 FEqCtl 250
        ENDIF  ! ec:PRORATE-LOAD                                                FEqCtl 251
      ELSE                                                                      FEqCtl 252
c              flow not satisfied, allocate based on design capacity            FEqCtl 253
        DesignCap = 0.                                                          FEqCtl 254
        DO  Neq=1,NumEquipInRange                                               FEqCtl 255
          IF (CapMax(Neq) .GE. 0.)  THEN                                        FEqCtl 256
            II        = IIstart + Neq                                           FEqCtl 257
            Kfx       = <ec;EQUIP>                                              FEqCtl 258
            DesignCap = DesignCap + <fx;DesMfluid>                              FEqCtl 259
          ENDIF                                                                 FEqCtl 260
        ENDDO                                                                   FEqCtl 261
        Prorate = ReqdFlow/ProrateCap                                           FEqCtl 262
        DO  Neq=1,NumEquipInRange                                               FEqCtl 263
          II  = IIstart + Neq                                                   FEqCtl 264
          Kfx = <ec;EQUIP>                                                      FEqCtl 265
          IF (<fx.MaxMfluid> .GE. 0.)  THEN                                     FEqCtl 266
            EnergyCap    = EnergyCap + <fx.MaxQfluid>                           FEqCtl 267
            <fx.Mfluid>  = <fx;DesMfluid> * Prorate                             FEqCtl 268
            <fx.RunFrac> = 1.                                                   FEqCtl 269
          ELSE                                                                  FEqCtl 270
            <fx.RunFrac> = 0.                                                   FEqCtl 271
          ENDIF                                                                 FEqCtl 272
        ENDDO                                                                   FEqCtl 273
      ENDIF  ! FlowSatisfied                                                    FEqCtl 274
c                                                                               FEqCtl 275
      RETURN                                                                    FEqCtl 276
      END                                                                       FEqCtl 277
      SUBROUTINE Fluid_EquipCtrlDefault(Kli, ReqdFlow, FlowCap,                 FEqCtrD  2
     &                                  EnergyCap, FlowSatisfied)               FEqCtrD  3
c                                                                               FEqCtrD  4
c              Allocates fluid flows to central plant components when           FEqCtrD  5
c              no EQUIP-CTRL is specified.                                      FEqCtrD  6
c                                                                               FEqCtrD  7
c              Finds the combination of equipment that best matches the         FEqCtrD  8
c              flow with equipment loaded as fully as possible.  Uses           FEqCtrD  9
c              the method of comparing all possibilities.                       FEqCtrD 10
c                                                                               FEqCtrD 11
c              Kli            Pointer to list of component nodes                FEqCtrD 12
c              ReqdFlow       Fluid flow, gpm                                   FEqCtrD 13
c              FlowCap        Flow capacity of selected equipment mix, gpm      FEqCtrD 14
c              EnergyCap      Thermal capacity of selected equipment mix, Btuh  FEqCtrD 15
c              FlowSatisfied  Flag to indicate load was satisfied               FEqCtrD 16
c                                                                               FEqCtrD 17
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
c                                                                               FEqCtrD 21
c                                                                               FEqCtrD 22
      LOGICAL FlowSatisfied                                                     FEqCtrD 23
      INTEGER BestCode, s8                                                      FEqCtrD 24
c                                                                               FEqCtrD 25
c              Number of attached components                                    FEqCtrD 26
      Neq    = <li;NumItems>                                                    FEqCtrD 27
c                                                                               FEqCtrD 28
c              Special case for only one equipment unit                         FEqCtrD 29
      IF (Neq .EQ. 1)  THEN                                                     FEqCtrD 30
        LI           = 1                                                        FEqCtrD 31
        Kfx          = <li;List>                                                FEqCtrD 32
        FlowCap      = <fx.MaxMfluid>                                           FEqCtrD 33
        EnergyCap    = <fx.MaxQfluid>                                           FEqCtrD 34
        <fx.RunFrac> = 1.                                                       FEqCtrD 35
        IF (ReqdFlow .LE. <fx.MaxMfluid>)  THEN                                 FEqCtrD 36
          FlowSatisfied = .TRUE.                                                FEqCtrD 37
        ELSE                                                                    FEqCtrD 38
          FlowSatisfied = .FALSE.                                               FEqCtrD 39
        ENDIF                                                                   FEqCtrD 40
        <fx.Mfluid> = ReqdFlow                                                  FEqCtrD 41
        RETURN                                                                  FEqCtrD 42
      ENDIF                                                                     FEqCtrD 43
c                                                                               FEqCtrD 44
c              Number of possible equipment combinations                        FEqCtrD 45
      Ncombs = 2**Neq - 1                                                       FEqCtrD 46
c              Total flow and thermal operating capacity enabled                FEqCtrD 47
      FlowCap    = 0.                                                           FEqCtrD 48
      EnergyCap = 0.                                                            FEqCtrD 49
c              FlowSatisfied is true if an allowable combination that           FEqCtrD 50
c              meets the load has been found                                    FEqCtrD 51
      FlowSatisfied = .FALSE.                                                   FEqCtrD 52
c              BestCap is the capacity of the combination which is              FEqCtrD 53
c              best so far                                                      FEqCtrD 54
      BestCap = 0.                                                              FEqCtrD 55
c              BestCode is the code number for the best combination             FEqCtrD 56
c              so far                                                           FEqCtrD 57
      BestCode = 0                                                              FEqCtrD 58
c              dPLR is the absolute value of the difference between             FEqCtrD 59
c              a 100% load and that of the best combination so far              FEqCtrD 60
      dPLR = 1.E25                                                              FEqCtrD 61
c                                                                               FEqCtrD 62
c              Determine the capacity based on last hours equipment mix         FEqCtrD 63
c ?? doesn't look right - should be using the current hour's capacity           FEqCtrD 64
c ?? in these calculations - refg default routine                               FEqCtrD 65
      CapLastHour = 0.                                                          FEqCtrD 66
      LastHourOn  = 1                                                           FEqCtrD 67
      DO  LI=1,Neq                                                              FEqCtrD 68
        Kfx = <li;List>                                                         FEqCtrD 69
        s8  = <fx;s8>                                                           FEqCtrD 70
        IF (<s8.HoursOn> .GT. 0)                                                FEqCtrD 71
     &    CapLastHour = CapLastHour + <s8.LastValueOn>                          FEqCtrD 72
      ENDDO                                                                     FEqCtrD 73
c             go back another hour if no equipment last hour                    FEqCtrD 74
      IF (CapLastHour .EQ. 0.)  THEN                                            FEqCtrD 75
        LastHourOn = 2                                                          FEqCtrD 76
        DO  LI=1,Neq                                                            FEqCtrD 77
          Kfx = <li;List>                                                       FEqCtrD 78
          s8  = <fx;s8>                                                         FEqCtrD 79
          IF (<s8.HoursOn> .EQ. -1)                                             FEqCtrD 80
     &      CapLastHour = CapLastHour + <s8.LastValueOn>                        FEqCtrD 81
        ENDDO                                                                   FEqCtrD 82
      ENDIF                                                                     FEqCtrD 83
c                                                                               FEqCtrD 84
c              loop thru the combinations                                       FEqCtrD 85
      DO  M=1,Ncombs                                                            FEqCtrD 86
c              calculate the operating ratio for this combination               FEqCtrD 87
        MQ    = M                                                               FEqCtrD 88
        CapOp = 0.                                                              FEqCtrD 89
        DO  LI=1,Neq                                                            FEqCtrD 90
          MX    = MQ / 2                                                        FEqCtrD 91
          Kfx   = <li;List>                                                     FEqCtrD 92
          CapOp = CapOp + FLOAT(MQ - 2*MX) * <fx.MaxMfluid>                     FEqCtrD 93
          MQ    = MX                                                            FEqCtrD 94
        ENDDO                                                                   FEqCtrD 95
c              if this combination cannot be allowed, then skip it              FEqCtrD 96
        IF ((CapOp .LT. ReqdFlow) .AND.                                         FEqCtrD 97
     &             (FlowSatisfied .OR. (CapOp .LE. BestCap)))  CYCLE            FEqCtrD 98
c              if this combination is an improvement, then record it            FEqCtrD 99
        dPLRnew = ABS(1. - ReqdFlow/CapOp)                                      FEqCtrD100
        IF (FlowSatisfied .AND. (dPLRnew .GE. dPLR))  CYCLE                     FEqCtrD101
        FlowSatisfied = (CapOp .GE. ReqdFlow)                                   FEqCtrD102
        BestCap       = CapOp                                                   FEqCtrD103
        dPLR          = dPLRnew                                                 FEqCtrD104
        BestCode      = M                                                       FEqCtrD105
      ENDDO                                                                     FEqCtrD106
c                                                                               FEqCtrD107
c              Now allocate the load to the equipment.  Note that               FEqCtrD108
c              fx.RunFrac is either 0 or 1                                      FEqCtrD109
      IF (FlowSatisfied)  THEN                                                  FEqCtrD110
c              Load was satisfied - allocate to the best combination            FEqCtrD111
c              Keep the same mix as operated last hour unless new capacity      FEqCtrD112
c              mix is 20% better.  Otherwise startup loads may become           FEqCtrD113
c              excessive                                                        FEqCtrD114
        IF (CapLastHour .GT. ReqdFlow  .AND.                                    FEqCtrD115
     &        ABS(CapLastHour-BestCap)/CapLastHour .LT. 0.2)  THEN              FEqCtrD116
c              retain last hours mix                                            FEqCtrD117
          IF (LastHourOn .EQ. 1)  THEN                                          FEqCtrD118
            DO  LI=1,Neq                                                        FEqCtrD119
              Kfx = <li;List>                                                   FEqCtrD120
              s8  = <fx;s8>                                                     FEqCtrD121
              IF (<s8.HoursOn> .GT. 0)  THEN                                    FEqCtrD122
                <fx.Mfluid>  = <s8.LastValueOn>/CapLastHour * ReqdFlow          FEqCtrD123
                EnergyCap    = EnergyCap + <fx.MaxQfluid>                       FEqCtrD124
                <fx.RunFrac> = 1.                                               FEqCtrD125
              ELSE                                                              FEqCtrD126
                <fx.Mfluid>  = 0.                                               FEqCtrD127
                <fx.RunFrac> = 0.                                               FEqCtrD128
              ENDIF                                                             FEqCtrD129
            ENDDO                                                               FEqCtrD130
          ELSE                                                                  FEqCtrD131
            DO  LI=1,Neq                                                        FEqCtrD132
              Kfx = <li;List>                                                   FEqCtrD133
              s8  = <fx;s8>                                                     FEqCtrD134
              IF (<s8.HoursOn> .EQ. -1)  THEN                                   FEqCtrD135
                <fx.Mfluid>  = <s8.LastValueOn>/CapLastHour * ReqdFlow          FEqCtrD136
                EnergyCap    = EnergyCap + <fx.MaxQfluid>                       FEqCtrD137
                <fx.RunFrac> = 1.                                               FEqCtrD138
              ELSE                                                              FEqCtrD139
                <fx.Mfluid>  = 0.                                               FEqCtrD140
                <fx.RunFrac> = 0.                                               FEqCtrD141
              ENDIF                                                             FEqCtrD142
            ENDDO                                                               FEqCtrD143
          ENDIF                                                                 FEqCtrD144
          FlowCap = CapLastHour                                                 FEqCtrD145
        ELSE                                                                    FEqCtrD146
c              equipment wasn't running last hour, or this is a much            FEqCtrD147
c              better mix                                                       FEqCtrD148
          Prorate  = ReqdFlow / BestCap                                         FEqCtrD149
          FlowCap = BestCap                                                     FEqCtrD150
          DO  LI=1,Neq                                                          FEqCtrD151
            Kfx          = <li;List>                                            FEqCtrD152
            MX           = BestCode / 2                                         FEqCtrD153
            <fx.RunFrac> = FLOAT(BestCode - 2*MX)                               FEqCtrD154
c              prorate the load                                                 FEqCtrD155
            <fx.Mfluid>  = <fx.MaxMfluid> * Prorate*<fx.RunFrac>                FEqCtrD156
            EnergyCap    = EnergyCap  + <fx.MaxQfluid>*<fx.RunFrac>             FEqCtrD157
            BestCode     = MX                                                   FEqCtrD158
          ENDDO                                                                 FEqCtrD159
        ENDIF                                                                   FEqCtrD160
      ELSE                                                                      FEqCtrD161
c              Flow was not satisfied, allocate based on design capacity        FEqCtrD162
        DesignCap = 0.                                                          FEqCtrD163
        DO  LI=1,Neq                                                            FEqCtrD164
          Kfx       = <li;List>                                                 FEqCtrD165
          DesignCap = DesignCap + <fx;DesMfluid>                                FEqCtrD166
        ENDDO                                                                   FEqCtrD167
        Prorate = ReqdFlow / DesignCap                                          FEqCtrD168
        DO  LI=1,Neq                                                            FEqCtrD169
          Kfx          = <li;List>                                              FEqCtrD170
          IF (<fx.MaxMfluid> .GE. 0.)  THEN                                     FEqCtrD171
            EnergyCap    = EnergyCap + <fx.MaxQfluid>                           FEqCtrD172
            <fx.Mfluid>  = <fx;DesMfluid> * Prorate                             FEqCtrD173
            <fx.RunFrac> = 1.                                                   FEqCtrD174
          ELSE                                                                  FEqCtrD175
            <fx.RunFrac> = 0.                                                   FEqCtrD176
          ENDIF                                                                 FEqCtrD177
        ENDDO                                                                   FEqCtrD178
      ENDIF  ! FlowSatisfied                                                    FEqCtrD179
c                                                                               FEqCtrD180
      RETURN                                                                    FEqCtrD181
      END                                                                       FEqCtrD182
      SUBROUTINE EquipCtrlSetup                                                 EqCtrS   2
c                                                                               EqCtrS   3
c              Sets up the parameters for the user-specified                    EqCtrS   4
c              EQUIP-CTRL sequences                                             EqCtrS   5
c                                                                               EqCtrS   6
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /EqCtrl/ LengthLoadRange, xEqCtrl                                 /EqCtrl/ 2
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /MISCD / TEMPS(4,4096),CONS(5),TEMPSL(4096),                      /MISCD/  2
     1                 BLDGQH,BLDGQC,BLDGQL,BLDGP,BPMULT,                       /MISCD/  3
     2                 DBTMIN,DBTMAX,WMIN,WMAX,NSPZ(4096),                      /MISCD/  4
     3                 DQ, DTP, DTR, DTS, FPI, PLRCC , POM, TC2, TDM,           /MISCD/  5
     4                 TRA,WCOL,WCOLM,WMM,YPI,KWBTU,BTUKW,UNFILD,Unusedm        /MISCD/  6
      REAL             KWBTU                                                    /MISCD/  7
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               EqCtrS  14
c                                                                               EqCtrS  15
      INTEGER ecTYPE, EquipOffset, XComponent, ec2, ListKnx(10)                 EqCtrS  16
c                                                                               EqCtrS  17
c              Find the offset between successive load ranges                   EqCtrS  18
      II = 1                                                                    EqCtrS  19
      IR = 1                                                                    EqCtrS  20
      LengthLoadRange = (<+ec;EQUIP2>) - (<+ec;EQUIP>)                          EqCtrS  21
      LengthEquip     = <+ec:BOILERS> - <+ec:CHILLERS>                          EqCtrS  22
      NumEquipTypes   = (<+ec:THERMAL-STORG>-<+ec:CHILLERS>)/LengthEquip        EqCtrS  23
      EquipOffset     = <+ec:CHILLERS>                                          EqCtrS  24
c                                                                               EqCtrS  25
c              Set up each EQUIP-CTRL sequence                                  EqCtrS  26
      DO  Nctrl=1,Nec                                                           EqCtrS  27
c              pointer to this sequence's data                                  EqCtrS  28
        Jec     = Iec + (Nctrl-1)*Lec                                           EqCtrS  29
        ecTYPE = <ec:TYPE>                                                      EqCtrS  30
c              component to which this equip-ctrl applies                       EqCtrS  31
        SELECT CASE (ecTYPE)                                                    EqCtrS  32
          CASE (1:5)  ! Central plant (fluid)                                   EqCtrS  33
            XComponent = Jcomponent( 2, <ec:PLANT>)                             EqCtrS  34
            <ec:PLANT> = XComponent                                             EqCtrS  35
          CASE (6)  ! Electrical                                                EqCtrS  36
            XComponent      = Jcomponent(13, <ec:ELEC-METER>)                   EqCtrS  37
            <ec:ELEC-METER> = XComponent                                        EqCtrS  38
          CASE (7)  ! Suction-group                                             EqCtrS  39
            XComponent         = Jcomponent(25, <ec:SUCTION-GROUP>)             EqCtrS  40
            <ec:SUCTION-GROUP> = XComponent                                     EqCtrS  41
          CASE (8)  ! Refg-system                                               EqCtrS  42
            XComponent       = Jcomponent(29, <ec:REFG-SYSTEM>)                 EqCtrS  43
            <ec:REFG-SYSTEM> = XComponent                                       EqCtrS  44
        END SELECT  ! ecTYPE                                                    EqCtrS  45
c                                                                               EqCtrS  46
c              Cycle thru each load range (5 maximum)                           EqCtrS  47
        DO  IR=1,5                                                              EqCtrS  48
          IIstart = (IR-1)*LengthLoadRange + 1                                  EqCtrS  49
          IIend   = IIstart + LengthLoadRange-1                                 EqCtrS  50
          II      = IIstart                                                     EqCtrS  51
c              number of load ranges in this equip-ctrl                         EqCtrS  52
          IF (<ec:FLOWS-THRU> .GT. 0)  <ec;NumLoadRanges> = IR                  EqCtrS  53
c                                                                               EqCtrS  54
c              pack various components into working array                       EqCtrS  55
          DO  Ncomp=1,NumEquipTypes                                             EqCtrS  56
            ec2 = Jec + EquipOffset + (Ncomp-1)*LengthEquip                     EqCtrS  57
     &                              + (IR   -1)*LengthLoadRange                 EqCtrS  58
            DO  I2=1,LengthLoadRange                                            EqCtrS  59
              IF (<ec2:EQUIP> .GT. 0)  THEN                                     EqCtrS  60
c                 equipment found                                               EqCtrS  61
                <ec;NumLoadRanges> = IR                                         EqCtrS  62
c                 pointer to the equipment, and matching node                   EqCtrS  63
                SELECT CASE (Ncomp)                                             EqCtrS  64
                  CASE (1)  ! chiller, heat-rej, compressor, condenser          EqCtrS  65
                    SELECT CASE (ecTYPE)                                        EqCtrS  66
                      CASE (1:4)  ! CHW, 2pipe, DHW, HW  (chiller)              EqCtrS  67
                        Jna = Jcomponent( 3, <ec2:EQUIP>)                       EqCtrS  68
                        Knx = LocateNode(0,0,Jna,XComponent,53,0)               EqCtrS  69
                      CASE (5)  ! CW (heat-rej)                                 EqCtrS  70
                        Jna = Jcomponent( 6, <ec2:EQUIP>)                       EqCtrS  71
                        Knx = LocateNode(0,0,Jna,XComponent, 53,0)              EqCtrS  72
                      CASE (7)  ! Suction-group (compressor)                    EqCtrS  73
                        Jna = Jcomponent(24, <ec2:EQUIP>)                       EqCtrS  74
                        Knx = LocateNode(0,0,Jna,XComponent, 62,0)              EqCtrS  75
                      CASE (8)  ! Refg-sys (condenser)                          EqCtrS  76
                        Jna = Jcomponent(27, <ec2:EQUIP>)                       EqCtrS  77
                        Knx = LocateNode(0,0,Jna,XComponent, 65,2)              EqCtrS  78
                    END SELECT                                                  EqCtrS  79
                  CASE (2)  ! boiler, dw-heater                                 EqCtrS  80
                    SELECT CASE (ecTYPE)                                        EqCtrS  81
                      CASE (3)  ! DHW (dw heater)                               EqCtrS  82
                        Jna = Jcomponent( 5, <ec2:EQUIP>)                       EqCtrS  83
                        Knx = LocateNode(0,0,Jna,XComponent, 53,0)              EqCtrS  84
                      CASE DEFAULT  ! HW, 2pipe, LowHW (boiler)                 EqCtrS  85
                        Jna = Jcomponent( 4, <ec2:EQUIP>)                       EqCtrS  86
                        Knx = LocateNode(0,0,Jna,XComponent,53,0)               EqCtrS  87
                    END SELECT                                                  EqCtrS  88
                  CASE (3)  ! Generator, GLHX                                   EqCtrS  89
                    SELECT CASE (ecTYPE)                                        EqCtrS  90
                      CASE (4,5)                                                EqCtrS  91
                        Jna = Jcomponent(19, <ec2:EQUIP>)                       EqCtrS  92
                        Knx = LocateNode(0,0,Jna,XComponent, 53,0)              EqCtrS  93
                      CASE DEFAULT  ! HW, 2pipe, DHW, Elec-gen (generator)      EqCtrS  94
c ??   Note to me - Resolve generators having jacket and exh nodes to           EqCtrS  95
c                   same loop.  Combine as one when common?                     EqCtrS  96
                        Jna = Jcomponent( 8, <ec2:EQUIP>)                       EqCtrS  97
                        Knx = LocateNode(0,0,Jna,XComponent, 0,0)               EqCtrS  98
                    END SELECT                                                  EqCtrS  99
                END SELECT  ! Ncomp                                             EqCtrS 100
                IF (Knx .GT. 0)  THEN                                           EqCtrS 101
c                     check to make sure same component not in same range twice EqCtrS 102
                  I3 = 1                                                        EqCtrS 103
                  DO  WHILE (I3 .LT. I2)                                        EqCtrS 104
                    IF (Knx .EQ. ListKnx(I3))  THEN                             EqCtrS 105
                      CALL MSGSIM(-1,II,II,II,II)                               EqCtrS 106
                      WRITE (IOUTPT,9003)  (<ec:NAME>,II=1,8),                  EqCtrS 107
     &                                     (<na:NAME>,II=1,8), IR               EqCtrS 108
                      CALL MessageBox( NULL,                                    EqCtrS 109
     &                  'Same component twice in same range'//char(0),          EqCtrS 110
     &                  'EQUIP-CTRL Errors'//char(0),                           EqCtrS 111
     &                  MB_OK + MB_ICONSTOP + MB_TASKMODAL )                    EqCtrS 112
                      IwinReturn = 1                                            EqCtrS 113
                      EXIT                                                      EqCtrS 114
                    ENDIF                                                       EqCtrS 115
                    I3 = I3 + 1                                                 EqCtrS 116
                  ENDDO                                                         EqCtrS 117
                  ListKnx(I2) = Knx                                             EqCtrS 118
                  IF (II .LE. IIend)  THEN                                      EqCtrS 119
c                     store component's node                                    EqCtrS 120
                    <ec;EQUIP>     = Knx                                        EqCtrS 121
                    <ec;EQUIP-SEQ> = INT(<ec2:EQUIP-SEQ-R>+.1)                  EqCtrS 122
                    <ec;MaxSeqNum> = MAX(<ec;MaxSeqNum>, <ec;EQUIP-SEQ>)        EqCtrS 123
                    IF(<ec2:EQUIP-MAX-LD> .NE. 0.)  THEN                        EqCtrS 124
                      <ec;EQUIP-MAX-LD> = <ec2:EQUIP-MAX-LD>                    EqCtrS 125
                    ELSE                                                        EqCtrS 126
                      <ec;EQUIP-MAX-LD> = 1.E10                                 EqCtrS 127
                    ENDIF                                                       EqCtrS 128
c                     increment index                                           EqCtrS 129
                    II = II + 1                                                 EqCtrS 130
                  ELSE                                                          EqCtrS 131
c                     too many components in range                              EqCtrS 132
                    CALL MSGSIM(-1,II,II,II,II)                                 EqCtrS 133
                    WRITE (IOUTPT,9001)  (<ec:NAME>,II=1,8)                     EqCtrS 134
                    CALL MessageBox( NULL,                                      EqCtrS 135
     &                'Too many components in list'//char(0),                   EqCtrS 136
     &                'EQUIP-CTRL Errors'//char(0),                             EqCtrS 137
     &                MB_OK + MB_ICONSTOP + MB_TASKMODAL )                      EqCtrS 138
                    IwinReturn = 1                                              EqCtrS 139
                    RETURN                                                      EqCtrS 140
                  ENDIF                                                         EqCtrS 141
                ELSE  ! referenced component is not attached                    EqCtrS 142
                  Jn2 = XComponent                                              EqCtrS 143
                  CALL MSGSIM(-1,II,II,II,II)                                   EqCtrS 144
                  WRITE (IOUTPT,9002)  (<ec:NAME>,II=1,8),                      EqCtrS 145
     &                                 (<na:NAME>,II=1,8),                      EqCtrS 146
     &                                 (<na2:NAME>,II=1,8)                      EqCtrS 147
                  CALL MessageBox( NULL,                                        EqCtrS 148
     &              'Referenced component not attached'//char(0),               EqCtrS 149
     &              'EQUIP-CTRL Errors'//char(0),                               EqCtrS 150
     &              MB_OK + MB_ICONSTOP + MB_TASKMODAL )                        EqCtrS 151
                  IwinReturn = 1                                                EqCtrS 152
                  RETURN                                                        EqCtrS 153
                ENDIF                                                           EqCtrS 154
              ELSE                                                              EqCtrS 155
                EXIT                                                            EqCtrS 156
              ENDIF                                                             EqCtrS 157
            ENDDO  ! LengthLoadRange                                            EqCtrS 158
          ENDDO  ! Ncomp                                                        EqCtrS 159
c              number of equipment units in this load range, excluding          EqCtrS 160
c              storage and meters                                               EqCtrS 161
          <ec;NumEquipInRng> = II - IIstart                                     EqCtrS 162
c                                                                               EqCtrS 163
c              storage                                                          EqCtrS 164
          IF (<ec:THERMAL-STORG> .GT. 0)  THEN                                  EqCtrS 165
            <ec;NumLoadRanges> = IR                                             EqCtrS 166
            Jna = Jcomponent( 9, <ec:THERMAL-STORG>)                            EqCtrS 167
            Knx = LocateNode(0,0,Jna,XComponent, 53,0)                          EqCtrS 168
            IF (Knx .GT. 0)  THEN                                               EqCtrS 169
              <ec:THERMAL-STORG> = Knx                                          EqCtrS 170
              <ec;STORE-SEQ>     = INT(<ec:STORE-SEQ-R>+.1)                     EqCtrS 171
              <ec;MaxSeqNum>     = MAX(<ec;MaxSeqNum>,<ec;STORE-SEQ>)           EqCtrS 172
              IF (<ec:STORE-MAX-LD> .EQ. 0.)  <ec:STORE-MAX-LD> = 1.E10         EqCtrS 173
            ELSE  ! referenced component is not attached                        EqCtrS 174
              Jn2 = XComponent                                                  EqCtrS 175
              CALL MSGSIM(-1,II,II,II,II)                                       EqCtrS 176
              WRITE (IOUTPT,9002)  (<ec:NAME>,II=1,8),                          EqCtrS 177
     &                             (<na:NAME>,II=1,8),                          EqCtrS 178
     &                             (<na2:NAME>,II=1,8)                          EqCtrS 179
              CALL MessageBox( NULL,                                            EqCtrS 180
     &        'Referenced component not attached'//char(0),                     EqCtrS 181
     &        'EQUIP-CTRL Errors'//char(0),                                     EqCtrS 182
     &        MB_OK + MB_ICONSTOP + MB_TASKMODAL )                              EqCtrS 183
              IwinReturn = 1                                                    EqCtrS 184
              RETURN                                                            EqCtrS 185
            ENDIF                                                               EqCtrS 186
          ENDIF                                                                 EqCtrS 187
c                                                                               EqCtrS 188
c              meter                                                            EqCtrS 189
          IF (<ec:METER-SEQ-R> .GT. 0.)  THEN                                   EqCtrS 190
            <ec;NumLoadRanges>  = IR                                            EqCtrS 191
            <ec;METER-SEQ> = INT(<ec:METER-SEQ-R>+.1)                           EqCtrS 192
            <ec;MaxSeqNum> = MAX(<ec;MaxSeqNum>, <ec;METER-SEQ>)                EqCtrS 193
            IF (<ec:METER-MAX-LD> .EQ. 0.)  <ec:METER-MAX-LD> = 1.E10           EqCtrS 194
          ENDIF                                                                 EqCtrS 195
c                                                                               EqCtrS 196
c              stop if nothing found in this load range                         EqCtrS 197
          IF (<ec;NumLoadRanges> .LT. IR)  EXIT                                 EqCtrS 198
        ENDDO  ! load ranges                                                    EqCtrS 199
c              Error if no equipment specified                                  EqCtrS 200
        IF (<ec;NumLoadRanges> .eq. 0) THEN                                     EqCtrS 201
          Call MsgSim(-1,ii,ii,ii,ii)                                           EqCtrS 202
          Write (Ioutpt,9004) (<ec:NAME>,II=1,8)                                EqCtrS 203
          Call MessageBox( NULL, 'EQUIP-CTRL has no equipment -'                EqCtrS 204
     &      //' ABORTING'//char(0),'Design Errors'//char(0), MB_OK              EqCtrS 205
     &      + MB_ICONSTOP + MB_TASKMODAL )                                      EqCtrS 206
        ENDIF                                                                   EqCtrS 207
      ENDDO  ! EQUIP-CTRL sequences                                             EqCtrS 208
c                                                                               EqCtrS 209
      RETURN                                                                    EqCtrS 210
c                                                                               EqCtrS 211
c              message formats                                                  EqCtrS 212
 9001 FORMAT(14x,'EQUIP-CTRL: ',8A4,' has more than 10'                /        EqCtrS 213
     &       14x,'components total in a load range.'                   )        EqCtrS 214
 9002 FORMAT(14x,'EQUIP-CTRL: ',8A4,' references',                     /        EqCtrS 215
     &       14x,'component: ',8A4,' but that component'               /        EqCtrS 216
     &       14x,'is not attached to: ',8A4                            )        EqCtrS 217
 9003 FORMAT(14x,'EQUIP-CTRL: ',8A4,' references',                     /        EqCtrS 218
     &       14x,'component: ',8A4,' twice in range',I2                /        EqCtrS 219
     &       14x,'A component can be listed only once in each range.'  )        EqCtrS 220
 9004 FORMAT(14X,'EQUIP-CTRL: ',8A4,' has no equipment'                /        EqCtrS 221
     &14X,'listed, and no meter specified. Load cannot be allocated.'  )        EqCtrS 222
c                                                                               EqCtrS 223
      END                                                                       EqCtrS 224
      FUNCTION SurfaceFilmAdj(Tsurface, Tenvir, WindSpeed)                      SURFC    2
c                                                                               SURFC    3
c              Adjusts the portion of the surface film coefficient              SURFC    4
c              that varies as a function of temperature and windspeed           SURFC    5
c                                                                               SURFC    6
c              The loss UA based on 1993 ASHRAE Fundamentals p22.17 eqn.4       SURFC    7
c              for a pipe or flat surface.  The radiative term is ignored       SURFC    8
c              as minimual data is normally available from manufacturers.       SURFC    9
c                                                                               SURFC   10
c              Qloss = UA * SurfaceLossAdj * (Tenvir - Tsurface)                SURFC   11
c                 where a negative number means a heating load                  SURFC   12
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
c                                                                               SURFC   14
      Tave = (Tsurface + Tenvir) * 0.5                                          SURFC   15
      dT   =  Tsurface - Tenvir                                                 SURFC   16
      SurfaceFilmAdj = Tave**(-0.181) * dT**0.266                               SURFC   17
     &                                * SQRT(1.0 + 1.277*WindSpeed)             SURFC   18
c                                                                               SURFC   19
      RETURN                                                                    SURFC   20
      END                                                                       SURFC   21
C ##############################################################################PltAlg   2
C ##############################################################################PltAlg   3
C ##############################################################################PltAlg   4
C ##############################################################################PltAlg   5
C ##########                                                          ##########PltAlg   6
C ##########                      CENTRAL PLANTS                      ##########PltAlg   7
C ##########                                                          ##########PltAlg   8
C ##############################################################################PltAlg   9
C ##############################################################################PltAlg  10
C ##############################################################################PltAlg  11
C ##############################################################################PltAlg  12
c                                                                               PltAlg  13
      SUBROUTINE FluidPlant(Mode, Jpl)                                          FldPlt   2
c                                                                               FldPlt   3
c              Simulates a central plant with heating, cooling, and/or          FldPlt   4
c              heat-rejection equipment                                         FldPlt   5
c                                                                               FldPlt   6
c              Mode =  10  Hourly initialization                                FldPlt   7
c                      31  Hourly simulation                                    FldPlt   8
c                      32  Hourly simulation                                    FldPlt   9
c                      50  Report creation                                      FldPlt  10
c                     111  Design                                               FldPlt  11
c                     119  Design reconciliation                                FldPlt  12
c                   201-9  Attachments                                          FldPlt  13
c                                                                               FldPlt  14
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /Attach/ NameAttachments(8,100,3), NumRowsOfAttachments           /Attach/ 2
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /HRREP / Irb, Ihrp, Lrb, Lhrp, Nrb, Nhrp, IVTLIM(3,50),           HRr      1
     &                 IGRPtr, IBRPtr, IRSch, IRSchT(5),                        HRr      2
     &                 NHRTyp(3), ITBUF(3), ITBUFB(3), ITBUFE(3),               HRr      3
     &                 IHREOF, ICDFLG                                           HRr      4
      COMMON  /MISCD / TEMPS(4,4096),CONS(5),TEMPSL(4096),                      /MISCD/  2
     1                 BLDGQH,BLDGQC,BLDGQL,BLDGP,BPMULT,                       /MISCD/  3
     2                 DBTMIN,DBTMAX,WMIN,WMAX,NSPZ(4096),                      /MISCD/  4
     3                 DQ, DTP, DTR, DTS, FPI, PLRCC , POM, TC2, TDM,           /MISCD/  5
     4                 TRA,WCOL,WCOLM,WMM,YPI,KWBTU,BTUKW,UNFILD,Unusedm        /MISCD/  6
      REAL             KWBTU                                                    /MISCD/  7
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON  /WEATH / IWDID(5),LRECX,WLAT,WLONG,LTIMZ,IFX,IWSIZ,               /WEATH/  2
     1                 CLRNES,TGNDR,WBT,DBT,Patm,CLDAMT,ISNOW,IRAIN,            /WEATH/  3
     2                 IWNDDR,HUMRAT,DENSTY,ENTHAL,DIFSOL,DIRSOL,SOLRAD,        /WEATH/  4
     3                 ICLDTY,WNDSPD,IDUMMY,DPT,WNDDRR,CLDCOV,RDNCC,            /WEATH/  5
     4                 BSCC,SKYA,DBTR,GTEMP(12),CLR(12),ESKY,EGND,IWINTR        /WEATH/  6
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               FldPlt  25
      COMMON  /PlntKy/ CHW, Pipe2, loop3, HW, loop5, STM, WLHP, DHW,            /PlntKy/ 2
     &                 CW, Deleted, Pipe2h, WLHPh, COGEN, NoType,               /PlntKy/ 3
     &                 Fixed, OA, Sch, Load,  Zone, Outdoor,                    /PlntKy/ 4
     &                 Standby, Demand, Snap, Scheduled,                        /PlntKy/ 5
     &                 CONSTANT, VARIABLE, ModeText(4),                         /PlntKy/ 6
     &                 OffMode, Floating, HeatMode, CoolMode, ElecMode,         /PlntKy/ 7
     &                 AtCoils, EnterLoop, AtPump,                              /PlntKy/ 8
     &                 INDOORS, OUTDOORS, TUNNEL, UNDERGROUND,                  /PlntKy/ 9
     &                 PRIMARY, SECONDARY,                                      /PlntKy/10
     &                 DIRECT, HX,                                              /PlntKy/11
     &                 Water, Ethylene, Propylene, Brine                        /PlntKy/12
      INTEGER          CHW, Pipe2, loop3, HW, loop5, STM, WLHP, DHW,            /PlntKy/13
     &                 CW, Deleted, Pipe2h, WLHPh, COGEN, NoType,               /PlntKy/14
     &                 Fixed, OA, Sch, Load,  Zone, Outdoor,                    /PlntKy/15
     &                 Standby, Demand, Snap, Scheduled,                        /PlntKy/16
     &                 CONSTANT, VARIABLE, ModeText,                            /PlntKy/17
     &                 OffMode, Floating, HeatMode, CoolMode, ElecMode,         /PlntKy/18
     &                 AtCoils, EnterLoop, AtPump,                              /PlntKy/19
     &                 INDOORS, OUTDOORS, TUNNEL, UNDERGROUND,                  /PlntKy/20
     &                 PRIMARY, SECONDARY,                                      /PlntKy/21
     &                 DIRECT, HX,                                              /PlntKy/22
     &                 Water, Ethylene, Propylene, Brine                        /PlntKy/23
c ??                                                                            FldPlt  27
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
c                                                                               FldPlt  29
      REAL     Msupply, Mreturn, Mbypass, Mmakeup                               FldPlt  30
      INTEGER  EquipMode, ZP1, f1, f2, f3, f4, s8, rH                           FldPlt  31
      LOGICAL  IterReqdHsty, FlowSatisfied, FlowSatisfied4                      FldPlt  32
c                                                                               FldPlt  33
c                                                                               FldPlt  34
c                    Nodes  Description                                         FldPlt  35
c                    =====  =====================================               FldPlt  36
c                     Kfi  <--Fluid inlet (return from circuits)                FldPlt  37
c                       |                                                       FldPlt  38
c                       |  <--Pump, if located at return                        FldPlt  39
c                       |                                                       FldPlt  40
c                      f1  <--Bypass and makeup water                           FldPlt  41
c                       |                                                       FldPlt  42
c                       |  <--Heat recovery equipment                           FldPlt  43
c                       |                                                       FldPlt  44
c                      f2                                                       FldPlt  45
c                       |                                                       FldPlt  46
c                       |  <--Series (upstream units)                           FldPlt  47
c                       |                                                       FldPlt  48
c                      f3                                                       FldPlt  49
c                       |                                                       FldPlt  50
c                       |  <--Series (downstream units) or parallel             FldPlt  51
c                       |                                                       FldPlt  52
c                      f4                                                       FldPlt  53
c                       |                                                       FldPlt  54
c                       |  <--Pump, if located at supply                        FldPlt  55
c                       |                                                       FldPlt  56
c                     Kfo  <--Fluid outlet (supply to circuits)                 FldPlt  57
c                                                                               FldPlt  58
c                Plant               Plant Equip                                FldPlt  59
c               CtrlMode              EquipMode                                 FldPlt  60
c             ============       ============================                   FldPlt  61
c             0  Offmode         30  Off simulation                             FldPlt  62
c             1  Floating        21  Floating capacity                          FldPlt  63
c                                22  Floating heat rec capacity                 FldPlt  64
c                                31  Floating simulation                        FldPlt  65
c                                32  Floating heat rec simulation               FldPlt  66
c             3  HeatMode        23  Heating capacity                           FldPlt  67
c                                24  Heat recovery capacity                     FldPlt  68
c                                33  Heating simulation                         FldPlt  69
c                                34  Heat recovery simulation                   FldPlt  70
c             5  CoolMode        25  Cooling capacity                           FldPlt  71
c                                26  Cool recovery capacity                     FldPlt  72
c                                35  Cooling simulation                         FldPlt  73
c                                36  Cool recovery simulation                   FldPlt  74
c                                                                               FldPlt  75
      Kfi = <pl;InletNode>                                                      FldPlt  76
      Kfo = <pl;OutletNode>                                                     FldPlt  77
      f1  = <pl;Node1>                                                          FldPlt  78
      f2  = <pl;Node2>                                                          FldPlt  79
      f3  = <pl;Node3>                                                          FldPlt  80
      f4  = <pl;Node4>                                                          FldPlt  81
c              pump, if any                                                     FldPlt  82
      Jpm = <pl:PUMP>                                                           FldPlt  83
c                                                                               FldPlt  84
      SELECT CASE (Mode)                                                        FldPlt  85
c                                                                               FldPlt  86
c                                                                               FldPlt  87
c ============ HOURLY INITIALIZATION ========================================== FldPlt  88
      CASE (10)                                                                 FldPlt  89
c                                                                               FldPlt  90
c              ?? temporary for accumulated overload                            FldPlt  91
C ??      <pl.AccumOverld>  = <pl.ACCUM_OVR'>                                   FldPlt  92
c                                                                               FldPlt  93
c              default EQUIP-CTRL sequences                                     FldPlt  94
      <pl.HeatEquipCtrl> = <pl:HEAT-EQUIP-CT>                                   FldPlt  95
      <pl.CoolEquipCtrl> = <pl:COOL-EQUIP-CT>                                   FldPlt  96
      <pl.HeatPriority> = 0.                                                    FldPlt  97
      <pl.CoolPriority> = 0.                                                    FldPlt  98
      <pl.OverPriority> = 0                                                     FldPlt  99
      <pl.CtrlOverride> = -88888                                                FldPlt 100
c                                                                               FldPlt 101
c              Save temperature if last hour was a start-up hour                FldPlt 102
      s8 = <pl;s8>                                                              FldPlt 103
      IF (<s8.HoursOn> .EQ. 1)  <pl.LastStartT> = <fo.Toutlet>                  FldPlt 104
c                                                                               FldPlt 105
c              Determine whether loop can run this hour, and setpoint           FldPlt 106
c              switching temperature - can be indoors or outdoors               FldPlt 107
      IF (<pl:SNAP-LOCN> .EQ. ZONE)  THEN                                       FldPlt 108
        ZP1   = <pl:SNAP-ZONE>                                                  FldPlt 109
        <pl.Tsnap> = <TNOW>                                                     FldPlt 110
      ELSE                                                                      FldPlt 111
        <pl.Tsnap> = DBT                                                        FldPlt 112
      ENDIF                                                                     FldPlt 113
      <pl.CtrlMode> = Floating                                                  FldPlt 114
c              Loops that can cool                                              FldPlt 115
      SELECT CASE (<pl:TYPE>)                                                   FldPlt 116
        CASE (1,2,3,9)  ! cooling                                               FldPlt 117
          Val = 1.0                                                             FldPlt 118
          SELECT CASE (<pl:OPERATION>)                                          FldPlt 119
            CASE (1)  ! Standby                                                 FldPlt 120
            CASE (2)  ! Demand                                                  FldPlt 121
            CASE (3)  ! Snap                                                    FldPlt 122
              IF (<pl.Tsnap> .LT. <pl:SNAP-T>)  Val = 0.0                       FldPlt 123
            CASE (4)  ! Scheduled                                               FldPlt 124
              Val = SchVal(<pl:COOL-SCH>)                                       FldPlt 125
c                check for cooling cutoff lower limit                           FldPlt 126
              IF (Val .NE. 1.  .AND.  <pl.Tsnap> .LT. Val)  Val = 0.0           FldPlt 127
          END SELECT                                                            FldPlt 128
          IF (Val .GT. 0.)  THEN                                                FldPlt 129
            <pl.CtrlMode> = CoolMode                                            FldPlt 130
          ELSE                                                                  FldPlt 131
            <pl.CtrlMode> = OffMode                                             FldPlt 132
          ENDIF                                                                 FldPlt 133
      END SELECT                                                                FldPlt 134
c              Loops that can heat                                              FldPlt 135
      SELECT CASE (<pl:TYPE>)                                                   FldPlt 136
        CASE (2,4,8)                                                            FldPlt 137
          Val = 1.0                                                             FldPlt 138
          SELECT CASE (<pl:OPERATION>)                                          FldPlt 139
            CASE (1)  ! Standby                                                 FldPlt 140
            CASE (2)  ! Demand                                                  FldPlt 141
            CASE (3)  ! Snap                                                    FldPlt 142
              IF (<pl.Tsnap> .GT. <pl:SNAP-T>)  Val = 0.0                       FldPlt 143
            CASE (4)  ! Scheduled                                               FldPlt 144
              Val = SchVal(<pl:HEAT-SCH>)                                       FldPlt 145
c                check for heating cutoff upper limit                           FldPlt 146
              IF (Val .NE. 1.0  .AND.  <pl.Tsnap> .GT. Val)  Val = 0.0          FldPlt 147
          END SELECT                                                            FldPlt 148
          IF (Val .GT. 0.  .AND.  <pl.CtrlMode> .NE. CoolMode)  THEN            FldPlt 149
            <pl.CtrlMode> = HeatMode                                            FldPlt 150
          ELSEIF (<pl.CtrlMode> .NE. CoolMode)  THEN                            FldPlt 151
            <pl.CtrlMode> = OffMode                                             FldPlt 152
          ENDIF                                                                 FldPlt 153
      END SELECT                                                                FldPlt 154
c              Control can be overridden by pump schedule; DHW may              FldPlt 155
c              supply a load even if pump is off, if pump is on                 FldPlt 156
c              return leg                                                       FldPlt 157
      <pl.PumpMode> = <pl.CtrlMode>                                             FldPlt 158
      IF (<pl:PUMP-SCH> .ne. 0)  THEN                                           FldPlt 159
        Val = SchVal(<pl:PUMP-SCH>)                                             FldPlt 160
        IF (Val .eq. 0.)  THEN                                                  FldPlt 161
          <pl.PumpMode> = OffMode                                               FldPlt 162
          IF (<pl:TYPE> .ne. 8  .or.     ! not dhw                              FldPlt 163
     &        <pl:PUMP-LOCN> .eq. 1)     ! supply side                          FldPlt 164
     &      <pl.CtrlMode>   = OffMode                                           FldPlt 165
        ENDIF                                                                   FldPlt 166
      ENDIF                                                                     FldPlt 167
      <pl.CtrlMode'>    = <pl.CtrlMode>                                         FldPlt 168
      <pl.LastCtrlMode> = -99999                                                FldPlt 169
c              Initialize fraction of hour that plant runs (needed for          FldPlt 170
c              3-way valves)                                                    FldPlt 171
      IF (<pl.CtrlMode> .EQ. OffMode)  THEN                                     FldPlt 172
        <pl.RunFrac> = 0.                                                       FldPlt 173
      ELSE                                                                      FldPlt 174
        <pl.RunFrac> = 1.                                                       FldPlt 175
      ENDIF                                                                     FldPlt 176
c                                                                               FldPlt 177
c              Now determine setpoint and initial outlet condition              FldPlt 178
      s8 = <pl;s8>                                                              FldPlt 179
      IF (<s8.HoursOn> .GT. 0)  THEN                                            FldPlt 180
c              throttling range last hour                                       FldPlt 181
        Thr = <pl.Tsetpt'> - <pl.Tsetpt>                                        FldPlt 182
      ELSE                                                                      FldPlt 183
        Thr = 0.                                                                FldPlt 184
      ENDIF                                                                     FldPlt 185
      SELECT CASE (<pl.CtrlMode>)                                               FldPlt 186
        CASE (1)  ! Floating - only a WLHP should be here                       FldPlt 187
          IF (<s8.HoursOn> .LT. 0)  THEN                                        FldPlt 188
c              assume start-up temperature would be same as last start          FldPlt 189
            <fo.Toutlet> = <pl.LastStartT>                                      FldPlt 190
          ELSE                                                                  FldPlt 191
c              use last hour's                                                  FldPlt 192
          ENDIF                                                                 FldPlt 193
        CASE (3)  ! Heating enabled                                             FldPlt 194
          SELECT CASE (<pl:HT-SETPT-CTRL>)                                      FldPlt 195
            CASE (1)  ! Fixed                                                   FldPlt 196
              <pl.Tsetpt> = <pl:HT-SETPT-T>                                     FldPlt 197
            CASE (2)  ! OA reset                                                FldPlt 198
              Tset = DRSVal(<pl:HT-RESET-SCH>)                                  FldPlt 199
              IF (Tset .NE. <pl.Tsetpt>)  <fo.Toutlet> = Tset + Thr             FldPlt 200
              <pl.Tsetpt> = Tset                                                FldPlt 201
            CASE (3)  ! Scheduled                                               FldPlt 202
              Tset = SchVal(<pl:HT-SETPT-SCH>)                                  FldPlt 203
              IF (Tset .NE. <pl.Tsetpt>)  <fo.Toutlet> = Tset + Thr             FldPlt 204
              <pl.Tsetpt> = Tset                                                FldPlt 205
            CASE (4)  ! Load reset                                              FldPlt 206
              IF (<s8.HoursOn> .LT. 0)  THEN                                    FldPlt 207
c                 assume design temperature for start-up                        FldPlt 208
                <fo.Toutlet> = <pl:DESIGN-HEAT-T>                               FldPlt 209
              ELSE                                                              FldPlt 210
c                 use last hour's                                               FldPlt 211
              ENDIF                                                             FldPlt 212
          END SELECT                                                            FldPlt 213
        CASE (5)  ! Cooling enabled                                             FldPlt 214
          SELECT CASE (<pl:CL-SETPT-CTRL>)                                      FldPlt 215
            CASE (1)  ! Fixed                                                   FldPlt 216
              <pl.Tsetpt> = <pl:CL-SETPT-T>                                     FldPlt 217
            CASE (2)  ! OA reset                                                FldPlt 218
              Tset = SchVal(<pl:CL-SETPT-SCH>)                                  FldPlt 219
              IF (Tset .NE. <pl.Tsetpt>)  <fo.Toutlet> = Tset + Thr             FldPlt 220
              <pl.Tsetpt> = Tset                                                FldPlt 221
            CASE (3)  ! Scheduled                                               FldPlt 222
              Tset = SchVal(<pl:CL-SETPT-SCH>)                                  FldPlt 223
              IF (Tset .NE. <pl.Tsetpt>)  <fo.Toutlet> = Tset + Thr             FldPlt 224
              <pl.Tsetpt> = Tset                                                FldPlt 225
            CASE (4)  ! Load reset                                              FldPlt 226
              IF (<s8.HoursOn> .LT. 0)  THEN                                    FldPlt 227
c                 assume design temperature for start-up                        FldPlt 228
                <fo.Toutlet> = <pl:DESIGN-COOL-T>                               FldPlt 229
              ELSE                                                              FldPlt 230
c                 use last hour's                                               FldPlt 231
              ENDIF                                                             FldPlt 232
          END SELECT                                                            FldPlt 233
      END SELECT  ! pl,CtrlMode                                                 FldPlt 234
c                                                                               FldPlt 235
c              Make-up temperature for dhw loops                                FldPlt 236
      IF (<pl:TYPE> .EQ. 8)  THEN                                               FldPlt 237
        IF (<pl:DHW-INLET-SCH> .NE. 0)  THEN                                    FldPlt 238
c              inlet temperature is scheduled                                   FldPlt 239
          <pl.Tmakeup> = SchVal(<pl:DHW-INLET-SCH>)                             FldPlt 240
        ELSEIF (<pl:DHW-INLET-T> .NE. UNFILD)  THEN                             FldPlt 241
c              inlet temperature is fixed                                       FldPlt 242
          <pl.Tmakeup> = <pl:DHW-INLET-T>                                       FldPlt 243
        ELSE                                                                    FldPlt 244
c              inlet temperature defaults to the ground temperature             FldPlt 245
          <pl.Tmakeup> = TGNDR - 460.                                           FldPlt 246
        ENDIF                                                                   FldPlt 247
      ENDIF                                                                     FldPlt 248
c                                                                               FldPlt 249
c                                                                               FldPlt 250
c ============ HOURLY INITIALIZATION, 2nd CALL (TEMPORARY) ==================== FldPlt 251
      CASE (11)                                                                 FldPlt 252
c                                                                               FldPlt 253
      <pl.CtrlMode'>    = <pl.CtrlMode>                                         FldPlt 254
      <pl.LastCtrlMode> = -99999                                                FldPlt 255
c              Initialize fraction of hour that plant runs (needed for          FldPlt 256
c              3-way valves)                                                    FldPlt 257
      IF (<pl.CtrlMode> .EQ. OffMode)  THEN                                     FldPlt 258
        <pl.RunFrac> = 0.                                                       FldPlt 259
      ELSE                                                                      FldPlt 260
        <pl.RunFrac> = 1.                                                       FldPlt 261
      ENDIF                                                                     FldPlt 262
c                                                                               FldPlt 263
      SELECT CASE (<pl.CtrlMode>)                                               FldPlt 264
        CASE (0) ! Off                                                          FldPlt 265
          <lp;HCAP_RATIO> = 0.                                                  FldPlt 266
          <lp;CCAP_RATIO> = 0.                                                  FldPlt 267
        CASE (1)  ! Floating - only a WLHP should be here                       FldPlt 268
          <lp;HCAP_RATIO> = 1.                                                  FldPlt 269
          <lp;CCAP_RATIO> = 1.                                                  FldPlt 270
        CASE (3)  ! Heating enabled                                             FldPlt 271
          <lp;HCAP_RATIO> = 1.                                                  FldPlt 272
          <lp;CCAP_RATIO> = 0.                                                  FldPlt 273
        CASE (5)  ! Cooling enabled                                             FldPlt 274
          <lp;HCAP_RATIO> = 0.                                                  FldPlt 275
          <lp;CCAP_RATIO> = 1.                                                  FldPlt 276
      END SELECT                                                                FldPlt 277
c                                                                               FldPlt 278
c                                                                               FldPlt 279
c ============ HOURLY SIMULATION ============================================== FldPlt 280
      CASE (31,32)                                                              FldPlt 281
c                                                                               FldPlt 282
      CALL ZeroAA(<#pl~HrZeroStart..>, <#pl~HrZeroEnd....>)                     FldPlt 283
c                                                                               FldPlt 284
c              Get the supply and return circuit conditions                     FldPlt 285
      CALL FluidNode(Kfo, <fo.RunFrac>, <fo.CtrlMode>,                          FldPlt 286
     &                    xM, <fo.Moutlet2>, <fo.Moutlet3>, <fo.Mreqd>,         FldPlt 287
     &                    xT, Tmin, Tmax,                                       FldPlt 288
     &                    xPmin, <fo.Preqd>)                                    FldPlt 289
      CALL FluidNode(Kfi, <fi.RunFrac>, <fi.CtrlMode>,                          FldPlt 290
     &                    xM, <fi.Minlet2>, <fi.Minlet3>, <fi.Mreqd>,           FldPlt 291
     &                    <fi.Tinlet>, xTmin, xTmax,                            FldPlt 292
     &                    xPmin, xPreqd)                                        FldPlt 293
c                                                                               FldPlt 294
c              Adjust control mode for load management overrides                FldPlt 295
      SELECT CASE (<pl.CtrlOverride>)                                           FldPlt 296
        CASE (0)  ! Force Off                                                   FldPlt 297
          <pl.CtrlMode'> = OffMode                                              FldPlt 298
          <pl.RunFrac>   = 0.0                                                  FldPlt 299
        CASE (1)  ! Force On ?? what does forcing a loop on accomplish??        FldPlt 300
          <pl.CtrlMode'> = MAX(1, <pl.CtrlMode>)                                FldPlt 301
          <pl.RunFrac>   = 1.0                                                  FldPlt 302
        CASE DEFAULT                                                            FldPlt 303
          <pl.CtrlMode'> = <pl.CtrlMode>                                        FldPlt 304
c              Check standby/demand-only modes                                  FldPlt 305
          LoopCtrlMode = MAX(<fi.CtrlMode>, <fo.CtrlMode>)                      FldPlt 306
          SELECT CASE (<pl:OPERATION>)                                          FldPlt 307
            CASE (1)  ! Standby                                                 FldPlt 308
              IF (<pl:TYPE> .eq. 8)  LoopCtrlMode = Max(1, LoopCtrlMode)        FldPlt 309
              IF (LoopCtrlMode .EQ. 0)  <pl.CtrlMode'> = OffMode                FldPlt 310
              IF (<pl.CtrlMode'> .NE. OffMode)  THEN                            FldPlt 311
                <pl.RunFrac> = 1.0                                              FldPlt 312
              ELSE                                                              FldPlt 313
                <pl.RunFrac> = 0.0                                              FldPlt 314
              ENDIF                                                             FldPlt 315
            CASE (2)  ! Demand                                                  FldPlt 316
              IF (LoopCtrlMode .LT. 2)  <pl.CtrlMode'> = OffMode                FldPlt 317
              IF (<pl.CtrlMode'> .NE. OffMode)  THEN                            FldPlt 318
                <pl.RunFrac> = <fo.RunFrac>                                     FldPlt 319
              ELSE                                                              FldPlt 320
                <pl.RunFrac> = 0.0                                              FldPlt 321
              ENDIF                                                             FldPlt 322
            CASE (3,4) ! Snap/scheduled                                         FldPlt 323
              IF (<pl.CtrlMode'> .NE. OffMode)  THEN                            FldPlt 324
                <pl.RunFrac> = 1.0                                              FldPlt 325
              ELSE                                                              FldPlt 326
                <pl.RunFrac> = 0.0                                              FldPlt 327
              ENDIF                                                             FldPlt 328
          END SELECT                                                            FldPlt 329
      END SELECT                                                                FldPlt 330
c                                                                               FldPlt 331
c              Check if plant off                                               FldPlt 332
      IF (<pl.CtrlMode'> .EQ. OffMode)  THEN                                    FldPlt 333
        Call PlantOff                                                           FldPlt 334
        Return                                                                  FldPlt 335
      ENDIF                                                                     FldPlt 336
c                                                                               FldPlt 337
c              Check if floating - only WLHP should do this                     FldPlt 338
      IF (<pl.CtrlMode> .EQ. Floating)  THEN                                    FldPlt 339
c              check if cooling                                                 FldPlt 340
        SELECT CASE (<pl:CL-SETPT-CTRL>)                                        FldPlt 341
          CASE (1)  ! Fixed                                                     FldPlt 342
            Tsetpt = <pl:CL-SETPT-T>                                            FldPlt 343
          CASE (2)  ! OA reset                                                  FldPlt 344
            Tsetpt = DRSVal(<pl:CL-RESET-SCH>)                                  FldPlt 345
          CASE (3)  ! Scheduled                                                 FldPlt 346
            Tsetpt = SchVal(<pl:CL-SETPT-SCH>)                                  FldPlt 347
          CASE (4)  ! Load reset                                                FldPlt 348
            Tsetpt = <pl:DESIGN-COOL-T>                                         FldPlt 349
        END SELECT                                                              FldPlt 350
        IF (<fi.Tinlet> .GT. Tsetpt-<pl:SETPT-RNG>*0.5)  THEN                   FldPlt 351
          <pl.CtrlMode'> = CoolMode                                             FldPlt 352
        ELSE                                                                    FldPlt 353
c              check if heating                                                 FldPlt 354
          SELECT CASE (<pl:HT-SETPT-CTRL>)                                      FldPlt 355
            CASE (1)  ! Fixed                                                   FldPlt 356
              Tsetpt = <pl:HT-SETPT-T>                                          FldPlt 357
            CASE (2)  ! OA reset                                                FldPlt 358
              Tsetpt = DRSVal(<pl:HT-RESET-SCH>)                                FldPlt 359
            CASE (3)  ! Scheduled                                               FldPlt 360
              Tsetpt = SchVal(<pl:HT-SETPT-SCH>)                                FldPlt 361
            CASE (4)  ! Load reset                                              FldPlt 362
              Tsetpt = <pl:DESIGN-HEAT-T>                                       FldPlt 363
          END SELECT                                                            FldPlt 364
          IF (<fi.Tinlet> .LT. Tsetpt+<pl:SETPT-RNG>*0.5)  THEN                 FldPlt 365
            <pl.CtrlMode'> = HeatMode                                           FldPlt 366
          ELSE                                                                  FldPlt 367
            <pl.CtrlMode'> = Floating                                           FldPlt 368
          ENDIF                                                                 FldPlt 369
        ENDIF                                                                   FldPlt 370
      ENDIF  ! pl,CtrlMode .eq. Floating                                        FldPlt 371
c                                                                               FldPlt 372
      SELECT CASE (<pl.CtrlMode'>)                                              FldPlt 373
        CASE (3)  ! Heating                                                     FldPlt 374
          <fo.Treqd> = Tmax                                                     FldPlt 375
        CASE (5)  ! Cooling                                                     FldPlt 376
          <fo.Treqd> = Tmin                                                     FldPlt 377
      END SELECT                                                                FldPlt 378
c                                                                               FldPlt 379
c              Set supply flow to be the actual flow during the time the        FldPlt 380
c              plant is on - all equipment must adjust loads by RunFrac         FldPlt 381
      Msupply = <fo.Moutlet3> / <pl.RunFrac>                                    FldPlt 382
      IF (<fo.RunFrac> .GT. 0.)                                                 FldPlt 383
     &  Msupply = Msupply + <fo.Moutlet2>/<fo.RunFrac>                          FldPlt 384
c              initialize flow if zero but loads want flow                      FldPlt 385
      IF (Msupply .EQ. 0.  .AND.  <fo.Mreqd> .GT. 0.)                           FldPlt 386
     &                                            Msupply = <fo.Mreqd>          FldPlt 387
c              repeat for return                                                FldPlt 388
      Mreturn = <fi.Minlet3> / <pl.RunFrac>                                     FldPlt 389
      IF (<fi.RunFrac> .GT. 0.)                                                 FldPlt 390
     &  Mreturn = Mreturn + <fi.Minlet2>/<fi.RunFrac>                           FldPlt 391
c              initialize flow if zero but loads want flow                      FldPlt 392
      IF (Mreturn .EQ. 0.  .AND.  <fi.Mreqd> .GT. 0.)                           FldPlt 393
     &                                            Mreturn = <fi.Mreqd>          FldPlt 394
c              makeup flow (dhw)                                                FldPlt 395
      IF (<pl:TYPE> .EQ. 8  .AND.  Msupply .GT. 0.)  THEN                       FldPlt 396
        Mmakeup = Dim(Msupply, Mreturn)                                         FldPlt 397
c              eliminate round-off error                                        FldPlt 398
        IF (Mmakeup/Msupply .LT. 0.0001)  Mmakeup = 0.                          FldPlt 399
      ELSE                                                                      FldPlt 400
        Mmakeup = 0.                                                            FldPlt 401
      ENDIF                                                                     FldPlt 402
c              bypass flow                                                      FldPlt 403
      IF (Mreturn .LT. <pl;FlowMin>)  THEN                                      FldPlt 404
        Mbypass = <pl;FlowMin> - Mreturn                                        FldPlt 405
        Msupply = <pl;FlowMin>                                                  FldPlt 406
c              assume 2' head for controller                                    FldPlt 407
        <fo.Preqd> = MAX(2., <fo.Preqd>)                                        FldPlt 408
      ELSE                                                                      FldPlt 409
        Mbypass = 0.                                                            FldPlt 410
      ENDIF                                                                     FldPlt 411
      Msupply    = Mreturn + Mmakeup + Mbypass                                  FldPlt 412
      <fo.Mreqd> = MAX(Msupply, <fo.Mreqd>)                                     FldPlt 413
      IF (Msupply .eq. 0.)  THEN                                                FldPlt 414
        Call PlantOff                                                           FldPlt 415
        Return                                                                  FldPlt 416
      ENDIF                                                                     FldPlt 417
c                                                                               FldPlt 418
c              Gross load on plant                                              FldPlt 419
      Qgross = Mreturn * <pl.Btuh/GPM-F> * ( <fi.Tinlet>-<fo.Toutlet>)          FldPlt 420
     &       + Mmakeup * <pl.Btuh/GPM-F> * (<pl.Tmakeup>-<fo.Toutlet>)          FldPlt 421
c                                                                               FldPlt 422
c              Head setpoint for pump(s)                                        FldPlt 423
      SELECT CASE (<pl:HD-SETPT-CTRL>)                                          FldPlt 424
        CASE (1)  ! Fixed                                                       FldPlt 425
c              throttling range                                                 FldPlt 426
          Thr = 0.5 - Mreturn*<pl;1/Flow>                                       FldPlt 427
          Thr = MAX(-0.5, MIN(0.5, Thr)) * <pl:HD-SETPT-RNG>                    FldPlt 428
          SELECT CASE (<pl:HD-SENS-LOCN>)                                       FldPlt 429
            CASE (1)  ! Fluid-circuits                                          FldPlt 430
              <pl.Psetpt> = <fo.Preqd> + Thr                                    FldPlt 431
            CASE (2)  ! Leaving plant                                           FldPlt 432
              <pl.Psetpt> = <pl;HeadSetpt> + Thr                                FldPlt 433
          END SELECT                                                            FldPlt 434
        CASE (2)  ! Valve Reset                                                 FldPlt 435
          <pl.Psetpt> = <fo.Preqd> + 1.                                         FldPlt 436
      END SELECT                                                                FldPlt 437
      IF (Jpm .GT. 0)  THEN                                                     FldPlt 438
c              Plant has own pump(s).                                           FldPlt 439
        <pm.RunFrac> = <pl.RunFrac>                                             FldPlt 440
c              Get maximum pressure output at required (not actual) flow.       FldPlt 441
        SELECT CASE (<pl:PUMP-LOCN>)                                            FldPlt 442
          CASE (1)  ! Supply side                                               FldPlt 443
            <pm.Mfluid> = <fo.Mreqd>                                            FldPlt 444
          CASE (2)  ! Return side                                               FldPlt 445
            <pm.Mfluid> = <fi.Mreqd>                                            FldPlt 446
        END SELECT                                                              FldPlt 447
        CALL PumpAlgs(21, Jpm)                                                  FldPlt 448
        IF (IwinReturn .ne. 0)  Return                                          FldPlt 449
c              Establish maximum pressure limits for allocating loads           FldPlt 450
c              to equipment                                                     FldPlt 451
        SELECT CASE (<pl:PUMP-LOCN>)                                            FldPlt 452
          CASE (1)  ! Supply side                                               FldPlt 453
            <f1.Pfluid> = <fi.Pinlet>                                           FldPlt 454
            <f4.Preqd>  = <pl.Psetpt> - <pm.dP>                                 FldPlt 455
            <f4.Pfluid> = <fo.Preqd> - <pm.dP>                                  FldPlt 456
          CASE (2)  ! Return side                                               FldPlt 457
            IF (<pl:TYPE> .NE. 8)  THEN                                         FldPlt 458
              <f1.Pfluid> = <pm.dP>                                             FldPlt 459
            ELSE  ! dhw                                                         FldPlt 460
              <f1.Pfluid> = 888.                                                FldPlt 461
            ENDIF                                                               FldPlt 462
            <f4.Preqd>  = <pl.Psetpt>                                           FldPlt 463
            <f4.Pfluid> = <fo.Preqd>                                            FldPlt 464
        END SELECT                                                              FldPlt 465
      ELSE  ! Pumps are at equipment                                            FldPlt 466
        <f1.Pfluid> = <fi.Pinlet>                                               FldPlt 467
        <f4.Preqd>  = <pl.Psetpt>                                               FldPlt 468
        <f4.Pfluid> = <fo.Preqd>                                                FldPlt 469
      ENDIF  ! Jpm .gt. 0                                                       FldPlt 470
c              initialize minimum and setpoint pressure at each node            FldPlt 471
c              using previous differentials                                     FldPlt 472
      <f3.Pfluid> = <f4.Pfluid> - <pl.dP34>                                     FldPlt 473
      <f2.Pfluid> = <f3.Pfluid> - <pl.dP23>                                     FldPlt 474
      <f3.Preqd>  = <f4.Preqd>  - <pl.dP34>                                     FldPlt 475
c                                                                               FldPlt 476
c              Start of iterative loop over plant equipment                     FldPlt 477
      CALL HistoryInit(<pl;IntNodeHstys>)                                       FldPlt 478
      FlowSatisfied4 = .TRUE.                                                   FldPlt 479
      NumEquipPasses = 0                                                        FldPlt 480
 3110 NumEquipPasses = NumEquipPasses + 1                                       FldPlt 481
c                                                                               FldPlt 482
c              Node 1 - plant inlet                                             FldPlt 483
c              adjust inlet temperature for bypass and makeup                   FldPlt 484
      <f1.Tfluid> = (  <fi.Tinlet> * Mreturn                                    FldPlt 485
     &              + <fo.Toutlet> * Mbypass                                    FldPlt 486
     &              + <pl.Tmakeup> * Mmakeup) / Msupply                         FldPlt 487
c              and for pump heat                                                FldPlt 488
      IF (<pl:PUMP-LOCN> .EQ. 2) <f1.Tfluid> = <f1.Tfluid> + <pm.dT>            FldPlt 489
c                                                                               FldPlt 490
c              Establish temperature setpoint at plant outlet                   FldPlt 491
      SELECT CASE (<pl.CtrlMode'>)                                              FldPlt 492
        CASE (0)  ! Off                                                         FldPlt 493
          <pl.Tsetpt'> = -888.                                                  FldPlt 494
          <pl.Qnet>    = 0.                                                     FldPlt 495
        CASE (1)  ! Floating                                                    FldPlt 496
          <pl.Tsetpt'> = <f1.Tfluid>                                            FldPlt 497
          <pl.Qnet>    = 0.                                                     FldPlt 498
        CASE (3)  ! Heating                                                     FldPlt 499
c              net load on plant                                                FldPlt 500
          IF (Jpm .EQ. 0)  THEN                                                 FldPlt 501
            <pl.Qnet> = -MIN(0., Qgross)                                        FldPlt 502
          ELSE                                                                  FldPlt 503
            <pl.Qnet> = -MIN(0., Qgross+<pm.Qfluid>)                            FldPlt 504
          ENDIF                                                                 FldPlt 505
          SELECT CASE (<pl:HT-SETPT-CTRL>)                                      FldPlt 506
            CASE (4)  ! Load reset                                              FldPlt 507
              <pl.Tsetpt'> = MIN(<pl:MAX-RESET-T>,                              FldPlt 508
     &                           MAX(<fo.Treqd>+1.,                             FldPlt 509
     &                               <pl:MIN-RESET-T>))                         FldPlt 510
            CASE DEFAULT  ! all others                                          FldPlt 511
              EquipCap = <pl.Qcap2> + <pl.Qcap3> + <pl.Qcap4>                   FldPlt 512
              IF (EquipCap .GT. 0.)  THEN                                       FldPlt 513
                Thr = 0.5 - <pl.Qnet>/EquipCap                                  FldPlt 514
                Thr = MAX(-0.5, MIN(0.5, Thr))*<pl:SETPT-RNG>                   FldPlt 515
              ELSE                                                              FldPlt 516
                Thr = 0.                                                        FldPlt 517
              ENDIF                                                             FldPlt 518
              <pl.Tsetpt'> = <pl.Tsetpt> + Thr                                  FldPlt 519
          END SELECT                                                            FldPlt 520
c              adjust setpoint for pump on supply (outlet) side                 FldPlt 521
          IF (<pl:PUMP-LOCN> .EQ. 1) <pl.Tsetpt'> = <pl.Tsetpt'>-<pm.dT>        FldPlt 522
          IF (<pl.Tsetpt'> .LE. <f1.Tfluid>)  THEN                              FldPlt 523
c              floating when lower than Node 1 temperature, don't let           FldPlt 524
c              pump heat push temperature to unrealistic value                  FldPlt 525
            <pl.CtrlMode'> = Floating                                           FldPlt 526
            <f1.Tfluid>    = MIN(<f1.Tfluid>, <pl.Tsetpt'>+50.)                 FldPlt 527
          ENDIF                                                                 FldPlt 528
        CASE (5)  ! Cooling                                                     FldPlt 529
c              net load on plant                                                FldPlt 530
          IF (Jpm .EQ. 0)  THEN                                                 FldPlt 531
            <pl.Qnet> = MAX(0., Qgross)                                         FldPlt 532
          ELSE                                                                  FldPlt 533
            <pl.Qnet> = MAX(0., Qgross+<pm.Qfluid>)                             FldPlt 534
          ENDIF                                                                 FldPlt 535
          SELECT CASE (<pl:CL-SETPT-CTRL>)                                      FldPlt 536
            CASE (4)  ! Load reset                                              FldPlt 537
              SELECT CASE (<pl:TYPE>)                                           FldPlt 538
                CASE (7,9)  ! WLHP, CW                                          FldPlt 539
                  <pl.Tsetpt'> = <pl:DESIGN-COOL-T>                             FldPlt 540
                CASE DEFAULT                                                    FldPlt 541
                  <pl.Tsetpt'> = MIN(<pl:MAX-RESET-T>,                          FldPlt 542
     &                           MAX(<fo.Treqd>-1.,                             FldPlt 543
     &                               <pl:MIN-RESET-T>))                         FldPlt 544
              END SELECT                                                        FldPlt 545
            CASE DEFAULT  ! all others                                          FldPlt 546
c                 adjust for throttling range                                   FldPlt 547
              EquipCap = <pl.Qcap2> + <pl.Qcap3> + <pl.Qcap4>                   FldPlt 548
              IF (EquipCap .GT. 0.)  THEN                                       FldPlt 549
                Thr = <pl.Qnet>/EquipCap - 0.5                                  FldPlt 550
                Thr = MAX(-0.5, MIN(0.5, Thr))*<pl:SETPT-RNG>                   FldPlt 551
              ELSE                                                              FldPlt 552
                Thr = 0.                                                        FldPlt 553
              ENDIF                                                             FldPlt 554
              <pl.Tsetpt'> = <pl.Tsetpt> + Thr                                  FldPlt 555
          END SELECT                                                            FldPlt 556
c              adjust setpoint for pump on supply (outlet) side                 FldPlt 557
          IF (<pl:PUMP-LOCN> .EQ. 1) <pl.Tsetpt'> = <pl.Tsetpt'>-<pm.dT>        FldPlt 558
c              floating if higher than Node 1 temperature                       FldPlt 559
          IF (<pl.Tsetpt'> .GE. <f1.Tfluid>)  <pl.CtrlMode'> = Floating         FldPlt 560
      END SELECT  ! pl,CtrlMode'                                                FldPlt 561
      CALL CnvgCheck(2, <pl;Node1Hsty>)                                         FldPlt 562
c                                                                               FldPlt 563
c              Node 2 - heat recovery                                           FldPlt 564
      IF (<f2;Xnode> .GT. 0)  THEN                                              FldPlt 565
c              required temperature at htrec outlet                             FldPlt 566
        <f2.Tsetpt> = <pl.Tsetpt'>                                              FldPlt 567
        Kli         = <f2;Xnode>                                                FldPlt 568
        NumItems    = <li;NumItems>                                             FldPlt 569
c              get capacities at these conditions                               FldPlt 570
        IF (<pl.CtrlMode'> .NE. OffMode)  THEN                                  FldPlt 571
          EquipMode = <pl.CtrlMode'> + 21                                       FldPlt 572
          DO  LI=1,NumItems                                                     FldPlt 573
            CALL PlantEquipAlgs(EquipMode, <li;List>)                           FldPlt 574
          ENDDO                                                                 FldPlt 575
        ENDIF                                                                   FldPlt 576
c              allocate flow to htrec equipment                                 FldPlt 577
        CALL Fluid_EquipCtrlDefault(Kli, Msupply,                               FldPlt 578
     &                              <pl.Mcap2>,<pl.Qcap2>,FlowSatisfied)        FldPlt 579
c              simulate htrec equipment                                         FldPlt 580
        EquipMode = <pl.CtrlMode'> + 31                                         FldPlt 581
        DO  LI=1,NumItems                                                       FldPlt 582
          CALL PlantEquipAlgs(EquipMode, <li;List>)                             FldPlt 583
        ENDDO                                                                   FldPlt 584
        IF (IwinReturn .ne. 0)  Return                                          FldPlt 585
c              outlet conditions (Node 2)                                       FldPlt 586
        CALL FluidNode(f2, xR, xS,                                              FldPlt 587
     &                     <f2.Mfluid>, xM2, xM3, xMreqd,                       FldPlt 588
     &                     <f2.Tfluid>, xTmin, xTmax,                           FldPlt 589
     &                     <f2.Pfluid>, xPreqd)                                 FldPlt 590
        CALL CnvgCheck(2, <pl;Node2Hsty>)                                       FldPlt 591
        <pl.dP12> = <f2.Pfluid> - <f1.Pfluid>                                   FldPlt 592
      ELSE                                                                      FldPlt 593
c              no heat recovery - transfer node data                            FldPlt 594
        <f2.Tfluid>   = <f1.Tfluid>                                             FldPlt 595
        <f2.Pfluid>   = <f1.Pfluid>                                             FldPlt 596
        <f2.IterFlag> = <f1.IterFlag>                                           FldPlt 597
      ENDIF  ! heat recovery                                                    FldPlt 598
c                                                                               FldPlt 599
c              Node 3 - series upstream                                         FldPlt 600
      IF (<f3;Xnode> .GT. 0)  THEN                                              FldPlt 601
c              required temperature at equipment outlet (Node 3)                FldPlt 602
        IF (<pl.Qcap3> .EQ. 0.  .AND.  FlowSatisfied4                           FldPlt 603
     &                          .AND. <pl:SERIES-SETPT> .NE. 1.)  THEN          FldPlt 604
c              either first pass thru, or series upstream not needed            FldPlt 605
          <f3.Tsetpt> = <f2.Tfluid>                                             FldPlt 606
        ELSE                                                                    FldPlt 607
c              setpoint ratio and setpoint                                      FldPlt 608
          IF (<pl:SERIES-SETPT> .NE. -66666.)  THEN  ! user specified           FldPlt 609
            Ratio = <pl:SERIES-SETPT>                                           FldPlt 610
          ELSEIF (<pl.Qcap3> .GT. 0.)  THEN  ! 2nd pass or later                FldPlt 611
            Ratio = <pl.Qcap3>/(<pl.Qcap3>+<pl.Qcap4>)                          FldPlt 612
          ELSE  !                                                               FldPlt 613
            Ratio = 0.5                                                         FldPlt 614
          ENDIF                                                                 FldPlt 615
          <f3.Tsetpt> = <f2.Tfluid>                                             FldPlt 616
     &                + (<pl.Tsetpt'>-<f2.Tfluid>) * Ratio                      FldPlt 617
        ENDIF                                                                   FldPlt 618
        Kli      = <f3;Xnode>                                                   FldPlt 619
        NumItems = <li;NumItems>                                                FldPlt 620
c              get capacities at these conditions                               FldPlt 621
        EquipMode = <pl.CtrlMode'> + 20                                         FldPlt 622
        DO  LI=1,NumItems                                                       FldPlt 623
          CALL PlantEquipAlgs(EquipMode, <li;List>)                             FldPlt 624
        ENDDO                                                                   FldPlt 625
        IF (IwinReturn .ne. 0)  Return                                          FldPlt 626
c              allocate flow                                                    FldPlt 627
        IF (<pl.CtrlMode'> .EQ. HeatMode)  THEN                                 FldPlt 628
          IF (<pl.HeatEquipCtrl> .GT. 0)  THEN                                  FldPlt 629
            CALL Fluid_EquipCtrl(<pl.HeatEquipCtrl>, Kli, Msupply,              FldPlt 630
     &                      <pl.Mcap3>, <pl.Qcap3>, FlowSatisfied)              FldPlt 631
          ELSE                                                                  FldPlt 632
            CALL Fluid_EquipCtrlDefault(Kli, Msupply,                           FldPlt 633
     &                      <pl.Mcap3>, <pl.Qcap3>, FlowSatisfied)              FldPlt 634
          ENDIF                                                                 FldPlt 635
        ELSEIF (<pl.CtrlMode'> .EQ. CoolMode)  THEN                             FldPlt 636
          IF (<pl.HeatEquipCtrl> .GT. 0)  THEN                                  FldPlt 637
            CALL Fluid_EquipCtrl(<pl.HeatEquipCtrl>, Kli, Msupply,              FldPlt 638
     &                      <pl.Mcap3>, <pl.Qcap3>, FlowSatisfied)              FldPlt 639
          ELSE                                                                  FldPlt 640
            CALL Fluid_EquipCtrlDefault(Kli, Msupply,                           FldPlt 641
     &                      <pl.Mcap3>, <pl.Qcap3>, FlowSatisfied)              FldPlt 642
          ENDIF                                                                 FldPlt 643
        ELSE  ! Floating                                                        FldPlt 644
            CALL Fluid_EquipCtrlDefault(Kli, Msupply,                           FldPlt 645
     &                      <pl.Mcap3>, <pl.Qcap3>, FlowSatisfied)              FldPlt 646
        ENDIF                                                                   FldPlt 647
c              simulate equipment                                               FldPlt 648
        EquipMode = <pl.CtrlMode'> + 30                                         FldPlt 649
        DO  LI=1,NumItems                                                       FldPlt 650
          CALL PlantEquipAlgs(EquipMode, <li;List>)                             FldPlt 651
        ENDDO                                                                   FldPlt 652
        IF (IwinReturn .ne. 0)  Return                                          FldPlt 653
c              outlet conditions (Node 3)                                       FldPlt 654
        CALL FluidNode(f3, xR, xS,                                              FldPlt 655
     &                     <f3.Mfluid>, xM2, xM3, xMreqd,                       FldPlt 656
     &                     <f3.Tfluid>, xTmin, xTmax,                           FldPlt 657
     &                     <f3.Pfluid>, xPreqd)                                 FldPlt 658
        CALL CnvgCheck(2, <pl;Node3Hsty>)                                       FldPlt 659
        <pl.dP23> = <f3.Pfluid> - <f2.Pfluid>                                   FldPlt 660
      ELSE                                                                      FldPlt 661
c              no equipment here                                                FldPlt 662
        <f3.Tfluid>   = <f2.Tfluid>                                             FldPlt 663
        <f3.Pfluid>   = <f2.Pfluid>                                             FldPlt 664
        <f3.IterFlag> = <f2.IterFlag>                                           FldPlt 665
      ENDIF                                                                     FldPlt 666
c                                                                               FldPlt 667
c              Node 4 - parallel or series downstream                           FldPlt 668
      IF (<f4;Xnode> .GT. 0)  THEN                                              FldPlt 669
c              required temperature at equipment outlet (Node 4)                FldPlt 670
        <f4.Tsetpt> = <pl.Tsetpt'>                                              FldPlt 671
        Kli         = <f4;Xnode>                                                FldPlt 672
        NumItems    = <li;NumItems>                                             FldPlt 673
c              get capacities at these conditions                               FldPlt 674
        EquipMode = <pl.CtrlMode'> + 20                                         FldPlt 675
        DO  LI=1,NumItems                                                       FldPlt 676
          CALL PlantEquipAlgs(EquipMode, <li;List>)                             FldPlt 677
        ENDDO                                                                   FldPlt 678
        IF (IwinReturn .ne. 0)  Return                                          FldPlt 679
c              allocate flow                                                    FldPlt 680
        IF (<pl.CtrlMode'> .EQ. HeatMode)  THEN                                 FldPlt 681
          IF (<pl.HeatEquipCtrl> .GT. 0)  THEN                                  FldPlt 682
            CALL Fluid_EquipCtrl(<pl.HeatEquipCtrl>, Kli, Msupply,              FldPlt 683
     &                      <pl.Mcap3>, <pl.Qcap3>, FlowSatisfied)              FldPlt 684
          ELSE                                                                  FldPlt 685
            CALL Fluid_EquipCtrlDefault(Kli, Msupply,                           FldPlt 686
     &                      <pl.Mcap3>, <pl.Qcap3>, FlowSatisfied)              FldPlt 687
          ENDIF                                                                 FldPlt 688
        ELSEIF (<pl.CtrlMode'> .EQ. CoolMode)  THEN                             FldPlt 689
          IF (<pl.HeatEquipCtrl> .GT. 0)  THEN                                  FldPlt 690
            CALL Fluid_EquipCtrl(<pl.HeatEquipCtrl>, Kli, Msupply,              FldPlt 691
     &                      <pl.Mcap3>, <pl.Qcap3>, FlowSatisfied)              FldPlt 692
          ELSE                                                                  FldPlt 693
            CALL Fluid_EquipCtrlDefault(Kli, Msupply,                           FldPlt 694
     &                      <pl.Mcap3>, <pl.Qcap3>, FlowSatisfied)              FldPlt 695
          ENDIF                                                                 FldPlt 696
        ELSE  ! Floating                                                        FldPlt 697
            CALL Fluid_EquipCtrlDefault(Kli, Msupply,                           FldPlt 698
     &                      <pl.Mcap3>, <pl.Qcap3>, FlowSatisfied)              FldPlt 699
        ENDIF                                                                   FldPlt 700
c              simulate equipment                                               FldPlt 701
        EquipMode = <pl.CtrlMode'> + 30                                         FldPlt 702
        DO  LI=1,NumItems                                                       FldPlt 703
          CALL PlantEquipAlgs(EquipMode, <li;List>)                             FldPlt 704
        ENDDO                                                                   FldPlt 705
        IF (IwinReturn .ne. 0)  Return                                          FldPlt 706
c              outlet conditions (Node 4)                                       FldPlt 707
        CALL FluidNode(f4, xR, xS,                                              FldPlt 708
     &                     <f4.Mfluid>, xM2, xM3, xMreqd,                       FldPlt 709
     &                     <f4.Tfluid>, xTmin, xTmax,                           FldPlt 710
     &                     <f4.Pfluid>, xPreqd)                                 FldPlt 711
        CALL CnvgCheck(2, <pl;Node4Hsty>)                                       FldPlt 712
        <pl.dP34> = <f4.Pfluid> - <f3.Pfluid>                                   FldPlt 713
      ELSE                                                                      FldPlt 714
c              no equipment here                                                FldPlt 715
        IF (<pl;PrimaryEquip> .GT. 0)  THEN                                     FldPlt 716
          <f4.Tfluid> = <f3.Tfluid>                                             FldPlt 717
        ELSE                                                                    FldPlt 718
c              no primary equipment in plant - outlet is at setpoint            FldPlt 719
          <f4.Tfluid> = <pl.Tsetpt'>                                            FldPlt 720
        ENDIF                                                                   FldPlt 721
        <f4.Pfluid>   = <f3.Pfluid>                                             FldPlt 722
        <f4.IterFlag> = <f3.IterFlag>                                           FldPlt 723
      ENDIF                                                                     FldPlt 724
c                                                                               FldPlt 725
c              Now that pressure drop at each node is known, propagate          FldPlt 726
c              minimum and required pressure back from outlet                   FldPlt 727
      <f3.Pfluid> = <f4.Pfluid> - <pl.dP34>                                     FldPlt 728
      <f2.Pfluid> = <f3.Pfluid> - <pl.dP23>                                     FldPlt 729
      <f3.Preqd>  = <f4.Preqd>  - <pl.dP34>                                     FldPlt 730
      <f2.Preqd>  = <f3.Preqd>  - <pl.dP23>                                     FldPlt 731
      <f1.Preqd>  = <f2.Preqd>  - <pl.dP12>                                     FldPlt 732
c                                                                               FldPlt 733
c              Simulate pump(s) to get outlet pressure and heat                 FldPlt 734
      IF (Jpm .GT. 0)  THEN                                                     FldPlt 735
        IF (<pl:PUMP-LOCN> .eq. 1)  THEN  ! supply side                         FldPlt 736
          <pm.Psetpt> = <pl.Psetpt> - <f4.Pfluid>                               FldPlt 737
          <pm.Mfluid> = Msupply                                                 FldPlt 738
        ELSE  ! return side                                                     FldPlt 739
          <pm.Psetpt> = <f1.Preqd>                                              FldPlt 740
          <pm.Mfluid> = Mreturn + Mbypass                                       FldPlt 741
        ENDIF                                                                   FldPlt 742
        IF (<pm.Mfluid> .gt. 0.)  THEN                                          FldPlt 743
          CALL PumpAlgs(31, Jpm)                                                FldPlt 744
        ELSE  ! dhw with no return demand; pump off                             FldPlt 745
          CALL PumpAlgs(30, Jpm)                                                FldPlt 746
        ENDIF                                                                   FldPlt 747
        IF (IwinReturn .ne. 0)  Return                                          FldPlt 748
      ENDIF                                                                     FldPlt 749
c                                                                               FldPlt 750
c              See if central plant equipment convergence achieved.             FldPlt 751
c              Repeat if not                                                    FldPlt 752
      IF (IterReqdHsty(<pl;IntNodeHstys>))  THEN                                FldPlt 753
        IF (NumEquipPasses .GT. 10)  THEN                                       FldPlt 754
          IF (NumEquipPasses .EQ. 11)  THEN                                     FldPlt 755
c              Warn when convergence not achieved                               FldPlt 756
            CALL MSGSIM(-2,II,II,II,II)                                         FldPlt 757
            WRITE (IOUTPT,9101)  (<pl:NAME>,II=1,8),                            FldPlt 758
     &                           NumHstyFlags(<pl;IntNodeHstys>),               FldPlt 759
     &                           IMO, IDAY, IHR                                 FldPlt 760
            CALL DumpHstyTrack(<pl;IntNodeHstys>)                               FldPlt 761
          ELSE                                                                  FldPlt 762
            CALL DumpHstyTrack(<pl;IntNodeHstys>)                               FldPlt 763
          ENDIF                                                                 FldPlt 764
          IF (IREPRT(3,35) .NE. 0) CALL DumpHstyTrack(<pl;IntNodeHstys>)        FldPlt 765
        ENDIF                                                                   FldPlt 766
        IF (NumEquipPasses .LT. 20)  GOTO 3110                                  FldPlt 767
      ENDIF                                                                     FldPlt 768
c                                                                               FldPlt 769
c              Actual pressure at each node and outlet temperature              FldPlt 770
      SELECT CASE (<pl:PUMP-LOCN>)                                              FldPlt 771
        CASE (0)  ! No pump                                                     FldPlt 772
          IF (<pl;PrimaryEquip> .EQ. 0)  THEN                                   FldPlt 773
            <fo.Poutlet> = <pl.Psetpt>                                          FldPlt 774
          ELSE                                                                  FldPlt 775
            <fo.Poutlet> = <f4.Pfluid>                                          FldPlt 776
          ENDIF                                                                 FldPlt 777
          <fo.Toutlet> = <f4.Tfluid>                                            FldPlt 778
        CASE (1)  ! Supply (outlet) side                                        FldPlt 779
          <fo.Poutlet> = <f4.Pfluid> + <pm.dP>                                  FldPlt 780
          <fo.Toutlet> = <f4.Tfluid> + <pm.dT>                                  FldPlt 781
        CASE (2)  ! Return (inlet) side                                         FldPlt 782
          <f1.Pfluid>  = <pm.dP>                                                FldPlt 783
          <f2.Pfluid>  = <f1.Pfluid> + <pl.dP12>                                FldPlt 784
          <f3.Pfluid>  = <f2.Pfluid> + <pl.dP23>                                FldPlt 785
          <f4.Pfluid>  = <f3.Pfluid> + <pl.dP34>                                FldPlt 786
          <fo.Poutlet> = <f4.Pfluid>                                            FldPlt 787
          <fo.Toutlet> = <f4.Tfluid>                                            FldPlt 788
      END SELECT                                                                FldPlt 789
      <fi.Minlet>  = Mreturn                                                    FldPlt 790
      <fo.Moutlet> = Msupply                                                    FldPlt 791
      <pl.LastCtrlMode> = <pl.CtrlMode'>                                        FldPlt 792
c                                                                               FldPlt 793
c ?? ********* temporary code until coils respond to temperature:               FldPlt 794
c ??           prevent overloads from driving temperature too far               FldPlt 795
      <fo.Toutlet> = MIN(<fo.Toutlet>, <pl.Tsetpt'>+10.)                        FldPlt 796
      <fo.Toutlet> = MAX(<fo.Toutlet>, <pl.Tsetpt'>-10.)                        FldPlt 797
c                                                                               FldPlt 798
c              Set iteration flags on attached fluid circuits                   FldPlt 799
      IF (Mode .EQ. 31)  THEN                                                   FldPlt 800
        CALL CnvgCheck(0, <pl;OutletHsty>)  ! loads to plant                    FldPlt 801
      ELSE                                                                      FldPlt 802
        CALL CnvgCheck(1, <pl;OutletHsty>)  ! plant to loads                    FldPlt 803
      ENDIF                                                                     FldPlt 804
c              reference temperature for load calcs in other components         FldPlt 805
      <pl.Tref> = <fo.Toutlet>                                                  FldPlt 806
c              Adjust total load for run fraction                               FldPlt 807
      <pl.Qnet> = <pl.Qnet> * <pl.RunFrac>                                      FldPlt 808
c                                                                               FldPlt 809
c              Demand side calcs for equipment                                  FldPlt 810
      IF (<f3;Xnode> .GT. 0)  THEN                                              FldPlt 811
        Kli      = <f3;Xnode>                                                   FldPlt 812
        NumItems = <li;NumItems>                                                FldPlt 813
        DO  LI=1,NumItems                                                       FldPlt 814
          CALL PlantEquipAlgs(Mode+7, <li;List>)                                FldPlt 815
        ENDDO                                                                   FldPlt 816
      ENDIF                                                                     FldPlt 817
      IF (<f4;Xnode> .GT. 0)  THEN                                              FldPlt 818
        Kli      = <f4;Xnode>                                                   FldPlt 819
        NumItems = <li;NumItems>                                                FldPlt 820
        DO  LI=1,NumItems                                                       FldPlt 821
          CALL PlantEquipAlgs(Mode+7, <li;List>)                                FldPlt 822
        ENDDO                                                                   FldPlt 823
      ENDIF                                                                     FldPlt 824
c                                                                               FldPlt 825
c              Bulk fluid properties, modify only if doing detailed             FldPlt 826
c              calculations                                                     FldPlt 827
      IF (<pl:FLUID-RELATNS> .EQ. 2)  THEN                                      FldPlt 828
        Tbulk = (<fo.Toutlet>+<fi.Tinlet>) * 0.5                                FldPlt 829
        CALL H2OProp_fT(Jpl, Tbulk)                                             FldPlt 830
      ENDIF                                                                     FldPlt 831
c                                                                               FldPlt 832
c                                                                               FldPlt 833
c ************ temporary code ******************************* ??                FldPlt 834
      <lp;COIL_EWTest> = <fo.Toutlet>                                           FldPlt 835
c                                                                               FldPlt 836
c                                                                               FldPlt 837
c ============ REPORT CREATION ================================================ FldPlt 838
      CASE (50)                                                                 FldPlt 839
c                                                                               FldPlt 840
c              statistics blocks                                                FldPlt 841
      Ks2Sup    = NewStat2(Kfo,  <+fo.Moutlet>,  0, 1.)                         FldPlt 842
      Ks5SupBin = NewStat5(Kfo,  <+fo.Moutlet>,  0, 1.)                         FldPlt 843
      Ks2Gain   = NewStat2(Jfc, <+fc.Qconduct>,  1, 1.)                         FldPlt 844
      Ks2Loss   = NewStat2(Jfc, <+fc.Qconduct>, -1, 1.)                         FldPlt 845
                                                                                FldPlt 846
c              Create the type "H" report                                       FldPlt 847
c      IF (<pl:REPORTS> .GT. 0  .AND.  IREPRT(3,23) .GT. 0)                     FldPlt 848
c     &  <pl;PS-H> = NewReport_H(Jpl, 86,                                       FldPlt 849
c     &                          4, 5, 6,                                       FldPlt 850
c     &                          Ks2Sup, Ks2Gain, Ks2Loss, 0,                   FldPlt 851
c     &                          Ks5SupBin, 0, 0,                               FldPlt 852
c     &                          0, 0, 0)                                       FldPlt 853
c                                                                               FldPlt 854
c                                                                               FldPlt 855
c ============ REPORT ORDER =================================================== FldPlt 856
      CASE (52)                                                                 FldPlt 857
c                                                                               FldPlt 858
      Call Report_H(Mode, <pl;PS-H>)                                            FldPlt 859
c                                                                               FldPlt 860
c              Pumps directly attached                                          FldPlt 861
      IF (Jpm .ne. 0)  CALL PumpAlgs(Mode, Jpm)                                 FldPlt 862
c                                                                               FldPlt 863
c              Boilers, chillers, etc.                                          FldPlt 864
      IF (<f3;Xnode> .ne. 0)  THEN                                              FldPlt 865
        Kli      = <f3;Xnode>                                                   FldPlt 866
        DO  LI=1,<li;NumItems>                                                  FldPlt 867
          CALL PlantEquipAlgs(Mode, <li;List>)                                  FldPlt 868
        ENDDO                                                                   FldPlt 869
      ENDIF                                                                     FldPlt 870
      IF (<f4;Xnode> .ne. 0)  THEN                                              FldPlt 871
        Kli      = <f4;Xnode>                                                   FldPlt 872
        DO  LI=1,<li;NumItems>                                                  FldPlt 873
          CALL PlantEquipAlgs(Mode, <li;List>)                                  FldPlt 874
        ENDDO                                                                   FldPlt 875
      ENDIF                                                                     FldPlt 876
c                                                                               FldPlt 877
c                                                                               FldPlt 878
c ============ REPORTS - VERIFICATION DATA ==================================== FldPlt 879
      CASE (54)                                                                 FldPlt 880
c                                                                               FldPlt 881
c              Output design information                                        FldPlt 882
      IF (<pl;PS-H> .ne. 0)  THEN                                               FldPlt 883
        rH = <pl;PS-H>                                                          FldPlt 884
        WRITE (IREPFL) 4,<rH;Iuniq>,1,1,0                                       FldPlt 885
        CALL GetAttachments(Jpl, 2)                                             FldPlt 886
        WRITE (IREPFL)  23,<rH;Iuniq>,1,2,19,                                   FldPlt 887
     &    (NameAttachments(II,1,1),II=1,8),                                     FldPlt 888
     &    (NameAttachments(II,1,2),II=1,8),                                     FldPlt 889
     &    <fo.Moutlet>,<fc:CONDUCT-DT>,<fc;DesignDP>                            FldPlt 890
        DO  Irow=2,NumRowsOfAttachments                                         FldPlt 891
          WRITE (IREPFL)  20,<rH;Iuniq>,1,3,16,                                 FldPlt 892
     &      (NameAttachments(II,Irow,1),II=1,8),                                FldPlt 893
     &      (NameAttachments(II,Irow,2),II=1,8)                                 FldPlt 894
        ENDDO                                                                   FldPlt 895
      ENDIF                                                                     FldPlt 896
c                                                                               FldPlt 897
c                                                                               FldPlt 898
c ============ HOURLY REPORTS - HOURLY DATA =================================== FldPlt 899
      CASE (62)                                                                 FldPlt 900
c                                                                               FldPlt 901
      IF (<fc;HourRepBuf> .EQ. 0)  RETURN                                       FldPlt 902
c                                                                               FldPlt 903
      IAptr = <fc;HourRepBuf>-1                                                 FldPlt 904
c                                                                               FldPlt 905
C      AA(IAptr+ 1) = (<fo.Houtlet> - <fi.Hinlet>) * <fi.Minlet>                FldPlt 906
C      AA(IAptr+ 2) = <fo.Houtlet> - <fi.Hinlet>                                FldPlt 907
C      AA(IAptr+ 3) = <fo.Poutlet> - <fi.Pinlet>                                FldPlt 908
c                                                                               FldPlt 909
c                                                                               FldPlt 910
c ============ DESIGN CALCULATIONS - INITIALIZATION =========================== FldPlt 911
      CASE (110)                                                                FldPlt 912
c                                                                               FldPlt 913
c              Set supply temperature                                           FldPlt 914
      SELECT CASE (<pl:TYPE>)                                                   FldPlt 915
        CASE (1,2,3,7,9)  ! Plants that can cool                                FldPlt 916
          <fo.Toutlet> = <pl:DESIGN-COOL-T>                                     FldPlt 917
          <pl;Tbulk>   = <pl:DESIGN-COOL-T> + <pl:DESIGN-DT>*0.5                FldPlt 918
        CASE DEFAULT    ! Heating only plants                                   FldPlt 919
          <fo.Toutlet> = <pl:DESIGN-HEAT-T>                                     FldPlt 920
          <pl;Tbulk>   = <pl:DESIGN-HEAT-T> - <pl:DESIGN-DT>*0.5                FldPlt 921
      END SELECT                                                                FldPlt 922
c                                                                               FldPlt 923
c              Makeup temperature (dhw)                                         FldPlt 924
      IF (<pl:TYPE> .EQ. 8)  THEN                                               FldPlt 925
        IF (<pl:DHW-INLET-SCH> .NE. 0)  THEN                                    FldPlt 926
          CALL SCHMNX(AA(1),IA(1),<pl:DHW-INLET-SCH>,                           FldPlt 927
     &                Tmax, <pl;TmakeupDes>)                                    FldPlt 928
        ELSEIF (<pl:DHW-INLET-T> .NE. UNFILD)  THEN                             FldPlt 929
          <pl;TmakeupDes> = <pl:DHW-INLET-T>                                    FldPlt 930
        ELSE                                                                    FldPlt 931
c              default to the coldest ground temperature                        FldPlt 932
          <pl;TmakeupDes> = 999.                                                FldPlt 933
          DO Month=1,12                                                         FldPlt 934
            IF (GTEMP(Month) .NE. UNFILD)                                       FldPlt 935
     &        <pl;TmakeupDes> = MIN(<pl;TmakeupDes>,GTEMP(Month))               FldPlt 936
          ENDDO                                                                 FldPlt 937
          <pl;TmakeupDes> = <pl;TmakeupDes>-460.                                FldPlt 938
        ENDIF                                                                   FldPlt 939
      ENDIF                                                                     FldPlt 940
c              reference temperature for external load calcs                    FldPlt 941
      <pl.Tref> = <fo.Toutlet>                                                  FldPlt 942
c                                                                               FldPlt 943
c              Check freezing point                                             FldPlt 944
      Jfl = <pl:FLUID>                                                          FldPlt 945
      IF (<fl:TYPE> .EQ. 1)  THEN                                               FldPlt 946
        Tfreeze = 32.                                                           FldPlt 947
      ELSE                                                                      FldPlt 948
        IF (<pl:PCT-CONC> .GT. 0.)  THEN                                        FldPlt 949
          <pl;PctConc> = <pl:PCT-CONC>                                          FldPlt 950
          CALL CurveInvert(Jpl, <fl:PCT-FT-FREEZE>,                             FldPlt 951
     &                     1,Tfreeze,Y,<pl;PctConc>, Error)                     FldPlt 952
        ELSE                                                                    FldPlt 953
          Tfreeze      = <pl:FREEZING-T>                                        FldPlt 954
          <pl;PctConc> = Curve(Jpl, <fl:PCT-FT-FREEZE>, Tfreeze,Tfreeze)        FldPlt 955
        ENDIF                                                                   FldPlt 956
      ENDIF                                                                     FldPlt 957
      IF (Tfreeze .GE. <pl.Tref>)  THEN                                         FldPlt 958
        CALL MSGSIM(-2,II,II,II,II)                                             FldPlt 959
        WRITE (IOUTPT,9006) (<pl:NAME>,II=1,8), <pl.Tref>, Tfreeze              FldPlt 960
      ENDIF                                                                     FldPlt 961
c              Set design fluid properties                                      FldPlt 962
      CALL H2OProp_fT(Jpl, <pl;Tbulk>)                                          FldPlt 963
      <pl;Viscosity> = <pl.Visc>                                                FldPlt 964
c                                                                               FldPlt 965
c                                                                               FldPlt 966
c ============ DESIGN CALCULATIONS - ITERATIVE ================================ FldPlt 967
      CASE (111)                                                                FldPlt 968
c                                                                               FldPlt 969
c              Get the supply and return circuit conditions                     FldPlt 970
      CALL FluidNode(Kfo, xR, xS,                                               FldPlt 971
     &                    <fo.Moutlet>, xM2, xM3, xMreqd,                       FldPlt 972
     &                    xT, xTmin, xTmax,                                     FldPlt 973
     &                    xPmin, <fo.Preqd>)                                    FldPlt 974
      CALL FluidNode(Kfi, xR, xS,                                               FldPlt 975
     &                    <fi.Minlet>, xM2, xM3, xMreqd,                        FldPlt 976
     &                    <fi.Tinlet>, xTmin, xTmax,                            FldPlt 977
     &                    xPmin, xPreqd)                                        FldPlt 978
c                                                                               FldPlt 979
c              Design flow                                                      FldPlt 980
      IF (<fo.Moutlet> .eq. 0.)  THEN                                           FldPlt 981
        CALL MSGSIM(-1,II,II,II,II)                                             FldPlt 982
        WRITE (IOUTPT,9008)  (<pl:NAME>,II=1,8)                                 FldPlt 983
        CALL MessageBox( NULL,                                                  FldPlt 984
     &    'Plant design error - no design flow'//char(0),                       FldPlt 985
     &    'CIRCULATION-LOOP Errors'//char(0),                                   FldPlt 986
     &    MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                  FldPlt 987
        IwinReturn = 1                                                          FldPlt 988
        Return                                                                  FldPlt 989
      ENDIF                                                                     FldPlt 990
      Msupply   = <fo.Moutlet> * <pl:SIZING-RATIO>                              FldPlt 991
      Mreturn   = <fi.Minlet>  * <pl:SIZING-RATIO>                              FldPlt 992
      <pl;Flow> = Msupply                                                       FldPlt 993
c              makeup flow (dhw)                                                FldPlt 994
      IF (<pl:TYPE> .EQ. 8  .AND.  Msupply .GT. 0.)  THEN                       FldPlt 995
        Mmakeup = MAX(0., Msupply-Mreturn)                                      FldPlt 996
c              eliminate round-off error                                        FldPlt 997
        IF (Mmakeup/Msupply .LT. 0.0001)  Mmakeup = 0.                          FldPlt 998
      ELSE                                                                      FldPlt 999
        Mmakeup = 0.                                                            FldPlt1000
      ENDIF                                                                     FldPlt1001
c                                                                               FldPlt1002
c              Inlet temperature, upstream of any pump                          FldPlt1003
      Tinlet = ( <fi.Tinlet>     * Mreturn                                      FldPlt1004
     &         + <pl;TmakeupDes> * Mmakeup) / Msupply                           FldPlt1005
c                                                                               FldPlt1006
c              Get the pressure drop across the plant                           FldPlt1007
c              Find all pressure drops                                          FldPlt1008
c                - Nodes 1-2 (heat recovery)                                    FldPlt1009
      Phtrec = 0.                                                               FldPlt1010
      IF (<f2;Xnode> .GT. 0)  THEN                                              FldPlt1011
        Kli      = <f2;Xnode>                                                   FldPlt1012
        NumItems = <li;NumItems>                                                FldPlt1013
        DO  LI=1,NumItems                                                       FldPlt1014
          Kfx    = <li;List>                                                    FldPlt1015
          Phtrec = MAX(Phtrec, <fx.Preqd>)                                      FldPlt1016
        ENDDO                                                                   FldPlt1017
      ENDIF                                                                     FldPlt1018
c                - Nodes 2-3 (series upstream)                                  FldPlt1019
      Pseries = 0.                                                              FldPlt1020
      IF (<f3;Xnode> .GT. 0)  THEN                                              FldPlt1021
        Kli      = <f3;Xnode>                                                   FldPlt1022
        NumItems = <li;NumItems>                                                FldPlt1023
        DO  LI=1,NumItems                                                       FldPlt1024
          Kfx     = <li;List>                                                   FldPlt1025
          Pseries = MAX(Pseries, <fx.Preqd>)                                    FldPlt1026
        ENDDO                                                                   FldPlt1027
      ENDIF                                                                     FldPlt1028
c                - Nodes 3-4 (parallel or series downstream)                    FldPlt1029
      Pequip = 0.                                                               FldPlt1030
      IF (<f4;Xnode> .GT. 0)  THEN                                              FldPlt1031
        Kli      = <f4;Xnode>                                                   FldPlt1032
        NumItems = <li;NumItems>                                                FldPlt1033
        DO  LI=1,NumItems                                                       FldPlt1034
          Kfx    = <li;List>                                                    FldPlt1035
          Pequip = MAX(Pequip, <fx.Preqd>)                                      FldPlt1036
        ENDDO                                                                   FldPlt1037
      ENDIF                                                                     FldPlt1038
c              Pressure rise across pump                                        FldPlt1039
      <pl;DesDP> = <fo.Preqd> + Phtrec + Pseries + Pequip                       FldPlt1040
c                      ^ pressure loss outside plant                            FldPlt1041
c                                                                               FldPlt1042
c              Design the pump                                                  FldPlt1043
      IF (Jpm .GT. 0)  THEN                                                     FldPlt1044
        SELECT CASE (<pl:PUMP-LOCN>)                                            FldPlt1045
          CASE (1)  ! Supply side                                               FldPlt1046
            <pm.Mfluid> = Msupply                                               FldPlt1047
          CASE (2)  ! Return side                                               FldPlt1048
            <pm.Mfluid> = Mreturn                                               FldPlt1049
        END SELECT                                                              FldPlt1050
        <pm.Psetpt> = <pl;DesDP>                                                FldPlt1051
        CALL PumpAlgs(111, Jpm)                                                 FldPlt1052
      ENDIF                                                                     FldPlt1053
c                                                                               FldPlt1054
c              Set the parameters at each node                                  FldPlt1055
c              Nodes 1&4                                                        FldPlt1056
      SELECT CASE (<pl:PUMP-LOCN>)                                              FldPlt1057
        CASE (0)  ! No Pump                                                     FldPlt1058
          <f1.Tfluid> = Tinlet                                                  FldPlt1059
          <f4.Tfluid> = <fo.Toutlet>                                            FldPlt1060
        CASE (1)  ! Supply side                                                 FldPlt1061
          <f1.Tfluid> = Tinlet                                                  FldPlt1062
          <f4.Tfluid> = <fo.Toutlet> - <pm.dT>                                  FldPlt1063
        CASE (2)  ! Return side                                                 FldPlt1064
          <f1.Tfluid> = Tinlet + <pm.dT>                                        FldPlt1065
          <f4.Tfluid> = <fo.Toutlet>                                            FldPlt1066
      END SELECT                                                                FldPlt1067
c              Node 2 - no heat recovery is active at design conditions         FldPlt1068
      <f2.Tfluid> = <f1.Tfluid>                                                 FldPlt1069
c              Node 3 - after upstream series equipment                         FldPlt1070
      IF (<f3;Xnode> .GT. 0)  THEN                                              FldPlt1071
        <f3.Tfluid> = (<f1.Tfluid> + <f4.Tfluid>) * 0.5                         FldPlt1072
      ELSE                                                                      FldPlt1073
        <f3.Tfluid> = <f2.Tfluid>                                               FldPlt1074
      ENDIF                                                                     FldPlt1075
      <f3.Tsetpt> = <f3.Tfluid>                                                 FldPlt1076
      <f4.Tsetpt> = <f4.Tfluid>                                                 FldPlt1077
c                                                                               FldPlt1078
c              Design load                                                      FldPlt1079
c                - cooling                                                      FldPlt1080
      SELECT CASE (<pl:TYPE>)                                                   FldPlt1081
        CASE (1,2,3,7,9)  ! CHW, 2-pipe, Refg-CHW, WLHP, CW                     FldPlt1082
          <pl;QcoolDT> = <f1.Tfluid> - <f4.Tfluid>                              FldPlt1083
          <pl;Qcool>   = Msupply * <pl.Btuh/GPM-F> * <pl;QcoolDT>               FldPlt1084
          <pl;Qcool>   = MAX(0., <pl;Qcool>)                                    FldPlt1085
      END SELECT                                                                FldPlt1086
c                - heating                                                      FldPlt1087
      SELECT CASE (<pl:TYPE>)                                                   FldPlt1088
        CASE (2,7)  ! 2-pipe, WLHP                                              FldPlt1089
          <pl;QheatDT> = <pl:DESIGN-DT>                                         FldPlt1090
          <pl;Qheat>   = <pl;MiscHeat> * <pl:SIZING-RATIO>                      FldPlt1091
        CASE (4,8)  ! Heating only loops                                        FldPlt1092
          <pl;QheatDT> = <f4.Tfluid> - <f1.Tfluid>                              FldPlt1093
          <pl;Qheat>   = Msupply * <pl.Btuh/GPM-F> * <pl;QheatDT>               FldPlt1094
      END SELECT                                                                FldPlt1095
      <pl;Qheat> = MAX(0., <pl;Qheat>)                                          FldPlt1096
c                                                                               FldPlt1097
c              Design the equipment                                             FldPlt1098
c                - Node 3 - series upstream                                     FldPlt1099
      <f3.Mfluid> = <pl;Flow>                                                   FldPlt1100
      IF (<f3;Xnode> .GT. 0)  THEN                                              FldPlt1101
        Kli         = <f3;Xnode>                                                FldPlt1102
        NumItems    = <li;NumItems>                                             FldPlt1103
        DO  LI=1,NumItems                                                       FldPlt1104
          CALL PlantEquipAlgs(Mode, <li;List>)                                  FldPlt1105
        ENDDO                                                                   FldPlt1106
      ENDIF                                                                     FldPlt1107
c                - Node 4 - series downstream or parallel                       FldPlt1108
      <f4.Mfluid> = <pl;Flow>                                                   FldPlt1109
      IF (<f4;Xnode> .GT. 0)  THEN                                              FldPlt1110
        Kli         = <f4;Xnode>                                                FldPlt1111
        NumItems    = <li;NumItems>                                             FldPlt1112
        DO  LI=1,NumItems                                                       FldPlt1113
          CALL PlantEquipAlgs(Mode, <li;List>)                                  FldPlt1114
        ENDDO                                                                   FldPlt1115
      ENDIF                                                                     FldPlt1116
c                                                                               FldPlt1117
c              Outlet pressure                                                  FldPlt1118
      IF (Jpm .GT. 0)  THEN                                                     FldPlt1119
        <fo.Poutlet> = <pm;DesHead> - (Phtrec + Pseries + Pequip)               FldPlt1120
      ELSE                                                                      FldPlt1121
        CALL FluidNode(f4, xR, xS,                                              FldPlt1122
     &                     xM, xM2, xM3, xMreqd,                                FldPlt1123
     &                     xT, xTmin, xTmax,                                    FldPlt1124
     &                     <fo.Poutlet>, xPreqd)                                FldPlt1125
      ENDIF                                                                     FldPlt1126
c                                                                               FldPlt1127
c                                                                               FldPlt1128
c ============ DESIGN CALCULATIONS - RECONCILIATION =========================== FldPlt1129
      CASE (119)                                                                FldPlt1130
c                                                                               FldPlt1131
c              Check if design capacity reasonable                              FldPlt1132
      SELECT CASE (<pl:TYPE>)                                                   FldPlt1133
        CASE (1,3,4,8,9)                                                        FldPlt1134
          Qequip   = 0.                                                         FldPlt1135
          IF (<f3;Xnode> .GT. 0)  THEN                                          FldPlt1136
            Kli      = <f3;Xnode>                                               FldPlt1137
            NumItems = <li;NumItems>                                            FldPlt1138
            DO  LI=1,NumItems                                                   FldPlt1139
              Kfx    = <li;List>                                                FldPlt1140
              Qequip = Qequip + <fx.Qfluid>                                     FldPlt1141
            ENDDO                                                               FldPlt1142
          ENDIF                                                                 FldPlt1143
          IF (<f4;Xnode> .GT. 0)  THEN                                          FldPlt1144
            Kli      = <f4;Xnode>                                               FldPlt1145
            NumItems = <li;NumItems>                                            FldPlt1146
            DO  LI=1,NumItems                                                   FldPlt1147
              Kfx    = <li;List>                                                FldPlt1148
              Qequip = Qequip + <fx.Qfluid>                                     FldPlt1149
            ENDDO                                                               FldPlt1150
          ENDIF                                                                 FldPlt1151
          IF (<pl;PrimaryEquip> .GT. 0  .AND.                                   FldPlt1152
     &        Qequip .LT. (<pl;Qcool>+<pl;Qheat>)*0.95)  THEN                   FldPlt1153
            CALL MSGSIM(-3,II,II,II,II)                                         FldPlt1154
            WRITE (IOUTPT,9004)  (<pl:NAME>,II=1,8),                            FldPlt1155
     &                            <pl;Qcool>+<pl;Qheat>, Qequip                 FldPlt1156
          ENDIF                                                                 FldPlt1157
      END SELECT                                                                FldPlt1158
c                                                                               FldPlt1159
c              Initialize start T                                               FldPlt1160
      SELECT CASE (<pl:TYPE>)                                                   FldPlt1161
        CASE (1,3,9)    ! CHW, CW (cooling only)                                FldPlt1162
          <pl.LastStartT> = <pl:DESIGN-COOL-T>                                  FldPlt1163
        CASE DEFAULT  ! Loops that can heat - assume winter start               FldPlt1164
          <pl.LastStartT> = <pl:DESIGN-HEAT-T>                                  FldPlt1165
      END SELECT                                                                FldPlt1166
c                                                                               FldPlt1167
c              Pump head setpoint                                               FldPlt1168
      IF (<pl:HD-SETPT> .GT. 0.)  THEN                                          FldPlt1169
        <pl;HeadSetpt> = <pl:HD-SETPT>                                          FldPlt1170
      ELSE                                                                      FldPlt1171
        SELECT CASE (<pl:HD-SENS-LOCN>)                                         FldPlt1172
          CASE (1)  ! Remote circuits                                           FldPlt1173
c              out in loop; set from within circuit                             FldPlt1174
          CASE (2)  ! Leaving plant                                             FldPlt1175
c              sensor located across plant inlet/outlet - the setpoint          FldPlt1176
c              must overcome the head of both the end-uses devices              FldPlt1177
c              and the piping                                                   FldPlt1178
            <pl;HeadSetpt> = <fo.Preqd> * <pl:HD-SETPT-RATI>                    FldPlt1179
     &                     + <pl:HD-SETPT-RNG>*0.5                              FldPlt1180
        END SELECT                                                              FldPlt1181
      ENDIF  ! pl:HD-SETPT                                                      FldPlt1182
c              check if at least the required value                             FldPlt1183
      SELECT CASE (<pl:HD-SENS-LOCN>)                                           FldPlt1184
        CASE (1)  ! Remote circuits                                             FldPlt1185
          Preqd = 0.                                                            FldPlt1186
        CASE (2)  ! Leaving plant                                               FldPlt1187
          Preqd = <fo.Preqd>                                                    FldPlt1188
      END SELECT                                                                FldPlt1189
      IF (<pl;HeadSetpt> .LT. Preqd*.98)  THEN                                  FldPlt1190
        CALL MSGSIM(-2,II,II,II,II)                                             FldPlt1191
        WRITE (IOUTPT,9005) (<pl:NAME>,II=1,8),                                 FldPlt1192
     &                         <pl;HeadSetpt>, Preqd                            FldPlt1193
      ENDIF                                                                     FldPlt1194
c                                                                               FldPlt1195
c              Minimum flow below which a bypass valve modulates                FldPlt1196
      <pl;FlowMin> = <pl;Flow> * <pl:MIN-FLOW>                                  FldPlt1197
      IF (<pl;Flow> .GT. 0.)  <pl;1/Flow> = 1.0 / <pl;Flow>                     FldPlt1198
c                                                                               FldPlt1199
c              Checks for DHW plant                                             FldPlt1200
      IF (<pl:TYPE> .EQ. 8)  THEN                                               FldPlt1201
        IF (Jpm .eq. 0  .and.  <fi.Minlet> .gt. 0.)  THEN                       FldPlt1202
c              no pump - no return flow allowed                                 FldPlt1203
          CALL MSGSIM(-1,II,II,II,II)                                           FldPlt1204
          WRITE (IOUTPT,9007)  (<pl:NAME>,II=1,8)                               FldPlt1205
          CALL MessageBox( NULL,                                                FldPlt1206
     &      'Plant design error - no recirc pump'//char(0),                     FldPlt1207
     &      'CIRCULATION-LOOP Errors'//char(0),                                 FldPlt1208
     &      MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                FldPlt1209
          IwinReturn = 1                                                        FldPlt1210
        ENDIF                                                                   FldPlt1211
      ENDIF    ! pl:TYPE                                                        FldPlt1212
c                                                                               FldPlt1213
c                                                                               FldPlt1214
c ============ ATTACHMENTS ==================================================== FldPlt1215
c                                                                               FldPlt1216
c              Initial attachments                                              FldPlt1217
      CASE (201)                                                                FldPlt1218
c                                                                               FldPlt1219
c              ?? temporary code to create fluid circuits and                   FldPlt1220
c                 transfer parameters                                           FldPlt1221
        <pl;SupplyCkt>     = NewFluidCircuit(Jpl, 1)                            FldPlt1222
        <pl;ReturnCkt>     = NewFluidCircuit(Jpl, 2)                            FldPlt1223
c                                                                               FldPlt1224
c              Component pointers, schedules, and curves                        FldPlt1225
        <pl:PRIMARY-PLANT> = Jcomponent(2, <pl:PRIMARY-PLANT>)                  FldPlt1226
        <pl:PUMP>          = Jcomponent( 1, <pl:PUMP>)                          FldPlt1227
        <pl:FLUID>         = Jcomponent(15, <pl:FLUID>)                         FldPlt1228
        <pl:RATED-FLUID>   = Jcomponent(15, <pl:RATED-FLUID>)                   FldPlt1229
        <pl:HEAT-EQUIP-CT> = Jcomponent(11, <pl:HEAT-EQUIP-CT>)                 FldPlt1230
        <pl:COOL-EQUIP-CT> = Jcomponent(11, <pl:COOL-EQUIP-CT>)                 FldPlt1231
        <pl:AUX-METER>     = Jcomponent(13, <pl:AUX-METER>)                     FldPlt1232
        <pl:COST-DATA>     = Jcomponent(18, <pl:COST-DATA>)                     FldPlt1233
c                                                                               FldPlt1234
        <pl:HEAT-SCH>      = Jsched(<pl:HEAT-SCH>)                              FldPlt1235
        <pl:COOL-SCH>      = Jsched(<pl:COOL-SCH>)                              FldPlt1236
        <pl:PUMP-SCH>      = Jsched(<pl:PUMP-SCH>)                              FldPlt1237
        <pl:HT-RESET-SCH>  = Jsched(<pl:HT-RESET-SCH>)                          FldPlt1238
        <pl:HT-SETPT-SCH>  = Jsched(<pl:HT-SETPT-SCH>)                          FldPlt1239
        <pl:CL-RESET-SCH>  = Jsched(<pl:CL-RESET-SCH>)                          FldPlt1240
        <pl:CL-SETPT-SCH>  = Jsched(<pl:CL-SETPT-SCH>)                          FldPlt1241
        <pl:TUNNEL-SCH>    = Jsched(<pl:TUNNEL-SCH>)                            FldPlt1242
        <pl:AUX-SCH>       = Jsched(<pl:AUX-SCH>)                               FldPlt1243
        <pl:DHW-INLET-SCH> = Jsched(<pl:DHW-INLET-SCH>)                         FldPlt1244
c                                                                               FldPlt1245
        <pl:SNAP-ZONE>     = Jzone(<pl:SNAP-ZONE>)                              FldPlt1246
c                                                                               FldPlt1247
c ************ temporary code ******************************* ??                FldPlt1248
      <lp;HCAP_RATIO>    = 1.                                                   FldPlt1249
      <lp;CCAP_RATIO>    = 1.                                                   FldPlt1250
      <lp:HT-SETPT-T>    = <pl:DESIGN-HEAT-T>                                   FldPlt1251
      <lp:CL-SETPT-T>    = <pl:DESIGN-COOL-T>                                   FldPlt1252
      <lp:MIN-RESET-T>   = <pl:MIN-RESET-T>                                     FldPlt1253
      <lp:CL-SETPT-CTRL> = <pl:CL-SETPT-CTRL>                                   FldPlt1254
      <lp:HT-SETPT-CTRL> = <pl:HT-SETPT-CTRL>                                   FldPlt1255
      <pl.Btuh/GPM-F>    = 500.4                                                FldPlt1256
      <lp:MIN-ALARM-T>   = <pl:MIN-ALARM-T>                                     FldPlt1257
      <lp:MAX-ALARM-T>   = <pl:MAX-ALARM-T>                                     FldPlt1258
c                                                                               FldPlt1259
c              Second level of attachments                                      FldPlt1260
      CASE (202)                                                                FldPlt1261
        IF (Jpm .GT. 0)  THEN                                                   FldPlt1262
          <pm;XComponent> = Jpl                                                 FldPlt1263
          <pm;Plant>      = Jpl                                                 FldPlt1264
        ENDIF                                                                   FldPlt1265
c                                                                               FldPlt1266
c              Create nodes                                                     FldPlt1267
      CASE (203)                                                                FldPlt1268
c              Inlet (return) and outlet (supply) to circuits.  Note            FldPlt1269
c              that the inlet will not utilize an end-use block                 FldPlt1270
        Keu = NewEndUse(Jpl)                                                    FldPlt1271
        <pl;InletNode>  = NewNode(1, Jpl,Jpl,Jpl,0, 52,1,  0, 1.)               FldPlt1272
        <pl;OutletNode> = NewNode(1, Jpl,Jpl,Jpl,0, 51,2,Keu, 1.)               FldPlt1273
c              Intermediate nodes                                               FldPlt1274
        <pl;Node1> = NewNode(1, 0,Jpl,Jpl,0, 53,-1,0, 1.)                       FldPlt1275
        <pl;Node2> = NewNode(1, 0,Jpl,Jpl,0, 53,-2,0, 1.)                       FldPlt1276
        <pl;Node3> = NewNode(1, 0,Jpl,Jpl,0, 53,-3,0, 1.)                       FldPlt1277
        <pl;Node4> = NewNode(1, 0,Jpl,Jpl,0, 53,-4,0, 1.)                       FldPlt1278
c                                                  ^node ID for linking         FldPlt1279
c              auxiliary electrical                                             FldPlt1280
        Jme = <pl:AUX-METER>                                                    FldPlt1281
        <pl:AUX-METER> = NewNode(1, Jpl,Jpl,Jpl,Jme, 11,2,7, 1.)                FldPlt1282
c                                                                               FldPlt1283
c              Hours of operation                                               FldPlt1284
        <pl;s8> = NewStat8(Jpl, <#fi.Minlet>, 1, 0., 0.)                        FldPlt1285
c                                                                               FldPlt1286
c              Links, lists                                                     FldPlt1287
      CASE (205)                                                                FldPlt1288
c              Must have circuits and primary equipment                         FldPlt1289
        IF (<fi;Xnode> .EQ. 0)  THEN                                            FldPlt1290
          CALL MSGSIM(-1,II,II,II,II)                                           FldPlt1291
          WRITE (IOUTPT,9001)  (<pl:NAME>,II=1,8)                               FldPlt1292
          CALL MessageBox( NULL,                                                FldPlt1293
     &      'Plant design error - no return circuits'//char(0),                 FldPlt1294
     &      'CIRCULATION-LOOP Errors'//char(0),                                 FldPlt1295
     &      MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                FldPlt1296
          IwinReturn = 1                                                        FldPlt1297
        ENDIF                                                                   FldPlt1298
        IF (<fo;Xnode> .EQ. 0)  THEN                                            FldPlt1299
          CALL MSGSIM(-1,II,II,II,II)                                           FldPlt1300
          WRITE (IOUTPT,9002)  (<pl:NAME>,II=1,8)                               FldPlt1301
          CALL MessageBox( NULL,                                                FldPlt1302
     &      'Plant design error - no supply circuits'//char(0),                 FldPlt1303
     &      'CIRCULATION-LOOP Errors'//char(0),                                 FldPlt1304
     &      MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                FldPlt1305
          IwinReturn = 1                                                        FldPlt1306
        ENDIF                                                                   FldPlt1307
        <pl;PrimaryEquip> = <f2;Xnode> + <f3;Xnode> + <f4;Xnode>                FldPlt1308
        IF (<pl;PrimaryEquip> .EQ. 0)  THEN                                     FldPlt1309
          CALL MSGSIM(-2,II,II,II,II)                                           FldPlt1310
          WRITE (IOUTPT,9003)  (<pl:NAME>,II=1,8)                               FldPlt1311
        ENDIF                                                                   FldPlt1312
c                                                                               FldPlt1313
c              List of all nodes associated with this system                    FldPlt1314
        CALL ListNodes(<pl;SystemNodes>, Jpl,0,0,0, 0,0)                        FldPlt1315
c              List of plant/primary equipment nodes                            FldPlt1316
        CALL ListNodes(<pl;SubSysNodes>, Jpl,Jpl,0,0, 0,0)                      FldPlt1317
c              List of external circuit nodes                                   FldPlt1318
        CALL ListAdd(<pl;CktNodes>, <fi;Xnode>)                                 FldPlt1319
        CALL ListAdd(<pl;CktNodes>, <fo;Xnode>)                                 FldPlt1320
c                                                                               FldPlt1321
c              ?? temporary to specify circuits for head setpt control          FldPlt1322
c                 make keywords once circuit separate component                 FldPlt1323
        IF (<pl:HD-SENS-LOCN> .EQ. 1                    ! load reset            FldPlt1324
     &                          .AND.  <pl:HD-SETPT-CTRL> .NE. 2)  THEN         FldPlt1325
          <pl;HD-SUPPLY-CKT> = <pl;SupplyCkt>                                   FldPlt1326
          <pl;HD-RETURN-CKT> = <pl;ReturnCkt>                                   FldPlt1327
        ENDIF                                                                   FldPlt1328
c                                                                               FldPlt1329
c              Histories                                                        FldPlt1330
      CASE (208)                                                                FldPlt1331
c              Histories of node/outlet temperature and pressures               FldPlt1332
        <pl;Node1Hsty>  = NewHistory(0,-Jpl,Jpl, 0, f1,                         FldPlt1333
     &                      5, 0, 1.,                                           FldPlt1334
     &                      <#f1.Tfluid>, <sp:ERROR-T>   , 1,                   FldPlt1335
     &                      <#f1.Pfluid>, <sp:ERROR-HEAD>, 2,                   FldPlt1336
     &                      0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0)                     FldPlt1337
        IF (<f2;Xnode> .GT. 0)                                                  FldPlt1338
     &  <pl;Node2Hsty>  = NewHistory(0,-Jpl,Jpl, f2, f2,                        FldPlt1339
     &                      5, 0, 1.,                                           FldPlt1340
     &                      <#f2.Tfluid>, <sp:ERROR-T>   , 1,                   FldPlt1341
     &                      <#f2.Pfluid>, <sp:ERROR-HEAD>, 2,                   FldPlt1342
     &                      0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0)                     FldPlt1343
        IF (<f3;Xnode> .GT. 0)                                                  FldPlt1344
     &  <pl;Node3Hsty>  = NewHistory(0,-Jpl,Jpl, f3, f3,                        FldPlt1345
     &                      5,  0, 1.,                                          FldPlt1346
     &                      <#f3.Tfluid>, <sp:ERROR-T>   , 1,                   FldPlt1347
     &                      <#f3.Pfluid>, <sp:ERROR-HEAD>, 2,                   FldPlt1348
     &                      0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0)                     FldPlt1349
        IF (<f4;Xnode> .GT. 0)                                                  FldPlt1350
     &  <pl;Node4Hsty>  = NewHistory(0,-Jpl,Jpl, f4, f4,                        FldPlt1351
     &                      5,  0, 1.,                                          FldPlt1352
     &                      <#f4.Tfluid>, <sp:ERROR-T>   , 1,                   FldPlt1353
     &                      <#f4.Pfluid>, <sp:ERROR-HEAD>, 2,                   FldPlt1354
     &                      0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0)                     FldPlt1355
        <pl;OutletHsty> = NewHistory(Jpl,Jpl,Jpl,  <fo;Xnode>, Kfo,             FldPlt1356
     &                      5, 10, 1.25,                                        FldPlt1357
     &                      <#fo.Toutlet>, <sp:ERROR-T>   , 1,                  FldPlt1358
     &                      <#fo.Poutlet>, <sp:ERROR-HEAD>, 2,                  FldPlt1359
     &                      0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0)                     FldPlt1360
c                                                                               FldPlt1361
c              History lists                                                    FldPlt1362
      CASE (209)                                                                FldPlt1363
c              plant/primary equipment/loops system                             FldPlt1364
        CALL ListHstys(<pl;SystemHstys>, Jpl, 0, 0)                             FldPlt1365
c              plant/primary equipment subsystem                                FldPlt1366
        CALL ListHstys(<pl;SubSysHstys>, 0, Jpl, 0)                             FldPlt1367
c              internal nodes subsystem                                         FldPlt1368
        CALL ListHstys(<pl;IntNodeHstys>, 0, -Jpl, Jpl)                         FldPlt1369
c                                                                               FldPlt1370
      CASE (210)                                                                FldPlt1371
        IF (<pl;Previous> .EQ. 0)  WRITE (IOUTPT, 9201)                         FldPlt1372
        WRITE (IOUTPT, 9202)  (<pl:NAME>,II=1,8), Jpl,                          FldPlt1373
     &                        Kfi, Kfo, f1, f2, f3, f4, Jpm                     FldPlt1374
c                                                                               FldPlt1375
c                                                                               FldPlt1376
      END SELECT  ! Mode                                                        FldPlt1377
c                                                                               FldPlt1378
      RETURN                                                                    FldPlt1379
c                                                                               FldPlt1380
c                                                                               FldPlt1381
c              Message formats                                                  FldPlt1382
 9001 FORMAT(14x,'Plant: ',8A4,' has no return circuits'               )        FldPlt1383
 9002 FORMAT(14x,'Plant: ',8A4,' has no supply circuits'               )        FldPlt1384
 9003 FORMAT(14x,'Plant: ',8A4,' has no primary equipment.'            /        FldPlt1385
     &       14X,'The supply temperature setpoint will be maintained'  /        FldPlt1386
     &       14X,'all hours, and no primary equipment energy will be ' /        FldPlt1387
     &       14X,'calculated.'                                         )        FldPlt1388
 9004 FORMAT(14x,'Plant: ',8A4,' has a design load'                    /        FldPlt1389
     &       14x,'of ',F8.0,' Btuh, but the design equipment capacity' /        FldPlt1390
     &       14x,'is only ',F8.0                                       )        FldPlt1391
 9005 FORMAT(14X,'Plant: ',8A4,' has a specified setpoint'             /        FldPlt1392
     &       14X,'less than required.  Coils may be starved at peak'   /        FldPlt1393
     &       14X,'conditions, and energy underestimated.'              /        FldPlt1394
     &       14X,'Specified head:',F6.1,' Required:',F6.1              )        FldPlt1395
 9006 FORMAT(14X,'Plant: ',8A4,' has a specified design'               /        FldPlt1396
     &       14X,'temperature less than the freezing point.'           /        FldPlt1397
     &       14X,'Design/Freeze:',2F5.1                                )        FldPlt1398
 9007 FORMAT(14X,'DHW Plant: ',8A4,' has a return flow'                /        FldPlt1399
     &       14X,'but does not have a pump.'                           )        FldPlt1400
 9008 FORMAT(14X,'Plant: ',8A4,' has no design flow.'                  /        FldPlt1401
     &       14X,'Verify that plant is attached to one or more loads.' )        FldPlt1402
 9101 FORMAT(14X,'Central Plant: ',8A4,' failed to'                    /        FldPlt1403
     &       14X,'converge in 10 iterations.  Number failed:',I3       /        FldPlt1404
     &       14X,'Mon/Day/Hr: ',I2,'/',I2,'/',I2                       )        FldPlt1405
 9201 FORMAT(/' FLUID-PLANTs                           Jpl       Kfi',          FldPlt1406
     &'       Kfo        f1        f2        f3        f4       Jpm' /          FldPlt1407
     &1x,32('-'),8('  --------'))                                               FldPlt1408
 9202 FORMAT(1x,8A4,8I10)                                                       FldPlt1409
c                                                                               FldPlt1410
      CONTAINS                                                                  FldPlt1411
c ============== PlantOff ===================================================== FldPlt1412
      Subroutine PlantOff                                                       FldPlt1413
c                                                                               FldPlt1414
c              Turns off the plant                                              FldPlt1415
      <pl.CtrlMode'> = OffMode                                                  FldPlt1416
      <pl.Qnet>      = 0.                                                       FldPlt1417
      <fi.Minlet>    = 0.                                                       FldPlt1418
      <fo.Moutlet>   = 0.                                                       FldPlt1419
      <fi.Pinlet>    = 0.                                                       FldPlt1420
      <fo.Poutlet>   = 0.                                                       FldPlt1421
      <pl.LastCtrlMode> = <pl.CtrlMode'>                                        FldPlt1422
c              Simulate all equip to set outputs and pick up aux loads          FldPlt1423
      EquipMode = 30                                                            FldPlt1424
      IF (Jpm .GT. 0)  THEN                                                     FldPlt1425
        CALL PumpAlgs(EquipMode, Jpm)                                           FldPlt1426
      ENDIF                                                                     FldPlt1427
      IF (<f2;Xnode> .GT. 0)  THEN                                              FldPlt1428
        Kli         = <f2;Xnode>                                                FldPlt1429
        NumItems    = <li;NumItems>                                             FldPlt1430
        DO  LI=1,NumItems                                                       FldPlt1431
          Kfx         = <li;List>                                               FldPlt1432
          <fx.Mfluid> = 0.                                                      FldPlt1433
          CALL PlantEquipAlgs(EquipMode, Kfx)                                   FldPlt1434
        ENDDO                                                                   FldPlt1435
      ENDIF                                                                     FldPlt1436
      IF (<f3;Xnode> .GT. 0)  THEN                                              FldPlt1437
        Kli         = <f3;Xnode>                                                FldPlt1438
        NumItems    = <li;NumItems>                                             FldPlt1439
        DO  LI=1,NumItems                                                       FldPlt1440
          Kfx         = <li;List>                                               FldPlt1441
          <fx.Mfluid> = 0.                                                      FldPlt1442
          CALL PlantEquipAlgs(EquipMode, Kfx)                                   FldPlt1443
          CALL PlantEquipAlgs(Mode+7, Kfx)                                      FldPlt1444
        ENDDO                                                                   FldPlt1445
      ENDIF                                                                     FldPlt1446
      IF (<f4;Xnode> .GT. 0)  THEN                                              FldPlt1447
        Kli         = <f4;Xnode>                                                FldPlt1448
        NumItems    = <li;NumItems>                                             FldPlt1449
        DO  LI=1,NumItems                                                       FldPlt1450
          Kfx         = <li;List>                                               FldPlt1451
          <fx.Mfluid> = 0.                                                      FldPlt1452
          CALL PlantEquipAlgs(EquipMode, Kfx)                                   FldPlt1453
          CALL PlantEquipAlgs(Mode+7, Kfx)                                      FldPlt1454
        ENDDO                                                                   FldPlt1455
      ENDIF                                                                     FldPlt1456
c              Set iteration flags on attached fluid circuits                   FldPlt1457
      IF (Mode .EQ. 31)  THEN                                                   FldPlt1458
        CALL CnvgCheck(0, <pl;OutletHsty>)  ! loads to plant                    FldPlt1459
      ELSE                                                                      FldPlt1460
        CALL CnvgCheck(1, <pl;OutletHsty>)  ! plant to Loads                    FldPlt1461
      ENDIF                                                                     FldPlt1462
c                                                                               FldPlt1463
      End Subroutine PlantOff                                                   FldPlt1464
c                                                                               FldPlt1465
      END                                                                       FldPlt1466
C ##############################################################################FlCkAl   2
C ##############################################################################FlCkAl   3
C ##############################################################################FlCkAl   4
C ##############################################################################FlCkAl   5
C ##########                                                          ##########FlCkAl   6
C ##########                      FLUID CIRCUITS                      ##########FlCkAl   7
C ##########                                                          ##########FlCkAl   8
C ##############################################################################FlCkAl   9
C ##############################################################################FlCkAl  10
C ##############################################################################FlCkAl  11
C ##############################################################################FlCkAl  12
c                                                                               FlCkAl  13
      SUBROUTINE FluidCircuitAlgs(Mode, Jfc)                                    FlCkAl  14
c                                                                               FlCkAl  15
c              Selects the correct fluid circuit simulation                     FlCkAl  16
c              algorithm                                                        FlCkAl  17
c                                                                               FlCkAl  18
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
c                                                                               FlCkAl  21
c                                                                               FlCkAl  22
      SELECT CASE (<fc:ALGORITHM>)                                              FlCkAl  23
        CASE (1)  ! Supply circuit                                              FlCkAl  24
          CALL FluidCircuit_Supply(Mode, Jfc)                                   FlCkAl  25
        CASE (2)  ! Return circuit                                              FlCkAl  26
          CALL FluidCircuit_Return(Mode, Jfc)                                   FlCkAl  27
      END SELECT                                                                FlCkAl  28
c                                                                               FlCkAl  29
      RETURN                                                                    FlCkAl  30
      END                                                                       FlCkAl  31
      Subroutine NewFluidBypass(Jna, Jpl, Type, Flow, Head,                     FlBpNew  2
     &                                      JfcSup, JfcRet)                     FlBpNew  3
                                                                                FlBpNew  4
c              Creates a bypass recirculation controller                        FlBpNew  5
                                                                                FlBpNew  6
c              Jna      Parent of controller                                    FlBpNew  7
c              Jpl      Parent central plant                                    FlBpNew  8
c              Type     1=Manual  2=Flow limiting                               FlBpNew  9
c              GPM      Design flow, gpm                                        FlBpNew 10
c              Head     Head at design flow, ft                                 FlBpNew 11
c              JfcSup   Pointer to supply circuit                               FlBpNew 12
c              JfcRet   Pointer to return circuit                               FlBpNew 13
                                                                                FlBpNew 14
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                         /IAX/    2
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
                                                                                FlBpNew 19
      Data NameFB /4H$Kfb/                                                      FlBpNew 20
                                                                                FlBpNew 21
      Integer Type                                                              FlBpNew 22
      Save    Kfb                                                               FlBpNew 23
                                                                                FlBpNew 24
c              Create record and link                                           FlBpNew 25
      KfbNew = NewRecord(<+fb~Len>)                                             FlBpNew 26
      IF (Ifb .eq. 0)  THEN                                                     FlBpNew 27
        Ifb       = KfbNew                                                      FlBpNew 28
      ELSE                                                                      FlBpNew 29
        <fb;Next> = KfbNew                                                      FlBpNew 30
      ENDIF                                                                     FlBpNew 31
      Kfb        = KfbNew                                                       FlBpNew 32
      <fb;Ident> = NameFB                                                       FlBpNew 33
                                                                                FlBpNew 34
c              Store parameters                                                 FlBpNew 35
      <fb;Parent> = Jna                                                         FlBpNew 36
      <fb;Plant>  = Jpl                                                         FlBpNew 37
      <fb:Type>   = Type                                                        FlBpNew 38
      <fb:Flow>   = Flow                                                        FlBpNew 39
      <fb:Head>   = Head                                                        FlBpNew 40
      <fb:SupplyCkt> = JfcSup                                                   FlBpNew 41
      <fb:ReturnCkt> = JfcRet                                                   FlBpNew 42
                                                                                FlBpNew 43
      Return                                                                    FlBpNew 44
      End                                                                       FlBpNew 45
      Subroutine FluidBypass(Mode, Kfb)                                         FlBp     2
                                                                                FlBp     3
c              Simulates a controller that recirculates fluid from a            FlBp     4
c              supply circuit to a return circuit                               FlBp     5
                                                                                FlBp     6
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
                                                                                FlBp    12
      COMMON  /PlntKy/ CHW, Pipe2, loop3, HW, loop5, STM, WLHP, DHW,            /PlntKy/ 2
     &                 CW, Deleted, Pipe2h, WLHPh, COGEN, NoType,               /PlntKy/ 3
     &                 Fixed, OA, Sch, Load,  Zone, Outdoor,                    /PlntKy/ 4
     &                 Standby, Demand, Snap, Scheduled,                        /PlntKy/ 5
     &                 CONSTANT, VARIABLE, ModeText(4),                         /PlntKy/ 6
     &                 OffMode, Floating, HeatMode, CoolMode, ElecMode,         /PlntKy/ 7
     &                 AtCoils, EnterLoop, AtPump,                              /PlntKy/ 8
     &                 INDOORS, OUTDOORS, TUNNEL, UNDERGROUND,                  /PlntKy/ 9
     &                 PRIMARY, SECONDARY,                                      /PlntKy/10
     &                 DIRECT, HX,                                              /PlntKy/11
     &                 Water, Ethylene, Propylene, Brine                        /PlntKy/12
      INTEGER          CHW, Pipe2, loop3, HW, loop5, STM, WLHP, DHW,            /PlntKy/13
     &                 CW, Deleted, Pipe2h, WLHPh, COGEN, NoType,               /PlntKy/14
     &                 Fixed, OA, Sch, Load,  Zone, Outdoor,                    /PlntKy/15
     &                 Standby, Demand, Snap, Scheduled,                        /PlntKy/16
     &                 CONSTANT, VARIABLE, ModeText,                            /PlntKy/17
     &                 OffMode, Floating, HeatMode, CoolMode, ElecMode,         /PlntKy/18
     &                 AtCoils, EnterLoop, AtPump,                              /PlntKy/19
     &                 INDOORS, OUTDOORS, TUNNEL, UNDERGROUND,                  /PlntKy/20
     &                 PRIMARY, SECONDARY,                                      /PlntKy/21
     &                 DIRECT, HX,                                              /PlntKy/22
     &                 Water, Ethylene, Propylene, Brine                        /PlntKy/23
                                                                                FlBp    14
      Integer  Xfi, Xfo                                                         FlBp    15
      Real     Mrecirc                                                          FlBp    16
                                                                                FlBp    17
      Jpl = <fb;Plant>                   ! Central plant                        FlBp    18
      Kfi = <fb;SupplyNode>              ! Fluid inlet                          FlBp    19
      Xfi = <fi;Xnode>                   ! Xfaced inlet                         FlBp    20
      Kfo = <fb;ReturnNode>              ! Fluid outlet                         FlBp    21
      Xfo = <fo;Xnode>                   ! Xfaced outlet                        FlBp    22
                                                                                FlBp    23
      SELECT CASE (Mode)                                                        FlBp    24
c                                                                               FlBp    25
c                                                                               FlBp    26
c ============ HOURLY SIMULATION ============================================== FlBp    27
      CASE (30,31)                                                              FlBp    28
                                                                                FlBp    29
c              Recirculation flow; only when pump is on                         FlBp    30
      IF (<pl.PumpMode> .eq. OffMode)  THEN                                     FlBp    31
        Mrecirc = 0.                                                            FlBp    32
        Mreqd   = 0.                                                            FlBp    33
      ELSE                                                                      FlBp    34
        Mreqd   = <fb:Flow>*<pl.RunFrac>                                        FlBp    35
        dP      = Max(0.1, <Xfi.Pinlet>-<Xfo.Poutlet>)                          FlBp    36
        Mrecirc = (dP*<fb;1/CvFlow>)**(1./1.852)                                FlBp    37
        Mrecirc = Max(<fb:Flow>*0.01,                                           FlBp    38
     &                Min(<fb;MaxMsupply>, Mrecirc))                            FlBp    39
        Mrecirc = Mrecirc * <pl.RunFrac>                                        FlBp    40
      ENDIF                                                                     FlBp    41
                                                                                FlBp    42
c              outlet conditions                                                FlBp    43
      <fo.Moutlet3> = Mrecirc                                                   FlBp    44
      <fo.Moutlet>  = Mrecirc                                                   FlBp    45
      <fo.Mreqd>    = Mreqd                                                     FlBp    46
      <fo.Toutlet>  = <Xfi.Tinlet>                                              FlBp    47
      <fo.Qoutlet>  = Mrecirc * <pl.Btuh/GPM-F>                                 FlBp    48
     &                        * (<fo.Toutlet>-<pl.Tref>)                        FlBp    49
                                                                                FlBp    50
c              inlet conditions                                                 FlBp    51
      <fi.Minlet3> = Mrecirc                                                    FlBp    52
      <fi.Minlet>  = Mrecirc                                                    FlBp    53
      <fi.Mreqd>   = Mreqd                                                      FlBp    54
      <fi.Preqd>   = <Xfo.Poutlet> + <fb;BalanceHead>                           FlBp    55
                                                                                FlBp    56
      CALL CnvgCheck(1, <fb;RecircHsty>)                                        FlBp    57
c                                                                               FlBp    58
c                                                                               FlBp    59
c ============ DESIGN CALCULATIONS - FLUID SIDE =============================== FlBp    60
      CASE (111)                                                                FlBp    61
                                                                                FlBp    62
c              Supply outlet conditions                                         FlBp    63
      <fo.Moutlet>  = <fb:Flow>                                                 FlBp    64
      <fo.Moutlet3> = <fb:Flow>                                                 FlBp    65
      <fo.Mreqd>    = <fb:Flow>                                                 FlBp    66
      <fo.Toutlet>  = <Xfi.Tinlet>                                              FlBp    67
      <fo.Qoutlet>  = <fo.Moutlet> * <pl.Btuh/GPM-F>                            FlBp    68
     &                             * (<fo.Toutlet>-<pl.Tref>)                   FlBp    69
                                                                                FlBp    70
c              inlet conditions                                                 FlBp    71
      <fi.Minlet3> = <fb:Flow>                                                  FlBp    72
      <fi.Minlet>  = <fb:Flow>                                                  FlBp    73
      <fi.Mreqd>   = <fb:Flow>                                                  FlBp    74
      <fi.Preqd>   = <Xfo.Poutlet> + <fb:Head>                                  FlBp    75
                                                                                FlBp    76
c              Check for convergence on outlet conditions                       FlBp    77
      CALL CnvgCheck(1, <fb;RecircHsty>)                                        FlBp    78
c                                                                               FlBp    79
c                                                                               FlBp    80
c ============ DESIGN CALCULATIONS - RECONCILIATION =========================== FlBp    81
      CASE (119)                                                                FlBp    82
                                                                                FlBp    83
c              Set up the recirculation balance valve.                          FlBp    84
                                                                                FlBp    85
c              Available head                                                   FlBp    86
      dP = <Xfi.Pinlet> - <Xfo.Poutlet>                                         FlBp    87
c              warn if design fluid dP impossible to achieve                    FlBp    88
      IF (dP .LT. <fb:Head>*0.99)  THEN                                         FlBp    89
        CALL MSGSIM(-2,II,II,II,II)                                             FlBp    90
        Jna = <fb;Parent>                                                       FlBp    91
        WRITE (IOUTPT,9001) (<na:NAME>,II=1,8),                                 FlBp    92
     &                      <fb:Head>, dP                                       FlBp    93
      ENDIF                                                                     FlBp    94
                                                                                FlBp    95
c              balance dP                                                       FlBp    96
      SELECT CASE (<fb:Type>)                                                   FlBp    97
      CASE (0)  ! none                                                          FlBp    98
        <fb;MaxMsupply>  = 1.E20                                                FlBp    99
        <fb;BalanceHead> = <fb:Head>                                            FlBp   100
                                                                                FlBp   101
      CASE (1)  ! manual                                                        FlBp   102
        <fb;MaxMsupply>  = 1.E20                                                FlBp   103
        <fb;BalanceHead> = Max(dP, <fb:Head>)                                   FlBp   104
                                                                                FlBp   105
      CASE (2)  ! flow limiting                                                 FlBp   106
        <fb;MaxMsupply>  = <fb:Flow> * 1.1                                      FlBp   107
        <fb;BalanceHead> = <fb:Head>                                            FlBp   108
      END SELECT                                                                FlBp   109
                                                                                FlBp   110
c              flow coefficient                                                 FlBp   111
      CvFlow        = <fb;BalanceHead> / (<fb:Flow>**1.852)                     FlBp   112
      <fb;1/CvFlow> = 1. / CvFlow                                               FlBp   113
c                                                                               FlBp   114
c                                                                               FlBp   115
c ============ ATTACHMENTS ==================================================== FlBp   116
                                                                                FlBp   117
c              Create nodes                                                     FlBp   118
      CASE (203)                                                                FlBp   119
c              Fluid circuit nodes                                              FlBp   120
        <fb;SupplyNode> = NewNode(1, Jpl,0,Kfb,<fb:SupplyCkt>,                  FlBp   121
     &                                             51,1,0, 1.)                  FlBp   122
        <fb;ReturnNode> = NewNode(1, Jpl,0,Kfb,<fb:ReturnCkt>,                  FlBp   123
     &                                             52,2,0, 1.)                  FlBp   124
c                                                                               FlBp   125
c              Links, lists                                                     FlBp   126
      CASE (205)                                                                FlBp   127
        CALL ListNodes(<fb;Nodes>, 0,0,Kfb,0, 0,0)                              FlBp   128
c                                                                               FlBp   129
c              Histories                                                        FlBp   130
      CASE (208)                                                                FlBp   131
c              Supply history                                                   FlBp   132
        KliX = 0                                                                FlBp   133
        Call ListXNodes(<fb;Nodes>, KliX)                                       FlBp   134
        <fb;RecircHsty> = NewHistory(Jpl,0,Kfb, KliX, <fb;Nodes>,               FlBp   135
     &                        3, 5, 1.5,                                        FlBp   136
     &                       <#fi.Minlet> , 0.05, 2,                            FlBp   137
     &                       <#fo.Toutlet>, <sp:ERROR-T>   , 1,                 FlBp   138
     &                       0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0)                    FlBp   139
                                                                                FlBp   140
c              Dump pointers                                                    FlBp   141
      CASE (210)                                                                FlBp   142
        IF (Kfb .eq. Ifb)  WRITE (IOUTPT, 9201)                                 FlBp   143
        Jna = <fb;Parent>                                                       FlBp   144
        WRITE (IOUTPT, 9202)  (<na:NAME>,II=1,8),                               FlBp   145
     &    Kfb, <fb;SupplyNode>, <fb;ReturnNode>                                 FlBp   146
c                                                                               FlBp   147
c                                                                               FlBp   148
      END SELECT  ! Mode                                                        FlBp   149
                                                                                FlBp   150
      Return                                                                    FlBp   151
 9001 FORMAT(                                                                   FlBp   152
     &14x,'Recirculation flow: ',8A4,' has a design'                   /        FlBp   153
     &14x,'head higher than available from the plant'                  /        FlBp   154
     &14x,'Required, Available:',2F10.1                                )        FlBp   155
 9201 FORMAT(/                                                                  FlBp   156
     &' RECIRCULATION                          Kfb       Kfi'  ,                FlBp   157
     &'       Kfo'                                                     /        FlBp   158
     &1x,32('-'),3('  --------')                                       )        FlBp   159
 9202 FORMAT(1x,8A4,3I10                                               )        FlBp   160
      End                                                                       FlBp   161
      FUNCTION NewFluidCircuit(Jpl, Type)                                       FlCkNew  2
c                                                                               FlCkNew  3
c              ?? temporary code to create a fluid circuit                      FlCkNew  4
c                                                                               FlCkNew  5
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                         /IAX/    2
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
c                                                                               FlCkNew 10
      DATA NameFCs, NameFCr /4H$Jfs, 4H$Jfr/                                    FlCkNew 11
                                                                                FlCkNew 12
      INTEGER Type                                                              FlCkNew 13
      SAVE    Jfc                                                               FlCkNew 14
c                                                                               FlCkNew 15
c              Create a record and link                                         FlCkNew 16
      NewFluidCircuit = NewRecord(<+fc~Len>)                                    FlCkNew 17
      IF (Ifc .eq. 0)  THEN                                                     FlCkNew 18
        Ifc         = NewFluidCircuit                                           FlCkNew 19
        Lfc         = <+fc~Len>                                                 FlCkNew 20
        JfcPrevious = 0                                                         FlCkNew 21
      ELSE                                                                      FlCkNew 22
        <fc;Next>   = NewFluidCircuit                                           FlCkNew 23
        JfcPrevious = Jfc                                                       FlCkNew 24
      ENDIF                                                                     FlCkNew 25
      Jfc           = NewFluidCircuit                                           FlCkNew 26
      <fc;Previous> = JfcPrevious                                               FlCkNew 27
      Nfc           = Nfc + 1                                                   FlCkNew 28
c                                                                               FlCkNew 29
      IF (Type .eq. 1)  THEN                                                    FlCkNew 30
        <fc;Ident> = NameFCs                                                    FlCkNew 31
      ELSE                                                                      FlCkNew 32
        <fc;Ident> = NameFCr                                                    FlCkNew 33
      ENDIF                                                                     FlCkNew 34
c              store keywords                                                   FlCkNew 35
      <fc:TYPE>          = <pl:TYPE> + 10*(Type-1)                              FlCkNew 36
      <fc:SUBTYPE>       = 1                                                    FlCkNew 37
      <fc:ALGORITHM>     = Type                                                 FlCkNew 38
      <fc:ATTACH-TO>     = 1                                                    FlCkNew 39
      <fc:PLANT>         = (Jpl-Ipl)/Lpl + 1                                    FlCkNew 40
      <fc:FLUID-VOL>     = <pl:FLUID-VOL> * 0.5                                 FlCkNew 41
      <fc:HEAD-SETPT>    = <pl:HD-SETPT>                                        FlCkNew 42
      <fc:AVG-CIRC-TIME> = <pl:AVG-CIRC-TIME> * 0.5                             FlCkNew 43
      <fc:LOSS-ZONE>     = <pl:LOSS-ZONE>                                       FlCkNew 44
      <fc:NET-HEAD>      = <pl:PIPE-HEAD> * 0.5                                 FlCkNew 45
c ??  <fc:EQUIV-LENGTH>  = <pl:EQUIV-LENGTH> * 0.5   future                     FlCkNew 46
      <fc:STATIC-HEAD>   = <pl:STATIC-HEAD>                                     FlCkNew 47
      <fc:PIPE-MATERIAL> = <pl:PIPE-MATERIAL>                                   FlCkNew 48
      <fc:PIPE-ROUGHNES> = <pl:PIPE-ROUGHNES>                                   FlCkNew 49
      <fc:PIPE-DIAMETER> = <pl:PIPE-DIAMETER>                                   FlCkNew 50
      <fc:FLUID-VELOCIT> = <pl:FLUID-VELOCIT>                                   FlCkNew 51
c                                                                               FlCkNew 52
      IF (Type .EQ. 1)  THEN                                                    FlCkNew 53
        <fc:RECIRC-FLOW>  = <pl:RECIRC-FLOW>                                    FlCkNew 54
        <fc:CONDUCT-UA>   = <pl:SUPPLY-UA>                                      FlCkNew 55
        <fc:CONDUCT-DT>   = <pl:SLOSS-DT>                                       FlCkNew 56
        <fc:INLET/ENV-DT> = <pl:SUPPLY/ENV-DT>                                  FlCkNew 57
      ELSE                                                                      FlCkNew 58
        <fc:CONDUCT-UA>   = <pl:RETURN-UA>                                      FlCkNew 59
        <fc:CONDUCT-DT>   = <pl:RLOSS-DT>                                       FlCkNew 60
        <fc:INLET/ENV-DT> = <pl:RETURN/ENV-DT>                                  FlCkNew 61
      ENDIF                                                                     FlCkNew 62
      <fc:LOCN>          = <pl:LOCN>                                            FlCkNew 63
      <fc:LOSS-ZONE>     = <pl:LOSS-ZONE>                                       FlCkNew 64
      <fc:TUNNEL-T>      = <pl:TUNNEL-T>                                        FlCkNew 65
      <fc:TUNNEL-SCH>    = <pl:TUNNEL-SCH>                                      FlCkNew 66
      <fc:COST-DATA>     = <pl:COST-DATA>                                       FlCkNew 67
      <fc:REPORTS>       = <pl:REPORTS>                                         FlCkNew 68
c                                                                               FlCkNew 69
      RETURN                                                                    FlCkNew 70
      END                                                                       FlCkNew 71
      SUBROUTINE FluidNode(Knode, RunFrac, CtrlMode,                            FlCkNo   2
     &                            M, M2, M3, Mreqd,                             FlCkNo   3
     &                            T, TminReqd, TmaxReqd,                        FlCkNo   4
     &                            Pmin, PmaxReqd)                               FlCkNo   5
c                                                                               FlCkNo   6
c              Sums a list of fluid Xnodes into a fluid node.                   FlCkNo   7
c                                                                               FlCkNo   8
c              Knode     Pointer to the node, or list of nodes                  FlCkNo   9
c              RunFrac   Fraction of hour loads are demanding                   FlCkNo  10
c              CtrlMode  Flag to indicate off/standby/demand mode               FlCkNo  11
c              M         Total flow from Xnodes                                 FlCkNo  12
c              M2        Flow thru 2-way valves                                 FlCkNo  13
c              M3        Flow thru 3-way valves                                 FlCkNo  14
c              Mreqd     Total required flow from Xnodes                        FlCkNo  15
c              T         Temperature                                            FlCkNo  16
c              TminReqd  Minimum required temperature                           FlCkNo  17
c              TmaxReqd  Maximum required temperature                           FlCkNo  18
c              Pmin      Minimum pressure                                       FlCkNo  19
c              Preqd     Maximum required pressure                              FlCkNo  20
c                                                                               FlCkNo  21
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      DATA IdNode /4H$Kno/                                                      /IdNode/ 2
      DIMENSION  EndUse(18)                                                     /EndUse/ 2
      DATA       NumEndUses /18/                                                /EndUse/ 3
c                                                                               FlCkNo  26
      LOGICAL  EndUses                                                          FlCkNo  27
      INTEGER  CtrlMode                                                         FlCkNo  28
      REAL     M, Mneg, M2, M3, Mreqd, Mnode                                    FlCkNo  29
c                                                                               FlCkNo  30
c              pointer to trunk circuit's end-use block                         FlCkNo  31
      Kfx = Knode                                                               FlCkNo  32
      IF (<fx;Ident> .EQ. IdNode)  THEN                                         FlCkNo  33
c              get the list of Xnodes associated with the node                  FlCkNo  34
        Kli = <fx;Xnode>                                                        FlCkNo  35
c              initialize end-use array                                         FlCkNo  36
        IF (<fx;EndUse> .GT. 0)  THEN                                           FlCkNo  37
          EndUses = .TRUE.                                                      FlCkNo  38
          DO IE=1,NumEndUses                                                    FlCkNo  39
            EndUse(IE) = 0.                                                     FlCkNo  40
          ENDDO                                                                 FlCkNo  41
        ELSE                                                                    FlCkNo  42
          EndUses = .FALSE.                                                     FlCkNo  43
        ENDIF                                                                   FlCkNo  44
      ELSE                                                                      FlCkNo  45
c              passed a list directly                                           FlCkNo  46
        Kli     = Knode                                                         FlCkNo  47
        EndUses = .FALSE.                                                       FlCkNo  48
      ENDIF                                                                     FlCkNo  49
c                                                                               FlCkNo  50
c              Initialize outputs                                               FlCkNo  51
      Tsave    = T                                                              FlCkNo  52
      RunFrac  = 0.                                                             FlCkNo  53
      CtrlMode = 0                                                              FlCkNo  54
      M        = 0.                                                             FlCkNo  55
      Mneg     = 0.                                                             FlCkNo  56
      M2       = 0.                                                             FlCkNo  57
      M3       = 0.                                                             FlCkNo  58
      Mreqd    = 0.                                                             FlCkNo  59
      Q        = 0.                                                             FlCkNo  60
      T        = 0.                                                             FlCkNo  61
      TminReqd =  88888.                                                        FlCkNo  62
      TmaxReqd = -88888.                                                        FlCkNo  63
      Pmin     =  88888.                                                        FlCkNo  64
      PmaxReqd = -88888.                                                        FlCkNo  65
c                                                                               FlCkNo  66
c              Loop thru all Xnodes in the list and get properties              FlCkNo  67
      IF (Kli .EQ. 0)  RETURN                                                   FlCkNo  68
      NumItems = <li;NumItems>                                                  FlCkNo  69
      DO  LI=1,NumItems                                                         FlCkNo  70
        Kfx      = <li;List>                       ! Xnode                      FlCkNo  71
        Mnode    = <fx.Mfluid> * <fx;Multiplier>   ! Xnode flow                 FlCkNo  72
        Qnode    = <fx.Qfluid> * <fx;Multiplier>   ! Xnode load                 FlCkNo  73
        CtrlMode = MAX(CtrlMode, <fx.CtrlMode>)                                 FlCkNo  74
        IF (Mnode .GT. 0.)  THEN                                                FlCkNo  75
          M    = M  + Mnode                                                     FlCkNo  76
          M2   = M2 + <fx.Mfluid2> * <fx;Multiplier>                            FlCkNo  77
          M3   = M3 + <fx.Mfluid3> * <fx;Multiplier>                            FlCkNo  78
          Q    = Q  + Qnode                                                     FlCkNo  79
          T    = T  + <fx.Tfluid>  * Mnode                                      FlCkNo  80
          Pmin = MIN(Pmin,  <fx.Pfluid>)                                        FlCkNo  81
c              Allocate load to end-use categories                              FlCkNo  82
          IF (EndUses  .AND.  Qnode .NE. 0.)  THEN                              FlCkNo  83
            IF (<fx;EndUse> .LE. NumEndUses)  THEN                              FlCkNo  84
              EndUse(<fx;EndUse>) = EndUse(<fx;EndUse>) + Qnode                 FlCkNo  85
            ELSE  ! node has multiple end-uses                                  FlCkNo  86
              Keu = <fx;EndUse>                                                 FlCkNo  87
              DO IE=1,NumEndUses                                                FlCkNo  88
                EndUse(IE) = EndUse(IE)                                         FlCkNo  89
     &                     + Qnode*<eu.1/TotalEU> * <eu.EndUses>                FlCkNo  90
              ENDDO                                                             FlCkNo  91
            ENDIF                                                               FlCkNo  92
          ENDIF                                                                 FlCkNo  93
        ELSEIF (Mnode .LT. 0.)  THEN                                            FlCkNo  94
c              zero or negative flow                                            FlCkNo  95
          Mneg = Mneg + Mnode                                                   FlCkNo  96
          M2   = M2 + <fx.Mfluid2> * <fx;Multiplier>                            FlCkNo  97
          M3   = M3 + <fx.Mfluid3> * <fx;Multiplier>                            FlCkNo  98
        ENDIF                                                                   FlCkNo  99
c              requested properties                                             FlCkNo 100
        IF (<fx.Mreqd> .GT. 0.)  THEN                                           FlCkNo 101
          Mreqd = Mreqd + <fx.Mreqd>*<fx;Multiplier>                            FlCkNo 102
c              minimum fraction of hour the circuit must be active              FlCkNo 103
          RunFrac = RunFrac + (1.-RunFrac)*<fx.RunFrac>                         FlCkNo 104
c              required temperature and pressure                                FlCkNo 105
          IF (<fx.Treqd> .GT. -888.)  THEN                                      FlCkNo 106
            TminReqd = MIN(TminReqd, <fx.Treqd>)                                FlCkNo 107
            TmaxReqd = MAX(TmaxReqd, <fx.Treqd>)                                FlCkNo 108
          ENDIF                                                                 FlCkNo 109
          IF (<fx.Preqd> .GT. -888.)                                            FlCkNo 110
     &      PmaxReqd = MAX(PmaxReqd,<fx.Preqd>)                                 FlCkNo 111
        ENDIF                                                                   FlCkNo 112
      ENDDO                                                                     FlCkNo 113
c                                                                               FlCkNo 114
c              Average temperature - based on in-flows only                     FlCkNo 115
      IF (M .GT. 0.)  THEN                                                      FlCkNo 116
        T = T / M                                                               FlCkNo 117
      ELSE                                                                      FlCkNo 118
        T = Tsave                                                               FlCkNo 119
      ENDIF                                                                     FlCkNo 120
      M = M + Mneg                                                              FlCkNo 121
c                                                                               FlCkNo 122
c              Required properties; for pressure drop calcs, the                FlCkNo 123
c              required flow must be at least the actual                        FlCkNo 124
      Mreqd = MAX(Mreqd, M)                                                     FlCkNo 125
      IF (TminReqd .EQ. 88888.)  TminReqd = -88888.                             FlCkNo 126
c                                                                               FlCkNo 127
c              Calc end-use breakdown                                           FlCkNo 128
      Kfx         = Knode                                                       FlCkNo 129
      <fx.Qfluid> = Q                                                           FlCkNo 130
      CALL EndUseCategories(Kfx, EndUse(1))                                     FlCkNo 131
c                                                                               FlCkNo 132
      RETURN                                                                    FlCkNo 133
      END                                                                       FlCkNo 134
      SUBROUTINE FluidCircuit_dQ(Kex, Locn, Tf, Qloss, dTf)                     FlCkQ    2
c                                                                               FlCkQ    3
c              Calculates the temperature rise through a pipe, the              FlCkQ    4
c              corresponding thermal loss, and the log mean temperature         FlCkQ    5
c              of the fluid in the pipe.                                        FlCkQ    6
c                                                                               FlCkQ    7
c              Kex          Pointer to the extraction rate node                 FlCkQ    8
c              Locn           1  Tfluid is at inlet of circuit                  FlCkQ    9
c                             2  Tfluid is at outlet of circuit                 FlCkQ   10
c              Tf           Fluid temperature, inlet or outlet                  FlCkQ   11
c                                                                               FlCkQ   12
c              Qloss        Thermal loss of the circuit, positive is heat       FlCkQ   13
c                             addition to circuit, zone heat extraction         FlCkQ   14
c              dTf          Fluid temperature change, inlet to outlet           FlCkQ   15
c              er.Textract  Log mean temperature of the fluid                   FlCkQ   16
c                                                                               FlCkQ   17
c              This algorithm uses the NTU/effectiveness heat-exchanger         FlCkQ   18
c              equations, and assumes that the environmental temperature        FlCkQ   19
c              along and around the pipe is uniform.  The solution is           FlCkQ   20
c              then the same as for a condensing fluid on one side of           FlCkQ   21
c              a heat-exchanger.                                                FlCkQ   22
c                                                                               FlCkQ   23
c              When the flow is zero, this algorithm uses Newton's              FlCkQ   24
c              Law of Cooling to exponentially decay the fluid                  FlCkQ   25
c              temperature to the environmental temperature.                    FlCkQ   26
c                                                                               FlCkQ   27
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
      COMMON  /WEATH / IWDID(5),LRECX,WLAT,WLONG,LTIMZ,IFX,IWSIZ,               /WEATH/  2
     1                 CLRNES,TGNDR,WBT,DBT,Patm,CLDAMT,ISNOW,IRAIN,            /WEATH/  3
     2                 IWNDDR,HUMRAT,DENSTY,ENTHAL,DIFSOL,DIRSOL,SOLRAD,        /WEATH/  4
     3                 ICLDTY,WNDSPD,IDUMMY,DPT,WNDDRR,CLDCOV,RDNCC,            /WEATH/  5
     4                 BSCC,SKYA,DBTR,GTEMP(12),CLR(12),ESKY,EGND,IWINTR        /WEATH/  6
c                                                                               FlCkQ   32
      INTEGER ZP1                                                               FlCkQ   33
c                                                                               FlCkQ   34
c              If no piping losses                                              FlCkQ   35
      IF (Kex .EQ. 0.)  THEN                                                    FlCkQ   36
        dTf   = 0.                                                              FlCkQ   37
        RETURN                                                                  FlCkQ   38
      ENDIF                                                                     FlCkQ   39
c                                                                               FlCkQ   40
c              Pointer to fluid circuit, nodes, and parent plant                FlCkQ   41
      Jfc = <ex;Component>                                                      FlCkQ   42
      Kfi = <fc;InletNode>                                                      FlCkQ   43
      Kfo = <fc;OutletNode>                                                     FlCkQ   44
      Jpl = <fc:PLANT>                                                          FlCkQ   45
c                                                                               FlCkQ   46
c              Environment temperature                                          FlCkQ   47
      SELECT CASE (<fc:LOCN>)                                                   FlCkQ   48
        CASE (1)    ! indoors                                                   FlCkQ   49
          ZP1    = <pl:LOSS-ZONE>                                               FlCkQ   50
          Tenvir = <zn;Tavg>                                                    FlCkQ   51
        CASE (2)    ! outdoors                                                  FlCkQ   52
          Tenvir = DBT                                                          FlCkQ   53
        CASE (3)    ! tunnel                                                    FlCkQ   54
          IF (<pl:TUNNEL-SCH> .EQ. 0)  THEN                                     FlCkQ   55
            Tenvir = <pl:TUNNEL-T>                                              FlCkQ   56
          ELSE                                                                  FlCkQ   57
            Tenvir = SchVal(<fc:TUNNEL-SCH>)                                    FlCkQ   58
          ENDIF                                                                 FlCkQ   59
        CASE (4)    ! underground                                               FlCkQ   60
c              pipe is underground - the assumption of ground temperature       FlCkQ   61
c              is very poor and should be replaced at some time                 FlCkQ   62
          Tenvir = GTEMP(IMO)                                                   FlCkQ   63
      END SELECT                                                                FlCkQ   64
c                                                                               FlCkQ   65
c ****         run function : PipeDT-1                                          FlCkQ   66
c     IF( MSYSF(?) .NE. 0 )   CALL FINTS( MSYSF(?), 1. )                        FlCkQ   67
c                                                                               FlCkQ   68
c                                                                               FlCkQ   69
      IF (<fi.Minlet> .GT. 0.00001)  THEN                                       FlCkQ   70
c              Non-zero flow last hour.  Get inlet or outlet temperature        FlCkQ   71
        IF (Tf .NE. -88888.)  THEN                                              FlCkQ   72
          Tfluid = Tf                                                           FlCkQ   73
        ELSE                                                                    FlCkQ   74
          IF (Locn .EQ. 1)  THEN                                                FlCkQ   75
            Tfluid = <fi.Tinlet>                                                FlCkQ   76
          ELSE                                                                  FlCkQ   77
            Tfluid = <fo.Toutlet>                                               FlCkQ   78
          ENDIF                                                                 FlCkQ   79
        ENDIF                                                                   FlCkQ   80
c              ratio of the pipe UA to the heat transport capacity              FlCkQ   81
        RUAGPM = <ex.UA> / (<pl.Btuh/GPM-F> * <fi.Minlet>)                      FlCkQ   82
c              heat-exchanger effectiveness (assumes condensing fluid)          FlCkQ   83
        Eff    = 1.0 - EXP(-RUAGPM)                                             FlCkQ   84
c                                                                               FlCkQ   85
c              fluid temperature rise for temperature entering pipe             FlCkQ   86
        dTf = Eff * (Tenvir - Tfluid)                                           FlCkQ   87
c              fluid temperature rise for temperature leaving pipe              FlCkQ   88
        IF (Locn .EQ. 2)  dTf = dTf / (1.0 - Eff)                               FlCkQ   89
c              thermal loss                                                     FlCkQ   90
        Qloss = dTf * <pl.Btuh/GPM-F> * <fi.Minlet>                             FlCkQ   91
      ELSE                                                                      FlCkQ   92
c              Zero flow last hour - use Newton's Law of Cooling.  Note         FlCkQ   93
c              that Tfluid in this case is the average pipe temperature.        FlCkQ   94
c              hourly temperature decay and loss                                FlCkQ   95
        dTf   = <fc;DecayRate> * (Tenvir - <fc.LMT>)                            FlCkQ   96
        Qloss = dTf * <fc;Btu/F>                                                FlCkQ   97
      ENDIF                                                                     FlCkQ   98
c                                                                               FlCkQ   99
c              Fluid log mean temperature                                       FlCkQ  100
      <ex.Textract> = Tenvir - Qloss/<ex.UA>                                    FlCkQ  101
      <fc.LMT'>     = <ex.Textract>                                             FlCkQ  102
c                                                                               FlCkQ  103
c ****         run function : PipeDT-2                                          FlCkQ  104
c     IF( MSYSF(?) .NE. 0 )   CALL FINTS( MSYSF(?), 1. )                        FlCkQ  105
c                                                                               FlCkQ  106
      RETURN                                                                    FlCkQ  107
      END                                                                       FlCkQ  108
      SUBROUTINE FluidCircuit_dQdesign(Jfc)                                     FlCkQD   2
c                                                                               FlCkQD   3
c              Calculates the design thermal loss parameters for a              FlCkQD   4
c              circuit                                                          FlCkQD   5
c                                                                               FlCkQD   6
c              Jfc  Pointer to the fluid circuit                                FlCkQD   7
c                                                                               FlCkQD   8
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               FlCkQD  13
c              Pointers to inlet and outlet nodes, and parent plant             FlCkQD  14
      Kfi = <fc;InletNode>                                                      FlCkQD  15
      Kfo = <fc;OutletNode>                                                     FlCkQD  16
      Kex = <fc;LossNode>                                                       FlCkQD  17
      Jpl = <fc:PLANT>                                                          FlCkQD  18
c                                                                               FlCkQD  19
      IF (<fc:CONDUCT-UA> .GT. 0.)  THEN                                        FlCkQD  20
c              UA has been specified.                                           FlCkQD  21
        <ex.UA> = <fc:CONDUCT-UA>                                               FlCkQD  22
c              Calculate design fluid temperature rise as a function of         FlCkQD  23
c              UA, fluid flow and temperature difference between                FlCkQD  24
c              entering fluid temperature and environment                       FlCkQD  25
        RUAGPM        = <ex.UA> / (<pl.Btuh/GPM-F>*<fi.Minlet>)                 FlCkQD  26
        Eff           = 1.0 - EXP(-RUAGPM)                                      FlCkQD  27
        <fc;DesignDT> = Eff * <fc:INLET/ENV-DT>                                 FlCkQD  28
      ELSEIF (<fc:CONDUCT-DT> .NE. 0.)  THEN                                    FlCkQD  29
c              Temperature rise has been specified                              FlCkQD  30
        <fc;DesignDT> = <fc:CONDUCT-DT>                                         FlCkQD  31
c              Calculate design UA product as a function of                     FlCkQD  32
c              fluid flow, fluid temperature rise, and temperature              FlCkQD  33
c              difference between entering fluid temperature and                FlCkQD  34
c              environment                                                      FlCkQD  35
        dTratio = <fc:CONDUCT-DT> / (<fc:INLET/ENV-DT>)                         FlCkQD  36
c              check if dT's even remotely reasonable                           FlCkQD  37
        IF (1.0/dTratio .LT. 0.5)  THEN                                         FlCkQD  38
          CALL MSGSIM(-2,II,II,II,II)                                           FlCkQD  39
          WRITE (IOUTPT,9001) (<pl:NAME>,II=1,8)                                FlCkQD  40
c         CALL MessageBox( NULL,                                                FlCkQD  41
c    &      'DeltaT for loss is unreasonable -'//char(10)//char(13)//           FlCkQD  42
c    &      'No loss will be calculated'//char(0),                              FlCkQD  43
c    &      'CIRCULATION-LOOP Errors'//char(0),                                 FlCkQD  44
c    &      MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                FlCkQD  45
        ELSE                                                                    FlCkQD  46
          <ex.UA> = -<pl.Btuh/GPM-F>*<fi.Minlet> * ALOG(1.0-dTratio)            FlCkQD  47
        ENDIF                                                                   FlCkQD  48
      ENDIF                                                                     FlCkQD  49
c                                                                               FlCkQD  50
      RETURN                                                                    FlCkQD  51
c                                                                               FlCkQD  52
c              message formats                                                  FlCkQD  53
 9001   FORMAT(14X,'In Circulation-Loop: ',8A4,'the pipe'              /        FlCkQD  54
     &         14X,'thermal losses based on the SUPPLY-LOSS-DT,'       /        FlCkQD  55
     &         14X,'HT-SETPT-T, and environmental temperature are'     /        FlCkQD  56
     &         14X,'either excessive or impossible.  Check these'      /        FlCkQD  57
     &         14X,'values for consistency.'                           )        FlCkQD  58
      END                                                                       FlCkQD  59
      SUBROUTINE FluidCircuit_Return(Mode, Jfc)                                 FlCkRt   2
c                                                                               FlCkRt   3
c              Simulates a fluid circuit returning to the plant                 FlCkRt   4
c              from coils and other loads                                       FlCkRt   5
c                                                                               FlCkRt   6
c              Mode = 0-9  Attachment calculations                              FlCkRt   7
c                      10  Design outlet M, T, Preqd, H as f(inlet)             FlCkRt   8
c                      11  Design inlet P as f(outlet)                          FlCkRt   9
c                      31  Simulate from upstream to downstream                 FlCkRt  10
c                            Outlet M, T, Preqd, H as f(inlet)                  FlCkRt  11
c                      32  Simulate from downstream to upstream                 FlCkRt  12
c                            Inlet P as f(outlet)                               FlCkRt  13
c                                                                               FlCkRt  14
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /Attach/ NameAttachments(8,100,3), NumRowsOfAttachments           /Attach/ 2
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /HRREP / Irb, Ihrp, Lrb, Lhrp, Nrb, Nhrp, IVTLIM(3,50),           HRr      1
     &                 IGRPtr, IBRPtr, IRSch, IRSchT(5),                        HRr      2
     &                 NHRTyp(3), ITBUF(3), ITBUFB(3), ITBUFE(3),               HRr      3
     &                 IHREOF, ICDFLG                                           HRr      4
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON  /WEATH / IWDID(5),LRECX,WLAT,WLONG,LTIMZ,IFX,IWSIZ,               /WEATH/  2
     1                 CLRNES,TGNDR,WBT,DBT,Patm,CLDAMT,ISNOW,IRAIN,            /WEATH/  3
     2                 IWNDDR,HUMRAT,DENSTY,ENTHAL,DIFSOL,DIRSOL,SOLRAD,        /WEATH/  4
     3                 ICLDTY,WNDSPD,IDUMMY,DPT,WNDDRR,CLDCOV,RDNCC,            /WEATH/  5
     4                 BSCC,SKYA,DBTR,GTEMP(12),CLR(12),ESKY,EGND,IWINTR        /WEATH/  6
c                                                                               FlCkRt  23
c                                                                               FlCkRt  24
      INTEGER  Xfo, rH                                                          FlCkRt  25
      REAL     Mpeak                                                            FlCkRt  26
c                                                                               FlCkRt  27
c                                                                               FlCkRt  28
      Jpl = <fc:PLANT>                   ! plant                                FlCkRt  29
      Kfi = <fc;InletNode>               ! inlet node                           FlCkRt  30
      Kfo = <fc;OutletNode>              ! outlet node                          FlCkRt  31
      Xfo = <fo;Xnode>                   ! outlet Xnode                         FlCkRt  32
c                                                                               FlCkRt  33
      SELECT CASE (Mode)                                                        FlCkRt  34
c                                                                               FlCkRt  35
c                                                                               FlCkRt  36
c ============ HOURLY INITIALIZATION ========================================== FlCkRt  37
      CASE (10)                                                                 FlCkRt  38
c                                                                               FlCkRt  39
c              Log mean temperature and heat stored in circuit                  FlCkRt  40
      <fc.LMT>    = <fc.LMT'>                                                   FlCkRt  41
      <fc.Qstore> = <fc.Qstore'>                                                FlCkRt  42
c                                                                               FlCkRt  43
c              Calculate error between what zone thinks the thermal loss        FlCkRt  44
c              was vs. the actual                                               FlCkRt  45
      IF (<fc:LOSS-ZONE> .GT. 0)  THEN                                          FlCkRt  46
        Kex = <fc;LossNode>                                                     FlCkRt  47
        <ex.Qerror> = <fc.Qconduct> - <ex.Qextract>                             FlCkRt  48
      ENDIF                                                                     FlCkRt  49
c                                                                               FlCkRt  50
c                                                                               FlCkRt  51
c ============ HOURLY SIMULATION - LOADS TO PLANT ============================= FlCkRt  52
      CASE (31)                                                                 FlCkRt  53
c                                                                               FlCkRt  54
c              This call calculates the outlet mass flow rate and               FlCkRt  55
c              temperature as a function of the inlet conditions                FlCkRt  56
c                                                                               FlCkRt  57
c              Get the demands on this circuit                                  FlCkRt  58
      CALL FluidNode(Kfi, <fi.RunFrac>, <fi.CtrlMode>,                          FlCkRt  59
     &              <fi.Minlet>, <fi.Minlet2>, <fi.Minlet3>, <fi.Mreqd>,        FlCkRt  60
     &              <fi.Tinlet>, xTmin, xTmax,                                  FlCkRt  61
     &              xPmin, xPreqd)                                              FlCkRt  62
      <fo.RunFrac>  = <fi.RunFrac>                                              FlCkRt  63
      <fo.CtrlMode> = <fi.CtrlMode>                                             FlCkRt  64
      <fo.Moutlet>  = <fi.Minlet>                                               FlCkRt  65
      <fo.Moutlet2> = <fi.Minlet2>                                              FlCkRt  66
      <fo.Moutlet3> = <fi.Minlet3>                                              FlCkRt  67
      <fo.Mreqd>    = <fi.Mreqd>                                                FlCkRt  68
c                                                                               FlCkRt  69
c              Adjust the outlet temperature for thermal losses                 FlCkRt  70
      IF (<fc;UA> .GT. 0.)  THEN                                                FlCkRt  71
        CALL FluidCircuit_dQ(<fc;LossNode>, 1,<fi.Tinlet>,                      FlCkRt  72
     &                                       <fc.Qconduct>,<fc.dT>)             FlCkRt  73
        <fo.Toutlet> = <fi.Tinlet> + <fc.dT>                                    FlCkRt  74
      ELSE                                                                      FlCkRt  75
        <fo.Toutlet> = <fi.Tinlet>                                              FlCkRt  76
        <fc.LMT'>    = <fi.Tinlet>                                              FlCkRt  77
      ENDIF                                                                     FlCkRt  78
c              and for temperature swing from previous hour                     FlCkRt  79
      IF (<fi.Minlet> .GT. 0.)  THEN                                            FlCkRt  80
        Ctransport   = <fi.Minlet> * <pl.Btuh/GPM-F>                            FlCkRt  81
        Qtransport   = Ctransport  * <fc.LMT'>                                  FlCkRt  82
        Qmix         = <fc.Qstore> + Qtransport                                 FlCkRt  83
        Tmix         = Qmix / (<fc;Btu/F> + Ctransport)                         FlCkRt  84
        <fc.Qstore'> = <fc;Btu/F> * Tmix                                        FlCkRt  85
        Qswing       = <fc.Qstore> - <fc.Qstore'>                               FlCkRt  86
        <fc.dTswing> = Qswing / Ctransport                                      FlCkRt  87
        <fo.Toutlet> = <fo.Toutlet> + <fc.dTswing>                              FlCkRt  88
      ENDIF                                                                     FlCkRt  89
c                                                                               FlCkRt  90
c              Loads relative to reference point                                FlCkRt  91
      <fi.Qinlet>  = <fo.Moutlet> * <pl.Btuh/GPM-F>                             FlCkRt  92
     &                            * (<fi.Tinlet> - <pl.Tref>)                   FlCkRt  93
      <fo.Qoutlet> = <fo.Moutlet> * <pl.Btuh/GPM-F>                             FlCkRt  94
     &                            * (<fo.Toutlet>-<pl.Tref>)                    FlCkRt  95
c                                                                               FlCkRt  96
c              Circuit auxiliary electrical loads - note that these do not      FlCkRt  97
c              show up as a load on the fluid                                   FlCkRt  98
      IF (<fc:AUX-KW> .GT. 0.)  THEN                                            FlCkRt  99
        Kmd = <fc:AUX-METER>                                                    FlCkRt 100
        SELECT CASE (<fc:AUX-MODE>)                                             FlCkRt 101
          CASE (1)  ! Always                                                    FlCkRt 102
            <md.Elec> = <fc:AUX-KW>                                             FlCkRt 103
          CASE (2)  ! When on                                                   FlCkRt 104
            IF (<fi.Minlet> .GT. 0.)  THEN                                      FlCkRt 105
              <md.Elec> = <fc:AUX-KW>                                           FlCkRt 106
            ELSE                                                                FlCkRt 107
              <md.Elec> = 0.                                                    FlCkRt 108
            ENDIF                                                               FlCkRt 109
          CASE (3)  ! When off                                                  FlCkRt 110
            IF (<fi.Minlet> .EQ. 0.)  THEN                                      FlCkRt 111
              <md.Elec> = <fc:AUX-KW>                                           FlCkRt 112
            ELSE                                                                FlCkRt 113
              <md.Elec> = 0.                                                    FlCkRt 114
            ENDIF                                                               FlCkRt 115
          CASE (4)  ! Scheduled                                                 FlCkRt 116
            Val = SchVal(<fc:AUX-SCH>)                                          FlCkRt 117
            IF (Val .NE. 1.0  .AND.  Val .NE. 0.0)  THEN                        FlCkRt 118
              IF (Val .LT. DBT)  THEN                                           FlCkRt 119
                Val = 1.0                                                       FlCkRt 120
              ELSE                                                              FlCkRt 121
                Val = 0.0                                                       FlCkRt 122
              ENDIF                                                             FlCkRt 123
            ENDIF                                                               FlCkRt 124
            <md.Elec> = <fc:AUX-KW> * Val                                       FlCkRt 125
        END SELECT                                                              FlCkRt 126
      ENDIF                                                                     FlCkRt 127
c                                                                               FlCkRt 128
      CALL CnvgCheck(1, <fc;PlantHsty>)                                         FlCkRt 129
c                                                                               FlCkRt 130
c                                                                               FlCkRt 131
c ============ HOURLY SIMULATION - PLANT TO LOADS ============================= FlCkRt 132
      CASE (32)                                                                 FlCkRt 133
c                                                                               FlCkRt 134
c              This call calculates the inlet pressure as a function of         FlCkRt 135
c              the outlet conditions.                                           FlCkRt 136
c                                                                               FlCkRt 137
c              Initialize the outlet conditions                                 FlCkRt 138
      <fo.Poutlet> = <Xfo.Poutlet>                                              FlCkRt 139
c                                                                               FlCkRt 140
c              Adjust inlet pressure for pressure drop                          FlCkRt 141
      IF (<fi.Minlet> .GT. 0.)  THEN                                            FlCkRt 142
        <fc.Mpeak> = 0.                                                         FlCkRt 143
        IF (<fi.RunFrac> .GT. 0.)                                               FlCkRt 144
     &    <fc.Mpeak> = <fi.Minlet2>/<fi.RunFrac>                                FlCkRt 145
        IF (<pl.RunFrac> .GT. 0.)                                               FlCkRt 146
     &    <fc.Mpeak> = <fi.Minlet3>/<pl.RunFrac> + <fc.Mpeak>                   FlCkRt 147
        <fc.dP> = FluidDP(<fc;FluidProp>, <fc.Mpeak>)                           FlCkRt 148
      ELSE                                                                      FlCkRt 149
        <fc.dP> = 0.                                                            FlCkRt 150
      ENDIF                                                                     FlCkRt 151
      <fi.Pinlet> = <fo.Poutlet> + <fc.dP>                                      FlCkRt 152
c              repeat for required pressure                                     FlCkRt 153
      IF (<fi.Mreqd> .GT. 0.)  THEN                                             FlCkRt 154
        Mpeak = <fi.Mreqd>                                                      FlCkRt 155
        IF (<fi.RunFrac> .GT. 0.)  Mpeak = Mpeak / <fi.RunFrac>                 FlCkRt 156
        dP         = FluidDP(<fc;FluidProp>, Mpeak)                             FlCkRt 157
        <fi.Preqd> = <fo.Preqd> + dP                                            FlCkRt 158
      ELSE                                                                      FlCkRt 159
        <fi.Preqd> = <fo.Preqd>                                                 FlCkRt 160
      ENDIF                                                                     FlCkRt 161
c                                                                               FlCkRt 162
c              See if converged; set inlet Xnode flags if not                   FlCkRt 163
      CALL CnvgCheck(1, <fc;LoadHsty>)                                          FlCkRt 164
c                                                                               FlCkRt 165
c                                                                               FlCkRt 166
c ============ REPORT CREATION ================================================ FlCkRt 167
      CASE (50)                                                                 FlCkRt 168
c                                                                               FlCkRt 169
c              statistics blocks                                                FlCkRt 170
      Ks2Sup    = NewStat2(Kfo,  <+fo.Moutlet>,  0, 1.)                         FlCkRt 171
      Ks5SupBin = NewStat5(Kfo,  <+fo.Moutlet>,  0, 1.)                         FlCkRt 172
      Ks2Gain   = NewStat2(Jfc, <+fc.Qconduct>,  1, 1.)                         FlCkRt 173
      Ks2Loss   = NewStat2(Jfc, <+fc.Qconduct>, -1, 1.)                         FlCkRt 174
c                                                                               FlCkRt 175
c              Create the type "H" report                                       FlCkRt 176
c      IF (<fc:REPORTS> .GT. 0  .AND.  IREPRT(3,23) .GT. 0)                     FlCkRt 177
c     &  <fc;PS-H> = NewReport_H(Jfc, 86,                                       FlCkRt 178
c     &                          4, 5, 6,                                       FlCkRt 179
c     &                          Ks2Sup, Ks2Gain, Ks2Loss, 0,                   FlCkRt 180
c     &                          Ks5SupBin, 0, 0,                               FlCkRt 181
c     &                          0, 0, 0)                                       FlCkRt 182
c                                                                               FlCkRt 183
c                                                                               FlCkRt 184
c ============ REPORT ORDER =================================================== FlCkRt 185
      CASE (52)                                                                 FlCkRt 186
c                                                                               FlCkRt 187
      Call Report_H(Mode, <fc;PS-H>)                                            FlCkRt 188
c                                                                               FlCkRt 189
c                                                                               FlCkRt 190
c ============ REPORTS - VERIFICATION DATA ==================================== FlCkRt 191
      CASE (54)                                                                 FlCkRt 192
c                                                                               FlCkRt 193
c              Output design information                                        FlCkRt 194
      IF (<fc;PS-H> .ne. 0)  THEN                                               FlCkRt 195
        rH = <fc;PS-H>                                                          FlCkRt 196
        WRITE (IREPFL) 4,<rH;Iuniq>,1,1,0                                       FlCkRt 197
        CALL GetAttachments(Jfc, 2)                                             FlCkRt 198
        WRITE (IREPFL)  23,<rH;Iuniq>,1,2,19,                                   FlCkRt 199
     &    (NameAttachments(II,1,1),II=1,8),                                     FlCkRt 200
     &    (NameAttachments(II,1,2),II=1,8),                                     FlCkRt 201
     &    <fi.Minlet>,<fc:CONDUCT-DT>,<fc;DesignDP>                             FlCkRt 202
        DO  Irow=2,NumRowsOfAttachments                                         FlCkRt 203
          WRITE (IREPFL)  20,<rH;Iuniq>,1,3,16,                                 FlCkRt 204
     &      (NameAttachments(II,Irow,1),II=1,8),                                FlCkRt 205
     &      (NameAttachments(II,Irow,2),II=1,8)                                 FlCkRt 206
        ENDDO                                                                   FlCkRt 207
      ENDIF                                                                     FlCkRt 208
c                                                                               FlCkRt 209
c                                                                               FlCkRt 210
c ============ HOURLY REPORTS - HOURLY DATA =================================== FlCkRt 211
      CASE (62)                                                                 FlCkRt 212
c                                                                               FlCkRt 213
      IF (<fc;HourRepBuf> .EQ. 0)  RETURN                                       FlCkRt 214
c                                                                               FlCkRt 215
      IAptr = <fc;HourRepBuf>-1                                                 FlCkRt 216
c                                                                               FlCkRt 217
C     AA(IAptr+ 1)   = (<fo.Houtlet> - <fi.Hinlet>) * <fi.Minlet>               FlCkRt 218
C     AA(IAptr+ 2) = <fo.Houtlet> - <fi.Hinlet>                                 FlCkRt 219
C     AA(IAptr+ 3) = <fo.Poutlet> - <fi.Pinlet>                                 FlCkRt 220
c                                                                               FlCkRt 221
c                                                                               FlCkRt 222
c ============ DESIGN CALCULATIONS - LOAD TO PLANT ============================ FlCkRt 223
      CASE (111)                                                                FlCkRt 224
c                                                                               FlCkRt 225
c              This call calculates the outlet mass flow rate and               FlCkRt 226
c              temperature as a function of the                                 FlCkRt 227
c              inlet conditions.                                                FlCkRt 228
c                                                                               FlCkRt 229
c              Design mass flow of demanders                                    FlCkRt 230
      CALL FluidNode(Kfi, xR,xS,                                                FlCkRt 231
     &                    <fc;DesignFlow>, xM2, xM3, xMreqd,                    FlCkRt 232
     &                    <fi.Tinlet>, xTmin, xTmax,                            FlCkRt 233
     &                    xPmin, xPreqd)                                        FlCkRt 234
c              design flow                                                      FlCkRt 235
      IF (<fc:FLOW> .GT. 0.)  THEN                                              FlCkRt 236
        <fi.Minlet> = <fc:FLOW>                                                 FlCkRt 237
      ELSE                                                                      FlCkRt 238
        <fi.Minlet> = <fc;DesignFlow>                                           FlCkRt 239
      ENDIF                                                                     FlCkRt 240
      <fo.Moutlet> = <fi.Minlet>                                                FlCkRt 241
      <fo.Mreqd>   = <fi.Minlet>                                                FlCkRt 242
c                                                                               FlCkRt 243
c              Circuit thermal heat gain/loss parameters                        FlCkRt 244
      CALL FluidCircuit_dQdesign(Jfc)                                           FlCkRt 245
c              adjust outlet temperature for thermal losses                     FlCkRt 246
      <fo.Toutlet> = <fi.Tinlet> + <fc;DesignDT>                                FlCkRt 247
c                                                                               FlCkRt 248
c              Circuit pressure loss                                            FlCkRt 249
      IF (<fc:NET-HEAD> .EQ. 0.)  THEN                                          FlCkRt 250
        IF (<fc:EQUIV-LENGTH> .EQ. 0.)  THEN                                    FlCkRt 251
c              When head or length not specified, default head loss             FlCkRt 252
c              based on 2" average pipe size, 4ft/sec velocity,                 FlCkRt 253
c              3'/100' doubled for fittings                                     FlCkRt 254
          Head = <fc:AVG-CIRC-TIME> * 60.0 * 4.0 * 6.0 / 100.                   FlCkRt 255
        ELSE                                                                    FlCkRt 256
          Head = <fc:EQUIV-LENGTH> * 6.0 / 100.                                 FlCkRt 257
        ENDIF                                                                   FlCkRt 258
      ELSE                                                                      FlCkRt 259
        Head = <fc:NET-HEAD>                                                    FlCkRt 260
      ENDIF                                                                     FlCkRt 261
      <fc;DesignDP> = FluidDP_Design(<fc;FluidProp>, <fi.Minlet>, Head)         FlCkRt 262
c                                                                               FlCkRt 263
c              Circuit fluid volume and heat capacity                           FlCkRt 264
      IF (<fc:FLUID-VOL> .GT. 0.)  THEN                                         FlCkRt 265
        <fc;FluidVol> = <fc:FLUID-VOL>                                          FlCkRt 266
      ELSE     ! base on average circulation time                               FlCkRt 267
        <fc;FluidVol> = <fo.Moutlet> * <fc:AVG-CIRC-TIME>                       FlCkRt 268
      ENDIF                                                                     FlCkRt 269
      <fc;Btu/F> = <fc;FluidVol> * <pl.Btuh/GPM-F> / 60.                        FlCkRt 270
c                                                                               FlCkRt 271
c                                                                               FlCkRt 272
c ============ DESIGN CALCULATIONS - PLANT TO LOAD ============================ FlCkRt 273
      CASE (112)                                                                FlCkRt 274
c                                                                               FlCkRt 275
c              This call calculates the inlet pressure as a function            FlCkRt 276
c              of the outlet conditions.                                        FlCkRt 277
c                                                                               FlCkRt 278
c              Initialize the outlet conditions                                 FlCkRt 279
      <fo.Poutlet> = <Xfo.Poutlet>                                              FlCkRt 280
c              adjust outlet conditions for friction                            FlCkRt 281
      <fi.Pinlet> = <fo.Poutlet> + <fc;DesignDP>                                FlCkRt 282
      <fi.Preqd>  = <fo.Preqd>   + <fc;DesignDP>                                FlCkRt 283
c                                                                               FlCkRt 284
c                                                                               FlCkRt 285
c ============ DESIGN CALCULATIONS - RECONCILIATION =========================== FlCkRt 286
      CASE (119)                                                                FlCkRt 287
c                                                                               FlCkRt 288
c ??           change Jpl's to Jfc once Jfc is a component                      FlCkRt 289
c              Should have loads attached                                       FlCkRt 290
      IF (<fi;Xnode> .EQ. 0)  THEN                                              FlCkRt 291
        CALL MSGSIM(-2,II,II,II,II)                                             FlCkRt 292
        WRITE (IOUTPT,9001)  (<pl:NAME>,II=1,8)                                 FlCkRt 293
      ENDIF                                                                     FlCkRt 294
c                                                                               FlCkRt 295
c              Check if flow is reasonable                                      FlCkRt 296
      IF (<fi.Minlet> .EQ. 0.)  THEN                                            FlCkRt 297
        IF (<fi;Xnode> .GT. 0  .AND.  <pl:TYPE> .NE. 8)  THEN                   FlCkRt 298
c              No design flows                                                  FlCkRt 299
          CALL MSGSIM(-2,II,II,II,II)                                           FlCkRt 300
          WRITE (IOUTPT,9002)  (<pl:NAME>,II=1,8)                               FlCkRt 301
        ENDIF                                                                   FlCkRt 302
      ELSEIF (<fc:FLOW> .GT. 0.)  THEN                                          FlCkRt 303
        IF (<fc:FLOW> .LT. <fc;DesignFlow>*0.95)  THEN                          FlCkRt 304
c              User-specified flow is under designed                            FlCkRt 305
          CALL MSGSIM(-3,II,II,II,II)                                           FlCkRt 306
          WRITE (IOUTPT, 9003) (<pl:NAME>,II=1,8),                              FlCkRt 307
     &                          <fc:FLOW>, <fc;DesignFlow>                      FlCkRt 308
        ENDIF                                                                   FlCkRt 309
      ENDIF                                                                     FlCkRt 310
c                                                                               FlCkRt 311
      <fc;DesignFlow> = <fo.Moutlet>                                            FlCkRt 312
c                                                                               FlCkRt 313
c              Log mean temperature and heat stored in circuit                  FlCkRt 314
      <fc.LMT'>    = (<fi.Tinlet>+<fo.Toutlet>) * 0.5                           FlCkRt 315
      <fc.Qstore'> = <fc;Btu/F> * <fc.LMT'>                                     FlCkRt 316
c              decay rate for no flow condition                                 FlCkRt 317
      IF (<fc;UA> .GT. 0.)                                                      FlCkRt 318
     &  <fc;DecayRate> = 1.0 - EXP(-<fc;UA> / <fc;Btu/F>)                       FlCkRt 319
c                                                                               FlCkRt 320
c                                                                               FlCkRt 321
c ============ ATTACHMENTS ==================================================== FlCkRt 322
c                                                                               FlCkRt 323
c              Initial attachments                                              FlCkRt 324
      CASE (201)                                                                FlCkRt 325
c              Component pointers, schedules, and curves                        FlCkRt 326
        <fc:PLANT>     = Jcomponent(2,  <fc:PLANT>)                             FlCkRt 327
        <fc:TRUNK-CKT> = Jcomponent(28, <fc:TRUNK-CKT>)                         FlCkRt 328
        <fc:AUX-METER> = Jcomponent(13, <fc:AUX-METER>)                         FlCkRt 329
        <fc:COST-DATA> = Jcomponent(18, <fc:COST-DATA>)                         FlCkRt 330
                                                                                FlCkRt 331
c              Second level of attachments                                      FlCkRt 332
      CASE (202)                                                                FlCkRt 333
                                                                                FlCkRt 334
c              Fluid properties subcomponent                                    FlCkRt 335
        <fc;FluidProp> = NewFluidProperties(Jfc, <fc:PLANT>, 11,                FlCkRt 336
     &                     <fc:FLUID-VELOCIT>, 4000., 2000., 0.25,              FlCkRt 337
     &                     0., <fc:EQUIV-LENGTH>, <fc:PIPE-DIAMETER>,           FlCkRt 338
     &                                               <fc:PIPE-ROUGHNES>,        FlCkRt 339
     &                    <pl:RATED-FLUID>, <pl:RATED-CONC>,                    FlCkRt 340
     &                    <pl:RATED-T>, <fc:FLOW>, 0.)                          FlCkRt 341
                                                                                FlCkRt 342
c              Create nodes                                                     FlCkRt 343
      CASE (203)                                                                FlCkRt 344
c              Circuit outlet - note there is no end-use accounting             FlCkRt 345
        IF (<fc:SUBTYPE> .EQ. 1)  THEN                                          FlCkRt 346
c              attached to plant                                                FlCkRt 347
          <fc;OutletNode> = NewNode(1, Jpl,0,Jfc,<fc:PLANT>,                    FlCkRt 348
     &                                                 52,2,0, 1.)              FlCkRt 349
        ELSE  ! branch                                                          FlCkRt 350
          <fc;OutletNode> = NewNode(1, Jpl,0,Jfc,<fc:TRUNK-CKT>,                FlCkRt 351
     &                                                 52,2,0, 1.)              FlCkRt 352
        ENDIF                                                                   FlCkRt 353
c              and inlet                                                        FlCkRt 354
        <fc;InletNode> = NewNode(1, Jpl,0,Jfc,0, 52,1,0, 1.)                    FlCkRt 355
c              thermal gains                                                    FlCkRt 356
        <fc;LossNode> = NewNode(1, Jpl,0,Jfc,<fc:LOSS-ZONE>, 31,5,0, 1.)        FlCkRt 357
c              auxiliary electrical                                             FlCkRt 358
        Jme = <fc:AUX-METER>                                                    FlCkRt 359
        <fc:AUX-METER>  = NewNode(1, Jpl,0,Jfc,Jme, 11,2,7, 1.)                 FlCkRt 360
c                                                                               FlCkRt 361
c              Links, lists                                                     FlCkRt 362
      CASE (205)                                                                FlCkRt 363
c              List of nodes                                                    FlCkRt 364
        CALL ListNodes(<fc;Nodes>, 0,0,Jfc,0, 0,0)                              FlCkRt 365
c                                                                               FlCkRt 366
c              Histories                                                        FlCkRt 367
      CASE (208)                                                                FlCkRt 368
c              Inlet history - set flags in inlet Xnodes when                   FlCkRt 369
c              not converged (does not require zone attached to loss            FlCkRt 370
c              to re-iterate)                                                   FlCkRt 371
        <fc;LoadHsty> = NewHistory(Jpl,0,Jfc, <fi;Xnode>, Kfi,                  FlCkRt 372
     &                    0, 0, 1.,                                             FlCkRt 373
     &                    <#fi.Pinlet>, <sp:ERROR-HEAD>, 2,                     FlCkRt 374
     &                    0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0)               FlCkRt 375
c              Outlet history                                                   FlCkRt 376
        <fc;PlantHsty> = NewHistory(Jpl,0,Jfc, <fo;Xnode>, Kfo,                 FlCkRt 377
     &                    0, 0, 1.,                                             FlCkRt 378
     &                    <#fo.Moutlet>, <sp:ERROR-FLOW>, 2,                    FlCkRt 379
     &                    <#fo.Toutlet>, <sp:ERROR-T>   , 1,                    FlCkRt 380
     &                    0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0)                       FlCkRt 381
c                                                                               FlCkRt 382
c              History lists                                                    FlCkRt 383
      CASE (209)                                                                FlCkRt 384
c              Component histories                                              FlCkRt 385
        CALL ListHstys(<fc;Hstys>, 0, 0, Jfc)                                   FlCkRt 386
c                                                                               FlCkRt 387
c              Dump pointers                                                    FlCkRt 388
      CASE (210)                                                                FlCkRt 389
        IF (<fc;Previous> .EQ. 0)  WRITE (IOUTPT, 9201)                         FlCkRt 390
        Jna = <fc:PLANT>                                                        FlCkRt 391
        WRITE (IOUTPT, 9202)  (<na:NAME>,II=1,8),                               FlCkRt 392
     &    Jfc, Kfi, Kfo, <fc;LossNode>, <fc;FluidProp>                          FlCkRt 393
c                                                                               FlCkRt 394
c                                                                               FlCkRt 395
      END SELECT  ! Mode                                                        FlCkRt 396
c                                                                               FlCkRt 397
      RETURN                                                                    FlCkRt 398
c                                                                               FlCkRt 399
c              Message formats                                                  FlCkRt 400
 9001 FORMAT(14X,'Fluid-Circuit: ',8A4,' has no attached'              /        FlCkRt 401
     &       14X,'loads.'                                              )        FlCkRt 402
 9002 FORMAT(14X,'Fluid-Circuit: ',8A4,' has zero'                     /        FlCkRt 403
     &       14X,'design refrigerant flow from its loads.'             )        FlCkRt 404
 9003 FORMAT(14X,'Fluid-Circuit: ',8A4,' has a specified'              /        FlCkRt 405
     &       14X,'flow = ',F10.1,', but the design flow = ',F10.1      )        FlCkRt 406
 9201 FORMAT(/' FLUID-CIRCUITs                         Jfc       Kfi',          FlCkRt 407
     &'       Kfo      Loss      Prop'                                 /        FlCkRt 408
     &1x,32('-'),5('  --------'))                                               FlCkRt 409
 9202 FORMAT(1x,8A4,5I10)                                                       FlCkRt 410
      END                                                                       FlCkRt 411
      SUBROUTINE FluidCircuit_Supply(Mode, Jfc)                                 FlCkSu   2
c                                                                               FlCkSu   3
c              Simulates a fluid circuit that supplies liquid to coils          FlCkSu   4
c              and other demands                                                FlCkSu   5
c                                                                               FlCkSu   6
c              Mode =  0-9  Attachment calculations                             FlCkSu   7
c                       10  Design outlet T, P, H as f(inlet)                   FlCkSu   8
c                       11  Design inlet M, Preqd as f(outlet)                  FlCkSu   9
c                       32  Simulate from downstream to upstream                FlCkSu  10
c                             Inlet M and Preqd as f(outlet)                    FlCkSu  11
c                       33  Simulate from upstream to downstream                FlCkSu  12
c                             Outlet T, P, H as f(inlet)                        FlCkSu  13
c                                                                               FlCkSu  14
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /Attach/ NameAttachments(8,100,3), NumRowsOfAttachments           /Attach/ 2
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON  /WEATH / IWDID(5),LRECX,WLAT,WLONG,LTIMZ,IFX,IWSIZ,               /WEATH/  2
     1                 CLRNES,TGNDR,WBT,DBT,Patm,CLDAMT,ISNOW,IRAIN,            /WEATH/  3
     2                 IWNDDR,HUMRAT,DENSTY,ENTHAL,DIFSOL,DIRSOL,SOLRAD,        /WEATH/  4
     3                 ICLDTY,WNDSPD,IDUMMY,DPT,WNDDRR,CLDCOV,RDNCC,            /WEATH/  5
     4                 BSCC,SKYA,DBTR,GTEMP(12),CLR(12),ESKY,EGND,IWINTR        /WEATH/  6
c                                                                               FlCkSu  22
      COMMON  /PlntKy/ CHW, Pipe2, loop3, HW, loop5, STM, WLHP, DHW,            /PlntKy/ 2
     &                 CW, Deleted, Pipe2h, WLHPh, COGEN, NoType,               /PlntKy/ 3
     &                 Fixed, OA, Sch, Load,  Zone, Outdoor,                    /PlntKy/ 4
     &                 Standby, Demand, Snap, Scheduled,                        /PlntKy/ 5
     &                 CONSTANT, VARIABLE, ModeText(4),                         /PlntKy/ 6
     &                 OffMode, Floating, HeatMode, CoolMode, ElecMode,         /PlntKy/ 7
     &                 AtCoils, EnterLoop, AtPump,                              /PlntKy/ 8
     &                 INDOORS, OUTDOORS, TUNNEL, UNDERGROUND,                  /PlntKy/ 9
     &                 PRIMARY, SECONDARY,                                      /PlntKy/10
     &                 DIRECT, HX,                                              /PlntKy/11
     &                 Water, Ethylene, Propylene, Brine                        /PlntKy/12
      INTEGER          CHW, Pipe2, loop3, HW, loop5, STM, WLHP, DHW,            /PlntKy/13
     &                 CW, Deleted, Pipe2h, WLHPh, COGEN, NoType,               /PlntKy/14
     &                 Fixed, OA, Sch, Load,  Zone, Outdoor,                    /PlntKy/15
     &                 Standby, Demand, Snap, Scheduled,                        /PlntKy/16
     &                 CONSTANT, VARIABLE, ModeText,                            /PlntKy/17
     &                 OffMode, Floating, HeatMode, CoolMode, ElecMode,         /PlntKy/18
     &                 AtCoils, EnterLoop, AtPump,                              /PlntKy/19
     &                 INDOORS, OUTDOORS, TUNNEL, UNDERGROUND,                  /PlntKy/20
     &                 PRIMARY, SECONDARY,                                      /PlntKy/21
     &                 DIRECT, HX,                                              /PlntKy/22
     &                 Water, Ethylene, Propylene, Brine                        /PlntKy/23
                                                                                FlCkSu  24
      INTEGER  Xfi, rH                                                          FlCkSu  25
      REAL     Mpeak                                                            FlCkSu  26
                                                                                FlCkSu  27
      Jpl = <fc:PLANT>                   ! plant                                FlCkSu  28
      Kfi = <fc;InletNode>               ! inlet node                           FlCkSu  29
      Xfi = <fi;Xnode>                   ! inlet Xnode                          FlCkSu  30
      Kfo = <fc;OutletNode>              ! outlet node                          FlCkSu  31
                                                                                FlCkSu  32
      SELECT CASE (Mode)                                                        FlCkSu  33
c                                                                               FlCkSu  34
c                                                                               FlCkSu  35
c ============ HOURLY INITIALIZATION ========================================== FlCkSu  36
      CASE (10)                                                                 FlCkSu  37
c                                                                               FlCkSu  38
c              Log mean temperature and heat stored in circuit                  FlCkSu  39
      <fc.LMT>    = <fc.LMT'>                                                   FlCkSu  40
      <fc.Qstore> = <fc.Qstore'>                                                FlCkSu  41
c                                                                               FlCkSu  42
c              Calculate error between what zone thinks the thermal loss        FlCkSu  43
c              was vs. the actual                                               FlCkSu  44
      IF (<fc:LOSS-ZONE> .GT. 0)  THEN                                          FlCkSu  45
        Kex = <fc;LossNode>                                                     FlCkSu  46
        <ex.Qerror> = <fc.Qconduct> - <ex.Qextract>                             FlCkSu  47
      ENDIF                                                                     FlCkSu  48
c                                                                               FlCkSu  49
c                                                                               FlCkSu  50
c ============ HOURLY SIMULATION - LOADS TO PLANT ============================= FlCkSu  51
      CASE (31)                                                                 FlCkSu  52
c                                                                               FlCkSu  53
c              This call calculates the inlet mass flow rate, required          FlCkSu  54
c              temperature, and required pressure as a function of the          FlCkSu  55
c              outlet conditions.                                               FlCkSu  56
c                                                                               FlCkSu  57
c              Get the demands on this circuit                                  FlCkSu  58
      CALL FluidNode(Kfo, <fo.RunFrac>, <fo.CtrlMode>,                          FlCkSu  59
     &              <fo.Moutlet>,<fo.Moutlet2>,<fo.Moutlet3>,<fo.Mreqd>,        FlCkSu  60
     &              xT, Tmin, Tmax,                                             FlCkSu  61
     &              xPmin, <fo.Preqd>)                                          FlCkSu  62
c                                                                               FlCkSu  63
c              Inlet properties                                                 FlCkSu  64
      <fi.RunFrac>  = <fo.RunFrac>                                              FlCkSu  65
      <fi.CtrlMode> = <fo.CtrlMode>                                             FlCkSu  66
      <fi.Minlet>   = <fo.Moutlet>                                              FlCkSu  67
      <fi.Minlet2>  = <fo.Moutlet2>                                             FlCkSu  68
      <fi.Minlet3>  = <fo.Moutlet3>                                             FlCkSu  69
c                                                                               FlCkSu  70
c              Requested properties                                             FlCkSu  71
      <fi.Mreqd> = <fo.Mreqd>                                                   FlCkSu  72
      IF (<fi.Mreqd> .GT. 0.)  THEN                                             FlCkSu  73
c              Pressure                                                         FlCkSu  74
        Mpeak = <fi.Mreqd>                                                      FlCkSu  75
        IF (<fi.RunFrac> .GT. 0.)  Mpeak = Mpeak / <fi.RunFrac>                 FlCkSu  76
        dP = FluidDP(<fc;FluidProp>, Mpeak)                                     FlCkSu  77
        IF (<fc;RetHeadNode> .GT. 0)  THEN                                      FlCkSu  78
c              differenial pressure sensor sets branch pressure                 FlCkSu  79
          Kfx        = <fc;RetHeadNode>                                         FlCkSu  80
          <fi.Preqd> = <fx.Pfluid> + <fc;HeadSetpt> + dP                        FlCkSu  81
        ELSE                                                                    FlCkSu  82
c              no branch controller - worst case load sets pressure             FlCkSu  83
          IF (<fo.Preqd> .LT. -888.)  THEN                                      FlCkSu  84
            <fi.Preqd> = -88888.                                                FlCkSu  85
          ELSE                                                                  FlCkSu  86
            <fi.Preqd> = <fo.Preqd> + dP                                        FlCkSu  87
          ENDIF                                                                 FlCkSu  88
        ENDIF                                                                   FlCkSu  89
c              Temperature                                                      FlCkSu  90
        IF (<pl.CtrlMode> .EQ. HeatMode)  THEN                                  FlCkSu  91
          <fo.Treqd> = Tmax  ! heating                                          FlCkSu  92
        ELSE                                                                    FlCkSu  93
          <fo.Treqd> = Tmin  ! non-heating                                      FlCkSu  94
        ENDIF                                                                   FlCkSu  95
        IF (<fo.Treqd> .LT. -888.)  THEN                                        FlCkSu  96
          <fi.Treqd> = -88888.                                                  FlCkSu  97
        ELSE                                                                    FlCkSu  98
c              adjust the requested temperature for thermal losses              FlCkSu  99
          IF (<fc;UA> .EQ. 0.)  THEN                                            FlCkSu 100
            <fi.Treqd> = <fo.Treqd>                                             FlCkSu 101
          ELSE                                                                  FlCkSu 102
            CALL FluidCircuit_dQ(<fc;LossNode>, 2,<fo.Treqd>,                   FlCkSu 103
     &                                           xx,<fc.dTreqd>)                FlCkSu 104
            <fi.Treqd> = <fo.Treqd> - <fc.dTreqd>                               FlCkSu 105
          ENDIF                                                                 FlCkSu 106
c              and for temperature swing from previous hour                     FlCkSu 107
          <fi.Treqd> = <fi.Treqd> - <fc.dTswing>                                FlCkSu 108
        ENDIF  ! fo,Treqd                                                       FlCkSu 109
      ENDIF                                                                     FlCkSu 110
c                                                                               FlCkSu 111
      CALL CnvgCheck(1, <fc;PlantHsty>)                                         FlCkSu 112
c                                                                               FlCkSu 113
c              Load relative to reference point                                 FlCkSu 114
      <fi.Qinlet>  = <fi.Minlet>  * <pl.Btuh/GPM-F>                             FlCkSu 115
     &                            * (<fi.Tinlet>-<pl.Tref>)                     FlCkSu 116
c                                                                               FlCkSu 117
c                                                                               FlCkSu 118
c ============ HOURLY SIMULATION - PLANT TO LOADS ============================= FlCkSu 119
      CASE (32)                                                                 FlCkSu 120
c                                                                               FlCkSu 121
c              This call calculates the outlet temperature and pressure         FlCkSu 122
c              as a function of the inlet conditions.                           FlCkSu 123
c                                                                               FlCkSu 124
c              Initialize the inlet conditions                                  FlCkSu 125
      <fi.Tinlet> = <Xfi.Tinlet>                                                FlCkSu 126
      <fi.Pinlet> = <Xfi.Pinlet>                                                FlCkSu 127
c                                                                               FlCkSu 128
c              Adjust outlet temperature for thermal losses                     FlCkSu 129
      IF (<fc;UA> .GT. 0.)  THEN                                                FlCkSu 130
        CALL FluidCircuit_dQ(<fc;LossNode>, 1,<fi.Tinlet>,                      FlCkSu 131
     &                                       <fc.Qconduct>,<fc.dT>)             FlCkSu 132
        IF (<fi.Minlet> .GT. 0.00001)  THEN                                     FlCkSu 133
          <fo.Toutlet> = <fi.Tinlet> + <fc.dT>                                  FlCkSu 134
        ELSE                                                                    FlCkSu 135
c              when no flow, pass on possible temperature with flow             FlCkSu 136
          <fo.Toutlet> = <fi.Tinlet>                                            FlCkSu 137
        ENDIF                                                                   FlCkSu 138
      ELSE                                                                      FlCkSu 139
        <fo.Toutlet> = <fi.Tinlet>                                              FlCkSu 140
        <fc.LMT'>    = <fi.Tinlet>                                              FlCkSu 141
      ENDIF                                                                     FlCkSu 142
c              and for temperature swing from previous hour                     FlCkSu 143
      IF (<fi.Minlet> .GT. 0.)  THEN                                            FlCkSu 144
        Ctransport   = <fi.Minlet> * <pl.Btuh/GPM-F>                            FlCkSu 145
        Qtransport   = Ctransport  * <fc.LMT'>                                  FlCkSu 146
        Qmix         = <fc.Qstore> + Qtransport                                 FlCkSu 147
        Tmix         = Qmix / (<fc;Btu/F> + Ctransport)                         FlCkSu 148
        <fc.Qstore'> = <fc;Btu/F> * Tmix                                        FlCkSu 149
        Qswing       = <fc.Qstore> - <fc.Qstore'>                               FlCkSu 150
        <fc.dTswing> = Qswing / Ctransport                                      FlCkSu 151
        <fo.Toutlet> = <fo.Toutlet> + <fc.dTswing>                              FlCkSu 152
      ENDIF                                                                     FlCkSu 153
c                                                                               FlCkSu 154
c              Adjust outlet pressure for pressure drop                         FlCkSu 155
      IF (<fi.Minlet> .GT. 0.)  THEN                                            FlCkSu 156
        <fc.Mpeak> = 0.                                                         FlCkSu 157
        IF (<fi.RunFrac> .GT. 0.)                                               FlCkSu 158
     &    <fc.Mpeak> = <fi.Minlet2>/<fi.RunFrac>                                FlCkSu 159
        IF (<pl.RunFrac> .GT. 0.)                                               FlCkSu 160
     &    <fc.Mpeak> = <fi.Minlet3>/<pl.RunFrac> + <fc.Mpeak>                   FlCkSu 161
        <fc.dP> = FluidDP(<fc;FluidProp>, <fc.Mpeak>)                           FlCkSu 162
      ELSE                                                                      FlCkSu 163
        <fc.dP> = 0.                                                            FlCkSu 164
      ENDIF                                                                     FlCkSu 165
      <fo.Poutlet> = <fi.Pinlet> - <fc.dP>                                      FlCkSu 166
c                                                                               FlCkSu 167
c              Check for convergence; set outlet Xnode flags if not             FlCkSu 168
      CALL CnvgCheck(1, <fc;LoadHsty>)                                          FlCkSu 169
c                                                                               FlCkSu 170
c              Loads relative to reference point                                FlCkSu 171
      <fi.Qinlet>  = <fo.Moutlet> * <pl.Btuh/GPM-F>                             FlCkSu 172
     &                            * (<fi.Tinlet> - <pl.Tref>)                   FlCkSu 173
      <fo.Qoutlet> = <fo.Moutlet> * <pl.Btuh/GPM-F>                             FlCkSu 174
     &                            * (<fo.Toutlet>-<pl.Tref>)                    FlCkSu 175
c                                                                               FlCkSu 176
c              Circuit auxiliary electrical loads - note that these do not      FlCkSu 177
c              show up as a load on the fluid                                   FlCkSu 178
      IF (<fc:AUX-KW> .GT. 0.)  THEN                                            FlCkSu 179
        Kmd = <fc:AUX-METER>                                                    FlCkSu 180
        SELECT CASE (<fc:AUX-MODE>)                                             FlCkSu 181
          CASE (1)  ! Always                                                    FlCkSu 182
            <md.Elec> = <fc:AUX-KW>                                             FlCkSu 183
          CASE (2)  ! When on                                                   FlCkSu 184
            IF (<fi.Minlet> .GT. 0.)  THEN                                      FlCkSu 185
              <md.Elec> = <fc:AUX-KW>                                           FlCkSu 186
            ELSE                                                                FlCkSu 187
              <md.Elec> = 0.                                                    FlCkSu 188
            ENDIF                                                               FlCkSu 189
          CASE (3)  ! When off                                                  FlCkSu 190
            IF (<fi.Minlet> .EQ. 0.)  THEN                                      FlCkSu 191
              <md.Elec> = <fc:AUX-KW>                                           FlCkSu 192
            ELSE                                                                FlCkSu 193
              <md.Elec> = 0.                                                    FlCkSu 194
            ENDIF                                                               FlCkSu 195
          CASE (4)  ! Scheduled                                                 FlCkSu 196
            Val = SchVal(<fc:AUX-SCH>)                                          FlCkSu 197
            IF (Val .NE. 1.0  .AND.  Val .NE. 0.0)  THEN                        FlCkSu 198
              IF (Val .LT. DBT)  THEN                                           FlCkSu 199
                Val = 1.0                                                       FlCkSu 200
              ELSE                                                              FlCkSu 201
                Val = 0.0                                                       FlCkSu 202
              ENDIF                                                             FlCkSu 203
            ENDIF                                                               FlCkSu 204
            <md.Elec> = <fc:AUX-KW> * Val                                       FlCkSu 205
        END SELECT                                                              FlCkSu 206
      ENDIF                                                                     FlCkSu 207
c                                                                               FlCkSu 208
c                                                                               FlCkSu 209
c ============ REPORT CREATION ================================================ FlCkSu 210
      CASE (50)                                                                 FlCkSu 211
c                                                                               FlCkSu 212
c              statistics blocks                                                FlCkSu 213
      Ks2Sup    = NewStat2(Kfo,  <+fo.Moutlet>,  0, 1.)                         FlCkSu 214
      Ks5SupBin = NewStat5(Kfo,  <+fo.Moutlet>,  0, 1.)                         FlCkSu 215
      Ks2Gain   = NewStat2(Jfc, <+fc.Qconduct>,  1, 1.)                         FlCkSu 216
      Ks2Loss   = NewStat2(Jfc, <+fc.Qconduct>, -1, 1.)                         FlCkSu 217
c                                                                               FlCkSu 218
c              Create the type "H" report                                       FlCkSu 219
c      IF (<fc:REPORTS> .GT. 0  .AND.  IREPRT(3,23) .GT. 0)                     FlCkSu 220
c     &  <fc;PS-H> = NewReport_H(Jfc, 86,                                       FlCkSu 221
c     &                          4, 5, 6,                                       FlCkSu 222
c     &                          Ks2Sup, Ks2Gain, Ks2Loss, 0,                   FlCkSu 223
c     &                          Ks5SupBin, 0, 0,                               FlCkSu 224
c     &                          0, 0, 0)                                       FlCkSu 225
c                                                                               FlCkSu 226
c                                                                               FlCkSu 227
c ============ REPORT ORDER =================================================== FlCkSu 228
      CASE (52)                                                                 FlCkSu 229
c                                                                               FlCkSu 230
      Call Report_H(Mode, <fc;PS-H>)                                            FlCkSu 231
c                                                                               FlCkSu 232
c                                                                               FlCkSu 233
c ============ REPORTS - VERIFICATION DATA ==================================== FlCkSu 234
      CASE (54)                                                                 FlCkSu 235
c                                                                               FlCkSu 236
c              Output design information                                        FlCkSu 237
      IF (<fc;PS-H> .ne. 0)  THEN                                               FlCkSu 238
        rH = <fc;PS-H>                                                          FlCkSu 239
        WRITE (IREPFL) 4,<rH;Iuniq>,1,1,0                                       FlCkSu 240
        CALL GetAttachments(Jfc, 2)                                             FlCkSu 241
        WRITE (IREPFL)  23,<rH;Iuniq>,1,2,19,                                   FlCkSu 242
     &    (NameAttachments(II,1,1),II=1,8),                                     FlCkSu 243
     &    (NameAttachments(II,1,2),II=1,8),                                     FlCkSu 244
     &    <fi.Minlet>,<fc:CONDUCT-DT>,<fc;DesignDP>                             FlCkSu 245
        DO  Irow=2,NumRowsOfAttachments                                         FlCkSu 246
          WRITE (IREPFL)  20,<rH;Iuniq>,1,3,16,                                 FlCkSu 247
     &      (NameAttachments(II,Irow,1),II=1,8),                                FlCkSu 248
     &      (NameAttachments(II,Irow,2),II=1,8)                                 FlCkSu 249
        ENDDO                                                                   FlCkSu 250
      ENDIF                                                                     FlCkSu 251
c                                                                               FlCkSu 252
c                                                                               FlCkSu 253
c ============ HOURLY REPORTS - HOURLY DATA =================================== FlCkSu 254
      CASE (62)                                                                 FlCkSu 255
c                                                                               FlCkSu 256
      IF (<fc;HourRepBuf> .EQ. 0)  RETURN                                       FlCkSu 257
c                                                                               FlCkSu 258
      IAptr = <fc;HourRepBuf>-1                                                 FlCkSu 259
c                                                                               FlCkSu 260
C     AA(IAptr+ 1)   = (<fo.Houtlet> - <fi.Hinlet>) * <fi.Minlet>               FlCkSu 261
C     AA(IAptr+ 2) = <fo.Houtlet> - <fi.Hinlet>                                 FlCkSu 262
C     AA(IAptr+ 3) = <fo.Poutlet> - <fi.Pinlet>                                 FlCkSu 263
c                                                                               FlCkSu 264
c                                                                               FlCkSu 265
c ============ DESIGN CALCULATIONS - LOAD TO PLANT ============================ FlCkSu 266
      CASE (111)                                                                FlCkSu 267
c                                                                               FlCkSu 268
c              This call calculates the inlet mass flow rate and                FlCkSu 269
c              required temperature and pressure as a function of the           FlCkSu 270
c              outlet conditions.                                               FlCkSu 271
c                                                                               FlCkSu 272
c              Design mass flow of demanders                                    FlCkSu 273
      CALL FluidNode(Kfo, xR, xS,                                               FlCkSu 274
     &                    <fc;DesignFlow>, xM2, xM3, xMreqd,                    FlCkSu 275
     &                    xT, Tmin, Tmax,                                       FlCkSu 276
     &                    xPmin, <fo.Preqd>)                                    FlCkSu 277
c                                                                               FlCkSu 278
c              Design flow                                                      FlCkSu 279
      IF (<fc:FLOW> .GT. 0.)  THEN                                              FlCkSu 280
        <fo.Moutlet> = <fc:FLOW>                                                FlCkSu 281
      ELSE                                                                      FlCkSu 282
        <fo.Moutlet> = <fc;DesignFlow>                                          FlCkSu 283
      ENDIF                                                                     FlCkSu 284
      IF (<fo.Moutlet> .EQ. 0.)  RETURN                                         FlCkSu 285
      <fi.Minlet> = <fo.Moutlet>                                                FlCkSu 286
      <fi.Mreqd>  = <fo.Moutlet>                                                FlCkSu 287
c                                                                               FlCkSu 288
c              Circuit thermal heat gain/loss parameters                        FlCkSu 289
      CALL FluidCircuit_dQdesign(Jfc)                                           FlCkSu 290
c              Required temperature                                             FlCkSu 291
      IF (<pl.CtrlMode> .EQ. HeatMode)  THEN                                    FlCkSu 292
c              heating                                                          FlCkSu 293
        <fo.Treqd> = Tmax                                                       FlCkSu 294
      ELSE                                                                      FlCkSu 295
        <fo.Treqd> = Tmin                                                       FlCkSu 296
      ENDIF                                                                     FlCkSu 297
c              adjust required temperature for thermal losses                   FlCkSu 298
      <fi.Treqd> = <fo.Treqd> - <fc;DesignDT>                                   FlCkSu 299
c                                                                               FlCkSu 300
c              Circuit pressure loss                                            FlCkSu 301
      IF (<fc:NET-HEAD> .EQ. 0.)  THEN                                          FlCkSu 302
        IF (<fc:EQUIV-LENGTH> .EQ. 0.)  THEN                                    FlCkSu 303
c              When head or length not specified, default head loss             FlCkSu 304
c              based on 2" average pipe size, 4ft/sec velocity,                 FlCkSu 305
c              3'/100' doubled for fittings                                     FlCkSu 306
          Head = <fc:AVG-CIRC-TIME> * 60.0 * 4.0 * 6.0 / 100.                   FlCkSu 307
        ELSE                                                                    FlCkSu 308
          Head = <fc:EQUIV-LENGTH> * 6.0 / 100.                                 FlCkSu 309
        ENDIF                                                                   FlCkSu 310
      ELSE                                                                      FlCkSu 311
        Head = <fc:NET-HEAD>                                                    FlCkSu 312
      ENDIF                                                                     FlCkSu 313
      <fc;DesignDP> = FluidDP_Design(<fc;FluidProp>, <fi.Minlet>, Head)         FlCkSu 314
c              adjust required pressure for piping friction                     FlCkSu 315
      <fi.Preqd> = <fo.Preqd> + <fc;DesignDP>                                   FlCkSu 316
c                                                                               FlCkSu 317
c              Circuit fluid volume and heat capacity                           FlCkSu 318
      IF (<fc:FLUID-VOL> .GT. 0.)  THEN                                         FlCkSu 319
        <fc;FluidVol> = <fc:FLUID-VOL>                                          FlCkSu 320
      ELSE     ! base on average circulation time                               FlCkSu 321
        <fc;FluidVol> = <fo.Moutlet> * <fc:AVG-CIRC-TIME>                       FlCkSu 322
      ENDIF                                                                     FlCkSu 323
      <fc;Btu/F> = <fc;FluidVol> * <pl.Btuh/GPM-F> / 60.                        FlCkSu 324
c                                                                               FlCkSu 325
c                                                                               FlCkSu 326
c ============ DESIGN CALCULATIONS - PLANT TO LOAD ============================ FlCkSu 327
      CASE (112)                                                                FlCkSu 328
c                                                                               FlCkSu 329
c              This call calculates the outlet temperature and pressure         FlCkSu 330
c              as a function of the inlet conditions.                           FlCkSu 331
c                                                                               FlCkSu 332
c              Initialize the inlet conditions                                  FlCkSu 333
      <fi.Tinlet> = <Xfi.Tinlet>                                                FlCkSu 334
      <fi.Pinlet> = <Xfi.Pinlet>                                                FlCkSu 335
c                                                                               FlCkSu 336
c              Adjust outlet conditions for thermal losses                      FlCkSu 337
      <fo.Toutlet> = <fi.Tinlet> + <fc;DesignDT>                                FlCkSu 338
c              and for friction                                                 FlCkSu 339
      <fo.Poutlet> = <fi.Pinlet> - <fc;DesignDP>                                FlCkSu 340
c                                                                               FlCkSu 341
c                                                                               FlCkSu 342
c ============ DESIGN CALCULATIONS - RECONCILIATION =========================== FlCkSu 343
      CASE (119)                                                                FlCkSu 344
c                                                                               FlCkSu 345
c              Should have loads attached                                       FlCkSu 346
      IF (<fo;Xnode> .EQ. 0)  THEN                                              FlCkSu 347
        CALL MSGSIM(-2,II,II,II,II)                                             FlCkSu 348
        WRITE (IOUTPT,9001)  (<pl:NAME>,II=1,8)                                 FlCkSu 349
      ENDIF                                                                     FlCkSu 350
c                                                                               FlCkSu 351
c              Check if flow is reasonable                                      FlCkSu 352
      IF (<fo.Moutlet> .EQ. 0.)  THEN                                           FlCkSu 353
        IF (<fo;Xnode> .GT. 0)  THEN                                            FlCkSu 354
c              No design flows                                                  FlCkSu 355
          CALL MSGSIM(-2,II,II,II,II)                                           FlCkSu 356
          WRITE (IOUTPT,9002)  (<pl:NAME>,II=1,8)                               FlCkSu 357
        ENDIF                                                                   FlCkSu 358
      ELSEIF (<fc:FLOW> .GT. 0.)  THEN                                          FlCkSu 359
        IF (<fc:FLOW> .LT. <fc;DesignFlow>*0.95)  THEN                          FlCkSu 360
c              User-specified flow is under designed                            FlCkSu 361
          CALL MSGSIM(-3,II,II,II,II)                                           FlCkSu 362
          WRITE (IOUTPT, 9003) (<pl:NAME>,II=1,8),                              FlCkSu 363
     &                          <fc:FLOW>, <fc;DesignFlow>                      FlCkSu 364
        ENDIF                                                                   FlCkSu 365
      ENDIF                                                                     FlCkSu 366
c                                                                               FlCkSu 367
      <fc;DesignFlow> = <fo.Moutlet>                                            FlCkSu 368
c                                                                               FlCkSu 369
c              Log mean temperature and heat stored in circuit                  FlCkSu 370
      <fc.LMT'>    = (<fi.Tinlet>+<fo.Toutlet>) * 0.5                           FlCkSu 371
      <fc.Qstore'> = <fc;Btu/F> * <fc.LMT'>                                     FlCkSu 372
c              decay rate for no flow condition                                 FlCkSu 373
      IF (<fc;UA> .GT. 0.)                                                      FlCkSu 374
     &  <fc;DecayRate> = 1.0 - EXP(-<fc;UA> / <fc;Btu/F>)                       FlCkSu 375
c                                                                               FlCkSu 376
c              Head setpoint if plant's pump sensor is AtCoils                  FlCkSu 377
      IF (<pl;HD-SUPPLY-CKT> .EQ. Jfc)  THEN                                    FlCkSu 378
        Kfx = <fc;RetHeadNode>                                                  FlCkSu 379
        IF (<pl:HD-SETPT> .GT. 0.)  THEN                                        FlCkSu 380
          <fc;HeadSetpt> = <pl:HD-SETPT>                                        FlCkSu 381
        ELSEIF (<fc:HEAD-SETPT> .GT. 0.)  THEN                                  FlCkSu 382
          <fc;HeadSetpt> = <fc:HEAD-SETPT>                                      FlCkSu 383
        ELSE                                                                    FlCkSu 384
c              adjust default for 1/2 the throttling range so                   FlCkSu 385
c              pump meets head reqt at bottom of range                          FlCkSu 386
          <fc;HeadSetpt> = (<fo.Preqd>-<fx.Pfluid>) * <pl:HD-SETPT-RATI>        FlCkSu 387
     &                   + <pl:HD-SETPT-RNG>*0.5                                FlCkSu 388
        ENDIF                                                                   FlCkSu 389
c              check if at least the required value                             FlCkSu 390
        dPreqd = <fo.Preqd> - <fx.Pfluid>                                       FlCkSu 391
        IF (<fc;HeadSetpt> .LT. dPreqd*.98)  THEN                               FlCkSu 392
          CALL MSGSIM(-2,II,II,II,II)                                           FlCkSu 393
          WRITE (IOUTPT,9005) (<pl:NAME>,II=1,8),                               FlCkSu 394
     &                         <fc;HeadSetpt>, dPreqd                           FlCkSu 395
        ENDIF                                                                   FlCkSu 396
      ENDIF                                                                     FlCkSu 397
c                                                                               FlCkSu 398
c                                                                               FlCkSu 399
c ============ ATTACHMENTS ==================================================== FlCkSu 400
c                                                                               FlCkSu 401
c              Initial attachments                                              FlCkSu 402
      CASE (201)                                                                FlCkSu 403
c              Component pointers, schedules, and curves                        FlCkSu 404
        <fc:PLANT>     = Jcomponent(2, <fc:PLANT>)                              FlCkSu 405
        <fc:TRUNK-CKT> = Jcomponent(28, <fc:TRUNK-CKT>)                         FlCkSu 406
        <fc:AUX-METER> = Jcomponent(13, <fc:AUX-METER>)                         FlCkSu 407
        <fc:COST-DATA> = Jcomponent(18, <fc:COST-DATA>)                         FlCkSu 408
c                                                                               FlCkSu 409
c              Second level of attachments                                      FlCkSu 410
      CASE (202)                                                                FlCkSu 411
                                                                                FlCkSu 412
c              Fluid properties block                                           FlCkSu 413
        <fc;FluidProp> = NewFluidProperties(Jfc, Jpl, 11,                       FlCkSu 414
     &                     <fc:FLUID-VELOCIT>, 4000., 2000., 0.25,              FlCkSu 415
     &                     0., <fc:EQUIV-LENGTH>, <fc:PIPE-DIAMETER>,           FlCkSu 416
     &                                            <fc:PIPE-ROUGHNES>,           FlCkSu 417
     &                    <pl:RATED-FLUID>, <pl:RATED-CONC>,                    FlCkSu 418
     &                    <pl:RATED-T>, <fc:FLOW>, 0.)                          FlCkSu 419
                                                                                FlCkSu 420
c              Recirculation balance valve; assume flow-limiting                FlCkSu 421
      IF (<fc:RECIRC-FLOW> .GT. 0.)                                             FlCkSu 422
     &  Call NewFluidBypass(Jfc, Jpl, 2, <fc:RECIRC-FLOW>, 10.0,                FlCkSu 423
     &                      Jfc, <pl;ReturnCkt>)                                FlCkSu 424
                                                                                FlCkSu 425
c              Create nodes                                                     FlCkSu 426
      CASE (203)                                                                FlCkSu 427
        Keu = NewEndUse(Jfc)                                                    FlCkSu 428
c              Circuit inlet                                                    FlCkSu 429
        IF (<fc:SUBTYPE> .EQ. 1)  THEN                                          FlCkSu 430
c              trunk circuit                                                    FlCkSu 431
          <fc;InletNode> = NewNode(1, Jpl,0,Jfc,<fc:PLANT>,                     FlCkSu 432
     &                                                   51,1,Keu, 1.)          FlCkSu 433
        ELSE  ! branch                                                          FlCkSu 434
          <fc;InletNode> = NewNode(1, Jpl,0,Jfc,<fc:TRUNK-CKT>,                 FlCkSu 435
     &                                                   51,1,Keu, 1.)          FlCkSu 436
        ENDIF                                                                   FlCkSu 437
c              and outlet                                                       FlCkSu 438
        <fc;OutletNode> = NewNode(1, Jpl,0,Jfc,0, 51,2,Keu, 1.)                 FlCkSu 439
c              thermal gains                                                    FlCkSu 440
        <fc;LossNode> = NewNode(1, Jpl,0,Jfc,<fc:LOSS-ZONE>, 31,5,0, 1.)        FlCkSu 441
c              auxiliary electrical                                             FlCkSu 442
        Jme = <fc:AUX-METER>                                                    FlCkSu 443
        <fc:AUX-METER>  = NewNode(1, Jpl,0,Jfc,Jme, 11,2,7, 1.)                 FlCkSu 444
c                                                                               FlCkSu 445
c              Links, lists                                                     FlCkSu 446
      CASE (205)                                                                FlCkSu 447
c              List of nodes                                                    FlCkSu 448
        CALL ListNodes(<fc;Nodes>, 0,0,Jfc,0, 0,0)                              FlCkSu 449
c              Store pointer to return circuit for differential                 FlCkSu 450
c              pressure sensor                                                  FlCkSu 451
        IF (<pl;HD-SUPPLY-CKT> .EQ. Jfc)  THEN                                  FlCkSu 452
          JfcSave = Jfc                                                         FlCkSu 453
          Jfc     = <pl;HD-RETURN-CKT>                                          FlCkSu 454
          Kfx     = <fc;InletNode>                                              FlCkSu 455
          Jfc     = JfcSave                                                     FlCkSu 456
          <fc;RetHeadNode> = Kfx                                                FlCkSu 457
        ENDIF                                                                   FlCkSu 458
c                                                                               FlCkSu 459
c              Histories                                                        FlCkSu 460
      CASE (208)                                                                FlCkSu 461
c              Outlet history - set flags in outlet Xnodes when                 FlCkSu 462
c              not converged (does not require zone attached to loss            FlCkSu 463
c              to re-iterate)                                                   FlCkSu 464
        <fc;LoadHsty> = NewHistory(Jpl,0,Jfc, <fo;Xnode>, Kfo,                  FlCkSu 465
     &                    0, 0, 1.,                                             FlCkSu 466
     &                    <#fo.Toutlet>, <sp:ERROR-T>   , 1,                    FlCkSu 467
     &                    <#fo.Poutlet>, <sp:ERROR-HEAD>, 2,                    FlCkSu 468
     &                    0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0)                       FlCkSu 469
c              Inlet history                                                    FlCkSu 470
        <fc;PlantHsty> = NewHistory(Jpl,0,Jfc, <fi;Xnode>, Kfi,                 FlCkSu 471
     &                    0, 0, 1.,                                             FlCkSu 472
     &                    <#fi.Minlet>, <sp:ERROR-FLOW>, 2,                     FlCkSu 473
     &                    <#fi.Mreqd> , <sp:ERROR-FLOW>, 2,                     FlCkSu 474
     &                    <#fi.Preqd> , <sp:ERROR-HEAD>, 2,                     FlCkSu 475
     &                    <#fi.Treqd> , <sp:ERROR-T>   , 1,                     FlCkSu 476
     &                    0,0.,0, 0,0.,0)                                       FlCkSu 477
                                                                                FlCkSu 478
c              History lists                                                    FlCkSu 479
      CASE (209)                                                                FlCkSu 480
c              Component histories                                              FlCkSu 481
        CALL ListHstys(<fc;Hstys>, 0, 0, Jfc)                                   FlCkSu 482
c                                                                               FlCkSu 483
c              Dump pointers                                                    FlCkSu 484
      CASE (210)                                                                FlCkSu 485
        IF (<fc;Previous> .EQ. 0)  WRITE (IOUTPT, 9201)                         FlCkSu 486
        Jna = <fc:PLANT>                                                        FlCkSu 487
        WRITE (IOUTPT, 9202)  (<na:NAME>,II=1,8),                               FlCkSu 488
     &    Jfc, Kfi, Kfo, <fc;LossNode>, <fc;FluidProp>                          FlCkSu 489
c                                                                               FlCkSu 490
c                                                                               FlCkSu 491
      END SELECT  ! Mode                                                        FlCkSu 492
c                                                                               FlCkSu 493
      RETURN                                                                    FlCkSu 494
c                                                                               FlCkSu 495
c              Message formats                                                  FlCkSu 496
 9001 FORMAT(14X,'Fluid-Circuit: ',8A4,' has no attached'              /        FlCkSu 497
     &       14X,'loads.'                                              )        FlCkSu 498
 9002 FORMAT(14X,'Fluid-Circuit: ',8A4,' has zero'                     /        FlCkSu 499
     &       14X,'design flow from its loads.'                         )        FlCkSu 500
 9003 FORMAT(14X,'Fluid-Circuit: ',8A4,' has a specified'              /        FlCkSu 501
     &       14X,'flow = ',F10.1,', but the design flow = ',F10.1      )        FlCkSu 502
c              message formats                                                  FlCkSu 503
 9004 FORMAT(14X,'In Fluid-Circuit: ',8A4,'the pipe'                   /        FlCkSu 504
     &       14X,'thermal losses based on the fluid temperature'       /        FlCkSu 505
     &       14X,'change and temperature difference between the'       /        FlCkSu 506
     &       14X,'fluid and environment are either excessive or'       /        FlCkSu 507
     &       14X,'impossible.  Check input for consistency.'           )        FlCkSu 508
 9005 FORMAT(14X,'Fluid Circuit: ',8A4,' has a specified'              /        FlCkSu 509
     &       14X,'pump setpoint less than required.  Coils may be'     /        FlCkSu 510
     &       14X,'starved at peak conditions and energy underestimated'/        FlCkSu 511
     &       14X,'Specified head:',F6.1,' Required:',F6.1              )        FlCkSu 512
 9201 FORMAT(/' FLUID-CIRCUITs                         Jfc       Kfi',          FlCkSu 513
     &'       Kfo      Loss      Prop'                                 /        FlCkSu 514
     &1x,32('-'),5('  --------'))                                               FlCkSu 515
 9202 FORMAT(1x,8A4,5I10)                                                       FlCkSu 516
      END                                                                       FlCkSu 517
      FUNCTION NewFluidProperties(Jna, Jpl, Type,                               FlPrN    2
     &                            Vel, ReTurb, ReLam, hDegrade,                 FlPrN    3
     &                           Area, Length, Dia, Roughness,                  FlPrN    4
     &                           Fluid, Pct, T, Flow, Static)                   FlPrN    5
c                                                                               FlPrN    6
c              Sets up a fluid properties subcomponent.  This                   FlPrN    7
c              subcomponent contains the data necessary to                      FlPrN    8
c              calculate fluid friction and fluid film coefficients.            FlPrN    9
c                                                                               FlPrN   10
c              Jna     Pointer to parent component                              FlPrN   11
c              Jpl     Pointer to central plant or system                       FlPrN   12
c              Type    Type of fluid                                            FlPrN   13
c                         0  Uniform temperature, non-fluid                     FlPrN   14
c                        11  Liquid flowing inside tube                         FlPrN   15
c                        12  Liquid flowing in annular space                    FlPrN   16
c                        21  Air flowing over fins                              FlPrN   17
c                        31  Fluorinated hydrocarbon liquid inside tube         FlPrN   18
c                        32  Evaporating fluorinated hydrocarbon in tube        FlPrN   19
c                        33  Fluorinated hydrocarbon gas inside tube            FlPrN   20
c                        34  Condensing fluorinated hydrocarbon in tube         FlPrN   21
c                        35  Ammonia liquid inside tube                         FlPrN   22
c                        36  Ammonia gas inside tube                            FlPrN   23
c                                                                               FlPrN   24
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
c                                                                               FlPrN   27
      DATA NameSubcomponent /4H$Sub/                                            /SubNam/ 2
c                                                                               FlPrN   29
      INTEGER Type, Fluid                                                       FlPrN   30
      REAL    Length                                                            FlPrN   31
c                                                                               FlPrN   32
c              Create the subcomponent                                          FlPrN   33
      Kfp              = NewRecord(<+fp~Len>)                                   FlPrN   34
      <fp;Ident>       = NameSubcomponent                                       FlPrN   35
      <fp;Parent>      = Jna                                                    FlPrN   36
      <fp;Jpl>         = Jpl                                                    FlPrN   37
c              Transfer properties                                              FlPrN   38
      <fp:Type>        = Type                                                   FlPrN   39
      <fp:Velocity>    = Vel                                                    FlPrN   40
      <fp:ReTurbulent> = ReTurb                                                 FlPrN   41
      <fp:ReLaminar>   = ReLam                                                  FlPrN   42
      <fp:LamDegrade>  = hDegrade                                               FlPrN   43
      <fp:Area>        = Area                                                   FlPrN   44
      <fp:Length>      = Length                                                 FlPrN   45
      <fp:Dia>         = Dia / 12.                                              FlPrN   46
      <fp:Roughness>   = Roughness                                              FlPrN   47
      <fp:FluidRated>  = Fluid                                                  FlPrN   48
      <fp:PctRated>    = Pct                                                    FlPrN   49
      <fp:Trated>      = T                                                      FlPrN   50
      <fp:Mrated>      = Flow                                                   FlPrN   51
      <fp:Static>      = Static                                                 FlPrN   52
      IF (ReTurb-ReLam .GT. 0.)  <fp;1/dReTrans> = 1. / (ReTurb-ReLam)          FlPrN   53
c                                                                               FlPrN   54
      NewFluidProperties = Kfp                                                  FlPrN   55
c                                                                               FlPrN   56
      RETURN                                                                    FlPrN   57
      END                                                                       FlPrN   58
      FUNCTION FluidDP(Kfp, Flow)                                               FlDP     2
c                                                                               FlDP     3
c              Calculates the head loss of a fluid given the flow               FlDP     4
c                                                                               FlDP     5
c              Kfp   Pointer to fluid properties subcomponent                   FlDP     6
c              Flow  Fluid flow                                                 FlDP     7
c                                                                               FlDP     8
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
c                                                                               FlDP    12
      INTEGER   Routine(4)                                                      FlDP    13
      DATA      Routine    /4HFlui,4HdDP ,4H    ,4H    /                        FlDP    14
c                                                                               FlDP    15
      IF (Flow .EQ. 0.)  THEN                                                   FlDP    16
        FluidDP = 0.                                                            FlDP    17
        RETURN                                                                  FlDP    18
      ENDIF                                                                     FlDP    19
c                                                                               FlDP    20
      Jpl = <fp;Jpl>  ! pointer to plant                                        FlDP    21
c                                                                               FlDP    22
c              Calculations vary by the fluid's physical environment            FlDP    23
      SELECT CASE (<fp:Type>)                                                   FlDP    24
c                                                                               FlDP    25
c                                                                               FlDP    26
c ================ Fluid inside tube ========================================== FlDP    27
      CASE (11)                                                                 FlDP    28
c                                                                               FlDP    29
      IF (<pl:FLUID-RELATNS> .EQ. 1)  THEN                                      FlDP    30
c              Calculate head using Hazen-Williams equation                     FlDP    31
        FluidDP = <fp;dPcoef> * Flow**1.852                                     FlDP    32
      ELSE                                                                      FlDP    33
c              Calculate head using Darcy-Weisbach equation                     FlDP    34
        V  = <fp;DesVel/Flow> * Flow       ! velocity                           FlDP    35
        Re = <fp:Dia> * V * <pl.Dens/Visc>     ! Reynold's number               FlDP    36
        IF (Re .GT. <fp:ReLaminar>)  THEN                                       FlDP    37
c              Non-laminar flow - use Colebrook's roughness function            FlDP    38
          fSqRt = SQRT(<fp;fFlow>)       ! initial guess is last value          FlDP    39
          DO  iCount=1,100                                                      FlDP    40
            fSqRtInv = (1.74 - 2.0*LOG10(<fp;2e/D> + 18.7/(Re*fSqRt)))          FlDP    41
            Error = fSqRtInv * fSqRt                                            FlDP    42
            fSqRt = 1. / fSqRtInv                                               FlDP    43
            IF (ABS(1.-Error) .LT. 0.001)  EXIT                                 FlDP    44
            IF (iCount .EQ. 100)                                                FlDP    45
     &        CALL CnvgMsg2(1, Routine, Jparent(<fp;Parent>))                   FlDP    46
          ENDDO                                                                 FlDP    47
          f = fSqRt*fSqRt                                                       FlDP    48
          <fp;fFlow> = f                 ! store f for initial guess            FlDP    49
          IF (Re .LT. <fp:ReTurbulent>)  THEN                                   FlDP    50
c              transitional region - prorate f based on Re                      FlDP    51
            Ratio = (Re-<fp:ReLaminar>) * <fp;1/dReTrans>                       FlDP    52
            f     = f * Ratio                                                   FlDP    53
     &            + 64./Re * (1.-Ratio)                                         FlDP    54
          ENDIF                                                                 FlDP    55
        ELSE                                                                    FlDP    56
c              fully laminar                                                    FlDP    57
          f = 64. / Re                                                          FlDP    58
        ENDIF                                                                   FlDP    59
        FluidDP = f * <fp;L/D2g> * V*V                                          FlDP    60
      ENDIF                                                                     FlDP    61
c                                                                               FlDP    62
c                                                                               FlDP    63
      END SELECT  ! fp:Type                                                     FlDP    64
c                                                                               FlDP    65
c              adjust for static head                                           FlDP    66
      FluidDP = FluidDP + <fp:Static>                                           FlDP    67
      RETURN                                                                    FlDP    68
      END                                                                       FlDP    69
      FUNCTION FluidDP_Design(Kfp, Flow, RatedHead)                             FlDPD    2
c                                                                               FlDPD    3
c              Calculates the design parameters for fluid pressure loss.        FlDPD    4
c              Returns the head at the actual conditions                        FlDPD    5
c                                                                               FlDPD    6
c              Kfp        Pointer to the fluid properties subcomponent          FlDPD    7
c              Flow       Design flow                                           FlDPD    8
c              RatedHead  Head loss at rated conditions (pure water)            FlDPD    9
c                                                                               FlDPD   10
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
c                                                                               FlDPD   14
      REAL     L                                                                FlDPD   15
      INTEGER  Routine(4)                                                       FlDPD   16
      DATA     Routine    /4HFlui,4HdDP_,4HDesi,4Hgn  /                         FlDPD   17
      DATA     g          /32.174/                                              FlDPD   18
c                                                                               FlDPD   19
      <fp:dPrated> = RatedHead                                                  FlDPD   20
c                                                                               FlDPD   21
      IF (<fp:Type> .EQ. 0  .OR.  Flow .EQ. 0.)  THEN                           FlDPD   22
        FluidDP_Design = <fp:dPrated> + <fp:Static>                             FlDPD   23
        RETURN                                                                  FlDPD   24
      ENDIF                                                                     FlDPD   25
c                                                                               FlDPD   26
c              Calculations vary by the fluid's physical environment            FlDPD   27
      SELECT CASE (<fp:Type>)                                                   FlDPD   28
c                                                                               FlDPD   29
c                                                                               FlDPD   30
c ================ Fluid is inside tube ======================================= FlDPD   31
      CASE (11)                                                                 FlDPD   32
c                                                                               FlDPD   33
c              Uses the Darcy-Weisbach equation:  dH = f*(L/D)*(V*V/2g)         FlDPD   34
c              (1993 ASHRAE Fundamentals, p.33.1)                               FlDPD   35
c                                                                               FlDPD   36
      Jpl       = <fp;Jpl>    ! Pointer to central plant                        FlDPD   37
      <fp;2e/D> = 2. * <fp:Roughness>/<fp:Dia>                                  FlDPD   38
c                                                                               FlDPD   39
c              Fluid properties at rated conditions                             FlDPD   40
      CALL H2OProp_Rated(<fp:FluidRated>, <fp:Trated>, <fp:PctRated>,           FlDPD   41
     &                    DensRated, ViscRated, CpRated, xx)                    FlDPD   42
c                                                                               FlDPD   43
c              Equivalent length of piping at standard conditions               FlDPD   44
      IF (<fp:Length> .GT. 0.)  THEN   ! length specified                       FlDPD   45
        L  = <fp:Length>                                                        FlDPD   46
      ELSE                     ! standard head specified                        FlDPD   47
c              Reynold's number, friction factor, equivalent length             FlDPD   48
        Re = DensRated * <fp:Velocity> * <fp:Dia> / ViscRated                   FlDPD   49
        Call FrictionFactor                                                     FlDPD   50
        L = <fp:dPrated>*<fp:Dia>*(2.*g)/(f*<fp:Velocity>*<fp:Velocity>)        FlDPD   51
      ENDIF                                                                     FlDPD   52
c                                                                               FlDPD   53
c              Flow at rated conditions                                         FlDPD   54
      IF (<fp:Mrated> .GT. 0.)  THEN                                            FlDPD   55
        FlowRated = <fp:Mrated>                                                 FlDPD   56
      ELSE                                                                      FlDPD   57
        FlowRated = Flow * (<pl.Dens>*<pl.Cp>)/(DensRated*CpRated)              FlDPD   58
      ENDIF                                                                     FlDPD   59
c                                                                               FlDPD   60
c              Actual Reynold's number, friction factor and head                FlDPD   61
      V  = <fp:Velocity> * Flow/FlowRated                                       FlDPD   62
      Re = <pl.Dens>*<fp:Dia>*V/<pl.Visc>                                       FlDPD   63
      Call FrictionFactor                                                       FlDPD   64
      dP = f * L/<fp:Dia> * V*V/(2.*g)                                          FlDPD   65
c                                                                               FlDPD   66
      <fp;EquivLen> = L                                                         FlDPD   67
      <fp;fdP>      = f                                                         FlDPD   68
      <fp;fFlow>    = f                                                         FlDPD   69
c                                                                               FlDPD   70
c              Constants for hourly calcs                                       FlDPD   71
      <fp;MinFlow>     = Flow * 0.3                                             FlDPD   72
      <fp;Vel>         = V                                                      FlDPD   73
      <fp;DesVel/Flow> = V / Flow                                               FlDPD   74
      <fp;DesFlow/Vel> = 1. / <fp;DesVel/Flow>                                  FlDPD   75
      <fp;L/D2g>       = L / (<fp:Dia>*2.*g)                                    FlDPD   76
      <fp;D2g/L>       = 1. / <fp;L/D2g>                                        FlDPD   77
      <fp;dPcoef>      = dP / (Flow**1.852)                                     FlDPD   78
      <fp;1/dPcoef>    = 1. / <fp;dPcoef>                                       FlDPD   79
c                                                                               FlDPD   80
c                                                                               FlDPD   81
      END SELECT  ! fp:Type                                                     FlDPD   82
c                                                                               FlDPD   83
      FluidDP_Design = dP + <fp:Static>                                         FlDPD   84
c                                                                               FlDPD   85
      RETURN                                                                    FlDPD   86
c                                                                               FlDPD   87
c                                                                               FlDPD   88
      CONTAINS                                                                  FlDPD   89
c ============== FrictionFactor =============================================== FlDPD   90
      Subroutine FrictionFactor                                                 FlDPD   91
c                                                                               FlDPD   92
c              Calculates the friction factor of a pipe                         FlDPD   93
      IF (Re .GT. <fp:ReLaminar>)  THEN                                         FlDPD   94
c              Non-laminar flow - use Colebrook's roughness function            FlDPD   95
        f     = 0.02       ! first guess at friction factor                     FlDPD   96
        fSqRt = SQRT(f)                                                         FlDPD   97
        DO  iFriction=1,100                                                     FlDPD   98
          fSqRtInv = (1.74 - 2.0*LOG10(<fp;2e/D> + 18.7/(Re*fSqRt)))            FlDPD   99
          Error = fSqRtInv * fSqRt                                              FlDPD  100
          fSqRt = 1. / fSqRtInv                                                 FlDPD  101
          IF (ABS(1.-Error) .LT. 0.001)  EXIT                                   FlDPD  102
          IF (iFriction .EQ. 100)                                               FlDPD  103
     &      CALL CnvgMsg2(1, Routine, Jparent(<fp;Parent>))                     FlDPD  104
        ENDDO                                                                   FlDPD  105
        f = fSqRt*fSqRt                                                         FlDPD  106
        IF (Re .LT. <fp:ReTurbulent>)  THEN                                     FlDPD  107
c              transitional region - prorate f based on Re                      FlDPD  108
          Ratio = (Re-<fp:ReLaminar>) * <fp;1/dReTrans>                         FlDPD  109
          f     = f * Ratio                                                     FlDPD  110
     &          + 64./Re * (1.-Ratio)                                           FlDPD  111
        ENDIF                                                                   FlDPD  112
      ELSE                                                                      FlDPD  113
c              fully laminar                                                    FlDPD  114
        f = 64. / Re                                                            FlDPD  115
      ENDIF                                                                     FlDPD  116
c                                                                               FlDPD  117
      End Subroutine FrictionFactor                                             FlDPD  118
c                                                                               FlDPD  119
      END                                                                       FlDPD  120
      FUNCTION FluidFilm(Kfp, Flow)                                             FlFi     2
c                                                                               FlFi     3
c              Calculates the film resistance of a fluid given the flow         FlFi     4
c                                                                               FlFi     5
c              Kfp    Pointer to the fluid properties subcomponent              FlFi     6
c              Flow   Fluid flow, gpm                                           FlFi     7
c                                                                               FlFi     8
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
c                                                                               FlFi    11
      IF (Flow .EQ. 0.)  THEN                                                   FlFi    12
        FluidFilm = <fp;FluidFilm>                                              FlFi    13
        RETURN                                                                  FlFi    14
      ENDIF                                                                     FlFi    15
c                                                                               FlFi    16
c              Calculations vary by the fluid's physical environment            FlFi    17
      SELECT CASE (<fp:Type>)                                                   FlFi    18
c                                                                               FlFi    19
c                                                                               FlFi    20
c ================ Non-fluid (uniform temperature) ============================ FlFi    21
      CASE (0)                                                                  FlFi    22
c                                                                               FlFi    23
c              Film resistance                                                  FlFi    24
      FluidFilm = <fp;FluidFilm>                                                FlFi    25
c                                                                               FlFi    26
c                                                                               FlFi    27
c ================ Fluid is inside tube ======================================= FlFi    28
      CASE (11)                                                                 FlFi    29
c                                                                               FlFi    30
c              All film equations from ASHRAE 1993 Fundamentals, p3.14          FlFi    31
c                                                                               FlFi    32
      Jpl = <fp;Jpl>  ! pointer to plant                                        FlFi    33
c                                                                               FlFi    34
      IF (<pl:FLUID-RELATNS> .EQ. 1)  THEN                                      FlFi    35
c              Simple relationship - use eqn. 2                                 FlFi    36
        UAfilm = <fp;UAfilmCoef> * Flow**<fp;UAfilmExp>                         FlFi    37
      ELSE                                                                      FlFi    38
c              Detailed relationships - Note that the coefficients              FlFi    39
c              include the effect of viscosity ratio, which is held             FlFi    40
c              constant all hours.                                              FlFi    41
c              Velocity and Reynold's number                                    FlFi    42
        V  = <fp;DesVel/Flow> * Flow                                            FlFi    43
        Re = <fp:Dia>*V*<pl.Dens/Visc>                                          FlFi    44
        IF (Re .GT. <fp:ReLaminar>)  THEN                                       FlFi    45
c              Non-laminar flow - use eqn 5.                                    FlFi    46
          UAfilm = <fp;UAfilmCoef> * <pl.Cond> * Re**0.8 * <pl.Pr**1/3>         FlFi    47
          IF (Re .LT. <fp:ReTurbulent>)  THEN                                   FlFi    48
c              transitional region - get laminar UA                             FlFi    49
            UAlam = <fp;UAfilmCoefLam> * <pl.Cond>                              FlFi    50
     &                                 * Re**0.333 * <pl.Pr**1/3>               FlFi    51
c              prorate based on Re                                              FlFi    52
            Ratio  = (Re-<fp:ReLaminar>) * <fp;1/dReTrans>                      FlFi    53
            UAfilm = UAfilm * Ratio                                             FlFi    54
     &             + UAlam  * (1.-Ratio)                                        FlFi    55
          ENDIF                                                                 FlFi    56
        ELSE                                                                    FlFi    57
c              fully laminar                                                    FlFi    58
          UAfilm = <fp;UAfilmCoefLam> * <pl.Cond>                               FlFi    59
     &                                * Re**0.333 * <pl.Pr**1/3>                FlFi    60
        ENDIF                                                                   FlFi    61
      ENDIF                                                                     FlFi    62
c              Film resistance                                                  FlFi    63
      FluidFilm = 1. / UAfilm                                                   FlFi    64
c                                                                               FlFi    65
c                                                                               FlFi    66
c ================ Simplified equation for other fluids ======================= FlFi    67
      CASE DEFAULT                                                              FlFi    68
c                                                                               FlFi    69
      UAfilm = <fp;UAfilmCoef> * MAX(Flow, <fp;MinFlow>)**<fp;UAfilmExp>        FlFi    70
c              Film resistance                                                  FlFi    71
      FluidFilm = 1. / UAfilm                                                   FlFi    72
c                                                                               FlFi    73
c                                                                               FlFi    74
      END SELECT  ! fp:Type                                                     FlFi    75
c                                                                               FlFi    76
      RETURN                                                                    FlFi    77
      END                                                                       FlFi    78
      SUBROUTINE FluidFilm_Design(Mode, Kfp, Rrated, Rdesign,                   FlFiD    2
     &                                       Flow, Tin, Qfilm)                  FlFiD    3
c                                                                               FlFiD    4
c              Calculates the design parameters for head loss of a fluid        FlFiD    5
c                                                                               FlFiD    6
c              Mode       Type of film resistance specified                     FlFiD    7
c                           1  Rated resistance  - calculate design             FlFiD    8
c                           2  Design resistance - calculate rated              FlFiD    9
c              Kfp        Pointer to the fluid properties subcomponent          FlFiD   10
c              Rrated     Film resistance, rated fluid at Trated                FlFiD   11
c              Rdesign    Film resistance, fluid at design conditions           FlFiD   12
c              Flow       Design flow, gpm                                      FlFiD   13
c              Tin        Fluid temperature at inlet                            FlFiD   14
c              Qfilm      Heat transferred thru film                            FlFiD   15
c                                                                               FlFiD   16
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
c                                                                               FlFiD   19
      REAL kRated                                                               FlFiD   20
c                                                                               FlFiD   21
c                                                                               FlFiD   22
      IF (<fp:Type> .EQ. 0  .OR.  Flow .EQ. 0.)  THEN                           FlFiD   23
        IF (Mode .EQ. 1)  THEN                                                  FlFiD   24
          <fp;FluidFilm> = Rrated                                               FlFiD   25
          Rdesign        = Rrated                                               FlFiD   26
        ELSE                                                                    FlFiD   27
          <fp;FluidFilm> = Rdesign                                              FlFiD   28
          Rrated         = Rdesign                                              FlFiD   29
        ENDIF                                                                   FlFiD   30
        RETURN                                                                  FlFiD   31
      ENDIF                                                                     FlFiD   32
c                                                                               FlFiD   33
c              Calculations vary by the fluid's physical environment            FlFiD   34
      SELECT CASE (<fp:Type>)                                                   FlFiD   35
c                                                                               FlFiD   36
c                                                                               FlFiD   37
c ================ Fluid is inside tube ======================================= FlFiD   38
      CASE (11)                                                                 FlFiD   39
c                                                                               FlFiD   40
      Jpl = <fp;Jpl>    ! Pointer to central plant                              FlFiD   41
c                                                                               FlFiD   42
c              Fluid properties at rated conditions                             FlFiD   43
      CALL H2OProp_Rated(<fp:FluidRated>, <fp:Trated>, <fp:PctRated>,           FlFiD   44
     &                   DensRated, ViscRated, CpRated, kRated)                 FlFiD   45
c                                                                               FlFiD   46
c              Film coefficient at rated conditions - note that Prandtl         FlFiD   47
c              number expects viscosity in lbm/(ft-hr)                          FlFiD   48
      ReRated = DensRated * <fp:Velocity> * <fp:Dia> / ViscRated                FlFiD   49
      PrRated = ViscRated*3600. * CpRated / kRated     ! Prandtl number         FlFiD   50
      hRated  = 0.027 * kRated/<fp:Dia> * ReRated**0.8 * PrRated**0.333         FlFiD   51
c                                                                               FlFiD   52
c              Rated flow                                                       FlFiD   53
      IF (<fp:Mrated> .GT. 0.)  THEN                                            FlFiD   54
        FlowRated = <fp:Mrated>                                                 FlFiD   55
      ELSE                                                                      FlFiD   56
        FlowRated = Flow * (<pl.Dens>*<pl.Cp>)/(DensRated*CpRated)              FlFiD   57
      ENDIF                                                                     FlFiD   58
      <fp;MinFlow> = FlowRated * 0.3                                            FlFiD   59
c                                                                               FlFiD   60
c              For laminar flow, calc the film coefficient at the top of        FlFiD   61
c              the transitional range, adjust for laminar degradation,          FlFiD   62
c              and calculate coefficient using the laminar equation             FlFiD   63
      hTrans   = hRated * (<fp:ReTurbulent>/ReRated)**0.8                       FlFiD   64
      hLamCoef = hTrans * <fp:LamDegrade>                                       FlFiD   65
     &                  / (kRated * (<fp:ReTurbulent>*PrRated)**0.333)          FlFiD   66
c                                                                               FlFiD   67
c              Film coefficient at design conditions                            FlFiD   68
      V  = <fp:Velocity> * Flow/FlowRated                                       FlFiD   69
      Re = <pl.Dens> * V * <fp:Dia> / <pl.Visc>                                 FlFiD   70
      IF (Re .GT. <fp:ReLaminar>)  THEN                                         FlFiD   71
c              Non-laminar flow - use eqn 5                                     FlFiD   72
        hDesign = 0.027 * <pl.Cond>/<fp:Dia> * Re**0.8 * <pl.Pr**1/3>           FlFiD   73
        IF (Re .LT. <fp:ReTurbulent>)  THEN                                     FlFiD   74
c              transitional region - get laminar film coef and prorate          FlFiD   75
c              based on Re                                                      FlFiD   76
          hLam    = hLamCoef * <pl.Cond> * Re**0.333 * <pl.Pr**1/3>             FlFiD   77
          Ratio   = (Re-<fp:ReLaminar>) * <fp;1/dReTrans>                       FlFiD   78
          hDesign = hDesign * Ratio                                             FlFiD   79
     &            + hLam    * (1.-Ratio)                                        FlFiD   80
        ENDIF                                                                   FlFiD   81
      ELSE                                                                      FlFiD   82
c              fully laminar                                                    FlFiD   83
        hDesign = hLamCoef * <pl.Cond> * Re**0.333 * <pl.Pr**1/3>               FlFiD   84
      ENDIF                                                                     FlFiD   85
c                                                                               FlFiD   86
c              Design bulk and surface temperatures and viscosities             FlFiD   87
      Jfl      = <pl:FLUID>                                                     FlFiD   88
      Tbulk    = Tin  + Qfilm/(<pl.Btuh/GPM-F>*Flow) * 0.5                      FlFiD   89
      IF (<fl:VISC-FT&PCT-H> .EQ. 0)  THEN                                      FlFiD   90
        ViscBulk = Curve(Jfl, <fl:VISC-FT&PCT>, Tbulk, <pl;PctConc>)            FlFiD   91
      ELSE                                                                      FlFiD   92
        ViscBulk = CurveSpline(1, Jfl, <fl:VISC-FT&PCT>,                        FlFiD   93
     &                          <fl:VISC-FT&PCT-H>, Tbulk, <pl;PctConc>)        FlFiD   94
      ENDIF                                                                     FlFiD   95
      ViscBulk = (10.**ViscBulk) * 6.71955E-4                                   FlFiD   96
      IF (Rdesign .GT. 0.)  THEN                                                FlFiD   97
        Tsurf  = Tbulk + Qfilm*Rdesign                                          FlFiD   98
      ELSE                                                                      FlFiD   99
        Tsurf  = Tbulk + Qfilm*Rrated                                           FlFiD  100
      ENDIF                                                                     FlFiD  101
      ViscSurf = Curve(Jfl, Jcv, Tsurf, <pl;PctConc>)                           FlFiD  102
      ViscSurf = (10.**ViscSurf) * 6.71955E-4                                   FlFiD  103
c              Film correction factor for surface viscosity                     FlFiD  104
      hVisc    = (ViscBulk/ViscSurf)**0.14                                      FlFiD  105
      hDesign  = hDesign * hVisc                                                FlFiD  106
c                                                                               FlFiD  107
c              HX area and film UA                                              FlFiD  108
      IF (<fp:Area> .GT. 0.)  THEN                                              FlFiD  109
c              User-specified area                                              FlFiD  110
        Area = <fp:Area>             ! area is specified                        FlFiD  111
      ELSE                                                                      FlFiD  112
c              Default area                                                     FlFiD  113
        IF (Mode .EQ. 1)  THEN                                                  FlFiD  114
          Area    = 1. / (hRated*Rrated)    ! at rated conditions               FlFiD  115
          Rdesign = 1. / (hDesign*Area)                                         FlFiD  116
        ELSE                                                                    FlFiD  117
          Area    = 1. / (hDesign*Rdesign)  ! at design conditions              FlFiD  118
          Rrated  = 1. / (hRated*Area)                                          FlFiD  119
        ENDIF                                                                   FlFiD  120
      ENDIF                                                                     FlFiD  121
c                                                                               FlFiD  122
c              Heat transfer factors, excluding hourly terms                    FlFiD  123
      IF (<pl:FLUID-RELATNS> .EQ. 1)  THEN                                      FlFiD  124
c              Simple relationship is function of flow only - note that         FlFiD  125
c              this will be in error if flow is transitional or laminar         FlFiD  126
        UAfilm          = hDesign * Area                                        FlFiD  127
        <fp;UAfilmCoef> = UAfilm / (Flow**0.8)                                  FlFiD  128
        <fp;UAfilmExp>  = 0.8                                                   FlFiD  129
      ELSE                                                                      FlFiD  130
c              Detailed relationship will take into account hourly              FlFiD  131
c              density, viscosity, conductivity, and specific heat              FlFiD  132
        <fp;UAfilmCoef>    = 0.027 * Area/<fp:Dia> * hVisc                      FlFiD  133
        <fp;UAfilmCoefLam> = hLamCoef * Area * hVisc                            FlFiD  134
      ENDIF                                                                     FlFiD  135
      <fp;DesVel/Flow> = V / Flow                                               FlFiD  136
c                                                                               FlFiD  137
c                                                                               FlFiD  138
c ================ Air flowing over fins =======================================FlFiD  139
      CASE (21)                                                                 FlFiD  140
c                                                                               FlFiD  141
c              ??SDG guessed at the flow exponent - assumes 1/2 laminar         FlFiD  142
      IF (Mode .EQ. 1)  THEN                                                    FlFiD  143
        Rdesign = Rrated                                                        FlFiD  144
      ELSE                                                                      FlFiD  145
        Rrated = Rdesign                                                        FlFiD  146
      ENDIF                                                                     FlFiD  147
      UAfilm = 1. / Rrated                                                      FlFiD  148
      IF (<fp:Mrated> .GT. 0.)                                                  FlFiD  149
     &  UAfilm = UAfilm * (Flow/<fp:Mrated>)**0.5                               FlFiD  150
      <fp;UAfilmCoef> = UAfilm / (Flow**0.5)                                    FlFiD  151
      <fp;UAfilmExp>  = 0.5                                                     FlFiD  152
c                                                                               FlFiD  153
      <fp;MinFlow>    = MAX(<fp:Mrated>, Flow) * 0.3                            FlFiD  154
c                                                                               FlFiD  155
c                                                                               FlFiD  156
c ================ Evaporating fluorinated hydrocarbon in tube =================FlFiD  157
      CASE (32,34)                                                              FlFiD  158
c                                                                               FlFiD  159
c              ASHRAE 1993 Fundamentals, p.4.7 eqn.1 or p.4.8 eqn.13            FlFiD  160
      IF (Mode .EQ. 1)  THEN                                                    FlFiD  161
        Rdesign = Rrated                                                        FlFiD  162
      ELSE                                                                      FlFiD  163
        Rrated = Rdesign                                                        FlFiD  164
      ENDIF                                                                     FlFiD  165
      UAfilm = 1. / Rrated                                                      FlFiD  166
      IF (<fp:Mrated> .GT. 0.)                                                  FlFiD  167
     &  UAfilm = UAfilm * (Flow/<fp:Mrated>)**0.8                               FlFiD  168
      <fp;UAfilmCoef> = UAfilm / (Flow**0.8)                                    FlFiD  169
      <fp;UAfilmExp>  = 0.8                                                     FlFiD  170
c                                                                               FlFiD  171
      <fp;MinFlow>    = MAX(<fp:Mrated>, Flow) * 0.3                            FlFiD  172
c                                                                               FlFiD  173
c                                                                               FlFiD  174
      END SELECT  ! fp:Type                                                     FlFiD  175
c                                                                               FlFiD  176
      <fp;FluidFilm> = Rdesign                                                  FlFiD  177
c                                                                               FlFiD  178
      RETURN                                                                    FlFiD  179
      END                                                                       FlFiD  180
      FUNCTION FluidFlow(Kfp, dPx)                                              FlFlow   2
c                                                                               FlFlow   3
c              Calculates the maximum flow of a fluid given the                 FlFlow   4
c              available pressure drop                                          FlFlow   5
c                                                                               FlFlow   6
c              Kfp    Pointer to fluid properties subcomponent                  FlFlow   7
c              dPx  Available head                                              FlFlow   8
c                                                                               FlFlow   9
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
c                                                                               FlFlow  13
      INTEGER   Routine(4)                                                      FlFlow  14
      DATA      Routine    /4HFlui,4HdFlo,4Hw   ,4H    /                        FlFlow  15
c                                                                               FlFlow  16
c              adjust for static pressure                                       FlFlow  17
      dP = dPx - <fp:Static>                                                    FlFlow  18
c                                                                               FlFlow  19
      IF (dP .LE. 0.)  THEN                                                     FlFlow  20
        FluidFlow = 0.                                                          FlFlow  21
        RETURN                                                                  FlFlow  22
      ENDIF                                                                     FlFlow  23
c                                                                               FlFlow  24
      Jpl = <fp;Jpl>  ! pointer to plant                                        FlFlow  25
c                                                                               FlFlow  26
c              Calculations vary by the fluid's physical environment            FlFlow  27
      SELECT CASE (<fp:Type>)                                                   FlFlow  28
c                                                                               FlFlow  29
c                                                                               FlFlow  30
c ================ Fluid is inside tube ======================================= FlFlow  31
      CASE (11)                                                                 FlFlow  32
c                                                                               FlFlow  33
      IF (<pl:FLUID-RELATNS> .EQ. 1)  THEN                                      FlFlow  34
c              Calculate flow using Hazen-Williams equation                     FlFlow  35
        Flow = (dP*<fp;1/dPcoef>)**(1./1.852)                                   FlFlow  36
      ELSE                                                                      FlFlow  37
c              Calculate flow using Darcy-Weisbach equation                     FlFlow  38
        DiaDensVisc = <fp:Dia>*<pl.Dens/Visc>                                   FlFlow  39
        V           = <fp;Vel>                 ! last value spec'd              FlFlow  40
        DO  iCount=1,100                                                        FlFlow  41
          Re = DiaDensVisc*V                                                    FlFlow  42
          IF (Re .GT. <fp:ReLaminar>)  THEN                                     FlFlow  43
c              Non-laminar flow - use Colebrook's roughness function            FlFlow  44
            fSqRt = SQRT(<fp;fdP>)     ! initial guess is last value            FlFlow  45
            DO  iCount2=1,100                                                   FlFlow  46
              fSqRtInv = (1.74 - 2.0*LOG10(<fp;2e/D> + 18.7/(Re*fSqRt)))        FlFlow  47
              Error = fSqRtInv * fSqRt                                          FlFlow  48
              fSqRt = 1. / fSqRtInv                                             FlFlow  49
              IF (ABS(1.-Error) .LT. 0.001)  EXIT                               FlFlow  50
              IF (iCount2 .EQ. 100)                                             FlFlow  51
     &          CALL CnvgMsg2(2, Routine, Jparent(<fp;Parent>))                 FlFlow  52
            ENDDO                                                               FlFlow  53
            f = fSqRt*fSqRt                                                     FlFlow  54
            <fp;fdP> = f               ! store f for initial guess              FlFlow  55
            IF (Re .LT. <fp:ReTurbulent>)  THEN                                 FlFlow  56
c              transitional region - prorate f based on Re                      FlFlow  57
              Ratio = (Re-<fp:ReLaminar>) * <fp;1/dReTrans>                     FlFlow  58
              f     = f * Ratio                                                 FlFlow  59
     &              + 64./Re * (1.-Ratio)                                       FlFlow  60
            ENDIF                                                               FlFlow  61
          ELSE                                                                  FlFlow  62
c              fully laminar                                                    FlFlow  63
            f = 64. / Re                                                        FlFlow  64
          ENDIF                                                                 FlFlow  65
c              velocity based available head and current friction factor        FlFlow  66
          Vnew = SQRT(dP*<fp;D2g/L>/f)                                          FlFlow  67
          IF (ABS(1. - Vnew/V) .LT. 0.001)  EXIT                                FlFlow  68
          V    = Vnew                                                           FlFlow  69
          IF (iCount .EQ. 100)                                                  FlFlow  70
     &      CALL CnvgMsg2(1, Routine, Jparent(<fp;Parent>))                     FlFlow  71
        ENDDO                                                                   FlFlow  72
        Flow = V * <fp;DesFlow/Vel>                                             FlFlow  73
      ENDIF                                                                     FlFlow  74
c                                                                               FlFlow  75
c                                                                               FlFlow  76
      END SELECT  ! fp:Type                                                     FlFlow  77
c                                                                               FlFlow  78
      <fp;Vel>  = V                                                             FlFlow  79
      FluidFlow = Flow                                                          FlFlow  80
c                                                                               FlFlow  81
      RETURN                                                                    FlFlow  82
      END                                                                       FlFlow  83
      FUNCTION Jcomponent(Type, Num)                                            Jcomp    2
c                                                                               Jcomp    3
c              Converts a component number into a pointer                       Jcomp    4
c                                                                               Jcomp    5
c              Type   Component type  1=pump,  2=loop, etc.                     Jcomp    6
c              Num    Number of component as defined in BDL                     Jcomp    7
c                                                                               Jcomp    8
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
      DIMENSION        Icomp(30), Ncomp(30), Lcomp(30)                          /PTRPL1/ 2
      EQUIVALENCE      (Ipm,Icomp(1)), (Npm,Ncomp(1)), (Lpm,Lcomp(1))           /PTRPL1/ 3
c                                                                               Jcomp   12
      INTEGER Type                                                              Jcomp   13
c                                                                               Jcomp   14
      IF (Num .GT. 0)  THEN                                                     Jcomp   15
        Jcomponent = Icomp(Type) + (Num-1)*Lcomp(Type)                          Jcomp   16
      ELSE                                                                      Jcomp   17
        Jcomponent = 0                                                          Jcomp   18
      ENDIF                                                                     Jcomp   19
c                                                                               Jcomp   20
      RETURN                                                                    Jcomp   21
      END                                                                       Jcomp   22
      SUBROUTINE LoadManagement(Mode)                                           LdMgmt   2
c                                                                               LdMgmt   3
c              Sets the EQUIP-CTRL sequences for all loops, elec-meters,        LdMgmt   4
c              refg-circuits, suction-groups, etc.                              LdMgmt   5
c                                                                               LdMgmt   6
c              Mode = 10  Beginning of hour instructions                        LdMgmt   7
c                     30  End of hour checks                                    LdMgmt   8
c                                                                               LdMgmt   9
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /LDMGMT/ LengthCtrlGroup, xLDMGMT                                 /LDMGMT/ 2
      COMMON  /MISCD / TEMPS(4,4096),CONS(5),TEMPSL(4096),                      /MISCD/  2
     1                 BLDGQH,BLDGQC,BLDGQL,BLDGP,BPMULT,                       /MISCD/  3
     2                 DBTMIN,DBTMAX,WMIN,WMAX,NSPZ(4096),                      /MISCD/  4
     3                 DQ, DTP, DTR, DTS, FPI, PLRCC , POM, TC2, TDM,           /MISCD/  5
     4                 TRA,WCOL,WCOLM,WMM,YPI,KWBTU,BTUKW,UNFILD,Unusedm        /MISCD/  6
      REAL             KWBTU                                                    /MISCD/  7
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
      COMMON  /PTRSYS/ nvect ,                                                  /PTRSYS/ 2
     $                 nsched, its   ,                                          /PTRSYS/ 3
     $                 ncurve, icurve,                                          /PTRSYS/ 4
     $                 nzone , iz    , nczd  , zp2 ,         mtw  ,             /PTRSYS/ 5
     $                 nsys  , is    , nss   , nsp ,  ns   , icode,             /PTRSYS/ 6
     $                 nsz   , isz   , nzd   , zp1 ,  nz   ,                    /PTRSYS/ 7
     $                 nspace, lpr   , Lcv   ,                                  /PTRSYS/ 8
     $                 nattch, iatt  ,                                          /PTRSYS/11
     $                 P2, IDAYHR, IDBWBT,                                      /PTRSYS/12
     $                 IRPPLT, IRPSUM, IRPSYS, IRPZON, MR1, MR2                 /PTRSYS/13
      INTEGER          ZP1, ZP2, P2                                             /PTRSYS/14
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
      COMMON  /WEATH / IWDID(5),LRECX,WLAT,WLONG,LTIMZ,IFX,IWSIZ,               /WEATH/  2
     1                 CLRNES,TGNDR,WBT,DBT,Patm,CLDAMT,ISNOW,IRAIN,            /WEATH/  3
     2                 IWNDDR,HUMRAT,DENSTY,ENTHAL,DIFSOL,DIRSOL,SOLRAD,        /WEATH/  4
     3                 ICLDTY,WNDSPD,IDUMMY,DPT,WNDDRR,CLDCOV,RDNCC,            /WEATH/  5
     4                 BSCC,SKYA,DBTR,GTEMP(12),CLR(12),ESKY,EGND,IWINTR        /WEATH/  6
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               LdMgmt  20
      COMMON  /LDMGKY/ ScheduledEC, OATemp, PeakShaving                         /LDMGKY/ 2
      INTEGER          ScheduledEC, OATemp, PeakShaving                         /LDMGKY/ 3
c                                                                               LdMgmt  22
c                                                                               LdMgmt  23
      SELECT CASE (Mode)                                                        LdMgmt  24
c                                                                               LdMgmt  25
c                                                                               LdMgmt  26
c ============ BEGINNING OF HOUR INSTRUCTIONS ================================= LdMgmt  27
      CASE (10)                                                                 LdMgmt  28
c                                                                               LdMgmt  29
c              Set the load-management sequences that can be determined         LdMgmt  30
c              at the beginning of an hour                                      LdMgmt  31
c                                                                               LdMgmt  32
c              Loop thru all load management sequences                          LdMgmt  33
      DO  Nctrl=1,Nlm                                                           LdMgmt  34
        Jlm = Ilm + (Nctrl-1)*Llm                                               LdMgmt  35
c              See if sequence qualifies for this hour                          LdMgmt  36
        IF (<lm:QUAL-SCH> .GT. 0)  THEN                                         LdMgmt  37
          IF (SchVal(<lm:QUAL-SCH>) .NE. <lm:QUAL-SCH-FLAG>)  CYCLE             LdMgmt  38
        ENDIF                                                                   LdMgmt  39
c              Number of control groups                                         LdMgmt  40
        NumCtrlGroups  = <lm;NUM_GROUPS>                                        LdMgmt  41
c              Determine which group to use                                     LdMgmt  42
        Index = 0                                                               LdMgmt  43
        SELECT CASE (<lm:TYPE>)                                                 LdMgmt  44
          CASE (1)                     ! Scheduled                              LdMgmt  45
c              get the flag value                                               LdMgmt  46
            Flag = SchVal(<lm:EQUIP-SCH>)                                       LdMgmt  47
            DO  IG=1,NumCtrlGroups                                              LdMgmt  48
              IF (Flag .EQ. <lm:CTRL-FLAGS>)  THEN                              LdMgmt  49
                Index = IG                                                      LdMgmt  50
                Exit                                                            LdMgmt  51
              ENDIF                                                             LdMgmt  52
            ENDDO                                                               LdMgmt  53
          CASE (2)                     ! Outdoor air temperature                LdMgmt  54
            DO  IG=1,NumCtrlGroups                                              LdMgmt  55
              IF (DBT .LE. <lm:CTRL-TEMPS>)  THEN                               LdMgmt  56
                Index = IG                                                      LdMgmt  57
                Exit                                                            LdMgmt  58
              ENDIF                                                             LdMgmt  59
            ENDDO                                                               LdMgmt  60
c             if no range found, use hottest                                    LdMgmt  61
            IF (Index .eq. 0)  Index = NumCtrlGroups                            LdMgmt  62
          CASE (3)                     ! Zone temperature                       LdMgmt  63
            ZP1 = <lm:CTRL-ZONE>                                                LdMgmt  64
            DO  IG=1,NumCtrlGroups                                              LdMgmt  65
              IF (<TNOW> .LE. <lm:CTRL-TEMPS>)  THEN                            LdMgmt  66
                Index = IG                                                      LdMgmt  67
                Exit                                                            LdMgmt  68
              ENDIF                                                             LdMgmt  69
            ENDDO                                                               LdMgmt  70
c             if no range found, use hottest                                    LdMgmt  71
            IF (Index .eq. 0)  Index = NumCtrlGroups                            LdMgmt  72
          CASE (4)                     ! Loop load                              LdMgmt  73
            Jpl    = <lm:CTRL-LOOP>                                             LdMgmt  74
            Qplant = Abs(<pl.Qnet>)                                             LdMgmt  75
            DO  IG=1,NumCtrlGroups                                              LdMgmt  76
              IF (Qplant .LE. <lm:CTRL-LOADS>)  THEN                            LdMgmt  77
                Index = IG                                                      LdMgmt  78
                Exit                                                            LdMgmt  79
              ENDIF                                                             LdMgmt  80
            ENDDO                                                               LdMgmt  81
c             if no range found, use largest                                    LdMgmt  82
            IF (Index .eq. 0)  Index = NumCtrlGroups                            LdMgmt  83
c         CASE (5)                     ! Peak Shaving                           LdMgmt  84
        END SELECT                                                              LdMgmt  85
c                                                                               LdMgmt  86
c              Skip this LOAD-MANAGEMENT if no match found                      LdMgmt  87
        IF (Index .ne. 0)  THEN  ! match found                                  LdMgmt  88
          IG = Index                                                            LdMgmt  89
c              command priority for this group                                  LdMgmt  90
          Priority = <lm:CTRL-PRIORS>                                           LdMgmt  91
          IIstart  = (IG-1)*LengthCtrlGroup + 1                                 LdMgmt  92
c              set equip-ctrl sequences                                         LdMgmt  93
          Call SetEquipCtrl                                                     LdMgmt  94
c              set flags to force plants on and off                             LdMgmt  95
          Call ForcePlants                                                      LdMgmt  96
        ENDIF                                                                   LdMgmt  97
        Jlm = <lm;Next>                                                         LdMgmt  98
      ENDDO  ! Jlm .GT. 0                                                       LdMgmt  99
c                                                                               LdMgmt 100
c                                                                               LdMgmt 101
c ============ END OF HOUR CHECKS ============================================= LdMgmt 102
      CASE (30)                                                                 LdMgmt 103
c                                                                               LdMgmt 104
c              Check end-of-hour conditions and revise control sequences        LdMgmt 105
c              as required                                                      LdMgmt 106
c                                                                               LdMgmt 107
c              Loop thru all load management sequences                          LdMgmt 108
      Jlm = Ilm                                                                 LdMgmt 109
      DO WHILE (Jlm .GT. 0)                                                     LdMgmt 110
c              See if sequence qualifies for this hour                          LdMgmt 111
        IF (<lm:QUAL-SCH> .GT. 0)  THEN                                         LdMgmt 112
          IF (SchVal(<lm:QUAL-SCH>) .NE. <lm:QUAL-SCH-FLAG>)  CYCLE             LdMgmt 113
        ENDIF                                                                   LdMgmt 114
c              Number of control groups                                         LdMgmt 115
        NumCtrlGroups  = <lm;NUM_GROUPS>                                        LdMgmt 116
c              Determine which group to use                                     LdMgmt 117
        Index = 0                                                               LdMgmt 118
        SELECT CASE (<lm:TYPE>)                                                 LdMgmt 119
c         CASE (1)                     ! Scheduled                              LdMgmt 120
c         CASE (2)                     ! Outdoor air temperature                LdMgmt 121
          CASE (3)                     ! Zone temperature                       LdMgmt 122
            ZP1 = <lm:CTRL-ZONE>                                                LdMgmt 123
            DO  IG=1,NumCtrlGroups                                              LdMgmt 124
              IF (<zn;Tavg> .LE. <lm:CTRL-TEMPS>)  THEN                         LdMgmt 125
                Index = IG                                                      LdMgmt 126
                Exit                                                            LdMgmt 127
              ENDIF                                                             LdMgmt 128
            ENDDO                                                               LdMgmt 129
c             if no range found, use hottest                                    LdMgmt 130
            IF (Index .eq. 0)  Index = NumCtrlGroups                            LdMgmt 131
          CASE (4)  ! Plant load                                                LdMgmt 132
            Jpl    = <lm:CTRL-LOOP>                                             LdMgmt 133
            Qplant = Abs(<pl.Qnet>)                                             LdMgmt 134
            DO  IG=1,NumCtrlGroups                                              LdMgmt 135
              IF (Qplant .LE. <lm:CTRL-LOADS>)  THEN                            LdMgmt 136
                Index = IG                                                      LdMgmt 137
                Exit                                                            LdMgmt 138
              ENDIF                                                             LdMgmt 139
            ENDDO                                                               LdMgmt 140
c             if no range found, use largest                                    LdMgmt 141
            IF (Index .eq. 0)  Index = NumCtrlGroups                            LdMgmt 142
c         CASE (5)                     ! Peak Shaving                           LdMgmt 143
        END SELECT                                                              LdMgmt 144
c                                                                               LdMgmt 145
c              Skip this LOAD-MANAGEMENT if no match found                      LdMgmt 146
        IF (Index .ne. 0)  THEN  ! match found                                  LdMgmt 147
          IG = Index                                                            LdMgmt 148
c              command priority for this group                                  LdMgmt 149
          Priority = <lm:CTRL-PRIORS>                                           LdMgmt 150
          IIstart  = (IG-1)*LengthCtrlGroup + 1                                 LdMgmt 151
c              set equip-ctrl sequences                                         LdMgmt 152
          Call SetEquipCtrl                                                     LdMgmt 153
c              set flags to force plants on and off                             LdMgmt 154
          Call ForcePlants                                                      LdMgmt 155
        ENDIF                                                                   LdMgmt 156
c                                                                               LdMgmt 157
        Jlm = <lm;Next>                                                         LdMgmt 158
      ENDDO  ! Jlm .GT. 0                                                       LdMgmt 159
c                                                                               LdMgmt 160
c                                                                               LdMgmt 161
c ============ ATTACHMENTS ==================================================== LdMgmt 162
      CASE (209)                                                                LdMgmt 163
c                                                                               LdMgmt 164
c              find the offset between successive EQUIP-CTRL groups             LdMgmt 165
      Jlm = Ilm                                                                 LdMgmt 166
      LengthCtrlGroup = (<+lm:EQUIP-CTRL-2>) - (<+lm:EQUIP-CTRL>)               LdMgmt 167
c                                                                               LdMgmt 168
c              set up each LOAD-MANAGEMENT sequence                             LdMgmt 169
      DO WHILE (Jlm .GT. 0)                                                     LdMgmt 170
c              convert QUAL-SCH component number to pointer                     LdMgmt 171
        <lm:QUAL-SCH> = Jsched(<lm:QUAL-SCH>)                                   LdMgmt 172
        IF (<lm:TYPE> .EQ. ScheduledEC)  THEN                                   LdMgmt 173
c              convert EQUIP-SCH component number to pointer                    LdMgmt 174
          <lm:EQUIP-SCH> = Jsched(<lm:EQUIP-SCH>)                               LdMgmt 175
        ENDIF                                                                   LdMgmt 176
c                                                                               LdMgmt 177
c              Set up special criteria for each type                            LdMgmt 178
        SELECT CASE (<lm:TYPE>)                                                 LdMgmt 179
          CASE (1)   ! Scheduled                                                LdMgmt 180
          CASE (2)   ! OA temp                                                  LdMgmt 181
          CASE (3)   ! Zone temp                                                LdMgmt 182
            <lm:CTRL-ZONE> = Jzone(<lm:CTRL-ZONE>)                              LdMgmt 183
          CASE (4)   ! Loop load                                                LdMgmt 184
            <lm:CTRL-LOOP> = Jcomponent(2, <lm:CTRL-LOOP>)                      LdMgmt 185
c              convert MBtu to Btu                                              LdMgmt 186
            DO  IG=1,5                                                          LdMgmt 187
              <lm:CTRL-LOADS> = <lm:CTRL-LOADS> * 1.E6                          LdMgmt 188
              IF (<lm:CTRL-LOADS> .ne. UnFild)                                  LdMgmt 189
     &            <lm:CTRL-LOADS> = <lm:CTRL-LOADS> * 1.E6                      LdMgmt 190
            ENDDO                                                               LdMgmt 191
          CASE (5)   ! Peak shaving                                             LdMgmt 192
        END SELECT                                                              LdMgmt 193
c                                                                               LdMgmt 194
c              Cycle thru each control group (5 maximum)                        LdMgmt 195
c              Note that lm;NUM_EQUIP-CTR, lm:NUM-LOOPS-ON,                     LdMgmt 196
c              and lm:NUM-LOOPS-OFF use the IG index.  lm:EQUIP-CTRL,           LdMgmt 197
c              lm:LOOPS-ON, and lm:LOOPS-OFF use the II index                   LdMgmt 198
        DO  IG=1,5                                                              LdMgmt 199
          IIstart = (IG-1)*LengthCtrlGroup                                      LdMgmt 200
          DO  Neq=1,LengthCtrlGroup                                             LdMgmt 201
            II = IIstart + Neq                                                  LdMgmt 202
c              equip-ctrl                                                       LdMgmt 203
            IF (<lm:EQUIP-CTRL> .gt. 0)  THEN                                   LdMgmt 204
              <lm;NUM_EQUIP-CTR> = Neq                                          LdMgmt 205
              <lm:EQUIP-CTRL>    = Jcomponent(11, <lm:EQUIP-CTRL>)              LdMgmt 206
            ENDIF                                                               LdMgmt 207
c              loops-on                                                         LdMgmt 208
            IF (<lm:LOOPS-ON> .gt. 0)  THEN                                     LdMgmt 209
              <lm;NUM_LOOPS_ON> = Neq                                           LdMgmt 210
              <lm:LOOPS-ON>     = Jcomponent(2, <lm:LOOPS-ON>)                  LdMgmt 211
            ENDIF                                                               LdMgmt 212
c              loops-off                                                        LdMgmt 213
            IF (<lm:LOOPS-OFF> .gt. 0)  THEN                                    LdMgmt 214
              <lm;NUM_LOOPS_OFF> = Neq                                          LdMgmt 215
              <lm:LOOPS-OFF>     = Jcomponent(2, <lm:LOOPS-OFF>)                LdMgmt 216
            ENDIF                                                               LdMgmt 217
          ENDDO  ! II                                                           LdMgmt 218
          Neq = <lm;NUM_EQUIP-CTR> + <lm;NUM_LOOPS_ON>                          LdMgmt 219
     &                             + <lm;NUM_LOOPS_OFF>                         LdMgmt 220
          IF (<lm:CTRL-FLAGS> .eq. Unfild)  THEN                                LdMgmt 221
c              no control range specified                                       LdMgmt 222
            IF (Neq .gt. 0)  THEN                                               LdMgmt 223
c                error if input without a control range                         LdMgmt 224
              CALL MSGSIM(-1,II,II,II,II)                                       LdMgmt 225
              WRITE (IOUTPT, 9001)  (<lm:NAME>,II=1,8), IG                      LdMgmt 226
              CALL MessageBox( NULL,                                            LdMgmt 227
     &        'Control Group has entries'//char(10)//char(13)//                 LdMgmt 228
     &        'but no control range'//char(0),                                  LdMgmt 229
     &        'LOAD-MANAGEMENT Errors'//char(0),                                LdMgmt 230
     &        MB_OK + MB_ICONSTOP + MB_TASKMODAL )                              LdMgmt 231
              IwinReturn = 1                                                    LdMgmt 232
            ENDIF                                                               LdMgmt 233
          ELSEIF (Neq .eq. 0  .and.                                             LdMgmt 234
     &           ((<lm:CTRL-FLAGS> .ne. Unfild  .and.                           LdMgmt 235
     &                          IG .eq. <lm;NUM_GROUPS>+1)  .or.                LdMgmt 236
     &            (<lm:CTRL-FLAGS> .ne. 0.  .and.                               LdMgmt 237
     &                          IG .gt. <lm;NUM_GROUPS>+1))) THEN               LdMgmt 238
c              control range specified without anything controlled              LdMgmt 239
            CALL MSGSIM(-3,II,II,II,II)                                         LdMgmt 240
            WRITE (IOUTPT, 9002)  (<lm:NAME>,II=1,8), IG                        LdMgmt 241
          ELSEIF (Neq .gt. 0)  THEN                                             LdMgmt 242
c              valid control group                                              LdMgmt 243
            <lm;NUM_GROUPS> = IG                                                LdMgmt 244
          ENDIF  ! lm:CTRL-FLAGS                                                LdMgmt 245
        ENDDO  ! IG                                                             LdMgmt 246
c                                                                               LdMgmt 247
        Jlm = <lm;Next>                                                         LdMgmt 248
      ENDDO  ! Jlm .gt. 0                                                       LdMgmt 249
c                                                                               LdMgmt 250
c                                                                               LdMgmt 251
      END SELECT  ! Mode                                                        LdMgmt 252
c                                                                               LdMgmt 253
      RETURN                                                                    LdMgmt 254
c                                                                               LdMgmt 255
c              Message formats                                                  LdMgmt 256
 9001 FORMAT(14x,'In Load Management: ' 8A4,' control'                 /        LdMgmt 257
     &14x,'group ',I1,' has equip-ctrl, loops-on or loops-off'         /        LdMgmt 258
     &14x,'specified, but has no control range specified.'             )        LdMgmt 259
 9002 FORMAT(14x,'In Load Management: ', 8A4,' control'                /        LdMgmt 260
     &14x,'group ',I1,' has a control range but no other entries.'     /        LdMgmt 261
     &14x,'Control will be via a different load management command, or'/        LdMgmt 262
     &14x,'by default.'                                                )        LdMgmt 263
c                                                                               LdMgmt 264
c                                                                               LdMgmt 265
      CONTAINS                                                                  LdMgmt 266
c ============== SetEquipCtrl ================================================= LdMgmt 267
      Subroutine SetEquipCtrl                                                   LdMgmt 268
c                                                                               LdMgmt 269
c              Set the equip-ctrl sequence for a component.                     LdMgmt 270
c              ??not tested  A history                                          LdMgmt 271
c              block for that component will set flagged to force an            LdMgmt 272
c              iteration if the equip-ctrl sequence has changed. ??not tested   LdMgmt 273
                                                                                LdMgmt 274
      IIend = IIstart + <lm;NUM_EQUIP-CTR>-1                                    LdMgmt 275
      DO  II=IIstart,IIend                                                      LdMgmt 276
        Jec = <lm:EQUIP-CTRL>                                                   LdMgmt 277
        IF (Jec .eq. 0)  Cycle                                                  LdMgmt 278
        SELECT CASE (<ec:TYPE>)                                                 LdMgmt 279
          CASE (1,5)  ! Cooling plants                                          LdMgmt 280
            Jpl = <ec:PLANT>                                                    LdMgmt 281
            IF (Priority .GT. <pl.CoolPriority>)  THEN                          LdMgmt 282
              <pl.CoolPriority>  = Priority                                     LdMgmt 283
              IF (<pl.CoolEquipCtrl> .ne. Jec)  THEN                            LdMgmt 284
                <pl.CoolEquipCtrl> = Jec                                        LdMgmt 285
                CALL IterSetHsty(1, <pl;OutletHsty>)                            LdMgmt 286
              ENDIF                                                             LdMgmt 287
            ENDIF                                                               LdMgmt 288
          CASE (2:4)  ! Heating plants                                          LdMgmt 289
            Jpl = <ec:PLANT>                                                    LdMgmt 290
            IF (Priority .GT. <pl.HeatPriority>)  THEN                          LdMgmt 291
              <pl.HeatPriority>  = Priority                                     LdMgmt 292
              IF (<pl.HeatEquipCtrl> .ne. Jec)  THEN                            LdMgmt 293
                <pl.HeatEquipCtrl> = Jec                                        LdMgmt 294
                CALL IterSetHsty(1, <pl;OutletHsty>)                            LdMgmt 295
              ENDIF                                                             LdMgmt 296
            ENDIF                                                               LdMgmt 297
          CASE (6)  ! Electrical                                                LdMgmt 298
            Jme = <ec:ELEC-METER>                                               LdMgmt 299
            IF (Priority .GT. <me;CtrlPriority>)  THEN                          LdMgmt 300
              <me;CtrlPriority> = Priority                                      LdMgmt 301
              IF (<me;EquipCtrl> .ne. Jec)  THEN                                LdMgmt 302
                <me;EquipCtrl> = Jec                                            LdMgmt 303
                CALL IterSetHsty(1, <me;DemandHsty>)                            LdMgmt 304
              ENDIF                                                             LdMgmt 305
            ENDIF                                                               LdMgmt 306
          CASE (7)  ! Suction groups                                            LdMgmt 307
            Jsg = <ec:SUCTION-GROUP>                                            LdMgmt 308
            IF (Priority .GT. <sg;CtrlPriority>)  THEN                          LdMgmt 309
              <sg;CtrlPriority> = Priority                                      LdMgmt 310
              IF (<sg;EquipCtrl> .ne. Jec)  THEN                                LdMgmt 311
                <sg;EquipCtrl> = Jec                                            LdMgmt 312
                CALL IterSetHsty(1, <sg;SuctionHsty>)                           LdMgmt 313
              ENDIF                                                             LdMgmt 314
            ENDIF                                                               LdMgmt 315
          CASE (8)  ! Condensers                                                LdMgmt 316
            Jrs = <ec:REFG-SYSTEM>                                              LdMgmt 317
            IF (Priority .GT. <rs.CtrlPriority>)  THEN                          LdMgmt 318
              <rs.CtrlPriority> = Priority                                      LdMgmt 319
              IF (<rs.EquipCtrl> .ne. Jec)  THEN                                LdMgmt 320
                <rs.EquipCtrl> = Jec                                            LdMgmt 321
                CALL IterSetHsty(1, <rs;RefgHsty>)                              LdMgmt 322
              ENDIF                                                             LdMgmt 323
            ENDIF                                                               LdMgmt 324
        END SELECT  ! ec:TYPE                                                   LdMgmt 325
      ENDDO  ! II                                                               LdMgmt 326
c                                                                               LdMgmt 327
      End Subroutine SetEquipCtrl                                               LdMgmt 328
c                                                                               LdMgmt 329
c                                                                               LdMgmt 330
c ============== ForcePlants ================================================== LdMgmt 331
      Subroutine ForcePlants                                                    LdMgmt 332
c                                                                               LdMgmt 333
c              Force loops on and off                                           LdMgmt 334
c              force loops on                                                   LdMgmt 335
      IIend = IIstart + <lm;NUM_LOOPS_ON>-1                                     LdMgmt 336
      DO  II=IIstart,IIend                                                      LdMgmt 337
        Jpl = <lm:LOOPS-ON>                                                     LdMgmt 338
        IF (Jpl .eq. 0)  Cycle                                                  LdMgmt 339
        IF (Priority .GT. <pl.OverPriority>)  THEN                              LdMgmt 340
          <pl.OverPriority> = Priority                                          LdMgmt 341
          IF (<pl.CtrlOverride> .ne. 1)  THEN                                   LdMgmt 342
            <pl.CtrlOverride> = 1                                               LdMgmt 343
            CALL IterSetHsty(1, <pl;OutletHsty>)                                LdMgmt 344
          ENDIF                                                                 LdMgmt 345
        ENDIF                                                                   LdMgmt 346
      ENDDO                                                                     LdMgmt 347
                                                                                LdMgmt 348
c              force loops off                                                  LdMgmt 349
      IIend   = IIstart + <lm;NUM_LOOPS_OFF>-1                                  LdMgmt 350
      DO  II=IIstart,IIend                                                      LdMgmt 351
        Jpl = <lm:LOOPS-OFF>                                                    LdMgmt 352
        IF (Jpl .eq. 0)  Cycle                                                  LdMgmt 353
        IF (Priority .GT. <pl.OverPriority>)  THEN                              LdMgmt 354
          <pl.OverPriority> = Priority                                          LdMgmt 355
          IF (<pl.CtrlOverride> .ne. 0)  THEN                                   LdMgmt 356
            <pl.CtrlOverride> = 0                                               LdMgmt 357
            CALL IterSetHsty(1, <pl;OutletHsty>)                                LdMgmt 358
          ENDIF                                                                 LdMgmt 359
        ENDIF                                                                   LdMgmt 360
      ENDDO                                                                     LdMgmt 361
c                                                                               LdMgmt 362
      End Subroutine ForcePlants                                                LdMgmt 363
c                                                                               LdMgmt 364
      END                                                                       LdMgmt 365
      SUBROUTINE SetNextPrevious                                                SetNxt   2
c                                                                               SetNxt   3
c              Sets up the previous/next links for all components               SetNxt   4
c                                                                               SetNxt   5
c                                                                               SetNxt   6
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
c                                                                               SetNxt  10
c                                                                               SetNxt  11
c ============ METERS ========================================================= SetNxt  12
c                                                                               SetNxt  13
      IF (Nme .GT. 0)  THEN                                                     SetNxt  14
        DO  Neq=1,Nme                                                           SetNxt  15
          Jme = Ime + (Neq-1)*Lme                                               SetNxt  16
          IF (Neq .GT. 1)    <me;Previous> = Ime + (Neq-2)*Lme                  SetNxt  17
          IF (Neq .LT. Nme)  <me;Next>     = Ime +  Neq*Lme                     SetNxt  18
        ENDDO                                                                   SetNxt  19
      ELSE                                                                      SetNxt  20
        Ime = 0                                                                 SetNxt  21
      ENDIF                                                                     SetNxt  22
c                                                                               SetNxt  23
c                                                                               SetNxt  24
c ============ PROCESS-LOADS ================================================== SetNxt  25
c                                                                               SetNxt  26
      IF (Npq .GT. 0)  THEN                                                     SetNxt  27
        DO  Neq=1,Npq                                                           SetNxt  28
          Jpq = Ipq + (Neq-1)*Lpq                                               SetNxt  29
          IF (Neq .GT. 1)    <pq;Previous> = Ipq + (Neq-2)*Lpq                  SetNxt  30
          IF (Neq .LT. Npq)  <pq;Next>     = Ipq +  Neq*Lpq                     SetNxt  31
        ENDDO                                                                   SetNxt  32
      ELSE                                                                      SetNxt  33
        Ipq = 0                                                                 SetNxt  34
      ENDIF                                                                     SetNxt  35
c                                                                               SetNxt  36
c                                                                               SetNxt  37
c ============ PLANT EQUIPMENT ================================================ SetNxt  38
c                                                                               SetNxt  39
c              Plants                                                           SetNxt  40
      IF (Npl .GT. 0)  THEN                                                     SetNxt  41
        DO  Neq=1,Npl                                                           SetNxt  42
          Jpl = Ipl + (Neq-1)*Lpl                                               SetNxt  43
          IF (Neq .GT. 1)    <pl;Previous> = Ipl + (Neq-2)*Lpl                  SetNxt  44
          IF (Neq .LT. Npl)  <pl;Next>     = Ipl +  Neq*Lpl                     SetNxt  45
        ENDDO                                                                   SetNxt  46
      ELSE                                                                      SetNxt  47
        Ipl = 0                                                                 SetNxt  48
      ENDIF                                                                     SetNxt  49
c              Fluids                                                           SetNxt  50
      IF (Nfl .GT. 0)  THEN                                                     SetNxt  51
        DO  Neq=1,Nfl                                                           SetNxt  52
          Jfl = Ifl + (Neq-1)*Lfl                                               SetNxt  53
          IF (Neq .GT. 1)    <fl;Previous> = Ifl + (Neq-2)*Lfl                  SetNxt  54
          IF (Neq .LT. Nfl)  <fl;Next>     = Ifl +  Neq*Lfl                     SetNxt  55
        ENDDO                                                                   SetNxt  56
      ELSE                                                                      SetNxt  57
        Ifl = 0                                                                 SetNxt  58
      ENDIF                                                                     SetNxt  59
c              Fluid circuits                                                   SetNxt  60
      IF (Nfc .GT. 0)  THEN                                                     SetNxt  61
        DO  Neq=1,Nfc                                                           SetNxt  62
          Jfc = Ifc + (Neq-1)*Lfc                                               SetNxt  63
          IF (Neq .GT. 1)    <fc;Previous> = Ifc + (Neq-2)*Lfc                  SetNxt  64
          IF (Neq .LT. Nfc)  <fc;Next>     = Ifc +  Neq*Lfc                     SetNxt  65
        ENDDO                                                                   SetNxt  66
      ELSE                                                                      SetNxt  67
        Ifc = 0                                                                 SetNxt  68
      ENDIF                                                                     SetNxt  69
c              Pumps                                                            SetNxt  70
      IF (Npm .GT. 0)  THEN                                                     SetNxt  71
        DO  Neq=1,Npm                                                           SetNxt  72
          Jpm = Ipm + (Neq-1)*Lpm                                               SetNxt  73
          IF (Neq .GT. 1)    <pm;Previous> = Ipm + (Neq-2)*Lpm                  SetNxt  74
          IF (Neq .LT. Npm)  <pm;Next>     = Ipm +  Neq*Lpm                     SetNxt  75
        ENDDO                                                                   SetNxt  76
      ELSE                                                                      SetNxt  77
        Ipm = 0                                                                 SetNxt  78
      ENDIF                                                                     SetNxt  79
c              Boilers                                                          SetNxt  80
      IF (Nbl .GT. 0)  THEN                                                     SetNxt  81
        DO  Neq=1,Nbl                                                           SetNxt  82
          Jbl = Ibl + (Neq-1)*Lbl                                               SetNxt  83
          IF (Neq .GT. 1)    <bl;Previous> = Ibl + (Neq-2)*Lbl                  SetNxt  84
          IF (Neq .LT. Nbl)  <bl;Next>     = Ibl +  Neq*Lbl                     SetNxt  85
        ENDDO                                                                   SetNxt  86
      ELSE                                                                      SetNxt  87
        Ibl = 0                                                                 SetNxt  88
      ENDIF                                                                     SetNxt  89
c              Chillers                                                         SetNxt  90
      IF (Nch .GT. 0)  THEN                                                     SetNxt  91
        DO  Neq=1,Nch                                                           SetNxt  92
          Jch = Ich + (Neq-1)*Lch                                               SetNxt  93
          IF (Neq .GT. 1)    <ch;Previous> = Ich + (Neq-2)*Lch                  SetNxt  94
          IF (Neq .LT. Nch)  <ch;Next>     = Ich +  Neq*Lch                     SetNxt  95
        ENDDO                                                                   SetNxt  96
      ELSE                                                                      SetNxt  97
        Ich = 0                                                                 SetNxt  98
      ENDIF                                                                     SetNxt  99
c              DW Heaters                                                       SetNxt 100
      IF (Ndw .GT. 0)  THEN                                                     SetNxt 101
        DO  Neq=1,Ndw                                                           SetNxt 102
          Jdw = Idw + (Neq-1)*Ldw                                               SetNxt 103
          IF (Neq .GT. 1)    <dw;Previous> = Idw + (Neq-2)*Ldw                  SetNxt 104
          IF (Neq .LT. Ndw)  <dw;Next>     = Idw +  Neq*Ldw                     SetNxt 105
        ENDDO                                                                   SetNxt 106
      ELSE                                                                      SetNxt 107
        Idw = 0                                                                 SetNxt 108
      ENDIF                                                                     SetNxt 109
c              Heat-rejection components                                        SetNxt 110
      IF (Ntw .GT. 0)  THEN                                                     SetNxt 111
        DO  Neq=1,Ntw                                                           SetNxt 112
          Jtw = Itw + (Neq-1)*Ltw                                               SetNxt 113
          IF (Neq .GT. 1)    <tw;Previous> = Itw + (Neq-2)*Ltw                  SetNxt 114
          IF (Neq .LT. Ntw)  <tw;Next>     = Itw +  Neq*Ltw                     SetNxt 115
        ENDDO                                                                   SetNxt 116
      ELSE                                                                      SetNxt 117
        Itw = 0                                                                 SetNxt 118
      ENDIF                                                                     SetNxt 119
c              Electric generators                                              SetNxt 120
      IF (Ngn .GT. 0)  THEN                                                     SetNxt 121
        DO  Neq=1,Ngn                                                           SetNxt 122
          Jgn = Ign + (Neq-1)*Lgn                                               SetNxt 123
          IF (Neq .GT. 1)    <gn;Previous> = Ign + (Neq-2)*Lgn                  SetNxt 124
          IF (Neq .LT. Ngn)  <gn;Next>     = Ign +  Neq*Lgn                     SetNxt 125
        ENDDO                                                                   SetNxt 126
      ELSE                                                                      SetNxt 127
        Ign = 0                                                                 SetNxt 128
      ENDIF                                                                     SetNxt 129
c              Storage tanks                                                    SetNxt 130
      IF (Ntk .GT. 0)  THEN                                                     SetNxt 131
        DO  Neq=1,Ntk                                                           SetNxt 132
          Jtk = Itk + (Neq-1)*Ltk                                               SetNxt 133
          IF (Neq .GT. 1)    <tk;Previous> = Itk + (Neq-2)*Ltk                  SetNxt 134
          IF (Neq .LT. Ntk)  <tk;Next>     = Itk +  Neq*Ltk                     SetNxt 135
        ENDDO                                                                   SetNxt 136
      ELSE                                                                      SetNxt 137
        Itk = 0                                                                 SetNxt 138
      ENDIF                                                                     SetNxt 139
c              Ground-loop HXs                                                  SetNxt 140
      IF (Ngl .GT. 0)  THEN                                                     SetNxt 141
        DO  Neq=1,Ngl                                                           SetNxt 142
          Jgl = Igl + (Neq-1)*Lgl                                               SetNxt 143
          IF (Neq .GT. 1)    <gl;Previous> = Igl + (Neq-2)*Lgl                  SetNxt 144
          IF (Neq .LT. Ngl)  <gl;Next>     = Igl +  Neq*Lgl                     SetNxt 145
        ENDDO                                                                   SetNxt 146
      ELSE                                                                      SetNxt 147
        Igl = 0                                                                 SetNxt 148
      ENDIF                                                                     SetNxt 149
c              Load-Management sequences                                        SetNxt 150
      IF (Nlm .GT. 0)  THEN                                                     SetNxt 151
        DO  Neq=1,Nlm                                                           SetNxt 152
          Jlm = Ilm + (Neq-1)*Llm                                               SetNxt 153
          IF (Neq .GT. 1)    <lm;Previous> = Ilm + (Neq-2)*Llm                  SetNxt 154
          IF (Neq .LT. Nlm)  <lm;Next>     = Ilm +  Neq*Llm                     SetNxt 155
        ENDDO                                                                   SetNxt 156
      ELSE                                                                      SetNxt 157
        Ilm = 0                                                                 SetNxt 158
      ENDIF                                                                     SetNxt 159
c              Equip-ctrl sequences                                             SetNxt 160
      IF (Nec .GT. 0)  THEN                                                     SetNxt 161
        DO  Neq=1,Nec                                                           SetNxt 162
          Jec = Iec + (Neq-1)*Lec                                               SetNxt 163
          IF (Neq .GT. 1)    <ec;Previous> = Iec + (Neq-2)*Lec                  SetNxt 164
          IF (Neq .LT. Nec)  <ec;Next>     = Iec +  Neq*Lec                     SetNxt 165
        ENDDO                                                                   SetNxt 166
      ELSE                                                                      SetNxt 167
        Iec = 0                                                                 SetNxt 168
      ENDIF                                                                     SetNxt 169
c                                                                               SetNxt 170
c                                                                               SetNxt 171
c ============ REFRIGERATION EQUIPMENT ======================================== SetNxt 172
c                                                                               SetNxt 173
c              Refrigerants                                                     SetNxt 174
      IF (Nre .GT. 0)  THEN                                                     SetNxt 175
        DO  Neq=1,Nre                                                           SetNxt 176
          Jre = Ire + (Neq-1)*Lre                                               SetNxt 177
          IF (Neq .GT. 1)    <re;Previous> = Ire + (Neq-2)*Lre                  SetNxt 178
          IF (Neq .LT. Nre)  <re;Next>     = Ire +  Neq*Lre                     SetNxt 179
        ENDDO                                                                   SetNxt 180
      ELSE                                                                      SetNxt 181
        Ire = 0                                                                 SetNxt 182
      ENDIF                                                                     SetNxt 183
c              Refrigerant plants                                               SetNxt 184
      IF (Nrs .GT. 0)  THEN                                                     SetNxt 185
        DO  Neq=1,Nrs                                                           SetNxt 186
          Jrs = Irs + (Neq-1)*Lrs                                               SetNxt 187
          IF (Neq .GT. 1)    <rs;Previous> = Irs + (Neq-2)*Lrs                  SetNxt 188
          IF (Neq .LT. Nrs)  <rs;Next>     = Irs +  Neq*Lrs                     SetNxt 189
        ENDDO                                                                   SetNxt 190
      ELSE                                                                      SetNxt 191
        Irs = 0                                                                 SetNxt 192
      ENDIF                                                                     SetNxt 193
c              Refrigerant circuits                                             SetNxt 194
      IF (Nrc .GT. 0)  THEN                                                     SetNxt 195
        DO  Neq=1,Nrc                                                           SetNxt 196
          Jrc = Irc + (Neq-1)*Lrc                                               SetNxt 197
          IF (Neq .GT. 1)    <rc;Previous> = Irc + (Neq-2)*Lrc                  SetNxt 198
          IF (Neq .LT. Nrc)  <rc;Next>     = Irc +  Neq*Lrc                     SetNxt 199
        ENDDO                                                                   SetNxt 200
      ELSE                                                                      SetNxt 201
        Irc = 0                                                                 SetNxt 202
      ENDIF                                                                     SetNxt 203
c              Display fixtures                                                 SetNxt 204
      IF (Nrf .GT. 0)  THEN                                                     SetNxt 205
        DO  Neq=1,Nrf                                                           SetNxt 206
          Jrf = Irf + (Neq-1)*Lrf                                               SetNxt 207
          IF (Neq .GT. 1)    <rf;Previous> = Irf + (Neq-2)*Lrf                  SetNxt 208
          IF (Neq .LT. Nrf)  <rf;Next>     = Irf +  Neq*Lrf                     SetNxt 209
        ENDDO                                                                   SetNxt 210
      ELSE                                                                      SetNxt 211
        Irf = 0                                                                 SetNxt 212
      ENDIF                                                                     SetNxt 213
c              Suction groups                                                   SetNxt 214
      IF (Nsg .GT. 0)  THEN                                                     SetNxt 215
        DO  Neq=1,Nsg                                                           SetNxt 216
          Jsg = Isg + (Neq-1)*Lsg                                               SetNxt 217
          IF (Neq .GT. 1)    <sg;Previous> = Isg + (Neq-2)*Lsg                  SetNxt 218
          IF (Neq .LT. Nsg)  <sg;Next>     = Isg +  Neq*Lsg                     SetNxt 219
        ENDDO                                                                   SetNxt 220
      ELSE                                                                      SetNxt 221
        Isg = 0                                                                 SetNxt 222
      ENDIF                                                                     SetNxt 223
c              Condensers                                                       SetNxt 224
      IF (Ncd .GT. 0)  THEN                                                     SetNxt 225
        DO  Neq=1,Ncd                                                           SetNxt 226
          Jcd = Icd + (Neq-1)*Lcd                                               SetNxt 227
          IF (Neq .GT. 1)    <cd;Previous> = Icd + (Neq-2)*Lcd                  SetNxt 228
          IF (Neq .LT. Ncd)  <cd;Next>     = Icd +  Neq*Lcd                     SetNxt 229
        ENDDO                                                                   SetNxt 230
      ELSE                                                                      SetNxt 231
        Icd = 0                                                                 SetNxt 232
      ENDIF                                                                     SetNxt 233
c              Subcoolers                                                       SetNxt 234
      IF (Nsc .GT. 0)  THEN                                                     SetNxt 235
        DO  Neq=1,Nsc                                                           SetNxt 236
          Jsc = Isc + (Neq-1)*Lsc                                               SetNxt 237
          IF (Neq .GT. 1)    <sc;Previous> = Isc + (Neq-2)*Lsc                  SetNxt 238
          IF (Neq .LT. Nsc)  <sc;Next>     = Isc +  Neq*Lsc                     SetNxt 239
        ENDDO                                                                   SetNxt 240
      ELSE                                                                      SetNxt 241
        Isc = 0                                                                 SetNxt 242
      ENDIF                                                                     SetNxt 243
c              Desuperheaters                                                   SetNxt 244
      IF (Nds .GT. 0)  THEN                                                     SetNxt 245
        DO  Neq=1,Nds                                                           SetNxt 246
          Jds = Ids + (Neq-1)*Lds                                               SetNxt 247
          IF (Neq .GT. 1)    <ds;Previous> = Ids + (Neq-2)*Lds                  SetNxt 248
          IF (Neq .LT. Nds)  <ds;Next>     = Ids +  Neq*Lds                     SetNxt 249
        ENDDO                                                                   SetNxt 250
      ELSE                                                                      SetNxt 251
        Ids = 0                                                                 SetNxt 252
      ENDIF                                                                     SetNxt 253
c              Compressors                                                      SetNxt 254
      IF (Ncp .GT. 0)  THEN                                                     SetNxt 255
        DO  Neq=1,Ncp                                                           SetNxt 256
          Jcp = Icp + (Neq-1)*Lcp                                               SetNxt 257
          IF (Neq .GT. 1)    <cp;Previous> = Icp + (Neq-2)*Lcp                  SetNxt 258
          IF (Neq .LT. Ncp)  <cp;Next>     = Icp +  Neq*Lcp                     SetNxt 259
        ENDDO                                                                   SetNxt 260
      ELSE                                                                      SetNxt 261
        Icp = 0                                                                 SetNxt 262
      ENDIF                                                                     SetNxt 263
c                                                                               SetNxt 264
      RETURN                                                                    SetNxt 265
      END                                                                       SetNxt 266
C ##############################################################################Meters   2
C ##############################################################################Meters   3
C ##############################################################################Meters   4
C ##############################################################################Meters   5
C ##########                                                          ##########Meters   6
C ##########                      METER ROUTINES                      ##########Meters   7
C ##########                                                          ##########Meters   8
C ##############################################################################Meters   9
C ##############################################################################Meters  10
C ##############################################################################Meters  11
C ##############################################################################Meters  12
c                                                                               Meters  13
      SUBROUTINE Meters(Mode)                                                   Meters  14
c                                                                               Meters  15
c              Controls the simulation of all meters                            Meters  16
c                                                                               Meters  17
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /MtrDat/ ListRankedSteam, ListRankedCHW,                          /MtrDat/ 2
     &                 ListRankedElec,  ListRankedFuel,                         /MtrDat/ 3
     &                 ListRankedSale,  ListRankedH2O,                          /MtrDat/ 4
     &                 xMtrDat                                                  /MtrDat/ 5
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
      COMMON  /PTRSYS/ nvect ,                                                  /PTRSYS/ 2
     $                 nsched, its   ,                                          /PTRSYS/ 3
     $                 ncurve, icurve,                                          /PTRSYS/ 4
     $                 nzone , iz    , nczd  , zp2 ,         mtw  ,             /PTRSYS/ 5
     $                 nsys  , is    , nss   , nsp ,  ns   , icode,             /PTRSYS/ 6
     $                 nsz   , isz   , nzd   , zp1 ,  nz   ,                    /PTRSYS/ 7
     $                 nspace, lpr   , Lcv   ,                                  /PTRSYS/ 8
     $                 nattch, iatt  ,                                          /PTRSYS/11
     $                 P2, IDAYHR, IDBWBT,                                      /PTRSYS/12
     $                 IRPPLT, IRPSUM, IRPSYS, IRPZON, MR1, MR2                 /PTRSYS/13
      INTEGER          ZP1, ZP2, P2                                             /PTRSYS/14
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
c                                                                               Meters  25
      INTEGER RepPSE(6)                                                         Meters  26
      LOGICAL IterNode, IterReqdNode, IterReqdHsty                              Meters  27
c                                                                               Meters  28
      SELECT CASE (Mode)                                                        Meters  29
c                                                                               Meters  30
c                                                                               Meters  31
c ============ HOURLY INITIALIZATION ========================================== Meters  32
      CASE (10)                                                                 Meters  33
c                                                                               Meters  34
      Jme = Ime                                                                 Meters  35
      DO WHILE (Jme .GT. 0)                                                     Meters  36
        SELECT CASE (<me:TYPE>)                                                 Meters  37
          CASE (3,5)  ! Electric                                                Meters  38
            CALL Meter_Elec(Mode, Jme)                                          Meters  39
          CASE DEFAULT                                                          Meters  40
            CALL Meter(Mode, Jme)                                               Meters  41
          END SELECT                                                            Meters  42
        Jme = <me;Next>                                                         Meters  43
      ENDDO                                                                     Meters  44
c                                                                               Meters  45
c              Transfer usage within each space                                 Meters  46
      DO  NS=1,NSYS                                                             Meters  47
        NSP = IS + (NS-1)*NSS                                                   Meters  48
        NSZ = <NZONES>                                                          Meters  49
        ISZ = <ISZONES>                                                         Meters  50
        DO  NZ=1,NSZ                                                            Meters  51
          ZP1 = ISZ + (NZ-1)*NZD                                                Meters  52
          ZP2 = <ZP2>                                                           Meters  53
          Zmult      = <MULTIPLIER>                                             Meters  54
          Jme        = <LIGHT-E-MZ>                                             Meters  55
          <me;Light> = <me;Light>    + <AREA-LITES-ELEC> * Zmult                Meters  56
          Jme        = <TASK-E-MZ>                                              Meters  57
          <me;Task>  = <me;Task>     + <TASK-LITES-ELEC> * Zmult                Meters  58
          Jme        = <EQUIP-E-MZ>                                             Meters  59
          <me;Equip> = <me;Equip>    + <EQUIP-ELEC>      * Zmult                Meters  60
          Jme        = <SOURCE-E-MZ>                                            Meters  61
          <me;Equip> = <me;Equip>    + <SOURCE-ELEC>     * Zmult                Meters  62
          Jme        = <SOURCE-F-MZ>                                            Meters  63
          <me;Equip> = <me;Equip>    + <SOURCE-FUEL>     * Zmult                Meters  64
        ENDDO                                                                   Meters  65
      ENDDO                                                                     Meters  66
c                                                                               Meters  67
c                                                                               Meters  68
c ============ HOURLY SIMULATION ============================================== Meters  69
      CASE (31)                                                                 Meters  70
c                                                                               Meters  71
c              Simulate meters from highest rank to lowest.                     Meters  72
c              Skip if no change from last iteration                            Meters  73
c              First, electric.                                                 Meters  74
      IF (ListRankedElec .GT. 0)  THEN                                          Meters  75
        Kli      = ListRankedElec                                               Meters  76
        NumItems = <li;NumItems>                                                Meters  77
        DO  LI=NumItems,1,-1                                                    Meters  78
          Jme = <li;List>                                                       Meters  79
          IterNode = IterReqdNode(1, <me;Nodes>)                                Meters  80
          IF (IterNode  .OR.  IterReqdHsty(<me;DemandHsty>))                    Meters  81
     &      CALL Meter_Elec(Mode, Jme)                                          Meters  82
        ENDDO                                                                   Meters  83
      ENDIF                                                                     Meters  84
c                                                                               Meters  85
c              Electric sale                                                    Meters  86
      IF (ListRankedSale .GT. 0)  THEN                                          Meters  87
        Kli      = ListRankedSale                                               Meters  88
        NumItems = <li;NumItems>                                                Meters  89
        DO  LI=NumItems,1,-1                                                    Meters  90
          Jme = <li;List>                                                       Meters  91
          IterNode = IterReqdNode(1, <me;Nodes>)                                Meters  92
          IF (IterNode  .OR.  IterReqdHsty(<me;DemandHsty>))                    Meters  93
     &      CALL Meter_Elec(Mode, Jme)                                          Meters  94
        ENDDO                                                                   Meters  95
      ENDIF                                                                     Meters  96
c                                                                               Meters  97
c              Fuel                                                             Meters  98
      IF (ListRankedFuel .GT. 0)  THEN                                          Meters  99
        Kli      = ListRankedFuel                                               Meters 100
        NumItems = <li;NumItems>                                                Meters 101
        DO  LI=NumItems,1,-1                                                    Meters 102
          Jme = <li;List>                                                       Meters 103
          IterNode = IterReqdNode(1, <me;Nodes>)                                Meters 104
          IF (IterNode  .OR.  IterReqdHsty(<me;DemandHsty>))                    Meters 105
     &      CALL Meter(Mode, Jme)                                               Meters 106
        ENDDO                                                                   Meters 107
      ENDIF                                                                     Meters 108
c                                                                               Meters 109
c              Steam                                                            Meters 110
      IF (ListRankedSteam .GT. 0)  THEN                                         Meters 111
        Kli      = ListRankedSteam                                              Meters 112
        NumItems = <li;NumItems>                                                Meters 113
        DO  LI=NumItems,1,-1                                                    Meters 114
          Jme = <li;List>                                                       Meters 115
          IterNode = IterReqdNode(1, <me;Nodes>)                                Meters 116
          IF (IterNode  .OR.  IterReqdHsty(<me;DemandHsty>))                    Meters 117
     &      CALL Meter(Mode, Jme)                                               Meters 118
        ENDDO                                                                   Meters 119
      ENDIF                                                                     Meters 120
c                                                                               Meters 121
c              Chilled water                                                    Meters 122
      IF (ListRankedCHW .GT. 0)  THEN                                           Meters 123
        Kli      = ListRankedCHW                                                Meters 124
        NumItems = <li;NumItems>                                                Meters 125
        DO  LI=NumItems,1,-1                                                    Meters 126
          Jme = <li;List>                                                       Meters 127
          IterNode = IterReqdNode(1, <me;Nodes>)                                Meters 128
          IF (IterNode  .OR.  IterReqdHsty(<me;DemandHsty>))                    Meters 129
     &      CALL Meter(Mode, Jme)                                               Meters 130
        ENDDO                                                                   Meters 131
      ENDIF                                                                     Meters 132
c                                                                               Meters 133
c              Water                                                            Meters 134
      IF (ListRankedH2O .GT. 0)  THEN                                           Meters 135
        Kli      = ListRankedH2O                                                Meters 136
        NumItems = <li;NumItems>                                                Meters 137
        DO  LI=NumItems,1,-1                                                    Meters 138
          Jme = <li;List>                                                       Meters 139
          IterNode = IterReqdNode(1, <me;Nodes>)                                Meters 140
          IF (IterNode  .OR.  IterReqdHsty(<me;DemandHsty>))                    Meters 141
     &      CALL Meter(Mode, Jme)                                               Meters 142
        ENDDO                                                                   Meters 143
      ENDIF                                                                     Meters 144
c                                                                               Meters 145
c                                                                               Meters 146
c ============ REPORT CREATION ================================================ Meters 147
      CASE (50)                                                                 Meters 148
c                                                                               Meters 149
      DO  MeterType=1,6                                                         Meters 150
        RepPSE(MeterType) = 0                                                   Meters 151
      ENDDO                                                                     Meters 152
c                                                                               Meters 153
      IF (IREPRT(3,20) .GT. 0)  THEN                                            Meters 154
c              Create reports PS-E for each type of meter except                Meters 155
c              electric sale and water                                          Meters 156
        DO  MeterType=1,4                                                       Meters 157
c              create a list of the end-use nodes                               Meters 158
          Kli = 0                                                               Meters 159
          Jme = Ime                                                             Meters 160
          DO WHILE (Jme .GT. 0)                                                 Meters 161
            IF (<me:TYPE> .EQ. MeterType  .AND.  <me;Rank> .EQ. 1)              Meters 162
     &        CALL ListAdd(Kli, <me;DemandNode>)                                Meters 163
            Jme = <me;Next>                                                     Meters 164
          ENDDO                                                                 Meters 165
          IF (Kli .EQ. 0)  Cycle                                                Meters 166
c              do statistics on the list of end-use nodes                       Meters 167
          Ks3  = NewStat3(Kli)                                                  Meters 168
          IF (ITDV .gt. 0  .and.                                                Meters 169
     &       (MeterType .eq. 3  .or.  MeterType .eq. 4))  THEN                  Meters 170
            Ks11 = NewStat11(Kli)                                               Meters 171
          ELSE                                                                  Meters 172
            Ks11 = 0                                                            Meters 173
          ENDIF                                                                 Meters 174
c              create the report                                                Meters 175
          RepPSE(MeterType) = NewReport_PSE(MeterType, Ks3, Ks11)               Meters 176
        ENDDO  ! MeterType                                                      Meters 177
      ENDIF                                                                     Meters 178
c                                                                               Meters 179
      Jme = Ime                                                                 Meters 180
      DO WHILE (Jme .GT. 0)                                                     Meters 181
        SELECT CASE (<me:TYPE>)                                                 Meters 182
        CASE (3,5)  ! Electric                                                  Meters 183
          CALL Meter_Elec(Mode, Jme)                                            Meters 184
        CASE DEFAULT                                                            Meters 185
          CALL Meter(Mode, Jme)                                                 Meters 186
        END SELECT                                                              Meters 187
        Jme = <me;Next>                                                         Meters 188
      ENDDO                                                                     Meters 189
c                                                                               Meters 190
c                                                                               Meters 191
c ============ REPORT ORDER =================================================== Meters 192
      CASE (52)                                                                 Meters 193
c                                                                               Meters 194
      DO  MeterType=1,6                                                         Meters 195
        IF (RepPSE(MeterType) .ne. 0)                                           Meters 196
     &   CALL Report_PSE(Mode, RepPSE(MeterType))                               Meters 197
c                                                                               Meters 198
c              Meter reports for a given meter type                             Meters 199
        Jme = Ime                                                               Meters 200
        DO WHILE (Jme .GT. 0)                                                   Meters 201
          IF (<me:TYPE> .EQ. MeterType)  THEN                                   Meters 202
            SELECT CASE (<me:TYPE>)                                             Meters 203
            CASE (3,5)  ! Electric                                              Meters 204
              CALL Meter_Elec(Mode, Jme)                                        Meters 205
            CASE DEFAULT                                                        Meters 206
              CALL Meter(Mode, Jme)                                             Meters 207
            END SELECT                                                          Meters 208
          ENDIF                                                                 Meters 209
          Jme = <me;Next>                                                       Meters 210
        ENDDO                                                                   Meters 211
      ENDDO  ! MeterType                                                        Meters 212
c                                                                               Meters 213
c                                                                               Meters 214
c ============ ATTACHMENTS ==================================================== Meters 215
c                                                                               Meters 216
c              Initial attachments                                              Meters 217
      CASE (201)                                                                Meters 218
c                                                                               Meters 219
c              Create a mask to exclude end-use categories from                 Meters 220
c              time-dependent valuation                                         Meters 221
      IF (ITDV .ne. 0)  THEN                                                    Meters 222
        DO  IE=1,19                                                             Meters 223
          <mm;IncludeTDV> = 1.                                                  Meters 224
        ENDDO                                                                   Meters 225
        DO  II=1,10                                                             Meters 226
          IF (<mm:EXCLUDE-TDV> .eq. 0)  Exit                                    Meters 227
          IE = <mm:EXCLUDE-TDV>                                                 Meters 228
          <mm;IncludeTDV> = 0.                                                  Meters 229
        ENDDO                                                                   Meters 230
      ENDIF                                                                     Meters 231
c                                                                               Meters 232
      Jme = Ime                                                                 Meters 233
      DO WHILE (Jme .GT. 0)                                                     Meters 234
        SELECT CASE (<me:TYPE>)                                                 Meters 235
          CASE (3,5)  ! Electric                                                Meters 236
            CALL Meter_Elec(Mode, Jme)                                          Meters 237
          CASE DEFAULT                                                          Meters 238
            CALL Meter(Mode, Jme)                                               Meters 239
          END SELECT                                                            Meters 240
        Jme = <me;Next>                                                         Meters 241
      ENDDO                                                                     Meters 242
c                                                                               Meters 243
c                                                                               Meters 244
c ============ ALL OTHER MODES ================================================ Meters 245
      CASE DEFAULT                                                              Meters 246
c                                                                               Meters 247
      Jme = Ime                                                                 Meters 248
      DO WHILE (Jme .GT. 0)                                                     Meters 249
        SELECT CASE (<me:TYPE>)                                                 Meters 250
          CASE (3,5)  ! Electric                                                Meters 251
            CALL Meter_Elec(Mode, Jme)                                          Meters 252
          CASE DEFAULT                                                          Meters 253
            CALL Meter(Mode, Jme)                                               Meters 254
          END SELECT                                                            Meters 255
        Jme = <me;Next>                                                         Meters 256
      ENDDO                                                                     Meters 257
c                                                                               Meters 258
c                                                                               Meters 259
      END SELECT  ! Mode                                                        Meters 260
c                                                                               Meters 261
      RETURN                                                                    Meters 262
      END                                                                       Meters 263
      SUBROUTINE Meter(Mode, Knx)                                               Meter    2
c                                                                               Meter    3
c              Simulates a meter (except electric)                              Meter    4
c                                                                               Meter    5
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON  /TDVdat/ NameTDV, TDVmax(3), TDVmin(3), TDVavg(3),                /TDVdat/ 2
     &                 TDVsrc(3,8760), KtvTDV2(4)                               /TDVdat/ 3
      Character        NameTDV*4                                                /TDVdat/ 4
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
c                                                                               Meter   13
      DATA IdNode /4H$Kno/                                                      /IdNode/ 2
c                                                                               Meter   15
c                                                                               Meter   16
      IF (<nx;Ident> .EQ. IdNode)  THEN                                         Meter   17
        Jme = <nx;Component>                                                    Meter   18
      ELSE                                                                      Meter   19
        Jme = Knx                                                               Meter   20
      ENDIF                                                                     Meter   21
c                                                                               Meter   22
      Kms = <me;SupplyNode>            ! supply node                            Meter   23
      Kmd = <me;DemandNode>            ! demand node                            Meter   24
c                                                                               Meter   25
      SELECT CASE (Mode)                                                        Meter   26
c                                                                               Meter   27
c                                                                               Meter   28
c ============ HOURLY INITIALIZATION ========================================== Meter   29
      CASE (10)                                                                 Meter   30
c                                                                               Meter   31
      CALL ZeroAA(<#me.HrZeroStart..>, <#me.HrZeroEnd....>)                     Meter   32
c              calculate miscellaneous loads attached directly to meters        Meter   33
c              interior                                                         Meter   34
      Nmisc = <me;NumIntLoads>                                                  Meter   35
      DO  II=1,Nmisc                                                            Meter   36
        IE          = <me:INT-EU>                                               Meter   37
        <me;Meters> = <me;Meters> + <me:INT-BTU/HR>*SchVal(<me:INT-SCH>)        Meter   38
      ENDDO                                                                     Meter   39
c              exterior                                                         Meter   40
      Nmisc = <me;NumExtLoads>                                                  Meter   41
      DO  II=1,Nmisc                                                            Meter   42
        IE          = <me:EXT-EU>                                               Meter   43
        <me;Meters> = <me;Meters> + <me:EXT-BTU/HR>*SchVal(<me:EXT-SCH>)        Meter   44
      ENDDO                                                                     Meter   45
c                                                                               Meter   46
c              Index into time-dependent valuation data                         Meter   47
c              TDV(I,J)                                                         Meter   48
c                    ^  Hour of year (1-8760)                                   Meter   49
c                  1    Electric kBtu/kWh   source/site multiplier              Meter   50
c                  2    Gas      kBtu/Therm   "                                 Meter   51
c                  3    Propane  kBtu/Therm   "                                 Meter   52
      IF (ITDV .gt. 0  .and.  <me:TYPE> .eq. 4)  THEN  ! fuel                   Meter   53
        iYrHr = (IDOY-1)*24 + IHR                                               Meter   54
c              Source multiplier for time-dependent valuation; convert          Meter   55
c              kBtu/Therm to kBtu/Btu for internal use                          Meter   56
        SELECT CASE (<me:SUBTYPE>)                                              Meter   57
        CASE (1)  ! Natural gas                                                 Meter   58
          <me.TDVsrc> = TDVsrc(2,iYrHr) * 0.00001                               Meter   59
        CASE DEFAULT  ! Propane and all other fuels                             Meter   60
          <me.TDVsrc> = TDVsrc(3,iYrHr) * 0.00001                               Meter   61
        END SELECT                                                              Meter   62
      ENDIF                                                                     Meter   63
c                                                                               Meter   64
c                                                                               Meter   65
c ============ HOURLY SIMULATION ============================================== Meter   66
      CASE (31)                                                                 Meter   67
c                                                                               Meter   68
c              Supply-side calculations                                         Meter   69
c              Get loads from demanders                                         Meter   70
      CALL MeterNode(Kms, <md.Load>)                                            Meter   71
c                                                                               Meter   72
c              Set iteration flag in parent                                     Meter   73
      CALL CnvgCheck(2, <me;DemandHsty>)                                        Meter   74
c                                                                               Meter   75
c                                                                               Meter   76
c ============ REPORT CREATION ================================================ Meter   77
      CASE (50)                                                                 Meter   78
c                                                                               Meter   79
c              Create the end-use statistics blocks                             Meter   80
      <me;s3> = NewStat3(<me;DemandNode>)                                       Meter   81
      IF (ITDV .gt. 0  .and.  <me:TYPE> .eq. 4)                                 Meter   82
     &  <me;s11> = NewStat11(<me;DemandNode>)                                   Meter   83
                                                                                Meter   84
c              and the "F" report                                               Meter   85
      IF (IREPRT(3,21) .GT. 0  .and.  <me:REPORT> .NE. 0)                       Meter   86
     &  <me;PS-F> = NewReport_PSF(<me;s3>, 0, <me;s11>)                         Meter   87
c                                                                               Meter   88
c              if report PS-B specified, create the statistics block            Meter   89
      IF (IREPRT(3,17) .GT. 0)                                                  Meter   90
     &  Ks4 = NewStat4(<me;s3>)                                                 Meter   91
c                                                                               Meter   92
c                                                                               Meter   93
c ============ REPORT ORDER =================================================== Meter   94
      CASE (52)                                                                 Meter   95
c                                                                               Meter   96
      Call Report_PSF(Mode, <me;PS-F>)                                          Meter   97
c                                                                               Meter   98
c                                                                               Meter   99
c ============ HOURLY REPORTS - HOURLY DATA =================================== Meter  100
      CASE (62)                                                                 Meter  101
c                                                                               Meter  102
c              Hourly-report variables                                          Meter  103
      IF (<me;HourRepBuf> .EQ. 0)  RETURN                                       Meter  104
c                                                                               Meter  105
      IAptr        = <me;HourRepBuf>-1                                          Meter  106
      BtuUnit      = <me:BTU/UNIT>                                              Meter  107
      AA(IAptr+ 1) = <md.Load>          * BtuUnit                               Meter  108
      AA(IAptr+ 3) = <eu.Lights>        * BtuUnit                               Meter  109
      AA(IAptr+ 4) = <eu.TaskLights>    * BtuUnit                               Meter  110
      AA(IAptr+ 5) = <eu.Equipment>     * BtuUnit                               Meter  111
      AA(IAptr+ 6) = <eu.Heating>       * BtuUnit                               Meter  112
      AA(IAptr+ 7) = <eu.Cooling>       * BtuUnit                               Meter  113
      AA(IAptr+ 8) = <eu.HeatRejection> * BtuUnit                               Meter  114
      AA(IAptr+ 9) = <eu.Auxiliary>     * BtuUnit                               Meter  115
      AA(IAptr+10) = <eu.VentFans>      * BtuUnit                               Meter  116
      AA(IAptr+11) = <eu.Refrigeration> * BtuUnit                               Meter  117
      AA(IAptr+12) = <eu.Supplemental>  * BtuUnit                               Meter  118
      AA(IAptr+13) = <eu.DomHotWater>   * BtuUnit                               Meter  119
      AA(IAptr+14) = <eu.Exterior>      * BtuUnit                               Meter  120
      AA(IAptr+15) = <eu.Storage>       * BtuUnit                               Meter  121
c                                                                               Meter  122
      AA(IAptr+22) = <me.TDVsrc>                                                Meter  123
c                                                                               Meter  124
c                                                                               Meter  125
c ============ DESIGN CALCULATIONS ============================================ Meter  126
      CASE (110)                                                                Meter  127
c                                                                               Meter  128
c                                                                               Meter  129
c ============ ATTACHMENTS ==================================================== Meter  130
c                                                                               Meter  131
c              Initial attachments                                              Meter  132
      CASE (201)                                                                Meter  133
c              Convert energy and demand unit indexes from rounded real         Meter  134
c              to integer                                                       Meter  135
        <me:UNIT-INDEX> = INT(<me:UNIT-REAL>)                                   Meter  136
        <me:DEM-INDEX>  = INT(<me:DEM-REAL>)                                    Meter  137
c              Invert the Btu/Unit for reports                                  Meter  138
        <me:BTU/UNIT> = 1.0 / <me:BTU/UNIT>                                     Meter  139
c              Count the number of interior and exterior misc loads             Meter  140
        DO  II=1,10                                                             Meter  141
          IF (<me:INT-BTU/HR> .eq. 0.)  Exit                                    Meter  142
          <me;NumIntLoads> = II                                                 Meter  143
          <me:INT-SCH>     = Jsched(<me:INT-SCH>)                               Meter  144
        ENDDO                                                                   Meter  145
        DO  II=1,10                                                             Meter  146
          IF (<me:EXT-BTU/HR> .eq. 0.)  Exit                                    Meter  147
          <me;NumExtLoads> = II                                                 Meter  148
          <me:EXT-SCH>     = Jsched(<me:EXT-SCH>)                               Meter  149
        ENDDO                                                                   Meter  150
c              Convert parent number to pointer                                 Meter  151
        <me:TRUNK-METER> = Jcomponent(13, <me:TRUNK-METER>)                     Meter  152
c                                                                               Meter  153
c              Create nodes                                                     Meter  154
      CASE (203)                                                                Meter  155
        Keu = NewEndUse(Jme)                                                    Meter  156
c              Supply and demand nodes                                          Meter  157
        <me;DemandNode> = NewNode(1, Jme,Jme,Jme,<me:TRUNK-METER>,              Meter  158
     &                                                    11,2,Keu, 1.)         Meter  159
        <me;SupplyNode> = NewNode(1, Jme,Jme,Jme,0,       11,1,Keu, 1.)         Meter  160
c                                                                               Meter  161
c              Links, lists                                                     Meter  162
      CASE (205)                                                                Meter  163
        CALL ListNodes(<me;Nodes>, 0,0,Jme,0, 0,0)                              Meter  164
c                                                                               Meter  165
c              Histories                                                        Meter  166
      CASE (208)                                                                Meter  167
c              Demand history                                                   Meter  168
        <me;DemandHsty> = NewHistory(Jme,0,Jme, <md;Xnode>, 0,                  Meter  169
     &                      0, 0, 1.,                                           Meter  170
     &                      <#md.Load>, <sp:ERROR-LOAD>, 2,                     Meter  171
     &                      0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0)             Meter  172
c                                                                               Meter  173
c              Dump pointers                                                    Meter  174
      CASE (210)                                                                Meter  175
        IF (<me;Previous> .EQ. 0)  WRITE (IOUTPT, 9201)                         Meter  176
        WRITE (IOUTPT, 9202)  (<me:NAME>,II=1,8),                               Meter  177
     &    Jme, Kms, Kmd                                                         Meter  178
c                                                                               Meter  179
c                                                                               Meter  180
      END SELECT  ! Mode                                                        Meter  181
c                                                                               Meter  182
      RETURN                                                                    Meter  183
c                                                                               Meter  184
c              Message formats                                                  Meter  185
 9201 FORMAT(/' METERs                                 Jme       Kms'  ,        Meter  186
     &'       Kmd'                                                     /        Meter  187
     &1x,32('-'),3('  --------')                                       )        Meter  188
 9202 FORMAT(1x,8A4,3I10                                               )        Meter  189
      END                                                                       Meter  190
      SUBROUTINE Meter_Elec(Mode, Knx)                                          MeterE   2
c                                                                               MeterE   3
c              Simulates an electric meter                                      MeterE   4
c                                                                               MeterE   5
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON  /TDVdat/ NameTDV, TDVmax(3), TDVmin(3), TDVavg(3),                /TDVdat/ 2
     &                 TDVsrc(3,8760), KtvTDV2(4)                               /TDVdat/ 3
      Character        NameTDV*4                                                /TDVdat/ 4
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
c                                                                               MeterE  13
      DATA IdNode /4H$Kno/                                                      /IdNode/ 2
c                                                                               MeterE  15
c                                                                               MeterE  16
      IF (<nx;Ident> .EQ. IdNode)  THEN                                         MeterE  17
        Jme = <nx;Component>                                                    MeterE  18
      ELSE                                                                      MeterE  19
        Jme = Knx                                                               MeterE  20
      ENDIF                                                                     MeterE  21
c                                                                               MeterE  22
      Kms = <me;SupplyNode>            ! supply node                            MeterE  23
      Kmd = <me;DemandNode>            ! demand node                            MeterE  24
c                                                                               MeterE  25
      SELECT CASE (Mode)                                                        MeterE  26
c                                                                               MeterE  27
c                                                                               MeterE  28
c ============ HOURLY INITIALIZATION ========================================== MeterE  29
      CASE (10)                                                                 MeterE  30
c                                                                               MeterE  31
      CALL ZeroAA(<#me.HrZeroStart..>, <#me.HrZeroEnd....>)                     MeterE  32
c              calculate miscellaneous loads attached directly to meters        MeterE  33
c              interior                                                         MeterE  34
      Nmisc = <me;NumIntLoads>                                                  MeterE  35
      DO  II=1,Nmisc                                                            MeterE  36
        IE          = <me:INT-EU>                                               MeterE  37
        <me;Meters> = <me;Meters> + <me:INT-KW> * SchVal(<me:INT-SCH>)          MeterE  38
      ENDDO                                                                     MeterE  39
c              exterior                                                         MeterE  40
      Nmisc = <me;NumExtLoads>                                                  MeterE  41
      DO  II=1,Nmisc                                                            MeterE  42
        IE          = <me:EXT-EU>                                               MeterE  43
        <me;Meters> = <me;Meters> + <me:EXT-KW>*SchVal(<me:EXT-SCH>)            MeterE  44
      ENDDO                                                                     MeterE  45
c                                                                               MeterE  46
c              default equip-ctrl sequence                                      MeterE  47
      <me;EquipCtrl>    = <me:EQUIP-CTRL>                                       MeterE  48
      <me;CtrlPriority> = 0.                                                    MeterE  49
c                                                                               MeterE  50
c              Index into time-dependent valuation data                         MeterE  51
c              TDV(I,J)                                                         MeterE  52
c                    ^  Hour of year (1-8760)                                   MeterE  53
c                  1    Electric kBtu/kWh   source/site multiplier              MeterE  54
c                  2    Gas      kBtu/Therm   "                                 MeterE  55
c                  3    Propane  kBtu/Therm   "                                 MeterE  56
      IF (ITDV .gt. 0)  THEN                                                    MeterE  57
        iYrHr = (IDOY-1)*24 + IHR                                               MeterE  58
c              Source multiplier for time-dependent valuation, kBtu/kWh         MeterE  59
        <me.TDVsrc> = TDVsrc(1,iYrHr)                                           MeterE  60
      ENDIF                                                                     MeterE  61
c                                                                               MeterE  62
c                                                                               MeterE  63
c ============ HOURLY OPERATION =============================================== MeterE  64
      CASE (31)                                                                 MeterE  65
c                                                                               MeterE  66
c              Supply-side calculations                                         MeterE  67
c              Get loads from demanders                                         MeterE  68
      CALL MeterNode(Kms, <md.Load>)                                            MeterE  69
c                                                                               MeterE  70
c              Transformer loss                                                 MeterE  71
      IF (<me;DesignLoss> .EQ.  0.)  THEN                                       MeterE  72
        <me;Loss> = 0.                                                          MeterE  73
      ELSE                                                                      MeterE  74
        PLR       = MIN(1., <md.Load> / <me:TRANS-SIZE>)                        MeterE  75
        <me;Loss> = <me;DesignLoss> * Curve(Jme,<me:LOSS-FPLR>,PLR,PLR)         MeterE  76
        <md.Load> = <md.Load> + <me;Loss>                                       MeterE  77
      ENDIF                                                                     MeterE  78
c                                                                               MeterE  79
c              Set iteration flag in parent                                     MeterE  80
      CALL CnvgCheck(2, <me;DemandHsty>)                                        MeterE  81
c                                                                               MeterE  82
c                                                                               MeterE  83
c ============ REPORT CREATION ================================================ MeterE  84
      CASE (50)                                                                 MeterE  85
c                                                                               MeterE  86
c              Create the end-use statistics blocks                             MeterE  87
      <me;s3> = NewStat3(<me;DemandNode>)                                       MeterE  88
      IF (ITDV .ne. 0)  <me;s11> = NewStat11(<me;DemandNode>)                   MeterE  89
                                                                                MeterE  90
c              and the "F" report                                               MeterE  91
      IF (IREPRT(3,21) .GT. 0  .and.  <me:REPORT> .NE. 0)  THEN                 MeterE  92
        Ks1 = NewStat1(Jme, <+me;Loss>, 1, 1.)  ! transformer loss              MeterE  93
        <me;PS-F> = NewReport_PSF(<me;s3>, Ks1, <me;s11>)                       MeterE  94
      ENDIF                                                                     MeterE  95
c              if report PS-B specified, create the statistics block            MeterE  96
      IF (IREPRT(3,17) .GT. 0)                                                  MeterE  97
     &  Ks4 = NewStat4(<me;s3>)                                                 MeterE  98
c                                                                               MeterE  99
c                                                                               MeterE 100
c ============ REPORT ORDER =================================================== MeterE 101
      CASE (52)                                                                 MeterE 102
c                                                                               MeterE 103
      Call Report_PSF(Mode, <me;PS-F>)                                          MeterE 104
c                                                                               MeterE 105
c                                                                               MeterE 106
c ============ HOURLY REPORTS - HOURLY DATA =================================== MeterE 107
      CASE (62)                                                                 MeterE 108
c                                                                               MeterE 109
c              Hourly-report variables                                          MeterE 110
      IF (<me;HourRepBuf> .EQ. 0)  RETURN                                       MeterE 111
c                                                                               MeterE 112
      IAptr        = <me;HourRepBuf>-1                                          MeterE 113
      AA(IAptr+ 1) = <md.Load>                                                  MeterE 114
      AA(IAptr+ 2) = <me;Loss>                                                  MeterE 115
      AA(IAptr+ 3) = <eu.Lights>                                                MeterE 116
      AA(IAptr+ 4) = <eu.TaskLights>                                            MeterE 117
      AA(IAptr+ 5) = <eu.Equipment>                                             MeterE 118
      AA(IAptr+ 6) = <eu.Heating>                                               MeterE 119
      AA(IAptr+ 7) = <eu.Cooling>                                               MeterE 120
      AA(IAptr+ 8) = <eu.HeatRejection>                                         MeterE 121
      AA(IAptr+ 9) = <eu.Auxiliary>                                             MeterE 122
      AA(IAptr+10) = <eu.VentFans>                                              MeterE 123
      AA(IAptr+11) = <eu.Refrigeration>                                         MeterE 124
      AA(IAptr+12) = <eu.Supplemental>                                          MeterE 125
      AA(IAptr+13) = <eu.DomHotWater>                                           MeterE 126
      AA(IAptr+14) = <eu.Exterior>                                              MeterE 127
      AA(IAptr+15) = <eu.Storage>                                               MeterE 128
c                                                                               MeterE 129
      AA(IAptr+22) = <me.TDVsrc>                                                MeterE 130
c                                                                               MeterE 131
c                                                                               MeterE 132
c ============ DESIGN CALCULATIONS ============================================ MeterE 133
      CASE (110)                                                                MeterE 134
c                                                                               MeterE 135
c              Transformer loss                                                 MeterE 136
      <me;DesignLoss> = <me:TRANS-SIZE> * <me:TRANS-LOSS>                       MeterE 137
c                                                                               MeterE 138
c                                                                               MeterE 139
c ============ ATTACHMENTS ==================================================== MeterE 140
c                                                                               MeterE 141
c              Initial attachments                                              MeterE 142
      CASE (201)                                                                MeterE 143
c              Convert energy and demand unit indexes from rounded real         MeterE 144
c              to integer                                                       MeterE 145
        <me:UNIT-INDEX> = INT(<me:UNIT-REAL>)                                   MeterE 146
        <me:DEM-INDEX>  = INT(<me:DEM-REAL>)                                    MeterE 147
c              Count the number of interior and exterior misc loads             MeterE 148
        DO  II=1,10                                                             MeterE 149
          IF (<me:INT-KW> .eq. 0.)  Exit                                        MeterE 150
          <me;NumIntLoads> = II                                                 MeterE 151
          <me:INT-SCH>     = Jsched(<me:INT-SCH>)                               MeterE 152
        ENDDO                                                                   MeterE 153
        DO  II=1,10                                                             MeterE 154
          IF (<me:EXT-KW> .eq. 0.)  Exit                                        MeterE 155
          <me;NumExtLoads> = II                                                 MeterE 156
          <me:EXT-SCH>     = Jsched(<me:EXT-SCH>)                               MeterE 157
        ENDDO                                                                   MeterE 158
c              Convert parent number to pointer                                 MeterE 159
        <me:TRUNK-METER> = Jcomponent(13, <me:TRUNK-METER>)                     MeterE 160
        <me:LOSS-FPLR>  = Jcurve(<me:LOSS-FPLR>)                                MeterE 161
c                                                                               MeterE 162
c              Create nodes                                                     MeterE 163
      CASE (203)                                                                MeterE 164
        Keu = NewEndUse(Jme)                                                    MeterE 165
c              Supply and demand nodes                                          MeterE 166
        <me;DemandNode> = NewNode(1, Jme,Jme,Jme,<me:TRUNK-METER>,              MeterE 167
     &                                                  11,2,Keu, 1.)           MeterE 168
        <me;SupplyNode> = NewNode(1, Jme,Jme,Jme,0,     11,1,Keu, 1.)           MeterE 169
c                                                                               MeterE 170
c              Links, lists                                                     MeterE 171
      CASE (205)                                                                MeterE 172
        CALL ListNodes(<me;Nodes>, 0,0,Jme,0, 0,0)                              MeterE 173
c                                                                               MeterE 174
c              Histories                                                        MeterE 175
      CASE (208)                                                                MeterE 176
c              Demand history                                                   MeterE 177
        <me;DemandHsty> = NewHistory(Jme,0,Jme, <md;Xnode>, 0,                  MeterE 178
     &                      0, 0, 1.,                                           MeterE 179
     &                      <#md.Load>, <sp:ERROR-LOAD>, 2,                     MeterE 180
     &                      0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0)             MeterE 181
c                                                                               MeterE 182
c              Dump pointers                                                    MeterE 183
      CASE (210)                                                                MeterE 184
        IF (<me;Previous> .EQ. 0)  WRITE (IOUTPT, 9201)                         MeterE 185
        WRITE (IOUTPT, 9202)  (<me:NAME>,II=1,8),                               MeterE 186
     &    Jme, Kms, Kmd                                                         MeterE 187
c                                                                               MeterE 188
c                                                                               MeterE 189
      END SELECT   ! Mode                                                       MeterE 190
c                                                                               MeterE 191
      RETURN                                                                    MeterE 192
c                                                                               MeterE 193
c              Message formats                                                  MeterE 194
 9201 FORMAT(/' METERs                                 Jme       Kms'  ,        MeterE 195
     &'       Kmd'                                                     /        MeterE 196
     &1x,32('-'),3('  --------')                                       )        MeterE 197
 9202 FORMAT(1x,8A4,3I10)                                                       MeterE 198
      END                                                                       MeterE 199
      SUBROUTINE MeterNode(Knode, Q)                                            MLoads   2
c                                                                               MLoads   3
c              Sums a list of meter Xnodes into a meter node.                   MLoads   4
c                                                                               MLoads   5
c              Knode   Pointer to the node                                      MLoads   6
c              Q       Net load                                                 MLoads   7
c                                                                               MLoads   8
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      DIMENSION  EndUse(18)                                                     /EndUse/ 2
      DATA       NumEndUses /18/                                                /EndUse/ 3
c                                                                               MLoads  12
      LOGICAL    EndUses                                                        MLoads  13
c                                                                               MLoads  14
      Kmx = Knode                      ! node to be summed                      MLoads  15
      Kli = <mx;Xnode>                 ! list of Xnodes                         MLoads  16
c                                                                               MLoads  17
      Q = 0.                                                                    MLoads  18
      IF (<mx;EndUse> .GT. 0)  THEN                                             MLoads  19
        EndUses = .TRUE.                                                        MLoads  20
        DO IE=1,NumEndUses                                                      MLoads  21
          EndUse(IE) = 0.                                                       MLoads  22
        ENDDO                                                                   MLoads  23
      ELSE                                                                      MLoads  24
        EndUses = .FALSE.                                                       MLoads  25
      ENDIF                                                                     MLoads  26
c                                                                               MLoads  27
c              Loop thru all Xnodes in the list and get properties              MLoads  28
      IF (Kli .EQ. 0)  GOTO 100                                                 MLoads  29
      NumItems = <li;NumItems>                                                  MLoads  30
      DO  LI=1,NumItems                                                         MLoads  31
        Kmx = <li;List>                         ! Xnode                         MLoads  32
        IF (<mx.Load> .NE. 0.)  THEN                                            MLoads  33
          Qnode = <mx.Load> * <mx;Multiplier>   ! Xnode load                    MLoads  34
          Q     = Q + Qnode                                                     MLoads  35
c              Allocate load to end-use categories                              MLoads  36
          IF (EndUses  .AND.  Qnode .NE. 0.)  THEN                              MLoads  37
            IF (<mx;EndUse> .LE. NumEndUses)  THEN                              MLoads  38
              EndUse(<mx;EndUse>) = EndUse(<mx;EndUse>) + Qnode                 MLoads  39
            ELSE  ! node has multiple end-uses                                  MLoads  40
              Keu = <mx;EndUse>                                                 MLoads  41
              DO IE=1,NumEndUses                                                MLoads  42
                EndUse(IE) = EndUse(IE)                                         MLoads  43
     &                     + Qnode*<eu.1/TotalEU> * <eu.EndUses>                MLoads  44
              ENDDO                                                             MLoads  45
            ENDIF                                                               MLoads  46
          ENDIF                                                                 MLoads  47
        ENDIF                                                                   MLoads  48
      ENDDO                                                                     MLoads  49
c              Include demands that were summed directly into the               MLoads  50
c              end-use categories of the meter component (loads and             MLoads  51
c              systems modules)                                                 MLoads  52
  100 Kmx = Knode                                                               MLoads  53
      Jme = <mx;Component>                                                      MLoads  54
      DO  IE=1,NumEndUses                                                       MLoads  55
        Q          = Q          + <me;Meters>                                   MLoads  56
        EndUse(IE) = EndUse(IE) + <me;Meters>                                   MLoads  57
      ENDDO                                                                     MLoads  58
c                                                                               MLoads  59
c              Calc end-use breakdown                                           MLoads  60
      <mx.Load> = Q                                                             MLoads  61
      CALL EndUseCategories(Kmx, EndUse(1))                                     MLoads  62
c                                                                               MLoads  63
      RETURN                                                                    MLoads  64
      END                                                                       MLoads  65
      SUBROUTINE Elec_EquipCtrl(Jec, Load, GenCap, LoadSatisfied)               EEqCtl   2
c                                                                               EEqCtl   3
c              Allocates a an electric load to a set of generators              EEqCtl   4
c              using a user-specified control sequence.                         EEqCtl   5
c                                                                               EEqCtl   6
c              Control can be specified for up to 5 flow ranges.  The           EEqCtl   7
c              keywords and EDTT variables for each flow range are              EEqCtl   8
c              identical except for the number of the range (1-5); this         EEqCtl   9
c              routine uses the EDTT variables of the first range for           EEqCtl  10
c              all ranges.                                                      EEqCtl  11
c                                                                               EEqCtl  12
c              Jec            Pointer to equip-ctrl sequence                    EEqCtl  13
c              Load           Total load, either flow or thermal                EEqCtl  14
c              GenCap         Capacity of all active equipment                  EEqCtl  15
c              LoadSatisfied  Flag to indicate whether equipment can            EEqCtl  16
c                               fully handle load                               EEqCtl  17
c                                                                               EEqCtl  18
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /EqCtrl/ LengthLoadRange, xEqCtrl                                 /EqCtrl/ 2
c                                                                               EEqCtl  22
      REAL      Load, MeterKWh                                                  EEqCtl  23
      LOGICAL   LoadSatisfied                                                   EEqCtl  24
      DIMENSION CapMax(10)                                                      EEqCtl  25
c ??? not debugged ???                                                          EEqCtl  26
c                                                                               EEqCtl  27
c              total operating capacity enabled                                 EEqCtl  28
      GenCap   = 0.                                                             EEqCtl  29
c              load to be prorated to enabled equipment                         EEqCtl  30
      ProrateLoad = Load                                                        EEqCtl  31
      ProrateCap  = 0.                                                          EEqCtl  32
c              LoadSatisfied is true if the total capacity that                 EEqCtl  33
c              is enabled is greater than the electric load                     EEqCtl  34
      LoadSatisfied = .FALSE.                                                   EEqCtl  35
c                                                                               EEqCtl  36
c              find the correct range                                           EEqCtl  37
      NumLoadRanges = <ec;NumLoadRanges>                                        EEqCtl  38
      DO  Nrange=1,NumLoadRanges                                                EEqCtl  39
        IR = Nrange                                                             EEqCtl  40
        IF (<ec:FLOWS-THRU> .NE. 0.)  THEN                                      EEqCtl  41
c              user-specified load range                                        EEqCtl  42
          CapRange = <ec:FLOWS-THRU>                                            EEqCtl  43
        ELSE                                                                    EEqCtl  44
c              default range to equipment capacity                              EEqCtl  45
          NumEquipInRange = <ec;NumEquipInRng>  ! using IR index                EEqCtl  46
          CapRange = 0.                                                         EEqCtl  47
          IIstart = (IR-1)*LengthLoadRange                                      EEqCtl  48
          DO  Neq=1,NumEquipInRange                                             EEqCtl  49
            II       = IIstart + Neq                                            EEqCtl  50
            Knx      = <ec;EQUIP>                                               EEqCtl  51
            CapRange = CapRange + MIN(<nx.Load>,<ec;EQUIP-MAX-LD>)              EEqCtl  52
          ENDDO                                                                 EEqCtl  53
c              include meter output                                             EEqCtl  54
          IF (<ec;METER-SEQ> .GT. 0)  THEN                                      EEqCtl  55
            IF (<ec:METER-MAX-LD> .NE. 0.)  THEN                                EEqCtl  56
              CapRange = CapRange + <ec:METER-MAX-LD>                           EEqCtl  57
            ELSE                                                                EEqCtl  58
              CapRange = 1.E10                                                  EEqCtl  59
            ENDIF                                                               EEqCtl  60
          ENDIF                                                                 EEqCtl  61
        ENDIF    ! CapRange calc                                                EEqCtl  62
        IF (Load .LE. CapRange)  EXIT                                           EEqCtl  63
      ENDDO  ! Nrange                                                           EEqCtl  64
c                                                                               EEqCtl  65
c              correct range has been found - get maximum sequence number       EEqCtl  66
      NumEquipInRange = <ec;NumEquipInRng>  ! using IR index                    EEqCtl  67
      MaxSequenceNum  = <ec;MaxSeqNum>      ! using IR index                    EEqCtl  68
      DO  Neq=1,NumEquipInRange                                                 EEqCtl  69
        CapMax(Neq) = 0.                                                        EEqCtl  70
      ENDDO                                                                     EEqCtl  71
c                                                                               EEqCtl  72
c              Loop thru and turn on enough equipment to satisfy load.  If      EEqCtl  73
c              any unit of a given sequence number is activated, all            EEqCtl  74
c              equipment having the same sequence number must be activated,     EEqCtl  75
c              even if the load has already been satisfied.                     EEqCtl  76
      IIstart = (IR-1)*LengthLoadRange                                          EEqCtl  77
      DO  NumSeq=1,MaxSequenceNum                                               EEqCtl  78
c              maximum capacity of all equipment having this sequence number    EEqCtl  79
        CapSeq = 0.                                                             EEqCtl  80
        DO  Neq=1,NumEquipInRange                                               EEqCtl  81
          II = IIstart + Neq                                                    EEqCtl  82
          IF (<ec;EQUIP-SEQ> .EQ. NumSeq)  THEN                                 EEqCtl  83
            Knx     = <ec;EQUIP>                                                EEqCtl  84
            KxfLast = Knx                                                       EEqCtl  85
c              limit maximum output                                             EEqCtl  86
            CapMax(Neq) = MIN(<nx.Load>, <ec;EQUIP-MAX-LD>)                     EEqCtl  87
            CapSeq      = CapSeq + CapMax(Neq)                                  EEqCtl  88
          ENDIF                                                                 EEqCtl  89
        ENDDO                                                                   EEqCtl  90
c                                                                               EEqCtl  91
c              check to see if a meter is at this sequence number               EEqCtl  92
        IF (<ec;METER-SEQ> .EQ. NumSeq)  THEN                                   EEqCtl  93
c                 maximum meter output                                          EEqCtl  94
          IF (<ec:METER-MAX-LD> .GT. 0.)  THEN                                  EEqCtl  95
            CapMeter = <ec:METER-MAX-LD>                                        EEqCtl  96
          ELSE                                                                  EEqCtl  97
            CapMeter = 1.E10                                                    EEqCtl  98
          ENDIF                                                                 EEqCtl  99
c              meter will supply as much of the remaining load as it can        EEqCtl 100
          MeterKWH    = MIN(CapMeter, Load-ProrateCap)                          EEqCtl 101
          ProrateFlow = ProrateFlow - MeterKWH                                  EEqCtl 102
          GenCap      = GenCap + CapMeter                                       EEqCtl 103
          ELSE                                                                  EEqCtl 104
        ENDIF  ! meter                                                          EEqCtl 105
c                                                                               EEqCtl 106
c              increment total generator capacity and proration capacity by     EEqCtl 107
c              new capacity to be prorated                                      EEqCtl 108
        GenCap     = GenCap     + CapSeq                                        EEqCtl 109
        ProrateCap = ProrateCap + CapSeq                                        EEqCtl 110
c              see if equipment activated so far can handle the load            EEqCtl 111
        IF (GenCap .GT. Load)  THEN                                             EEqCtl 112
          LoadSatisfied = .TRUE.                                                EEqCtl 113
          EXIT                                                                  EEqCtl 114
        ENDIF                                                                   EEqCtl 115
      ENDDO  ! NumSeq                                                           EEqCtl 116
c                                                                               EEqCtl 117
c              Now prorate the load to all activated equipment.  Load to        EEqCtl 118
c              be prorated cannot be greater than the proration capacity        EEqCtl 119
      IF (ProrateCap .GT. 0.)  THEN                                             EEqCtl 120
        Prorate = MIN(1., ProrateLoad/ProrateCap)                               EEqCtl 121
        DO  Neq=1,NumEquipInRange                                               EEqCtl 122
          II        = IIstart + Neq                                             EEqCtl 123
          Knx       = <ec;EQUIP>                                                EEqCtl 124
          <nx.Load> = CapMax(Neq) * Prorate                                     EEqCtl 125
          IF (<nx.Load> .GT. 0.)  THEN                                          EEqCtl 126
            <nx.RunFrac> = 1.                                                   EEqCtl 127
          ELSE                                                                  EEqCtl 128
            <nx.RunFrac> = 0.                                                   EEqCtl 129
          ENDIF                                                                 EEqCtl 130
        ENDDO                                                                   EEqCtl 131
      ENDIF                                                                     EEqCtl 132
c                                                                               EEqCtl 133
      RETURN                                                                    EEqCtl 134
      END                                                                       EEqCtl 135
      SUBROUTINE ProcessAlgs(Mode, Knx)                                         QpAlg    2
c                                                                               QpAlg    3
c              Selects the correct process load algorithm                       QpAlg    4
c                                                                               QpAlg    5
c              Knx  Pointer to the component or one of its nodes                QpAlg    6
c                                                                               QpAlg    7
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
c                                                                               QpAlg   10
      DATA IdNode /4H$Kno/                                                      /IdNode/ 2
c              Knx may point either to the component or to one of the           QpAlg   12
c              component's nodes                                                QpAlg   13
      IF (<nx;Ident> .EQ. IdNode)  THEN                                         QpAlg   14
        Jna = <nx;Component>                                                    QpAlg   15
      ELSE                                                                      QpAlg   16
        Jna = Knx                                                               QpAlg   17
      ENDIF                                                                     QpAlg   18
                                                                                QpAlg   19
      SELECT CASE (<na:ALGORITHM>)                                              QpAlg   20
                                                                                QpAlg   21
      CASE (1)  ! Hot and chilled water                                         QpAlg   22
        Call Process_Fluid(Mode, Jna)                                           QpAlg   23
                                                                                QpAlg   24
      CASE (2)  ! Domestic hot water                                            QpAlg   25
        Call Process_DHW(Mode, Jna)                                             QpAlg   26
                                                                                QpAlg   27
      CASE (3)                                                                  QpAlg   28
        Call Process_Refg(Mode, Jna)                                            QpAlg   29
                                                                                QpAlg   30
      CASE (4)  ! Electric and fuel                                             QpAlg   31
c       Call Process_Meter(Mode, Jna)                                           QpAlg   32
                                                                                QpAlg   33
      END SELECT                                                                QpAlg   34
                                                                                QpAlg   35
      RETURN                                                                    QpAlg   36
      END                                                                       QpAlg   37
      SUBROUTINE Process_Fluid(Mode, Knx)                                       QpFld    2
c                                                                               QpFld    3
c              Simulates a process load on a hot or chilled water loop          QpFld    4
c                                                                               QpFld    5
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /Attach/ NameAttachments(8,100,3), NumRowsOfAttachments           /Attach/ 2
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /MISCD / TEMPS(4,4096),CONS(5),TEMPSL(4096),                      /MISCD/  2
     1                 BLDGQH,BLDGQC,BLDGQL,BLDGP,BPMULT,                       /MISCD/  3
     2                 DBTMIN,DBTMAX,WMIN,WMAX,NSPZ(4096),                      /MISCD/  4
     3                 DQ, DTP, DTR, DTS, FPI, PLRCC , POM, TC2, TDM,           /MISCD/  5
     4                 TRA,WCOL,WCOLM,WMM,YPI,KWBTU,BTUKW,UNFILD,Unusedm        /MISCD/  6
      REAL             KWBTU                                                    /MISCD/  7
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               QpFld   15
      DATA IdNode /4H$Kno/                                                      /IdNode/ 2
c                                                                               QpFld   17
      INTEGER  Xfi, Xfo, ZP1, rH                                                QpFld   18
      REAL     Msupply, MsupplyMax                                              QpFld   19
c                                                                               QpFld   20
      IF (<nx;Ident> .EQ. IdNode)  THEN                                         QpFld   21
        Jpq = <nx;Component>                                                    QpFld   22
      ELSE                                                                      QpFld   23
        Jpq = Knx                                                               QpFld   24
      ENDIF                                                                     QpFld   25
c                                                                               QpFld   26
      Jpl = <pq:LOOP>                    ! Central plant                        QpFld   27
      Kfi = <pq;SupplyInNode>            ! Fluid inlet                          QpFld   28
      Xfi = <fi;Xnode>                   ! Xfaced inlet                         QpFld   29
      Kfo = <pq;SupplyOutNode>           ! Fluid outlet                         QpFld   30
      Xfo = <fo;Xnode>                   ! Xfaced outlet                        QpFld   31
      Khx = <pq;HX>                      ! Heat-exchanger                       QpFld   32
c                                                                               QpFld   33
      SELECT CASE (Mode)                                                        QpFld   34
c                                                                               QpFld   35
c                                                                               QpFld   36
c ============ HOURLY INITIALIZATION ========================================== QpFld   37
      CASE (10)                                                                 QpFld   38
c                                                                               QpFld   39
      CALL ZeroAA(<#pq~HrZeroStart..>, <#pq~HrZeroEnd....>)                     QpFld   40
c                                                                               QpFld   41
c              Process load                                                     QpFld   42
      <pq.PLRprocess> = MAX(0., SchVal(<pq:PROCESS-SCH>))                       QpFld   43
      IF (<pq.PLRprocess> .GT. 0.)  THEN                                        QpFld   44
        <pq.Qprocess> = <pq;Load> * <pq.PLRprocess>                             QpFld   45
        <fo.RunFrac>  = 1.                                                      QpFld   46
        <fi.RunFrac>  = 1.                                                      QpFld   47
        <fo.CtrlMode> = 2                                                       QpFld   48
        <fi.CtrlMode> = 2                                                       QpFld   49
        IF (<pq:PROCESS-DT> .EQ. 0.)  THEN                                      QpFld   50
c              uniform temperature load                                         QpFld   51
          <pq.DemTi> = <pq:PROCESS-T>                                           QpFld   52
        ELSE                                                                    QpFld   53
c              non-uniform temperature load                                     QpFld   54
          <pq.DemTi> = <pq:PROCESS-T> + <pq:PROCESS-DT>*<pq.PLRprocess>         QpFld   55
        ENDIF                                                                   QpFld   56
      ELSE                                                                      QpFld   57
        <pq.Qprocess> = 0.                                                      QpFld   58
        <fo.RunFrac>  = 0.                                                      QpFld   59
        <fi.RunFrac>  = 0.                                                      QpFld   60
        <fo.CtrlMode> = 0                                                       QpFld   61
        <fi.CtrlMode> = 0                                                       QpFld   62
      ENDIF                                                                     QpFld   63
c                                                                               QpFld   64
c                                                                               QpFld   65
c ============ HOURLY SIMULATION ============================================== QpFld   66
      CASE (30,31)                                                              QpFld   67
c                                                                               QpFld   68
      <pq.Qoverload> = 0.                                                       QpFld   69
c                                                                               QpFld   70
c              Skip if no process load                                          QpFld   71
      IF (<pq.Qprocess> .EQ. 0.)  THEN                                          QpFld   72
        <fo.Moutlet> = 0.                                                       QpFld   73
        <fo.Mreqd>   = 0.                                                       QpFld   74
        GOTO 3290                                                               QpFld   75
      ENDIF                                                                     QpFld   76
c                                                                               QpFld   77
c              Maximum possible supply flow                                     QpFld   78
      dPmax      = MAX(0., <Xfi.Pinlet> - <Xfo.Poutlet>)                        QpFld   79
      MsupplyMax = FluidFlow(<pq;SupplyProp>, dPmax)                            QpFld   80
c              adjust for flow-limiting balance valve                           QpFld   81
      MsupplyMax = MIN(<pq;MaxMsupply>, MsupplyMax)                             QpFld   82
c                                                                               QpFld   83
c              Required supply temperature at reset flow                        QpFld   84
      CALL HX(2, Khx, <pq.Qprocess>,                                            QpFld   85
     &                  <pq;Mreset>, <fi.Treqd>, xSupTo,                        QpFld   86
     &                           1., <pq.DemTi>, xDemTo)                        QpFld   87
c                                                                               QpFld   88
      IF (MsupplyMax .EQ. 0.)  THEN                                             QpFld   89
c              no load possible                                                 QpFld   90
        <pq.Qoverload> = <pq.Qprocess>                                          QpFld   91
        <fo.Moutlet>   = 0.                                                     QpFld   92
c              set reqd flow to tentative value in hope plant responds          QpFld   93
        <fo.Mreqd>     = MAX(MsupplyMax, <pq;Mreset>)                           QpFld   94
      ELSE                                                                      QpFld   95
c              Required supply temperature at maximum flow                      QpFld   96
        CALL HX(2, Khx, <pq.Qprocess>,                                          QpFld   97
     &                     MsupplyMax,  SupTiReqd, xSupTo,                      QpFld   98
     &                             1., <pq.DemTi>, xDemTo)                      QpFld   99
c                                                                               QpFld  100
c              Actual performance.  ModeHX 1=heating, 2=cooling                 QpFld  101
        ModeHX = <pq;ModeHX>                                                    QpFld  102
        IF ((ModeHX .EQ. 1  .AND.  SupTiReqd .LE. <Xfi.Tinlet>)  .OR.           QpFld  103
     &      (ModeHX .EQ. 2  .AND.  SupTiReqd .GE. <Xfi.Tinlet>))  THEN          QpFld  104
c              Load can be satisfied                                            QpFld  105
          CALL HX(3, Khx, <pq.Qprocess>,                                        QpFld  106
     &                     <fo.Moutlet>, <Xfi.Tinlet>, xSupTo,                  QpFld  107
     &                               1.,   <pq.DemTi>, xDemTo)                  QpFld  108
          <fo.Mreqd> = <fo.Moutlet>                                             QpFld  109
        ELSEIF ((ModeHX .EQ. 1 .AND. <Xfi.Tinlet> .GT. <pq.DemTi>)  .OR.        QpFld  110
     &          (ModeHX .EQ. 2 .AND. <Xfi.Tinlet> .LT. <pq.DemTi>)) THEN        QpFld  111
c              Load can't be fully satisfied, take what we can get              QpFld  112
          CALL HX(1, Khx, Qfloat,                                               QpFld  113
     &                MsupplyMax, <Xfi.Tinlet>, xSupTo,                         QpFld  114
     &                        1.,   <pq.DemTi>, xDemTo)                         QpFld  115
          <pq.Qoverload> = <pq.Qprocess> - Qfloat                               QpFld  116
          <fo.Moutlet>   = MsupplyMax                                           QpFld  117
c              set reqd flow to tentative value in hope plant responds          QpFld  118
          IF (MsupplyMax .GE. <pq;Mreset>)  THEN                                QpFld  119
            <fo.Mreqd> = MsupplyMax                                             QpFld  120
          ELSE                                                                  QpFld  121
            CALL HX(2, Khx, <pq.Qprocess>,                                      QpFld  122
     &                       <pq;Msupply>,  SupTiReqd, xSupTo,                  QpFld  123
     &                                 1., <pq.DemTi>, xDemTo)                  QpFld  124
            IF ((ModeHX .EQ. 1 .AND. SupTiReqd .LE. <Xfi.Tinlet>) .OR.          QpFld  125
     &          (ModeHX .EQ. 2 .AND. SupTiReqd .GE. <Xfi.Tinlet>))  THEN        QpFld  126
              CALL HX(3, Khx, <pq.Qprocess>,                                    QpFld  127
     &                           <fo.Mreqd>, <Xfi.Tinlet>, xSupTo,              QpFld  128
     &                                   1.,   <pq.DemTi>, xDemTo)              QpFld  129
            <fo.Mreqd> = <fo.Mreqd> * (1.+<sp:ERROR-FLOW>)                      QpFld  130
            ELSE                                                                QpFld  131
              <fo.Mreqd> = <pq;Mreset>                                          QpFld  132
            ENDIF                                                               QpFld  133
          ENDIF                                                                 QpFld  134
        ELSE                                                                    QpFld  135
c              no load possible                                                 QpFld  136
          <pq.Qoverload> = <pq.Qprocess>                                        QpFld  137
          <fo.Moutlet>   = MsupplyMax                                           QpFld  138
c              set reqd flow to tentative value in hope plant responds          QpFld  139
          <fo.Mreqd>     = MAX(MsupplyMax, <pq;Mreset>)                         QpFld  140
        ENDIF  ! SupTiReqd                                                      QpFld  141
      ENDIF  ! MsupplyMax                                                       QpFld  142
c                                                                               QpFld  143
c              Adjust required flow for runfrac (currently, always 1.)          QpFld  144
      <fo.Mreqd> = <fo.Mreqd> / <fo.RunFrac>                                    QpFld  145
c                                                                               QpFld  146
c              Re-entry point for no load                                       QpFld  147
 3290 CONTINUE                                                                  QpFld  148
c                                                                               QpFld  149
c              2-way vs. 3-way valve                                            QpFld  150
      IF (<pq:CTRL-VALVE-TY> .EQ. 2)  THEN                                      QpFld  151
        <fo.Moutlet2> = <fo.Moutlet> * <fo.RunFrac>                             QpFld  152
      ELSE                                                                      QpFld  153
        <fo.Moutlet3> = MsupplyMax*<pl.RunFrac>                                 QpFld  154
      ENDIF                                                                     QpFld  155
      <fo.Moutlet> = <fo.Moutlet2> + <fo.Moutlet3>                              QpFld  156
c                                                                               QpFld  157
c              Net load and leaving temperature                                 QpFld  158
      Qnet = <pq.Qprocess> - <pq.Qoverload>                                     QpFld  159
      IF (<fo.Moutlet> .GT. 0.)  THEN                                           QpFld  160
        <fo.Toutlet> = <Xfi.Tinlet>+Qnet/(<pl.Btuh/GPM-F>*<fo.Moutlet>)         QpFld  161
      ELSE                                                                      QpFld  162
        <fo.Toutlet> = <Xfi.Tinlet>                                             QpFld  163
      ENDIF                                                                     QpFld  164
      <fo.Qoutlet> = <fo.Moutlet> * <pl.Btuh/GPM-F>                             QpFld  165
     &                            * (<fo.Toutlet>-<pl.Tref>)                    QpFld  166
c                                                                               QpFld  167
c              Supply inlet conditions                                          QpFld  168
      <fi.Minlet>  = <fo.Moutlet>                                               QpFld  169
      <fi.Minlet2> = <fo.Moutlet2>                                              QpFld  170
      <fi.Minlet3> = <fo.Moutlet3>                                              QpFld  171
      <fi.Qinlet>  = <fo.Qoutlet>                                               QpFld  172
c              required supply inlet conditions                                 QpFld  173
      <fi.Mreqd> = <fo.Mreqd>                                                   QpFld  174
      <fi.Preqd> = <Xfo.Preqd> + FluidDP(<pq;SupplyProp>, <fi.Mreqd>)           QpFld  175
      CALL CnvgCheck(1, <pq;SupplyHsty>)                                        QpFld  176
c                                                                               QpFld  177
c              Auxiliary power                                                  QpFld  178
      IF (<pq:AUX-KW> .EQ. 0.)  THEN                                            QpFld  179
        Qaux = 0.                                                               QpFld  180
      ELSE                                                                      QpFld  181
        SELECT CASE (<pq:AUX-MODE>)                                             QpFld  182
          CASE (1)  ! Always                                                    QpFld  183
            AuxKWh = <pq:AUX-KW>                                                QpFld  184
          CASE (2)  ! When on                                                   QpFld  185
            IF (<pq.Qprocess> .NE. 0.)  THEN                                    QpFld  186
              AuxKWh = <pq:AUX-KW>                                              QpFld  187
            ELSE                                                                QpFld  188
              AuxKWh = 0.                                                       QpFld  189
            ENDIF                                                               QpFld  190
          CASE (3)  ! When off                                                  QpFld  191
            IF (<pq.Qprocess> .EQ. 0.)  THEN                                    QpFld  192
              AuxKWh = <pq:AUX-KW>                                              QpFld  193
            ELSE                                                                QpFld  194
              AuxKWh = 0.                                                       QpFld  195
            ENDIF                                                               QpFld  196
          CASE (4)  ! Scheduled                                                 QpFld  197
            AuxKWh = <pq:AUX-KW> * SchVal(<pq:AUX-SCH>)                         QpFld  198
        END SELECT                                                              QpFld  199
        Kmd = <pq:AUX-METER>                                                    QpFld  200
        Kmx = <md;Xnode>                                                        QpFld  201
        IF (AuxKWh .GT. 0.)  THEN                                               QpFld  202
          IF (ABS(1. - <md.Elec>/AuxKWh) .GT. <sp:ERROR-LOAD>)                  QpFld  203
     &      <mx.IterFlag> = Jpq                                                 QpFld  204
        ELSE                                                                    QpFld  205
          IF (<md.Elec> .GT. 0.)  <mx.IterFlag> = Jpq                           QpFld  206
        ENDIF                                                                   QpFld  207
        <md.Elec> = AuxKWh                                                      QpFld  208
        Qaux      = AuxKWh * BtuKW                                              QpFld  209
      ENDIF  ! pq:AUX-KW                                                        QpFld  210
c                                                                               QpFld  211
c              Allocate process load to zone                                    QpFld  212
      IF (<pq:PROCESS-ZONE> .ne. 0)  THEN                                       QpFld  213
c              convective                                                       QpFld  214
        IF (<pq;QconvNode> .GT. 0)  THEN                                        QpFld  215
          Kex            = <pq;QconvNode>                                       QpFld  216
          <ex.Qextract>  = Qnet * <pq:CONVECTIVE>                               QpFld  217
     &                   - Qaux * <pq:AUX-CONVECTIV>                            QpFld  218
        ENDIF                                                                   QpFld  219
c              radiative                                                        QpFld  220
        IF (<pq;QradNode> .ne. 0)  THEN                                         QpFld  221
          Kex            = <pq;QradNode>                                        QpFld  222
          <ex.Qextract>  = Qnet * <pq:RADIATIVE>                                QpFld  223
     &                   - Qaux * <pq:AUX-RADIATIVE>                            QpFld  224
        ENDIF                                                                   QpFld  225
c              latent                                                           QpFld  226
        IF (<pq;QlatNode> .ne. 0)  THEN                                         QpFld  227
          Kex            = <pq;QlatNode>                                        QpFld  228
          <ex.MWextract> = Qnet * <pq:LATENT>                                   QpFld  229
     &                   - Qaux * <pq:AUX-LATENT>                               QpFld  230
          <ex.MWextract> = -<ex.MWextract> / 1061.                              QpFld  231
        ENDIF                                                                   QpFld  232
      ENDIF  ! pq:PROCESS-ZONE                                                  QpFld  233
c                                                                               QpFld  234
c                                                                               QpFld  235
c ============ STATISTICS - HOURLY DATA ======================================= QpFld  236
      CASE (42)                                                                 QpFld  237
c                                                                               QpFld  238
c              Check if sufficient supply available                             QpFld  239
      IF (<pq.Qoverload> .NE. 0.)  THEN                                         QpFld  240
        IF (<pq.OverloadHours> .EQ. 0)  THEN                                    QpFld  241
          CALL MSGSIM(-2,II,II,II,II)                                           QpFld  242
          WRITE (IOUTPT,9102)  (<pq:NAME>,II=1,8), IMO, IDAY, IHR               QpFld  243
        ENDIF                                                                   QpFld  244
        <pq.OverloadHours> = <pq.OverloadHours> + 1                             QpFld  245
      ENDIF                                                                     QpFld  246
c                                                                               QpFld  247
c                                                                               QpFld  248
c ============ REPORT CREATION ================================================ QpFld  249
      CASE (50)                                                                 QpFld  250
c                                                                               QpFld  251
c              statistics blocks                                                QpFld  252
      Kmd        = <pq:AUX-METER>                                               QpFld  253
      Ks2Load    = NewStat2(Jpq,  <+pq.Qprocess>, 0, 1.)                        QpFld  254
      Ks2Flow    = NewStat2(Kfo,   <+fo.Moutlet>, 0, 1.)                        QpFld  255
      Ks2Aux     = NewStat2(Kmd,      <+md.Elec>, 0, 1.)                        QpFld  256
      Ks2Over    = NewStat2(Jpq, <+pq.Qoverload>, 0, 1.)                        QpFld  257
      Ks5LoadBin = NewStat5(Jpq,  <+pq.Qprocess>, 0, 1.)                        QpFld  258
      Ks5FlowBin = NewStat5(Kfo,   <+fo.Moutlet>, 0, 1.)                        QpFld  259
c                                                                               QpFld  260
c              Create the type "H" report                                       QpFld  261
      IF (<pq:REPORTS> .GT. 0  .AND.  IREPRT(3,23) .GT. 0)                      QpFld  262
     &  <pq;PS-H> = NewReport_H(Jpq, 143,                                       QpFld  263
     &                          4, 5, 6,                                        QpFld  264
     &                          Ks2Load, Ks2Flow, Ks2Aux, Ks2Over,              QpFld  265
     &                          Ks5LoadBin, Ks5FlowBin, 0,                      QpFld  266
     &                          0, 0, 0)                                        QpFld  267
c                                                                               QpFld  268
c                                                                               QpFld  269
c ============ REPORT ORDER =================================================== QpFld  270
      CASE (52)                                                                 QpFld  271
c                                                                               QpFld  272
      Call Report_H(Mode, <pq;PS-H>)                                            QpFld  273
c                                                                               QpFld  274
c                                                                               QpFld  275
c ============ REPORTS - VERIFICATION DATA ==================================== QpFld  276
      CASE (54)                                                                 QpFld  277
c                                                                               QpFld  278
c              Output design information                                        QpFld  279
      IF (<pq;PS-H> .ne. 0)  THEN                                               QpFld  280
        rH = <pq;PS-H>                                                          QpFld  281
        WRITE (IREPFL) 4,<rH;Iuniq>,1,1,0                                       QpFld  282
        CALL GetAttachments(Jpq, 2)                                             QpFld  283
        WRITE (IREPFL)  23,<rH;Iuniq>,1,2,19,                                   QpFld  284
     &    (NameAttachments(II,1,1),II=1,8),                                     QpFld  285
     &    (NameAttachments(II,1,2),II=1,8),                                     QpFld  286
     &    <pq;Load>,<fo.Moutlet>,<fi.Treqd>                                     QpFld  287
        DO  Irow=2,NumRowsOfAttachments                                         QpFld  288
          WRITE (IREPFL)  20,<rH;Iuniq>,1,3,16,                                 QpFld  289
     &      (NameAttachments(II,Irow,1),II=1,8),                                QpFld  290
     &      (NameAttachments(II,Irow,2),II=1,8)                                 QpFld  291
        ENDDO                                                                   QpFld  292
      ENDIF                                                                     QpFld  293
c                                                                               QpFld  294
c                                                                               QpFld  295
c ============ REPORTS - YEARLY SUMMARY (SPECIAL) ============================= QpFld  296
      CASE (58)                                                                 QpFld  297
c                                                                               QpFld  298
c              Setpoint overload                                                QpFld  299
      IF (<pq;PS-H> .ne. 0)  THEN                                               QpFld  300
        rH = <pq;PS-H>                                                          QpFld  301
        WRITE (IREPFL) 5,<rH;Iuniq>,1,7,1, <pq.OverloadHours>                   QpFld  302
      ENDIF                                                                     QpFld  303
c                                                                               QpFld  304
c                                                                               QpFld  305
c ============ HOURLY REPORTS - HOURLY DATA =================================== QpFld  306
      CASE (62)                                                                 QpFld  307
c                                                                               QpFld  308
      IF (<pq;HourRepBuf> .EQ. 0)  RETURN                                       QpFld  309
c                                                                               QpFld  310
      Kmd   = <pq:AUX-METER>                                                    QpFld  311
      IAptr = <pq;HourRepBuf> - 1                                               QpFld  312
c                                                                               QpFld  313
      AA(IAptr+1) = <pq.Qprocess>                                               QpFld  314
      AA(IAptr+3) = <fo.Moutlet>                                                QpFld  315
      AA(IAptr+4) = <md.Elec>                                                   QpFld  316
      AA(IAptr+5) = <pq.Qoverload>                                              QpFld  317
      AA(IAptr+6) = <fi.Treqd>                                                  QpFld  318
c                                                                               QpFld  319
c                                                                               QpFld  320
c ============ DESIGN CALCULATIONS - INITIALIZATION =========================== QpFld  321
      CASE (110)                                                                QpFld  322
c                                                                               QpFld  323
c              Setup for heading vs. cooling                                    QpFld  324
      SELECT CASE (<pq:TYPE>)                                                   QpFld  325
        CASE (1,2) ! hw or dhw                                                  QpFld  326
          <pq;ModeHX>     = 1                                                   QpFld  327
          <pq;Load>       = -ABS(<pq:PROCESS-LOAD>)                             QpFld  328
          <pq:SUPPLY-DT>  = -ABS(<pq:SUPPLY-DT>)                                QpFld  329
          <pq:PROCESS-DT> = -ABS(<pq:PROCESS-DT>)                               QpFld  330
        CASE (3) ! chw                                                          QpFld  331
          <pq;ModeHX>     = 2                                                   QpFld  332
          <pq;Load>       = <pq:PROCESS-LOAD>                                   QpFld  333
      END SELECT                                                                QpFld  334
      <pq.Qprocess> = <pq;Load>                                                 QpFld  335
c                                                                               QpFld  336
c              Check heat gains for consistency                                 QpFld  337
      Total = <pq:CONVECTIVE> + <pq:RADIATIVE> + <pq:LATENT>                    QpFld  338
      IF (Total .GT. 1.000001)  THEN                                            QpFld  339
        CALL MSGSIM(-1,II,II,II,II)                                             QpFld  340
        WRITE (IOUTPT, 9001)  (<pq:NAME>,II=1,8), Total                         QpFld  341
        CALL MessageBox( NULL,                                                  QpFld  342
     &    'Invalid heat gain fraction'//char(0),                                QpFld  343
     &    'Process-Load Errors'//char(0),                                       QpFld  344
     &    MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                  QpFld  345
        IwinReturn = 1                                                          QpFld  346
        RETURN                                                                  QpFld  347
      ENDIF                                                                     QpFld  348
c              repeat for auxiliary zonal heat gains                            QpFld  349
      Total = <pq:AUX-CONVECTIV> + <pq:AUX-RADIATIVE> + <pq:AUX-LATENT>         QpFld  350
      IF (Total .GT. 1.000001)  THEN                                            QpFld  351
        CALL MSGSIM(-1,II,II,II,II)                                             QpFld  352
        WRITE (IOUTPT, 9002)  (<pq:NAME>,II=1,8), Total                         QpFld  353
        CALL MessageBox( NULL,                                                  QpFld  354
     &    'Invalid aux heat gain fraction'//char(0),                            QpFld  355
     &    'Process-Load Errors'//char(0),                                       QpFld  356
     &    MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                  QpFld  357
        IwinReturn = 1                                                          QpFld  358
        RETURN                                                                  QpFld  359
      ENDIF                                                                     QpFld  360
c                                                                               QpFld  361
c              Auxiliary power                                                  QpFld  362
      IF (<pq:AUX-KW> .EQ. 0.)  THEN                                            QpFld  363
        Qaux = 0.                                                               QpFld  364
      ELSE                                                                      QpFld  365
        AuxKWh    = <pq:AUX-KW>                                                 QpFld  366
        Qaux      = AuxKWh * BtuKW                                              QpFld  367
        Kmd       = <pq:AUX-METER>                                              QpFld  368
        <md.Elec> = AuxKWh                                                      QpFld  369
      ENDIF  ! pq:AUX-KW                                                        QpFld  370
c                                                                               QpFld  371
c              Allocate process load to zone                                    QpFld  372
      IF (<pq:PROCESS-ZONE> .GT. 0)  THEN                                       QpFld  373
c              convective                                                       QpFld  374
        IF (<pq;QconvNode> .GT. 0)  THEN                                        QpFld  375
          Kex            = <pq;QconvNode>                                       QpFld  376
          <ex.Qextract>  = <pq.Qprocess> * <pq:CONVECTIVE>                      QpFld  377
     &                   - Qaux          * <pq:AUX-CONVECTIV>                   QpFld  378
        ENDIF                                                                   QpFld  379
c              radiative                                                        QpFld  380
        IF (<pq;QradNode> .GT. 0)  THEN                                         QpFld  381
          Kex            = <pq;QradNode>                                        QpFld  382
          <ex.Qextract>  = <pq.Qprocess> * <pq:RADIATIVE>                       QpFld  383
     &                   - Qaux          * <pq:AUX-RADIATIVE>                   QpFld  384
        ENDIF                                                                   QpFld  385
c              latent                                                           QpFld  386
        IF (<pq;QlatNode> .GT. 0)  THEN                                         QpFld  387
          Kex            = <pq;QlatNode>                                        QpFld  388
          <ex.MWextract> = <pq.Qprocess> * <pq:LATENT>                          QpFld  389
     &                   - Qaux          * <pq:AUX-LATENT>                      QpFld  390
          <ex.MWextract> = -<ex.MWextract> / 1061.                              QpFld  391
        ENDIF                                                                   QpFld  392
      ENDIF  ! pq:PROCESS-ZONE                                                  QpFld  393
c                                                                               QpFld  394
c                                                                               QpFld  395
c ============ DESIGN CALCULATIONS - FLUID SIDE =============================== QpFld  396
      CASE (111)                                                                QpFld  397
c                                                                               QpFld  398
c              Supply outlet conditions                                         QpFld  399
      Msupply      = <pq;Load> / (<pl.Btuh/GPM-F>*<pq:SUPPLY-DT>)               QpFld  400
      <fo.Moutlet> = Msupply                                                    QpFld  401
      IF (<pq:CTRL-VALVE-TY> .EQ. 2)  THEN                                      QpFld  402
        <fo.Moutlet2> = Msupply                                                 QpFld  403
      ELSE                                                                      QpFld  404
        <fo.Moutlet3> = Msupply                                                 QpFld  405
      ENDIF                                                                     QpFld  406
c                                                                               QpFld  407
      <fo.Mreqd>    = <fo.Moutlet>                                              QpFld  408
      <fo.Toutlet>  = <Xfi.Tinlet> + <pq:SUPPLY-DT>*Msupply/<fo.Moutlet>        QpFld  409
c                                                                               QpFld  410
c              Supply inlet conditions                                          QpFld  411
      <fi.Minlet>   = <fo.Moutlet>                                              QpFld  412
      <fi.Minlet2>  = <fo.Moutlet2>                                             QpFld  413
      <fi.Minlet3>  = <fo.Moutlet3>                                             QpFld  414
      <fi.Mreqd>    = <fo.Mreqd>                                                QpFld  415
      dPsupply      = <pq:SUPPLY-HEAD> + <pq:CTRL-VALVE-HD>                     QpFld  416
     &                                 + <pq:BALANCE-HEAD>                      QpFld  417
      <pq;dPsupply> = FluidDP_Design(<pq;SupplyProp>, Msupply, dPsupply)        QpFld  418
      <fi.Preqd>    = <Xfo.Preqd> + <pq;dPsupply>                               QpFld  419
      <fi.Treqd>    = <pq:SUPPLY-T>                                             QpFld  420
      <fi.Qinlet>   = <Xfi.Qinlet>                                              QpFld  421
      <fo.Qoutlet>  = <fi.Qinlet> + <pq;Load>                                   QpFld  422
c              Check for convergence on inlet conditions                        QpFld  423
      CALL CnvgCheck(1, <pq;SupplyHsty>)                                        QpFld  424
c                                                                               QpFld  425
c                                                                               QpFld  426
c ============ DESIGN CALCULATIONS - RECONCILIATION =========================== QpFld  427
      CASE (119)                                                                QpFld  428
c                                                                               QpFld  429
c              Design the heat-exchanger                                        QpFld  430
      <pq;Msupply> = <fo.Moutlet>                                               QpFld  431
      Msupply      = MAX(1., <pq;Msupply>)                                      QpFld  432
      <pq.DemTi>   = <pq:PROCESS-T> + <pq:PROCESS-DT>                           QpFld  433
      IF (<pq:PROCESS-DT> .NE. 0.)  THEN                                        QpFld  434
        Cdemand  = <pq;Load> / <pq:PROCESS-DT>                                  QpFld  435
      ELSE                                                                      QpFld  436
        Cdemand  = 1.E20                                                        QpFld  437
      ENDIF                                                                     QpFld  438
      CALL HX_Design(Khx, <pq;Load>,                                            QpFld  439
     &                      Msupply, <pl.Btuh/GPM-F>, <pq:SUPPLY-T>,            QpFld  440
     &                           1.,         Cdemand,    <pq.DemTi>)            QpFld  441
c                                                                               QpFld  442
c              Flow at which supply temperature should be reset                 QpFld  443
      IF (<pl:FLOW-RESET> .GT. 0.)  THEN                                        QpFld  444
        <pq;Mreset> = Msupply * <pl:FLOW-RESET>                                 QpFld  445
      ELSE                                                                      QpFld  446
        <pq;Mreset> = Msupply                                                   QpFld  447
      ENDIF                                                                     QpFld  448
c                                                                               QpFld  449
c              Set up the balancing valve.                                      QpFld  450
c              supply dP for pure water                                         QpFld  451
      dPsupply = <pq:SUPPLY-HEAD> + <pq:CTRL-VALVE-HD>                          QpFld  452
     &                            + <pq:BALANCE-HEAD>                           QpFld  453
c              convert available dP from actual to pure water                   QpFld  454
      Ratio    = FluidDP_Design(<pq;SupplyProp>, 1., 1.)                        QpFld  455
      dPmax    = <Xfi.Pinlet> - <Xfo.Poutlet>                                   QpFld  456
      dPmax    = dPmax / Ratio                                                  QpFld  457
c              Warn if design fluid dP impossible to achieve                    QpFld  458
      IF (dPmax .LT. dPsupply*0.99)  THEN                                       QpFld  459
        CALL MSGSIM(-2,II,II,II,II)                                             QpFld  460
        WRITE (IOUTPT,9003) (<pq:NAME>,II=1,8),                                 QpFld  461
     &                      dPsupply, dPmax                                     QpFld  462
      ENDIF                                                                     QpFld  463
c              balance dP                                                       QpFld  464
      <pq;dPbalance> = MAX(0., dPmax-dPsupply)                                  QpFld  465
      SELECT CASE (<pq:BALANCE-VALVE>)                                          QpFld  466
        CASE (0)  ! none                                                        QpFld  467
          <pq;MaxMsupply> = 1.E20                                               QpFld  468
        CASE (1)  ! manual                                                      QpFld  469
          <pq;MaxMsupply> = 1.E20                                               QpFld  470
          dPsupply        = MAX(dPmax, dPsupply)                                QpFld  471
        CASE (2)  ! flow limiting                                               QpFld  472
          <pq;MaxMsupply> = Msupply * 1.1       ! maximum allowed supply flow   QpFld  473
      END SELECT                                                                QpFld  474
      <pq;dPsupply> = FluidDP_Design(<pq;SupplyProp>, Msupply, dPsupply)        QpFld  475
c                                                                               QpFld  476
c                                                                               QpFld  477
c ============ ATTACHMENTS ==================================================== QpFld  478
c                                                                               QpFld  479
c              Initial attachments                                              QpFld  480
      CASE (201)                                                                QpFld  481
c              Component pointers, schedules and curves                         QpFld  482
        <pq:LOOP>          = Jcomponent( 2, <pq:LOOP>)                          QpFld  483
c future<pq:SUPPLY-CKT>    = Jcomponent(28, <pq:SUPPLY-CKT>)                    QpFld  484
c future<pq:RETURN-CKT>    = Jcomponent(28, <pq:RETURN-CKT>)                    QpFld  485
        <pq:AUX-METER>     = Jcomponent(13, <pq:AUX-METER>)                     QpFld  486
        <pq:COST-DATA>     = Jcomponent(18, <pq:COST-DATA>)                     QpFld  487
        <pq:PROCESS-SCH>   = Jsched(<pq:PROCESS-SCH>)                           QpFld  488
        <pq:AUX-SCH>       = Jsched(<pq:AUX-SCH>)                               QpFld  489
        <pq:PROCESS-ZONE>  = Jzone(<pq:PROCESS-ZONE>)                           QpFld  490
c                                                                               QpFld  491
c              Second level of attachments                                      QpFld  492
      CASE (202)                                                                QpFld  493
c                                                                               QpFld  494
c              Fluid properties subcomponents                                   QpFld  495
        <pq;ProcessProp> = NewFluidProperties(Jpq, 0, 0,                        QpFld  496
     &                     0., 0., 0., 0.,                                      QpFld  497
     &                     0., 0., 0., 0.,                                      QpFld  498
     &                     0., 0., 0., 0., 0.)                                  QpFld  499
c                                                                               QpFld  500
        Tavg = <pq:SUPPLY-T> + <pq:SUPPLY-DT>*0.5                               QpFld  501
        <pq;SupplyProp> = NewFluidProperties(Jpq, Jpl, 11,                      QpFld  502
     &                     5., 4000., 2000.,   0.25,                            QpFld  503
     &                     0.,    0.,   0.5, 0.0015,                            QpFld  504
     &                     <pl:RATED-FLUID>, <pl:RATED-CONC>,                   QpFld  505
     &                     Tavg,    0.,   0.)                                   QpFld  506
c                                                                               QpFld  507
c              Heat-exchanger subcomponent                                      QpFld  508
        <pq;HX> = NewHX(Jpq, <pq:HX-CONFIGURAT>,  0.,                           QpFld  509
     &                          <pq;SupplyProp>, 0.4,                           QpFld  510
     &                         <pq;ProcessProp>, 0.4)                           QpFld  511
c                                                                               QpFld  512
c              Create nodes                                                     QpFld  513
      CASE (203)                                                                QpFld  514
c              Plant nodes                                                      QpFld  515
        pqMult = <pq:MULTIPLIER>                                                QpFld  516
        <pq;SupplyInNode>  = NewNode(1, Jpq,0,Jpq,<pl;SupplyCkt>,               QpFld  517
     &                                        51,1,<pq:END-USE>, pqMult)        QpFld  518
        <pq;SupplyOutNode> = NewNode(1, Jpq,0,Jpq,<pl;ReturnCkt>,               QpFld  519
     &                                        52,2,<pq:END-USE>, pqMult)        QpFld  520
c              Auxiliary meter                                                  QpFld  521
        Jme = <pq:AUX-METER>                                                    QpFld  522
        <pq:AUX-METER> = NewNode(1, Jpq,0,Jpq,Jme, 11,2,7, pqMult)              QpFld  523
c              Zonal attachments                                                QpFld  524
        IF (<pq:PROCESS-ZONE> .GT. 0)  THEN                                     QpFld  525
          ZP1 = <pq:PROCESS-ZONE>            ! zone pointer                     QpFld  526
c              Zone sensible and latent heat gains                              QpFld  527
          IF (<pq:CONVECTIVE> .GT. 0. .OR. <pq:AUX-CONVECTIV> .GT. 0.)          QpFld  528
     &      <pq;QconvNode> = NewNode(1, 0,0,Jpq,ZP1, 31,1,0, pqMult)            QpFld  529
          IF (<pq:RADIATIVE> .GT. 0.  .OR.  <pq:AUX-RADIATIVE> .GT. 0.)         QpFld  530
     &      <pq;QradNode>  = NewNode(1, 0,0,Jpq,ZP1, 33,1,0, pqMult)            QpFld  531
          IF (<pq:LATENT> .GT. 0.  .OR.  <pq:AUX-LATENT> .GT. 0.)               QpFld  532
     &      <pq;QlatNode>  = NewNode(1, 0,0,Jpq,ZP1, 32,1,0, pqMult)            QpFld  533
        ENDIF                                                                   QpFld  534
c                                                                               QpFld  535
c              Links, lists                                                     QpFld  536
      CASE (205)                                                                QpFld  537
        CALL ListNodes(<pq;Nodes>, Jpq,0,0,0, 0,0)                              QpFld  538
c                                                                               QpFld  539
c              Histories                                                        QpFld  540
      CASE (208)                                                                QpFld  541
c              Supply history                                                   QpFld  542
        KliX = 0                                                                QpFld  543
        Call ListXNodes(<pq;Nodes>, KliX)                                       QpFld  544
        <pq;SupplyHsty> = NewHistory(Jpq,0,Jpq, KliX, <pq;Nodes>,               QpFld  545
     &                         3, 5, 1.5,                                       QpFld  546
     &                        <#fi.Minlet2>, <sp:ERROR-FLOW>, 2,                QpFld  547
     &                        <#fi.Mreqd>  , <sp:ERROR-FLOW>, 2,                QpFld  548
     &                        <#fi.Preqd>  , <sp:ERROR-P>   , 1,                QpFld  549
     &                        <#fi.Treqd>  , <sp:ERROR-T>   , 1,                QpFld  550
     &                        <#fo.Moutlet>, <sp:ERROR-FLOW>, 2,                QpFld  551
     &                        <#fo.Toutlet>, <sp:ERROR-T>   , 1)                QpFld  552
c                                                                               QpFld  553
c              History lists                                                    QpFld  554
      CASE (209)                                                                QpFld  555
c              Component histories                                              QpFld  556
        CALL ListHstys(<pq;Hstys>, 0, 0, Jpq)                                   QpFld  557
c                                                                               QpFld  558
c              Dump pointers                                                    QpFld  559
      CASE (210)                                                                QpFld  560
        IF (<pq;Previous> .EQ. 0)  WRITE (IOUTPT, 9201)                         QpFld  561
        WRITE (IOUTPT, 9202)  (<pq:NAME>,II=1,8),                               QpFld  562
     &    Jpq, <pq;SupplyInNode>, <pq;SupplyOutNode>,                           QpFld  563
     &    <pq;QconvNode>, <pq;QradNode>, <pq;QlatNode>                          QpFld  564
c                                                                               QpFld  565
c                                                                               QpFld  566
      END SELECT  ! Mode                                                        QpFld  567
c                                                                               QpFld  568
      RETURN                                                                    QpFld  569
c                                                                               QpFld  570
c              Message formats                                                  QpFld  571
 9001 FORMAT(                                                                   QpFld  572
     &14x,'Process-Load: ',8A4,' has a sum of convective'              /        QpFld  573
     &14x,'radiative, and latent fractions greater than 1.0'           /        QpFld  574
     &14x,'Total: ',F5.3                                               )        QpFld  575
 9002 FORMAT(                                                                   QpFld  576
     &14x,'Process-Load: ',8A4,' has a sum of convective'              /        QpFld  577
     &14x,'radiative, and latent fractions greater than 1.0'           /        QpFld  578
     &14x,'Auxiliary Total: ',F5.3                                     )        QpFld  579
 9003 FORMAT(                                                                   QpFld  580
     &14x,'Process-Load: ',8A4,' has a design head'                    /        QpFld  581
     &14x,'higher than available from the plant'                       /        QpFld  582
     &14x,'Required, Available:',2F10.1                                )        QpFld  583
 9102 FORMAT(                                                                   QpFld  584
     &14x,'Process-Load: ',8A4,' has a required supply'                /        QpFld  585
     &14x,'temperature lower than available.  Not all of the process'  /        QpFld  586
     &14x,'load will be satisfied.  See report PS-H for a summary of'  /        QpFld  587
     &14x,'overloads.  First occurrence:', I2,2('/',I2)                )        QpFld  588
 9201 FORMAT(/                                                                  QpFld  589
     &' PROCESS-LOADs                          Jpq       Kfi'  ,                QpFld  590
     &'       Kfo     Qconv      Qrad      Qlat'                       /        QpFld  591
     &1x,32('-'),6('  --------')                                       )        QpFld  592
 9202 FORMAT(1x,8A4,6I10                                               )        QpFld  593
      END                                                                       QpFld  594
      SUBROUTINE Process_DHW(Mode, Knx)                                         QpDHW    2
c                                                                               QpDHW    3
c              Simulates a process load on a domestic water loop                QpDHW    4
c                                                                               QpDHW    5
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /Attach/ NameAttachments(8,100,3), NumRowsOfAttachments           /Attach/ 2
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /MISCD / TEMPS(4,4096),CONS(5),TEMPSL(4096),                      /MISCD/  2
     1                 BLDGQH,BLDGQC,BLDGQL,BLDGP,BPMULT,                       /MISCD/  3
     2                 DBTMIN,DBTMAX,WMIN,WMAX,NSPZ(4096),                      /MISCD/  4
     3                 DQ, DTP, DTR, DTS, FPI, PLRCC , POM, TC2, TDM,           /MISCD/  5
     4                 TRA,WCOL,WCOLM,WMM,YPI,KWBTU,BTUKW,UNFILD,Unusedm        /MISCD/  6
      REAL             KWBTU                                                    /MISCD/  7
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               QpDHW   15
      COMMON  /PlntKy/ CHW, Pipe2, loop3, HW, loop5, STM, WLHP, DHW,            /PlntKy/ 2
     &                 CW, Deleted, Pipe2h, WLHPh, COGEN, NoType,               /PlntKy/ 3
     &                 Fixed, OA, Sch, Load,  Zone, Outdoor,                    /PlntKy/ 4
     &                 Standby, Demand, Snap, Scheduled,                        /PlntKy/ 5
     &                 CONSTANT, VARIABLE, ModeText(4),                         /PlntKy/ 6
     &                 OffMode, Floating, HeatMode, CoolMode, ElecMode,         /PlntKy/ 7
     &                 AtCoils, EnterLoop, AtPump,                              /PlntKy/ 8
     &                 INDOORS, OUTDOORS, TUNNEL, UNDERGROUND,                  /PlntKy/ 9
     &                 PRIMARY, SECONDARY,                                      /PlntKy/10
     &                 DIRECT, HX,                                              /PlntKy/11
     &                 Water, Ethylene, Propylene, Brine                        /PlntKy/12
      INTEGER          CHW, Pipe2, loop3, HW, loop5, STM, WLHP, DHW,            /PlntKy/13
     &                 CW, Deleted, Pipe2h, WLHPh, COGEN, NoType,               /PlntKy/14
     &                 Fixed, OA, Sch, Load,  Zone, Outdoor,                    /PlntKy/15
     &                 Standby, Demand, Snap, Scheduled,                        /PlntKy/16
     &                 CONSTANT, VARIABLE, ModeText,                            /PlntKy/17
     &                 OffMode, Floating, HeatMode, CoolMode, ElecMode,         /PlntKy/18
     &                 AtCoils, EnterLoop, AtPump,                              /PlntKy/19
     &                 INDOORS, OUTDOORS, TUNNEL, UNDERGROUND,                  /PlntKy/20
     &                 PRIMARY, SECONDARY,                                      /PlntKy/21
     &                 DIRECT, HX,                                              /PlntKy/22
     &                 Water, Ethylene, Propylene, Brine                        /PlntKy/23
c                                                                               QpDHW   17
      DATA IdNode /4H$Kno/                                                      /IdNode/ 2
c                                                                               QpDHW   19
      INTEGER  Xfi, ZP1, rH                                                     QpDHW   20
c                                                                               QpDHW   21
      IF (<nx;Ident> .EQ. IdNode)  THEN                                         QpDHW   22
        Jpq = <nx;Component>                                                    QpDHW   23
      ELSE                                                                      QpDHW   24
        Jpq = Knx                                                               QpDHW   25
      ENDIF                                                                     QpDHW   26
c                                                                               QpDHW   27
      Jpl = <pq:LOOP>                    ! Central plant                        QpDHW   28
      Kfi = <pq;SupplyInNode>            ! Fluid inlet                          QpDHW   29
      Xfi = <fi;Xnode>                   ! Xfaced inlet                         QpDHW   30
c                                                                               QpDHW   31
      SELECT CASE (Mode)                                                        QpDHW   32
c                                                                               QpDHW   33
c                                                                               QpDHW   34
c ============ HOURLY INITIALIZATION ========================================== QpDHW   35
      CASE (10)                                                                 QpDHW   36
c                                                                               QpDHW   37
      CALL ZeroAA(<#pq~HrZeroStart..>, <#pq~HrZeroEnd....>)                     QpDHW   38
c                                                                               QpDHW   39
c              Process flow and load                                            QpDHW   40
      <pq.PLRprocess> = MAX(0., SchVal(<pq:PROCESS-SCH>))                       QpDHW   41
      <pq.Flow>       = <pq:PROCESS-FLOW> * <pq.PLRprocess>                     QpDHW   42
      IF (<pq.PLRprocess> .GT. 0.)  THEN                                        QpDHW   43
        <fi.RunFrac>  = 1.                                                      QpDHW   44
        <fi.CtrlMode> = 2                                 ! demand              QpDHW   45
      ELSE                                                                      QpDHW   46
        <fi.RunFrac>  = 0.                                                      QpDHW   47
        <fi.CtrlMode> = 0                                 ! off                 QpDHW   48
      ENDIF                                                                     QpDHW   49
c                                                                               QpDHW   50
c                                                                               QpDHW   51
c ============ HOURLY SIMULATION ============================================== QpDHW   52
      CASE (30,31)                                                              QpDHW   53
c                                                                               QpDHW   54
      CALL ZeroAA(<#pq~HrZeroStart..>, <#pq~HrZeroEnd....>)                     QpDHW   55
c                                                                               QpDHW   56
c              Skip if no process flow                                          QpDHW   57
      IF (<pq.Flow> .EQ. 0.  .or.  <pl.CtrlMode'> .eq. OffMode)  THEN           QpDHW   58
        <pq.Flow>    = 0.                                                       QpDHW   59
        <fi.Minlet2> = 0.                                                       QpDHW   60
        <fi.Minlet>  = 0.                                                       QpDHW   61
        <fi.Mreqd>   = 0.                                                       QpDHW   62
        GOTO 3190                                                               QpDHW   63
      ENDIF                                                                     QpDHW   64
c                                                                               QpDHW   65
c              Process flow                                                     QpDHW   66
      IF (<Xfi.Tinlet> .LE. <pq:PROCESS-T>)  THEN                               QpDHW   67
        <fi.Mreqd> = <pq.Flow>                                                  QpDHW   68
      ELSE                                                                      QpDHW   69
c              Inlet is warmer than process T - mix in                          QpDHW   70
c              cold water to attenuate supply temperature                       QpDHW   71
        IF (<pl.Tmakeup> .LT. <pq:PROCESS-T>)  THEN                             QpDHW   72
          Ratio = (<pq:PROCESS-T>-<pl.Tmakeup>)                                 QpDHW   73
     &                                  / (<Xfi.Tinlet>-<pl.Tmakeup>)           QpDHW   74
          <fi.Mreqd> = <pq.Flow> * Ratio                                        QpDHW   75
        ELSE                                                                    QpDHW   76
c              Make-up warmer than process; take all makeup                     QpDHW   77
          <fi.Mreqd> = 0.                                                       QpDHW   78
        ENDIF                                                                   QpDHW   79
      ENDIF                                                                     QpDHW   80
      <fi.Minlet2> = <fi.Mreqd>                                                 QpDHW   81
      <fi.Minlet>  = <fi.Mreqd>                                                 QpDHW   82
c                                                                               QpDHW   83
c              Process load and overload                                        QpDHW   84
      <pq.Qprocess> = <fi.Mreqd> * <pl.Btuh/GPM-F>                              QpDHW   85
     &                           * MIN(0., <pl.Tmakeup>-<Xfi.Tinlet>)           QpDHW   86
      Qreqd         = <pq.Flow>  * <pl.Btuh/GPM-F>                              QpDHW   87
     &                           * MIN(0., <pl.Tmakeup>-<pq:PROCESS-T>)         QpDHW   88
      IF (Qreqd .LT. 0.)  THEN                                                  QpDHW   89
        <pq.Qoverload> = MIN(0., Qreqd-<pq.Qprocess>)                           QpDHW   90
c              eliminate roundoff error                                         QpDHW   91
        IF (<pq.Qoverload>/Qreqd .LT. 0.0001)  <pq.Qoverload> = 0.              QpDHW   92
      ENDIF                                                                     QpDHW   93
      <fi.Qinlet> = <pq.Qprocess>                                               QpDHW   94
c                                                                               QpDHW   95
c              Re-entry point for no flow                                       QpDHW   96
 3190 CONTINUE                                                                  QpDHW   97
                                                                                QpDHW   98
      CALL CnvgCheck(1, <pq;SupplyHsty>)                                        QpDHW   99
c                                                                               QpDHW  100
c              Auxiliary power                                                  QpDHW  101
      IF (<pq:AUX-KW> .EQ. 0.)  THEN                                            QpDHW  102
        Qaux = 0.                                                               QpDHW  103
      ELSE                                                                      QpDHW  104
        SELECT CASE (<pq:AUX-MODE>)                                             QpDHW  105
          CASE (1)  ! Always                                                    QpDHW  106
            AuxKWh = <pq:AUX-KW>                                                QpDHW  107
          CASE (2)  ! When on                                                   QpDHW  108
            IF (<pq.Flow> .NE. 0.)  THEN                                        QpDHW  109
              AuxKWh = <pq:AUX-KW>                                              QpDHW  110
            ELSE                                                                QpDHW  111
              AuxKWh = 0.                                                       QpDHW  112
            ENDIF                                                               QpDHW  113
          CASE (3)  ! When off                                                  QpDHW  114
            IF (<pq.Flow> .EQ. 0.)  THEN                                        QpDHW  115
              AuxKWh = <pq:AUX-KW>                                              QpDHW  116
            ELSE                                                                QpDHW  117
              AuxKWh = 0.                                                       QpDHW  118
            ENDIF                                                               QpDHW  119
          CASE (4)  ! Scheduled                                                 QpDHW  120
            AuxKWh = <pq:AUX-KW> * SchVal(<pq:AUX-SCH>)                         QpDHW  121
        END SELECT                                                              QpDHW  122
        Kmd = <pq:AUX-METER>                                                    QpDHW  123
        Kmx = <md;Xnode>                                                        QpDHW  124
        IF (AuxKWh .GT. 0.)  THEN                                               QpDHW  125
          IF (ABS(1. - <md.Elec>/AuxKWh) .GT. <sp:ERROR-LOAD>)                  QpDHW  126
     &      <mx.IterFlag> = Jpq                                                 QpDHW  127
        ELSE                                                                    QpDHW  128
          IF (<md.Elec> .GT. 0.)  <mx.IterFlag> = Jpq                           QpDHW  129
        ENDIF                                                                   QpDHW  130
        <md.Elec> = AuxKWh                                                      QpDHW  131
        Qaux      = AuxKWh * BtuKW                                              QpDHW  132
      ENDIF  ! pq:AUX-KW                                                        QpDHW  133
c                                                                               QpDHW  134
c              Allocate process load to zone                                    QpDHW  135
      IF (<pq:PROCESS-ZONE> .GT. 0)  THEN                                       QpDHW  136
        Qnet = <pq.Qprocess> - <pq.Qoverload>                                   QpDHW  137
c              convective                                                       QpDHW  138
        IF (<pq;QconvNode> .GT. 0)  THEN                                        QpDHW  139
          Kex            = <pq;QconvNode>                                       QpDHW  140
          <ex.Qextract>  = Qnet * <pq:CONVECTIVE>                               QpDHW  141
     &                   - Qaux * <pq:AUX-CONVECTIV>                            QpDHW  142
        ENDIF                                                                   QpDHW  143
c              radiative                                                        QpDHW  144
        IF (<pq;QradNode> .GT. 0)  THEN                                         QpDHW  145
          Kex            = <pq;QradNode>                                        QpDHW  146
          <ex.Qextract>  = Qnet * <pq:RADIATIVE>                                QpDHW  147
     &                   - Qaux * <pq:AUX-RADIATIVE>                            QpDHW  148
        ENDIF                                                                   QpDHW  149
c              latent                                                           QpDHW  150
        IF (<pq;QlatNode> .GT. 0)  THEN                                         QpDHW  151
          Kex            = <pq;QlatNode>                                        QpDHW  152
          <ex.MWextract> = Qnet * <pq:LATENT>                                   QpDHW  153
     &                   - Qaux * <pq:AUX-LATENT>                               QpDHW  154
          <ex.MWextract> = -<ex.MWextract> / 1061.                              QpDHW  155
        ENDIF                                                                   QpDHW  156
      ENDIF  ! pq:PROCESS-ZONE                                                  QpDHW  157
c                                                                               QpDHW  158
c                                                                               QpDHW  159
c ============ STATISTICS - HOURLY DATA ======================================= QpDHW  160
      CASE (42)                                                                 QpDHW  161
c                                                                               QpDHW  162
c              Check if sufficient supply available                             QpDHW  163
      IF (<pq.Qoverload> .NE. 0.)  THEN                                         QpDHW  164
        IF (<pq.OverloadHours> .EQ. 0)  THEN                                    QpDHW  165
          CALL MSGSIM(-2,II,II,II,II)                                           QpDHW  166
          WRITE (IOUTPT,9102)  (<pq:NAME>,II=1,8), IMO, IDAY, IHR               QpDHW  167
        ENDIF                                                                   QpDHW  168
        <pq.OverloadHours> = <pq.OverloadHours> + 1                             QpDHW  169
      ENDIF                                                                     QpDHW  170
c                                                                               QpDHW  171
c                                                                               QpDHW  172
c ============ REPORT CREATION ================================================ QpDHW  173
      CASE (50)                                                                 QpDHW  174
c                                                                               QpDHW  175
c              statistics blocks                                                QpDHW  176
      Kmd        = <pq:AUX-METER>                                               QpDHW  177
      Ks2Load    = NewStat2(Jpq,  <+pq.Qprocess>, 0, 1.)                        QpDHW  178
      Ks2Flow    = NewStat2(Kfi,    <+fi.Minlet>, 0, 1.)                        QpDHW  179
      Ks2Aux     = NewStat2(Kmd,      <+md.Elec>, 0, 1.)                        QpDHW  180
      Ks2Over    = NewStat2(Jpq, <+pq.Qoverload>, 0, 1.)                        QpDHW  181
      Ks5LoadBin = NewStat5(Jpq,  <+pq.Qprocess>, 0, 1.)                        QpDHW  182
      Ks5FlowBin = NewStat5(Kfi,    <+fi.Minlet>, 0, 1.)                        QpDHW  183
c                                                                               QpDHW  184
c              Create the type "H" report                                       QpDHW  185
      IF (<pq:REPORTS> .GT. 0  .AND.  IREPRT(3,23) .GT. 0)                      QpDHW  186
     &  <pq;PS-H> = NewReport_H(Jpq, 143,                                       QpDHW  187
     &                          4, 5, 6,                                        QpDHW  188
     &                          Ks2Load, Ks2Flow, Ks2Aux, Ks2Over,              QpDHW  189
     &                          Ks5LoadBin, Ks5FlowBin, 0,                      QpDHW  190
     &                          0, 0, 0)                                        QpDHW  191
c                                                                               QpDHW  192
c                                                                               QpDHW  193
c ============ REPORT ORDER =================================================== QpDHW  194
      CASE (52)                                                                 QpDHW  195
c                                                                               QpDHW  196
      Call Report_H(Mode, <pq;PS-H>)                                            QpDHW  197
c                                                                               QpDHW  198
c                                                                               QpDHW  199
c ============ REPORTS - VERIFICATION DATA ==================================== QpDHW  200
      CASE (54)                                                                 QpDHW  201
c                                                                               QpDHW  202
c              Output design information                                        QpDHW  203
      IF (<pq;PS-H> .ne. 0)  THEN                                               QpDHW  204
        rH = <pq;PS-H>                                                          QpDHW  205
        WRITE (IREPFL) 4,<rH;Iuniq>,1,1,0                                       QpDHW  206
        CALL GetAttachments(Jpq, 2)                                             QpDHW  207
        WRITE (IREPFL)  23,<rH;Iuniq>,1,2,19,                                   QpDHW  208
     &    (NameAttachments(II,1,1),II=1,8),                                     QpDHW  209
     &    (NameAttachments(II,1,2),II=1,8),                                     QpDHW  210
     &    <pq;Load>,<fi.Minlet>,<fi.Treqd>                                      QpDHW  211
        DO  Irow=2,NumRowsOfAttachments                                         QpDHW  212
          WRITE (IREPFL)  20,<rH;Iuniq>,1,3,16,                                 QpDHW  213
     &      (NameAttachments(II,Irow,1),II=1,8),                                QpDHW  214
     &      (NameAttachments(II,Irow,2),II=1,8)                                 QpDHW  215
        ENDDO                                                                   QpDHW  216
      ENDIF                                                                     QpDHW  217
c                                                                               QpDHW  218
c                                                                               QpDHW  219
c ============ REPORTS - YEARLY SUMMARY (SPECIAL) ============================= QpDHW  220
      CASE (58)                                                                 QpDHW  221
c                                                                               QpDHW  222
c              Setpoint overload                                                QpDHW  223
      IF (<pq;PS-H> .ne. 0)  THEN                                               QpDHW  224
        rH = <pq;PS-H>                                                          QpDHW  225
        WRITE (IREPFL) 5,<rH;Iuniq>,1,7,1, <pq.OverloadHours>                   QpDHW  226
      ENDIF                                                                     QpDHW  227
c                                                                               QpDHW  228
c                                                                               QpDHW  229
c ============ HOURLY REPORTS - HOURLY DATA =================================== QpDHW  230
      CASE (62)                                                                 QpDHW  231
c                                                                               QpDHW  232
      IF (<pq;HourRepBuf> .EQ. 0)  RETURN                                       QpDHW  233
c                                                                               QpDHW  234
      Kmd   = <pq:AUX-METER>                                                    QpDHW  235
      IAptr = <pq;HourRepBuf> - 1                                               QpDHW  236
c                                                                               QpDHW  237
      AA(IAptr+1) = <pq.Qprocess>                                               QpDHW  238
      AA(IAptr+3) = <fi.Minlet>                                                 QpDHW  239
      AA(IAptr+4) = <md.Elec>                                                   QpDHW  240
      AA(IAptr+5) = <pq.Qoverload>                                              QpDHW  241
      AA(IAptr+6) = <fi.Treqd>                                                  QpDHW  242
c                                                                               QpDHW  243
c                                                                               QpDHW  244
c ============ DESIGN CALCULATIONS - INITIALIZATION =========================== QpDHW  245
      CASE (110)                                                                QpDHW  246
c                                                                               QpDHW  247
c              Load relative to pure water at 60F                               QpDHW  248
      <pq;Load>     = <pq:PROCESS-FLOW> * 500.4                                 QpDHW  249
     &                                  * MAX(0., <pq:PROCESS-T>-60.)           QpDHW  250
      <pq.Qprocess> = <pq;Load>                                                 QpDHW  251
c                                                                               QpDHW  252
c              Check heat gains for consistency                                 QpDHW  253
      Total = <pq:CONVECTIVE> + <pq:RADIATIVE> + <pq:LATENT>                    QpDHW  254
      IF (Total .GT. 1.000001)  THEN                                            QpDHW  255
        CALL MSGSIM(-1,II,II,II,II)                                             QpDHW  256
        WRITE (IOUTPT, 9001)  (<pq:NAME>,II=1,8), Total                         QpDHW  257
        CALL MessageBox( NULL,                                                  QpDHW  258
     &    'Invalid heat gain fraction'//char(0),                                QpDHW  259
     &    'Process-Load Errors'//char(0),                                       QpDHW  260
     &    MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                  QpDHW  261
        IwinReturn = 1                                                          QpDHW  262
        RETURN                                                                  QpDHW  263
      ENDIF                                                                     QpDHW  264
c              repeat for auxiliary zonal heat gains                            QpDHW  265
      Total = <pq:AUX-CONVECTIV> + <pq:AUX-RADIATIVE> + <pq:AUX-LATENT>         QpDHW  266
      IF (Total .GT. 1.000001)  THEN                                            QpDHW  267
        CALL MSGSIM(-1,II,II,II,II)                                             QpDHW  268
        WRITE (IOUTPT, 9002)  (<pq:NAME>,II=1,8), Total                         QpDHW  269
        CALL MessageBox( NULL,                                                  QpDHW  270
     &    'Invalid aux heat gain fraction'//char(0),                            QpDHW  271
     &    'Process-Load Errors'//char(0),                                       QpDHW  272
     &    MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                  QpDHW  273
        IwinReturn = 1                                                          QpDHW  274
        RETURN                                                                  QpDHW  275
      ENDIF                                                                     QpDHW  276
c                                                                               QpDHW  277
c              Auxiliary power                                                  QpDHW  278
      IF (<pq:AUX-KW> .EQ. 0.)  THEN                                            QpDHW  279
        Qaux = 0.                                                               QpDHW  280
      ELSE                                                                      QpDHW  281
        AuxKWh    = <pq:AUX-KW>                                                 QpDHW  282
        Qaux      = AuxKWh * BtuKW                                              QpDHW  283
        Kmd       = <pq:AUX-METER>                                              QpDHW  284
        <md.Elec> = AuxKWh                                                      QpDHW  285
      ENDIF  ! pq:AUX-KW                                                        QpDHW  286
c                                                                               QpDHW  287
c              Allocate process load to zone                                    QpDHW  288
      IF (<pq:PROCESS-ZONE> .GT. 0)  THEN                                       QpDHW  289
c              convective                                                       QpDHW  290
        IF (<pq;QconvNode> .GT. 0)  THEN                                        QpDHW  291
          Kex            = <pq;QconvNode>                                       QpDHW  292
          <ex.Qextract>  = <pq.Qprocess> * <pq:CONVECTIVE>                      QpDHW  293
     &                   - Qaux          * <pq:AUX-CONVECTIV>                   QpDHW  294
        ENDIF                                                                   QpDHW  295
c              radiative                                                        QpDHW  296
        IF (<pq;QradNode> .GT. 0)  THEN                                         QpDHW  297
          Kex            = <pq;QradNode>                                        QpDHW  298
          <ex.Qextract>  = <pq.Qprocess> * <pq:RADIATIVE>                       QpDHW  299
     &                   - Qaux          * <pq:AUX-RADIATIVE>                   QpDHW  300
        ENDIF                                                                   QpDHW  301
c              latent                                                           QpDHW  302
        IF (<pq;QlatNode> .GT. 0)  THEN                                         QpDHW  303
          Kex            = <pq;QlatNode>                                        QpDHW  304
          <ex.MWextract> = <pq.Qprocess> * <pq:LATENT>                          QpDHW  305
     &                   - Qaux          * <pq:AUX-LATENT>                      QpDHW  306
          <ex.MWextract> = -<ex.MWextract> / 1061.                              QpDHW  307
        ENDIF                                                                   QpDHW  308
      ENDIF  ! pq:PROCESS-ZONE                                                  QpDHW  309
c                                                                               QpDHW  310
c                                                                               QpDHW  311
c ============ DESIGN CALCULATIONS - FLUID SIDE =============================== QpDHW  312
      CASE (111)                                                                QpDHW  313
                                                                                QpDHW  314
c              Supply inlet conditions                                          QpDHW  315
      IF (<Xfi.Tinlet> .EQ. <pq:PROCESS-T>)  THEN                               QpDHW  316
        <fi.Minlet2> = <pq:PROCESS-FLOW>                                        QpDHW  317
      ELSEIF (<Xfi.Tinlet> .GT. <pq:PROCESS-T>)  THEN                           QpDHW  318
c              Inlet is warmer than process T - mix in                          QpDHW  319
c              cold water to attenuate supply temperature                       QpDHW  320
        IF (<pl.Tmakeup> .LT. <pq:PROCESS-T>)  THEN                             QpDHW  321
          Ratio = (<pq:PROCESS-T>-<pl;TmakeupDes>)                              QpDHW  322
     &                                  / (<Xfi.Tinlet>-<pl;TmakeupDes>)        QpDHW  323
          <fi.Minlet2> = <pq:PROCESS-FLOW> * Ratio                              QpDHW  324
        ELSE                                                                    QpDHW  325
c              Make-up too warm; take all makeup                                QpDHW  326
          <fi.Minlet2> = 0.                                                     QpDHW  327
        ENDIF                                                                   QpDHW  328
      ELSE                                                                      QpDHW  329
c              Inlet is not warm enough - overload                              QpDHW  330
        <fi.Minlet2>   = <pq:PROCESS-FLOW>                                      QpDHW  331
      ENDIF                                                                     QpDHW  332
      <fi.Minlet>  = <fi.Minlet2>                                               QpDHW  333
      <fi.Mreqd>   = <fi.Minlet>                                                QpDHW  334
      <fi.Treqd>   = <pq:PROCESS-T>                                             QpDHW  335
c                                                                               QpDHW  336
c              Check for convergence on outlet conditions                       QpDHW  337
      CALL CnvgCheck(1, <pq;SupplyHsty>)                                        QpDHW  338
c                                                                               QpDHW  339
c                                                                               QpDHW  340
c ============ DESIGN CALCULATIONS - RECONCILIATION =========================== QpDHW  341
      CASE (119)                                                                QpDHW  342
                                                                                QpDHW  343
      <pq;Msupply> = <fi.Minlet>                                                QpDHW  344
c                                                                               QpDHW  345
c                                                                               QpDHW  346
c ============ ATTACHMENTS ==================================================== QpDHW  347
c                                                                               QpDHW  348
c              Initial attachments                                              QpDHW  349
      CASE (201)                                                                QpDHW  350
c              Component pointers, schedules and curves                         QpDHW  351
        <pq:LOOP>          = Jcomponent( 2, <pq:LOOP>)                          QpDHW  352
c future<pq:SUPPLY-CKT>    = Jcomponent(28, <pq:SUPPLY-CKT>)                    QpDHW  353
c future<pq:RETURN-CKT>    = Jcomponent(28, <pq:RETURN-CKT>)                    QpDHW  354
        <pq:AUX-METER>     = Jcomponent(13, <pq:AUX-METER>)                     QpDHW  355
        <pq:COST-DATA>     = Jcomponent(18, <pq:COST-DATA>)                     QpDHW  356
        <pq:PROCESS-SCH>   = Jsched(<pq:PROCESS-SCH>)                           QpDHW  357
        <pq:AUX-SCH>       = Jsched(<pq:AUX-SCH>)                               QpDHW  358
        <pq:PROCESS-ZONE>  = Jzone(<pq:PROCESS-ZONE>)                           QpDHW  359
                                                                                QpDHW  360
c              Second level of attachments                                      QpDHW  361
      CASE (202)                                                                QpDHW  362
c              Recirculation balance valve                                      QpDHW  363
      IF (<pq:RECIRC-FLOW> .GT. 0.)                                             QpDHW  364
     &  Call NewFluidBypass(Jpq, Jpl,                                           QpDHW  365
     &         <pq:BALANCE-VALVE>, <pq:RECIRC-FLOW>, <pq:BALANCE-HEAD>,         QpDHW  366
     &         <pl;SupplyCkt>, <pl;ReturnCkt>)                                  QpDHW  367
                                                                                QpDHW  368
c              Create nodes                                                     QpDHW  369
      CASE (203)                                                                QpDHW  370
c              Plant nodes                                                      QpDHW  371
        pqMult = <pq:MULTIPLIER>                                                QpDHW  372
        <pq;SupplyInNode>  = NewNode(1, Jpq,0,Jpq,<pl;SupplyCkt>,               QpDHW  373
     &                                        51,1,<pq:END-USE>, pqMult)        QpDHW  374
c              Auxiliary meter                                                  QpDHW  375
        Jme = <pq:AUX-METER>                                                    QpDHW  376
        <pq:AUX-METER> = NewNode(1, Jpq,0,Jpq,Jme, 11,2,7, pqMult)              QpDHW  377
c              Zonal attachments                                                QpDHW  378
        IF (<pq:PROCESS-ZONE> .GT. 0)  THEN                                     QpDHW  379
          ZP1 = <pq:PROCESS-ZONE>            ! zone pointer                     QpDHW  380
c              Zone sensible and latent heat gains                              QpDHW  381
          IF (<pq:CONVECTIVE> .GT. 0. .OR. <pq:AUX-CONVECTIV> .GT. 0.)          QpDHW  382
     &      <pq;QconvNode> = NewNode(1, 0,0,Jpq,ZP1, 31,1,0, pqMult)            QpDHW  383
          IF (<pq:RADIATIVE> .GT. 0.  .OR.  <pq:AUX-RADIATIVE> .GT. 0.)         QpDHW  384
     &      <pq;QradNode>  = NewNode(1, 0,0,Jpq,ZP1, 33,1,0, pqMult)            QpDHW  385
          IF (<pq:LATENT> .GT. 0.  .OR.  <pq:AUX-LATENT> .GT. 0.)               QpDHW  386
     &      <pq;QlatNode>  = NewNode(1, 0,0,Jpq,ZP1, 32,1,0, pqMult)            QpDHW  387
        ENDIF                                                                   QpDHW  388
c                                                                               QpDHW  389
c              Links, lists                                                     QpDHW  390
      CASE (205)                                                                QpDHW  391
        CALL ListNodes(<pq;Nodes>, Jpq,0,0,0, 0,0)                              QpDHW  392
c                                                                               QpDHW  393
c              Histories                                                        QpDHW  394
      CASE (208)                                                                QpDHW  395
c              Supply history                                                   QpDHW  396
        KliX = 0                                                                QpDHW  397
        Call ListXNodes(<pq;Nodes>, KliX)                                       QpDHW  398
        <pq;SupplyHsty> = NewHistory(Jpq,0,Jpq, KliX, <pq;Nodes>,               QpDHW  399
     &                        3, 5, 1.5,                                        QpDHW  400
     &                        <#fi.Minlet2>,  <sp:ERROR-FLOW>, 2,               QpDHW  401
     &                        <#fi.Mreqd>  ,  <sp:ERROR-FLOW>, 2,               QpDHW  402
     &                        0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0)                   QpDHW  403
c                                                                               QpDHW  404
c              History lists                                                    QpDHW  405
      CASE (209)                                                                QpDHW  406
c              Component histories                                              QpDHW  407
        CALL ListHstys(<pq;Hstys>, 0, 0, Jpq)                                   QpDHW  408
c                                                                               QpDHW  409
c              Dump pointers                                                    QpDHW  410
      CASE (210)                                                                QpDHW  411
        IF (<pq;Previous> .EQ. 0)  WRITE (IOUTPT, 9201)                         QpDHW  412
        WRITE (IOUTPT, 9202)  (<pq:NAME>,II=1,8),                               QpDHW  413
     &    Jpq, <pq;SupplyInNode>, <pq;SupplyOutNode>,                           QpDHW  414
     &    <pq;QconvNode>, <pq;QradNode>, <pq;QlatNode>                          QpDHW  415
c                                                                               QpDHW  416
c                                                                               QpDHW  417
      END SELECT  ! Mode                                                        QpDHW  418
c                                                                               QpDHW  419
      RETURN                                                                    QpDHW  420
c                                                                               QpDHW  421
c              Message formats                                                  QpDHW  422
 9001 FORMAT(                                                                   QpDHW  423
     &14x,'Process-Load: ',8A4,' has a sum of convective'              /        QpDHW  424
     &14x,'radiative, and latent fractions greater than 1.0'           /        QpDHW  425
     &14x,'Total: ',F5.3                                               )        QpDHW  426
 9002 FORMAT(                                                                   QpDHW  427
     &14x,'Process-Load: ',8A4,' has a sum of convective'              /        QpDHW  428
     &14x,'radiative, and latent fractions greater than 1.0'           /        QpDHW  429
     &14x,'Auxiliary Total: ',F5.3                                     )        QpDHW  430
 9003 FORMAT(                                                                   QpDHW  431
     &14x,'Process-Load: ',8A4,' has a design supply'                  /        QpDHW  432
     &14x,'head higher than available from the plant'                  /        QpDHW  433
     &14x,'Required, Available:',2F10.1                                )        QpDHW  434
 9102 FORMAT(                                                                   QpDHW  435
     &14x,'Process-Load: ',8A4,' has a required supply'                /        QpDHW  436
     &14x,'temperature lower than available.  Not all of the process'  /        QpDHW  437
     &14x,'load will be satisfied.  See report PS-H for a summary of'  /        QpDHW  438
     &14x,'overloads.  First occurrence:', I2,2('/',I2)                )        QpDHW  439
 9201 FORMAT(/                                                                  QpDHW  440
     &' PROCESS-LOADs                          Jpq       Kfi'  ,                QpDHW  441
     &'       Kfo     Qconv      Qrad      Qlat'                       /        QpDHW  442
     &1x,32('-'),6('  --------')                                       )        QpDHW  443
 9202 FORMAT(1x,8A4,6I10                                               )        QpDHW  444
      END                                                                       QpDHW  445
      SUBROUTINE Process_Refg(Mode, Knx)                                        QpRfg    2
c                                                                               QpRfg    3
c              Simulates a process load on a refrigeration system               QpRfg    4
c                                                                               QpRfg    5
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /Attach/ NameAttachments(8,100,3), NumRowsOfAttachments           /Attach/ 2
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /MISCD / TEMPS(4,4096),CONS(5),TEMPSL(4096),                      /MISCD/  2
     1                 BLDGQH,BLDGQC,BLDGQL,BLDGP,BPMULT,                       /MISCD/  3
     2                 DBTMIN,DBTMAX,WMIN,WMAX,NSPZ(4096),                      /MISCD/  4
     3                 DQ, DTP, DTR, DTS, FPI, PLRCC , POM, TC2, TDM,           /MISCD/  5
     4                 TRA,WCOL,WCOLM,WMM,YPI,KWBTU,BTUKW,UNFILD,Unusedm        /MISCD/  6
      REAL             KWBTU                                                    /MISCD/  7
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               QpRfg   15
      DATA IdNode /4H$Kno/                                                      /IdNode/ 2
c                                                                               QpRfg   17
      INTEGER  Xri, Xro, ZP1, rH                                                QpRfg   18
      REAL     Msupply, MsupplyMax, Mmax1, Mmax2                                QpRfg   19
      INTEGER  Routine(4)                                                       QpRfg   20
      DATA     Routine    /4HProc,4Hess_,4HRefg,4H    /                         QpRfg   21
c                                                                               QpRfg   22
      IF (<nx;Ident> .EQ. IdNode)  THEN                                         QpRfg   23
        Jpq = <nx;Component>                                                    QpRfg   24
      ELSE                                                                      QpRfg   25
        Jpq = Knx                                                               QpRfg   26
      ENDIF                                                                     QpRfg   27
c                                                                               QpRfg   28
      Jre = <pq;Refrigerant>             ! Refrigerant                          QpRfg   29
      Kri = <pq;SupplyInNode>            ! Refrigerant liquid                   QpRfg   30
      Xri = <ri;Xnode>                   ! Xfaced liquid                        QpRfg   31
      Kro = <pq;SupplyOutNode>           ! Refrigerant suction                  QpRfg   32
      Xro = <ro;Xnode>                   ! Xfaced suction                       QpRfg   33
      Khx = <pq;HX>                      ! Heat-exchanger                       QpRfg   34
c                                                                               QpRfg   35
      SELECT CASE (Mode)                                                        QpRfg   36
c                                                                               QpRfg   37
c                                                                               QpRfg   38
c ============ HOURLY INITIALIZATION ========================================== QpRfg   39
      CASE (10)                                                                 QpRfg   40
c                                                                               QpRfg   41
      CALL ZeroAA(<#pq~HrZeroStart..>, <#pq~HrZeroEnd....>)                     QpRfg   42
c                                                                               QpRfg   43
c              Process load                                                     QpRfg   44
      <pq.PLRprocess> = MAX(0., SchVal(<pq:PROCESS-SCH>))                       QpRfg   45
      <pq.Qprocess>   = <pq;Load> * <pq.PLRprocess>                             QpRfg   46
      IF (<pq:PROCESS-DT> .EQ. 0.)  THEN                                        QpRfg   47
c              uniform temperature load                                         QpRfg   48
        <pq.DemTi> = <pq:PROCESS-T>                                             QpRfg   49
      ELSE                                                                      QpRfg   50
c              non-uniform temperature load                                     QpRfg   51
        <pq.DemTi> = <pq:PROCESS-T> + <pq:PROCESS-DT>*<pq.PLRprocess>           QpRfg   52
      ENDIF                                                                     QpRfg   53
c                                                                               QpRfg   54
c                                                                               QpRfg   55
c ============ HOURLY SIMULATION ============================================== QpRfg   56
      CASE (30,31)                                                              QpRfg   57
c                                                                               QpRfg   58
      <pq.Qoverload> = 0.                                                       QpRfg   59
c                                                                               QpRfg   60
c              Skip if no process load                                          QpRfg   61
      IF (<pq.Qprocess> .EQ. 0.)  THEN                                          QpRfg   62
        <ro.Moutlet>  = 0.                                                      QpRfg   63
        <ro.Mreqd>    = 0.                                                      QpRfg   64
        GOTO 3290                                                               QpRfg   65
      ENDIF                                                                     QpRfg   66
c                                                                               QpRfg   67
c              Get required suction conditions                                  QpRfg   68
      Call ProcessLoad                                                          QpRfg   69
c                                                                               QpRfg   70
c              Minimum possible suction temperature                             QpRfg   71
      SSTmin = RefgT_fP(Jre, <Xro.Poutlet>)                                     QpRfg   72
      IF (SSTmin .GE. <pq.DemTi>)  THEN                                         QpRfg   73
c              suction is warmer than entering process - no load                QpRfg   74
        <pq.Qoverload> = <pq.Qprocess>                                          QpRfg   75
        <ro.Moutlet>   = 0.                                                     QpRfg   76
        GOTO 3290                                                               QpRfg   77
      ELSEIF (<ro.Preqd> .LT. <Xro.Poutlet>)  THEN                              QpRfg   78
c              temperature setpoint can't be met; take what we can              QpRfg   79
        Call FloatLoad                                                          QpRfg   80
        <pq.Qoverload> = <pq.Qprocess> - Qfloat                                 QpRfg   81
      ENDIF                                                                     QpRfg   82
c              Pressure as regulated by temperature control valve               QpRfg   83
      <pq;Psuction> = RefgP_fT(Jre, MAX(SST, SSTmin))                           QpRfg   84
c                                                                               QpRfg   85
c              Check load-based flow against pressure-based flow                QpRfg   86
      IF (<ro.Moutlet> .GT. 0.)  THEN                                           QpRfg   87
c              Maximum suction flow across load                                 QpRfg   88
        dP    = MAX(0., <Xri.Pinlet> - <Xro.Poutlet>)                           QpRfg   89
        Mmax1 = <pq;Msupply> * (dP*<pq;1/dPsupply>)**(1./1.87)                  QpRfg   90
c              Maximum suction flow, inlet to control valve                     QpRfg   91
        dP    = MAX(0., <Xri.Pinlet> - <pq;Psuction>)                           QpRfg   92
        Mmax2 = <pq;Msupply> * (dP*<pq;1/dPhx>)**(1./1.87)                      QpRfg   93
        MsupplyMax = MIN(Mmax1, Mmax2)                                          QpRfg   94
        IF (<ro.Moutlet> .GT. MsupplyMax)  THEN                                 QpRfg   95
c              Load-based suction flow is greater than what the                 QpRfg   96
c              liquid/suction pressure differential permits                     QpRfg   97
          IF (MsupplyMax .EQ. 0.)  THEN                                         QpRfg   98
c              no suction pressure differential                                 QpRfg   99
            <pq.Qoverload> = <pq.Qprocess>                                      QpRfg  100
            <ro.Moutlet>   = 0.                                                 QpRfg  101
          ELSE                                                                  QpRfg  102
c              process is operating at reduced capacity                         QpRfg  103
            <ro.Moutlet> = MsupplyMax                                           QpRfg  104
c              Suction pressure, adjusted for control valve                     QpRfg  105
            dP            = (<ro.Moutlet> * <pq;1/Msupply>    )**1.87           QpRfg  106
     &                    * (     Voutlet * <pq;OutletD>)**1.6                  QpRfg  107
            dP            = dP * <pq;CtrlValveDP>                               QpRfg  108
            <pq;Psuction> = <Xro.Poutlet> + dP                                  QpRfg  109
            SST           = RefgT_fP(Jre, <pq;Psuction>)                        QpRfg  110
c              Maximum possible heat transfer, assuming the refg                QpRfg  111
c              temperature approaches the process inlet temperature             QpRfg  112
            dTsuper      = <pq.DemTi> - SST                                     QpRfg  113
            <ro.Houtlet> = RefgH_Vapor_fTS(Jre, SST, dTsuper)                   QpRfg  114
            QhxMax       = <ro.Moutlet> * (<ro.Houtlet>-<Xri.Hinlet>)           QpRfg  115
c              skip if the extra superheat can handle load                      QpRfg  116
            IF (QhxMax .GE. <pq.Qprocess>)  THEN                                QpRfg  117
              <ro.Houtlet> = <Xri.Hinlet> + <pq.Qprocess>/<ro.Moutlet>          QpRfg  118
            ELSE                                                                QpRfg  119
              <pq.Qoverload> = <pq.Qprocess> - QhxMax                           QpRfg  120
              <hx;Qnet>      = QhxMax                                           QpRfg  121
            ENDIF                                                               QpRfg  122
          ENDIF  ! MsupplyMax                                                   QpRfg  123
        ENDIF    ! ro,Moutlet .gt. MsupplyMax                                   QpRfg  124
      ENDIF      ! ro,Moutlet .gt. 0.                                           QpRfg  125
c                                                                               QpRfg  126
c              Re-entry point for no load                                       QpRfg  127
 3290 CONTINUE                                                                  QpRfg  128
                                                                                QpRfg  129
c              Refrigerant conditions at inlet                                  QpRfg  130
      <ri.Minlet>  = <ro.Moutlet>                                               QpRfg  131
      <ri.Qinlet>  = <ri.Minlet> * (<Xri.Hinlet>-AA(<pq;RefgHrefPtr>))          QpRfg  132
      Qnet         = <pq.Qprocess> - <pq.Qoverload>                             QpRfg  133
      <ro.Qoutlet> = <ri.Qinlet> + Qnet                                         QpRfg  134
c              required conditions at inlet                                     QpRfg  135
      <ri.Mreqd>   = <ro.Mreqd>                                                 QpRfg  136
      dPhx         = <pq:SUPPLY-DP> * (<ro.Mreqd>*<pq;1/Msupply>)**1.87         QpRfg  137
      <ri.Preqd>   = MIN(<re;Pmax>, <pq;Psuction> + dPhx)                       QpRfg  138
c              Liquid should be delivered no warmer than saturation             QpRfg  139
      <ri.Treqd>   = RefgT_fP(Jre, <Xri.Pinlet>)                                QpRfg  140
      CALL CnvgCheck(1, <pq;SupplyHsty>)                                        QpRfg  141
c                                                                               QpRfg  142
c              Auxiliary power                                                  QpRfg  143
      IF (<pq:AUX-KW> .EQ. 0.)  THEN                                            QpRfg  144
        Qaux = 0.                                                               QpRfg  145
      ELSE                                                                      QpRfg  146
        SELECT CASE (<pq:AUX-MODE>)                                             QpRfg  147
          CASE (1)  ! Always                                                    QpRfg  148
            AuxKWh = <pq:AUX-KW>                                                QpRfg  149
          CASE (2)  ! When on                                                   QpRfg  150
            IF (<pq.Qprocess> .NE. 0.)  THEN                                    QpRfg  151
              AuxKWh = <pq:AUX-KW>                                              QpRfg  152
            ELSE                                                                QpRfg  153
              AuxKWh = 0.                                                       QpRfg  154
            ENDIF                                                               QpRfg  155
          CASE (3)  ! When off                                                  QpRfg  156
            IF (<pq.Qprocess> .EQ. 0.)  THEN                                    QpRfg  157
              AuxKWh = <pq:AUX-KW>                                              QpRfg  158
            ELSE                                                                QpRfg  159
              AuxKWh = 0.                                                       QpRfg  160
            ENDIF                                                               QpRfg  161
          CASE (4)  ! Scheduled                                                 QpRfg  162
            AuxKWh = <pq:AUX-KW> * SchVal(<pq:AUX-SCH>)                         QpRfg  163
        END SELECT                                                              QpRfg  164
        Kmd = <pq:AUX-METER>                                                    QpRfg  165
        Kmx = <md;Xnode>                                                        QpRfg  166
        IF (AuxKWh .GT. 0.)  THEN                                               QpRfg  167
          IF (ABS(1. - <md.Elec>/AuxKWh) .GT. <sp:ERROR-LOAD>)                  QpRfg  168
     &      <mx.IterFlag> = Jpq                                                 QpRfg  169
        ELSE                                                                    QpRfg  170
          IF (<md.Elec> .GT. 0.)  <mx.IterFlag> = Jpq                           QpRfg  171
        ENDIF                                                                   QpRfg  172
        <md.Elec> = AuxKWh                                                      QpRfg  173
        Qaux      = AuxKWh * BtuKW                                              QpRfg  174
      ENDIF  ! pq:AUX-KW                                                        QpRfg  175
c                                                                               QpRfg  176
c              Allocate process load to zone                                    QpRfg  177
      IF (<pq:PROCESS-ZONE> .GT. 0)  THEN                                       QpRfg  178
c              convective                                                       QpRfg  179
        IF (<pq;QconvNode> .GT. 0)  THEN                                        QpRfg  180
          Kex            = <pq;QconvNode>                                       QpRfg  181
          <ex.Qextract>  = Qnet * <pq:CONVECTIVE>                               QpRfg  182
     &                   - Qaux * <pq:AUX-CONVECTIV>                            QpRfg  183
        ENDIF                                                                   QpRfg  184
c              radiative                                                        QpRfg  185
        IF (<pq;QradNode> .GT. 0)  THEN                                         QpRfg  186
          Kex            = <pq;QradNode>                                        QpRfg  187
          <ex.Qextract>  = Qnet * <pq:RADIATIVE>                                QpRfg  188
     &                   - Qaux * <pq:AUX-RADIATIVE>                            QpRfg  189
        ENDIF                                                                   QpRfg  190
c              latent                                                           QpRfg  191
        IF (<pq;QlatNode> .GT. 0)  THEN                                         QpRfg  192
          Kex            = <pq;QlatNode>                                        QpRfg  193
          <ex.MWextract> = Qnet * <pq:LATENT>                                   QpRfg  194
     &                   - Qaux * <pq:AUX-LATENT>                               QpRfg  195
          <ex.MWextract> = -<ex.MWextract> / 1061.                              QpRfg  196
        ENDIF                                                                   QpRfg  197
      ENDIF  ! pq:PROCESS-ZONE                                                  QpRfg  198
c                                                                               QpRfg  199
c                                                                               QpRfg  200
c ============ STATISTICS - HOURLY DATA ======================================= QpRfg  201
      CASE (42)                                                                 QpRfg  202
c                                                                               QpRfg  203
c              Check if sufficient refrigerant available                        QpRfg  204
      IF (<ro.Moutlet> .LT. <ro.Mreqd>)  THEN                                   QpRfg  205
        IF (<pq.OverloadHours> .EQ. 0)  THEN                                    QpRfg  206
          CALL MSGSIM(-2,II,II,II,II)                                           QpRfg  207
          WRITE (IOUTPT,9102)  (<pq:NAME>,II=1,8), IMO, IDAY, IHR               QpRfg  208
        ENDIF                                                                   QpRfg  209
        <pq.OverloadHours> = <pq.OverloadHours> + 1                             QpRfg  210
      ENDIF                                                                     QpRfg  211
c                                                                               QpRfg  212
c                                                                               QpRfg  213
c ============ REPORT CREATION ================================================ QpRfg  214
      CASE (50)                                                                 QpRfg  215
c                                                                               QpRfg  216
c              statistics blocks                                                QpRfg  217
      Kmd        = <pq:AUX-METER>                                               QpRfg  218
      Ks2Load    = NewStat2(Jpq,  <+pq.Qprocess>, 0, 1.)                        QpRfg  219
      Ks2Flow    = NewStat2(Kro,   <+ro.Moutlet>, 0, 1.)                        QpRfg  220
      Ks2Aux     = NewStat2(Kmd,      <+md.Elec>, 0, 1.)                        QpRfg  221
      Ks2Over    = NewStat2(Jpq, <+pq.Qoverload>, 0, 1.)                        QpRfg  222
      Ks5LoadBin = NewStat5(Jpq,  <+pq.Qprocess>, 0, 1.)                        QpRfg  223
      Ks5FlowBin = NewStat5(Kro,   <+ro.Moutlet>, 0, 1.)                        QpRfg  224
c                                                                               QpRfg  225
c              Create the type "H" report                                       QpRfg  226
      IF (<pq:REPORTS> .GT. 0  .AND.  IREPRT(3,23) .GT. 0)                      QpRfg  227
     &  <pq;PS-H> = NewReport_H(Jpq, 141,                                       QpRfg  228
     &                          4, 5, 6,                                        QpRfg  229
     &                          Ks2Load, Ks2Flow, Ks2Aux, Ks2Over,              QpRfg  230
     &                          Ks5LoadBin, Ks5FlowBin, 0,                      QpRfg  231
     &                          0, 0, 0)                                        QpRfg  232
c                                                                               QpRfg  233
c                                                                               QpRfg  234
c ============ REPORT ORDER =================================================== QpRfg  235
      CASE (52)                                                                 QpRfg  236
c                                                                               QpRfg  237
      Call Report_H(Mode, <pq;PS-H>)                                            QpRfg  238
c                                                                               QpRfg  239
c                                                                               QpRfg  240
c ============ REPORTS - VERIFICATION DATA ==================================== QpRfg  241
      CASE (54)                                                                 QpRfg  242
c                                                                               QpRfg  243
c              Output design information                                        QpRfg  244
      IF (<pq;PS-H> .ne. 0)  THEN                                               QpRfg  245
        rH = <pq;PS-H>                                                          QpRfg  246
        WRITE (IREPFL) 4,<rH;Iuniq>,1,1,0                                       QpRfg  247
        CALL GetAttachments(Jpq, 2)                                             QpRfg  248
        WRITE (IREPFL)  23,<rH;Iuniq>,1,2,19,                                   QpRfg  249
     &    (NameAttachments(II,1,1),II=1,8),                                     QpRfg  250
     &    (NameAttachments(II,1,2),II=1,8),                                     QpRfg  251
     &    <pq;Load>,<ro.Moutlet>,<ro.Treqd>                                     QpRfg  252
        DO  Irow=2,NumRowsOfAttachments                                         QpRfg  253
          WRITE (IREPFL)  20,<rH;Iuniq>,1,3,16,                                 QpRfg  254
     &      (NameAttachments(II,Irow,1),II=1,8),                                QpRfg  255
     &      (NameAttachments(II,Irow,2),II=1,8)                                 QpRfg  256
        ENDDO                                                                   QpRfg  257
      ENDIF                                                                     QpRfg  258
c                                                                               QpRfg  259
c                                                                               QpRfg  260
c ============ REPORTS - YEARLY SUMMARY (SPECIAL) ============================= QpRfg  261
      CASE (58)                                                                 QpRfg  262
c                                                                               QpRfg  263
c              Setpoint overload                                                QpRfg  264
      IF (<pq;PS-H> .ne. 0)  THEN                                               QpRfg  265
        rH = <pq;PS-H>                                                          QpRfg  266
        WRITE (IREPFL) 5,<rH;Iuniq>,1,7,1, <pq.OverloadHours>                   QpRfg  267
      ENDIF                                                                     QpRfg  268
c                                                                               QpRfg  269
c                                                                               QpRfg  270
c ============ HOURLY REPORTS - HOURLY DATA =================================== QpRfg  271
      CASE (62)                                                                 QpRfg  272
c                                                                               QpRfg  273
      IF (<pq;HourRepBuf> .EQ. 0)  RETURN                                       QpRfg  274
c                                                                               QpRfg  275
      Kmd   = <pq:AUX-METER>                                                    QpRfg  276
      IAptr = <pq;HourRepBuf> - 1                                               QpRfg  277
c                                                                               QpRfg  278
      AA(IAptr+1) = <pq.Qprocess>                                               QpRfg  279
      AA(IAptr+2) = <ro.Moutlet>                                                QpRfg  280
      AA(IAptr+4) = <md.Elec>                                                   QpRfg  281
      AA(IAptr+5) = <pq.Qoverload>                                              QpRfg  282
      AA(IAptr+6) = <pq.SSTreqd>                                                QpRfg  283
c                                                                               QpRfg  284
c                                                                               QpRfg  285
c ============ DESIGN CALCULATIONS - INITIALIZATION =========================== QpRfg  286
      CASE (110)                                                                QpRfg  287
c                                                                               QpRfg  288
      <pq;Load>     = <pq:PROCESS-LOAD>                                         QpRfg  289
      <pq.Qprocess> = <pq:PROCESS-LOAD>                                         QpRfg  290
c                                                                               QpRfg  291
c              Check heat gains for consistency                                 QpRfg  292
      Total = <pq:CONVECTIVE> + <pq:RADIATIVE> + <pq:LATENT>                    QpRfg  293
      IF (Total .GT. 1.000001)  THEN                                            QpRfg  294
        CALL MSGSIM(-1,II,II,II,II)                                             QpRfg  295
        WRITE (IOUTPT, 9001)  (<pq:NAME>,II=1,8), Total                         QpRfg  296
        CALL MessageBox( NULL,                                                  QpRfg  297
     &    'Invalid heat gain fraction'//char(0),                                QpRfg  298
     &    'Process-Load Errors'//char(0),                                       QpRfg  299
     &    MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                  QpRfg  300
        IwinReturn = 1                                                          QpRfg  301
        RETURN                                                                  QpRfg  302
      ENDIF                                                                     QpRfg  303
c              repeat for auxiliary zonal heat gains                            QpRfg  304
      Total = <pq:AUX-CONVECTIV> + <pq:AUX-RADIATIVE> + <pq:AUX-LATENT>         QpRfg  305
      IF (Total .GT. 1.000001)  THEN                                            QpRfg  306
        CALL MSGSIM(-1,II,II,II,II)                                             QpRfg  307
        WRITE (IOUTPT, 9002)  (<pq:NAME>,II=1,8), Total                         QpRfg  308
        CALL MessageBox( NULL,                                                  QpRfg  309
     &    'Invalid aux heat gain fraction'//char(0),                            QpRfg  310
     &    'Process-Load Errors'//char(0),                                       QpRfg  311
     &    MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                  QpRfg  312
        IwinReturn = 1                                                          QpRfg  313
        RETURN                                                                  QpRfg  314
      ENDIF                                                                     QpRfg  315
c                                                                               QpRfg  316
c              Auxiliary power                                                  QpRfg  317
      IF (<pq:AUX-KW> .EQ. 0.)  THEN                                            QpRfg  318
        Qaux = 0.                                                               QpRfg  319
      ELSE                                                                      QpRfg  320
        AuxKWh    = <pq:AUX-KW>                                                 QpRfg  321
        Qaux      = AuxKWh * BtuKW                                              QpRfg  322
        Kmd       = <pq:AUX-METER>                                              QpRfg  323
        <md.Elec> = AuxKWh                                                      QpRfg  324
      ENDIF  ! pq:AUX-KW                                                        QpRfg  325
c                                                                               QpRfg  326
c              Allocate process load to zone                                    QpRfg  327
      IF (<pq:PROCESS-ZONE> .GT. 0)  THEN                                       QpRfg  328
c              convective                                                       QpRfg  329
        IF (<pq;QconvNode> .GT. 0)  THEN                                        QpRfg  330
          Kex            = <pq;QconvNode>                                       QpRfg  331
          <ex.Qextract>  = <pq.Qprocess> * <pq:CONVECTIVE>                      QpRfg  332
     &                   - Qaux          * <pq:AUX-CONVECTIV>                   QpRfg  333
        ENDIF                                                                   QpRfg  334
c              radiative                                                        QpRfg  335
        IF (<pq;QradNode> .GT. 0)  THEN                                         QpRfg  336
          Kex            = <pq;QradNode>                                        QpRfg  337
          <ex.Qextract>  = <pq.Qprocess> * <pq:RADIATIVE>                       QpRfg  338
     &                   - Qaux          * <pq:AUX-RADIATIVE>                   QpRfg  339
        ENDIF                                                                   QpRfg  340
c              latent                                                           QpRfg  341
        IF (<pq;QlatNode> .GT. 0)  THEN                                         QpRfg  342
          Kex            = <pq;QlatNode>                                        QpRfg  343
          <ex.MWextract> = <pq.Qprocess> * <pq:LATENT>                          QpRfg  344
     &                   - Qaux          * <pq:AUX-LATENT>                      QpRfg  345
          <ex.MWextract> = -<ex.MWextract> / 1061.                              QpRfg  346
        ENDIF                                                                   QpRfg  347
      ENDIF  ! pq:PROCESS-ZONE                                                  QpRfg  348
c                                                                               QpRfg  349
c                                                                               QpRfg  350
c ============ DESIGN CALCULATIONS - REFRIGERANT SIDE ========================= QpRfg  351
      CASE (111)                                                                QpRfg  352
c                                                                               QpRfg  353
c              required suction pressure                                        QpRfg  354
      Pctrl            = RefgP_fT(Jre, <pq:SUCTION-T>)                          QpRfg  355
      <pq;Psuction> = Pctrl                                                     QpRfg  356
c                                                                               QpRfg  357
c              Refrigerant conditions at outlet to suction                      QpRfg  358
      <ro.Houtlet> = RefgH_Vapor_fSP(Jre, <pq:SUPERHEAT-DT>, Pctrl)             QpRfg  359
      <ro.Moutlet> = <pq;Load> / (<ro.Houtlet>-<Xri.Hinlet>)                    QpRfg  360
      <ro.Mreqd>   = MAX(0.000001, <ro.Moutlet>)                                QpRfg  361
c              effect of control valve                                          QpRfg  362
      <pq;CtrlValveDP> = Pctrl                                                  QpRfg  363
     &                 - RefgP_fT(Jre,<pq:SUCTION-T>-<pq:CTRL-VALVE-DT>)        QpRfg  364
      <ro.Preqd>       = Pctrl - <pq;CtrlValveDP>                               QpRfg  365
c                                                                               QpRfg  366
      <ri.Qinlet>  = <ro.Moutlet> * (<Xri.Hinlet>-AA(<pq;RefgHrefPtr>))         QpRfg  367
      <ro.Qoutlet> = <ri.Qinlet> + <pq;Load>                                    QpRfg  368
                                                                                QpRfg  369
c              Refrigerant conditions at inlet from liquid                      QpRfg  370
      <ri.Minlet> = <ro.Moutlet>                                                QpRfg  371
      <ri.Mreqd>  = <ro.Moutlet>                                                QpRfg  372
      <ri.Preqd>  = Pctrl + <pq:SUPPLY-DP>                                      QpRfg  373
c              Liquid should be delivered no warmer than saturation             QpRfg  374
      IF (<Xri.Pinlet> .GT. 0.)  THEN                                           QpRfg  375
        <ri.Treqd> = RefgT_fP(Jre,<Xri.Pinlet>)                                 QpRfg  376
      ELSE                                                                      QpRfg  377
        <ri.Treqd> = 105.                                                       QpRfg  378
      ENDIF                                                                     QpRfg  379
      CALL CnvgCheck(1, <pq;SupplyHsty>)                                        QpRfg  380
c                                                                               QpRfg  381
c                                                                               QpRfg  382
c ============ DESIGN CALCULATIONS - RECONCILIATION =========================== QpRfg  383
      CASE (119)                                                                QpRfg  384
c                                                                               QpRfg  385
c              warn if design suction impossible to achieve                     QpRfg  386
      IF (<pq;Psuction> .LT. <Xro.Poutlet>*0.99)  THEN                          QpRfg  387
        CALL MSGSIM(-2,II,II,II,II)                                             QpRfg  388
        WRITE (IOUTPT,9003) (<pq:NAME>,II=1,8),                                 QpRfg  389
     &                      RefgT_fP(Jre, <pq;Psuction>),                       QpRfg  390
     &                      RefgT_fP(Jre, <Xro.Poutlet>)                        QpRfg  391
      ENDIF                                                                     QpRfg  392
c                                                                               QpRfg  393
      <pq;Msupply> = <ro.Moutlet>                                               QpRfg  394
      IF (<ro.Moutlet> .GT. 0.)    <pq;1/Msupply> = 1./<ro.Moutlet>             QpRfg  395
      IF (<pq:SUPPLY-DP> .GT. 0.)  <pq;1/dPhx>    = 1./<pq:SUPPLY-DP>           QpRfg  396
c              Total pressure drop thru suction side                            QpRfg  397
      dP = <pq:SUPPLY-DP> + <pq;CtrlValveDP>                                    QpRfg  398
      IF (dP .GT. 0.)  <pq;1/dPsupply> = 1. / dP                                QpRfg  399
c                                                                               QpRfg  400
c              Design refrigerant volume and density at outlet                  QpRfg  401
      <pq;OutletV> = RefgV_fPH(Jre, <Xro.Poutlet>, <ro.Houtlet>)                QpRfg  402
      <pq;OutletD> = 1.0 / <pq;OutletV>                                         QpRfg  403
c                                                                               QpRfg  404
c              Design the heat-exchanger                                        QpRfg  405
      Msupply    = MAX(1., <pq;Msupply>)                                        QpRfg  406
      <pq.DemTi> = <pq:PROCESS-T> + <pq:PROCESS-DT>                             QpRfg  407
      IF (<pq:PROCESS-DT> .GT. 0.)  THEN                                        QpRfg  408
        Cdemand  = <pq;Load> / <pq:PROCESS-DT>                                  QpRfg  409
      ELSE                                                                      QpRfg  410
        Cdemand  = 1.                                                           QpRfg  411
      ENDIF                                                                     QpRfg  412
      CALL HX_Design(Khx, <pq;Load>,                                            QpRfg  413
     &                      Msupply,   1.E20, <pq:SUCTION-T>,                   QpRfg  414
     &                           1., Cdemand,     <pq.DemTi>)                   QpRfg  415
      <pq;MaxMsupply> = Msupply * 1.5        ! maximum allowed supply flow      QpRfg  416
      CALL RefgT_Limits(Jre, <hx;MinSupResetT>, <hx;MaxSupResetT>)              QpRfg  417
c                                                                               QpRfg  418
c                                                                               QpRfg  419
c ============ ATTACHMENTS ==================================================== QpRfg  420
c                                                                               QpRfg  421
c              Initial attachments                                              QpRfg  422
      CASE (201)                                                                QpRfg  423
c              Component pointers, schedules and curves                         QpRfg  424
        <pq:LIQUID-CKT>    = Jcomponent(22, <pq:LIQUID-CKT>)                    QpRfg  425
        <pq:SUCTION-CKT>   = Jcomponent(22, <pq:SUCTION-CKT>)                   QpRfg  426
        <pq:AUX-METER>     = Jcomponent(13, <pq:AUX-METER>)                     QpRfg  427
        <pq:COST-DATA>     = Jcomponent(18, <pq:COST-DATA>)                     QpRfg  428
        <pq:PROCESS-SCH>   = Jsched(<pq:PROCESS-SCH>)                           QpRfg  429
        <pq:AUX-SCH>       = Jsched(<pq:AUX-SCH>)                               QpRfg  430
        <pq:PROCESS-ZONE>  = Jzone(<pq:PROCESS-ZONE>)                           QpRfg  431
c                                                                               QpRfg  432
c              Second level of attachments                                      QpRfg  433
      CASE (202)                                                                QpRfg  434
c              Check if cross-connected between two different systems           QpRfg  435
        CALL RefgX(Jpq, <pq:LIQUID-CKT>,<pq:SUCTION-CKT>,0)                     QpRfg  436
c              Get refrigerant pointer from refg plant                          QpRfg  437
        Jrc = <pq:LIQUID-CKT>                                                   QpRfg  438
        Jrs = <rc:/RefgSystem/>                                                 QpRfg  439
        <pq;Refrigerant> = <rs:REFRIGERANT>                                     QpRfg  440
c                                                                               QpRfg  441
c              Fluid properties subcomponents                                   QpRfg  442
        <pq;ProcessProp> = NewFluidProperties(Jpq, 0, 0,                        QpRfg  443
     &                     0., 0., 0., 0.,                                      QpRfg  444
     &                     0., 0., 0., 0.,                                      QpRfg  445
     &                     0., 0., 0., 0., 0.)                                  QpRfg  446
        <pq;SupplyProp>  = NewFluidProperties(Jpq,Jrs,32,                       QpRfg  447
     &                     0., 0., 0., 0.,                                      QpRfg  448
     &                     0., 0., 0., 0.,                                      QpRfg  449
     &                     0., 0., 0., 0., 0.)                                  QpRfg  450
c                                                                               QpRfg  451
c              Heat-exchanger subcomponent                                      QpRfg  452
        IF (<pq:PROCESS-DT> .GT. 0.)  THEN                                      QpRfg  453
          iConfig = 0                      ! phase change one side              QpRfg  454
        ELSE                                                                    QpRfg  455
          iConfig = -1                     ! phase change both sides            QpRfg  456
        ENDIF                                                                   QpRfg  457
        <pq;HX> = NewHX(Jpq, iConfig,  0.,                                      QpRfg  458
     &               <pq;SupplyProp>, 0.4,                                      QpRfg  459
     &              <pq;ProcessProp>, 0.4)                                      QpRfg  460
c                                                                               QpRfg  461
c              Create nodes                                                     QpRfg  462
      CASE (203)                                                                QpRfg  463
c              Refrigerant nodes                                                QpRfg  464
        pqMult = <pq:MULTIPLIER>                                                QpRfg  465
        <pq;SupplyInNode>  = NewNode(1, Jpq,0,Jpq,<pq:LIQUID-CKT>,              QpRfg  466
     &                                       61,1,<pq:END-USE>, pqMult)         QpRfg  467
        <pq;SupplyOutNode> = NewNode(1, Jpq,0,Jpq,<pq:SUCTION-CKT>,             QpRfg  468
     &                                       62,2,<pq:END-USE>, pqMult)         QpRfg  469
c              Auxiliary meter                                                  QpRfg  470
        Jme = <pq:AUX-METER>                                                    QpRfg  471
        <pq:AUX-METER> = NewNode(1, Jpq,0,Jpq,Jme, 11,2,7, pqMult)              QpRfg  472
c              Zonal attachments                                                QpRfg  473
        IF (<pq:PROCESS-ZONE> .GT. 0)  THEN                                     QpRfg  474
          ZP1 = <pq:PROCESS-ZONE>            ! zone pointer                     QpRfg  475
c              Zone sensible and latent heat gains                              QpRfg  476
          IF (<pq:CONVECTIVE> .GT. 0. .OR. <pq:AUX-CONVECTIV> .GT. 0.)          QpRfg  477
     &      <pq;QconvNode> = NewNode(1, 0,0,Jpq,ZP1, 31,1,0, pqMult)            QpRfg  478
          IF (<pq:RADIATIVE> .GT. 0.  .OR.  <pq:AUX-RADIATIVE> .GT. 0.)         QpRfg  479
     &      <pq;QradNode>  = NewNode(1, 0,0,Jpq,ZP1, 33,1,0, pqMult)            QpRfg  480
          IF (<pq:LATENT> .GT. 0.  .OR.  <pq:AUX-LATENT> .GT. 0.)               QpRfg  481
     &      <pq;QlatNode>  = NewNode(1, 0,0,Jpq,ZP1, 32,1,0, pqMult)            QpRfg  482
        ENDIF                                                                   QpRfg  483
c                                                                               QpRfg  484
c              Links, lists                                                     QpRfg  485
      CASE (205)                                                                QpRfg  486
c              Get pointer to reference enthalpy from liquid trunk              QpRfg  487
        Jrc              = <pq:LIQUID-CKT>                                      QpRfg  488
        <pq;RefgHrefPtr> = IA_RefgHRef(<rc:/RefgSystem/>)                       QpRfg  489
        CALL ListNodes(<pq;Nodes>, Jpq,0,0,0, 0,0)                              QpRfg  490
c                                                                               QpRfg  491
c              Histories                                                        QpRfg  492
      CASE (208)                                                                QpRfg  493
c              Refrigerant history                                              QpRfg  494
        KliX = 0                                                                QpRfg  495
        Call ListXNodes(<pq;Nodes>, KliX)                                       QpRfg  496
        <pq;SupplyHsty> = NewHistory(Jpq,0,Jpq, KliX, <pq;Nodes>,               QpRfg  497
     &                         5, 3, 1.5,                                       QpRfg  498
     &                         <#ro.Moutlet>, <sp:ERROR-FLOW>, 2,               QpRfg  499
     &                         <#ro.Houtlet>, <sp:ERROR-H>   , 1,               QpRfg  500
     &                         <#ro.Mreqd>  , <sp:ERROR-FLOW>, 2,               QpRfg  501
     &                         <#ro.Preqd>  , <sp:ERROR-P>   , 1,               QpRfg  502
     &                         <#ri.Preqd>  , <sp:ERROR-P>   , 1,               QpRfg  503
     &                         <#ri.Treqd>  , <sp:ERROR-T>   , 1)               QpRfg  504
c                                                                               QpRfg  505
c              History lists                                                    QpRfg  506
      CASE (209)                                                                QpRfg  507
c              Component histories                                              QpRfg  508
        CALL ListHstys(<pq;Hstys>, 0, 0, Jpq)                                   QpRfg  509
c                                                                               QpRfg  510
c              Dump pointers                                                    QpRfg  511
      CASE (210)                                                                QpRfg  512
        IF (<pq;Previous> .EQ. 0)  WRITE (IOUTPT, 9201)                         QpRfg  513
        WRITE (IOUTPT, 9202)  (<pq:NAME>,II=1,8),                               QpRfg  514
     &    Jpq, <pq;SupplyInNode>, <pq;SupplyOutNode>,                           QpRfg  515
     &    <pq;QconvNode>, <pq;QradNode>, <pq;QlatNode>                          QpRfg  516
c                                                                               QpRfg  517
c                                                                               QpRfg  518
      END SELECT  ! Mode                                                        QpRfg  519
c                                                                               QpRfg  520
      RETURN                                                                    QpRfg  521
c                                                                               QpRfg  522
c              Message formats                                                  QpRfg  523
 9001 FORMAT(                                                                   QpRfg  524
     &14x,'Process-Load: ',8A4,' has a sum of convective'              /        QpRfg  525
     &14x,'radiative, and latent fractions greater than 1.0'           /        QpRfg  526
     &14x,'Total: ',F5.3                                               )        QpRfg  527
 9002 FORMAT(                                                                   QpRfg  528
     &14x,'Process-Load: ',8A4,' has a sum of convective'              /        QpRfg  529
     &14x,'radiative, and latent fractions greater than 1.0'           /        QpRfg  530
     &14x,'Auxiliary Total: ',F5.3                                     )        QpRfg  531
 9003 FORMAT(                                                                   QpRfg  532
     &14x,'Process-Load: ',8A4,' has a design suction'                 /        QpRfg  533
     &14x,'temperature lower than available from the suction group'    /        QpRfg  534
     &14x,'Required, Available:',2F10.1                                )        QpRfg  535
 9102 FORMAT(                                                                   QpRfg  536
     &14x,'Process-Load: ',8A4,' has a required supply'                /        QpRfg  537
     &14x,'temperature lower than available.  Not all of the process'  /        QpRfg  538
     &14x,'load will be satisfied.  See report PS-H for a summary of'  /        QpRfg  539
     &14x,'overloads.  First occurrence:', I2,2('/',I2)                )        QpRfg  540
 9201 FORMAT(/                                                                  QpRfg  541
     &' PROCESS-LOADs                          Jpq       Kri'  ,                QpRfg  542
     &'       Kro     Qconv      Qrad      Qlat'                       /        QpRfg  543
     &1x,32('-'),6('  --------')                                       )        QpRfg  544
 9202 FORMAT(1x,8A4,6I10                                               )        QpRfg  545
c                                                                               QpRfg  546
c                                                                               QpRfg  547
      CONTAINS                                                                  QpRfg  548
c ============== FloatLoad ==================================================== QpRfg  549
      Subroutine FloatLoad                                                      QpRfg  550
c                                                                               QpRfg  551
c              Calculates the process load and refrigerant flow when            QpRfg  552
c              the suction temperature is not sufficient to satisfy             QpRfg  553
c              the required load                                                QpRfg  554
c                                                                               QpRfg  555
c              Iterate to solve for heat transfer                               QpRfg  556
      DO  iFloat=1,100                                                          QpRfg  557
c              Available suction pressure, adjusted for pressure drop           QpRfg  558
c              of control valve                                                 QpRfg  559
        Voutlet       = RefgV_fPH(Jre, <Xro.Poutlet>, <ro.Houtlet>)             QpRfg  560
        dPctrl        = (Msupply * <pq;1/Msupply>    )**1.87                    QpRfg  561
     &                * (Voutlet * <pq;OutletD>)**1.6                           QpRfg  562
        dPctrl        = dPctrl * <pq;CtrlValveDP>                               QpRfg  563
        <pq;Psuction> = <Xro.Poutlet> + dPctrl                                  QpRfg  564
c              suction T at given suction pressure                              QpRfg  565
        SST = RefgT_fP(Jre, <pq;Psuction>)                                      QpRfg  566
c                                                                               QpRfg  567
c              Suction load, enthalpy and flow                                  QpRfg  568
        CALL HX(1, Khx, Qfloat,                                                 QpRfg  569
     &                 Msupply,        SST, xSupTo,                             QpRfg  570
     &                      1., <pq.DemTi>, xDemTo)                             QpRfg  571
        dTsuper       = <pq.DemTi> - SST                                        QpRfg  572
        dTsuper       = MIN(<pq:SUPERHEAT-DT>, dTsuper)                         QpRfg  573
        <ro.Houtlet>  = RefgH_Vapor_fTS(Jre, SST, dTsuper)                      QpRfg  574
        dHsuction     = <ro.Houtlet> - <Xri.Hinlet>                             QpRfg  575
        Msupply       = MAX(0.01, Qfloat/dHsuction)                             QpRfg  576
        Error         = 1. - <ro.Moutlet>/Msupply                               QpRfg  577
        <ro.Moutlet>  = Msupply                                                 QpRfg  578
        IF (ABS(Error) .LT. <sp:ERROR-FLOW>)  EXIT                              QpRfg  579
        IF (iFloat .EQ. 100)  CALL CnvgMsg2(1, Routine, Jpq)                    QpRfg  580
      ENDDO                                                                     QpRfg  581
c                                                                               QpRfg  582
      End Subroutine FloatLoad                                                  QpRfg  583
c                                                                               QpRfg  584
c                                                                               QpRfg  585
c ============== ProcessLoad ================================================== QpRfg  586
      Subroutine ProcessLoad                                                    QpRfg  587
c                                                                               QpRfg  588
c              Calculates the required process load, and suction                QpRfg  589
c              temperature & pressure corresponding to required load            QpRfg  590
c                                                                               QpRfg  591
c              Initialize refrigerant flow for HX calcs                         QpRfg  592
      IF (<ro.Moutlet> .GT. 0.)  THEN                                           QpRfg  593
        Msupply = <ro.Moutlet>                                                  QpRfg  594
      ELSE                                                                      QpRfg  595
        Msupply = <pq;Msupply> * <pq.PLRprocess>                                QpRfg  596
      ENDIF                                                                     QpRfg  597
      Msupply = MAX(0.01, Msupply)                                              QpRfg  598
c                                                                               QpRfg  599
      DO  iProcess=1,100                                                        QpRfg  600
c              Required suction temperature                                     QpRfg  601
        CALL HX(2, Khx, <pq.Qprocess>,                                          QpRfg  602
     &                        Msupply,        SST,         xSupTo,              QpRfg  603
     &                             1., <pq.DemTi>, <pq:PROCESS-T>)              QpRfg  604
c                                                                               QpRfg  605
c              Required suction enthalpy and flow                               QpRfg  606
        dTsuper       = <pq.DemTi> - SST                                        QpRfg  607
        dTsuper       = MIN(<pq:SUPERHEAT-DT>, dTsuper)                         QpRfg  608
        <ro.Houtlet>  = RefgH_Vapor_fTS(Jre, SST, dTsuper)                      QpRfg  609
        dHsuction     = <ro.Houtlet> - <Xri.Hinlet>                             QpRfg  610
        Msupply       = MAX(0.01, <pq.Qprocess>/dHsuction)                      QpRfg  611
        Error         = 1. - <ro.Moutlet>/Msupply                               QpRfg  612
        <ro.Moutlet>  = Msupply                                                 QpRfg  613
        IF (ABS(Error) .LT. <sp:ERROR-FLOW>)  EXIT                              QpRfg  614
        IF (iProcess .EQ. 100)  CALL CnvgMsg2(2, Routine, Jpq)                  QpRfg  615
      ENDDO                                                                     QpRfg  616
      <ro.Mreqd>   = <ro.Moutlet>                                               QpRfg  617
      <pq.SSTreqd> = SST                                                        QpRfg  618
c                                                                               QpRfg  619
c              Required suction pressure, adjusted for TCV                      QpRfg  620
      <ro.Preqd> = RefgP_fT(Jre, SST)                                           QpRfg  621
      Voutlet    = RefgV_fPH(Jre, <Xro.Poutlet>, <ro.Houtlet>)                  QpRfg  622
      dPctrl     = (<ro.Mreqd> * <pq;1/Msupply>    )**1.87                      QpRfg  623
     &           * (   Voutlet * <pq;OutletD>)**1.6                             QpRfg  624
      dPctrl     = dPctrl * <pq;CtrlValveDP>                                    QpRfg  625
      <ro.Preqd> = MAX(<re;Pmin>, <ro.Preqd> - dPctrl)                          QpRfg  626
c                                                                               QpRfg  627
      End Subroutine ProcessLoad                                                QpRfg  628
c                                                                               QpRfg  629
      END                                                                       QpRfg  630
      SUBROUTINE AllComponents(Mode)                                            AllCmp   2
c                                                                               AllCmp   3
c              Calls all components                                             AllCmp   4
c                                                                               AllCmp   5
c                                                                               AllCmp   6
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
      COMMON  /PTRSYS/ nvect ,                                                  /PTRSYS/ 2
     $                 nsched, its   ,                                          /PTRSYS/ 3
     $                 ncurve, icurve,                                          /PTRSYS/ 4
     $                 nzone , iz    , nczd  , zp2 ,         mtw  ,             /PTRSYS/ 5
     $                 nsys  , is    , nss   , nsp ,  ns   , icode,             /PTRSYS/ 6
     $                 nsz   , isz   , nzd   , zp1 ,  nz   ,                    /PTRSYS/ 7
     $                 nspace, lpr   , Lcv   ,                                  /PTRSYS/ 8
     $                 nattch, iatt  ,                                          /PTRSYS/11
     $                 P2, IDAYHR, IDBWBT,                                      /PTRSYS/12
     $                 IRPPLT, IRPSUM, IRPSYS, IRPZON, MR1, MR2                 /PTRSYS/13
      INTEGER          ZP1, ZP2, P2                                             /PTRSYS/14
c                                                                               AllCmp  11
c                                                                               AllCmp  12
c ============ METERS ========================================================= AllCmp  13
c                                                                               AllCmp  14
      CALL Meters(Mode)                                                         AllCmp  15
c                                                                               AllCmp  16
c                                                                               AllCmp  17
c ============ PROCESS-LOADS ================================================== AllCmp  18
c                                                                               AllCmp  19
      IF (Ipq .ne. 0)  THEN                                                     AllCmp  20
        Jpq = Ipq                                                               AllCmp  21
        DO WHILE (Jpq .gt. 0)                                                   AllCmp  22
          CALL ProcessAlgs(Mode, Jpq)                                           AllCmp  23
          Jpq = <pq;Next>                                                       AllCmp  24
        ENDDO                                                                   AllCmp  25
      ENDIF                                                                     AllCmp  26
c                                                                               AllCmp  27
c                                                                               AllCmp  28
c ============ SYSTEM COMPONENTS ============================================== AllCmp  29
                                                                                AllCmp  30
c              System loop                                                      AllCmp  31
      DO  NS=1,NSYS                                                             AllCmp  32
        NSP = IS + (NS-1)*NSS                                                   AllCmp  33
c              Zone loop                                                        AllCmp  34
        ISZ = <ISZONES>                                                         AllCmp  35
        NSZ = <NZONES>                                                          AllCmp  36
        DO  NZ=1,NSZ                                                            AllCmp  37
          ZP1 = ISZ + (NZ-1)*NZD                                                AllCmp  38
          ZP2 = <ZP2>                                                           AllCmp  39
          LI  = 1                                                               AllCmp  40
          IF (<NUM-ZONE-DOORS> .gt. 0.)  Call ZoneDoors(Mode)                   AllCmp  41
        ENDDO  ! NZ	                                                            AllCmp  42
      ENDDO  ! NS                                                               AllCmp  43
c                                                                               AllCmp  44
c                                                                               AllCmp  45
c ============ PLANT COMPONENTS =============================================== AllCmp  46
c                                                                               AllCmp  47
c              Plants                                                           AllCmp  48
      Jpl = Ipl                                                                 AllCmp  49
      DO WHILE (Jpl .GT. 0)                                                     AllCmp  50
        CALL FluidPlant(Mode, Jpl)                                              AllCmp  51
        Jpl = <pl;Next>                                                         AllCmp  52
      ENDDO                                                                     AllCmp  53
c              Fluids - only to set up curves                                   AllCmp  54
      IF (Mode .EQ. 201)  THEN                                                  AllCmp  55
        Jfl = Ifl                                                               AllCmp  56
        DO WHILE (Jfl .GT. 0)                                                   AllCmp  57
          CALL H2OSetup(Jfl)                                                    AllCmp  58
          Jfl = <fl;Next>                                                       AllCmp  59
        ENDDO                                                                   AllCmp  60
      ENDIF                                                                     AllCmp  61
c              Fluid circuits                                                   AllCmp  62
      Jfc = Ifc                                                                 AllCmp  63
      DO WHILE (Jfc .GT. 0)                                                     AllCmp  64
        CALL FluidCircuitAlgs(Mode, Jfc)                                        AllCmp  65
        Jfc = <fc;Next>                                                         AllCmp  66
      ENDDO                                                                     AllCmp  67
c              Recirculation balance valves                                     AllCmp  68
      Kfb = Ifb                                                                 AllCmp  69
      DO WHILE (Kfb .gt. 0)                                                     AllCmp  70
        Call FluidBypass(Mode, Kfb)                                             AllCmp  71
        Kfb = <fb;Next>                                                         AllCmp  72
      ENDDO                                                                     AllCmp  73
c              Pumps                                                            AllCmp  74
      Jpm = Ipm                                                                 AllCmp  75
      DO WHILE (Jpm .GT. 0)                                                     AllCmp  76
        CALL PumpAlgs(Mode, Jpm)                                                AllCmp  77
        Jpm = <pm;Next>                                                         AllCmp  78
      ENDDO                                                                     AllCmp  79
c              Boilers                                                          AllCmp  80
      Jbl = Ibl                                                                 AllCmp  81
      DO WHILE (Jbl .GT. 0)                                                     AllCmp  82
        CALL PlantEquipAlgs(Mode, Jbl)                                          AllCmp  83
        Jbl = <bl;Next>                                                         AllCmp  84
      ENDDO                                                                     AllCmp  85
c              Chillers                                                         AllCmp  86
      Jch = Ich                                                                 AllCmp  87
      DO WHILE (Jch .GT. 0)                                                     AllCmp  88
        CALL PlantEquipAlgs(Mode, Jch)                                          AllCmp  89
        Jch = <ch;Next>                                                         AllCmp  90
      ENDDO                                                                     AllCmp  91
c              DW Heaters                                                       AllCmp  92
      Jdw = Idw                                                                 AllCmp  93
      DO WHILE (Jdw .GT. 0)                                                     AllCmp  94
        CALL PlantEquipAlgs(Mode, Jdw)                                          AllCmp  95
        Jdw = <dw;Next>                                                         AllCmp  96
      ENDDO                                                                     AllCmp  97
c              Heat rejection                                                   AllCmp  98
      Jtw = Itw                                                                 AllCmp  99
      DO WHILE (Jtw .GT. 0)                                                     AllCmp 100
        CALL PlantEquipAlgs(Mode, Jtw)                                          AllCmp 101
        Jtw = <tw;Next>                                                         AllCmp 102
      ENDDO                                                                     AllCmp 103
c              Thermal storage                                                  AllCmp 104
      Jtk = Itk                                                                 AllCmp 105
      DO WHILE (Jtk .GT. 0)                                                     AllCmp 106
        CALL PlantEquipAlgs(Mode, Jtk)                                          AllCmp 107
        Jtk = <tk;Next>                                                         AllCmp 108
      ENDDO                                                                     AllCmp 109
c              Electric generators                                              AllCmp 110
      Jgn = Ign                                                                 AllCmp 111
      DO WHILE (Jgn .GT. 0)                                                     AllCmp 112
        CALL PlantEquipAlgs(Mode, Jgn)                                          AllCmp 113
        Jgn = <gn;Next>                                                         AllCmp 114
      ENDDO                                                                     AllCmp 115
c              Ground-loop heat-exchangers                                      AllCmp 116
      Jgl = Igl                                                                 AllCmp 117
      DO WHILE (Jgl .GT. 0)                                                     AllCmp 118
        CALL PlantEquipAlgs(Mode, Jgl)                                          AllCmp 119
        Jgl = <gl;Next>                                                         AllCmp 120
      ENDDO                                                                     AllCmp 121
c              Old style coils                                                  AllCmp 122
      CALL Coils_Old(Mode)                                                      AllCmp 123
c                                                                               AllCmp 124
c                                                                               AllCmp 125
c ============ REFRIGERATION COMPONENTS ======================================= AllCmp 126
c                                                                               AllCmp 127
c              Refrigerant circuits                                             AllCmp 128
      Jrc = Irc                                                                 AllCmp 129
      DO WHILE (Jrc .GT. 0)                                                     AllCmp 130
        CALL RefgNetworkAlgs(Mode, Jrc)                                         AllCmp 131
        Jrc = <rc;Next>                                                         AllCmp 132
      ENDDO                                                                     AllCmp 133
c              Suction groups                                                   AllCmp 134
      Jsg = Isg                                                                 AllCmp 135
      DO WHILE (Jsg .GT. 0)                                                     AllCmp 136
        CALL SuctionGroup(Mode, Jsg)                                            AllCmp 137
        Jsg = <sg;Next>                                                         AllCmp 138
      ENDDO                                                                     AllCmp 139
c              Display fixtures                                                 AllCmp 140
      Jrf = Irf                                                                 AllCmp 141
      DO WHILE (Jrf .GT. 0)                                                     AllCmp 142
        CALL RefgFixtureAlgs(Mode, Jrf)                                         AllCmp 143
        Jrf = <rf;Next>                                                         AllCmp 144
      ENDDO                                                                     AllCmp 145
c              Condensers                                                       AllCmp 146
      Jcd = Icd                                                                 AllCmp 147
      DO WHILE (Jcd .GT. 0)                                                     AllCmp 148
        CALL CondenserAlgs(Mode, Jcd)                                           AllCmp 149
        Jcd = <cd;Next>                                                         AllCmp 150
      ENDDO                                                                     AllCmp 151
c              Subcoolers - included in refg-circuits                           AllCmp 152
      Jsc = Isc                                                                 AllCmp 153
      DO  WHILE (Jsc .GT. 0)                                                    AllCmp 154
        CALL RefgNetworkAlgs(Mode, Jsc)                                         AllCmp 155
        Jsc = <sc;Next>                                                         AllCmp 156
      ENDDO                                                                     AllCmp 157
c              Desuperheaters - included in refg-circuits                       AllCmp 158
      Jds = Ids                                                                 AllCmp 159
      DO  WHILE (Jds .GT. 0)                                                    AllCmp 160
        CALL RefgNetworkAlgs(Mode, Jds)                                         AllCmp 161
        Jds = <ds;Next>                                                         AllCmp 162
      ENDDO                                                                     AllCmp 163
c              Compressors                                                      AllCmp 164
      Jcp = Icp                                                                 AllCmp 165
      DO WHILE (Jcp .GT. 0)                                                     AllCmp 166
        CALL CompressorAlgs(Mode, Jcp)                                          AllCmp 167
        Jcp = <cp;Next>                                                         AllCmp 168
      ENDDO                                                                     AllCmp 169
c              Refrigeration plants                                             AllCmp 170
      Jrs = Irs                                                                 AllCmp 171
      DO WHILE (Jrs .GT. 0)                                                     AllCmp 172
        CALL RefgPlant(Mode, Jrs)                                               AllCmp 173
        Jrs = <rs;Next>                                                         AllCmp 174
      ENDDO                                                                     AllCmp 175
c              Old style coils                                                  AllCmp 176
      IF (Irs .GT. 0)  CALL RefgCoils_Old(Mode)                                 AllCmp 177
c                                                                               AllCmp 178
c                                                                               AllCmp 179
c ============ SUB-COMPONENTS ================================================= AllCmp 180
c                                                                               AllCmp 181
c              Air coils                                                        AllCmp 182
      IF (Mode .EQ. 210)  THEN                                                  AllCmp 183
        Kac = Iac                                                               AllCmp 184
        DO WHILE (Kac .GT. 0)                                                   AllCmp 185
          CALL AirCoil_DX(Mode, Kac)                                            AllCmp 186
          Kac = <ac;Next>                                                       AllCmp 187
        ENDDO                                                                   AllCmp 188
      ENDIF                                                                     AllCmp 189
c                                                                               AllCmp 190
      RETURN                                                                    AllCmp 191
      END                                                                       AllCmp 192
      FUNCTION StartUpLoad(s8, Qload)                                           StartQ   2
c                                                                               StartQ   3
c              Calculates the start-up load as a function of the                StartQ   4
c              time the component has been shut down                            StartQ   5
c                                                                               StartQ   6
c              s8      Pointer to the Type 8 statistics block                   StartQ   7
c              Qload   Current hour's load                                      StartQ   8
c                                                                               StartQ   9
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
c                                                                               StartQ  13
      INTEGER s8                                                                StartQ  14
c                                                                               StartQ  15
      StartUpLoad = 0.                                                          StartQ  16
c                                                                               StartQ  17
      IF (Qload .LT. -1.E29)  THEN                                              StartQ  18
c              call is to adjust maximum operating capacity                     StartQ  19
        IF (<s8.HoursOn> .LT. 0)  THEN                                          StartQ  20
          II = MIN(3, -<s8.HoursOn>)                                            StartQ  21
          StartUpLoad = <s8;QStartUp>                                           StartQ  22
        ENDIF                                                                   StartQ  23
      ELSEIF (Qload .NE. 0.)  THEN                                              StartQ  24
c              normal call                                                      StartQ  25
        IF (<s8.HoursOn> .LT. 0)  THEN                                          StartQ  26
          II = MIN(3, -<s8.HoursOn>)                                            StartQ  27
          StartUpLoad = <s8;QStartUp>                                           StartQ  28
        ELSE                                                                    StartQ  29
c              portion of startup load can be applied this hour if cycling      StartQ  30
          PLR = Qload / <s8;Capacity>                                           StartQ  31
          IF (PLR .LT. <s8;MinPLR>)  THEN                                       StartQ  32
            Frac = PLR/<s8;MinPLR>                                              StartQ  33
            II   = 1                                                            StartQ  34
            StartUpLoad = <s8;QStartUp> * (1.-Frac)                             StartQ  35
          ENDIF                                                                 StartQ  36
        ENDIF                                                                   StartQ  37
      ENDIF                                                                     StartQ  38
c                                                                               StartQ  39
      RETURN                                                                    StartQ  40
      END                                                                       StartQ  41
C ##############################################################################PltEq    2
C ##############################################################################PltEq    3
C ##############################################################################PltEq    4
C ##############################################################################PltEq    5
C ##############################################################################PltEq    6
C ##############################################################################PltEq    7
C ##############################################################################PltEq    8
C ##########                                                          ##########PltEq    9
C ##########                                                          ##########PltEq   10
C ##########             CENTRAL PLANT EQUIPMENT ROUTINES             ##########PltEq   11
C ##########                                                          ##########PltEq   12
C ##########                                                          ##########PltEq   13
C ##############################################################################PltEq   14
C ##############################################################################PltEq   15
C ##############################################################################PltEq   16
C ##############################################################################PltEq   17
C ##############################################################################PltEq   18
C ##############################################################################PltEq   19
C ##############################################################################PltEq   20
c                                                                               PltEq   21
c    Central plant equipment component simulation routines:                     PltEq   22
c                                                                               PltEq   23
c    BoilerAlgs                      Boilers                                    PltEq   24
c       Boiler_HotWater              Hot-water boiler                           PltEq   25
c                                                                               PltEq   26
c    ChillerAlgs                     Chillers                                   PltEq   27
c       Chiller_Absorption           Absorption chiller, hot-water/steam        PltEq   28
c       Chiller_Electric             Electric chiller                           PltEq   29
c       Chiller_ChlrHtr              Gas-fired chiller/heater                   PltEq   30
c       Chiller_Engine               Engine-driven chiller                      PltEq   31
c       Chiller_OpenDrive            Open-drive chiller                         PltEq   32
c       Chiller_RefgHX               Refrigerant to water HX                    PltEq   33
c                                                                               PltEq   34
c    DWHeaterAlgs                    Domestic water heaters                     PltEq   35
c       DWHeater_Storage             Conventional heater, gas or electric       PltEq   36
c       DWHeater_HeatPump            Heat-pump water heater                     PltEq   37
c                                                                               PltEq   38
c    HeatRejAlgs                     Heat-rejection devices                     PltEq   39
c       HeatRej_Drycooler            Air-cooled heat-exchanger                  PltEq   40
c       HeatRej_OpenTwr              Cooling tower                              PltEq   41
c       HeatRej_FluidCooler          Fluid cooler                               PltEq   42
c                                                                               PltEq   43
c    ElecGenAlgs                     Electric generators                        PltEq   44
c       ElecGen_Engine               Gas or diesel engine generator             PltEq   45
c       ElecGen_GasTurbine           Gas turbine generator                      PltEq   46
c       ElecGen_SteamTurbine         Steam turbine generator                    PltEq   47
c                                                                               PltEq   48
c                                                                               PltEq   49
      SUBROUTINE PlantEquipAlgs(Mode, Knx)                                      PltEq   50
c                                                                               PltEq   51
c              Selects the correct central plant equipment algorithm            PltEq   52
c                                                                               PltEq   53
c              Mode   Simulation mode                                           PltEq   54
c              Knx    Pointer to the component or the component's               PltEq   55
c                        node                                                   PltEq   56
c                                                                               PltEq   57
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
c                                                                               PltEq   60
      DATA IdNode /4H$Kno/                                                      /IdNode/ 2
c                                                                               PltEq   62
c              Knx may point either to the component or to one of the           PltEq   63
c              component's nodes                                                PltEq   64
      IF (<nx;Ident> .EQ. IdNode)  THEN                                         PltEq   65
        Jna = <nx;Component>                                                    PltEq   66
      ELSE                                                                      PltEq   67
        Jna = Knx                                                               PltEq   68
      ENDIF                                                                     PltEq   69
c                                                                               PltEq   70
      SELECT CASE (<na:ALGORITHM>/100)                                          PltEq   71
c                                                                               PltEq   72
        CASE  (31)  ! Boilers                                                   PltEq   73
          SELECT CASE (<na:ALGORITHM>)                                          PltEq   74
            CASE (3101)  ! Hot water                                            PltEq   75
              CALL Boiler_HotWater(Mode, Knx)                                   PltEq   76
          END SELECT                                                            PltEq   77
c                                                                               PltEq   78
        CASE  (32)  ! Chillers                                                  PltEq   79
          SELECT CASE (<na:ALGORITHM>)                                          PltEq   80
            CASE (3201)  ! Electric                                             PltEq   81
C ??          CALL Chiller_Electric(Mode, Knx)                                  PltEq   82
            CASE (3202)  ! Open-drive chiller (separate prime mover)            PltEq   83
C ??          CALL Chiller_OpenDrive(Mode, Knx)                                 PltEq   84
            CASE (3203)  ! Absorption                                           PltEq   85
C ??          CALL Chiller_Absorption (Mode, Knx)                               PltEq   86
            CASE (3204)  ! Gas-fired chiller/heater                             PltEq   87
C ??          CALL Chiller_ChlrHtr(Mode, Knx)                                   PltEq   88
            CASE (3205)  ! Engine-driven chiller                                PltEq   89
C ??          CALL Chiller_Engine(Mode, Knx)                                    PltEq   90
            CASE (3206)  ! Refrigerant HX                                       PltEq   91
              CALL Chiller_RefgHX(Mode, Knx)                                    PltEq   92
          END SELECT                                                            PltEq   93
c                                                                               PltEq   94
        CASE  (33)  ! DW heaters                                                PltEq   95
          SELECT CASE (<na:ALGORITHM>)                                          PltEq   96
            CASE (3301)  ! Conventional storage heater                          PltEq   97
              CALL DWHeater_Tank(Mode, Knx)                                     PltEq   98
            CASE (3302)  ! Heat-pump water heater                               PltEq   99
c ??          CALL DWHeater_HeatPump(Mode, Knx)                                 PltEq  100
          END SELECT                                                            PltEq  101
c                                                                               PltEq  102
        CASE  (34)  ! Heat-rejection                                            PltEq  103
          SELECT CASE (<na:ALGORITHM>)                                          PltEq  104
            CASE (3401)  ! Open tower                                           PltEq  105
C ??          CALL HeatRej_OpenTwr(Mode, Knx)                                   PltEq  106
            CASE (3402)  ! Fluid cooler                                         PltEq  107
C ??          CALL HeatRej_FluidCooler(Mode, Knx)                               PltEq  108
            CASE (3403)  ! Drycooler                                            PltEq  109
C ??          CALL HeatRej_Drycooler(Mode,Knx)                                  PltEq  110
          END SELECT                                                            PltEq  111
c                                                                               PltEq  112
        CASE  (35)  ! Electric generators                                       PltEq  113
          SELECT CASE (<na:ALGORITHM>)                                          PltEq  114
            CASE (3501)  ! Open tower                                           PltEq  115
C ??          CALL ElecGen_Engine(Mode, Knx)                                    PltEq  116
            CASE (3502)  ! Fluid cooler                                         PltEq  117
C ??          CALL ElecGen_GasTurbine(Mode, Knx)                                PltEq  118
            CASE (3503)  ! Drycooler                                            PltEq  119
C ??          CALL ElecGen_SteamTurbine(Mode,Knx)                               PltEq  120
          END SELECT                                                            PltEq  121
      END SELECT                                                                PltEq  122
c                                                                               PltEq  123
      RETURN                                                                    PltEq  124
      END                                                                       PltEq  125
C ##############################################################################BlrAlg   2
C ##############################################################################BlrAlg   3
C ##############################################################################BlrAlg   4
C ##############################################################################BlrAlg   5
C ##########                                                          ##########BlrAlg   6
C ##########                     BOILER ROUTINES                      ##########BlrAlg   7
C ##########                                                          ##########BlrAlg   8
C ##############################################################################BlrAlg   9
C ##############################################################################BlrAlg  10
C ##############################################################################BlrAlg  11
C ##############################################################################BlrAlg  12
c                                                                               BlrAlg  13
      SUBROUTINE Boiler_HotWater(Mode, Knx)                                     BlrHW    2
c                                                                               BlrHW    3
c                                                                               BlrHW    4
c              Simulates hot water boilers, both fuel-fired                     BlrHW    5
c              and electric                                                     BlrHW    6
c                                                                               BlrHW    7
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /FNSYS/  ISKIPS, MSYSF(120)                                       /FNSYS/  2
      COMMON  /MISCD / TEMPS(4,4096),CONS(5),TEMPSL(4096),                      /MISCD/  2
     1                 BLDGQH,BLDGQC,BLDGQL,BLDGP,BPMULT,                       /MISCD/  3
     2                 DBTMIN,DBTMAX,WMIN,WMAX,NSPZ(4096),                      /MISCD/  4
     3                 DQ, DTP, DTR, DTS, FPI, PLRCC , POM, TC2, TDM,           /MISCD/  5
     4                 TRA,WCOL,WCOLM,WMM,YPI,KWBTU,BTUKW,UNFILD,Unusedm        /MISCD/  6
      REAL             KWBTU                                                    /MISCD/  7
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
      COMMON  /WEATH / IWDID(5),LRECX,WLAT,WLONG,LTIMZ,IFX,IWSIZ,               /WEATH/  2
     1                 CLRNES,TGNDR,WBT,DBT,Patm,CLDAMT,ISNOW,IRAIN,            /WEATH/  3
     2                 IWNDDR,HUMRAT,DENSTY,ENTHAL,DIFSOL,DIRSOL,SOLRAD,        /WEATH/  4
     3                 ICLDTY,WNDSPD,IDUMMY,DPT,WNDDRR,CLDCOV,RDNCC,            /WEATH/  5
     4                 BSCC,SKYA,DBTR,GTEMP(12),CLR(12),ESKY,EGND,IWINTR        /WEATH/  6
c                                                                               BlrHW   17
      COMMON  /EQKY  / Always, WhenOn, WhenOff, AuxSched,                       /EQKY/   2
     &                 ConstantFlow, VariableFlow, Yes, No                      /EQKY/   3
      INTEGER          Always, WhenOn, WhenOff, AuxSched,                       /EQKY/   4
     &                 ConstantFlow, VariableFlow, Yes, No                      /EQKY/   5
      DATA IdNode /4H$Kno/                                                      /IdNode/ 2
c                                                                               BlrHW   20
      INTEGER ZP1, Xfi, Xfo, rH, BLRtypes(4,6)                                  BlrHW   21
      REAL    Mheat, MdP                                                        BlrHW   22
      DATA BLRtypes                                                             BlrHW   23
     &    / 4HHW-B,4HOILE,4HR   ,4H    ,  4HELEC,4H-HW-,4HBOIL,4HER  ,          BlrHW   24
     &      4HSTM-,4HBOIL,4HER  ,4H    ,  4HELEC,4H-STM,4H-BOI,4HLER ,          BlrHW   25
     &      4HBLR-,4HSPAR,4HE-1 ,4H    ,  4HBLR-,4HSPAR,4HE-2 ,4H    /          BlrHW   26
c                                                                               BlrHW   27
c                                                                               BlrHW   28
      IF (<nx;Ident> .EQ. IdNode)  THEN                                         BlrHW   29
        Jbl = <nx;Component>                                                    BlrHW   30
      ELSE                                                                      BlrHW   31
        Jbl = Knx                                                               BlrHW   32
      ENDIF                                                                     BlrHW   33
      Jpl = <bl:HW-PLANT>                                                       BlrHW   34
      Xfi = <bl;HWInletXnode>                                                   BlrHW   35
      Kfo = <bl;HWOutletNode>                                                   BlrHW   36
      Xfo = <fo;Xnode>                                                          BlrHW   37
c                                                                               BlrHW   38
      SELECT CASE (Mode)                                                        BlrHW   39
c                                                                               BlrHW   40
c                                                                               BlrHW   41
c ============ HOURLY OPERATING CAPACITY - FLOATING =========================== BlrHW   42
      CASE (21)                                                                 BlrHW   43
c                                                                               BlrHW   44
c              Flow capacity as a function of pressure differential             BlrHW   45
      IF (<bl:HW-PUMP> .GT. 0)  THEN                                            BlrHW   46
        Jpm = <bl:HW-PUMP>                                                      BlrHW   47
        IF (<pl:PUMP> .GT. 0)  THEN                                             BlrHW   48
c              recirculation pump                                               BlrHW   49
          MdP = <pm;TotalFlow>                                                  BlrHW   50
        ELSE                                                                    BlrHW   51
c              loop pump                                                        BlrHW   52
          <pm.Psetpt> = <Xfo.Preqd> - <Xfi.Pinlet> + <bl.dP>                    BlrHW   53
          CALL PumpAlgs(22, Jpm)                                                BlrHW   54
          MdP = <pm.Mfluid>                                                     BlrHW   55
        ENDIF                                                                   BlrHW   56
      ELSE  ! no boiler pump; flow as function of pressure differential         BlrHW   57
        dP = <Xfi.Pinlet> - <Xfo.Preqd>                                         BlrHW   58
        IF (dP .GT. 0.)  THEN                                                   BlrHW   59
          MdP = FluidFlow(<bl;HWFluidProp>, dP)                                 BlrHW   60
        ELSE                                                                    BlrHW   61
          MdP = <bl;Flow> * 0.01                                                BlrHW   62
        ENDIF                                                                   BlrHW   63
      ENDIF                                                                     BlrHW   64
c              flow and thermal capacity                                        BlrHW   65
      <fo.MaxMfluid> = MIN(MdP, <bl;HWMaxFlow>)                                 BlrHW   66
      <fo.MaxQfluid> = <bl.OpCap>                                               BlrHW   67
c                                                                               BlrHW   68
c                                                                               BlrHW   69
c ============ HOURLY OPERATING CAPACITY - HEATING ============================ BlrHW   70
      CASE (23)                                                                 BlrHW   71
c                                                                               BlrHW   72
c              Internal boiler temperature - greater of either the loop         BlrHW   73
c              temperature requirement, or the internal aquastat temp           BlrHW   74
      <bl.Theat> = MAX(<Xfo.Tsetpt>, <bl:AQUASTAT-T>)                           BlrHW   75
c              environmental temperature                                        BlrHW   76
      IF (<bl:ZONE> .EQ. 0)  THEN                                               BlrHW   77
        <bl.Tenvir> = DBT          ! outdoors                                   BlrHW   78
      ELSE                                                                      BlrHW   79
        ZP1         = <bl:ZONE>    ! indoors                                    BlrHW   80
        <bl.Tenvir> = <zn;Tavg>                                                 BlrHW   81
      ENDIF                                                                     BlrHW   82
c              firing rate as a function of environmental temperature           BlrHW   83
        <bl.GrossCapacity> = <bl;Capacity>                                      BlrHW   84
     &                   * Curve(Jbl,<bl:CAP-FT>,<bl.Theat>,<bl.Tenvir>)        BlrHW   85
c              maximum output - adjust by warmup time                           BlrHW   86
        <bl.OpCap> = <bl.GrossCapacity>*<bl:MAX-RATIO>                          BlrHW   87
     &                                - StartUpLoad(<fo;s8>, -1.E30)            BlrHW   88
c                                                                               BlrHW   89
c              Calculate flow capacity - fluid temperature rise                 BlrHW   90
      dT = MAX(0.001, <Xfo.Tsetpt> - <Xfi.Tinlet>)                              BlrHW   91
      IF (<bl:HW-PUMP> .GT. 0)  THEN                                            BlrHW   92
        Jpm = <bl:HW-PUMP>                                                      BlrHW   93
c              flow as a function of boiler heating capacity                    BlrHW   94
        Mheat = (<bl.OpCap> + <pm.Qfluid>) / (<pl.Btuh/GPM-F> * dT)             BlrHW   95
c              flow as a function of pressure differential                      BlrHW   96
        IF (<pl:PUMP> .GT. 0)  THEN                                             BlrHW   97
c              recirculation pump                                               BlrHW   98
          MdP = <pm;TotalFlow>                                                  BlrHW   99
        ELSE                                                                    BlrHW  100
c              loop pump                                                        BlrHW  101
          <pm.Psetpt> = <Xfo.Preqd> - <Xfi.Pinlet> + <bl.dP>                    BlrHW  102
          CALL PumpAlgs(22, Jpm)                                                BlrHW  103
          MdP = <pm.Mfluid>                                                     BlrHW  104
        ENDIF                                                                   BlrHW  105
      ELSE  ! no boiler pump                                                    BlrHW  106
c              flow as a function of boiler heating capacity                    BlrHW  107
        Mheat = <bl.OpCap> / (<pl.Btuh/GPM-F> * dT)                             BlrHW  108
c              flow as a function of pressure differential                      BlrHW  109
        dP = <Xfi.Pinlet> - <Xfo.Preqd>                                         BlrHW  110
        IF (dP .GT. 0.)  THEN                                                   BlrHW  111
          MdP = FluidFlow(<bl;HWFluidProp>, dP)                                 BlrHW  112
        ELSE                                                                    BlrHW  113
          MdP = <bl;Flow> * 0.01                                                BlrHW  114
        ENDIF                                                                   BlrHW  115
      ENDIF                                                                     BlrHW  116
c              adjust capacity for aquastat setpoint                            BlrHW  117
      Mheat = <bl.OpCap> / (<pl.Btuh/GPM-F> * dT)                               BlrHW  118
      IF (<Xfo.Tsetpt> .LT. <bl:AQUASTAT-T>)  THEN                              BlrHW  119
        dM = (<bl:AQUASTAT-T>-<Xfi.Tinlet>)/(<Xfo.Tsetpt>-<Xfi.Tinlet>)         BlrHW  120
        Mheat = Mheat * dM                                                      BlrHW  121
      ENDIF                                                                     BlrHW  122
c              flow and thermal capacity                                        BlrHW  123
      <fo.MaxMfluid> = MIN(Mheat, MdP, <bl;HWMaxFlow>)                          BlrHW  124
      <fo.MaxQfluid> = <bl.OpCap>                                               BlrHW  125
c                                                                               BlrHW  126
c                                                                               BlrHW  127
c ============ HOURLY OPERATING CAPACITY - COOLING ============================ BlrHW  128
      CASE (25)                                                                 BlrHW  129
c                                                                               BlrHW  130
c              To be here, boiler must be attached to dual-mode loop            BlrHW  131
c              in cooling mode                                                  BlrHW  132
      <fo.MaxMfluid> = -88888888.                                               BlrHW  133
      <fo.MaxQfluid> = 0.                                                       BlrHW  134
c                                                                               BlrHW  135
c                                                                               BlrHW  136
c ============ HOURLY SIMULATION - SUPPLY SIDE ================================ BlrHW  137
      CASE (30:37)                                                              BlrHW  138
c                                                                               BlrHW  139
c              Check if off                                                     BlrHW  140
      IF (<fo.Moutlet> .EQ. 0.)  THEN                                           BlrHW  141
        CALL ZeroAA(<#bl~HrZeroStart..>, <#bl~HrZeroEnd....>)                   BlrHW  142
        <fo.Qoutlet> = 0.                                                       BlrHW  143
        <bl.Tsetpt>  = -88888.                                                  BlrHW  144
        IF (<bl:HW-PUMP> .GT. 0)  THEN                                          BlrHW  145
          CALL PumpAlgs(30, <bl:HW-PUMP>)                                       BlrHW  146
        ENDIF                                                                   BlrHW  147
        RETURN                                                                  BlrHW  148
      ENDIF                                                                     BlrHW  149
c                                                                               BlrHW  150
c              Boiler has flow - check if operating                             BlrHW  151
      <bl.Tsetpt> = <Xfo.Tsetpt>                                                BlrHW  152
      dT          = <bl.Tsetpt> - <Xfi.Tinlet>                                  BlrHW  153
      IF (dT .LE. 0.)  THEN                                                     BlrHW  154
c              Boiler is floating                                               BlrHW  155
        CALL ZeroAA(<#bl~HrZeroStart..>, <#bl~HrZeroEnd....>)                   BlrHW  156
        <fo.Qoutlet> = 0.                                                       BlrHW  157
        Qheat        = 0.                                                       BlrHW  158
      ELSE                                                                      BlrHW  159
c              Boiler is operating - calculate load; adjust for warm up         BlrHW  160
        Qheat        = <pl.Btuh/GPM-F> * <fo.Moutlet> * dT                      BlrHW  161
        <bl.Qstart>  = StartUpLoad(<fo;s8>, Qheat)                              BlrHW  162
        Qheat        = Qheat + <bl.Qstart>                                      BlrHW  163
        Qheat        = MIN(Qheat,<bl.GrossCapacity>*<bl:MAX-RATIO>)             BlrHW  164
        <fo.Qoutlet> = Qheat - <bl.Qstart>                                      BlrHW  165
c              part load ratio and operating fraction                           BlrHW  166
        <bl.PLR>     = Qheat / <bl.GrossCapacity>                               BlrHW  167
        <bl.RunFrac> = MIN(1.0, <pl.RunFrac>, <bl.PLR>/<bl:MIN-RATIO>)          BlrHW  168
        <bl.PLR>     = MAX(<bl.PLR>, <bl:MIN-RATIO>)                            BlrHW  169
      ENDIF                                                                     BlrHW  170
c                                                                               BlrHW  171
      IF (<bl:HW-PUMP> .GT. 0)  THEN                                            BlrHW  172
c              boiler has its own pump                                          BlrHW  173
        Jpm          = <bl:HW-PUMP>                                             BlrHW  174
        <pm.RunFrac> = <pl.RunFrac>                                             BlrHW  175
        IF (<pl:PUMP> .GT. 0)  THEN       ! recirculation pump only             BlrHW  176
          IF (<bl:HW-CTRL> .EQ. 1)  THEN  ! constant flow                       BlrHW  177
            <pm.Mfluid> = <bl;Flow>                                             BlrHW  178
          ELSE                            ! variable flow                       BlrHW  179
            <pm.Mfluid> = MAX(<fo.Moutlet>, <bl;HWMinFlow>)                     BlrHW  180
          ENDIF                                                                 BlrHW  181
          <pm.Psetpt> = FluidDP(<bl;HWFluidProp>, <pm.Mfluid>)                  BlrHW  182
          CALL PumpAlgs(31, Jpm)                                                BlrHW  183
          <fo.Poutlet> = <Xfi.Pinlet>                                           BlrHW  184
          <bl.dP>      = <pm.Psetpt>                                            BlrHW  185
        ELSE  ! loop pump                                                       BlrHW  186
          <pm.Mfluid> = <fo.Moutlet>                                            BlrHW  187
          <bl.dP>     = FluidDP(<bl;HWFluidProp>, <pm.Mfluid>)                  BlrHW  188
          <pm.Psetpt> = <Xfo.Preqd> - <Xfi.Pinlet> + <bl.dP>                    BlrHW  189
          CALL PumpAlgs(31, Jpm)                                                BlrHW  190
          <fo.Poutlet> = <Xfi.Pinlet> + <pm.dP> - <bl.dP>                       BlrHW  191
        ENDIF                                                                   BlrHW  192
c              Adjust heating load for pump heat                                BlrHW  193
        Qheat = <pl.Btuh/GPM-F> * <fo.Moutlet> * dT                             BlrHW  194
        Qheat = MAX(0., Qheat-<pm.Qfluid>)                                      BlrHW  195
        IF (Qheat .GT. 0.)  THEN                                                BlrHW  196
c              boiler is firing                                                 BlrHW  197
          <bl.Qstart>  = StartUpLoad(<fo;s8>, Qheat)                            BlrHW  198
          Qheat        = Qheat + <bl.Qstart>                                    BlrHW  199
          Qheat        = MIN(Qheat, <bl.GrossCapacity>*<bl:MAX-RATIO>)          BlrHW  200
          <fo.Qoutlet> = Qheat + <pm.Qfluid> - <bl.Qstart>                      BlrHW  201
          <bl.PLR>     = Qheat / <bl.GrossCapacity>                             BlrHW  202
          <bl.RunFrac> = MIN(1.0, <pl.RunFrac>, <bl.PLR>/<bl:MIN-RATIO>)        BlrHW  203
          <bl.PLR>     = MAX(<bl.PLR>, <bl:MIN-RATIO>)                          BlrHW  204
        ELSE  ! pump can satisfy entire load                                    BlrHW  205
          CALL ZeroAA(<#bl~HrZeroStart..>, <#bl~HrZeroEnd....>)                 BlrHW  206
          <fo.Qoutlet> = <pm.Qfluid>                                            BlrHW  207
        ENDIF                                                                   BlrHW  208
      ELSE  ! no boiler pump                                                    BlrHW  209
c              pressure at boiler outlet                                        BlrHW  210
        <bl.dP>      = FluidDP(<bl;HWFluidProp>, <fo.Moutlet>)                  BlrHW  211
        <fo.Poutlet> = <Xfi.Pinlet> - <bl.dP>                                   BlrHW  212
      ENDIF  ! bl:HW-PUMP                                                       BlrHW  213
c                                                                               BlrHW  214
c              Outlet temperature                                               BlrHW  215
      <fo.Toutlet> = <Xfi.Tinlet>                                               BlrHW  216
     &             + <fo.Qoutlet> / (<pl.Btuh/GPM-F>*<fo.Moutlet>)              BlrHW  217
c              external heating load                                            BlrHW  218
      <bl.Qheat> = MAX(0., Qheat - <bl.Qstart>)                                 BlrHW  219
c                                                                               BlrHW  220
c                                                                               BlrHW  221
c ============ HOURLY SIMULATION - DEMAND SIDE ================================ BlrHW  222
      CASE (38:39)                                                              BlrHW  223
c                                                                               BlrHW  224
      IF  (<bl.PLR> .GT. 0.)  THEN                                              BlrHW  225
c              Electric consumption                                             BlrHW  226
        IF (<bl:EIR> .GT. 0.)  THEN                                             BlrHW  227
          <bl.EIRfPLR> = Curve(Jbl,<bl:EIR-FPLR>,<bl.PLR>,<bl.PLR>)             BlrHW  228
          <bl.EIR>     = <bl:EIR> * <bl.EIRfPLR>                                BlrHW  229
          <bl.kW>      = <bl;Capacity> * <bl.EIR> * <bl.RunFrac> * KWBTU        BlrHW  230
        ENDIF                                                                   BlrHW  231
c              Fuel consumption                                                 BlrHW  232
        IF (<bl:HIR> .GT. 0.)  THEN                                             BlrHW  233
          <bl.HIRfPLR> = Curve(Jbl,<bl:HIR-FPLR>,<bl.PLR>,<bl.PLR>)             BlrHW  234
          <bl.HIRfT>   = Curve(Jbl,<bl:HIR-FT>,<bl.Theat>,<bl.Tenvir>)          BlrHW  235
          <bl.HIR>     = <bl:HIR> * <bl.HIRfT> * <bl.HIRfPLR>                   BlrHW  236
          <bl.Fuel>    = <bl;Capacity> * <bl.HIR> * <bl.RunFrac>                BlrHW  237
        ENDIF                                                                   BlrHW  238
      ENDIF                                                                     BlrHW  239
c                                                                               BlrHW  240
c              Electricity, fuel, and auxiliary power meters                    BlrHW  241
      Kmd       = <bl:ELEC-METER>                                               BlrHW  242
      <md.Elec> = <bl.kW>                                                       BlrHW  243
      Kmd       = <bl:FUEL-METER>                                               BlrHW  244
      <md.Fuel> = <bl.Fuel>                                                     BlrHW  245
      IF (<bl:AUX-KW> .GT. 0.)  THEN                                            BlrHW  246
        Kmd = <bl:AUX-METER>                                                    BlrHW  247
        SELECT CASE (<bl:AUX-MODE>)                                             BlrHW  248
          CASE (1)  ! Always                                                    BlrHW  249
            <md.Elec> = <bl:AUX-KW>                                             BlrHW  250
          CASE (2)  ! When on                                                   BlrHW  251
            <md.Elec> = <bl:AUX-KW> * <bl.RunFrac>                              BlrHW  252
          CASE (3)  ! When off                                                  BlrHW  253
            <md.Elec> = <bl:AUX-KW> * (1.0 - <bl.RunFrac>)                      BlrHW  254
          CASE (4)  ! Scheduled                                                 BlrHW  255
            <md.Elec> = <bl:AUX-KW> * SchVal(<bl:AUX-SCH>)                      BlrHW  256
        END SELECT                                                              BlrHW  257
      ENDIF                                                                     BlrHW  258
c                                                                               BlrHW  259
c              Check for convergence and set flags on utilities                 BlrHW  260
      IF (Mode .EQ. 38)  THEN                                                   BlrHW  261
        CALL CnvgCheck(1, <bl;EnergyHsty>)  ! Loads to plant                    BlrHW  262
      ELSE                                                                      BlrHW  263
        CALL CnvgCheck(0, <bl;EnergyHsty>)  ! Plant to loads                    BlrHW  264
      ENDIF                                                                     BlrHW  265
c                                                                               BlrHW  266
c ****         run function : Boiler_HW_1-4                                     BlrHW  267
c     IF( MSYSF(?) .NE. 0 )   CALL FINTS( MSYSF(?), 1. )                        BlrHW  268
c                                                                               BlrHW  269
c                                                                               BlrHW  270
c ============ REPORT CREATION ================================================ BlrHW  271
      CASE (50)                                                                 BlrHW  272
c                                                                               BlrHW  273
c              statistics blocks                                                BlrHW  274
      Ks2Load    = NewStat2(Jbl, <+bl.Qheat>, 0, 1.)                            BlrHW  275
      Ks5LoadBin = NewStat5(Jbl, <+bl.Qheat>, 0, 1.)                            BlrHW  276
      Ks2Elec    = NewStat2(<bl:ELEC-METER>, <+md.Elec>, 0, 1.)                 BlrHW  277
      Ks5ElecBin = NewStat5(<bl:ELEC-METER>, <+md.Elec>, 0, 1.)                 BlrHW  278
      Ks2Fuel    = NewStat2(<bl:FUEL-METER>, <+md.Fuel>, 0, 1.)                 BlrHW  279
      Ks5FuelBin = NewStat5(<bl:FUEL-METER>, <+md.Fuel>, 0, 1.)                 BlrHW  280
      Ks2Aux     = NewStat2(<bl:AUX-METER>,  <+md.Elec>, 0, 1.)                 BlrHW  281
c                                                                               BlrHW  282
c              Create the type "H" report                                       BlrHW  283
      IF (<bl:REPORTS> .GT. 0  .AND.  IREPRT(3,23) .GT. 0)                      BlrHW  284
     &  <bl;PS-H> = NewReport_H(Jbl, 59,                                        BlrHW  285
     &                          3, 4, 5,                                        BlrHW  286
     &                          Ks2Load, Ks2Elec, Ks2Fuel, Ks2Aux,              BlrHW  287
     &                          Ks5LoadBin, Ks5ElecBin, Ks5FuelBin,             BlrHW  288
     &                          0, 0, 0)                                        BlrHW  289
c                                                                               BlrHW  290
c              Setpoint overload                                                BlrHW  291
      <bl;s10> = NewStat10(Jbl, <#bl.Tsetpt>, <#fo.Toutlet>, 0.1,-1,            BlrHW  292
     &                          <#bl.Qheat>)                                    BlrHW  293
c                                                                               BlrHW  294
c                                                                               BlrHW  295
c ============ REPORT ORDER =================================================== BlrHW  296
      CASE (52)                                                                 BlrHW  297
c                                                                               BlrHW  298
      Call Report_H(Mode, <bl;PS-H>)                                            BlrHW  299
      IF (<bl:HW-PUMP> .ne. 0)  CALL PumpAlgs(Mode, <bl:HW-PUMP>)               BlrHW  300
c                                                                               BlrHW  301
c                                                                               BlrHW  302
c ============ REPORTS - VERIFICATION DATA ==================================== BlrHW  303
      CASE (54)                                                                 BlrHW  304
c                                                                               BlrHW  305
c              Output design information                                        BlrHW  306
      IF (<bl;PS-H> .ne. 0)  THEN                                               BlrHW  307
        rH = <bl;PS-H>                                                          BlrHW  308
        WRITE (IREPFL) 4,<rH;Iuniq>,1,1,0                                       BlrHW  309
        WRITE(IREPFL)  21,<rH;Iuniq>,1,2,17,                                    BlrHW  310
     &    (BLRtypes(II,<bl:TYPE>),II=1,4),                                      BlrHW  311
     &    (<pl:NAME>,II=1,8),                                                   BlrHW  312
     &    <bl;Capacity>, <bl;Flow>,                                             BlrHW  313
     &    <bl:EIR>, <bl:HIR>, <bl:AUX-KW>                                       BlrHW  314
      ENDIF                                                                     BlrHW  315
c                                                                               BlrHW  316
c                                                                               BlrHW  317
c ============ REPORTS - YEARLY SUMMARY (SPECIAL) ============================= BlrHW  318
      CASE (58)                                                                 BlrHW  319
c                                                                               BlrHW  320
c              Setpoint overload                                                BlrHW  321
      IF (<bl;PS-H> .ne. 0)  THEN                                               BlrHW  322
        rH = <bl;PS-H>                                                          BlrHW  323
        CALL Report_s10(<rH;Iuniq>, 6, <bl;s10>)                                BlrHW  324
      ENDIF                                                                     BlrHW  325
c                                                                               BlrHW  326
c                                                                               BlrHW  327
c ============ HOURLY REPORTS - HOURLY DATA =================================== BlrHW  328
      CASE (62)                                                                 BlrHW  329
c                                                                               BlrHW  330
c              Hourly-report variables                                          BlrHW  331
      IF (<bl;HourRepBuf> .EQ. 0)  RETURN                                       BlrHW  332
c                                                                               BlrHW  333
      Kmd          = <bl:AUX-METER>                                             BlrHW  334
      IAptr        = <bl;HourRepBuf>-1                                          BlrHW  335
      AA(IAptr+ 1) = <fo.Moutlet>                                               BlrHW  336
      AA(IAptr+ 2) = <bl.Qheat>                                                 BlrHW  337
      AA(IAptr+ 3) = <bl.kW>                                                    BlrHW  338
      AA(IAptr+ 4) = <bl.Fuel>                                                  BlrHW  339
      AA(IAptr+ 5) = <bl.Qstart>                                                BlrHW  340
      AA(IAptr+ 6) = <bl.PLR>                                                   BlrHW  341
      AA(IAptr+ 7) = <bl.RunFrac>                                               BlrHW  342
      AA(IAptr+ 8) = <bl.EIR>                                                   BlrHW  343
      AA(IAptr+ 9) = <bl.EIRfPLR>                                               BlrHW  344
      AA(IAptr+10) = <bl.EIRfT>                                                 BlrHW  345
      AA(IAptr+11) = <bl.HIR>                                                   BlrHW  346
      AA(IAptr+12) = <bl.HIRfPLR>                                               BlrHW  347
      AA(IAptr+13) = <bl.HIRfT>                                                 BlrHW  348
      AA(IAptr+14) = <bl.dP>                                                    BlrHW  349
      AA(IAptr+15) = <bl.Theat>                                                 BlrHW  350
      AA(IAptr+16) = <bl.Tenvir>                                                BlrHW  351
      AA(IAptr+17) = <bl.OpCap>                                                 BlrHW  352
      AA(IAptr+18) = <md.Elec>                                                  BlrHW  353
      AA(IAptr+19) = <Xfi.Tinlet>                                               BlrHW  354
      AA(IAptr+20) = <Xfi.Pinlet>                                               BlrHW  355
      AA(IAptr+21) = <fo.Toutlet>                                               BlrHW  356
      AA(IAptr+22) = <fo.Poutlet>                                               BlrHW  357
      AA(IAptr+23) = <Xfo.Tsetpt>                                               BlrHW  358
      AA(IAptr+24) = <Xfo.Preqd>                                                BlrHW  359
c                                                                               BlrHW  360
c                                                                               BlrHW  361
c ============ DESIGN INITIALIZATION ========================================== BlrHW  362
      CASE (110)                                                                BlrHW  363
c                                                                               BlrHW  364
c              Set pressure drop thru boiler                                    BlrHW  365
      IF (<bl:HW-PUMP> .EQ. 0)                                                  BlrHW  366
     &  <fo.Preqd> = <bl:HW-HEAD> + <bl:HW-STATIC>                              BlrHW  367
c                                                                               BlrHW  368
c                                                                               BlrHW  369
c ============ DESIGN CALCULATIONS ============================================ BlrHW  370
      CASE (111)                                                                BlrHW  371
c                                                                               BlrHW  372
c              boiler size                                                      BlrHW  373
      IF (<bl:CAP> .EQ. 0.)  THEN                                               BlrHW  374
c              default boiler size                                              BlrHW  375
        IF (<bl:CAP-RATIO> .GT. 0.)  THEN                                       BlrHW  376
          <bl;Capacity> = <pl;Qheat> * <bl:CAP-RATIO>                           BlrHW  377
        ELSE                                                                    BlrHW  378
c              No capacity ratio specified - size equipment equally             BlrHW  379
c              Get pointer to plant node and plant node's equip list            BlrHW  380
          Kli = <Xfo;Xnode>                                                     BlrHW  381
          <bl;Capacity> = <pl;Qheat> / FLOAT(<li;NumItems>)                     BlrHW  382
        ENDIF                                                                   BlrHW  383
      ELSE                                                                      BlrHW  384
c              user specified                                                   BlrHW  385
        <bl;Capacity> = ABS(<bl:CAP>)                                           BlrHW  386
      ENDIF                                                                     BlrHW  387
c                                                                               BlrHW  388
c              pick up boiler dT from loop if not specd                         BlrHW  389
      IF (<bl:HW-DT> .NE. 0.)  THEN                                             BlrHW  390
        <bl;HWdT> = <bl:HW-DT>                                                  BlrHW  391
      ELSE                                                                      BlrHW  392
        <bl;HWdT> = <pl;QheatDT>                                                BlrHW  393
      ENDIF                                                                     BlrHW  394
c              hot water flow, actual and at standard conditions (68F)          BlrHW  395
      <bl;Flow> = <bl;Capacity> / (<pl.Btuh/GPM-F>*<bl;HWdT>)                   BlrHW  396
c              head at actual conditions                                        BlrHW  397
      Head = FluidDP_Design(<bl;HWFluidProp>,<bl;Flow>,<bl:HW-HEAD>)            BlrHW  398
c              Design the boiler pump                                           BlrHW  399
      IF (<bl:HW-PUMP> .GT. 0)  THEN                                            BlrHW  400
        IF (<bl;Flow> .GT. 0.)  THEN                                            BlrHW  401
          Jpm         = <bl:HW-PUMP>                                            BlrHW  402
          <pm.Mfluid> = <bl;Flow>                                               BlrHW  403
c              pump may recirculate, or may power the plant                     BlrHW  404
          <pm.Psetpt> = Head                                                    BlrHW  405
          IF (<pl:PUMP> .EQ. 0)  <pm.Psetpt> = <pm.Psetpt> + <pl;DesDP>         BlrHW  406
          CALL PumpAlgs(111, Jpm)                                               BlrHW  407
c              decrease default size by pump heat                               BlrHW  408
          IF (<bl:CAP> .EQ. 0.)                                                 BlrHW  409
     &      <bl;Capacity> = <bl;Capacity> - <pm.Qfluid>                         BlrHW  410
          IF (<pl:PUMP> .EQ. 0)  <fo.Poutlet> = <pm;DesHead> - Head             BlrHW  411
        ENDIF                                                                   BlrHW  412
      ELSE                                                                      BlrHW  413
        <fo.Preqd> = Head                                                       BlrHW  414
      ENDIF                                                                     BlrHW  415
c              design power and fuel consumption                                BlrHW  416
      IF (<bl:ELEC-METER> .GT. 0)  THEN                                         BlrHW  417
        <bl;kW>   = <bl;Capacity> * <bl:EIR>                                    BlrHW  418
        Kmd       = <bl:ELEC-METER>                                             BlrHW  419
        <md.Elec> = <bl;kW>                                                     BlrHW  420
      ENDIF                                                                     BlrHW  421
      IF (<bl:AUX-METER> .GT. 0)  THEN                                          BlrHW  422
        Kmd       = <bl:AUX-METER>                                              BlrHW  423
        <md.Elec> = <bl:AUX-KW>                                                 BlrHW  424
      ENDIF                                                                     BlrHW  425
      IF (<bl:FUEL-METER> .GT. 0)  THEN                                         BlrHW  426
        <bl;Fuel> = <bl;Capacity> * <bl:HIR>                                    BlrHW  427
        Kmd       = <bl:FUEL-METER>                                             BlrHW  428
        <md.Fuel> = <bl;Fuel>                                                   BlrHW  429
      ENDIF                                                                     BlrHW  430
c                                                                               BlrHW  431
c              set node conditions                                              BlrHW  432
      <fo.Qoutlet> = <bl;Capacity>                                              BlrHW  433
      <fo.Moutlet> = <bl;Flow>                                                  BlrHW  434
c                                                                               BlrHW  435
c                                                                               BlrHW  436
c ============ DESIGN CALCULATIONS - RECONCILIATION =========================== BlrHW  437
      CASE (119)                                                                BlrHW  438
c                                                                               BlrHW  439
c              convert minimum and maximum flows from fraction to gpm           BlrHW  440
      <bl;HWMinFlow> = <fo.Moutlet> * <bl:HW-MIN-GPM>                           BlrHW  441
      <bl;HWMaxFlow> = <fo.Moutlet> * <bl:HW-MAX-GPM>                           BlrHW  442
      IF (<bl;Flow> .GT. 0)                                                     BlrHW  443
     &    <bl;1/Flow> = 1. / <bl;Flow>                                          BlrHW  444
      <fo;DesMoutlet> = <bl;Flow>                                               BlrHW  445
c                                                                               BlrHW  446
      <bl.Qheat> = <bl;Capacity>                                                BlrHW  447
c                                                                               BlrHW  448
c                                                                               BlrHW  449
c ============ ATTACHMENTS ==================================================== BlrHW  450
c                                                                               BlrHW  451
c              Initial attachments                                              BlrHW  452
      CASE (201)                                                                BlrHW  453
c              Component pointers, schedules, and curves                        BlrHW  454
        <bl:HW-PLANT>      = Jcomponent( 2, <bl:HW-PLANT>)                      BlrHW  455
        <bl:HW-RATED-FLUI> = Jcomponent(15, <bl:HW-RATED-FLUI>)                 BlrHW  456
        <bl:ELEC-METER>    = Jcomponent(13, <bl:ELEC-METER>)                    BlrHW  457
        <bl:AUX-METER>     = Jcomponent(13, <bl:AUX-METER>)                     BlrHW  458
        <bl:FUEL-METER>    = Jcomponent(13, <bl:FUEL-METER>)                    BlrHW  459
        <bl:HW-PUMP>       = Jcomponent( 1, <bl:HW-PUMP>)                       BlrHW  460
        <bl:COST-DATA>     = Jcomponent(18, <bl:COST-DATA>)                     BlrHW  461
        <bl:CAP-FT>        = Jcurve(<bl:CAP-FT>)                                BlrHW  462
        <bl:EIR-FPLR>      = Jcurve(<bl:EIR-FPLR>)                              BlrHW  463
        <bl:HIR-FT>        = Jcurve(<bl:HIR-FT>)                                BlrHW  464
        <bl:HIR-FPLR>      = Jcurve(<bl:HIR-FPLR>)                              BlrHW  465
        <bl:AUX-SCH>       = Jsched(<bl:AUX-SCH>)                               BlrHW  466
        <bl:ZONE>          = Jzone(<bl:ZONE>)                                   BlrHW  467
c                                                                               BlrHW  468
c              Fluid properties subcomponent                                    BlrHW  469
        <bl;HWFluidProp>   = NewFluidProperties(Jbl, <bl:HW-PLANT>, 11,         BlrHW  470
     &                       <bl:HW-VELOCITY>, <bl:TURBULENT-RE>,               BlrHW  471
     &                       <bl:LAMINAR-RE>, <bl:LAMINAR-DEGRD>,               BlrHW  472
     &                       0.,0.,<bl:HW-TUBE-DIA>, <bl:HW-ROUGHNESS>,         BlrHW  473
     &                       <bl:HW-RATED-FLUI>, <bl:HW-RATED-CONC>,            BlrHW  474
     &                       <bl:HW-RATED-T>, <bl:HW-RATED-FLOW>,               BlrHW  475
     &                       <bl:HW-STATIC>)                                    BlrHW  476
c                                                                               BlrHW  477
c              Second level of attachments                                      BlrHW  478
      CASE (202)                                                                BlrHW  479
        IF (<bl:HW-PUMP> .GT. 0)  THEN                                          BlrHW  480
          Jpm             = <bl:HW-PUMP>                                        BlrHW  481
          <pm;XComponent> = Jbl                                                 BlrHW  482
          <pm;Plant>      = <bl:HW-PLANT>                                       BlrHW  483
        ENDIF                                                                   BlrHW  484
c                                                                               BlrHW  485
c              Create nodes                                                     BlrHW  486
      CASE (203)                                                                BlrHW  487
c              outlet                                                           BlrHW  488
        <bl;HWOutletNode> = NewNode(1, 0,Jpl,Jbl,Jpl,                           BlrHW  489
     &                                      53,<bl:CONFIGURATION>,0, 1.)        BlrHW  490
c              meters                                                           BlrHW  491
        Jme = <bl:ELEC-METER>                                                   BlrHW  492
        <bl:ELEC-METER> = NewNode(1, Jpl,Jpl,Jbl,Jme, 11,2,Jpl, 1.)             BlrHW  493
        Jme = <bl:AUX-METER>                                                    BlrHW  494
        <bl:AUX-METER>  = NewNode(1, Jpl,Jpl,Jbl,Jme, 11,2,Jpl, 1.)             BlrHW  495
        Jme = <bl:FUEL-METER>                                                   BlrHW  496
        <bl:FUEL-METER> = NewNode(1, Jpl,Jpl,Jbl,Jme, 11,2,Jpl, 1.)             BlrHW  497
c              Hours of operation                                               BlrHW  498
        <bl;s8> = NewStat8(Jbl,<#fo.Qoutlet>,1,                                 BlrHW  499
     &                            <bl:MIN-RATIO>,<bl:START-TIME>)               BlrHW  500
c                                                                               BlrHW  501
c              Links, lists                                                     BlrHW  502
      CASE (205)                                                                BlrHW  503
c              List of nodes                                                    BlrHW  504
        CALL ListNodes(<bl;Nodes>, 0,0,Jbl,0, 0,0)                              BlrHW  505
c              find the plant node at the inlet                                 BlrHW  506
        Node              = -(<bl:CONFIGURATION>-1)                             BlrHW  507
        <bl;HWInletXnode> = LocateNode(0,0,<bl:HW-PLANT>,0, 53,Node)            BlrHW  508
c                                                                               BlrHW  509
c              Histories                                                        BlrHW  510
      CASE (208)                                                                BlrHW  511
c              Set up history on energy demands                                 BlrHW  512
        KliX = <bl;Nodes>                                                       BlrHW  513
        CALL ListXNodes(<bl;Nodes>, KliX)                                       BlrHW  514
        SELECT CASE (<bl:TYPE>)                                                 BlrHW  515
          CASE (1,2,4,5)  ! fuel boilers                                        BlrHW  516
            Kmx = <bl:FUEL-METER>                                               BlrHW  517
            <bl;EnergyHsty> = NewHistory(Jpl,Jpl,Jbl, KliX, Kmx,                BlrHW  518
     &                          0, 0, 1.,                                       BlrHW  519
     &                          <#mx.Load>, <sp:ERROR-LOAD>, 2,                 BlrHW  520
     &                          0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0)         BlrHW  521
          CASE (3,6)  ! electric boilers                                        BlrHW  522
            Kmx = <bl:ELEC-METER>                                               BlrHW  523
            <bl;EnergyHsty> = NewHistory(Jpl,Jpl,Jbl, KliX, Kmx,                BlrHW  524
     &                          0, 0, 1.,                                       BlrHW  525
     &                          <#mx.Load>, <sp:ERROR-LOAD>, 2,                 BlrHW  526
     &                          0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0)         BlrHW  527
        END SELECT                                                              BlrHW  528
c                                                                               BlrHW  529
c              Dump pointers                                                    BlrHW  530
      CASE (210)                                                                BlrHW  531
        IF (<bl;Previous> .EQ. 0)  WRITE (IOUTPT, 9201)                         BlrHW  532
        WRITE (IOUTPT, 9202)  (<bl:NAME>,II=1,8),                               BlrHW  533
     &                        Jbl, Xfi, Kfo, Xfo, <bl;HWFluidProp>              BlrHW  534
c                                                                               BlrHW  535
c                                                                               BlrHW  536
      END SELECT  ! Mode                                                        BlrHW  537
c                                                                               BlrHW  538
      RETURN                                                                    BlrHW  539
c                                                                               BlrHW  540
c              Message formats                                                  BlrHW  541
 9201 FORMAT(/' BOILERSs                               Jbl       Xfi',          BlrHW  542
     &'       Kfo       Xfo      Prop'                                 /        BlrHW  543
     &1x,32('-'),5('  --------'))                                               BlrHW  544
 9202 FORMAT(1x,8A4,5I10)                                                       BlrHW  545
      END                                                                       BlrHW  546
C ##############################################################################ClrAlg   2
C ##############################################################################ClrAlg   3
C ##############################################################################ClrAlg   4
C ##############################################################################ClrAlg   5
C ##########                                                          ##########ClrAlg   6
C ##########                     CHILLER ROUTINES                     ##########ClrAlg   7
C ##########                                                          ##########ClrAlg   8
C ##############################################################################ClrAlg   9
C ##############################################################################ClrAlg  10
C ##############################################################################ClrAlg  11
C ##############################################################################ClrAlg  12
c                                                                               ClrAlg  13
      SUBROUTINE Chiller_RefgHX(Mode, Knx)                                      ClrRHX   2
c                                                                               ClrRHX   3
c              Simulates a refrigerant to chilled-water heat exchanger          ClrRHX   4
c                                                                               ClrRHX   5
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /FNSYS/  ISKIPS, MSYSF(120)                                       /FNSYS/  2
      COMMON  /MISCD / TEMPS(4,4096),CONS(5),TEMPSL(4096),                      /MISCD/  2
     1                 BLDGQH,BLDGQC,BLDGQL,BLDGP,BPMULT,                       /MISCD/  3
     2                 DBTMIN,DBTMAX,WMIN,WMAX,NSPZ(4096),                      /MISCD/  4
     3                 DQ, DTP, DTR, DTS, FPI, PLRCC , POM, TC2, TDM,           /MISCD/  5
     4                 TRA,WCOL,WCOLM,WMM,YPI,KWBTU,BTUKW,UNFILD,Unusedm        /MISCD/  6
      REAL             KWBTU                                                    /MISCD/  7
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               ClrRHX  15
      COMMON  /EQKY  / Always, WhenOn, WhenOff, AuxSched,                       /EQKY/   2
     &                 ConstantFlow, VariableFlow, Yes, No                      /EQKY/   3
      INTEGER          Always, WhenOn, WhenOff, AuxSched,                       /EQKY/   4
     &                 ConstantFlow, VariableFlow, Yes, No                      /EQKY/   5
      DATA IdNode /4H$Kno/                                                      /IdNode/ 2
c                                                                               ClrRHX  18
      INTEGER  Xfi, Xfo, Xri, Xro, rH, CHLRtype(4)                              ClrRHX  19
      REAL     NTU, MdP, Mmax1, Mmax2                                           ClrRHX  20
      LOGICAL  IterReqdHsty                                                     ClrRHX  21
      INTEGER  Routine(4)                                                       ClrRHX  22
      DATA     Routine  /4HChil,4Hler_,4HRefg,4HHX  /                           ClrRHX  23
      DATA     CHLRtype /4HREFG,4H-HX ,4H    ,4H    /                           ClrRHX  24
c                                                                               ClrRHX  25
c                                                                               ClrRHX  26
      IF (<nx;Ident> .EQ. IdNode)  THEN                                         ClrRHX  27
        Jch = <nx;Component>                                                    ClrRHX  28
      ELSE                                                                      ClrRHX  29
        Jch = Knx                                                               ClrRHX  30
      ENDIF                                                                     ClrRHX  31
      Jpl = <ch:CHW-PLANT>               ! CHW plant                            ClrRHX  32
      Jre = <ch;Refrigerant>             ! Refrigerant                          ClrRHX  33
      Khx = <ch;HX>                      ! HX subcomponent                      ClrRHX  34
      Xfi = <ch;CHWInletXnode>           ! CHW Xfaced inlet                     ClrRHX  35
      Kfo = <ch;CHWOutletNode>           ! CHW outlet node                      ClrRHX  36
      Xfo = <fo;Xnode>                   ! CHW Xfaced outlet                    ClrRHX  37
      Kri = <ch;LiquidNode>              ! Refrigerant liquid                   ClrRHX  38
      Xri = <ri;Xnode>                   ! Xfaced liquid                        ClrRHX  39
      Kro = <ch;SuctionNode>             ! Refrigerant suction                  ClrRHX  40
      Xro = <ro;Xnode>                   ! Xfaced suction                       ClrRHX  41
c                                                                               ClrRHX  42
      SELECT CASE (Mode)                                                        ClrRHX  43
c                                                                               ClrRHX  44
c                                                                               ClrRHX  45
c ============ HOURLY OPERATING CAPACITY - FLOATING =========================== ClrRHX  46
      CASE (21)                                                                 ClrRHX  47
c                                                                               ClrRHX  48
c              Flow capacity as a function of pressure differential             ClrRHX  49
      IF (<ch:CHW-PUMP> .GT. 0)  THEN                                           ClrRHX  50
        Jpm = <ch:CHW-PUMP>                                                     ClrRHX  51
        IF (<pl:PUMP> .GT. 0)  THEN                                             ClrRHX  52
c              equipment pump                                                   ClrRHX  53
          MdP = <pm;TotalFlow>                                                  ClrRHX  54
        ELSE                                                                    ClrRHX  55
c              loop pump                                                        ClrRHX  56
          <pm.Psetpt> = <Xfo.Preqd> - <Xfi.Pinlet> + <ch;CHWdP>                 ClrRHX  57
          CALL PumpAlgs(22, Jpm)                                                ClrRHX  58
          MdP = <pm.Mfluid>                                                     ClrRHX  59
        ENDIF                                                                   ClrRHX  60
      ELSE  ! no evaporator pump; flow as function of pressure differential     ClrRHX  61
        dP = <Xfi.Pinlet> - <Xfo.Preqd>                                         ClrRHX  62
        IF (dP .GT. 0.)  THEN                                                   ClrRHX  63
          MdP = FluidFlow(<ch;CHWFluidProp>, dP)                                ClrRHX  64
        ELSE                                                                    ClrRHX  65
          MdP = <ch;DesFlow> * 0.01                                             ClrRHX  66
        ENDIF                                                                   ClrRHX  67
      ENDIF                                                                     ClrRHX  68
c              flow and thermal capacity                                        ClrRHX  69
      <fo.MaxMfluid> = MIN(MdP, <ch;CHWMaxFlow>)                                ClrRHX  70
      <fo.MaxQfluid> = <ch;OpCap>                                               ClrRHX  71
c                                                                               ClrRHX  72
c                                                                               ClrRHX  73
c ============ HOURLY OPERATING CAPACITY - HEATING ============================ ClrRHX  74
      CASE (23)                                                                 ClrRHX  75
c                                                                               ClrRHX  76
c              To be here, chiller must be attached to dual-mode loop           ClrRHX  77
c              in heating mode                                                  ClrRHX  78
      <fo.MaxMfluid> = -88888888.                                               ClrRHX  79
      <fo.MaxQfluid> = 0.                                                       ClrRHX  80
c                                                                               ClrRHX  81
c                                                                               ClrRHX  82
c ============ HOURLY OPERATING CAPACITY - COOLING ============================ ClrRHX  83
      CASE (25)                                                                 ClrRHX  84
c                                                                               ClrRHX  85
c              CHW inlet temperature                                            ClrRHX  86
      DemTi = <Xfi.Tinlet>                                                      ClrRHX  87
      IF (<ch:CHW-PUMP> .GT. 0)  THEN                                           ClrRHX  88
        Jpm = <ch:CHW-PUMP>                                                     ClrRHX  89
        DemTi = DemTi + <pm.dT>                                                 ClrRHX  90
      ENDIF                                                                     ClrRHX  91
c                                                                               ClrRHX  92
c              CHW setpoint and minimum possible suction temperature            ClrRHX  93
      <ch;Tsetpt> = <Xfo.Tsetpt>                                                ClrRHX  94
      SSTmin      = RefgT_fP(Jre, <Xro.Poutlet>)                                ClrRHX  95
      IF (SSTmin .GE. <ch;Tsetpt>)  THEN                                        ClrRHX  96
c              Chiller cannot meet setpoint                                     ClrRHX  97
        <fo.MaxMfluid> = 0.                                                     ClrRHX  98
        <fo.MaxQfluid> = 0.                                                     ClrRHX  99
        <ch;OpCap>     = 0.                                                     ClrRHX 100
        RETURN                                                                  ClrRHX 101
      ENDIF                                                                     ClrRHX 102
c                                                                               ClrRHX 103
c              Initialize refrigerant and CHW flows to last values              ClrRHX 104
      <ro.Moutlet> = MAX(<ch;MrefgOpCap>, 0.01)                                 ClrRHX 105
      <fo.Moutlet> = MAX(<ch;MchwOpCap>, 0.01)                                  ClrRHX 106
      DemCp        = AA(<hx;AAptrCpDemand>)                                     ClrRHX 107
c              Required chw dT and EPR setpoint                                 ClrRHX 108
      dTchwReqd    = DemTi - <ch;Tsetpt>                                        ClrRHX 109
      IF (<ch:TEMP-CTRL> .NE. 2)  THEN                                          ClrRHX 110
        SSTepr     = -88888.                                                    ClrRHX 111
      ELSE  ! EPR                                                               ClrRHX 112
        SSTepr     = <ch;Tsetpt>-<ch;EPRoffset>                                 ClrRHX 113
      ENDIF                                                                     ClrRHX 114
c                                                                               ClrRHX 115
c              Iterate to solve for chw and refg flows                          ClrRHX 116
      CALL HistoryInit(<ch;FlowsHsty>)                                          ClrRHX 117
      DO  iCount=1,100                                                          ClrRHX 118
c              Available suction pressure, adjusted for control valve           ClrRHX 119
        Voutlet = RefgV_fPH(Jre, <Xro.Poutlet>, <ro.Houtlet>)                   ClrRHX 120
        dPctrl  = (<ro.Moutlet> * <ch;1/DesMrefg>   )**1.87                     ClrRHX 121
     &          * (     Voutlet * <ch;DesignOutletD>)**1.6                      ClrRHX 122
        dPctrl  = dPctrl * <ch;CtrlValveDP>                                     ClrRHX 123
        Pctrl   = <Xro.Poutlet> + dPctrl                                        ClrRHX 124
c              suction temperature, adjusted for EPR                            ClrRHX 125
        SST     = MAX(RefgT_fP(Jre, Pctrl), SSTepr)                             ClrRHX 126
        SST     = MIN(<ch;Tsetpt>, SST)                                         ClrRHX 127
c              heat-exchanger UA at these flows                                 ClrRHX 128
        Rsup    = FluidFilm(<hx;FluidPropSup>, <ro.Moutlet>)                    ClrRHX 129
        Rdem    = FluidFilm(<hx;FluidPropDem>, <fo.Moutlet>)                    ClrRHX 130
        Rtot    = Rsup + <hx;Rmedia> + Rdem                                     ClrRHX 131
        UA      = 1. / Rtot                                                     ClrRHX 132
c              effectiveness and heat transferred                               ClrRHX 133
        Cdem    = <fo.Moutlet> * DemCp                                          ClrRHX 134
        NTU     = UA / Cdem                                                     ClrRHX 135
        eff     = 1.0 - EXP(-NTU)                                               ClrRHX 136
        OpCap   = eff * Cdem * (DemTi-SST)                                      ClrRHX 137
c              refrigerant flow at these conditions                             ClrRHX 138
        dTsuper      = DemTi - SST                                              ClrRHX 139
        dTsuper      = MAX(0., MIN(<ch:SUPERHEAT-DT>, dTsuper))                 ClrRHX 140
        <ro.Houtlet> = RefgH_Vapor_fTS(Jre, SST, dTsuper)                       ClrRHX 141
        dHsuction    = <ro.Houtlet> - <Xri.Hinlet>                              ClrRHX 142
        <ro.Moutlet> = OpCap / dHsuction                                        ClrRHX 143
c              adjust chw flow                                                  ClrRHX 144
        dTchw        = OpCap / Cdem                                             ClrRHX 145
        <fo.Moutlet> = <fo.Moutlet> * dTchw/dTchwReqd                           ClrRHX 146
c              check for convergence                                            ClrRHX 147
        CALL CnvgCheck(2, <ch;FlowsHsty>)                                       ClrRHX 148
        IF (.NOT. IterReqdHsty(<ch;FlowsHsty>))  EXIT                           ClrRHX 149
        IF (iCount .EQ. 100)  CALL CnvgMsg2(1, Routine, Jch)                    ClrRHX 150
      ENDDO                                                                     ClrRHX 151
      <ch;OpCap>      = OpCap                                                   ClrRHX 152
      <ch;MrefgOpCap> = <ro.Moutlet>                                            ClrRHX 153
      <ch;MchwOpCap>  = <fo.Moutlet>                                            ClrRHX 154
      <fo.MaxMfluid>  = <fo.Moutlet>                                            ClrRHX 155
c                                                                               ClrRHX 156
c              Limit by available refrigerant capacity                          ClrRHX 157
c              Maximum suction flow across chiller                              ClrRHX 158
      dP    = MAX(0., <Xri.Pinlet> - <Xro.Poutlet>)                             ClrRHX 159
      Mmax1 = <ch;DesMrefg> * (dP*<ch;1/dPsupply>)**(1./1.87)                   ClrRHX 160
c              Maximum suction flow, inlet to control valve                     ClrRHX 161
      dP    = MAX(0., <Xri.Pinlet> - Pctrl)                                     ClrRHX 162
      Mmax2 = <ch;DesMrefg> * (dP*<ch;1/dPsupplyIn>)**(1./1.87)                 ClrRHX 163
c              Maximum possible refrigerant flow and heat removal               ClrRHX 164
      <ch;MrefgMax> = MIN(Mmax1, Mmax2)                                         ClrRHX 165
      <ch;QcoolMax> = <ch;MrefgMax> * dHsuction                                 ClrRHX 166
      IF (<ch;OpCap> .GT. <ch;QcoolMax>)  THEN                                  ClrRHX 167
        <fo.MaxMfluid> = <fo.MaxMfluid>                                         ClrRHX 168
     &                              * <ch;QcoolMax>/<ch;OpCap>                  ClrRHX 169
        <ch;OpCap>     = <ch;QcoolMax>                                          ClrRHX 170
      ENDIF                                                                     ClrRHX 171
c                                                                               ClrRHX 172
c              Flow capacity as a function of pressure differential             ClrRHX 173
      IF (<ch:CHW-PUMP> .GT. 0)  THEN                                           ClrRHX 174
        Jpm = <ch:CHW-PUMP>                                                     ClrRHX 175
        IF (<pl:PUMP> .GT. 0)  THEN                                             ClrRHX 176
c              recirculation pump                                               ClrRHX 177
          MdP = <pm;TotalFlow>                                                  ClrRHX 178
        ELSE  ! loop pump                                                       ClrRHX 179
          <pm.Psetpt> = <Xfo.Preqd> - <Xfi.Pinlet> + <ch;CHWdP>                 ClrRHX 180
          CALL PumpAlgs(22, Jpm)                                                ClrRHX 181
          MdP = <pm.Mfluid>                                                     ClrRHX 182
        ENDIF                                                                   ClrRHX 183
      ELSE  ! no chiller pump                                                   ClrRHX 184
        dP = <Xfi.Pinlet> - <Xfo.Preqd>                                         ClrRHX 185
        IF (dP .GT. 0.)  THEN                                                   ClrRHX 186
          MdP = FluidFlow(<ch;CHWFluidProp>, dP)                                ClrRHX 187
        ELSE                                                                    ClrRHX 188
          MdP = <ch;DesFlow> * 0.01                                             ClrRHX 189
        ENDIF                                                                   ClrRHX 190
      ENDIF                                                                     ClrRHX 191
c              flow and thermal capacity                                        ClrRHX 192
      <fo.MaxMfluid> = MIN(<fo.MaxMfluid>, MdP, <ch;CHWMaxFlow>)                ClrRHX 193
      <fo.MaxQfluid> = <ch;OpCap>                                               ClrRHX 194
c                                                                               ClrRHX 195
c                                                                               ClrRHX 196
c ============ HOURLY SIMULATION ============================================== ClrRHX 197
      CASE (30:37)                                                              ClrRHX 198
c                                                                               ClrRHX 199
c              Check if off                                                     ClrRHX 200
      IF (<fo.Moutlet> .EQ. 0.)  THEN                                           ClrRHX 201
        Call NoLoad                                                             ClrRHX 202
        <ro.Mreqd> = 0.                                                         ClrRHX 203
        IF (<ch:CHW-PUMP> .GT. 0)  THEN                                         ClrRHX 204
          CALL PumpAlgs(30, <ch:CHW-PUMP>)                                      ClrRHX 205
        ENDIF                                                                   ClrRHX 206
        RETURN                                                                  ClrRHX 207
      ENDIF                                                                     ClrRHX 208
c                                                                               ClrRHX 209
c              Simulate pump                                                    ClrRHX 210
      IF (<ch:CHW-PUMP> .GT. 0)  THEN                                           ClrRHX 211
        Jpm          = <ch:CHW-PUMP>                                            ClrRHX 212
        <pm.RunFrac> = <pl.RunFrac>                                             ClrRHX 213
        IF (<pl:PUMP> .GT. 0)  THEN        ! recirculation pump only            ClrRHX 214
          IF (<ch:CHW-CTRL> .EQ. 1)  THEN  ! constant flow                      ClrRHX 215
            <pm.Mfluid> = <ch;DesFlow>                                          ClrRHX 216
          ELSE                             ! variable flow                      ClrRHX 217
            <pm.Mfluid> = MAX(<fo.Moutlet>, <ch;CHWMinFlow>)                    ClrRHX 218
          ENDIF                                                                 ClrRHX 219
          <pm.Psetpt> = FluidDP(<ch;CHWFluidProp>, <pm.Mfluid>)                 ClrRHX 220
          CALL PumpAlgs(31, Jpm)                                                ClrRHX 221
          <fo.Poutlet> = <Xfi.Pinlet>                                           ClrRHX 222
          <ch;CHWdP>   = <pm.Psetpt>                                            ClrRHX 223
        ELSE  ! loop pump                                                       ClrRHX 224
          <pm.Mfluid> = <fo.Moutlet>                                            ClrRHX 225
          <ch;CHWdP>  = FluidDP(<ch;CHWFluidProp>, <pm.Mfluid>)                 ClrRHX 226
          <pm.Psetpt> = <Xfo.Preqd> - <Xfi.Pinlet> + <ch;CHWdP>                 ClrRHX 227
          CALL PumpAlgs(31, Jpm)                                                ClrRHX 228
          <fo.Poutlet> = <Xfi.Pinlet> + <pm.dP> - <ch;CHWdP>                    ClrRHX 229
        ENDIF                                                                   ClrRHX 230
        DemTi = <Xfi.Tinlet> + <pm.dT>                                          ClrRHX 231
      ELSE  ! no evaporator pump                                                ClrRHX 232
c              pressure at chiller outlet                                       ClrRHX 233
        <ch;CHWdP>   = FluidDP(<ch;CHWFluidProp>, <fo.Moutlet>)                 ClrRHX 234
        <fo.Poutlet> = <Xfi.Pinlet> - <ch;CHWdP>                                ClrRHX 235
        DemTi        = <Xfi.Tinlet>                                             ClrRHX 236
      ENDIF  ! ch:CHW-PUMP                                                      ClrRHX 237
c                                                                               ClrRHX 238
c              Initialize refrigerant flow for HX calcs                         ClrRHX 239
      <ro.Moutlet> = MAX(<ch;Mrefg>, 0.01)                                      ClrRHX 240
c                                                                               ClrRHX 241
c              Chiller setpoint and minimum possible suction temperature        ClrRHX 242
      <ch;Tsetpt> = <Xfo.Tsetpt>                                                ClrRHX 243
      SSTmin      = RefgT_fP(Jre, <Xro.Poutlet>)                                ClrRHX 244
c                                                                               ClrRHX 245
c              Calculate the leaving water conditions, given                    ClrRHX 246
c              the minimum SST and entering water conditions                    ClrRHX 247
      SELECT CASE (<ch:TEMP-CTRL>)                                              ClrRHX 248
c                                                                               ClrRHX 249
        CASE (1)  ! Floating                                                    ClrRHX 250
          IF (SSTmin .GE. DemTi)  THEN                                          ClrRHX 251
c              entering chw is colder than suction - no load                    ClrRHX 252
            Call NoLoad                                                         ClrRHX 253
            <ro.Mreqd> = 0.                                                     ClrRHX 254
          ELSE                                                                  ClrRHX 255
c              active cooling                                                   ClrRHX 256
            SSTset = SSTmin                                                     ClrRHX 257
            Call FloatLoad                                                      ClrRHX 258
c              required suction flow and pressure                               ClrRHX 259
            <ro.Mreqd> = <ro.Moutlet>                                           ClrRHX 260
            dT         = <fo.Toutlet> - SST                                     ClrRHX 261
            <ro.Preqd> = RefgP_fT(Jre, <ch;Tsetpt>-dT)                          ClrRHX 262
          ENDIF  ! Xfi,Tinlet                                                   ClrRHX 263
c                                                                               ClrRHX 264
        CASE (2)  ! Local EPR                                                   ClrRHX 265
c              Suction setpoint is chw setpoint, minus the design               ClrRHX 266
c              EPR differential                                                 ClrRHX 267
          SSTset = <ch;Tsetpt> - <ch;EPRoffset>                                 ClrRHX 268
c              Given the setpoint, see if cooling necessary                     ClrRHX 269
          IF (<ch;Tsetpt> .GE. DemTi)  THEN                                     ClrRHX 270
c              entering chw is colder than suction setpoint - no load           ClrRHX 271
            Call NoLoad                                                         ClrRHX 272
            <ro.Mreqd> = 0.                                                     ClrRHX 273
          ELSEIF (SSTmin .GE. DemTi)  THEN                                      ClrRHX 274
c              suction is warmer than entering chw                              ClrRHX 275
            Call NoLoad                                                         ClrRHX 276
c                 set required suction to tentative value                       ClrRHX 277
            Call ReqdSuction_NoLoad                                             ClrRHX 278
          ELSE                                                                  ClrRHX 279
c                 Chiller is active - calc SST and refg mass                    ClrRHX 280
            Call FloatLoad                                                      ClrRHX 281
c              required suction flow and pressure                               ClrRHX 282
            <ro.Mreqd> = <ro.Moutlet>                                           ClrRHX 283
            <ro.Preqd> = MAX(<re;Pmin>, RefgP_fT(Jre, SSTset)-dPctrl)           ClrRHX 284
          ENDIF  ! Xfi,Tinlet                                                   ClrRHX 285
c                                                                               ClrRHX 286
        CASE (3)  ! Thermostat                                                  ClrRHX 287
          IF (<ch;Tsetpt> .GE. DemTi)  THEN                                     ClrRHX 288
c              entering chw is colder than setpoint - no load                   ClrRHX 289
            Call NoLoad                                                         ClrRHX 290
            <ro.Mreqd> = 0.                                                     ClrRHX 291
          ELSEIF (SSTmin .GE. DemTi)  THEN                                      ClrRHX 292
c                 suction is warmer than entering chw - no load                 ClrRHX 293
            Call NoLoad                                                         ClrRHX 294
c                 set required suction to tentative value                       ClrRHX 295
            Call ReqdSuction_NoLoad                                             ClrRHX 296
          ELSE                                                                  ClrRHX 297
c              chiller is active - required suction conditions                  ClrRHX 298
            Call ReqdLoad                                                       ClrRHX 299
            IF (<ro.Preqd> .LT. <Xro.Poutlet>)  THEN                            ClrRHX 300
c              chw setpoint can't be met; take what we can                      ClrRHX 301
              SSTset = SSTmin                                                   ClrRHX 302
              Call FloatLoad                                                    ClrRHX 303
            ENDIF                                                               ClrRHX 304
          ENDIF                                                                 ClrRHX 305
      END SELECT  ! ch:TEMP-CTRL                                                ClrRHX 306
c              Pressure as regulated by temperature control valve               ClrRHX 307
      <ch;Pctrl> = RefgP_fT(Jre, MAX(SST, SSTmin))                              ClrRHX 308
c                                                                               ClrRHX 309
c              Check load-based flow against pressure-based flow                ClrRHX 310
      IF (<ro.Moutlet> .GT. 0.)  THEN                                           ClrRHX 311
c              Maximum suction flow across chiller                              ClrRHX 312
        dP    = MAX(0., <Xri.Pinlet> - <Xro.Poutlet>)                           ClrRHX 313
        Mmax1 = <ch;DesMrefg> * (dP*<ch;1/dPsupply>)**(1./1.87)                 ClrRHX 314
c              Maximum suction flow, inlet to control valve                     ClrRHX 315
        dP    = MAX(0., <Xri.Pinlet> - <ch;Pctrl>)                              ClrRHX 316
        Mmax2 = <ch;DesMrefg> * (dP*<ch;1/dPsupplyIn>)**(1./1.87)               ClrRHX 317
        <ch;MrefgMax> = MIN(Mmax1, Mmax2)                                       ClrRHX 318
        <ch;QcoolMax> = <ch;MrefgMax> * (<ro.Houtlet>-<Xri.Hinlet>)             ClrRHX 319
        IF (<ro.Moutlet> .GT. <ch;MrefgMax>)  THEN                              ClrRHX 320
c              Load-based suction flow is greater than what the                 ClrRHX 321
c              liquid/suction pressure differential permits                     ClrRHX 322
          IF (<ch;MrefgMax> .EQ. 0.)  THEN                                      ClrRHX 323
c              no suction pressure differential                                 ClrRHX 324
            Call NoLoad                                                         ClrRHX 325
          ELSE                                                                  ClrRHX 326
c              chiller is operating at reduced capacity                         ClrRHX 327
            <ro.Moutlet> = <ch;MrefgMax>                                        ClrRHX 328
c              Suction pressure, adjusted for control valve                     ClrRHX 329
            dPctrl     = (<ro.Moutlet> * <ch;1/DesMrefg>   )**1.87              ClrRHX 330
     &                 * (     Voutlet * <ch;DesignOutletD>)**1.6               ClrRHX 331
            dPctrl     = dPctrl * <ch;CtrlValveDP>                              ClrRHX 332
            <ch;Pctrl> = <Xro.Poutlet> + dPctrl                                 ClrRHX 333
            SSTmin     = RefgT_fP(Jre, <ch;Pctrl>)                              ClrRHX 334
            SELECT CASE (<ch:TEMP-CTRL>)                                        ClrRHX 335
              CASE (2)  ! Local EPR                                             ClrRHX 336
                SST = MAX(SSTmin, SSTset)                                       ClrRHX 337
              CASE DEFAULT                                                      ClrRHX 338
                SST = SSTmin                                                    ClrRHX 339
            END SELECT                                                          ClrRHX 340
c              Maximum possible heat transfer, assuming the refg                ClrRHX 341
c              temperature approaches the chw inlet temperature                 ClrRHX 342
            dTsuper      = DemTi - SST                                          ClrRHX 343
            <ro.Houtlet> = RefgH_Vapor_fTS(Jre, SST, dTsuper)                   ClrRHX 344
            QhxMax       = <ro.Moutlet> * (<ro.Houtlet>-<Xri.Hinlet>)           ClrRHX 345
c              skip if the extra superheat can handle load                      ClrRHX 346
            IF (QhxMax .GE. <ch;Qcool>)  THEN                                   ClrRHX 347
              <ro.Houtlet> = <Xri.Hinlet> + <ch;Qcool>/<ro.Moutlet>             ClrRHX 348
            ELSE                                                                ClrRHX 349
              dTchw        = <fo.Toutlet> - DemTi                               ClrRHX 350
              dTchw        = dTchw * QhxMax/<ch;Qcool>                          ClrRHX 351
              <fo.Toutlet> = DemTi + dTchw                                      ClrRHX 352
              <ch;Qcool>   = QhxMax                                             ClrRHX 353
              <hx;Qnet>    = QhxMax                                             ClrRHX 354
            ENDIF                                                               ClrRHX 355
          ENDIF                                                                 ClrRHX 356
        ENDIF  ! ro,Moutlet .gt. ch;MrefgMax                                    ClrRHX 357
      ENDIF  ! ro,Moutlet .gt. 0.                                               ClrRHX 358
c                                                                               ClrRHX 359
c                                                                               ClrRHX 360
c ============ HOURLY SIMULATION - DEMAND SIDE ================================ ClrRHX 361
      CASE (38:39)                                                              ClrRHX 362
c                                                                               ClrRHX 363
      <ch.RunFrac> = <pl.RunFrac>                                               ClrRHX 364
c                                                                               ClrRHX 365
c              Auxiliary power                                                  ClrRHX 366
      IF (<ch:AUX-KW> .GT. 0.)  THEN                                            ClrRHX 367
        Kmd = <ch:AUX-METER>                                                    ClrRHX 368
        SELECT CASE (<ch:AUX-MODE>)                                             ClrRHX 369
          CASE (1)  ! Always                                                    ClrRHX 370
            <md.Elec> = <ch:AUX-KW>                                             ClrRHX 371
          CASE (2)  ! When on                                                   ClrRHX 372
            <md.Elec> = <ch:AUX-KW> * <ch.RunFrac>                              ClrRHX 373
          CASE (3)  ! When off                                                  ClrRHX 374
            <md.Elec> = <ch:AUX-KW> * (1.0 - <ch.RunFrac>)                      ClrRHX 375
          CASE (4)  ! Scheduled                                                 ClrRHX 376
            <md.Elec> = <ch:AUX-KW> * SchVal(<ch:AUX-SCH>)                      ClrRHX 377
        END SELECT                                                              ClrRHX 378
      ENDIF                                                                     ClrRHX 379
c                                                                               ClrRHX 380
c              check for convergence (refrigerant side)                         ClrRHX 381
      IF (Mode .EQ. 38)  THEN                                                   ClrRHX 382
        CALL CnvgCheck(1, <ch;EnergyHsty>)  ! Loads to plant                    ClrRHX 383
      ELSE                                                                      ClrRHX 384
        CALL CnvgCheck(0, <ch;EnergyHsty>)  ! Plant to loads                    ClrRHX 385
      ENDIF                                                                     ClrRHX 386
c              Refrigerant conditions at inlet                                  ClrRHX 387
      <ri.Minlet>  = <ro.Moutlet>                                               ClrRHX 388
      <ri.Qinlet>  = <ri.Minlet> * (<Xri.Hinlet>-AA(<ch;RefgHrefPtr>))          ClrRHX 389
      <ro.Qoutlet> = <ri.Qinlet> + <ch;Qcool>                                   ClrRHX 390
c              required conditions at inlet                                     ClrRHX 391
      <ri.Mreqd>   = <ro.Mreqd>                                                 ClrRHX 392
      dPhx         = <ch:REFG-DP> * (<ro.Mreqd>*<ch;1/DesMrefg>)**1.87          ClrRHX 393
      <ri.Preqd>   = MIN(<re;Pmax>, <ch;Pctrl> + dPhx)                          ClrRHX 394
c              Liquid should be delivered no warmer than saturation             ClrRHX 395
      <ri.Treqd>   = RefgT_fP(Jre, <Xri.Pinlet>)                                ClrRHX 396
c                                                                               ClrRHX 397
c              Save refrigerant flow for next HX initialization                 ClrRHX 398
      <ch;Mrefg> = <ro.Moutlet>                                                 ClrRHX 399
c                                                                               ClrRHX 400
c                                                                               ClrRHX 401
c ============ REPORT CREATION ================================================ ClrRHX 402
      CASE (50)                                                                 ClrRHX 403
c                                                                               ClrRHX 404
c              statistics blocks                                                ClrRHX 405
      Ks2Load      = NewStat2(Jch,   <+ch;Qcool>, 0, 1.)                        ClrRHX 406
      Ks5LoadBin   = NewStat5(Jch,   <+ch;Qcool>, 0, 1.)                        ClrRHX 407
      Ks2Refg      = NewStat2(Kro, <+ro.Moutlet>, 0, 1.)                        ClrRHX 408
      Ks5RefgBin   = NewStat5(Kro, <+ro.Moutlet>, 0, 1.)                        ClrRHX 409
      Ks2Aux       = NewStat2(<ch:AUX-METER>, <+md.Elec>, 0, 1.)                ClrRHX 410
c                                                                               ClrRHX 411
c              Create the type "H" report                                       ClrRHX 412
      IF (<ch:REPORTS> .GT. 0  .AND.  IREPRT(3,23) .GT. 0)                      ClrRHX 413
     &  <ch;PS-H> = NewReport_H(Jch, 139,                                       ClrRHX 414
     &                          3, 4, 5,                                        ClrRHX 415
     &                          Ks2Load, Ks2Refg, Ks2Aux, 0,                    ClrRHX 416
     &                          Ks5LoadBin, Ks5RefgBin, 0,                      ClrRHX 417
     &                          0, 0, 0)                                        ClrRHX 418
c                                                                               ClrRHX 419
c              Setpoint overload                                                ClrRHX 420
      Delta    = <pl:SETPT-RNG>*0.5 + 0.001                                     ClrRHX 421
      <ch;s10> = NewStat10(Jch, <#ch;Tsetpt>, <#fo.Toutlet>, Delta, 1,          ClrRHX 422
     &                          <#ro.Mreqd>)                                    ClrRHX 423
c                                                                               ClrRHX 424
c                                                                               ClrRHX 425
c ============ REPORT ORDER =================================================== ClrRHX 426
      CASE (52)                                                                 ClrRHX 427
c                                                                               ClrRHX 428
      Call Report_H(Mode, <ch;PS-H>)                                            ClrRHX 429
      IF (<ch:CHW-PUMP> .ne. 0)  CALL PumpAlgs(Mode, <ch:CHW-PUMP>)             ClrRHX 430
c                                                                               ClrRHX 431
c                                                                               ClrRHX 432
c ============ REPORTS - VERIFICATION DATA ==================================== ClrRHX 433
      CASE (54)                                                                 ClrRHX 434
c                                                                               ClrRHX 435
c              Output design information                                        ClrRHX 436
      IF (<ch;PS-H> .ne. 0)  THEN                                               ClrRHX 437
        rH = <ch;PS-H>                                                          ClrRHX 438
        WRITE (IREPFL) 4,<rH;Iuniq>,1,1,0                                       ClrRHX 439
        WRITE(IREPFL)  20,<rH;Iuniq>,1,2,16,                                    ClrRHX 440
     &      (CHLRtype(II),II=1,4),                                              ClrRHX 441
     &      (<pl:NAME>,II=1,8),                                                 ClrRHX 442
     &      <ch;DesCap>, <ch;DesFlow>,                                          ClrRHX 443
     &      <ro.Moutlet>, <ch:AUX-KW>                                           ClrRHX 444
      ENDIF                                                                     ClrRHX 445
c                                                                               ClrRHX 446
c                                                                               ClrRHX 447
c ============ REPORTS - YEARLY SUMMARY (SPECIAL) ============================= ClrRHX 448
      CASE (58)                                                                 ClrRHX 449
c                                                                               ClrRHX 450
c              Setpoint overload                                                ClrRHX 451
      IF (<ch;PS-H> .ne. 0)  THEN                                               ClrRHX 452
        rH = <ch;PS-H>                                                          ClrRHX 453
        CALL Report_s10(<rH;Iuniq>, 6, <ch;s10>)                                ClrRHX 454
      ENDIF                                                                     ClrRHX 455
c                                                                               ClrRHX 456
c                                                                               ClrRHX 457
c ============ HOURLY REPORTS - HOURLY DATA =================================== ClrRHX 458
      CASE (62)                                                                 ClrRHX 459
c                                                                               ClrRHX 460
c              Hourly-report variables                                          ClrRHX 461
      IF (<ch;HourRepBuf> .EQ. 0)  RETURN                                       ClrRHX 462
c                                                                               ClrRHX 463
      IAptr        = <ch;HourRepBuf>-1                                          ClrRHX 464
      Kmd          = <ch:AUX-METER>                                             ClrRHX 465
      AA(IAptr+ 1) = <fo.Moutlet>                                               ClrRHX 466
      AA(IAptr+ 2) = <ch;Qcool>                                                 ClrRHX 467
      AA(IAptr+ 3) = <ch;kW>                                                    ClrRHX 468
      AA(IAptr+ 4) = <ch;Fuel>                                                  ClrRHX 469
      AA(IAptr+ 5) = <ch;Qstart>                                                ClrRHX 470
      AA(IAptr+ 6) = <ch;PLR>                                                   ClrRHX 471
      AA(IAptr+ 7) = <ch.RunFrac>                                               ClrRHX 472
      AA(IAptr+ 8) = <ch;EIR>                                                   ClrRHX 473
      AA(IAptr+ 9) = <ch;EIRfPLR>                                               ClrRHX 474
      AA(IAptr+10) = <ch;EIRfT>                                                 ClrRHX 475
      AA(IAptr+11) = <ch;HIR>                                                   ClrRHX 476
      AA(IAptr+12) = <ch;HIRfPLR>                                               ClrRHX 477
      AA(IAptr+13) = <ch;HIRfT>                                                 ClrRHX 478
      AA(IAptr+14) = <ch;CHWdP>                                                 ClrRHX 479
      AA(IAptr+15) = <ch;GrossCapacity>                                         ClrRHX 480
      AA(IAptr+16) = <ch;OpCap>                                                 ClrRHX 481
      AA(IAptr+17) = <ch;Pctrl>                                                 ClrRHX 482
      AA(IAptr+18) = <ch;SSTreqd>                                               ClrRHX 483
      AA(IAptr+19) = <ch;QcoolMax>                                              ClrRHX 484
      AA(IAptr+20) = <ch;Tsetpt>                                                ClrRHX 485
      AA(IAptr+21) = <md.Elec>                                                  ClrRHX 486
      AA(IAptr+22) = <Xfi.Tinlet>                                               ClrRHX 487
      AA(IAptr+23) = <Xfi.Pinlet>                                               ClrRHX 488
      AA(IAptr+24) = <fo.Toutlet>                                               ClrRHX 489
      AA(IAptr+25) = <fo.Poutlet>                                               ClrRHX 490
      AA(IAptr+26) = <Xfo.Tsetpt>                                               ClrRHX 491
      AA(IAptr+27) = <Xfo.Preqd>                                                ClrRHX 492
c                                                                               ClrRHX 493
c                                                                               ClrRHX 494
c ============ DESIGN INITIALIZATION ========================================== ClrRHX 495
      CASE (110)                                                                ClrRHX 496
c                                                                               ClrRHX 497
c              Set pressure drop thru chiller                                   ClrRHX 498
      IF (<ch:CHW-PUMP> .EQ. 0)                                                 ClrRHX 499
     &  <fo.Preqd> = <ch:CHW-HEAD> + <ch:CHW-STATIC>                            ClrRHX 500
c                                                                               ClrRHX 501
c                                                                               ClrRHX 502
c ============ DESIGN CALCULATIONS ============================================ ClrRHX 503
      CASE (111)                                                                ClrRHX 504
c                                                                               ClrRHX 505
c              chiller size                                                     ClrRHX 506
      IF (<ch:CAP> .EQ. 0.)  THEN                                               ClrRHX 507
c              default chiller size                                             ClrRHX 508
        IF (<ch:CAP-RATIO> .GT. 0.)  THEN                                       ClrRHX 509
          <ch;DesCap> = <pl;Qcool> * <ch:CAP-RATIO>                             ClrRHX 510
        ELSE                                                                    ClrRHX 511
c              No capacity ratio specified - size equipment equally             ClrRHX 512
c              Get pointer to plant node and plant node's equip list            ClrRHX 513
          Kli = <Xfo;Xnode>                                                     ClrRHX 514
          <ch;DesCap> = <pl;Qcool> / FLOAT(<li;NumItems>)                       ClrRHX 515
        ENDIF                                                                   ClrRHX 516
      ELSE                                                                      ClrRHX 517
c              user specified                                                   ClrRHX 518
        <ch;DesCap> = <ch:CAP>                                                  ClrRHX 519
      ENDIF                                                                     ClrRHX 520
c                                                                               ClrRHX 521
c              pick up chiller T and dT from loop if not specd                  ClrRHX 522
      IF (<ch:DESIGN-CHW-T> .NE. -66666.)  THEN                                 ClrRHX 523
        <ch;DesCHWT> = <ch:DESIGN-CHW-T>                                        ClrRHX 524
      ELSE                                                                      ClrRHX 525
        <ch;DesCHWT> = <Xfo.Tsetpt>                                             ClrRHX 526
      ENDIF                                                                     ClrRHX 527
      IF (<ch:CHW-DT> .NE. 0.)  THEN                                            ClrRHX 528
        <ch;DesCHWdT> = <ch:CHW-DT>                                             ClrRHX 529
      ELSE                                                                      ClrRHX 530
        <ch;DesCHWdT> = <pl;QcoolDT>                                            ClrRHX 531
      ENDIF                                                                     ClrRHX 532
c              chw flow                                                         ClrRHX 533
      <ch;DesFlow> = <ch;DesCap> / (<pl.Btuh/GPM-F>*<ch;DesCHWdT>)              ClrRHX 534
c              head at actual conditions                                        ClrRHX 535
      Head = FluidDP_Design(<ch;CHWFluidProp>, <ch;DesFlow>,                    ClrRHX 536
     &                                         <ch:CHW-HEAD>)                   ClrRHX 537
c              Design the chiller pump                                          ClrRHX 538
      IF (<ch:CHW-PUMP> .GT. 0)  THEN                                           ClrRHX 539
        IF (<ch;DesFlow> .GT. 0.)  THEN                                         ClrRHX 540
          Jpm         = <ch:CHW-PUMP>                                           ClrRHX 541
          <pm.Mfluid> = <ch;DesFlow>                                            ClrRHX 542
c              pump may recirculate, or may power the plant                     ClrRHX 543
          <pm.Psetpt> = Head                                                    ClrRHX 544
          IF (<pl:PUMP> .EQ. 0)  <pm.Psetpt> = <pm.Psetpt> + <pl;DesDP>         ClrRHX 545
          CALL PumpAlgs(111, Jpm)                                               ClrRHX 546
c              increase default size by pump heat                               ClrRHX 547
          IF (<ch:CAP> .EQ. 0.)                                                 ClrRHX 548
     &      <ch;DesCap> = <ch;DesCap> + <pm.Qfluid>                             ClrRHX 549
          IF (<pl:PUMP> .EQ. 0)  <fo.Poutlet> = <pm;DesHead> - Head             ClrRHX 550
        ENDIF                                                                   ClrRHX 551
      ELSE                                                                      ClrRHX 552
        <fo.Preqd> = Head                                                       ClrRHX 553
      ENDIF                                                                     ClrRHX 554
c              design electric consumption                                      ClrRHX 555
      IF (<ch:ELEC-METER> .GT. 0)  THEN                                         ClrRHX 556
        <ch;DesKW> = <ch;DesCap> * <ch:EIR>                                     ClrRHX 557
        Kmd        = <ch:ELEC-METER>                                            ClrRHX 558
        <md.Elec>  = <ch;DesKW>                                                 ClrRHX 559
      ENDIF                                                                     ClrRHX 560
      IF (<ch:AUX-METER> .GT. 0)  THEN                                          ClrRHX 561
        Kmd       = <ch:AUX-METER>                                              ClrRHX 562
        <md.Elec> = <ch:AUX-KW>                                                 ClrRHX 563
      ENDIF                                                                     ClrRHX 564
c                                                                               ClrRHX 565
      <fo.Qoutlet> = <ch;DesCap>                                                ClrRHX 566
      <fo.Moutlet> = <ch;DesFlow>                                               ClrRHX 567
c                                                                               ClrRHX 568
c ------------ Refrigerant-side calculations ---------------------------------- ClrRHX 569
c              Required suction pressure                                        ClrRHX 570
      <ch;SSTreqd> = <ch;DesCHWT> - <ch:REFG-CHW-TD>                            ClrRHX 571
      Pctrl        = RefgP_fT(Jre, <ch;SSTreqd>)                                ClrRHX 572
c              Refrigerant conditions at outlet to suction                      ClrRHX 573
      <ro.Houtlet> = RefgH_Vapor_fSP(Jre, <ch:SUPERHEAT-DT>, Pctrl)             ClrRHX 574
      <ro.Moutlet> = <ch;DesCap> / (<ro.Houtlet>-<Xri.Hinlet>)                  ClrRHX 575
      <ro.Mreqd>   = MAX(0.000001, <ro.Moutlet>)                                ClrRHX 576
c              effect of control valve                                          ClrRHX 577
      dPctrl = Pctrl - RefgP_fT(Jre, <ch;SSTreqd>-<ch:CTRL-VALVE-DT>)           ClrRHX 578
      IF (<ch:REFG-FLOW> .GT. 0.  .AND.  <ro.Moutlet> .GT. 0.)                  ClrRHX 579
     &  dPctrl = dPctrl * (<ro.Mreqd>/<ch:REFG-FLOW>)**1.87                     ClrRHX 580
      <ch;CtrlValveDP> = dPctrl                                                 ClrRHX 581
      <ro.Preqd>       = Pctrl - dPctrl                                         ClrRHX 582
c                                                                               ClrRHX 583
c              Check for convergence on outlet conditions                       ClrRHX 584
      CALL CnvgCheck(1, <ch;EnergyHsty>)                                        ClrRHX 585
c                                                                               ClrRHX 586
      <ri.Qinlet>  = <ro.Moutlet> * (<Xri.Hinlet>-AA(<ch;RefgHrefPtr>))         ClrRHX 587
      <ro.Qoutlet> = <ri.Qinlet> + <ch;DesCap>                                  ClrRHX 588
                                                                                ClrRHX 589
c              Refrigerant conditions at inlet from liquid                      ClrRHX 590
      <ri.Minlet> = <ro.Moutlet>                                                ClrRHX 591
      <ri.Mreqd>  = <ro.Moutlet>                                                ClrRHX 592
      IF (<ch:REFG-FLOW> .GT. 0.  .AND.  <ri.Mreqd> .GT. 0.)  THEN              ClrRHX 593
        dP = <ch:REFG-DP> * (<ri.Mreqd>/<ch:REFG-FLOW>)**1.87                   ClrRHX 594
      ELSE                                                                      ClrRHX 595
        dP = <ch:REFG-DP>                                                       ClrRHX 596
      ENDIF                                                                     ClrRHX 597
      <ri.Preqd> = Pctrl + dP                                                   ClrRHX 598
c              Liquid should be delivered no warmer than saturation             ClrRHX 599
      IF (<Xri.Pinlet> .GT. 0.)  THEN                                           ClrRHX 600
        <ri.Treqd> = RefgT_fP(Jre, <Xri.Pinlet>)                                ClrRHX 601
      ELSE                                                                      ClrRHX 602
        <ri.Treqd> = 105.                                                       ClrRHX 603
      ENDIF                                                                     ClrRHX 604
c                                                                               ClrRHX 605
      IF (<ch:REFG-FLOW> .GT. 0.)  THEN                                         ClrRHX 606
        <ch;DesMrefg> = <ch:REFG-FLOW>                                          ClrRHX 607
      ELSE                                                                      ClrRHX 608
        <ch;DesMrefg> = <ro.Moutlet>                                            ClrRHX 609
      ENDIF                                                                     ClrRHX 610
c                                                                               ClrRHX 611
c                                                                               ClrRHX 612
c ============ DESIGN CALCULATIONS - RECONCILIATION =========================== ClrRHX 613
      CASE (119)                                                                ClrRHX 614
c                                                                               ClrRHX 615
c              convert minimum and maximum flows from fraction to gpm           ClrRHX 616
      <ch;CHWMinFlow> = <ch;DesFlow> * <ch:CHW-MIN-GPM>                         ClrRHX 617
      IF (<ch;DesFlow> .GT. 0)  <ch;1/DesFlow> = 1. / <ch;DesFlow>              ClrRHX 618
      <fo;DesMoutlet> = <ch;DesFlow>                                            ClrRHX 619
c                                                                               ClrRHX 620
      <ch;Qcool> = <ch;DesCap>                                                  ClrRHX 621
c                                                                               ClrRHX 622
c              Total pressure drop thru suction side                            ClrRHX 623
      <ch;1/dPsupplyIn> = 1.0/<ch:REFG-DP>                                      ClrRHX 624
      <ch;1/dPsupply> = 1. / (<ch:REFG-DP>+<ch;CtrlValveDP>)                    ClrRHX 625
      IF (<ch;DesMrefg> .GT. 0.)  <ch;1/DesMrefg> = 1.0/<ch;DesMrefg>           ClrRHX 626
      <ch;MrefgMax> = <ch;DesMrefg>                                             ClrRHX 627
c                                                                               ClrRHX 628
c              Design refrigerant volume and density at outlet                  ClrRHX 629
      <ch;DesignOutletV> = RefgV_fPH(Jre, <Xro.Poutlet>, <ro.Houtlet>)          ClrRHX 630
      <ch;DesignOutletD> = 1.0 / <ch;DesignOutletV>                             ClrRHX 631
c                                                                               ClrRHX 632
c              For EPR, offset between chw setpoint and SST                     ClrRHX 633
      SELECT CASE (<ch:TEMP-CTRL>)                                              ClrRHX 634
        CASE (2)  ! Local EPR                                                   ClrRHX 635
          <ch;EPRoffset> = <ch:REFG-CHW-TD>                                     ClrRHX 636
      END SELECT  ! sc:TEMP-CTRL                                                ClrRHX 637
c                                                                               ClrRHX 638
c              Design the heat-exchanger                                        ClrRHX 639
      TchwInlet = <ch;DesCHWT> + <ch;DesCHWdT>                                  ClrRHX 640
      IF (<ch:CHW-PUMP> .GT. 0)  TchwInlet = TchwInlet + <pm.dT>                ClrRHX 641
      <ro.Moutlet> = MAX(1., <ro.Moutlet>)                                      ClrRHX 642
      CALL HX_Design(Khx, <ch;DesCap>,                                          ClrRHX 643
     &                   <ro.Moutlet>,           1.E20, <ch;SSTreqd>,           ClrRHX 644
     &                   <ch;DesFlow>, <pl.Btuh/GPM-F>,    TchwInlet)           ClrRHX 645
      <ch;CHWMaxFlow> = <ch;DesFlow> * <ch:CHW-MAX-GPM>                         ClrRHX 646
      CALL RefgT_Limits(Jre, <hx;MinSupResetT>, <hx;MaxSupResetT>)              ClrRHX 647
c                                                                               ClrRHX 648
c                                                                               ClrRHX 649
c ============ ATTACHMENTS ==================================================== ClrRHX 650
c                                                                               ClrRHX 651
c              Initial attachments                                              ClrRHX 652
      CASE (201)                                                                ClrRHX 653
c              Component pointers, schedules, and curves                        ClrRHX 654
        <ch:CHW-PUMP>      = Jcomponent( 1, <ch:CHW-PUMP>)                      ClrRHX 655
        <ch:CHW-PLANT>     = Jcomponent( 2, <ch:CHW-PLANT>)                     ClrRHX 656
        <ch:CHW-RATED-FLU> = Jcomponent(15, <ch:CHW-RATED-FLU>)                 ClrRHX 657
        <ch:ELEC-METER>    = Jcomponent(13, <ch:ELEC-METER>)                    ClrRHX 658
        <ch:AUX-METER>     = Jcomponent(13, <ch:AUX-METER>)                     ClrRHX 659
        <ch:LIQUID-CKT>    = Jcomponent(22, <ch:LIQUID-CKT>)                    ClrRHX 660
        <ch:SUCTION-CKT>   = Jcomponent(22, <ch:SUCTION-CKT>)                   ClrRHX 661
        <ch:/SuctionGroup> = Jcomponent(25, <ch:/SuctionGroup>)                 ClrRHX 662
        <ch:/RefgSystem/>  = Jcomponent(29, <ch:/RefgSystem/>)                  ClrRHX 663
        <ch:COST-DATA>     = Jcomponent(18, <ch:COST-DATA>)                     ClrRHX 664
        <ch:AUX-SCH>       = Jsched(<ch:AUX-SCH>)                               ClrRHX 665
c                                                                               ClrRHX 666
c              Fluid properties subcomponents                                   ClrRHX 667
        <ch;CHWFluidProp> = NewFluidProperties(Jch, <ch:CHW-PLANT>, 11,         ClrRHX 668
     &                      <ch:CHW-VELOCITY>, <ch:TURBULENT-RE>,               ClrRHX 669
     &                      <ch:LAMINAR-RE>, <ch:LAMINAR-DEGRD>,                ClrRHX 670
     &                      0.,0.,<ch:CHW-TUBE-DIA>, <ch:CHW-ROUGHNESS>,        ClrRHX 671
     &                      <ch:CHW-RATED-FLU>, <ch:CHW-RATED-CON>,             ClrRHX 672
     &                      <ch:CHW-RATED-T>, <ch:CHW-RATED-FLO>,               ClrRHX 673
     &                      <ch:CHW-STATIC>)                                    ClrRHX 674
        <ch;RfgFluidProp> = NewFluidProperties(Jch,<ch:/RefgSystem/>,32,        ClrRHX 675
     &                      0., 0., 0., 0.,                                     ClrRHX 676
     &                      0., 0., 0., 0.,                                     ClrRHX 677
     &                      0., 0., 0., 0., 0.)                                 ClrRHX 678
c                                                                               ClrRHX 679
c              Heat-exchanger subcomponent                                      ClrRHX 680
        <ch;HX> = NewHX(Jch, 0, <ch:HX-UA>,                                     ClrRHX 681
     &                  <ch;RfgFluidProp>, <ch:REFG-FILM-RES>,                  ClrRHX 682
     &                  <ch;CHWFluidProp>,  <ch:CHW-FILM-RES>)                  ClrRHX 683
c                                                                               ClrRHX 684
c              Second level of attachments                                      ClrRHX 685
      CASE (202)                                                                ClrRHX 686
        IF (<ch:CHW-PUMP> .GT. 0)  THEN                                         ClrRHX 687
          Jpm             = <ch:CHW-PUMP>                                       ClrRHX 688
          <pm;XComponent> = Jch                                                 ClrRHX 689
          <pm;Plant>      = Jpl                                                 ClrRHX 690
        ENDIF                                                                   ClrRHX 691
c                                                                               ClrRHX 692
c              Create nodes                                                     ClrRHX 693
      CASE (203)                                                                ClrRHX 694
c              chw outlet                                                       ClrRHX 695
        <ch;CHWOutletNode> = NewNode(1, 0,Jpl,Jch,Jpl,                          ClrRHX 696
     &                                      53,<ch:CONFIGURATION>,0, 1.)        ClrRHX 697
c              Check if cross-connected between two different systems           ClrRHX 698
        CALL RefgX(Jch, <ch:LIQUID-CKT>,<ch:SUCTION-CKT>,0)                     ClrRHX 699
c              Liquid, and suction attachments                                  ClrRHX 700
        <ch;LiquidNode>  = NewNode(1, Jpl,Jpl,Jch,<ch:LIQUID-CKT>,              ClrRHX 701
     &                                                     61,1,Jpl, 1.)        ClrRHX 702
        <ch;SuctionNode> = NewNode(1, Jpl,Jpl,Jch,<ch:SUCTION-CKT>,             ClrRHX 703
     &                                                     62,2,Jpl, 1.)        ClrRHX 704
c              meters                                                           ClrRHX 705
        Jme = <ch:ELEC-METER>                                                   ClrRHX 706
        <ch:ELEC-METER> = NewNode(1, Jpl,Jpl,Jch,Jme, 11,2,Jpl, 1.)             ClrRHX 707
        Jme = <ch:AUX-METER>                                                    ClrRHX 708
        <ch:AUX-METER>  = NewNode(1, Jpl,Jpl,Jch,Jme, 11,2,Jpl, 1.)             ClrRHX 709
c              Hours of operation                                               ClrRHX 710
        <ch;s8> = NewStat8(Jch,<#fo.Qoutlet>,1,                                 ClrRHX 711
     &                            <ch:MIN-RATIO>,<ch:START-TIME>)               ClrRHX 712
c                                                                               ClrRHX 713
c              Links, lists                                                     ClrRHX 714
      CASE (205)                                                                ClrRHX 715
c              Get refrigerant pointer from liquid trunk                        ClrRHX 716
        Jrs              = <ch:/RefgSystem/>                                    ClrRHX 717
        <ch;Refrigerant> = <rs:REFRIGERANT>                                     ClrRHX 718
c              Get pointer to reference enthalpy from liquid trunk              ClrRHX 719
        <ch;RefgHrefPtr> = IA_RefgHRef(<ch:/RefgSystem/>)                       ClrRHX 720
c              List of nodes                                                    ClrRHX 721
        CALL ListNodes(<ch;Nodes>, 0,0,Jch,0, 0,0)                              ClrRHX 722
c              Find the plant node at the inlet                                 ClrRHX 723
        Node               = -(<ch:CONFIGURATION>-1)                            ClrRHX 724
        <ch;CHWInletXnode> = LocateNode(0,0,<ch:CHW-PLANT>,0, 53,Node)          ClrRHX 725
c                                                                               ClrRHX 726
c              Histories                                                        ClrRHX 727
      CASE (208)                                                                ClrRHX 728
c              Set up history on energy demands                                 ClrRHX 729
        KliX = <ch;Nodes>                                                       ClrRHX 730
        CALL ListXNodes(<ch;Nodes>, KliX)                                       ClrRHX 731
        <ch;EnergyHsty> = NewHistory(Jpl,Jpl,Jch, KliX, Kro,                    ClrRHX 732
     &                      6, 6, 1.5,                                          ClrRHX 733
     &                      <#ro.Moutlet>, <sp:ERROR-FLOW>, 2,                  ClrRHX 734
     &                      <#ro.Houtlet>, <sp:ERROR-H>   , 1,                  ClrRHX 735
     &                      <#ro.Mreqd>  , <sp:ERROR-FLOW>, 2,                  ClrRHX 736
     &                      <#ro.Preqd>  , <sp:ERROR-P>*2., 1,                  ClrRHX 737
     &                      0,0.,0, 0,0.,0)                                     ClrRHX 738
c              History on mass flow, internal use only                          ClrRHX 739
        <ch;FlowsHsty> = NewHistory(0,0,Jch, 0, 0,                              ClrRHX 740
     &                     0, 3, 1.5,                                           ClrRHX 741
     &                     <#ro.Moutlet>, <sp:ERROR-FLOW>/5., 2,                ClrRHX 742
     &                     <#fo.Moutlet>, <sp:ERROR-FLOW>/5., 2,                ClrRHX 743
     &                     0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0)                      ClrRHX 744
c                                                                               ClrRHX 745
c              Dump pointers                                                    ClrRHX 746
      CASE (210)                                                                ClrRHX 747
        IF (<ch;Previous> .EQ. 0)  WRITE (IOUTPT, 9201)                         ClrRHX 748
        WRITE (IOUTPT, 9202)  (<ch:NAME>,II=1,8),                               ClrRHX 749
     &    Jch, <ch;HX>, <ch;CHWInletXnode>, <ch;CHWOutletNode>,                 ClrRHX 750
     &    <ch;LiquidNode>, <ch;SuctionNode>, <ch;RfgFluidProp>                  ClrRHX 751
c                                                                               ClrRHX 752
c                                                                               ClrRHX 753
      END SELECT  ! Mode                                                        ClrRHX 754
c                                                                               ClrRHX 755
      RETURN                                                                    ClrRHX 756
c                                                                               ClrRHX 757
c              Message formats                                                  ClrRHX 758
 9101 FORMAT(14X,'Chiller cannot meet the required temperature'        /        ClrRHX 759
     &       14X,'setpoint.  First occurrence: ',I2,'/',I2,'/',I2      /        ClrRHX 760
     &       14X,'Component: ',8A4                                     )        ClrRHX 761
 9102 FORMAT(14X,'Chiller has a refrigerant capacity smaller than'     /        ClrRHX 762
     &       14X,'the load.  First occurrence: ',I2,'/',I2,'/',I2      /        ClrRHX 763
     &       14X,'Component: ',8A4                                     )        ClrRHX 764
 9201 FORMAT(/' CHILLERS (secondary)                   Jch       Khx',          ClrRHX 765
     &'       Kfi       Kfo       Kri       Kro      Prop'             /        ClrRHX 766
     &1x,32('-'),7('  --------'))                                               ClrRHX 767
 9202 FORMAT(1x,8A4,7I10)                                                       ClrRHX 768
c                                                                               ClrRHX 769
c                                                                               ClrRHX 770
      CONTAINS                                                                  ClrRHX 771
c ============== FloatLoad ==================================================== ClrRHX 772
      Subroutine FloatLoad                                                      ClrRHX 773
c                                                                               ClrRHX 774
c              Calculates chiller load and refrigerant flow                     ClrRHX 775
c                                                                               ClrRHX 776
      CALL HistoryInit(<ch;FlowsHsty>)                                          ClrRHX 777
      DO  iFloat=1,100                                                          ClrRHX 778
c              Available suction pressure, adjusted for control valve           ClrRHX 779
        Voutlet = RefgV_fPH(Jre, <Xro.Poutlet>, <ro.Houtlet>)                   ClrRHX 780
        dPctrl  = (<ro.Moutlet> * <ch;1/DesMrefg>   )**1.87                     ClrRHX 781
     &          * (     Voutlet * <ch;DesignOutletD>)**1.6                      ClrRHX 782
        dPctrl  = dPctrl * <ch;CtrlValveDP>                                     ClrRHX 783
        Pctrl   = <Xro.Poutlet> + dPctrl                                        ClrRHX 784
c                                                                               ClrRHX 785
c              suction temperature and heat transferred                         ClrRHX 786
        SST = MAX(SSTset, RefgT_fP(Jre, Pctrl))                                 ClrRHX 787
        CALL HX(1, Khx, <ch;Qcool>,                                             ClrRHX 788
     &                <ro.Moutlet>,    SST,       xSupTo,                       ClrRHX 789
     &                <fo.Moutlet>,  DemTi, <fo.Toutlet>)                       ClrRHX 790
c                                                                               ClrRHX 791
c              Suction superheat, enthalpy, and mass flow                       ClrRHX 792
        dTsuper      = DemTi - SST                                              ClrRHX 793
        dTsuper      = MIN(<ch:SUPERHEAT-DT>, dTsuper)                          ClrRHX 794
        <ro.Houtlet> = RefgH_Vapor_fTS(Jre, SST, dTsuper)                       ClrRHX 795
        dHsuction    = <ro.Houtlet> - <Xri.Hinlet>                              ClrRHX 796
        <ro.Moutlet> = <ch;Qcool> / dHsuction                                   ClrRHX 797
c              check for convergence                                            ClrRHX 798
        CALL CnvgCheck(2, <ch;FlowsHsty>)                                       ClrRHX 799
        IF (.NOT. IterReqdHsty(<ch;FlowsHsty>))  EXIT                           ClrRHX 800
        IF (iFloat .EQ. 100)  CALL CnvgMsg2(2, Routine, Jch)                    ClrRHX 801
      ENDDO                                                                     ClrRHX 802
c                                                                               ClrRHX 803
      End Subroutine FloatLoad                                                  ClrRHX 804
c                                                                               ClrRHX 805
c                                                                               ClrRHX 806
c ============== NoLoad ======================================================= ClrRHX 807
      Subroutine NoLoad                                                         ClrRHX 808
c                                                                               ClrRHX 809
c              No coil load condition                                           ClrRHX 810
c                                                                               ClrRHX 811
      CALL ZeroAA(<#ch.HrZeroStart..>, <#ch.HrZeroEnd....>)                     ClrRHX 812
      <fo.Toutlet> = DemTi                                                      ClrRHX 813
      <ro.Moutlet> = 0.                                                         ClrRHX 814
c                                                                               ClrRHX 815
      End Subroutine NoLoad                                                     ClrRHX 816
c                                                                               ClrRHX 817
c                                                                               ClrRHX 818
c ============== ReqdLoad ===================================================== ClrRHX 819
      Subroutine ReqdLoad                                                       ClrRHX 820
c                                                                               ClrRHX 821
c              Calculates required suction conditions for a given load          ClrRHX 822
c                                                                               ClrRHX 823
c              Required load and suction temperature                            ClrRHX 824
      <ch;Qcool> = <fo.Moutlet> * <pl.Btuh/GPM-F> * (DemTi-<ch;Tsetpt>)         ClrRHX 825
c                                                                               ClrRHX 826
      CALL HistoryInit(<ch;FlowsHsty>)                                          ClrRHX 827
      DO  iReqd=1,100                                                           ClrRHX 828
        CALL HX(2, Khx, <ch;Qcool>,                                             ClrRHX 829
     &                <ro.Moutlet>,    SST,      xSupTo,                        ClrRHX 830
     &                <fo.Moutlet>,  DemTi, <ch;Tsetpt>)                        ClrRHX 831
c                                                                               ClrRHX 832
c              suction superheat, enthalpy, and flow                            ClrRHX 833
        dTsuper       = DemTi - SST                                             ClrRHX 834
        dTsuper       = MIN(<ch:SUPERHEAT-DT>, dTsuper)                         ClrRHX 835
        <ro.Houtlet>  = RefgH_Vapor_fTS(Jre, SST, dTsuper)                      ClrRHX 836
        dHsuction     = <ro.Houtlet> - <Xri.Hinlet>                             ClrRHX 837
        <ro.Moutlet>  = <ch;Qcool> / dHsuction                                  ClrRHX 838
c              check for convergence                                            ClrRHX 839
        CALL CnvgCheck(2, <ch;FlowsHsty>)                                       ClrRHX 840
        IF (.NOT. IterReqdHsty(<ch;FlowsHsty>))  EXIT                           ClrRHX 841
        IF (iReqd .EQ. 100)  CALL CnvgMsg2(3, Routine, Jch)                     ClrRHX 842
      ENDDO                                                                     ClrRHX 843
      <fo.Toutlet> = <ch;Tsetpt>                                                ClrRHX 844
c                                                                               ClrRHX 845
c              Required suction conditions                                      ClrRHX 846
      <ro.Mreqd>   = <ro.Moutlet>                                               ClrRHX 847
      <ch;SSTreqd> = SST                                                        ClrRHX 848
      Pctrl        = RefgP_fT(Jre, SST)                                         ClrRHX 849
c              adjust for effect of control valve                               ClrRHX 850
      Voutlet      = RefgV_fPH(Jre, <Xro.Poutlet>, <ro.Houtlet>)                ClrRHX 851
      dPctrl       = (<ro.Moutlet> * <ch;1/DesMrefg>   )**1.87                  ClrRHX 852
     &             * (     Voutlet * <ch;DesignOutletD>)**1.6                   ClrRHX 853
      dPctrl       = dPctrl * <ch;CtrlValveDP>                                  ClrRHX 854
      <ro.Preqd>   = MAX(<re;Pmin>, Pctrl - dPctrl)                             ClrRHX 855
c                                                                               ClrRHX 856
      End Subroutine ReqdLoad                                                   ClrRHX 857
c                                                                               ClrRHX 858
c                                                                               ClrRHX 859
c ============== ReqdSuction_NoLoad =========================================== ClrRHX 860
      Subroutine ReqdSuction_NoLoad                                             ClrRHX 861
c                                                                               ClrRHX 862
c              When a no load condition exists because the suction              ClrRHX 863
c              temperature is too warm, sets the required suction               ClrRHX 864
c              pressure and flow to tentative values in hope that               ClrRHX 865
c              the suction group responds                                       ClrRHX 866
c                                                                               ClrRHX 867
      Qest       = <fo.Moutlet> * <pl.Btuh/GPM-F> * (DemTi-<ch;Tsetpt>)         ClrRHX 868
      <ro.Mreqd> = Qest / (<Xro.Houtlet>-<Xri.Hinlet>)                          ClrRHX 869
      <ro.Preqd> = RefgP_fT(Jre, MAX(<re;Tmin>, (<ch;Tsetpt>-5.)))              ClrRHX 870
c                                                                               ClrRHX 871
      End Subroutine ReqdSuction_NoLoad                                         ClrRHX 872
c                                                                               ClrRHX 873
      END                                                                       ClrRHX 874
C ##############################################################################DWHAlg   2
C ##############################################################################DWHAlg   3
C ##############################################################################DWHAlg   4
C ##############################################################################DWHAlg   5
C ##########                                                          ##########DWHAlg   6
C ##########                    DW HEATER ROUTINES                    ##########DWHAlg   7
C ##########                                                          ##########DWHAlg   8
C ##############################################################################DWHAlg   9
C ##############################################################################DWHAlg  10
C ##############################################################################DWHAlg  11
C ##############################################################################DWHAlg  12
c                                                                               DWHAlg  13
      SUBROUTINE DWHeater_Tank(Mode, Knx)                                       DWTank   2
c                                                                               DWTank   3
c                                                                               DWTank   4
c              Simulates tank-type domestic water heaters, both                 DWTank   5
c              fuel-fired and electric                                          DWTank   6
c                                                                               DWTank   7
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /FNSYS/  ISKIPS, MSYSF(120)                                       /FNSYS/  2
      COMMON  /MISCD / TEMPS(4,4096),CONS(5),TEMPSL(4096),                      /MISCD/  2
     1                 BLDGQH,BLDGQC,BLDGQL,BLDGP,BPMULT,                       /MISCD/  3
     2                 DBTMIN,DBTMAX,WMIN,WMAX,NSPZ(4096),                      /MISCD/  4
     3                 DQ, DTP, DTR, DTS, FPI, PLRCC , POM, TC2, TDM,           /MISCD/  5
     4                 TRA,WCOL,WCOLM,WMM,YPI,KWBTU,BTUKW,UNFILD,Unusedm        /MISCD/  6
      REAL             KWBTU                                                    /MISCD/  7
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
      COMMON  /WEATH / IWDID(5),LRECX,WLAT,WLONG,LTIMZ,IFX,IWSIZ,               /WEATH/  2
     1                 CLRNES,TGNDR,WBT,DBT,Patm,CLDAMT,ISNOW,IRAIN,            /WEATH/  3
     2                 IWNDDR,HUMRAT,DENSTY,ENTHAL,DIFSOL,DIRSOL,SOLRAD,        /WEATH/  4
     3                 ICLDTY,WNDSPD,IDUMMY,DPT,WNDDRR,CLDCOV,RDNCC,            /WEATH/  5
     4                 BSCC,SKYA,DBTR,GTEMP(12),CLR(12),ESKY,EGND,IWINTR        /WEATH/  6
c                                                                               DWTank  17
      COMMON  /EQKY  / Always, WhenOn, WhenOff, AuxSched,                       /EQKY/   2
     &                 ConstantFlow, VariableFlow, Yes, No                      /EQKY/   3
      INTEGER          Always, WhenOn, WhenOff, AuxSched,                       /EQKY/   4
     &                 ConstantFlow, VariableFlow, Yes, No                      /EQKY/   5
      DATA IdNode /4H$Kno/                                                      /IdNode/ 2
c                                                                               DWTank  20
      INTEGER  ZP1, Xfi, Xfo, rH, DWtypes(4,3)                                  DWTank  21
      REAL     Mheat, MdP                                                       DWTank  22
      INTEGER  Routine(4)                                                       DWTank  23
      DATA     Routine    /4HDWHe,4Hater,4H_Tan,4Hk   /                         DWTank  24
      DATA DWtypes                                                              DWTank  25
     &    / 4HGAS ,4HDW-H,4HEATE,4HR   ,  4HELEC,4H DW-,4HHEAT,4HER  ,          DWTank  26
     &      4HHEAT,4H-PUM,4HP DW,4H-HTR/                                        DWTank  27
c                                                                               DWTank  28
c                                                                               DWTank  29
      IF (<nx;Ident> .EQ. IdNode)  THEN                                         DWTank  30
        Jdw = <nx;Component>                                                    DWTank  31
      ELSE                                                                      DWTank  32
        Jdw = Knx                                                               DWTank  33
      ENDIF                                                                     DWTank  34
      Jpl = <dw:DHW-PLANT>                     ! DHW plant                      DWTank  35
      Xfi = <dw;DHWInletXNode>                 ! inlet node                     DWTank  36
      Kfo = <dw;DHWOutletNode>                 ! outlet node                    DWTank  37
      Xfo = <fo;Xnode>                         ! outlet Xnode                   DWTank  38
      Kex = <dw;QzoneNode>                     ! zone extraction node           DWTank  39
c                                                                               DWTank  40
      SELECT CASE (Mode)                                                        DWTank  41
c                                                                               DWTank  42
c                                                                               DWTank  43
c ============ HOURLY INITIALIZATION ========================================== DWTank  44
      CASE (10)                                                                 DWTank  45
c                                                                               DWTank  46
c              Update tank temperature                                          DWTank  47
      <dw.Ttank> = <dw.Ttank'>                                                  DWTank  48
c                                                                               DWTank  49
c              Initialize the airside heat recovery variable for                DWTank  50
c              summing by the SYSTEM airside DX calcs                           DWTank  51
      <dw.QdxGet> = 0.                                                          DWTank  52
c                                                                               DWTank  53
c              Calculate error between what zone thinks the thermal loss        DWTank  54
c              was vs. the actual                                               DWTank  55
      IF (Kex .GT. 0)  <ex.Qerror> = -<dw.Qua> - <ex.Qextract>                  DWTank  56
c                                                                               DWTank  57
c                                                                               DWTank  58
c ============ HOURLY OPERATING CAPACITY - FLOATING =========================== DWTank  59
      CASE (21)                                                                 DWTank  60
c                                                                               DWTank  61
c              Flow capacity as a function of pressure differential             DWTank  62
      dP = <Xfi.Pinlet> - <Xfo.Preqd>                                           DWTank  63
      dP = dP - <dw:STATIC>                                                     DWTank  64
      IF (dP .GT. 0.)  THEN                                                     DWTank  65
        MdP = (dP*<dw;1/dPcoef>)**(1./1.852)                                    DWTank  66
      ELSE                                                                      DWTank  67
        MdP = <dw;Flow> * 0.01                                                  DWTank  68
      ENDIF                                                                     DWTank  69
c              flow and thermal capacity                                        DWTank  70
      <fo.MaxMfluid> = MIN(MdP, <dw;DHWMaxFlow>)                                DWTank  71
      <fo.MaxQfluid> = <dw.OpCap>                                               DWTank  72
c                                                                               DWTank  73
c                                                                               DWTank  74
c ============ HOURLY OPERATING CAPACITY - HEATING ============================ DWTank  75
      CASE (23)                                                                 DWTank  76
c                                                                               DWTank  77
c              Internal heater temperature - greater of either the plant        DWTank  78
c              temperature requirement, or the internal aquastat temp           DWTank  79
      <dw.Tsetpt> = MAX(<Xfo.Tsetpt>, <dw:AQUASTAT-T>)                          DWTank  80
c              environmental temperature                                        DWTank  81
      IF (<dw:ZONE> .EQ. 0)  THEN                                               DWTank  82
        <dw.Tenvir> = DBT          ! outdoors                                   DWTank  83
      ELSE                                                                      DWTank  84
        ZP1         = <dw:ZONE>    ! indoors                                    DWTank  85
        <dw.Tenvir> = <zn;Tavg>                                                 DWTank  86
      ENDIF                                                                     DWTank  87
c                                                                               DWTank  88
c              Internal heat balance terms                                      DWTank  89
      UAx  = <dw;TankQ/F>                                                       DWTank  90
     &     + <dw:TANK-UA>/2.                                                    DWTank  91
      UATx = <dw;TankQ/F> * <dw.Ttank>                                          DWTank  92
     &     + <dw:TANK-UA> * (<dw.Tenvir>-<dw.Ttank>/2.)                         DWTank  93
c              average tank temperature                                         DWTank  94
      Tavg = (<dw.Ttank>+<dw.Tsetpt>) * 0.5                                     DWTank  95
c              firing rate as a function of temperature                         DWTank  96
      <dw.GrossCapacity> = <dw;Capacity>                                        DWTank  97
     &                   * Curve(Jdw,<dw:CAP-FT>,Tavg,<dw.Tenvir>)              DWTank  98
c              operating capacity, adjusted for ...                             DWTank  99
      <dw.OpCap> = <dw.GrossCapacity>                                           DWTank 100
c              start-up load                                                    DWTank 101
     &   - StartUpLoad(<fo;s8>, -1.E30)                                         DWTank 102
c              tank heat capacity                                               DWTank 103
     &   - <dw;TankQ/F> * (<dw.Tsetpt>-<dw.Ttank>)                              DWTank 104
c              tank thermal loss                                                DWTank 105
     &   - <dw:TANK-UA> * ((<dw.Ttank'>+<dw.Tsetpt>)/2. - <dw.Tenvir>)          DWTank 106
c              assume 70% of tank volume is available                           DWTank 107
c              before water temperature drops                                   DWTank 108
     &   + <dw;TankQ/F> * (<dw.Tsetpt>-<Xfi.Tinlet>) * 0.7                      DWTank 109
      <dw.OpCap> = MAX(0., <dw.OpCap>)                                          DWTank 110
c                                                                               DWTank 111
c              Flow capacity, adjusted for aquastat setpoint                    DWTank 112
      dT    = MAX(0.001, <Xfo.Tsetpt> - <Xfi.Tinlet>)                           DWTank 113
      Mheat = <dw.OpCap> / (<pl.Btuh/GPM-F> * dT)                               DWTank 114
      IF (<Xfo.Tsetpt> .LT. <dw:AQUASTAT-T>)  THEN                              DWTank 115
        dM = (<dw:AQUASTAT-T>-<Xfi.Tinlet>)/(<Xfo.Tsetpt>-<Xfi.Tinlet>)         DWTank 116
        Mheat = Mheat * dM                                                      DWTank 117
      ENDIF                                                                     DWTank 118
c              Flow as a function of pressure differential                      DWTank 119
      dP = <Xfi.Pinlet> - <Xfo.Preqd>                                           DWTank 120
      dP = dP - <dw:STATIC>                                                     DWTank 121
      IF (dP .GT. 0.)  THEN                                                     DWTank 122
        MdP = (dP*<dw;1/dPcoef>)**(1./1.852)                                    DWTank 123
      ELSE                                                                      DWTank 124
        MdP = <dw;Flow> * 0.01                                                  DWTank 125
      ENDIF                                                                     DWTank 126
c              flow and thermal capacity                                        DWTank 127
      <fo.MaxMfluid> = MIN(Mheat, MdP, <dw;DHWMaxFlow>)                         DWTank 128
      <fo.MaxQfluid> = <dw.OpCap>                                               DWTank 129
c                                                                               DWTank 130
c                                                                               DWTank 131
c ============ HOURLY OPERATING CAPACITY - COOLING ============================ DWTank 132
      CASE (25)                                                                 DWTank 133
c                                                                               DWTank 134
c              To be here, heater must be attached to dual-mode loop            DWTank 135
c              in cooling mode                                                  DWTank 136
      <fo.MaxMfluid> = -88888888.                                               DWTank 137
      <fo.MaxQfluid> = 0.                                                       DWTank 138
c                                                                               DWTank 139
c                                                                               DWTank 140
c ============ HOURLY SIMULATION - SUPPLY SIDE ================================ DWTank 141
      CASE (30:37)                                                              DWTank 142
c                                                                               DWTank 143
c              Internal heater temperature - greater of either the plant        DWTank 144
c              temperature requirement, or the internal aquastat temp           DWTank 145
      IF (<fo.Moutlet> .gt. 0.)  THEN  ! demand on heater; use setpt            DWTank 146
        <dw.Tsetpt> = <Xfo.Tsetpt>                                              DWTank 147
      ELSE  ! idling; use top of deadband                                       DWTank 148
        <dw.Tsetpt> = Max(<Xfo.Tsetpt>, <pl.Tsetpt>+<pl:SETPT-RNG>/2.)          DWTank 149
      ENDIF                                                                     DWTank 150
      <dw.Tsetpt> = Max(<dw.Tsetpt>, <dw:AQUASTAT-T>)                           DWTank 151
                                                                                DWTank 152
c              environmental temperature                                        DWTank 153
      IF (<dw:ZONE> .EQ. 0)  THEN                                               DWTank 154
        <dw.Tenvir> = DBT          ! outdoors                                   DWTank 155
      ELSE                                                                      DWTank 156
        ZP1         = <dw:ZONE>    ! indoors                                    DWTank 157
        <dw.Tenvir> = <zn;Tavg>                                                 DWTank 158
      ENDIF                                                                     DWTank 159
c                                                                               DWTank 160
c              Heat balance terms                                               DWTank 161
      UA  = <fo.Moutlet>*<pl.Btuh/GPM-F>                                        DWTank 162
     &    + <dw;TankQ/F>                                                        DWTank 163
     &    + <dw:TANK-UA>*0.5                                                    DWTank 164
      UAT = <fo.Moutlet>*<pl.Btuh/GPM-F> * <Xfi.Tinlet>                         DWTank 165
     &    + <dw;TankQ/F>                 * <dw.Ttank>                           DWTank 166
     &    + <dw:TANK-UA>                 * (<dw.Tenvir>-<dw.Ttank>*0.5)         DWTank 167
c                                                                               DWTank 168
c              End-of-hour tank temperature if no firing                        DWTank 169
      Tfloat = UAT / UA                                                         DWTank 170
      IF (Tfloat .GE. <dw.Tsetpt>)  THEN                                        DWTank 171
c              floating                                                         DWTank 172
        <dw.Ttank'> = Tfloat                                                    DWTank 173
        <dw.Qgross> = 0.                                                        DWTank 174
        <dw.Qstart> = 0.                                                        DWTank 175
      ELSE                                                                      DWTank 176
c              firing - iterate for start-up load and temperature               DWTank 177
        Tlast = -88888.                                                         DWTank 178
        DO  iCount=1,100                                                        DWTank 179
c              Capacity at average tank temperature                             DWTank 180
          Tavg = (<dw.Ttank> + <dw.Ttank'>) * 0.5                               DWTank 181
          <dw.GrossCapacity> = <dw;Capacity>                                    DWTank 182
     &                       * Curve(Jdw,<dw:CAP-FT>,Tavg,<dw.Tenvir>)          DWTank 183
c              maximum outlet temperature                                       DWTank 184
          <dw.Ttank'> = (<dw.GrossCapacity>-<dw.Qstart> + UAT) / UA             DWTank 185
          <dw.Ttank'> = MIN(<dw.Tsetpt>, <dw.Ttank'>)                           DWTank 186
c              startup load                                                     DWTank 187
          Qgross      = <dw.Ttank'>*UA - UAT                                    DWTank 188
          <dw.Qstart> = StartUpLoad(<fo;s8>, Qgross)                            DWTank 189
c              check if converged                                               DWTank 190
          Error = <dw.Ttank'> - Tlast                                           DWTank 191
          IF (ABS(Error) .LT. <sp:ERROR-T>)  EXIT                               DWTank 192
          Tlast = <dw.Ttank'>                                                   DWTank 193
          IF (iCount .EQ. 100)  CALL CnvgMsg2(1, Routine, Jdw)                  DWTank 194
        ENDDO                                                                   DWTank 195
      ENDIF  ! Tfloat                                                           DWTank 196
                                                                                DWTank 197
c              Tank thermal loss                                                DWTank 198
      <dw.Qua> = <dw:TANK-UA>                                                   DWTank 199
     &                  * ((<dw.Ttank>+<dw.Ttank'>)/2. - <dw.Tenvir>)           DWTank 200
                                                                                DWTank 201
c              Outlet conditions, adjusted for aquastat bypass                  DWTank 202
      IF (<dw.Ttank'> .ge. <Xfo.Tsetpt>)  THEN                                  DWTank 203
c              burner can fully meet load                                       DWTank 204
        <fo.Toutlet> = Max(<Xfo.Tsetpt>, Min(<Xfi.Tinlet>, Tfloat))             DWTank 205
      ELSEIF (<fo.Moutlet> .eq. 0.)  THEN                                       DWTank 206
        <fo.Toutlet> = Min(<dw.Ttank'>, <Xfo.Tsetpt>)                           DWTank 207
      ELSE                                                                      DWTank 208
c              Tank must draw on storage. Assume 70% of storage                 DWTank 209
c              available at setpoint temperature, and take linearly             DWTank 210
c              down for decreasing tank temperature                             DWTank 211
        Qstore = (<dw.Ttank>-<Xfi.Tinlet>) * <dw;TankQ/F> * 0.7                 DWTank 212
        Qnet   = <dw.GrossCapacity> + Qstore - <dw.Qua> - <dw.Qstart>           DWTank 213
        <fo.Toutlet> = <Xfi.Tinlet>                                             DWTank 214
     &               + Qnet/(<pl.Btuh/GPM-F>*<fo.Moutlet>)                      DWTank 215
        <fo.Toutlet> = Min(<fo.Toutlet>, <Xfo.Tsetpt>)                          DWTank 216
      ENDIF                                                                     DWTank 217
      dT           = <fo.Toutlet> - <Xfi.Tinlet>                                DWTank 218
      <fo.Qoutlet> = <fo.Moutlet> * <pl.Btuh/GPM-F> * dT                        DWTank 219
c              pressure at heater outlet                                        DWTank 220
      <dw.dP>      = (<fo.Moutlet>*<dw;dPcoef>)**1.852 + <dw:STATIC>            DWTank 221
      <fo.Poutlet> = <Xfi.Pinlet> - <dw.dP>                                     DWTank 222
c              gross load, adjusted for aquastat                                DWTank 223
      IF (Tfloat .LT. <dw.Tsetpt>)  THEN                                        DWTank 224
c              tank heat capacitance                                            DWTank 225
        Qtank       = <dw;TankQ/F> * (<dw.Ttank'>-<dw.Ttank>)                   DWTank 226
        <dw.Qgross> = <fo.Qoutlet> + Qtank + <dw.Qua> + <dw.Qstart>             DWTank 227
        <dw.Qgross> = MAX(0., <dw.Qgross>)                                      DWTank 228
      ENDIF                                                                     DWTank 229
c                                                                               DWTank 230
c                                                                               DWTank 231
c ============ HOURLY SIMULATION - DEMAND SIDE ================================ DWTank 232
      CASE (38:39)                                                              DWTank 233
c                                                                               DWTank 234
c              Maximum possible airside heat recovery                           DWTank 235
      <dw.QdxAsk> = MAX(-<dw.Qgross>, <dw:MAX-HTREC>)                           DWTank 236
c              net load after heat recovery                                     DWTank 237
      <dw.Qnet>   = MAX(0., <dw.Qgross> + <dw.QdxGet>)                          DWTank 238
c                                                                               DWTank 239
c              Part load ratio                                                  DWTank 240
      <dw.PLR> = <dw.Qnet> / <dw.GrossCapacity>                                 DWTank 241
c                                                                               DWTank 242
c              Electric consumption                                             DWTank 243
      IF (<dw:EIR> .GT. 0.)  THEN                                               DWTank 244
        Kmd = <dw:ELEC-METER>                                                   DWTank 245
        IF (<dw.Qnet> .EQ. 0.)  THEN                                            DWTank 246
          <md.Elec>    = 0.                                                     DWTank 247
        ELSE                                                                    DWTank 248
          <dw.EIRfPLR> = Curve(Jdw,<dw:EIR-FPLR>,<dw.PLR>,<dw.PLR>)             DWTank 249
          <dw.EIR>     = <dw:EIR> * <dw.EIRfPLR>                                DWTank 250
          <md.Elec>    = <dw;Capacity> * <dw.EIR> * KWBTU                       DWTank 251
        ENDIF                                                                   DWTank 252
      ENDIF                                                                     DWTank 253
c                                                                               DWTank 254
c              Fuel consumption                                                 DWTank 255
      IF (<dw:HIR> .GT. 0.)  THEN                                               DWTank 256
        Kmd = <dw:FUEL-METER>                                                   DWTank 257
        IF (<dw.Qnet> .EQ. 0.)  THEN                                            DWTank 258
          <md.Fuel>    = 0.                                                     DWTank 259
        ELSE                                                                    DWTank 260
          <dw.HIRfPLR> = Curve(Jdw,<dw:HIR-FPLR>,<dw.PLR>,<dw.PLR>)             DWTank 261
          <dw.HIRfT>   = Curve(Jdw,<dw:HIR-FT>,<dw.Ttank>,<dw.Tenvir>)          DWTank 262
          <dw.HIR>     = <dw:HIR> * <dw.HIRfT> * <dw.HIRfPLR>                   DWTank 263
          <md.Fuel>    = <dw;Capacity> * <dw.HIR>                               DWTank 264
        ENDIF                                                                   DWTank 265
      ENDIF                                                                     DWTank 266
c                                                                               DWTank 267
c              Auxiliary power                                                  DWTank 268
      IF (<dw:AUX-KW> .GT. 0.)  THEN                                            DWTank 269
        Kmd = <dw:AUX-METER>                                                    DWTank 270
        SELECT CASE (<dw:AUX-MODE>)                                             DWTank 271
          CASE (1)  ! Always                                                    DWTank 272
            <md.Elec> = <dw:AUX-KW>                                             DWTank 273
          CASE (2)  ! When on                                                   DWTank 274
            IF (<dw.Qgross> .GT. 0.)  THEN                                      DWTank 275
              <md.Elec> = <dw:AUX-KW>                                           DWTank 276
            ELSE                                                                DWTank 277
              <md.Elec> = 0.                                                    DWTank 278
            ENDIF                                                               DWTank 279
          CASE (3)  ! When off                                                  DWTank 280
            IF (<dw.Qgross> .GT. 0.)  THEN                                      DWTank 281
              <md.Elec> = 0.                                                    DWTank 282
            ELSE                                                                DWTank 283
              <md.Elec> = <dw:AUX-KW>                                           DWTank 284
            ENDIF                                                               DWTank 285
          CASE (4)  ! Scheduled                                                 DWTank 286
            <md.Elec> = <dw:AUX-KW> * SchVal(<dw:AUX-SCH>)                      DWTank 287
        END SELECT                                                              DWTank 288
      ENDIF                                                                     DWTank 289
c                                                                               DWTank 290
c              Store temperature for zone extraction calcs                      DWTank 291
      IF (Kex .GT. 0)  <ex.Textract> = <dw.Ttank'>                              DWTank 292
c                                                                               DWTank 293
c              Check for convergence and set flags on utilities                 DWTank 294
      IF (Mode .EQ. 38)  THEN                                                   DWTank 295
        CALL CnvgCheck(1, <dw;EnergyHsty>)  ! Loads to Plant                    DWTank 296
      ELSE                                                                      DWTank 297
        CALL CnvgCheck(0, <dw;EnergyHsty>)  ! Plant to Loads                    DWTank 298
      ENDIF                                                                     DWTank 299
c                                                                               DWTank 300
c                                                                               DWTank 301
c ============ REPORT CREATION ================================================ DWTank 302
      CASE (50)                                                                 DWTank 303
c                                                                               DWTank 304
c              statistics blocks                                                DWTank 305
      Ks2Load    = NewStat2(Kfo, <+fo.Qoutlet>, 0, 1.)                          DWTank 306
      Ks5LoadBin = NewStat5(Kfo, <+fo.Qoutlet>, 0, 1.)                          DWTank 307
      Ks2Elec    = NewStat2(<dw:ELEC-METER>, <+md.Elec>, 0, 1.)                 DWTank 308
      Ks5ElecBin = NewStat5(<dw:ELEC-METER>, <+md.Elec>, 0, 1.)                 DWTank 309
      Ks2Fuel    = NewStat2(<dw:FUEL-METER>, <+md.Fuel>, 0, 1.)                 DWTank 310
      Ks5FuelBin = NewStat5(<dw:FUEL-METER>, <+md.Fuel>, 0, 1.)                 DWTank 311
      Ks2Aux     = NewStat2(<dw:AUX-METER>,  <+md.Elec>, 0, 1.)                 DWTank 312
c                                                                               DWTank 313
c              Create the type "H" report                                       DWTank 314
      IF (<dw:REPORTS> .GT. 0  .AND.  IREPRT(3,23) .GT. 0)                      DWTank 315
     &  <dw;PS-H> = NewReport_H(Jdw, 83,                                        DWTank 316
     &                          3, 4, 5,                                        DWTank 317
     &                          Ks2Load, Ks2Elec, Ks2Fuel, Ks2Aux,              DWTank 318
     &                          Ks5LoadBin, Ks5ElecBin, Ks5FuelBin,             DWTank 319
     &                          0, 0, 0)                                        DWTank 320
c                                                                               DWTank 321
c              Setpoint overload                                                DWTank 322
      <dw;s10> = NewStat10(Jdw, <#dw.Tsetpt>, <#fo.Toutlet>, 0.1,-1,            DWTank 323
     &                          <#fo.Moutlet>)                                  DWTank 324
c                                                                               DWTank 325
c                                                                               DWTank 326
c ============ REPORT ORDER =================================================== DWTank 327
      CASE (52)                                                                 DWTank 328
c                                                                               DWTank 329
      Call Report_H(Mode, <dw;PS-H>)                                            DWTank 330
c                                                                               DWTank 331
c                                                                               DWTank 332
c ============ REPORTS - VERIFICATION DATA ==================================== DWTank 333
      CASE (54)                                                                 DWTank 334
c                                                                               DWTank 335
c              Output design information                                        DWTank 336
      IF (<dw;PS-H> .ne. 0)  THEN                                               DWTank 337
        rH = <dw;PS-H>                                                          DWTank 338
        WRITE (IREPFL)  4,<rH;Iuniq>,1,1,0                                      DWTank 339
        WRITE(IREPFL)  23,<rH;Iuniq>,1,2,19,                                    DWTank 340
     &    (DWtypes(II,<dw:TYPE>),II=1,4),                                       DWTank 341
     &    (<pl:NAME>,II=1,8),                                                   DWTank 342
     &    <dw;Capacity>, <dw;Flow>,                                             DWTank 343
     &    <dw:EIR>, <dw:HIR>, <dw:AUX-KW>, <dw:VOLUME>, <dw:TANK-UA>            DWTank 344
      ENDIF                                                                     DWTank 345
c                                                                               DWTank 346
c                                                                               DWTank 347
c ============ REPORTS - YEARLY SUMMARY (SPECIAL) ============================= DWTank 348
      CASE (58)                                                                 DWTank 349
c                                                                               DWTank 350
c              Setpoint overload                                                DWTank 351
      IF (<dw;PS-H> .ne. 0)  THEN                                               DWTank 352
        rH = <dw;PS-H>                                                          DWTank 353
        CALL Report_s10(<rH;Iuniq>, 6, <dw;s10>)                                DWTank 354
      ENDIF                                                                     DWTank 355
c                                                                               DWTank 356
c                                                                               DWTank 357
c ============ HOURLY REPORTS - HOURLY DATA =================================== DWTank 358
      CASE (62)                                                                 DWTank 359
c                                                                               DWTank 360
c              Hourly-report variables                                          DWTank 361
      IF (<dw;HourRepBuf> .EQ. 0)  RETURN                                       DWTank 362
c                                                                               DWTank 363
      IAptr        = <dw;HourRepBuf> - 1                                        DWTank 364
      AA(IAptr+ 1) = <fo.Moutlet>                                               DWTank 365
      AA(IAptr+ 2) = <fo.Qoutlet>                                               DWTank 366
      Kmd          = <dw:ELEC-METER>                                            DWTank 367
      AA(IAptr+ 3) = <md.Elec>                                                  DWTank 368
      Kmd          = <dw:FUEL-METER>                                            DWTank 369
      AA(IAptr+ 4) = <md.Fuel>                                                  DWTank 370
      AA(IAptr+ 5) = <dw.Qstart>                                                DWTank 371
      AA(IAptr+ 6) = <dw.Qgross>                                                DWTank 372
      AA(IAptr+ 7) = <dw.Qnet>                                                  DWTank 373
      AA(IAptr+ 8) = <dw.PLR>                                                   DWTank 374
      AA(IAptr+ 9) = <dw.EIR>                                                   DWTank 375
      AA(IAptr+10) = <dw.EIRfPLR>                                               DWTank 376
      AA(IAptr+11) = <dw.EIRfT>                                                 DWTank 377
      AA(IAptr+12) = <dw.HIR>                                                   DWTank 378
      AA(IAptr+13) = <dw.HIRfPLR>                                               DWTank 379
      AA(IAptr+14) = <dw.HIRfT>                                                 DWTank 380
      AA(IAptr+15) = <dw.Ttank'>                                                DWTank 381
      AA(IAptr+16) = <dw.Tenvir>                                                DWTank 382
      AA(IAptr+17) = <dw.Qua>                                                   DWTank 383
      AA(IAptr+18) = <dw.OpCap>                                                 DWTank 384
      AA(IAptr+19) = <dw.dP>                                                    DWTank 385
      AA(IAptr+20) = <Xfi.Tinlet>                                               DWTank 386
      AA(IAptr+21) = <Xfi.Pinlet>                                               DWTank 387
      AA(IAptr+22) = <fo.Toutlet>                                               DWTank 388
      AA(IAptr+23) = <fo.Poutlet>                                               DWTank 389
      Kmd          = <dw:AUX-METER>                                             DWTank 390
      AA(IAptr+24) = <md.Elec>                                                  DWTank 391
c                                                                               DWTank 392
c                                                                               DWTank 393
c ============ DESIGN INITIALIZATION ========================================== DWTank 394
      CASE (110)                                                                DWTank 395
c                                                                               DWTank 396
c              Set pressure drop thru heater                                    DWTank 397
      <fo.Preqd> = <dw:HEAD> + <dw:STATIC>                                      DWTank 398
c                                                                               DWTank 399
      IF (<dw:MAX-HTREC> .NE. UNFILD)  THEN                                     DWTank 400
        <dw:MAX-HTREC> = -ABS(<dw:MAX-HTREC>)                                   DWTank 401
      ELSE                                                                      DWTank 402
        <dw:MAX-HTREC> = -1.E20                                                 DWTank 403
      ENDIF                                                                     DWTank 404
c                                                                               DWTank 405
c                                                                               DWTank 406
c ============ DESIGN CALCULATIONS ============================================ DWTank 407
      CASE (111)                                                                DWTank 408
c                                                                               DWTank 409
c              heater size                                                      DWTank 410
      IF (<dw:CAP> .EQ. 0.)  THEN                                               DWTank 411
c              default heater size                                              DWTank 412
        IF (<dw:CAP-RATIO> .GT. 0.)  THEN                                       DWTank 413
          <dw;Capacity> = <pl;Qheat> * <dw:CAP-RATIO>                           DWTank 414
        ELSE                                                                    DWTank 415
c              No capacity ratio specified - size equipment equally             DWTank 416
c              Get pointer to plant node and plant node's equip list            DWTank 417
          Kli = <Xfo;Xnode>                                                     DWTank 418
          <dw;Capacity> = <pl;Qheat> / FLOAT(<li;NumItems>)                     DWTank 419
        ENDIF                                                                   DWTank 420
      ELSE                                                                      DWTank 421
c              user specified                                                   DWTank 422
        <dw;Capacity> = ABS(<dw:CAP>)                                           DWTank 423
      ENDIF                                                                     DWTank 424
c                                                                               DWTank 425
c              Design flow                                                      DWTank 426
      IF (<dw:FLOW> .EQ. 0.)  THEN                                              DWTank 427
c              default heater flow                                              DWTank 428
        IF (<dw:CAP-RATIO> .GT. 0.)  THEN                                       DWTank 429
          <dw;Flow> = <Xfo.Moutlet> * <dw:CAP-RATIO>                            DWTank 430
        ELSE                                                                    DWTank 431
c              No capacity ratio specified - size equipment equally             DWTank 432
c              Get pointer to plant node and plant node's equip list            DWTank 433
          Kli = <Xfo;Xnode>                                                     DWTank 434
          <dw;Flow> = <Xfo.Moutlet> / FLOAT(<li;NumItems>)                      DWTank 435
        ENDIF                                                                   DWTank 436
      ELSE                                                                      DWTank 437
c              user specified                                                   DWTank 438
        <dw;Flow> = <dw:FLOW>                                                   DWTank 439
      ENDIF                                                                     DWTank 440
c                                                                               DWTank 441
c              Head at actual conditions                                        DWTank 442
      IF (<dw:FLOW> .GT. 0.)  THEN                                              DWTank 443
        <fo.Preqd> = <dw:HEAD> * (<dw;Flow>/<dw:FLOW>)**1.852                   DWTank 444
      ELSE                                                                      DWTank 445
        <fo.Preqd> = <dw:HEAD>                                                  DWTank 446
      ENDIF                                                                     DWTank 447
      <fo.Preqd> = <fo.Preqd> + <dw:STATIC>                                     DWTank 448
c                                                                               DWTank 449
c              Design power and fuel consumption                                DWTank 450
      IF (<dw:ELEC-METER> .GT. 0)  THEN                                         DWTank 451
        <dw;kW>   = <dw;Capacity> * <dw:EIR>                                    DWTank 452
        Kmd       = <dw:ELEC-METER>                                             DWTank 453
        <md.Elec> = <dw;kW>                                                     DWTank 454
      ENDIF                                                                     DWTank 455
      IF (<dw:AUX-METER> .GT. 0)  THEN                                          DWTank 456
        Kmd       = <dw:AUX-METER>                                              DWTank 457
        <md.Elec> = <dw:AUX-KW>                                                 DWTank 458
      ENDIF                                                                     DWTank 459
      IF (<dw:FUEL-METER> .GT. 0)  THEN                                         DWTank 460
        <dw;Fuel> = <dw;Capacity> * <dw:HIR>                                    DWTank 461
        Kmd       = <dw:FUEL-METER>                                             DWTank 462
        <md.Fuel> = <dw;Fuel>                                                   DWTank 463
      ENDIF                                                                     DWTank 464
c                                                                               DWTank 465
c              set node conditions                                              DWTank 466
      <fo.Qoutlet> = <dw;Capacity>                                              DWTank 467
      <fo.Moutlet> = <dw;Flow>                                                  DWTank 468
      <dw.Qgross>  = <dw;Capacity>                                              DWTank 469
c                                                                               DWTank 470
c                                                                               DWTank 471
c ============ DESIGN CALCULATIONS - RECONCILIATION =========================== DWTank 472
      CASE (119)                                                                DWTank 473
                                                                                DWTank 474
c              Tank volume                                                      DWTank 475
      IF (<dw:VOLUME> .EQ. UNFILD)  THEN                                        DWTank 476
c              default volume is equal to the maximum hourly non-coil flow      DWTank 477
        <dw:VOLUME> = <dw;Flow> * 60.                                           DWTank 478
c               Make auto sizes of tank real                                    DWTank 479
        iVolume = INT(<dw:VOLUME>+0.99)                                         DWTank 480
        SELECT CASE (iVolume)                                                   DWTank 481
          CASE (0:30)                                                           DWTank 482
            <dw:VOLUME> = 30.                                                   DWTank 483
          CASE (31:40)                                                          DWTank 484
            <dw:VOLUME> = 40.                                                   DWTank 485
          CASE (41:50)                                                          DWTank 486
            <dw:VOLUME> = 50.                                                   DWTank 487
          CASE (51:75)                                                          DWTank 488
            <dw:VOLUME> = 75.                                                   DWTank 489
          CASE (76:100)                                                         DWTank 490
            <dw:VOLUME>= 100.                                                   DWTank 491
          CASE DEFAULT                                                          DWTank 492
            <dw:VOLUME> =FLOAT(INT(<dw:VOLUME>/50.)+1)*50.                      DWTank 493
        END SELECT                                                              DWTank 494
      ENDIF                                                                     DWTank 495
c              tank heat capacity                                               DWTank 496
      <dw;TankQ/F> = <dw:VOLUME> * <pl.Btuh/GPM-F> / 60.                        DWTank 497
c              initialize tank temperature                                      DWTank 498
      <dw.Ttank'> = <Xfo.Tsetpt>                                                DWTank 499
c                                                                               DWTank 500
c              Default UA for tank losses                                       DWTank 501
      IF (<dw:TANK-UA> .EQ. UNFILD)  THEN                                       DWTank 502
        IF (<dw:TYPE> .EQ. 1)  THEN                                             DWTank 503
c              default UA for gas heaters based on .03 of burner cap            DWTank 504
c              per hour, assuming 40 gal tank, 33,000 btuh input, 75%           DWTank 505
c              eff, and 60 degree dT  =  33000*.75*.03/(40gal*60F)              DWTank 506
          <dw:TANK-UA> = <dw:VOLUME> * 0.3                                      DWTank 507
        ELSE                                                                    DWTank 508
c              default for all electric/heat pump heaters assumed to be         DWTank 509
c              1/3 of gas loss                                                  DWTank 510
          <dw:TANK-UA> = <dw:VOLUME> * 0.1                                      DWTank 511
        ENDIF                                                                   DWTank 512
      ENDIF                                                                     DWTank 513
c              Store zone extraction terms                                      DWTank 514
      IF (Kex .GT. 0)  THEN                                                     DWTank 515
        <ex.Textract> = <Xfo.Tsetpt>                                            DWTank 516
        <ex.UA>       = <dw:TANK-UA>                                            DWTank 517
      ENDIF                                                                     DWTank 518
c                                                                               DWTank 519
c              convert minimum and maximum flows from fraction to gpm           DWTank 520
      <dw;DHWMaxFlow> = <fo.Moutlet> * <dw:MAX-GPM>                             DWTank 521
c              flow coefficients for hourly pressure calcs                      DWTank 522
      <dw;dPcoef>     = <dw:HEAD> / (<dw;Flow>**1.852)                          DWTank 523
      <dw;1/dPcoef>   = 1. / <dw;dPcoef>                                        DWTank 524
      <fo;DesMoutlet> = <dw;Flow>                                               DWTank 525
c                                                                               DWTank 526
c                                                                               DWTank 527
c ============ ATTACHMENTS ==================================================== DWTank 528
c                                                                               DWTank 529
c              Initial attachments                                              DWTank 530
      CASE (201)                                                                DWTank 531
c              Component pointers, schedules, and curves                        DWTank 532
        <dw:DHW-PLANT>     = Jcomponent( 2, <dw:DHW-PLANT>)                     DWTank 533
        <dw:ELEC-METER>    = Jcomponent(13, <dw:ELEC-METER>)                    DWTank 534
        <dw:AUX-METER>     = Jcomponent(13, <dw:AUX-METER>)                     DWTank 535
        <dw:FUEL-METER>    = Jcomponent(13, <dw:FUEL-METER>)                    DWTank 536
        <dw:COST-DATA>     = Jcomponent(18, <dw:COST-DATA>)                     DWTank 537
        <dw:CAP-FT>        = Jcurve(<dw:CAP-FT>)                                DWTank 538
        <dw:EIR-FT>        = Jcurve(<dw:EIR-FT>)                                DWTank 539
        <dw:EIR-FPLR>      = Jcurve(<dw:EIR-FPLR>)                              DWTank 540
        <dw:HIR-FT>        = Jcurve(<dw:HIR-FT>)                                DWTank 541
        <dw:HIR-FPLR>      = Jcurve(<dw:HIR-FPLR>)                              DWTank 542
        <dw:AUX-SCH>       = Jsched(<dw:AUX-SCH>)                               DWTank 543
        <dw:ZONE>          = Jzone(<dw:ZONE>)                                   DWTank 544
c                                                                               DWTank 545
c              Second level of attachments                                      DWTank 546
      CASE (202)                                                                DWTank 547
c                                                                               DWTank 548
c              Create nodes                                                     DWTank 549
      CASE (203)                                                                DWTank 550
c              outlet                                                           DWTank 551
        <dw;DHWOutletNode> = NewNode(1, 0,Jpl,Jdw,Jpl, 53,4,0, 1.)              DWTank 552
c              meters                                                           DWTank 553
        Jme = <dw:ELEC-METER>                                                   DWTank 554
        <dw:ELEC-METER> = NewNode(1, Jpl,Jpl,Jdw,Jme, 11,2,Jpl, 1.)             DWTank 555
        Jme = <dw:AUX-METER>                                                    DWTank 556
        <dw:AUX-METER>  = NewNode(1, Jpl,Jpl,Jdw,Jme, 11,2,Jpl, 1.)             DWTank 557
        Jme = <dw:FUEL-METER>                                                   DWTank 558
        <dw:FUEL-METER> = NewNode(1, Jpl,Jpl,Jdw,Jme, 11,2,Jpl, 1.)             DWTank 559
c              zone loss                                                        DWTank 560
        IF (<dw:ZONE> .GT. 0)                                                   DWTank 561
     &    <dw;QzoneNode> = NewNode(1, Jpl,Jpl,Jdw,<dw:ZONE>, 31,2,0, 1.)        DWTank 562
c              Hours of operation                                               DWTank 563
        <dw;s8> = NewStat8(Jdw,<#dw.Qgross>,1, 0., 0.005)                       DWTank 564
c                                                                               DWTank 565
c              Links, lists                                                     DWTank 566
      CASE (205)                                                                DWTank 567
c              List of nodes                                                    DWTank 568
        CALL ListNodes(<dw;Nodes>, 0,0,Jdw,0, 0,0)                              DWTank 569
c              find the plant node at the inlet                                 DWTank 570
        Node              = -(4-1)                                              DWTank 571
        <dw;DHWInletXNode> = LocateNode(0,0,<dw:DHW-PLANT>,0, 53,Node)          DWTank 572
c                                                                               DWTank 573
c              Histories                                                        DWTank 574
      CASE (208)                                                                DWTank 575
c              Set up history on energy demands                                 DWTank 576
        KliX = <dw;Nodes>                                                       DWTank 577
        CALL ListXNodes(<dw;Nodes>, KliX)                                       DWTank 578
        SELECT CASE (<dw:TYPE>)                                                 DWTank 579
          CASE (1)  ! fuel heaters                                              DWTank 580
            Kmx = <dw:FUEL-METER>                                               DWTank 581
          CASE (2,3)  ! electric heaters                                        DWTank 582
            Kmx = <dw:ELEC-METER>                                               DWTank 583
        END SELECT                                                              DWTank 584
        <dw;EnergyHsty> = NewHistory(Jpl,Jpl,Jdw, KliX, Kmx,                    DWTank 585
     &                      0, 0, 1.,                                           DWTank 586
     &                      <#mx.Load>, <sp:ERROR-LOAD>, 2,                     DWTank 587
     &                      0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0, 0,0.,0)             DWTank 588
c                                                                               DWTank 589
c              Dump pointers                                                    DWTank 590
      CASE (210)                                                                DWTank 591
        IF (<dw;Previous> .EQ. 0)  WRITE (IOUTPT, 9201)                         DWTank 592
        WRITE (IOUTPT, 9202)  (<dw:NAME>,II=1,8),                               DWTank 593
     &                        Jdw, Xfi, Kfo, Xfo, 0                             DWTank 594
c                                                                               DWTank 595
c                                                                               DWTank 596
      END SELECT  ! Mode                                                        DWTank 597
c                                                                               DWTank 598
      RETURN                                                                    DWTank 599
c                                                                               DWTank 600
c              Message formats                                                  DWTank 601
 9201 FORMAT(/' DW-HEATERs                             Jdw       Xfi',          DWTank 602
     &'       Kfo       Xfo      Prop'                                 /        DWTank 603
     &1x,32('-'),5('  --------'))                                               DWTank 604
 9202 FORMAT(1x,8A4,5I10)                                                       DWTank 605
      END                                                                       DWTank 606
      Subroutine Coils_Old(Mode)                                                CoilsO   2
c                                                                               CoilsO   3
c              Simulates the water-side of the old-style coils found            CoilsO   4
c              in version DOE-2.2, and not upgraded to the new models           CoilsO   5
c                                                                               CoilsO   6
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /MISCD / TEMPS(4,4096),CONS(5),TEMPSL(4096),                      /MISCD/  2
     1                 BLDGQH,BLDGQC,BLDGQL,BLDGP,BPMULT,                       /MISCD/  3
     2                 DBTMIN,DBTMAX,WMIN,WMAX,NSPZ(4096),                      /MISCD/  4
     3                 DQ, DTP, DTR, DTS, FPI, PLRCC , POM, TC2, TDM,           /MISCD/  5
     4                 TRA,WCOL,WCOLM,WMM,YPI,KWBTU,BTUKW,UNFILD,Unusedm        /MISCD/  6
      REAL             KWBTU                                                    /MISCD/  7
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
      COMMON  /PTRSYS/ nvect ,                                                  /PTRSYS/ 2
     $                 nsched, its   ,                                          /PTRSYS/ 3
     $                 ncurve, icurve,                                          /PTRSYS/ 4
     $                 nzone , iz    , nczd  , zp2 ,         mtw  ,             /PTRSYS/ 5
     $                 nsys  , is    , nss   , nsp ,  ns   , icode,             /PTRSYS/ 6
     $                 nsz   , isz   , nzd   , zp1 ,  nz   ,                    /PTRSYS/ 7
     $                 nspace, lpr   , Lcv   ,                                  /PTRSYS/ 8
     $                 nattch, iatt  ,                                          /PTRSYS/11
     $                 P2, IDAYHR, IDBWBT,                                      /PTRSYS/12
     $                 IRPPLT, IRPSUM, IRPSYS, IRPZON, MR1, MR2                 /PTRSYS/13
      INTEGER          ZP1, ZP2, P2                                             /PTRSYS/14
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
c                                                                               CoilsO  15
      COMMON  /EQKY  / Always, WhenOn, WhenOff, AuxSched,                       /EQKY/   2
     &                 ConstantFlow, VariableFlow, Yes, No                      /EQKY/   3
      INTEGER          Always, WhenOn, WhenOff, AuxSched,                       /EQKY/   4
     &                 ConstantFlow, VariableFlow, Yes, No                      /EQKY/   5
      COMMON  /PlntKy/ CHW, Pipe2, loop3, HW, loop5, STM, WLHP, DHW,            /PlntKy/ 2
     &                 CW, Deleted, Pipe2h, WLHPh, COGEN, NoType,               /PlntKy/ 3
     &                 Fixed, OA, Sch, Load,  Zone, Outdoor,                    /PlntKy/ 4
     &                 Standby, Demand, Snap, Scheduled,                        /PlntKy/ 5
     &                 CONSTANT, VARIABLE, ModeText(4),                         /PlntKy/ 6
     &                 OffMode, Floating, HeatMode, CoolMode, ElecMode,         /PlntKy/ 7
     &                 AtCoils, EnterLoop, AtPump,                              /PlntKy/ 8
     &                 INDOORS, OUTDOORS, TUNNEL, UNDERGROUND,                  /PlntKy/ 9
     &                 PRIMARY, SECONDARY,                                      /PlntKy/10
     &                 DIRECT, HX,                                              /PlntKy/11
     &                 Water, Ethylene, Propylene, Brine                        /PlntKy/12
      INTEGER          CHW, Pipe2, loop3, HW, loop5, STM, WLHP, DHW,            /PlntKy/13
     &                 CW, Deleted, Pipe2h, WLHPh, COGEN, NoType,               /PlntKy/14
     &                 Fixed, OA, Sch, Load,  Zone, Outdoor,                    /PlntKy/15
     &                 Standby, Demand, Snap, Scheduled,                        /PlntKy/16
     &                 CONSTANT, VARIABLE, ModeText,                            /PlntKy/17
     &                 OffMode, Floating, HeatMode, CoolMode, ElecMode,         /PlntKy/18
     &                 AtCoils, EnterLoop, AtPump,                              /PlntKy/19
     &                 INDOORS, OUTDOORS, TUNNEL, UNDERGROUND,                  /PlntKy/20
     &                 PRIMARY, SECONDARY,                                      /PlntKy/21
     &                 DIRECT, HX,                                              /PlntKy/22
     &                 Water, Ethylene, Propylene, Brine                        /PlntKy/23
c                                                                               CoilsO  18
      INTEGER  Xfi, Xfo                                                         CoilsO  19
      LOGICAL  IterNode, IterReqdNode, IterReqdHsty                             CoilsO  20
c              minimum cfm ratio for curve - interpolate below                  CoilsO  21
      DATA CFMRMIN /0.3/                                                        CoilsO  22
c                                                                               CoilsO  23
c              Outlet temperature and reference load                            CoilsO  24
      Toutlet(Q) = <Xfi.Tinlet> + Q/(<pl.Btuh/GPM-F>*<fo.Moutlet>)              CoilsO  25
      Qoutlet(T) = <fo.Moutlet> * <pl.Btuh/GPM-F> * (T-<pl.Tref>)               CoilsO  26
c                                                                               CoilsO  27
c                                                                               CoilsO  28
      SELECT CASE (Mode)                                                        CoilsO  29
c                                                                               CoilsO  30
c                                                                               CoilsO  31
c ============ HOURLY INITIALIZATION ========================================== CoilsO  32
      CASE (10)                                                                 CoilsO  33
c                                                                               CoilsO  34
c ?? is this needed ?  don't think so                                           CoilsO  35
c              Initialize hourly load variables for system coils                CoilsO  36
      DO  NS=1,NSYS                                                             CoilsO  37
c              base pointer to this system's data                               CoilsO  38
        NSP = IS + (NS-1)*NSS                                                   CoilsO  39
c              zero this systems circulation-loop loads                         CoilsO  40
        IF (<SYS_LOOP_FLAG> .NE. 0)  THEN                                       CoilsO  41
          CALL FILLN(0., <CW_COIL_GPM>, 11)                                     CoilsO  42
          ISZ = <ISZONES>                                                       CoilsO  43
          NSZ = <NZONES>                                                        CoilsO  44
          DO  NZ=1,NSZ                                                          CoilsO  45
            ZP1 = ISZ + (NZ-1)*NZD                                              CoilsO  46
            IF (<ZONE_LOOP_FLAG> .NE. 0)                                        CoilsO  47
     &        CALL FILLN(0., <WSE_COIL_GPMZ>, 7)                                CoilsO  48
          ENDDO                                                                 CoilsO  49
        ENDIF                                                                   CoilsO  50
      ENDDO                                                                     CoilsO  51
c                                                                               CoilsO  52
c                                                                               CoilsO  53
c ============ HOURLY SIMULATION - PRIOR TO HVAC CALLS ======================== CoilsO  54
      CASE (30)                                                                 CoilsO  55
c                                                                               CoilsO  56
c              Since airside not simulated yet, just clear the iteration        CoilsO  57
c              flags                                                            CoilsO  58
      DO  NS=1,NSYS                                                             CoilsO  59
        NSP = IS + (NS-1)*NSS                                                   CoilsO  60
        IF (<SYS_LOOP_FLAG> .GT. 0)  THEN                                       CoilsO  61
          CALL IterSetNode(0, <sy;SystemNodes>)                                 CoilsO  62
          CALL HstyClearFlag(<sy;SystemHstys>)                                  CoilsO  63
        ENDIF                                                                   CoilsO  64
      ENDDO    ! NS                                                             CoilsO  65
c                                                                               CoilsO  66
c                                                                               CoilsO  67
c ============ HOURLY SIMULATION ============================================== CoilsO  68
      CASE (31)                                                                 CoilsO  69
c                                                                               CoilsO  70
c              Loop through all systems and zones and calculate                 CoilsO  71
c              the coil flows for any coils on this loop                        CoilsO  72
      DO  NS=1,NSYS                                                             CoilsO  73
        NSP = IS + (NS-1)*NSS                                                   CoilsO  74
c                                                                               CoilsO  75
c              Skip if this system is not attached to any loops                 CoilsO  76
        IF (<SYS_LOOP_FLAG> .EQ. 0)  CYCLE                                      CoilsO  77
c              skip if no changes since last iteration                          CoilsO  78
        IterNode = IterReqdNode(0, <sy;SystemNodes>)                            CoilsO  79
        IF (.NOT. IterNode  .AND.                                               CoilsO  80
     &      .NOT. IterReqdHsty(<sy;SystemHstys>))  CYCLE                        CoilsO  81
        IterNode = IterReqdNode(0, <sy;CoilNodes>)                              CoilsO  82
        IF (.NOT. IterNode  .AND.                                               CoilsO  83
     &      .NOT. IterReqdHsty(<sy;CoilHstys>))  GOTO 3110                      CoilsO  84
c                                                                               CoilsO  85
        Icode = <SYSTEM-TYPE>                                                   CoilsO  86
c              flags to indicate standby loop operation                         CoilsO  87
        LoopStandbyC = 0                                                        CoilsO  88
        LoopStandbyH = 0                                                        CoilsO  89
c              flag set if both fan and heat/cool schedule active               CoilsO  90
        IF (<IHRONS>  .NE. 0  .AND.  <CON> .NE. 0.)  LoopStandbyC = 1           CoilsO  91
        IF (<IHRONSh> .NE. 0  .AND.  <HON> .NE. 0.)  LoopStandbyH = 1           CoilsO  92
c              central system coils                                             CoilsO  93
c              first, hot water - skip if no hot water or no load               CoilsO  94
        IF (<HW-LOOP> .GT. 0)  THEN                                             CoilsO  95
          IterNode = IterReqdNode(1, <sy;HWNodes>)                              CoilsO  96
          IF (IterNode  .OR.  IterReqdHsty(<sy;HWHsty>))  THEN                  CoilsO  97
          Jpl = <HW-LOOP>                                                       CoilsO  98
          Kfi = <sy;HWInletNode>                                                CoilsO  99
          Xfi = <fi;Xnode>                                                      CoilsO 100
          Kfo = <sy;HWOutletNode>                                               CoilsO 101
          Xfo = <fo;Xnode>                                                      CoilsO 102
c              Fraction of hour demander runs and flag for standby status       CoilsO 103
          <fo.RunFrac>  = <HT_COIL_CYCLE>                                       CoilsO 104
          <fo.CtrlMode> = LoopStandbyH                                          CoilsO 105
          IF (<pl.CtrlMode> .EQ. OffMode)  THEN                                 CoilsO 106
            <fo.Moutlet2> = 0.                                                  CoilsO 107
            <fo.Moutlet3> = 0.                                                  CoilsO 108
          ELSEIF (<HW-VALVE-TYPE> .EQ. 3)  THEN                                 CoilsO 109
c              3-way valve                                                      CoilsO 110
            IF (<HT_COIL_Q> .LT. 0.  .OR.  <pl:TYPE> .NE. Pipe2)  THEN          CoilsO 111
              <fo.Moutlet3>    = <HWDESGPMS> * <pl.RunFrac>                     CoilsO 112
            ELSE                                                                CoilsO 113
c                 2-pipe cooling flow will be accounted for in CHW coil         CoilsO 114
              <fo.Moutlet3> = 0.                                                CoilsO 115
            ENDIF                                                               CoilsO 116
          ELSEIF (<HT_COIL_Q> .LT. -1.  .AND.  Icode .NE. 25)  THEN             CoilsO 117
c              2-way valve with a load                                          CoilsO 118
c              normalized temperature between EAT and EWT                       CoilsO 119
            DTR = (<HT_COIL_EDB> - <Xfi.Tinlet>) / <HWDESDTS>                   CoilsO 120
            DTR = MIN(1.5, MAX(DTR, 0.0) )                                      CoilsO 121
c              cfm ratio - interpolate to zero below ratio of 0.3               CoilsO 122
            CFMR  = <HT_COIL_CFM> / <CFMH>                                      CoilsO 123
            CFMRR = 1.0                                                         CoilsO 124
            IF (CFMR .LT. CFMRMIN)  THEN                                        CoilsO 125
              CFMRR = CFMR / CFMRMIN                                            CoilsO 126
              CFMR  = CFMRMIN                                                   CoilsO 127
            ENDIF                                                               CoilsO 128
c              capacity ratio - do not let coil operate at .gt. 100%            CoilsO 129
            CAPR = <HT_COIL_Q> / (<HEATING-CAPACITY>                            CoilsO 130
     &                              * CFMRR * <HT_COIL_CYCLE>                   CoilsO 131
     &                              * Curve(NSP,<HW-CAP-FCFM>,CFMR,CFMR)        CoilsO 132
     &                              * Curve(NSP,<HW-CAP-FDT> ,DTR ,DTR))        CoilsO 133
            CAPR = MIN(1.0, CAPR)                                               CoilsO 134
c              interpolate if capacity corresponds to a GPM .lt. 30%            CoilsO 135
            IF (CAPR .LT. <HWGPMMINCAP>)  THEN                                  CoilsO 136
              GPMR = 0.3 * CAPR/<HWGPMMINCAP>                                   CoilsO 137
            ELSE                                                                CoilsO 138
              CALL CurveInvert(NSP,<HW-CAP-FGPM>, 1,GPMR,Y,CAPR, Ierr)          CoilsO 139
            ENDIF                                                               CoilsO 140
            IF (Icode .NE. 17)  THEN                                            CoilsO 141
c              loop head and flow                                               CoilsO 142
              <fo.Moutlet2> = <HWDESGPMS>*GPMR*<HT_COIL_CYCLE>                  CoilsO 143
            ELSE                                                                CoilsO 144
c              flow cycles with fan in RESYS                                    CoilsO 145
              <fo.Moutlet2> = <HWDESGPMS>*<HT_COIL_CYCLE>                       CoilsO 146
            ENDIF                                                               CoilsO 147
          ELSEIF (Icode .EQ. 25)  THEN                                          CoilsO 148
c              PTGSD flow assumed to be linear with load                        CoilsO 149
            GPMR         = <HT_COIL_Q> / <HEATING-CAPACITY>                     CoilsO 150
            <fo.Moutlet2> = <HWDESGPMS>*GPMR                                    CoilsO 151
          ELSE                                                                  CoilsO 152
            <fo.Moutlet2> = 0.                                                  CoilsO 153
          ENDIF                                                                 CoilsO 154
c                                                                               CoilsO 155
          IF (<HT_COIL_Q> .LT. -1.)  THEN                                       CoilsO 156
            <fo.CtrlMode> = 2                                                   CoilsO 157
c              if loop temperature is reset on coil load or loop was            CoilsO 158
c              overloaded previous hour                                         CoilsO 159
            IF ((<pl:HT-SETPT-CTRL> .EQ. LOAD                                   CoilsO 160
     &                    .OR.  <lp;HCAP_RATIO> .LT. 1.)                        CoilsO 161
     &                                      .AND.  Icode .NE. 25)  THEN         CoilsO 162
c              cfm ratio - interpolate to zero below ratio of 0.3               CoilsO 163
              CFMR  = <HT_COIL_CFM> / <CFMH>                                    CoilsO 164
              CFMRR = 1.0                                                       CoilsO 165
              IF (CFMR .LT. CFMRMIN)  THEN                                      CoilsO 166
                CFMRR = CFMR / CFMRMIN                                          CoilsO 167
                CFMR  = CFMRMIN                                                 CoilsO 168
              ENDIF                                                             CoilsO 169
c              target hot water gpm ratio                                       CoilsO 170
              IF (<HW-VALVE-TYPE> .EQ. 2)  THEN                                 CoilsO 171
                GPMR = <pl:FLOW-RESET>                                          CoilsO 172
              ELSE                                                              CoilsO 173
                GPMR = 1.0                                                      CoilsO 174
              ENDIF                                                             CoilsO 175
c              capacity ratio - do not let coil operate at .gt. 100%            CoilsO 176
              CAPR = <HT_COIL_Q> / (<HEATING-CAPACITY>                          CoilsO 177
     &                             * CFMRR * <HT_COIL_CYCLE>                    CoilsO 178
     &                             * Curve(NSP,<HW-CAP-FCFM>,CFMR,CFMR)         CoilsO 179
     &                             * Curve(NSP,<HW-CAP-FGPM>,GPMR,GPMR))        CoilsO 180
              CAPR = MIN(1.0, CAPR)                                             CoilsO 181
              CALL CurveInvert(NSP,<HW-CAP-FDT>, 1,DTR,Y,CAPR, Ierr)            CoilsO 182
c              and hot water supply temp                                        CoilsO 183
              <fi.Treqd> = <HT_COIL_EDB> - DTR*<HWDESDTS>                       CoilsO 184
            ELSEIF (Icode .EQ. 25)  THEN                                        CoilsO 185
c              PTGSD systems cannot have hw reset when active                   CoilsO 186
              <fi.Treqd> = <pl:HT-SETPT-T>                                      CoilsO 187
            ENDIF                                                               CoilsO 188
          ENDIF                                                                 CoilsO 189
c              Humidifier flow                                                  CoilsO 190
          IF (<HUM_COIL_Q> .LT. 0.)  THEN                                       CoilsO 191
            GPM = ABS(<HUM_COIL_Q> / (<pl.Btuh/GPM-F>*<pl:DESIGN-DT>))          CoilsO 192
            <fo.Moutlet2> = <fo.Moutlet2> + GPM                                 CoilsO 193
            <fi.Treqd>    = <pl:HT-SETPT-T>                                     CoilsO 194
          ENDIF                                                                 CoilsO 195
c              outlet temperature and load relative to reference point          CoilsO 196
          <fo.Moutlet> = <fo.Moutlet2> + <fo.Moutlet3>                          CoilsO 197
          IF (<fo.Moutlet> .GT. 0.)  THEN                                       CoilsO 198
            <fo.Toutlet> = Toutlet(<HT_COIL_Q>+<HUM_COIL_Q>)                    CoilsO 199
            <fo.Qoutlet> = Qoutlet(<fo.Toutlet>)                                CoilsO 200
          ELSE                                                                  CoilsO 201
            <fo.Qoutlet> = 0.                                                   CoilsO 202
          ENDIF                                                                 CoilsO 203
          <fi.Minlet2>  = <fo.Moutlet2>                                         CoilsO 204
          <fi.Minlet3>  = <fo.Moutlet3>                                         CoilsO 205
          <fi.Minlet>   = <fo.Moutlet>                                          CoilsO 206
          <fi.Qinlet>   = <fo.Qoutlet>                                          CoilsO 207
          <fi.Preqd>    = <Xfo.Preqd>                                           CoilsO 208
     &                  + FluidDP(<sy;HWFluidProp>, <fi.Minlet>)                CoilsO 209
          <fi.RunFrac>  = <fo.RunFrac>                                          CoilsO 210
          <fi.CtrlMode> = <fo.CtrlMode>                                         CoilsO 211
          <fi.Mreqd>    = 0.                                                    CoilsO 212
          IF (<fi.RunFrac> .GT. 0.)                                             CoilsO 213
     &      <fi.Mreqd> = <fi.Minlet2>/<fi.RunFrac>                              CoilsO 214
          <fo.Mreqd> = <fi.Mreqd>                                               CoilsO 215
          CALL CnvgCheck(1, <sy;HWHsty>)                                        CoilsO 216
        ENDIF                                                                   CoilsO 217
        ENDIF  ! HW coil                                                        CoilsO 218
c                                                                               CoilsO 219
c              preheat coil                                                     CoilsO 220
        IF (<PHW-LOOP> .GT. 0)  THEN                                            CoilsO 221
          IterNode = IterReqdNode(1, <sy;PHWNodes>)                             CoilsO 222
          IF (IterNode  .OR.  IterReqdHsty(<sy;PHWHsty>))  THEN                 CoilsO 223
          Jpl = <PHW-LOOP>                                                      CoilsO 224
          Kfi = <sy;PHWInletNode>                                               CoilsO 225
          Xfi = <fi;Xnode>                                                      CoilsO 226
          Kfo = <sy;PHWOutletNode>                                              CoilsO 227
          Xfo = <fo;Xnode>                                                      CoilsO 228
c              Fraction of hour demander runs and flag for standby status       CoilsO 229
          <fo.RunFrac>  = <PHT_COIL_CYCLE>                                      CoilsO 230
          <fo.CtrlMode> = LoopStandbyH                                          CoilsO 231
          IF (<pl.CtrlMode> .EQ. OffMode)  THEN                                 CoilsO 232
            <fo.Moutlet2> = 0.                                                  CoilsO 233
            <fo.Moutlet3> = 0.                                                  CoilsO 234
          ELSEIF (<HW-VALVE-TYPE> .EQ. 3)  THEN                                 CoilsO 235
c              3-way valve                                                      CoilsO 236
            <fo.Moutlet3> = <PHWDESGPMS> * <pl.RunFrac>                         CoilsO 237
          ELSEIF (<PHT_COIL_Q> .LT. -1.)  THEN                                  CoilsO 238
c              2-way valve with a load                                          CoilsO 239
            DTR  = (<PHT_COIL_EDB> - <Xfi.Tinlet>) / <PHWDESDTS>                CoilsO 240
            DTR  = MIN(1.5, MAX(DTR, 0.0) )                                     CoilsO 241
            CAPR = <PHT_COIL_Q> / (<PREHEAT-CAPACITY>                           CoilsO 242
     &                                * <PHT_COIL_CYCLE>                        CoilsO 243
     &                                * Curve(NSP,<HW-CAP-FDT>,DTR,DTR))        CoilsO 244
            CAPR = MIN(1.0, CAPR)                                               CoilsO 245
c              interpolate if capacity corresponds to a GPM .lt. 30%            CoilsO 246
            IF (CAPR .LT. <HWGPMMINCAP>)  THEN                                  CoilsO 247
              GPMR = 0.3 * CAPR/<HWGPMMINCAP>                                   CoilsO 248
            ELSE                                                                CoilsO 249
c              pointer to CAP = f(GPMR) curve                                   CoilsO 250
              CALL CurveInvert(NSP,<HW-CAP-FGPM>, 1,GPMR,Y,CAPR, Ierr)          CoilsO 251
            ENDIF                                                               CoilsO 252
            <fo.Moutlet2> = <PHWDESGPMS>*GPMR*<PHT_COIL_CYCLE>                  CoilsO 253
          ELSE                                                                  CoilsO 254
            <fo.Moutlet2> = 0.                                                  CoilsO 255
          ENDIF                                                                 CoilsO 256
c                                                                               CoilsO 257
          IF (<PHT_COIL_Q> .LT. -1.)  THEN                                      CoilsO 258
            <fo.CtrlMode> = 2                                                   CoilsO 259
c              if loop temperature is reset on coil load                        CoilsO 260
            IF (<pl:HT-SETPT-CTRL> .EQ. LOAD                                    CoilsO 261
     &                             .OR.  <lp;HCAP_RATIO> .LT. 1.)  THEN         CoilsO 262
c              pointer to differential temperature curve                        CoilsO 263
              IDT  = <HW-CAP-FDT>                                               CoilsO 264
c              target hot water gpm ratio                                       CoilsO 265
              IF (<PHW-VALVE-TYPE> .EQ. 2)  THEN                                CoilsO 266
                GPMR = <pl:FLOW-RESET>                                          CoilsO 267
              ELSE                                                              CoilsO 268
                GPMR = 1.0                                                      CoilsO 269
              ENDIF                                                             CoilsO 270
              CAPR = <PHT_COIL_Q> / (<PREHEAT-CAPACITY>                         CoilsO 271
     &                             * <PHT_COIL_CYCLE>                           CoilsO 272
     &                             * Curve(NSP,<HW-CAP-FGPM>,GPMR,GPMR))        CoilsO 273
              CAPR = MIN(1.0, CAPR)                                             CoilsO 274
              CALL CurveInvert(NSP,<HW-CAP-FDT>, 1,DTR,Y,CAPR, Ierr)            CoilsO 275
              <fi.Treqd> = <PHT_COIL_EDB> - DTR*<PHWDESDTS>                     CoilsO 276
            ENDIF                                                               CoilsO 277
          ENDIF                                                                 CoilsO 278
c              outlet temperature and load relative to reference point          CoilsO 279
          <fo.Moutlet> = <fo.Moutlet2> + <fo.Moutlet3>                          CoilsO 280
          IF (<fo.Moutlet> .GT. 0.)  THEN                                       CoilsO 281
            <fo.Toutlet> = Toutlet(<PHT_COIL_Q>)                                CoilsO 282
            <fo.Qoutlet> = Qoutlet(<fo.Toutlet>)                                CoilsO 283
          ELSE                                                                  CoilsO 284
            <fo.Qoutlet> = 0.                                                   CoilsO 285
          ENDIF                                                                 CoilsO 286
          <fi.Minlet2>  = <fo.Moutlet2>                                         CoilsO 287
          <fi.Minlet3>  = <fo.Moutlet3>                                         CoilsO 288
          <fi.Minlet>   = <fo.Moutlet>                                          CoilsO 289
          <fi.Qinlet>   = <fo.Qoutlet>                                          CoilsO 290
          <fi.Preqd>    = <Xfo.Preqd>                                           CoilsO 291
     &                  + FluidDP(<sy;PHWFluidProp>, <fi.Minlet>)               CoilsO 292
          <fi.RunFrac>  = <fo.RunFrac>                                          CoilsO 293
          <fi.CtrlMode> = <fo.CtrlMode>                                         CoilsO 294
          <fi.Mreqd>    = 0.                                                    CoilsO 295
          IF (<fi.RunFrac> .GT. 0.)                                             CoilsO 296
     &      <fi.Mreqd> = <fi.Minlet2>/<fi.RunFrac>                              CoilsO 297
          <fo.Mreqd> = <fi.Mreqd>                                               CoilsO 298
          CALL CnvgCheck(1, <sy;PHWHsty>)                                       CoilsO 299
        ENDIF                                                                   CoilsO 300
        ENDIF  ! Preheat                                                        CoilsO 301
c                                                                               CoilsO 302
c              desiccant regeneration coil                                      CoilsO 303
        IF (<DESC-LOOP> .GT. 0)  THEN                                           CoilsO 304
          IterNode = IterReqdNode(1, <sy;DescNodes>)                            CoilsO 305
          IF (IterNode  .OR.  IterReqdHsty(<sy;DescHsty>))  THEN                CoilsO 306
          Jpl = <DESC-LOOP>                                                     CoilsO 307
          Kfi = <sy;DescInletNode>                                              CoilsO 308
          Xfi = <fi;Xnode>                                                      CoilsO 309
          Kfo = <sy;DescOutltNode>                                              CoilsO 310
          Xfo = <fo;Xnode>                                                      CoilsO 311
c              Flag for standby status                                          CoilsO 312
          <fo.CtrlMode> = LoopStandbyC                                          CoilsO 313
          IF (<pl.CtrlMode> .EQ. OffMode)  THEN                                 CoilsO 314
            <fo.Moutlet2> = 0.                                                  CoilsO 315
            <fo.Moutlet3> = 0.                                                  CoilsO 316
          ELSEIF (<DESC-VALVE-TYPE> .EQ. 3)  THEN                               CoilsO 317
            <fo.Moutlet3> = <DESCDESGPMS> * <pl.RunFrac>                        CoilsO 318
          ELSEIF (<DESC_COIL_Q> .LT. -1.)  THEN                                 CoilsO 319
c              2-way valve with a load                                          CoilsO 320
c              desiccant flow assumed to be linear with load                    CoilsO 321
            GPMR          = <DESC_COIL_Q> / <HEATING-CAPACITY>                  CoilsO 322
            <fo.Moutlet2> = <DESCDESGPMS>*GPMR                                  CoilsO 323
            <fo.RunFrac>  = GPMR                                                CoilsO 324
          ELSE                                                                  CoilsO 325
            <fo.Moutlet2> = 0.                                                  CoilsO 326
            <fo.RunFrac>  = 0.                                                  CoilsO 327
          ENDIF                                                                 CoilsO 328
c                                                                               CoilsO 329
          IF (<DESC_COIL_Q> .LT. -1.)  THEN                                     CoilsO 330
            <fo.CtrlMode> = 2                                                   CoilsO 331
c              regeneration coils cannot have hw reset when active              CoilsO 332
            <fi.Treqd>   = <pl:HT-SETPT-T>                                      CoilsO 333
          ENDIF                                                                 CoilsO 334
c              outlet temperature and load relative to reference point          CoilsO 335
          <fo.Moutlet> = <fo.Moutlet2> + <fo.Moutlet3>                          CoilsO 336
          IF (<fo.Moutlet> .GT. 0.)  THEN                                       CoilsO 337
            <fo.Toutlet> = Toutlet(<DESC_COIL_Q>)                               CoilsO 338
            <fo.Qoutlet> = Qoutlet(<fo.Toutlet>)                                CoilsO 339
          ELSE                                                                  CoilsO 340
            <fo.Qoutlet> = 0.                                                   CoilsO 341
          ENDIF                                                                 CoilsO 342
          <fi.Minlet2>  = <fo.Moutlet2>                                         CoilsO 343
          <fi.Minlet3>  = <fo.Moutlet3>                                         CoilsO 344
          <fi.Minlet>   = <fo.Moutlet>                                          CoilsO 345
          <fi.Qinlet>   = <fo.Qoutlet>                                          CoilsO 346
          <fi.Preqd>    = <Xfo.Preqd>                                           CoilsO 347
     &                  + FluidDP(<sy;DescFluidProp>, <fi.Minlet>)              CoilsO 348
          <fi.RunFrac>  = <fo.RunFrac>                                          CoilsO 349
          <fi.CtrlMode> = <fo.CtrlMode>                                         CoilsO 350
          <fi.Mreqd>    = 0.                                                    CoilsO 351
          IF (<fi.RunFrac> .GT. 0.)                                             CoilsO 352
     &      <fi.Mreqd> = <fi.Minlet2>/<fi.RunFrac>                              CoilsO 353
          <fo.Mreqd> = <fi.Mreqd>                                               CoilsO 354
          CALL CnvgCheck(1, <sy;DescHsty>)                                      CoilsO 355
        ENDIF                                                                   CoilsO 356
        ENDIF  !  Desiccant loads                                               CoilsO 357
c                                                                               CoilsO 358
c              Central system chilled water coil                                CoilsO 359
        IF (<CHW-LOOP> .GT. 0)  THEN                                            CoilsO 360
          IterNode = IterReqdNode(1, <sy;CHWNodes>)                             CoilsO 361
          IF (IterNode  .OR.  IterReqdHsty(<sy;CHWHsty>))  THEN                 CoilsO 362
          Jpl = <CHW-LOOP>                                                      CoilsO 363
          Kfi = <sy;CHWInletNode>                                               CoilsO 364
          Xfi = <fi;Xnode>                                                      CoilsO 365
          Kfo = <sy;CHWOutletNode>                                              CoilsO 366
          Xfo = <fo;Xnode>                                                      CoilsO 367
c              Fraction of hour demander runs and flag for standby status       CoilsO 368
          <fo.RunFrac>  = <CL_COIL_CYCLE>                                       CoilsO 369
          <fo.CtrlMode> = LoopStandbyC                                          CoilsO 370
          IF (<pl.CtrlMode> .EQ. OffMode)  THEN                                 CoilsO 371
            <fo.Moutlet2> = 0.                                                  CoilsO 372
            <fo.Moutlet3> = 0.                                                  CoilsO 373
          ELSEIF (<CHW-VALVE-TYPE> .EQ. 3)  THEN                                CoilsO 374
c              3-way valve                                                      CoilsO 375
            IF (<CL_COIL_Q> .GE. 1.  .OR.  <pl:TYPE> .NE. Pipe2)  THEN          CoilsO 376
              <fo.Moutlet3> = <CHWDESGPMS> * <pl.RunFrac>                       CoilsO 377
            ELSE                                                                CoilsO 378
c                 2-pipe heating flow will be accounted for in HW coil          CoilsO 379
              <fo.Moutlet3> = 0.                                                CoilsO 380
            ENDIF                                                               CoilsO 381
          ELSEIF (<CL_COIL_Q> .GT. 1.)  THEN                                    CoilsO 382
c              2-way valve with a load                                          CoilsO 383
c              coil entering wetbulb temp                                       CoilsO 384
            EWB = MIN(73., MAX(<CL_COIL_EWB>, 59.))                             CoilsO 385
c              cfm ratio - interpolate to zero below ratio of 0.3               CoilsO 386
            CFMR  = <CL_COIL_CFM> / (<SUPPLY-CFM> * <CL_COIL_CYCLE>)            CoilsO 387
            CFMRR = 1.0                                                         CoilsO 388
            IF (CFMR .LT. CFMRMIN)  THEN                                        CoilsO 389
              CFMRR = CFMR / CFMRMIN                                            CoilsO 390
              CFMR  = CFMRMIN                                                   CoilsO 391
            ENDIF                                                               CoilsO 392
c              capacity ratio - do not let coil operate at .gt. 100%            CoilsO 393
            CAPR = <CL_COIL_Q> / (<CHWCAP6544S>                                 CoilsO 394
     &                  * CFMRR * <CL_COIL_CYCLE>                               CoilsO 395
     &                  * Curve(NSP,<CHW-CAP-FCFM>,CFMR,CFMR)                   CoilsO 396
     &                  * Curve(NSP,<CHW-CAP-FEWBEWT>,EWB,<Xfi.Tinlet>))        CoilsO 397
            CAPR = MIN(1.0, CAPR)                                               CoilsO 398
c              interpolate if capacity corresponds to a GPM .lt. 30%            CoilsO 399
            IF (CAPR .LT. <CHWGPMMINCAP>)  THEN                                 CoilsO 400
              GPMR = 0.3 * CAPR/<CHWGPMMINCAP>                                  CoilsO 401
            ELSE                                                                CoilsO 402
c              pointer to CAP = f(GPMR) curve                                   CoilsO 403
              CALL CurveInvert(NSP,<CHW-CAP-FGPM>, 1,GPMR,Y,CAPR, Ierr)         CoilsO 404
            ENDIF                                                               CoilsO 405
c              loop head and flow                                               CoilsO 406
            <fo.Moutlet2> = <CHWDESGPMS>*GPMR*<CL_COIL_CYCLE>                   CoilsO 407
          ELSEIF (<CL_COIL_Q> .LT. -1.  .AND.  Icode .EQ. 25)  THEN             CoilsO 408
c              PTGSD regeneration flow assumed to be linear with load           CoilsO 409
c              Note that this is actually the regeneration heating load,        CoilsO 410
c              kept separate from space heating for end-use accounting          CoilsO 411
            GPMR          = <CL_COIL_Q> / <HEATING-CAPACITY>                    CoilsO 412
            <fo.Moutlet2> = <HWDESGPMS>*GPMR                                    CoilsO 413
          ELSE                                                                  CoilsO 414
            <fo.Moutlet2> = 0.                                                  CoilsO 415
          ENDIF                                                                 CoilsO 416
c                                                                               CoilsO 417
          IF (<CL_COIL_Q> .GT. 1.)  THEN                                        CoilsO 418
            <fo.CtrlMode> = 2                                                   CoilsO 419
c              if loop temperature is reset on coil load                        CoilsO 420
            IF (<pl:CL-SETPT-CTRL> .EQ. LOAD                                    CoilsO 421
     &                            .OR.  <lp;CCAP_RATIO> .LT. 1.)  THEN          CoilsO 422
c              cfm ratio - interpolate to zero below ratio of 0.3               CoilsO 423
              CFMR  = <CL_COIL_CFM> / <SUPPLY-CFM>                              CoilsO 424
              CFMRR = 1.0                                                       CoilsO 425
              IF (CFMR .LT. CFMRMIN)  THEN                                      CoilsO 426
                CFMRR = CFMR / CFMRMIN                                          CoilsO 427
                CFMR  = CFMRMIN                                                 CoilsO 428
              ENDIF                                                             CoilsO 429
c              target chilled water gpm ratio                                   CoilsO 430
              IF (<CHW-VALVE-TYPE> .EQ. 2)  THEN                                CoilsO 431
                GPMR = <pl:FLOW-RESET>                                          CoilsO 432
              ELSE                                                              CoilsO 433
                GPMR = 1.0                                                      CoilsO 434
              ENDIF                                                             CoilsO 435
c              capacity ratio - do not let coil operate at .gt. 100%            CoilsO 436
              CAPR = <CL_COIL_Q> / (<CHWCAP6544S>                               CoilsO 437
     &                            * CFMRR * <CL_COIL_CYCLE>                     CoilsO 438
     &                            * Curve(NSP,<CHW-CAP-FCFM>,CFMR,CFMR)         CoilsO 439
     &                            * Curve(NSP,<CHW-CAP-FGPM>,GPMR,GPMR))        CoilsO 440
              CAPR = MIN(1.0, CAPR)                                             CoilsO 441
c              solve for capacity vs. EWB and CHWS                              CoilsO 442
              EWB  = MIN(73., MAX(<CL_COIL_EWB>, 59.))                          CoilsO 443
              CALL CurveInvert(NSP,<CHW-CAP-FEWBEWT>, 2,EWB,EWT,CAPR,           CoilsO 444
     &                                                             Ierr)        CoilsO 445
c              and chilled water supply temp                                    CoilsO 446
              <fi.Treqd> = EWT                                                  CoilsO 447
            ENDIF                                                               CoilsO 448
          ENDIF                                                                 CoilsO 449
c              outlet temperature and load relative to reference point          CoilsO 450
          <fo.Moutlet> = <fo.Moutlet2> + <fo.Moutlet3>                          CoilsO 451
          IF (<fo.Moutlet> .GT. 0.)  THEN                                       CoilsO 452
            <fo.Toutlet> = Toutlet(<CL_COIL_Q>)                                 CoilsO 453
            <fo.Qoutlet> = Qoutlet(<fo.Toutlet>)                                CoilsO 454
          ELSE                                                                  CoilsO 455
            <fo.Qoutlet> = 0.                                                   CoilsO 456
          ENDIF                                                                 CoilsO 457
          <fi.Minlet2>  = <fo.Moutlet2>                                         CoilsO 458
          <fi.Minlet3>  = <fo.Moutlet3>                                         CoilsO 459
          <fi.Minlet>   = <fo.Moutlet>                                          CoilsO 460
          <fi.Qinlet>   = <fo.Qoutlet>                                          CoilsO 461
          <fi.Preqd>    = <Xfo.Preqd>                                           CoilsO 462
     &                  + FluidDP(<sy;CHWFluidProp>, <fi.Minlet>)               CoilsO 463
          <fi.RunFrac>  = <fo.RunFrac>                                          CoilsO 464
          <fi.CtrlMode> = <fo.CtrlMode>                                         CoilsO 465
          <fi.Mreqd>    = 0.                                                    CoilsO 466
          IF (<fi.RunFrac> .GT. 0.)                                             CoilsO 467
     &      <fi.Mreqd> = <fi.Minlet2>/<fi.RunFrac>                              CoilsO 468
          <fo.Mreqd> = <fi.Mreqd>                                               CoilsO 469
          CALL CnvgCheck(1, <sy;CHWHsty>)                                       CoilsO 470
        ENDIF                                                                   CoilsO 471
        ENDIF  ! CHW coil                                                       CoilsO 472
c                                                                               CoilsO 473
c              Central water-cooled DX or WLHP                                  CoilsO 474
        IF (<CW-LOOP> .GT. 0)  THEN                                             CoilsO 475
          IterNode = IterReqdNode(1, <sy;CWNodes>)                              CoilsO 476
          IF (IterNode  .OR.  IterReqdHsty(<sy;CWHsty>))  THEN                  CoilsO 477
          Jpl = <CW-LOOP>                                                       CoilsO 478
          Kfi = <sy;CWInletNode>                                                CoilsO 479
          Xfi = <fi;Xnode>                                                      CoilsO 480
          Kfo = <sy;CWOutletNode>                                               CoilsO 481
          Xfo = <fo;Xnode>                                                      CoilsO 482
          <fo.CtrlMode> = <IHRONS>                                              CoilsO 483
          IF (<CW_COIL_Q> .NE. 0.)  <fo.CtrlMode> = 2                           CoilsO 484
          IF (<pl.CtrlMode> .EQ. OffMode)  THEN                                 CoilsO 485
            <fo.Moutlet2> = 0.                                                  CoilsO 486
            <fo.Moutlet3> = 0.                                                  CoilsO 487
          ELSEIF (<CW-VALVE> .EQ. No)  THEN                                     CoilsO 488
c              unit has no condenser valve                                      CoilsO 489
            CWgpm = <CWDESGPMS> * <pl.RunFrac>                                  CoilsO 490
            <fo.Moutlet3> = CWgpm                                               CoilsO 491
          ELSE                                                                  CoilsO 492
c              water flows only when unit is cycled on                          CoilsO 493
            CWgpm = <CW_COIL_GPM>                                               CoilsO 494
            <fo.Moutlet2> = CWgpm                                               CoilsO 495
          ENDIF                                                                 CoilsO 496
c              head requirement of condenser always constant when running       CoilsO 497
          <fi.Preqd>  = <Xfo.Preqd>                                             CoilsO 498
     &                  + FluidDP(<sy;CWFluidProp>, <CWDESGPMS>)                CoilsO 499
c              estimate the fraction of the hour the loop runs                  CoilsO 500
          <fo.RunFrac> = MIN(1., <CW_COIL_GPM> / <CWDESGPMS>)                   CoilsO 501
c                                                                               CoilsO 502
c              outlet temperature and load relative to reference point          CoilsO 503
          <fo.Moutlet> = <fo.Moutlet2> + <fo.Moutlet3>                          CoilsO 504
          IF (<fo.Moutlet> .GT. 0.)  THEN                                       CoilsO 505
            <fo.Toutlet> = Toutlet(<CW_COIL_Q>)                                 CoilsO 506
            <fo.Qoutlet> = Qoutlet(<fo.Toutlet>)                                CoilsO 507
          ELSE                                                                  CoilsO 508
            <fo.Qoutlet> = 0.                                                   CoilsO 509
          ENDIF                                                                 CoilsO 510
          <fi.Minlet2>  = <fo.Moutlet2>                                         CoilsO 511
          <fi.Minlet3>  = <fo.Moutlet3>                                         CoilsO 512
          <fi.Minlet>   = <fo.Moutlet>                                          CoilsO 513
          <fi.Qinlet>   = <fo.Qoutlet>                                          CoilsO 514
          <fi.RunFrac>  = <fo.RunFrac>                                          CoilsO 515
          <fi.CtrlMode> = <fo.CtrlMode>                                         CoilsO 516
          <fi.Mreqd>    = 0.                                                    CoilsO 517
          IF (<fi.RunFrac> .GT. 0.)                                             CoilsO 518
     &      <fi.Mreqd> = <fi.Minlet2>/<fi.RunFrac>                              CoilsO 519
          <fo.Mreqd> = <fi.Mreqd>                                               CoilsO 520
          CALL CnvgCheck(1, <sy;CWHsty>)                                        CoilsO 521
        ENDIF                                                                   CoilsO 522
        ENDIF  ! condenser                                                      CoilsO 523
c                                                                               CoilsO 524
c              Central water-side economizer                                    CoilsO 525
        IF (<WSE-LOOP> .GT. 0)  THEN                                            CoilsO 526
          IterNode = IterReqdNode(1, <sy;WSENodes>)                             CoilsO 527
          IF (IterNode  .OR.  IterReqdHsty(<sy;WSEHsty>))  THEN                 CoilsO 528
          Jpl = <WSE-LOOP>                                                      CoilsO 529
          Kfi = <sy;WSEInletNode>                                               CoilsO 530
          Xfi = <fi;Xnode>                                                      CoilsO 531
          Kfo = <sy;WSEOutletNode>                                              CoilsO 532
          Xfo = <fo;Xnode>                                                      CoilsO 533
          <fo.CtrlMode> = <IHRONS>                                              CoilsO 534
          IF (<WSE_COIL_Q> .NE. 0.)  <fo.CtrlMode> = 2                          CoilsO 535
          <fo.CtrlMode> = <fi.CtrlMode>                                         CoilsO 536
          IF (<pl.CtrlMode> .EQ. OffMode)  THEN                                 CoilsO 537
            <fo.Moutlet2> = 0.                                                  CoilsO 538
            <fo.Moutlet3> = 0.                                                  CoilsO 539
          ELSEIF (<WSE-VALVE-TYPE> .EQ. 3)  THEN                                CoilsO 540
c              3-way valve                                                      CoilsO 541
            GPMR = 1.0 * <pl.RunFrac>                                           CoilsO 542
            IF (Jpl .NE. <CW-LOOP>  .OR.  <CW_COIL_GPM> .EQ. 0.)  THEN          CoilsO 543
              <fo.Moutlet3> = <WSEDESGPMS>*GPMR                                 CoilsO 544
              <fo.RunFrac>  = 1.0                                               CoilsO 545
            ELSE  ! on same loop                                                CoilsO 546
c              when condenser is on, flow is in series, and must                CoilsO 547
c              be maximum (otherwise, wse could handle entire load)             CoilsO 548
              <fo.Moutlet3> = MAX(CWgpm, <WSEDESGPMS>*GPMR)                     CoilsO 549
            ENDIF                                                               CoilsO 550
          ELSE                                                                  CoilsO 551
c              2-way valve                                                      CoilsO 552
            GPMR = <WSE_COIL_GPM> / <WSEDESGPMS>                                CoilsO 553
            IF (Jpl .NE. <CW-LOOP>  .OR.  <CW_COIL_GPM> .EQ. 0.)  THEN          CoilsO 554
              <fo.Moutlet2> = <WSEDESGPMS>*GPMR                                 CoilsO 555
              <fo.RunFrac>  = 1.0                                               CoilsO 556
            ELSE  ! on same loop                                                CoilsO 557
c              When condenser is on, flow is in series, and must                CoilsO 558
c              be maximum (otherwise, wse could handle entire load)             CoilsO 559
              <fo.Moutlet2> = MAX(CWgpm, <WSEDESGPMS>*GPMR)                     CoilsO 560
              <fo.Moutlet2> = <fi.Minlet2>                                      CoilsO 561
              <fi.Preqd>    = <Xfo.Preqd>                                       CoilsO 562
     &                      + FluidDP(<sy;CWFluidProp>, <fi.Minlet2>)           CoilsO 563
     &                      + FluidDP(<sy;WSEFluidProp>, <fi.Minlet2>)          CoilsO 564
            ENDIF                                                               CoilsO 565
          ENDIF                                                                 CoilsO 566
c                                                                               CoilsO 567
          IF (Jpl .NE. <CW-LOOP>)  THEN                                         CoilsO 568
c              outlet temperature and load relative to reference point          CoilsO 569
            <fo.Moutlet> = <fo.Moutlet2> + <fo.Moutlet3>                        CoilsO 570
            IF (<fo.Moutlet> .GT. 0.)  THEN                                     CoilsO 571
              <fo.Toutlet> = Toutlet(<WSE_COIL_Q>)                              CoilsO 572
              <fo.Qoutlet> = Qoutlet(<fo.Toutlet>)                              CoilsO 573
            ELSE                                                                CoilsO 574
              <fo.Qoutlet> = 0.                                                 CoilsO 575
            ENDIF                                                               CoilsO 576
          ELSE                                                                  CoilsO 577
c              outlet temperature and load relative to reference point          CoilsO 578
            IF (<fo.Moutlet> .GT. 0.)  THEN                                     CoilsO 579
              <fo.Toutlet> = Toutlet(<CW_COIL_Q>+<WSE_COIL_Q>)                  CoilsO 580
              <fo.Qoutlet> = Qoutlet(<fo.Toutlet>)                              CoilsO 581
            ELSE                                                                CoilsO 582
              <fo.Qoutlet> = 0.                                                 CoilsO 583
            ENDIF                                                               CoilsO 584
          ENDIF                                                                 CoilsO 585
          <fi.Minlet2>  = <fo.Moutlet2>                                         CoilsO 586
          <fi.Minlet3>  = <fo.Moutlet3>                                         CoilsO 587
          <fi.Minlet>   = <fo.Moutlet>                                          CoilsO 588
          <fi.Qinlet>   = <fo.Qoutlet>                                          CoilsO 589
          <fi.RunFrac>  = <fo.RunFrac>                                          CoilsO 590
          <fi.CtrlMode> = <fo.CtrlMode>                                         CoilsO 591
          <fi.Mreqd>    = 0.                                                    CoilsO 592
          IF (<fi.RunFrac> .GT. 0.)                                             CoilsO 593
     &      <fi.Mreqd> = <fi.Minlet2>/<fi.RunFrac>                              CoilsO 594
          <fo.Mreqd> = <fi.Mreqd>                                               CoilsO 595
          CALL CnvgCheck(1, <sy;WSEHsty>)                                       CoilsO 596
        ENDIF                                                                   CoilsO 597
        ENDIF  ! Water-side economizers                                         CoilsO 598
c                                                                               CoilsO 599
c              Now loop through the zones.  skip if no zones have loops         CoilsO 600
 3110   IF (<ZONE_LOOP_FLAG> .EQ. 0)  CYCLE                                     CoilsO 601
c              Skip if nothing changed since last iteration                     CoilsO 602
        IterNode = IterReqdNode(0, <sy;ZoneCoilNodes>)                          CoilsO 603
        IF (.NOT. IterNode  .AND.                                               CoilsO 604
     &      .NOT. IterReqdHsty(<sy;ZoneCoilHstys>))  CYCLE                      CoilsO 605
        ISZ = <ISZONES>                                                         CoilsO 606
        NSZ = <NZONES>                                                          CoilsO 607
        DO  NZ=1,NSZ                                                            CoilsO 608
          ZP1 = ISZ + (NZ-1)*NZD                                                CoilsO 609
          ZP2 = <ZP2>                                                           CoilsO 610
c              only conditioned zones or plenums have coils                     CoilsO 611
          IF (<ZONE-TYPE> .EQ. 2)  CYCLE                                        CoilsO 612
c              zone hot water coil                                              CoilsO 613
          IF (<HW-LOOPZ> .GT. 0)  THEN                                          CoilsO 614
          IterNode = IterReqdNode(1, <zn;HWNodes>)                              CoilsO 615
          IF (IterNode  .OR.  IterReqdHsty(<zn;HWHsty>))  THEN                  CoilsO 616
            Jpl = <HW-LOOPZ>                                                    CoilsO 617
            Kfi = <zn;HWInletNode>                                              CoilsO 618
            Xfi = <fi;Xnode>                                                    CoilsO 619
            Kfo = <zn;HWOutletNode>                                             CoilsO 620
            Xfo = <fo;Xnode>                                                    CoilsO 621
c              Fraction of hour demander runs and flag for standby status       CoilsO 622
            <fo.RunFrac>  = <COIL_CYCLEZ>                                       CoilsO 623
            <fo.CtrlMode> = LoopStandbyH                                        CoilsO 624
            IF (<pl.CtrlMode> .EQ. OffMode)  THEN                               CoilsO 625
              <fo.Moutlet2> = 0.                                                CoilsO 626
              <fo.Moutlet3> = 0.                                                CoilsO 627
            ELSEIF (<HW-VALVE-TYPEZ> .EQ. 3)  THEN                              CoilsO 628
c              3-way valve                                                      CoilsO 629
              IF (<COIL_QZ> .LT. -1.  .OR.  <pl:TYPE> .NE. Pipe2)  THEN         CoilsO 630
                <fo.Moutlet3> = <HWDESGPMZ> * <pl.RunFrac>                      CoilsO 631
              ELSE                                                              CoilsO 632
c                 2-pipe cooling flow will be accounted for in CHW coil         CoilsO 633
                <fo.Moutlet3> = 0.                                              CoilsO 634
              ENDIF                                                             CoilsO 635
            ELSEIF (<COIL_QZ> .LT. -1.)  THEN                                   CoilsO 636
c              2-way valve with a load                                          CoilsO 637
              IF (Icode .LT. 6  .OR.  Icode .GT. 8)  THEN                       CoilsO 638
c              normalized temperature between EAT and EWT                       CoilsO 639
                DTR = (<COIL_EDBZ> - <Xfi.Tinlet>) / <HWDESDTZ>                 CoilsO 640
                DTR = MIN(1.5, MAX(DTR, 0.0) )                                  CoilsO 641
c              cfm ratio - interpolate to zero below ratio of 0.3               CoilsO 642
                CFMR  = <COIL_CFMZ> / (<zn;HW_DES_CFM>*<COIL_CYCLEZ>)           CoilsO 643
                CFMRR = 1.0                                                     CoilsO 644
                IF (CFMR .LT. CFMRMIN)  THEN                                    CoilsO 645
                  CFMRR = CFMR / CFMRMIN                                        CoilsO 646
                  CFMR  = CFMRMIN                                               CoilsO 647
                ENDIF                                                           CoilsO 648
c              capacity ratio - do not let coil operate at .gt. 100%            CoilsO 649
                CAPR = <COIL_QZ> / (<HEATCAPZ>                                  CoilsO 650
     &                              * CFMRR * <COIL_CYCLEZ>                     CoilsO 651
     &                              * Curve(ZP2,<HW-CAP-FCFM>,CFMR,CFMR)        CoilsO 652
     &                              * Curve(ZP2,<HW-CAP-FDT>,DTR,DTR))          CoilsO 653
                CAPR = MIN(1.0, CAPR)                                           CoilsO 654
c              interpolate if capacity corresponds to a GPM .lt. 30%            CoilsO 655
                IF (CAPR .LT. <HWGPMMINCAP>)  THEN                              CoilsO 656
                  GPMR = 0.3 * CAPR/<HWGPMMINCAP>                               CoilsO 657
                ELSE                                                            CoilsO 658
                  CALL CurveInvert(ZP2,<HW-CAP-FGPM>,1,GPMR,Y,CAPR,Ierr)        CoilsO 659
                ENDIF                                                           CoilsO 660
c              loop head and flow                                               CoilsO 661
                <fo.Moutlet2> = <HWDESGPMZ>*GPMR*<COIL_CYCLEZ>                  CoilsO 662
              ELSEIF (Icode .EQ. 6  .OR.  Icode .EQ. 7)  THEN                   CoilsO 663
c              flow cycles with fan in unit heater and ventilator               CoilsO 664
                <fo.Moutlet2> = <HWDESGPMZ>*<COIL_CYCLEZ>                       CoilsO 665
              ELSEIF (Icode .EQ. 8)  THEN                                       CoilsO 666
c              floor panel system - set flow to be linear with load             CoilsO 667
                GPMR        = MIN(1., <COIL_QZ> / <HEATCAPZ>)                   CoilsO 668
                <fo.Moutlet2> = <HWDESGPMZ>*GPMR                                CoilsO 669
              ENDIF                                                             CoilsO 670
            ELSE                                                                CoilsO 671
              <fo.Moutlet2> = 0.                                                CoilsO 672
            ENDIF  ! 3-way vs. 2-way valves                                     CoilsO 673
c                                                                               CoilsO 674
            IF (<COIL_QZ> .LT. -1.)  THEN                                       CoilsO 675
              <fo.CtrlMode> = 2                                                 CoilsO 676
c              if loop temperature is reset on coil load                        CoilsO 677
              IF (( <pl:HT-SETPT-CTRL> .EQ. LOAD                                CoilsO 678
     &                .OR.  <lp;HCAP_RATIO> .LT. 1.)                            CoilsO 679
     &                                         .AND. Icode .NE. 8)  THEN        CoilsO 680
c              cfm ratio - interpolate to zero below ratio of 0.3               CoilsO 681
                CFMR  = <COIL_CFMZ> / <zn;HW_DES_CFM>                           CoilsO 682
                CFMRR = 1.0                                                     CoilsO 683
                IF (CFMR .LT. CFMRMIN)  THEN                                    CoilsO 684
                  CFMRR = CFMR / CFMRMIN                                        CoilsO 685
                  CFMR  = CFMRMIN                                               CoilsO 686
                ENDIF                                                           CoilsO 687
c              target hot water gpm ratio                                       CoilsO 688
                IF (<HW-VALVE-TYPEZ> .EQ. 2)  THEN                              CoilsO 689
                  GPMR = <pl:FLOW-RESET>                                        CoilsO 690
                ELSE                                                            CoilsO 691
                  GPMR = 1.0                                                    CoilsO 692
                ENDIF                                                           CoilsO 693
                CAPR = <COIL_QZ> / (<HEATCAPZ>                                  CoilsO 694
     &                             * CFMRR * <COIL_CYCLEZ>                      CoilsO 695
     &                             * Curve(ZP2,<HW-CAP-FCFM>,CFMR,CFMR)         CoilsO 696
     &                             * Curve(ZP2,<HW-CAP-FGPM>,GPMR,GPMR))        CoilsO 697
                CAPR = MIN(1.0, CAPR)                                           CoilsO 698
                CALL CurveInvert(ZP2,<HW-CAP-FDT>, 1,DTR,Y,CAPR, Ierr)          CoilsO 699
                <fi.Treqd> = <HT_COIL_EDB> - DTR*<HWDESDTZ>                     CoilsO 700
              ELSEIF (Icode .EQ. 8)  THEN                                       CoilsO 701
c              floor panel systems cannot have reset                            CoilsO 702
                <fi.Treqd> = <pl:HT-SETPT-T>                                    CoilsO 703
              ENDIF                                                             CoilsO 704
            ENDIF                                                               CoilsO 705
c              outlet temperature and load relative to reference point          CoilsO 706
            <fo.Moutlet> = <fo.Moutlet2> + <fo.Moutlet3>                        CoilsO 707
            IF (<fo.Moutlet> .GT. 0.)  THEN                                     CoilsO 708
              <fo.Toutlet> = Toutlet(<COIL_QZ>)                                 CoilsO 709
              <fo.Qoutlet> = Qoutlet(<fo.Toutlet>)                              CoilsO 710
            ELSE                                                                CoilsO 711
              <fo.Qoutlet> = 0.                                                 CoilsO 712
            ENDIF                                                               CoilsO 713
            <fi.Minlet2>  = <fo.Moutlet2>                                       CoilsO 714
            <fi.Minlet3>  = <fo.Moutlet3>                                       CoilsO 715
            <fi.Minlet>   = <fo.Moutlet>                                        CoilsO 716
            <fi.Qinlet>   = <fo.Qoutlet>                                        CoilsO 717
            <fi.Preqd>    = <Xfo.Preqd>                                         CoilsO 718
     &                    + FluidDP(<zn;HWFluidProp>, <fi.Minlet>)              CoilsO 719
            <fi.RunFrac>  = <fo.RunFrac>                                        CoilsO 720
            <fi.CtrlMode> = <fo.CtrlMode>                                       CoilsO 721
            <fi.Mreqd>    = 0.                                                  CoilsO 722
            IF (<fi.RunFrac> .GT. 0.)                                           CoilsO 723
     &        <fi.Mreqd> = <fi.Minlet2>/<fi.RunFrac>                            CoilsO 724
            <fo.Mreqd> = <fi.Mreqd>                                             CoilsO 725
            CALL CnvgCheck(1, <zn;HWHsty>)                                      CoilsO 726
          ENDIF                                                                 CoilsO 727
          ENDIF    ! zone heating coils                                         CoilsO 728
c                                                                               CoilsO 729
c              Baseboards                                                       CoilsO 730
          IF (<BBRD-LOOPZ> .GT. 0)  THEN                                        CoilsO 731
          IterNode = IterReqdNode(1, <zn;BBRDNodes>)                            CoilsO 732
          IF (IterNode  .OR.  IterReqdHsty(<zn;BBRDHsty>))  THEN                CoilsO 733
            Jpl = <BBRD-LOOPZ>                                                  CoilsO 734
            Kfi = <zn;BBRDInletNode>                                            CoilsO 735
            Xfi = <fi;Xnode>                                                    CoilsO 736
            Kfo = <zn;BBRDOutletNod>                                            CoilsO 737
            Xfo = <fo;Xnode>                                                    CoilsO 738
            <fo.CtrlMode> = INT(<HON>+0.1)                                      CoilsO 739
            IF (<pl.CtrlMode> .EQ. OffMode)  THEN                               CoilsO 740
              <fo.Moutlet3> = 0.                                                CoilsO 741
            ELSEIF (<BBRD-VALVE-TYPEZ> .EQ. 3)  THEN                            CoilsO 742
c              3-way valve                                                      CoilsO 743
              <fo.Moutlet3> = <BBRDDESGPMZ> * <pl.RunFrac>                      CoilsO 744
            ELSEIF (<BBRD_Q> .LT. -1.)  THEN                                    CoilsO 745
c              2-way valve with a load                                          CoilsO 746
c              normalized temperature between EAT and EWT                       CoilsO 747
              DTR = (<BBRD_EDB> - <Xfi.Tinlet>) / <BBRDDESDTZ>                  CoilsO 748
              DTR = MIN(1.5, MAX(DTR, 0.0) )                                    CoilsO 749
c              cfm ratio - assume that airflow is sqrt of load ratio            CoilsO 750
              CFMR = MIN(MAX(<BBRD_Q> / <BASEBOARD-RATING>,                     CoilsO 751
     &                                                   CFMRMIN), 1.0)         CoilsO 752
              CFMR = SQRT(CFMR)                                                 CoilsO 753
c              cfm ratio - interpolate to zero below ratio of 0.3               CoilsO 754
              CFMRR = 1.0                                                       CoilsO 755
              IF (CFMR .LT. CFMRMIN)  THEN                                      CoilsO 756
                CFMRR = CFMR / CFMRMIN                                          CoilsO 757
                CFMR  = CFMRMIN                                                 CoilsO 758
              ENDIF                                                             CoilsO 759
c              capacity ratio - do not let coil operate at .gt. 100%            CoilsO 760
              CAPR = <BBRD_Q> / (<BASEBOARD-RATING> * CFMRR                     CoilsO 761
     &                           * Curve(ZP2,<HW-CAP-FCFM>,CFMR,CFMR)           CoilsO 762
     &                           * Curve(ZP2,<HW-CAP-FDT>,DTR,DTR))             CoilsO 763
              CAPR = MIN(1.0, CAPR)                                             CoilsO 764
c              interpolate if capacity corresponds to a GPM .lt. 30%            CoilsO 765
              IF (CAPR .LT. <HWGPMMINCAP>)  THEN                                CoilsO 766
                GPMR = 0.3 * CAPR/<HWGPMMINCAP>                                 CoilsO 767
              ELSE                                                              CoilsO 768
                CALL CurveInvert(ZP2,<HW-CAP-FGPM>, 1,GPMR,Y,CAPR, Ierr)        CoilsO 769
              ENDIF                                                             CoilsO 770
c              loop head and flow                                               CoilsO 771
              <fo.Moutlet2> = <BBRDDESGPMZ>*GPMR                                CoilsO 772
            ELSE                                                                CoilsO 773
              <fo.Moutlet2> = 0.                                                CoilsO 774
            ENDIF                                                               CoilsO 775
c                                                                               CoilsO 776
            IF (<BBRD_Q> .LT. -1.)  THEN                                        CoilsO 777
              <fo.CtrlMode> = 2                                                 CoilsO 778
c              if loop temperature is reset on coil load                        CoilsO 779
              IF (<pl:HT-SETPT-CTRL> .EQ. LOAD                                  CoilsO 780
     &                            .OR.  <lp;HCAP_RATIO> .LT. 1.)  THEN          CoilsO 781
c              cfm ratio - assume that airflow is sqrt of load ratio            CoilsO 782
                CFMR = MIN(MAX(CFMRMIN,                                         CoilsO 783
     &                               <BBRD_Q>/<BASEBOARD-RATING>), 1.0)         CoilsO 784
                CFMR = SQRT(CFMR)                                               CoilsO 785
c              cfm ratio - interpolate to zero below ratio of 0.3               CoilsO 786
                CFMRR = 1.0                                                     CoilsO 787
                IF (CFMR .LT. CFMRMIN)  THEN                                    CoilsO 788
                  CFMRR = CFMR / CFMRMIN                                        CoilsO 789
                  CFMR  = CFMRMIN                                               CoilsO 790
                ENDIF                                                           CoilsO 791
c              target hot water gpm ratio                                       CoilsO 792
                IF (<HW-VALVE-TYPEZ> .EQ. 2)  THEN                              CoilsO 793
                  GPMR = <pl:FLOW-RESET>                                        CoilsO 794
                ELSE                                                            CoilsO 795
                  GPMR = 1.0                                                    CoilsO 796
                ENDIF                                                           CoilsO 797
c              capacity ratio                                                   CoilsO 798
                CAPR = <BBRD_Q> / (<BASEBOARD-RATING> * CFMRR                   CoilsO 799
     &                             * Curve(ZP2,<HW-CAP-FCFM>,CFMR,CFMR)         CoilsO 800
     &                             * Curve(ZP2,<HW-CAP-FGPM>,GPMR,GPMR))        CoilsO 801
                CAPR = MIN(1.0, CAPR)                                           CoilsO 802
                CALL CurveInvert(ZP2,<HW-CAP-FDT>, 1,DTR,Y,CAPR, Ierr)          CoilsO 803
                <fi.Treqd> = <BBRD_EDB> - DTR*<BBRDDESDTZ>                      CoilsO 804
              ENDIF                                                             CoilsO 805
              <fo.RunFrac> = 1.0                                                CoilsO 806
            ELSE                                                                CoilsO 807
              <fo.RunFrac> = 0.0                                                CoilsO 808
            ENDIF                                                               CoilsO 809
c              outlet temperature and load relative to reference point          CoilsO 810
            <fo.Moutlet> = <fo.Moutlet2> + <fo.Moutlet3>                        CoilsO 811
            IF (<fo.Moutlet> .GT. 0.)  THEN                                     CoilsO 812
              <fo.Toutlet> = Toutlet(<BBRD_Q>)                                  CoilsO 813
              <fo.Qoutlet> = Qoutlet(<fo.Toutlet>)                              CoilsO 814
            ELSE                                                                CoilsO 815
              <fo.Qoutlet> = 0.                                                 CoilsO 816
            ENDIF                                                               CoilsO 817
            <fi.Minlet2>  = <fo.Moutlet2>                                       CoilsO 818
            <fi.Minlet3>  = <fo.Moutlet3>                                       CoilsO 819
            <fi.Minlet>   = <fo.Moutlet>                                        CoilsO 820
            <fi.Qinlet>   = <fo.Qoutlet>                                        CoilsO 821
            <fi.Preqd>    = <Xfo.Preqd>                                         CoilsO 822
     &                    + FluidDP(<zn;BBRDFluidProp>, <fi.Minlet>)            CoilsO 823
            <fi.RunFrac>  = <fo.RunFrac>                                        CoilsO 824
            <fi.CtrlMode> = <fo.CtrlMode>                                       CoilsO 825
            <fi.Mreqd>    = 0.                                                  CoilsO 826
            IF (<fi.RunFrac> .GT. 0.)                                           CoilsO 827
     &        <fi.Mreqd> = <fi.Minlet2>/<fi.RunFrac>                            CoilsO 828
            <fo.Mreqd> = <fi.Mreqd>                                             CoilsO 829
            CALL CnvgCheck(1, <zn;BBRDHsty>)                                    CoilsO 830
          ENDIF                                                                 CoilsO 831
          ENDIF  ! baseboards                                                   CoilsO 832
c                                                                               CoilsO 833
c              Chilled water zone coil                                          CoilsO 834
          IF (<CHW-LOOPZ> .GT. 0)  THEN                                         CoilsO 835
          IterNode = IterReqdNode(1, <zn;CHWNodes>)                             CoilsO 836
          IF (IterNode  .OR.  IterReqdHsty(<zn;CHWHsty>))  THEN                 CoilsO 837
            Jpl = <CHW-LOOPZ>                                                   CoilsO 838
            Kfi = <zn;CHWInletNode>                                             CoilsO 839
            Xfi = <fi;Xnode>                                                    CoilsO 840
            Kfo = <zn;CHWOutletNode>                                            CoilsO 841
            Xfo = <fo;Xnode>                                                    CoilsO 842
c              Fraction of hour demander runs and flag for standby status       CoilsO 843
            <fo.RunFrac>  = <COIL_CYCLEZ>                                       CoilsO 844
            <fo.CtrlMode> = LoopStandbyC                                        CoilsO 845
            IF (<pl.CtrlMode> .EQ. OffMode)  THEN                               CoilsO 846
              <fo.Moutlet2> = 0.                                                CoilsO 847
              <fo.Moutlet3> = 0.                                                CoilsO 848
            ELSEIF (<CHW-VALVE-TYPEZ> .EQ. 3)  THEN                             CoilsO 849
c              3-way valve                                                      CoilsO 850
              IF (<COIL_QZ> .GE. 1.  .OR.  <pl:TYPE> .NE. Pipe2)  THEN          CoilsO 851
                <fo.Moutlet3> = <CHWDESGPMZ> * <pl.RunFrac>                     CoilsO 852
              ELSE                                                              CoilsO 853
c                    2-pipe heating flow will be accounted for in HW coil       CoilsO 854
                <fo.Moutlet3> = 0.                                              CoilsO 855
              ENDIF                                                             CoilsO 856
            ELSEIF (<COIL_QZ> .GT. 1.)  THEN                                    CoilsO 857
c              2-way valve with a load                                          CoilsO 858
c              coil entering wetbulb temp                                       CoilsO 859
              EWB = MIN(73., MAX(<COIL_EWBZ>, 59.))                             CoilsO 860
c              cfm ratio - interpolate to zero below ratio of 0.3               CoilsO 861
              CFMR  = <COIL_CFMZ> / (<zn;CHW_DES_CFM> * <COIL_CYCLEZ>)          CoilsO 862
              CFMRR = 1.0                                                       CoilsO 863
              IF (CFMR .LT. CFMRMIN)  THEN                                      CoilsO 864
                CFMRR = CFMR / CFMRMIN                                          CoilsO 865
                CFMR  = CFMRMIN                                                 CoilsO 866
              ENDIF                                                             CoilsO 867
c              capacity ratio - do not let coil operate at .gt. 100%            CoilsO 868
              CAPR = <COIL_QZ> / (<CHWCAP6544Z>                                 CoilsO 869
     &               * CFMRR * <COIL_CYCLEZ>                                    CoilsO 870
     &               * Curve(ZP2,<CHW-CAP-FCFM>,CFMR,CFMR)                      CoilsO 871
     &               * Curve(ZP2,<CHW-CAP-FEWBEWT>,EWB,<Xfi.Tinlet>) )          CoilsO 872
              CAPR = MIN(1.0, CAPR)                                             CoilsO 873
c              interpolate if capacity corresponds to a GPM .lt. 30%            CoilsO 874
              IF (CAPR .LT. <CHWGPMMINCAP>)  THEN                               CoilsO 875
                GPMR = 0.3 * CAPR/<CHWGPMMINCAP>                                CoilsO 876
              ELSE                                                              CoilsO 877
                CALL CurveInvert(ZP2,<CHW-CAP-FGPM>, 1,GPMR,Y,CAPR,Ierr)        CoilsO 878
              ENDIF                                                             CoilsO 879
c              loop head and flow                                               CoilsO 880
              <fo.Moutlet2> = <CHWDESGPMZ>*GPMR*<COIL_CYCLEZ>                   CoilsO 881
            ELSE                                                                CoilsO 882
              <fo.Moutlet2> = 0.                                                CoilsO 883
            ENDIF                                                               CoilsO 884
c                                                                               CoilsO 885
            IF (<COIL_QZ> .GT. 1.)  THEN                                        CoilsO 886
              <fo.CtrlMode> = 2                                                 CoilsO 887
c              if loop temperature is reset on coil load                        CoilsO 888
              IF (<pl:CL-SETPT-CTRL> .EQ. LOAD                                  CoilsO 889
     &                            .OR.  <lp;CCAP_RATIO> .LT. 1.)  THEN          CoilsO 890
c              cfm ratio - interpolate to zero below ratio of 0.3               CoilsO 891
                CFMR  = <COIL_CFMZ> / <zn;CHW_DES_CFM>                          CoilsO 892
                CFMRR = 1.0                                                     CoilsO 893
                IF (CFMR .LT. CFMRMIN)  THEN                                    CoilsO 894
                  CFMRR = CFMR / CFMRMIN                                        CoilsO 895
                  CFMR  = CFMRMIN                                               CoilsO 896
                ENDIF                                                           CoilsO 897
c              target chilled water gpm ratio                                   CoilsO 898
                IF (<CHW-VALVE-TYPEZ> .EQ. 2)  THEN                             CoilsO 899
                  GPMR = <pl:FLOW-RESET>                                        CoilsO 900
                ELSE                                                            CoilsO 901
                  GPMR = 1.0                                                    CoilsO 902
                ENDIF                                                           CoilsO 903
c              capacity ratio - do not let coil operate at .gt. 100%            CoilsO 904
                CAPR = <COIL_QZ> / (<CHWCAP6544Z>                               CoilsO 905
     &                            * CFMRR * <COIL_CYCLEZ>                       CoilsO 906
     &                            * Curve(ZP2,<CHW-CAP-FCFM>,CFMR,CFMR)         CoilsO 907
     &                            * Curve(ZP2,<CHW-CAP-FGPM>,GPMR,GPMR))        CoilsO 908
                CAPR = MIN(1.0, CAPR)                                           CoilsO 909
c              solve for capacity vs. EWB and CHWS                              CoilsO 910
                EWB  = MIN(73., MAX(<COIL_EWBZ>, 59.))                          CoilsO 911
                CALL CurveInvert(ZP2,<CHW-CAP-FEWBEWT>, 2,EWB,EWT,CAPR,         CoilsO 912
     &                                                             Ierr)        CoilsO 913
                <fi.Treqd> = EWT                                                CoilsO 914
              ENDIF                                                             CoilsO 915
            ENDIF                                                               CoilsO 916
c              outlet temperature and load relative to reference point          CoilsO 917
            <fo.Moutlet> = <fo.Moutlet2> + <fo.Moutlet3>                        CoilsO 918
            IF (<fo.Moutlet> .GT. 0.)  THEN                                     CoilsO 919
              <fo.Toutlet> = Toutlet(<COIL_QZ>)                                 CoilsO 920
              <fo.Qoutlet> = Qoutlet(<fo.Toutlet>)                              CoilsO 921
            ELSE                                                                CoilsO 922
              <fo.Qoutlet> = 0.                                                 CoilsO 923
            ENDIF                                                               CoilsO 924
            <fi.Minlet2>  = <fo.Moutlet2>                                       CoilsO 925
            <fi.Minlet3>  = <fo.Moutlet3>                                       CoilsO 926
            <fi.Minlet>   = <fo.Moutlet>                                        CoilsO 927
            <fi.Qinlet>   = <fo.Qoutlet>                                        CoilsO 928
            <fi.Preqd>    = <Xfo.Preqd>                                         CoilsO 929
     &                    + FluidDP(<zn;CHWFluidProp>, <fi.Minlet>)             CoilsO 930
            <fi.RunFrac>  = <fo.RunFrac>                                        CoilsO 931
            <fi.CtrlMode> = <fo.CtrlMode>                                       CoilsO 932
            <fi.Mreqd>    = 0.                                                  CoilsO 933
            IF (<fi.RunFrac> .GT. 0.)                                           CoilsO 934
     &        <fi.Mreqd> = <fi.Minlet2>/<fi.RunFrac>                            CoilsO 935
            <fo.Mreqd> = <fi.Mreqd>                                             CoilsO 936
            CALL CnvgCheck(1, <zn;CHWHsty>)                                     CoilsO 937
          ENDIF                                                                 CoilsO 938
          ENDIF  ! chw coil                                                     CoilsO 939
c                                                                               CoilsO 940
c              Zonal water-cooled DX or WLHP                                    CoilsO 941
          IF (<CW-LOOPZ> .GT. 0)  THEN                                          CoilsO 942
          IterNode = IterReqdNode(1, <zn;CWNodes>)                              CoilsO 943
          IF (IterNode  .OR.  IterReqdHsty(<zn;CWHsty>))  THEN                  CoilsO 944
            Jpl = <CW-LOOPZ>                                                    CoilsO 945
            Kfi = <zn;CWInletNode>                                              CoilsO 946
            Xfi = <fi;Xnode>                                                    CoilsO 947
            Kfo = <zn;CWOutletNode>                                             CoilsO 948
            Xfo = <fo;Xnode>                                                    CoilsO 949
            <fo.CtrlMode> = <IHRONS>                                            CoilsO 950
            IF (<CW_COIL_QZ> .NE. 0.)  <fo.CtrlMode> = 2                        CoilsO 951
            IF (<pl.CtrlMode> .EQ. OffMode)  THEN                               CoilsO 952
              <fo.Moutlet2> = 0.                                                CoilsO 953
              <fo.Moutlet3> = 0.                                                CoilsO 954
            ELSEIF (<CW-VALVEZ> .EQ. No)  THEN                                  CoilsO 955
c              unit has no condenser valve                                      CoilsO 956
              CWgpm = <CWDESGPMZ>                                               CoilsO 957
              <fo.Moutlet3> = CWgpm                                             CoilsO 958
            ELSE                                                                CoilsO 959
c              water flows only when unit is cycled on                          CoilsO 960
              CWgpm = <CW_COIL_GPMZ>                                            CoilsO 961
              <fo.Moutlet2> = CWgpm                                             CoilsO 962
            ENDIF                                                               CoilsO 963
c              estimate the fraction of the hour the loop runs                  CoilsO 964
            <fo.RunFrac> = MIN(1., <CW_COIL_GPMZ> / <CWDESGPMZ>)                CoilsO 965
c                                                                               CoilsO 966
c              outlet temperature and load relative to reference point          CoilsO 967
            <fo.Moutlet> = <fo.Moutlet2> + <fo.Moutlet3>                        CoilsO 968
            IF (<fo.Moutlet> .GT. 0.)  THEN                                     CoilsO 969
              <fo.Toutlet> = Toutlet(<CW_COIL_QZ>)                              CoilsO 970
              <fo.Qoutlet> = Qoutlet(<fo.Toutlet>)                              CoilsO 971
            ELSE                                                                CoilsO 972
              <fo.Qoutlet> = 0.                                                 CoilsO 973
            ENDIF                                                               CoilsO 974
            <fi.Minlet2>  = <fo.Moutlet2>                                       CoilsO 975
            <fi.Minlet3>  = <fo.Moutlet3>                                       CoilsO 976
            <fi.Minlet>   = <fo.Moutlet>                                        CoilsO 977
            <fi.Qinlet>   = <fo.Qoutlet>                                        CoilsO 978
            <fi.Preqd>    = <Xfo.Preqd>                                         CoilsO 979
     &                    + FluidDP(<zn;CWFluidProp>, <fi.Minlet>)              CoilsO 980
            <fi.RunFrac>  = <fo.RunFrac>                                        CoilsO 981
            <fi.CtrlMode> = <fo.CtrlMode>                                       CoilsO 982
            <fi.Mreqd>    = 0.                                                  CoilsO 983
            IF (<fi.RunFrac> .GT. 0.)                                           CoilsO 984
     &        <fi.Mreqd> = <fi.Minlet2>/<fi.RunFrac>                            CoilsO 985
            <fo.Mreqd> = <fi.Mreqd>                                             CoilsO 986
            CALL CnvgCheck(1, <zn;CWHsty>)                                      CoilsO 987
          ENDIF                                                                 CoilsO 988
          ENDIF  ! cw coil                                                      CoilsO 989
c                                                                               CoilsO 990
c              zonal water-side economizer                                      CoilsO 991
          IF (<WSE-LOOPZ> .GT. 0)  THEN                                         CoilsO 992
          IterNode = IterReqdNode(1, <zn;WSENodes>)                             CoilsO 993
          IF (IterNode  .OR.  IterReqdHsty(<zn;WSEHsty>))  THEN                 CoilsO 994
            Jpl = <WSE-LOOPZ>                                                   CoilsO 995
            Kfi = <zn;WSEInletNode>                                             CoilsO 996
            Xfi = <fi;Xnode>                                                    CoilsO 997
            Kfo = <zn;WSEOutletNode>                                            CoilsO 998
            Xfo = <fo;Xnode>                                                    CoilsO 999
            <fo.CtrlMode> = <IHRONS>                                            CoilsO1000
            IF (<WSE_COIL_QZ> .NE. 0.)  <fo.CtrlMode> = 2                       CoilsO1001
            IF (<pl.CtrlMode> .EQ. OffMode)  THEN                               CoilsO1002
              <fo.Moutlet2> = 0.                                                CoilsO1003
              <fo.Moutlet3> = 0.                                                CoilsO1004
            ELSEIF (<WSE-VALVE-TYPEZ> .EQ. 3)  THEN                             CoilsO1005
c              3-way valve                                                      CoilsO1006
              GPMR = 1.0 * <pl.RunFrac>                                         CoilsO1007
c              wse may be on same loop as cw, or different                      CoilsO1008
              IF (Jpl .NE. <CW-LOOPZ> .OR. <CW_COIL_GPMZ> .EQ. 0.)  THEN        CoilsO1009
                <fo.Moutlet3> = <WSEDESGPMZ>*GPMR                               CoilsO1010
                <fo.RunFrac> = 1.0                                              CoilsO1011
              ELSE                                                              CoilsO1012
c              when condenser is on, flow is in series                          CoilsO1013
                <fo.Moutlet3> = MAX(CWgpm, <WSEDESGPMS>*GPMR)                   CoilsO1014
                <fi.Preqd>    = <Xfo.Preqd>                                     CoilsO1015
     &                        + FluidDP(<zn;CWFluidProp>, <fo.Moutlet3>)        CoilsO1016
     &                        + FluidDP(<zn;WSEFluidProp>,<fo.Moutlet3>)        CoilsO1017
                <fo.RunFrac> = 1.0                                              CoilsO1018
              ENDIF                                                             CoilsO1019
            ELSE                                                                CoilsO1020
c              2-way valve                                                      CoilsO1021
              GPMR = <WSE_COIL_GPMZ> / <WSEDESGPMZ>                             CoilsO1022
c              wse may be on same loop as cw, or different                      CoilsO1023
              IF (Jpl .NE. <CW-LOOPZ> .OR. <CW_COIL_GPMZ> .EQ. 0.)  THEN        CoilsO1024
                <fo.Moutlet2> = <WSEDESGPMZ>*GPMR                               CoilsO1025
                <fi.Preqd>    = <Xfo.Preqd>+<WSE-COIL-HEAD>*GPMR**1.87          CoilsO1026
     &                        + FluidDP(<zn;WSEFluidProp>,<fo.Moutlet2>)        CoilsO1027
                <fo.RunFrac> = 1.0                                              CoilsO1028
              ELSE                                                              CoilsO1029
c              when condenser is on, flow is in series                          CoilsO1030
                <fo.Moutlet2> = MAX(CWgpm, <WSEDESGPMS>*GPMR)                   CoilsO1031
                <fi.Preqd>    = <Xfo.Preqd>                                     CoilsO1032
     &                        + FluidDP(<zn;CWFluidProp>, <fo.Moutlet2>)        CoilsO1033
     &                        + FluidDP(<zn;WSEFluidProp>,<fo.Moutlet2>)        CoilsO1034
                <fo.RunFrac> = 1.0                                              CoilsO1035
              ENDIF                                                             CoilsO1036
            ENDIF                                                               CoilsO1037
c                                                                               CoilsO1038
            IF (Jpl .NE. <CW-LOOPZ>)  THEN                                      CoilsO1039
c              outlet temperature and load relative to reference point          CoilsO1040
              <fo.Moutlet> = <fo.Moutlet2> + <fo.Moutlet3>                      CoilsO1041
              IF (<fo.Moutlet> .GT. 0.)  THEN                                   CoilsO1042
                <fo.Toutlet> = Toutlet(<WSE_COIL_QZ>)                           CoilsO1043
                <fo.Qoutlet> = Qoutlet(<fo.Toutlet>)                            CoilsO1044
              ELSE                                                              CoilsO1045
                <fo.Qoutlet> = 0.                                               CoilsO1046
              ENDIF                                                             CoilsO1047
            ELSE                                                                CoilsO1048
c              outlet temperature and load relative to reference point          CoilsO1049
              IF (<fo.Moutlet> .GT. 0.)  THEN                                   CoilsO1050
                <fo.Toutlet> = Toutlet(<CW_COIL_QZ>+<WSE_COIL_Q>)               CoilsO1051
                <fo.Qoutlet> = Qoutlet(<fo.Toutlet>)                            CoilsO1052
              ELSE                                                              CoilsO1053
                <fo.Qoutlet> = 0.                                               CoilsO1054
              ENDIF                                                             CoilsO1055
            ENDIF                                                               CoilsO1056
            <fi.Minlet2>  = <fo.Moutlet2>                                       CoilsO1057
            <fi.Minlet3>  = <fo.Moutlet3>                                       CoilsO1058
            <fi.Minlet>   = <fo.Moutlet>                                        CoilsO1059
            <fi.Qinlet>   = <fo.Qoutlet>                                        CoilsO1060
            <fi.RunFrac>  = <fo.RunFrac>                                        CoilsO1061
            <fi.CtrlMode> = <fo.CtrlMode>                                       CoilsO1062
            <fi.Mreqd>    = 0.                                                  CoilsO1063
            IF (<fi.RunFrac> .GT. 0.)                                           CoilsO1064
     &        <fi.Mreqd> = <fi.Minlet2>/<fi.RunFrac>                            CoilsO1065
            <fo.Mreqd> = <fi.Mreqd>                                             CoilsO1066
            CALL CnvgCheck(1, <zn;WSEHsty>)                                     CoilsO1067
          ENDIF                                                                 CoilsO1068
          ENDIF  ! water-side econo                                             CoilsO1069
c              end of conditioned zone loop                                     CoilsO1070
        ENDDO                                                                   CoilsO1071
c              end of systems loop                                              CoilsO1072
      ENDDO                                                                     CoilsO1073
c                                                                               CoilsO1074
c                                                                               CoilsO1075
c ============ REPORT CREATION ================================================ CoilsO1076
      CASE (50)                                                                 CoilsO1077
c                                                                               CoilsO1078
c                                                                               CoilsO1079
c ============ REPORTS - VERIFICATION DATA ==================================== CoilsO1080
      CASE (54)                                                                 CoilsO1081
c                                                                               CoilsO1082
c                                                                               CoilsO1083
c ============ HOURLY REPORTS - HOURLY DATA =================================== CoilsO1084
      CASE (62)                                                                 CoilsO1085
c                                                                               CoilsO1086
c                                                                               CoilsO1087
c ============ DESIGN CALCULATIONS ============================================ CoilsO1088
      CASE (111)                                                                CoilsO1089
c                                                                               CoilsO1090
c              Initialize the miscellaneous plant design loads (used by         CoilsO1091
c              2-pipe heating and WLHP heating)                                 CoilsO1092
      Jpl = Ipl                                                                 CoilsO1093
      DO WHILE (Jpl .GT. 0)                                                     CoilsO1094
        <pl.COIL_HEAT> = 0.                                                     CoilsO1095
        Jpl = <pl;Next>                                                         CoilsO1096
      ENDDO                                                                     CoilsO1097
c                                                                               CoilsO1098
c              loop thru all systems and calculate the flows                    CoilsO1099
      DO  NS=1,NSYS                                                             CoilsO1100
        NSP   = IS + (NS-1)*NSS                                                 CoilsO1101
        Icode = <SYSTEM-TYPE>                                                   CoilsO1102
c             coil capacity ratio corresponding to minimum allowed flow         CoilsO1103
        <HWGPMMINCAP> = Curve(NSP,<HW-CAP-FGPM> ,.3,.3)                         CoilsO1104
c              no minimum capacity for unit heater as flow constant             CoilsO1105
        IF (Icode .EQ. 7)  <HWGPMMINCAP> = 0.                                   CoilsO1106
        <CHWGPMMINCAP> = Curve(NSP,<CHW-CAP-FGPM>,.3,.3)                        CoilsO1107
c                                                                               CoilsO1108
c              Design flows at main air handler level                           CoilsO1109
c              central heating coil                                             CoilsO1110
        IF (<HEATING-CAPACITY> .LT. -1.)  THEN                                  CoilsO1111
          IF (<HEAT-SOURCE> .LT. 0)  THEN                                       CoilsO1112
c              flag to indicate this system attached to a loop                  CoilsO1113
            <SYS_LOOP_FLAG> = 1                                                 CoilsO1114
c              pointer to hw loop                                               CoilsO1115
            Jpl = <HW-LOOP>                                                     CoilsO1116
            IF (<pl:TYPE> .NE. Pipe2)  THEN                                     CoilsO1117
              <HWDESGPMS>   = <HEATING-CAPACITY>                                CoilsO1118
     &                                  / (<pl.Btuh/GPM-F>*<HW-COIL-DT>)        CoilsO1119
              Kfi           = <sy;HWInletNode>                                  CoilsO1120
              Xfi           = <fi;Xnode>                                        CoilsO1121
              Kfo           = <sy;HWOutletNode>                                 CoilsO1122
              Xfo           = <fo;Xnode>                                        CoilsO1123
              <fi.Minlet>   = <HWDESGPMS>                                       CoilsO1124
              <fo.Moutlet>  = <HWDESGPMS>                                       CoilsO1125
              <fo.Moutlet2> = <fo.Moutlet>                                      CoilsO1126
              <fi.Mreqd>    = <fo.Moutlet>                                      CoilsO1127
              <fo.Mreqd>    = <fo.Moutlet>                                      CoilsO1128
              <fo.Toutlet>  = <Xfi.Tinlet>  + <HW-COIL-DT>                      CoilsO1129
c                 head at actual conditions                                     CoilsO1130
              Head = FluidDP_Design(<sy;HWFluidProp>, <HWDESGPMS>,              CoilsO1131
     &                                                <HW-COIL-HEAD>)           CoilsO1132
              <fi.Preqd> = <Xfo.Preqd> + Head                                   CoilsO1133
            ELSE                                                                CoilsO1134
c              2-pipe loops size circuits on the basis of cooling load          CoilsO1135
c              only; heating is passed to plant for boiler sizing               CoilsO1136
              <pl;MiscHeat> = <pl;MiscHeat> + <HEATING-CAPACITY>                CoilsO1137
            ENDIF                                                               CoilsO1138
            IF(IREPRT(3,34).NE.0) WRITE(IOUTPT,9000)                            CoilsO1139
     &        (<SYSTEM-NAME>,II=1,8),<HEATING-CAPACITY>,<HWDESGPMS>,            CoilsO1140
     &         <HWDESDTS>,Head                                                  CoilsO1141
          ELSE                                                                  CoilsO1142
c              set maximum kW for electric resistance                           CoilsO1143
            IF (<HEAT-SOURCE> .EQ. 1)  THEN                                     CoilsO1144
              <MAX_HEAT_KW> = -<HEATING-CAPACITY> * KWBTU                       CoilsO1145
c              set maximum kW for heat pump supplemental                        CoilsO1146
            ELSEIF (<HEAT-SOURCE> .EQ. 4  .AND.  <SUPP-SOURCE> .EQ. 1)          CoilsO1147
     &                                                              THEN        CoilsO1148
              <MAX_SUPP_KW> = -<SUPP-HEAT-CAP> * KWBTU                          CoilsO1149
            ENDIF                                                               CoilsO1150
          ENDIF                                                                 CoilsO1151
        ELSE                                                                    CoilsO1152
          Call DetachNode(<sy;HWInletNode>)                                     CoilsO1153
          Call DetachNode(<sy;HWOutletNode>)                                    CoilsO1154
          Call DetachHistory(<sy;HWHsty>)                                       CoilsO1155
          <HW-LOOP> = 0                                                         CoilsO1156
        ENDIF                                                                   CoilsO1157
c              preheat coil                                                     CoilsO1158
        IF (<PREHEAT-CAPACITY> .LT. -1.)  THEN                                  CoilsO1159
          IF (<PREHEAT-SOURCE> .LT. 0)  THEN                                    CoilsO1160
c              flag to indicate this system attached to a loop                  CoilsO1161
            <SYS_LOOP_FLAG> = 1                                                 CoilsO1162
            Jpl = <PHW-LOOP>                                                    CoilsO1163
            IF (<pl:TYPE> .NE. Pipe2)  THEN                                     CoilsO1164
              <PHWDESGPMS>  = <PREHEAT-CAPACITY>                                CoilsO1165
     1                               / (<pl.Btuh/GPM-F>*<PHW-COIL-DT>)          CoilsO1166
              Kfi           = <sy;PHWInletNode>                                 CoilsO1167
              Xfi           = <fi;Xnode>                                        CoilsO1168
              Kfo           = <sy;PHWOutletNode>                                CoilsO1169
              Xfo           = <fo;Xnode>                                        CoilsO1170
              <fi.Minlet>   = <PHWDESGPMS>                                      CoilsO1171
              <fo.Moutlet>  = <PHWDESGPMS>                                      CoilsO1172
              <fo.Moutlet2> = <fo.Moutlet>                                      CoilsO1173
              <fi.Mreqd>    = <fo.Moutlet>                                      CoilsO1174
              <fo.Mreqd>    = <fo.Moutlet>                                      CoilsO1175
              <fo.Toutlet>  = <Xfi.Tinlet>  + <PHW-COIL-DT>                     CoilsO1176
              Head = FluidDP_Design(<sy;PHWFluidProp>,<PHWDESGPMS>,             CoilsO1177
     &                                                <PHW-COIL-HEAD>)          CoilsO1178
              <fi.Preqd> = <Xfo.Preqd> + Head                                   CoilsO1179
            ELSE                                                                CoilsO1180
c              2-pipe                                                           CoilsO1181
              <pl;MiscHeat> = <pl;MiscHeat> + <PREHEAT-CAPACITY>                CoilsO1182
            ENDIF                                                               CoilsO1183
            IF(IREPRT(3,34).NE.0) WRITE(IOUTPT,9001)                            CoilsO1184
     &        (<SYSTEM-NAME>,II=1,8),<PREHEAT-CAPACITY>,<PHWDESGPMS>,           CoilsO1185
     &         <PHWDESDTS>,Head                                                 CoilsO1186
          ELSE                                                                  CoilsO1187
c              electric preheat energy                                          CoilsO1188
            IF (<PREHEAT-SOURCE> .EQ. 1)                                        CoilsO1189
     &        <MAX_PREHEAT_KW> = -<PREHEAT-CAPACITY> * KWBTU                    CoilsO1190
          ENDIF                                                                 CoilsO1191
        ELSE                                                                    CoilsO1192
          Call DetachNode(<sy;PHWInletNode>)                                    CoilsO1193
          Call DetachNode(<sy;PHWOutletNode>)                                   CoilsO1194
          Call DetachHistory(<sy;PHWHsty>)                                      CoilsO1195
          <PHW-LOOP> = 0                                                        CoilsO1196
        ENDIF                                                                   CoilsO1197
c              central desiccant regeneration coil                              CoilsO1198
        IF ((Icode .EQ. 25  .OR.  <DESICCANT> .GT. 0)  .AND.                    CoilsO1199
     &       <HEATING-CAPACITY> .LT. -1.  .AND.                                 CoilsO1200
     &                                  <DESC-HEAT-SOURCE> .LT. 0)  THEN        CoilsO1201
c              flag to indicate this system attached to a loop                  CoilsO1202
          <SYS_LOOP_FLAG> = 1                                                   CoilsO1203
c              pointer to desiccant loop                                        CoilsO1204
          Jpl = <DESC-LOOP>                                                     CoilsO1205
          IF (<pl:TYPE> .NE. Pipe2)  THEN                                       CoilsO1206
            <DESCDESGPMS> = <HEATING-CAPACITY>                                  CoilsO1207
     1                               / (<pl.Btuh/GPM-F>*<DESC-COIL-DT>)         CoilsO1208
            Kfi           = <sy;DescInletNode>                                  CoilsO1209
            Xfi           = <fi;Xnode>                                          CoilsO1210
            Kfo           = <sy;DescOutltNode>                                  CoilsO1211
            Xfo           = <fo;Xnode>                                          CoilsO1212
            <fi.Minlet>   = <DESCDESGPMS>                                       CoilsO1213
            <fo.Moutlet>  = <DESCDESGPMS>                                       CoilsO1214
            <fo.Moutlet2> = <fo.Moutlet>                                        CoilsO1215
            <fi.Mreqd>    = <fo.Moutlet>                                        CoilsO1216
            <fo.Mreqd>    = <fo.Moutlet>                                        CoilsO1217
            <fo.Toutlet>  = <Xfi.Tinlet>  + <DESC-COIL-DT>                      CoilsO1218
            Head = FluidDP_Design(<sy;DescFluidProp>,<DESCDESGPMS>,             CoilsO1219
     &                                               <DESC-COIL-HEAD>)          CoilsO1220
            <fi.Preqd> = <Xfo.Preqd> + Head                                     CoilsO1221
          ELSE                                                                  CoilsO1222
c              2-pipe                                                           CoilsO1223
            <pl;MiscHeat> = <pl;MiscHeat> + <HEATING-CAPACITY>                  CoilsO1224
          ENDIF                                                                 CoilsO1225
          IF(IREPRT(3,34).NE.0) WRITE(IOUTPT,9000)                              CoilsO1226
     &      (<SYSTEM-NAME>,II=1,8),<HEATING-CAPACITY>,<DESCDESGPMS>,            CoilsO1227
     &       <DESCDESDTS>,Head                                                  CoilsO1228
        ELSE                                                                    CoilsO1229
c              zero out loop pointer if not used                                CoilsO1230
          Call DetachNode(<sy;DescInletNode>)                                   CoilsO1231
          Call DetachNode(<sy;DescOutltNode>)                                   CoilsO1232
          Call DetachHistory(<sy;DescHsty>)                                     CoilsO1233
          <DESC-LOOP> = 0                                                       CoilsO1234
        ENDIF                                                                   CoilsO1235
c             central cooling coil (CHW)                                        CoilsO1236
        IF (<COOLING-CAPACITY> .GT. 1.  .AND.  <CHW-LOOP> .GT. 0)  THEN         CoilsO1237
c              flag to indicate this system attached to a loop                  CoilsO1238
          <SYS_LOOP_FLAG> = 1                                                   CoilsO1239
          Jpl = <CHW-LOOP>                                                      CoilsO1240
          <CHWDESGPMS>  = <COOLING-CAPACITY>                                    CoilsO1241
     1                               / (<pl.Btuh/GPM-F>*<CHW-COIL-DT>)          CoilsO1242
          Kfi           = <sy;CHWInletNode>                                     CoilsO1243
          Xfi           = <fi;Xnode>                                            CoilsO1244
          Kfo           = <sy;CHWOutletNode>                                    CoilsO1245
          Xfo           = <fo;Xnode>                                            CoilsO1246
          <fi.Minlet>   = <CHWDESGPMS>                                          CoilsO1247
          <fo.Moutlet>  = <CHWDESGPMS>                                          CoilsO1248
          <fo.Moutlet2> = <fo.Moutlet>                                          CoilsO1249
          <fi.Mreqd>    = <fo.Moutlet>                                          CoilsO1250
          <fo.Mreqd>    = <fo.Moutlet>                                          CoilsO1251
          <fo.Toutlet>  = <Xfi.Tinlet> + <CHW-COIL-DT>                          CoilsO1252
          Head = FluidDP_Design(<sy;CHWFluidProp>, <CHWDESGPMS>,                CoilsO1253
     &                                             <CHW-COIL-HEAD>)             CoilsO1254
          <fi.Preqd>    = <Xfo.Preqd> + Head                                    CoilsO1255
          IF(IREPRT(3,34).NE.0) WRITE(IOUTPT,9002)                              CoilsO1256
     &      (<SYSTEM-NAME>,II=1,8),<COOLING-CAPACITY>,<CHWDESGPMS>,             CoilsO1257
     &       <CHWCAP6544S>,Head                                                 CoilsO1258
        ELSE                                                                    CoilsO1259
          Call DetachNode(<sy;CHWInletNode>)                                    CoilsO1260
          Call DetachNode(<sy;CHWOutletNode>)                                   CoilsO1261
          Call DetachHistory(<sy;CHWHsty>)                                      CoilsO1262
          <CHW-LOOP> = 0                                                        CoilsO1263
        ENDIF                                                                   CoilsO1264
c              water-cooled condenser                                           CoilsO1265
        IF (<CONDENSER-TYPE> .EQ. 1                                             CoilsO1266
     &                           .AND. <COOLING-CAPACITY> .GT. 0.)  THEN        CoilsO1267
c              flag to indicate this system attached to a loop                  CoilsO1268
          <SYS_LOOP_FLAG> = 1                                                   CoilsO1269
          Jpl = <CW-LOOP>                                                       CoilsO1270
          QCW = <COOLING-CAPACITY> * (1.+<COOLING-EIR>)                         CoilsO1271
          <CWDESGPMS>   = QCW / (<pl.Btuh/GPM-F>*<CW-COIL-DT>)                  CoilsO1272
          Kfi           = <sy;CWInletNode>                                      CoilsO1273
          Xfi           = <fi;Xnode>                                            CoilsO1274
          Kfo           = <sy;CWOutletNode>                                     CoilsO1275
          Xfo           = <fo;Xnode>                                            CoilsO1276
          <fi.Minlet>   = <CWDESGPMS>                                           CoilsO1277
          <fo.Moutlet>  = <CWDESGPMS>                                           CoilsO1278
          <fo.Moutlet2> = <fo.Moutlet>                                          CoilsO1279
          <fi.Mreqd>    = <fo.Moutlet>                                          CoilsO1280
          <fo.Mreqd>    = <fo.Moutlet>                                          CoilsO1281
          <fo.Toutlet>  = <Xfi.Tinlet> + <CW-COIL-DT>                           CoilsO1282
          HeadCW = FluidDP_Design(<sy;CWFluidProp>, <CWDESGPMS>,                CoilsO1283
     &                                              <CW-COIL-HEAD>)             CoilsO1284
          <fi.Preqd>    = <Xfo.Preqd> + HeadCW                                  CoilsO1285
          IF(IREPRT(3,34).NE.0) WRITE(IOUTPT,9003)                              CoilsO1286
     &      (<SYSTEM-NAME>,II=1,8),QCW,<CWDESGPMS>,HeadCW                       CoilsO1287
        ELSE                                                                    CoilsO1288
c              zero out loop pointer if not used                                CoilsO1289
          Call DetachNode(<sy;CWInletNode>)                                     CoilsO1290
          Call DetachNode(<sy;CWOutletNode>)                                    CoilsO1291
          Call DetachHistory(<sy;CWHsty>)                                       CoilsO1292
          <CW-LOOP> = 0                                                         CoilsO1293
        ENDIF                                                                   CoilsO1294
c              water-side economizer                                            CoilsO1295
        IF (<WS-ECONO> .EQ. 1  .AND. <COOLING-CAPACITY> .GT. 0.)  THEN          CoilsO1296
c              flag to indicate this system attached to a loop                  CoilsO1297
          <SYS_LOOP_FLAG> = 1                                                   CoilsO1298
c              loop pointer                                                     CoilsO1299
          Jpl = <WSE-LOOP>                                                      CoilsO1300
          <WSEDESGPMS> = <COOLING-CAPACITY>                                     CoilsO1301
     &                            / (<pl.Btuh/GPM-F>*<WSE-COIL-DT>)             CoilsO1302
          HeadWSE = FluidDP_Design(<sy;WSEFluidProp>, <WSEDESGPMS>,             CoilsO1303
     &                                                <WSE-COIL-HEAD>)          CoilsO1304
c              economizer adds to load only if on different                     CoilsO1305
c              loop than condenser                                              CoilsO1306
          IF (<WSE-LOOP> .NE. <CW-LOOP>)  THEN                                  CoilsO1307
            Kfi           = <sy;WSEInletNode>                                   CoilsO1308
            Xfi           = <fi;Xnode>                                          CoilsO1309
            Kfo           = <sy;WSEOutletNode>                                  CoilsO1310
            Xfo           = <fo;Xnode>                                          CoilsO1311
            <fi.Minlet>   = <WSEDESGPMS>                                        CoilsO1312
            <fo.Moutlet>  = <WSEDESGPMS>                                        CoilsO1313
            <fo.Moutlet2> = <fo.Moutlet>                                        CoilsO1314
            <fi.Mreqd>    = <fo.Moutlet>                                        CoilsO1315
            <fo.Mreqd>    = <fo.Moutlet>                                        CoilsO1316
            <fo.Toutlet>  = <Xfi.Tinlet> + <WSE-COIL-DT>                        CoilsO1317
            <fi.Preqd>    = <Xfo.Preqd> + HeadWSE                               CoilsO1318
          ELSE                                                                  CoilsO1319
            <WSEDESGPMS> = <CWDESGPMS>                                          CoilsO1320
            <fi.Preqd>   = <Xfo.Preqd> + HeadCW + HeadWSE                       CoilsO1321
          ENDIF                                                                 CoilsO1322
          IF(IREPRT(3,34).NE.0) WRITE(IOUTPT,9004)                              CoilsO1323
     &      (<SYSTEM-NAME>,II=1,8),<COOLING-CAPACITY>,<WSEDESGPMS>,             CoilsO1324
     &      HeadWSE                                                             CoilsO1325
        ELSE                                                                    CoilsO1326
c              zero out loop pointer if not used                                CoilsO1327
          Call DetachNode(<sy;WSEInletNode>)                                    CoilsO1328
          Call DetachNode(<sy;WSEOutletNode>)                                   CoilsO1329
          Call DetachHistory(<sy;WSEHsty>)                                      CoilsO1330
          <WSE-LOOP> = 0                                                        CoilsO1331
        ENDIF                                                                   CoilsO1332
c                                                                               CoilsO1333
c              now loop through zones and pick up zone flows                    CoilsO1334
        ISZ = <ISZONES>                                                         CoilsO1335
        NSZ = <NZONES>                                                          CoilsO1336
        DO  NZ=1,NSZ                                                            CoilsO1337
          ZP1 = ISZ + (NZ-1)*NZD                                                CoilsO1338
          ZP2 = <ZP2>                                                           CoilsO1339
c              only conditioned zones or plenums have flows                     CoilsO1340
          IF (<ZONE-TYPE> .EQ. 2)  CYCLE                                        CoilsO1341
c              zonal hot water coil or reheat coil and not a floor panel        CoilsO1342
          IF (Icode .NE. 8)  THEN                                               CoilsO1343
            IF (<HEATCAPZ> .LT. -1.)  THEN                                      CoilsO1344
              IF (<ZONE-HEAT-SOURCE> .LT. 0)  THEN                              CoilsO1345
c              flag to indicate one or more system zones attached to a loop     CoilsO1346
                <ZONE_LOOP_FLAG> = 1                                            CoilsO1347
c              zone coil loop pointer                                           CoilsO1348
                Jpl = <HW-LOOPZ>                                                CoilsO1349
                IF (<pl:TYPE> .NE. Pipe2)  THEN                                 CoilsO1350
                  <HWDESGPMZ>   = <HEATCAPZ>                                    CoilsO1351
     &                               / (<pl.Btuh/GPM-F>*<HW-COIL-DTZ>)          CoilsO1352
                  Kfi           = <zn;HWInletNode>                              CoilsO1353
                  Xfi           = <fi;Xnode>                                    CoilsO1354
                  Kfo           = <zn;HWOutletNode>                             CoilsO1355
                  Xfo           = <fo;Xnode>                                    CoilsO1356
                  <fi.Minlet>   = <HWDESGPMZ>                                   CoilsO1357
                  <fo.Moutlet>  = <HWDESGPMZ>                                   CoilsO1358
                  <fo.Moutlet2> = <fo.Moutlet>                                  CoilsO1359
                  <fi.Mreqd>    = <fo.Moutlet>                                  CoilsO1360
                  <fo.Mreqd>    = <fo.Moutlet>                                  CoilsO1361
                  <fo.Toutlet>  = <Xfi.Tinlet> + <HW-COIL-DTZ>                  CoilsO1362
                  Head = FluidDP_Design(<zn;HWFluidProp>, <HWDESGPMZ>,          CoilsO1363
     &                                                  <HW-COIL-HEADZ>)        CoilsO1364
                  <fi.Preqd> = <Xfo.Preqd> + Head                               CoilsO1365
                ELSE                                                            CoilsO1366
c                 2-pipe                                                        CoilsO1367
                  <pl;MiscHeat> = <pl;MiscHeat> + <HEATCAPZ>                    CoilsO1368
                ENDIF                                                           CoilsO1369
c              store design airflow as CFMAXH may change hourly (already        CoilsO1370
c              stored in DESIGN for PIU)                                        CoilsO1371
                IF (Icode .NE. 23)  <zn;HW_DES_CFM> = <CFMAXH>                  CoilsO1372
                IF(IREPRT(3,34).NE.0) WRITE(IOUTPT,9000)                        CoilsO1373
     &            (<ZONE-NAME>,II=1,8),<HEATCAPZ>,<HWDESGPMZ>,                  CoilsO1374
     &            <HWDESDTZ>,Head                                               CoilsO1375
              ELSE                                                              CoilsO1376
c              zero out loop pointer if not used                                CoilsO1377
                Call DetachNode(<zn;HWInletNode>)                               CoilsO1378
                Call DetachNode(<zn;HWOutletNode>)                              CoilsO1379
                Call DetachHistory(<zn;HWHsty>)                                 CoilsO1380
                <HW-LOOPZ> = 0                                                  CoilsO1381
c              max zone heat kW                                                 CoilsO1382
                IF (<ZONE-HEAT-SOURCE> .EQ. 1)                                  CoilsO1383
     &            <MAX_HEAT_KWZ> = -<HEATCAPZ> * KWBTU                          CoilsO1384
              ENDIF                                                             CoilsO1385
            ELSE                                                                CoilsO1386
              Call DetachNode(<zn;HWInletNode>)                                 CoilsO1387
              Call DetachNode(<zn;HWOutletNode>)                                CoilsO1388
              Call DetachHistory(<zn;HWHsty>)                                   CoilsO1389
              <HW-LOOPZ> = 0                                                    CoilsO1390
            ENDIF                                                               CoilsO1391
          ELSE                                                                  CoilsO1392
c              floor panel systems (FPH)                                        CoilsO1393
            IF (<ERMIND> .LT. -1.)  THEN                                        CoilsO1394
              IF (<ZONE-HEAT-SOURCE> .LT. 0)  THEN                              CoilsO1395
c              default the capacity if not specified                            CoilsO1396
                IF (<HEATCAPZ> .GT. -1.)                                        CoilsO1397
     &              <HEATCAPZ> = <ERMIND>*(1.0+<PANEL-LOSS-RATIO>)              CoilsO1398
c              flag to indicate one or more system zones attached to a loop     CoilsO1399
                <ZONE_LOOP_FLAG> = 1                                            CoilsO1400
c              zone coil loop pointer                                           CoilsO1401
                Jpl = <HW-LOOPZ>                                                CoilsO1402
                IF (<pl:TYPE> .NE. Pipe2)  THEN                                 CoilsO1403
                  <HWDESGPMZ>   = <HEATCAPZ>                                    CoilsO1404
     &                               / (<pl.Btuh/GPM-F>*<HW-COIL-DTZ>)          CoilsO1405
                  Kfi           = <zn;HWInletNode>                              CoilsO1406
                  Xfi           = <fi;Xnode>                                    CoilsO1407
                  Kfo           = <zn;HWOutletNode>                             CoilsO1408
                  Xfo           = <fo;Xnode>                                    CoilsO1409
                  <fi.Minlet>   = <HWDESGPMZ>                                   CoilsO1410
                  <fo.Moutlet>  = <HWDESGPMZ>                                   CoilsO1411
                  <fo.Moutlet2> = <fo.Moutlet>                                  CoilsO1412
                  <fi.Mreqd>    = <fo.Moutlet>                                  CoilsO1413
                  <fo.Mreqd>    = <fo.Moutlet>                                  CoilsO1414
                  <fo.Toutlet>  = <Xfi.Tinlet> + <HW-COIL-DTZ>                  CoilsO1415
                  Head = FluidDP_Design(<zn;HWFluidProp>, <HWDESGPMZ>,          CoilsO1416
     &                                                  <HW-COIL-HEADZ>)        CoilsO1417
                  <fi.Preqd> = <Xfo.Preqd> + Head                               CoilsO1418
                ELSE                                                            CoilsO1419
c                 2-pipe                                                        CoilsO1420
                  <pl;MiscHeat> = <pl;MiscHeat> + <HEATCAPZ>                    CoilsO1421
                ENDIF                                                           CoilsO1422
                IF(IREPRT(3,34).NE.0) WRITE(IOUTPT,9000)                        CoilsO1423
     &            (<ZONE-NAME>,II=1,8),<HEATCAPZ>,<HWDESGPMZ>,                  CoilsO1424
     &            <HWDESDTZ>,Head                                               CoilsO1425
              ELSE                                                              CoilsO1426
c              zero out loop pointer if not used                                CoilsO1427
                Call DetachNode(<zn;HWInletNode>)                               CoilsO1428
                Call DetachNode(<zn;HWOutletNode>)                              CoilsO1429
                Call DetachHistory(<zn;HWHsty>)                                 CoilsO1430
                <HW-LOOPZ> = 0                                                  CoilsO1431
c              max zone heat kW                                                 CoilsO1432
                IF (<ZONE-HEAT-SOURCE> .EQ. 1)                                  CoilsO1433
     &            <MAX_HEAT_KWZ> = -<ERMIND> * KWBTU                            CoilsO1434
              ENDIF                                                             CoilsO1435
            ELSE                                                                CoilsO1436
              Call DetachNode(<zn;HWInletNode>)                                 CoilsO1437
              Call DetachNode(<zn;HWOutletNode>)                                CoilsO1438
              Call DetachHistory(<zn;HWHsty>)                                   CoilsO1439
              <HW-LOOPZ> = 0                                                    CoilsO1440
            ENDIF                                                               CoilsO1441
          ENDIF                                                                 CoilsO1442
c              baseboard coil                                                   CoilsO1443
          IF (<BASEBOARD-RATING> .LT. -1.)  THEN                                CoilsO1444
            IF (<BASEBOARD-SOURCE> .LT. 0)  THEN                                CoilsO1445
c              flag to indicate one or more system zones attached to a loop     CoilsO1446
              <ZONE_LOOP_FLAG> = 1                                              CoilsO1447
c              baseboard coil loop pointer                                      CoilsO1448
              Jpl = <BBRD-LOOPZ>                                                CoilsO1449
              <pl.COIL_HEAT> = <pl.COIL_HEAT>                                   CoilsO1450
     &                       + <BASEBOARD-RATING>*<MULTIPLIER>                  CoilsO1451
c              design dT between EAT and EWT for hot water coil (zonal)         CoilsO1452
              <BBRDDESDTZ>   = <DESIGN-HEAT-T> - <pl:DESIGN-HEAT-T>             CoilsO1453
              <BBRDDESGPMZ>  =  <BASEBOARD-RATING>                              CoilsO1454
     &                               / (<pl.Btuh/GPM-F>*<BBRD-COIL-DTZ>)        CoilsO1455
              Kfi           = <zn;BBRDInletNode>                                CoilsO1456
              Xfi           = <fi;Xnode>                                        CoilsO1457
              Kfo           = <zn;BBRDOutletNod>                                CoilsO1458
              Xfo           = <fo;Xnode>                                        CoilsO1459
              <fi.Minlet>   = <BBRDDESGPMZ>                                     CoilsO1460
              <fo.Moutlet>  = <BBRDDESGPMZ>                                     CoilsO1461
              <fo.Moutlet2> = <fo.Moutlet>                                      CoilsO1462
              <fi.Mreqd>    = <fo.Moutlet>                                      CoilsO1463
              <fo.Mreqd>    = <fo.Moutlet>                                      CoilsO1464
              <fo.Toutlet>  = <Xfi.Tinlet> + <BBRD-COIL-DTZ>                    CoilsO1465
              Head = FluidDP_Design(<zn;BBRDFluidProp>, <BBRDDESGPMZ>,          CoilsO1466
     &                                                <BBRD-COIL-HEADZ>)        CoilsO1467
              <fi.Preqd>    = <Xfo.Preqd> + Head                                CoilsO1468
              IF(IREPRT(3,34).NE.0) WRITE(IOUTPT,9005)                          CoilsO1469
     &          (<ZONE-NAME>,II=1,8),<BASEBOARD-RATING>,<BBRDDESGPMZ>,          CoilsO1470
     &          <BBRDDESDTZ>,Head                                               CoilsO1471
            ELSE                                                                CoilsO1472
c              zero out loop pointer if not used                                CoilsO1473
              Call DetachNode(<zn;BBRDInletNode>)                               CoilsO1474
              Call DetachNode(<zn;BBRDOutletNod>)                               CoilsO1475
              Call DetachHistory(<zn;BBRDHsty>)                                 CoilsO1476
              <BBRD-LOOPZ> = 0                                                  CoilsO1477
c              max zone heat kW                                                 CoilsO1478
              IF (<BASEBOARD-SOURCE> .EQ. 1)                                    CoilsO1479
     &          <MAX_BBRD_KWZ> = -<BASEBOARD-RATING> * KWBTU                    CoilsO1480
            ENDIF                                                               CoilsO1481
          ELSE                                                                  CoilsO1482
c              zero out loop pointer if not used                                CoilsO1483
            Call DetachNode(<zn;BBRDInletNode>)                                 CoilsO1484
            Call DetachNode(<zn;BBRDOutletNod>)                                 CoilsO1485
            Call DetachHistory(<zn;BBRDHsty>)                                   CoilsO1486
            <BBRD-LOOPZ> = 0                                                    CoilsO1487
          ENDIF                                                                 CoilsO1488
c              chilled water zone coil                                          CoilsO1489
          IF (<COOLCAPZ> .GT. 1.  .AND.  Icode .EQ. 9)  THEN                    CoilsO1490
c              flag to indicate one or more system zones attached to a loop     CoilsO1491
            <ZONE_LOOP_FLAG> = 1                                                CoilsO1492
c              zone coil loop pointer                                           CoilsO1493
            Jpl = <CHW-LOOPZ>                                                   CoilsO1494
            <CHWDESGPMZ>  = <COOLCAPZ>/(<pl.Btuh/GPM-F>*<CHW-COIL-DTZ>)         CoilsO1495
            Kfi           = <zn;CHWInletNode>                                   CoilsO1496
            Xfi           = <fi;Xnode>                                          CoilsO1497
            Kfo           = <zn;CHWOutletNode>                                  CoilsO1498
            Xfo           = <fo;Xnode>                                          CoilsO1499
            <fi.Minlet>   = <CHWDESGPMZ>                                        CoilsO1500
            <fo.Moutlet>  = <CHWDESGPMZ>                                        CoilsO1501
            <fo.Moutlet2> = <fo.Moutlet>                                        CoilsO1502
            <fi.Mreqd>    = <fo.Moutlet>                                        CoilsO1503
            <fo.Mreqd>    = <fo.Moutlet>                                        CoilsO1504
            <fo.Toutlet>  = <Xfi.Tinlet> + <CHW-COIL-DTZ>                       CoilsO1505
            Head = FluidDP_Design(<zn;CHWFluidProp>, <CHWDESGPMZ>,              CoilsO1506
     &                                               <CHW-COIL-HEADZ>)          CoilsO1507
            <fi.Preqd>    = <Xfo.Preqd> + Head                                  CoilsO1508
c              store design airflow as CFMAX may change hourly                  CoilsO1509
              <zn;CHW_DES_CFM> = <CFMAX>                                        CoilsO1510
            IF(IREPRT(3,34).NE.0) WRITE(IOUTPT,9002)                            CoilsO1511
     &        (<ZONE-NAME>,II=1,8),<COOLCAPZ>,<CHWDESGPMZ>,                     CoilsO1512
     &        <CHWCAP6544Z>,Head                                                CoilsO1513
          ELSE                                                                  CoilsO1514
c              zero out loop pointer if not used                                CoilsO1515
            Call DetachNode(<zn;CHWInletNode>)                                  CoilsO1516
            Call DetachNode(<zn;CHWOutletNode>)                                 CoilsO1517
            Call DetachHistory(<zn;CHWHsty>)                                    CoilsO1518
            <CHW-LOOPZ> = 0                                                     CoilsO1519
          ENDIF                                                                 CoilsO1520
c              zonal wlhp's and water-cooled condensers                         CoilsO1521
          IF ((<CONDENSER-TYPE> .EQ. 1  .OR.  Icode .EQ. 15)                    CoilsO1522
     &                                  .AND.  <COOLCAPZ> .GT. 1.)  THEN        CoilsO1523
c              flag to indicate one or more system zones attached to a loop     CoilsO1524
            <ZONE_LOOP_FLAG> = 1                                                CoilsO1525
c              cw loop pointer                                                  CoilsO1526
            Jpl = <CW-LOOPZ>                                                    CoilsO1527
            QCW           = <COOLCAPZ> * (1.+<COOLING-EIR>)                     CoilsO1528
            <CWDESGPMZ>   = QCW / (<pl.Btuh/GPM-F>*<CW-COIL-DTZ>)               CoilsO1529
            Kfi           = <zn;CWInletNode>                                    CoilsO1530
            Xfi           = <fi;Xnode>                                          CoilsO1531
            Kfo           = <zn;CWOutletNode>                                   CoilsO1532
            Xfo           = <fo;Xnode>                                          CoilsO1533
            <fi.Minlet>   = <CWDESGPMZ>                                         CoilsO1534
            <fo.Moutlet>  = <CWDESGPMZ>                                         CoilsO1535
            <fo.Moutlet2> = <fo.Moutlet>                                        CoilsO1536
            <fo.Toutlet>  = <Xfi.Tinlet> + <CW-COIL-DTZ>                        CoilsO1537
            HeadCW = FluidDP_Design(<zn;CWFluidProp>, <CWDESGPMZ>,              CoilsO1538
     &                                                <CW-COIL-HEADZ>)          CoilsO1539
            IF (Icode .EQ. 15)  <pl;MiscHeat> =                                 CoilsO1540
     &                     <pl;MiscHeat> + <HEATCAPZ>*(1.-<HEATING-EIR>)        CoilsO1541
            IF(IREPRT(3,34).NE.0) WRITE(IOUTPT,9003)                            CoilsO1542
     &        (<ZONE-NAME>,II=1,8),<COOLCAPZ>,<CWDESGPMZ>,HeadCW                CoilsO1543
          ELSE                                                                  CoilsO1544
c              zero out loop pointer if not used                                CoilsO1545
            Call DetachNode(<zn;CWInletNode>)                                   CoilsO1546
            Call DetachNode(<zn;CWOutletNode>)                                  CoilsO1547
            Call DetachHistory(<zn;CWHsty>)                                     CoilsO1548
            <CW-LOOPZ> = 0                                                      CoilsO1549
          ENDIF                                                                 CoilsO1550
c              water-side economizer - wlhp only                                CoilsO1551
          IF (<WS-ECONO> .EQ. 1                                                 CoilsO1552
     &         .AND.  (<COOLCAPZ> .GT. 1.  .OR.  Icode .EQ. 15))  THEN          CoilsO1553
c              flag to indicate one or more system zones attached to a loop     CoilsO1554
            <ZONE_LOOP_FLAG> = 1                                                CoilsO1555
c              loop pointer                                                     CoilsO1556
            Jpl = <WSE-LOOPZ>                                                   CoilsO1557
            <WSEDESGPMZ> = <COOLCAPZ>                                           CoilsO1558
     &                            / (<pl.Btuh/GPM-F>*<WSE-COIL-DTZ>)            CoilsO1559
            HeadWSE = FluidDP_Design(<zn;WSEFluidProp>, <WSEDESGPMZ>,           CoilsO1560
     &                                                 <WSE-COIL-HEADZ>)        CoilsO1561
c              economizer adds to load and flow only if on different            CoilsO1562
c              loop than condenser                                              CoilsO1563
            IF (<WSE-LOOPZ> .NE. <CW-LOOPZ>)  THEN                              CoilsO1564
              Kfi           = <zn;WSEInletNode>                                 CoilsO1565
              Xfi           = <fi;Xnode>                                        CoilsO1566
              Kfo           = <zn;WSEOutletNode>                                CoilsO1567
              Xfo           = <fo;Xnode>                                        CoilsO1568
              <fi.Minlet>   = <WSEDESGPMZ>                                      CoilsO1569
              <fo.Moutlet>  = <WSEDESGPMZ>                                      CoilsO1570
              <fo.Moutlet2> = <fo.Moutlet>                                      CoilsO1571
              <fi.Mreqd>    = <fo.Moutlet>                                      CoilsO1572
              <fo.Mreqd>    = <fo.Moutlet>                                      CoilsO1573
              <fo.Toutlet>  = <Xfi.Tinlet> + <WSE-COIL-DTZ>                     CoilsO1574
              <fi.Preqd>    = <Xfo.Preqd>  + HeadWSE                            CoilsO1575
            ELSE                                                                CoilsO1576
c              for the design head, assume that the economizer may be           CoilsO1577
c              active at the same time as the compressor                        CoilsO1578
              <WSEDESGPMZ> = <CWDESGPMZ>                                        CoilsO1579
              <fi.Preqd>   = <Xfo.Preqd> + HeadCW + HeadWSE                     CoilsO1580
            ENDIF                                                               CoilsO1581
            IF(IREPRT(3,34).NE.0) WRITE(IOUTPT,9004)                            CoilsO1582
     &        (<ZONE-NAME>,II=1,8),<COOLCAPZ>,<WSEDESGPMZ>, HeadWSE             CoilsO1583
          ELSE                                                                  CoilsO1584
c              zero out loop pointer if not used                                CoilsO1585
            Call DetachNode(<zn;WSEInletNode>)                                  CoilsO1586
            Call DetachNode(<zn;WSEOutletNode>)                                 CoilsO1587
            Call DetachHistory(<zn;WSEHsty>)                                    CoilsO1588
            <WSE-LOOPZ> = 0                                                     CoilsO1589
          ENDIF                                                                 CoilsO1590
        ENDDO  ! zone loop                                                      CoilsO1591
        IF (<ZONE_LOOP_FLAG> .NE. 0)  <SYS_LOOP_FLAG> = 1                       CoilsO1592
      ENDDO  ! systems loop                                                     CoilsO1593
c                                                                               CoilsO1594
c                                                                               CoilsO1595
c ============ DESIGN CALCULATIONS - RECONCILIATION =========================== CoilsO1596
      CASE (119)                                                                CoilsO1597
c                                                                               CoilsO1598
c                                                                               CoilsO1599
c ============ ATTACHMENTS ==================================================== CoilsO1600
c                                                                               CoilsO1601
c              Initial attachments                                              CoilsO1602
      CASE (201)                                                                CoilsO1603
c              set up plant interface in all systems                            CoilsO1604
c              and zones                                                        CoilsO1605
      DO  NS=1,NSYS                                                             CoilsO1606
        NSP   = IS + (NS-1)*NSS                                                 CoilsO1607
        Icode = <SYSTEM-TYPE>                                                   CoilsO1608
        <HW-LOOP>         = Jcomponent( 2, <HW-LOOP>)                           CoilsO1609
        <PHW-LOOP>        = Jcomponent( 2, <PHW-LOOP>)                          CoilsO1610
        <BBRD-LOOP>       = Jcomponent( 2, <BBRD-LOOP>)                         CoilsO1611
        <DESC-LOOP>       = Jcomponent( 2, <DESC-LOOP>)                         CoilsO1612
        <DESC-CHILLER>    = Jcomponent( 3, <DESC-CHILLER>)                      CoilsO1613
        <CHW-LOOP>        = Jcomponent( 2, <CHW-LOOP>)                          CoilsO1614
        <CW-LOOP>         = Jcomponent( 2, <CW-LOOP>)                           CoilsO1615
        <WSE-LOOP>        = Jcomponent( 2, <WSE-LOOP>)                          CoilsO1616
c                                                                               CoilsO1617
c              substitute pointers to DHW loop for dhw-hydronic systems         CoilsO1618
        IF (<DHW-LOOP> .GT. 0)  THEN                                            CoilsO1619
          <DHW-LOOP>  = Jcomponent(2, <DHW-LOOP>)                               CoilsO1620
          IF (<HEAT-SOURCE> .EQ. -3  .OR.  <SUPP-SOURCE> .EQ. -3)               CoilsO1621
     &                                     <HW-LOOP>   = <DHW-LOOP>             CoilsO1622
          IF (<PREHEAT-SOURCE> .EQ. -3)    <PHW-LOOP>  = <DHW-LOOP>             CoilsO1623
        ENDIF                                                                   CoilsO1624
        <HTREC-DW-HEATER> = Jcomponent(5, <HTREC-DW-HEATER>)                    CoilsO1625
c                                                                               CoilsO1626
c              Force HW coil to be same as CHW coil if a 2-pipe system          CoilsO1627
c              system                                                           CoilsO1628
        IF (<CHW-LOOP> .GT. 0)  THEN                                            CoilsO1629
          Jpl = <CHW-LOOP>                                                      CoilsO1630
          IF (<pl:TYPE> .EQ. Pipe2)  THEN                                       CoilsO1631
            <HW-LOOP>       = <CHW-LOOP>                                        CoilsO1632
            <HW-VALVE-TYPE> = <CHW-VALVE-TYPE>                                  CoilsO1633
            <HW-COIL-HEAD>  = <CHW-COIL-HEAD>                                   CoilsO1634
          ENDIF                                                                 CoilsO1635
        ENDIF                                                                   CoilsO1636
c                                                                               CoilsO1637
c             make sure coil temp change values have the right sign             CoilsO1638
        <HW-COIL-DT>   = -ABS(<HW-COIL-DT>)                                     CoilsO1639
        <BBRD-COIL-DT> = -ABS(<BBRD-COIL-DT>)                                   CoilsO1640
        <PHW-COIL-DT>  = -ABS(<PHW-COIL-DT>)                                    CoilsO1641
        <DESC-COIL-DT> = -ABS(<DESC-COIL-DT>)                                   CoilsO1642
        <CHW-COIL-DT>  =  ABS(<CHW-COIL-DT>)                                    CoilsO1643
        <CW-COIL-DT>   =  ABS(<CW-COIL-DT>)                                     CoilsO1644
        <WSE-COIL-DT>  =  ABS(<WSE-COIL-DT>)                                    CoilsO1645
c                                                                               CoilsO1646
c              loop thru zones                                                  CoilsO1647
        ISZ = <ISZONES>                                                         CoilsO1648
        NSZ = <NZONES>                                                          CoilsO1649
        DO  NZ=1,NSZ                                                            CoilsO1650
          ZP1 = ISZ + (NZ-1)*NZD                                                CoilsO1651
          ZP2 = <ZP2>                                                           CoilsO1652
c              only conditioned zones or plenums have loop attachments          CoilsO1653
          IF (<ZONE-TYPE> .EQ. 2)  CYCLE                                        CoilsO1654
          <HW-LOOPZ>   = Jcomponent(2, <HW-LOOPZ>)                              CoilsO1655
          <BBRD-LOOPZ> = Jcomponent(2, <BBRD-LOOPZ>)                            CoilsO1656
          <CHW-LOOPZ>  = Jcomponent(2, <CHW-LOOPZ>)                             CoilsO1657
          <CW-LOOPZ>   = Jcomponent(2, <CW-LOOPZ>)                              CoilsO1658
          <WSE-LOOPZ>  = Jcomponent(2, <WSE-LOOPZ>)                             CoilsO1659
          IF (<DHW-LOOPZ> .GT. 0)  THEN                                         CoilsO1660
            <DHW-LOOPZ>  = Jcomponent(2, <DHW-LOOPZ>)                           CoilsO1661
c              substitute pointers to DHW loop for dhw-hydronic systems         CoilsO1662
            IF (<ZONE-HEAT-SOURCE> .EQ. -3)  <HW-LOOPZ>   = <DHW-LOOPZ>         CoilsO1663
            IF (<BASEBOARD-SOURCE> .EQ. -3)  <BBRD-LOOPZ> = <DHW-LOOPZ>         CoilsO1664
          ENDIF                                                                 CoilsO1665
c                                                                               CoilsO1666
c              Force HW coil to be same as CHW coil if a 2-pipe system          CoilsO1667
c              system                                                           CoilsO1668
          IF (<CHW-LOOPZ> .GT. 0)  THEN                                         CoilsO1669
            Jpl = <CHW-LOOPZ>                                                   CoilsO1670
            IF (<pl:TYPE> .EQ. Pipe2)  THEN                                     CoilsO1671
              <HW-LOOPZ>       = <CHW-LOOPZ>                                    CoilsO1672
              <HW-VALVE-TYPEZ> = <CHW-VALVE-TYPEZ>                              CoilsO1673
              <HW-COIL-HEADZ>  = <CHW-COIL-HEADZ>                               CoilsO1674
            ENDIF                                                               CoilsO1675
          ENDIF                                                                 CoilsO1676
c                                                                               CoilsO1677
c             make sure coil temp change values have the right sign             CoilsO1678
          <HW-COIL-DTZ>   = -ABS(<HW-COIL-DTZ>)                                 CoilsO1679
          <BBRD-COIL-DTZ> = -ABS(<BBRD-COIL-DTZ>)                               CoilsO1680
          <CHW-COIL-DTZ>  =  ABS(<CHW-COIL-DTZ>)                                CoilsO1681
          <CW-COIL-DTZ>   =  ABS(<CW-COIL-DTZ>)                                 CoilsO1682
          <WSE-COIL-DTZ>  =  ABS(<WSE-COIL-DTZ>)                                CoilsO1683
        ENDDO  ! zonal loop                                                     CoilsO1684
      ENDDO  ! systems loop                                                     CoilsO1685
c                                                                               CoilsO1686
c              Create nodes                                                     CoilsO1687
      CASE (203)                                                                CoilsO1688
c              set up all system and zone coil nodes,                           CoilsO1689
c              and head subcomponents                                           CoilsO1690
      DO  NS=1,NSYS                                                             CoilsO1691
        NSP   = IS + (NS-1)*NSS                                                 CoilsO1692
        IF (<HW-LOOP> .GT. 0)  THEN                                             CoilsO1693
          Jpl = <HW-LOOP>                                                       CoilsO1694
          <sy;HWInletNode>  = NewNode(1, NSP,0,NSP,<pl;SupplyCkt>,              CoilsO1695
     &                                                      51,1,4, 1.)         CoilsO1696
          <sy;HWOutletNode> = NewNode(1, NSP,0,NSP,<pl;ReturnCkt>,              CoilsO1697
     &                                                      52,2,4, 1.)         CoilsO1698
          <sy;HWFluidProp> = NewFluidProperties(NSP, Jpl, 11,                   CoilsO1699
     &                                 5., 4000., 2000.,   0.25,                CoilsO1700
     &                                 0.,    0.,   0.5, 0.0015,                CoilsO1701
     &                   <pl:RATED-FLUID>,   <pl:RATED-CONC>,                   CoilsO1702
     &                               160.,    0.,   0.)                         CoilsO1703
        ENDIF                                                                   CoilsO1704
        IF (<PHW-LOOP> .GT. 0)  THEN                                            CoilsO1705
          Jpl = <PHW-LOOP>                                                      CoilsO1706
          <sy;PHWInletNode>  = NewNode(1, NSP,0,NSP,<pl;SupplyCkt>,             CoilsO1707
     &                                                       51,1,4, 1.)        CoilsO1708
          <sy;PHWOutletNode> = NewNode(1, NSP,0,NSP,<pl;ReturnCkt>,             CoilsO1709
     &                                                       52,2,4, 1.)        CoilsO1710
          <sy;PHWFluidProp> = NewFluidProperties(NSP, Jpl, 11,                  CoilsO1711
     &                                 5., 4000., 2000.,   0.25,                CoilsO1712
     &                                 0.,    0.,   0.5, 0.0015,                CoilsO1713
     &                   <pl:RATED-FLUID>,   <pl:RATED-CONC>,                   CoilsO1714
     &                               160.,    0.,   0.)                         CoilsO1715
        ENDIF                                                                   CoilsO1716
        IF (<DESC-LOOP> .GT. 0)  THEN                                           CoilsO1717
          Jpl = <DESC-LOOP>                                                     CoilsO1718
          <sy;DescInletNode>  = NewNode(1, NSP,0,NSP,<pl;SupplyCkt>,            CoilsO1719
     &                                                       51,1,5, 1.)        CoilsO1720
          <sy;DescOutltNode> = NewNode(1, NSP,0,NSP,<pl;ReturnCkt>,             CoilsO1721
     &                                                       52,2,5, 1.)        CoilsO1722
          <sy;DescFluidProp> = NewFluidProperties(NSP, Jpl, 11,                 CoilsO1723
     &                                 5., 4000., 2000.,   0.25,                CoilsO1724
     &                                 0.,    0.,   0.5, 0.0015,                CoilsO1725
     &                   <pl:RATED-FLUID>,   <pl:RATED-CONC>,                   CoilsO1726
     &                               160.,    0.,   0.)                         CoilsO1727
        ENDIF                                                                   CoilsO1728
        IF (<CHW-LOOP> .GT. 0)  THEN                                            CoilsO1729
          Jpl = <CHW-LOOP>                                                      CoilsO1730
          <sy;CHWInletNode>  = NewNode(1, NSP,0,NSP,<pl;SupplyCkt>,             CoilsO1731
     &                                                       51,1,5, 1.)        CoilsO1732
          <sy;CHWOutletNode> = NewNode(1, NSP,0,NSP,<pl;ReturnCkt>,             CoilsO1733
     &                                                       52,2,5, 1.)        CoilsO1734
          <sy;CHWFluidProp> = NewFluidProperties(NSP, Jpl, 11,                  CoilsO1735
     &                                 5., 4000., 2000.,   0.25,                CoilsO1736
     &                                 0.,    0.,   0.5, 0.0015,                CoilsO1737
     &                   <pl:RATED-FLUID>,   <pl:RATED-CONC>,                   CoilsO1738
     &                                49.,    0.,   0.)                         CoilsO1739
        ENDIF                                                                   CoilsO1740
        IF (<CW-LOOP> .GT. 0)  THEN                                             CoilsO1741
          Jpl = <CW-LOOP>                                                       CoilsO1742
          <sy;CWInletNode>  = NewNode(1, NSP,0,NSP,<pl;SupplyCkt>,              CoilsO1743
     &                                                      51,1,6, 1.)         CoilsO1744
          <sy;CWOutletNode> = NewNode(1, NSP,0,NSP,<pl;ReturnCkt>,              CoilsO1745
     &                                                      52,2,6, 1.)         CoilsO1746
          <sy;CWFluidProp> = NewFluidProperties(NSP, Jpl, 11,                   CoilsO1747
     &                                 5., 4000., 2000.,   0.25,                CoilsO1748
     &                                 0.,    0.,   0.5, 0.0015,                CoilsO1749
     &                   <pl:RATED-FLUID>,   <pl:RATED-CONC>,                   CoilsO1750
     &                               100.,    0.,   0.)                         CoilsO1751
        ENDIF                                                                   CoilsO1752
        IF (<WSE-LOOP> .GT. 0)  THEN                                            CoilsO1753
          IF (<WSE-LOOP> .NE. <CW-LOOP>)  THEN                                  CoilsO1754
          Jpl = <WSE-LOOP>                                                      CoilsO1755
            <sy;WSEInletNode>  = NewNode(1, NSP,0,NSP,<pl;SupplyCkt>,           CoilsO1756
     &                                                        51,1,6,1.)        CoilsO1757
            <sy;WSEOutletNode> = NewNode(1, NSP,0,NSP,<pl;ReturnCkt>,           CoilsO1758
     &                                                        52,2,6,1.)        CoilsO1759
            <sy;WSEFluidProp> = NewFluidProperties(NSP, Jpl, 11,                CoilsO1760
     &                                 5., 4000., 2000.,   0.25,                CoilsO1761
     &                                 0.,    0.,   0.5, 0.0015,                CoilsO1762
     &                   <pl:RATED-FLUID>,   <pl:RATED-CONC>,                   CoilsO1763
     &                                55.,    0.,   0.)                         CoilsO1764
          ELSE                                                                  CoilsO1765
            <sy;WSEInletNode>  = <sy;CWInletNode>                               CoilsO1766
            <sy;WSEOutletNode> = <sy;CWOutletNode>                              CoilsO1767
            <sy;WSEFluidProp> = <sy;CWFluidProp>                                CoilsO1768
          ENDIF                                                                 CoilsO1769
        ENDIF                                                                   CoilsO1770
c                                                                               CoilsO1771
c              loop thru zones                                                  CoilsO1772
        ISZ = <ISZONES>                                                         CoilsO1773
        NSZ = <NZONES>                                                          CoilsO1774
        DO  NZ=1,NSZ                                                            CoilsO1775
          ZP1 = ISZ + (NZ-1)*NZD                                                CoilsO1776
          ZP2 = <ZP2>                                                           CoilsO1777
c              only conditioned zones or plenums have loop attachments          CoilsO1778
          IF (<ZONE-TYPE> .EQ. 2)  CYCLE                                        CoilsO1779
          ZM = <MULTIPLIER>                                                     CoilsO1780
          IF (<HW-LOOPZ> .GT. 0)  THEN                                          CoilsO1781
            Jpl = <HW-LOOPZ>                                                    CoilsO1782
            <zn;HWInletNode>  = NewNode(1, NSP,-NSP,ZP2,<pl;SupplyCkt>,         CoilsO1783
     &                                                       51,1,4, ZM)        CoilsO1784
            <zn;HWOutletNode> = NewNode(1, NSP,-NSP,ZP2,<pl;ReturnCkt>,         CoilsO1785
     &                                                       52,2,4, ZM)        CoilsO1786
            <zn;HWFluidProp> = NewFluidProperties(ZP2, Jpl, 11,                 CoilsO1787
     &                                 5., 4000., 2000.,   0.25,                CoilsO1788
     &                                 0.,    0.,   0.5, 0.0015,                CoilsO1789
     &                   <pl:RATED-FLUID>,   <pl:RATED-CONC>,                   CoilsO1790
     &                               160.,    0.,   0.)                         CoilsO1791
          ENDIF                                                                 CoilsO1792
          IF (<BBRD-LOOPZ> .GT. 0)  THEN                                        CoilsO1793
            Jpl = <BBRD-LOOPZ>                                                  CoilsO1794
            <zn;BBRDInletNode> = NewNode(1, NSP,-NSP,ZP2,<pl;SupplyCkt>,        CoilsO1795
     &                                                       51,1,4, ZM)        CoilsO1796
            <zn;BBRDOutletNod> = NewNode(1, NSP,-NSP,ZP2,<pl;ReturnCkt>,        CoilsO1797
     &                                                       52,2,4, ZM)        CoilsO1798
            <zn;BBRDFluidProp> = NewFluidProperties(ZP2, Jpl, 11,               CoilsO1799
     &                                 5., 4000., 2000.,   0.25,                CoilsO1800
     &                                 0.,    0.,   0.5, 0.0015,                CoilsO1801
     &                   <pl:RATED-FLUID>,   <pl:RATED-CONC>,                   CoilsO1802
     &                               160.,    0.,   0.)                         CoilsO1803
          ENDIF                                                                 CoilsO1804
          IF (<CHW-LOOPZ> .GT. 0)  THEN                                         CoilsO1805
            Jpl = <CHW-LOOPZ>                                                   CoilsO1806
            <zn;CHWInletNode>  = NewNode(1, NSP,-NSP,ZP2,<pl;SupplyCkt>,        CoilsO1807
     &                                                       51,1,5, ZM)        CoilsO1808
            <zn;CHWOutletNode> = NewNode(1, NSP,-NSP,ZP2,<pl;ReturnCkt>,        CoilsO1809
     &                                                       52,2,5, ZM)        CoilsO1810
            <zn;CHWFluidProp> = NewFluidProperties(ZP2, Jpl, 11,                CoilsO1811
     &                                 5., 4000., 2000.,   0.25,                CoilsO1812
     &                                 0.,    0.,   0.5, 0.0015,                CoilsO1813
     &                   <pl:RATED-FLUID>,   <pl:RATED-CONC>,                   CoilsO1814
     &                                49.,    0.,   0.)                         CoilsO1815
          ENDIF                                                                 CoilsO1816
          IF (<CW-LOOPZ> .GT. 0)  THEN                                          CoilsO1817
            Jpl = <CW-LOOPZ>                                                    CoilsO1818
            <zn;CWInletNode>  = NewNode(1, NSP,-NSP,ZP2,<pl;SupplyCkt>,         CoilsO1819
     &                                                       51,1,6, ZM)        CoilsO1820
            <zn;CWOutletNode> = NewNode(1, NSP,-NSP,ZP2,<pl;ReturnCkt>,         CoilsO1821
     &                                                       52,2,6, ZM)        CoilsO1822
            <zn;CWFluidProp> = NewFluidProperties(ZP2, Jpl, 11,                 CoilsO1823
     &                                 5., 4000., 2000.,   0.25,                CoilsO1824
     &                                 0.,    0.,   0.5, 0.0015,                CoilsO1825
     &                   <pl:RATED-FLUID>,   <pl:RATED-CONC>,                   CoilsO1826
     &                               100.,    0.,   0.)                         CoilsO1827
          ENDIF                                                                 CoilsO1828
          IF (<WSE-LOOPZ> .GT. 0)  THEN                                         CoilsO1829
            IF (<WSE-LOOPZ> .NE. <CW-LOOPZ>)  THEN                              CoilsO1830
              Jpl = <WSE-LOOPZ>                                                 CoilsO1831
              <zn;WSEInletNode>  = NewNode(1, NSP,-NSP,ZP2,                     CoilsO1832
     &                                      <pl;SupplyCkt>, 51,1,6, ZM)         CoilsO1833
              <zn;WSEOutletNode> = NewNode(1, NSP,-NSP,ZP2,                     CoilsO1834
     &                                      <pl;ReturnCkt>, 52,2,6, ZM)         CoilsO1835
              <zn;WSEFluidProp> = NewFluidProperties(ZP2, Jpl, 11,              CoilsO1836
     &                                 5., 4000., 2000.,   0.25,                CoilsO1837
     &                                 0.,    0.,   0.5, 0.0015,                CoilsO1838
     &                   <pl:RATED-FLUID>,   <pl:RATED-CONC>,                   CoilsO1839
     &                                55.,    0.,   0.)                         CoilsO1840
            ELSE                                                                CoilsO1841
              <zn;WSEInletNode>  = <zn;CWInletNode>                             CoilsO1842
              <zn;WSEOutletNode> = <zn;CWOutletNode>                            CoilsO1843
              <zn;WSEFluidProp> = <zn;CWFluidProp>                              CoilsO1844
            ENDIF                                                               CoilsO1845
          ENDIF                                                                 CoilsO1846
c              end of zonal loop                                                CoilsO1847
        ENDDO                                                                   CoilsO1848
c              end of systems loop                                              CoilsO1849
      ENDDO                                                                     CoilsO1850
c                                                                               CoilsO1851
c              Links, lists                                                     CoilsO1852
      CASE (205)                                                                CoilsO1853
      DO  NS=1,NSYS                                                             CoilsO1854
        NSP   = IS + (NS-1)*NSS                                                 CoilsO1855
c              All nodes associated with this system                            CoilsO1856
        CALL ListNodes(<sy;SystemNodes>, NSP,0,0,0, 0,0)                        CoilsO1857
c              Airhandler coil nodes                                            CoilsO1858
        CALL ListNodes(<sy;CoilNodes>, 0,0,NSP,0, 0,0)                          CoilsO1859
c              Zonal subsystem nodes                                            CoilsO1860
        CALL ListNodes(<sy;ZoneCoilNodes>, 0,-NSP,0,0, 0,0)                     CoilsO1861
c              Nodes for each coil                                              CoilsO1862
        IF (<HW-LOOP> .GT. 0)  THEN                                             CoilsO1863
          CALL ListAdd(<sy;HWNodes>, <sy;HWInletNode>)                          CoilsO1864
          CALL ListAdd(<sy;HWNodes>, <sy;HWOutletNode>)                         CoilsO1865
        ENDIF                                                                   CoilsO1866
        IF (<PHW-LOOP> .GT. 0)  THEN                                            CoilsO1867
          CALL ListAdd(<sy;PHWNodes>, <sy;PHWInletNode>)                        CoilsO1868
          CALL ListAdd(<sy;PHWNodes>, <sy;PHWOutletNode>)                       CoilsO1869
        ENDIF                                                                   CoilsO1870
        IF (<DESC-LOOP> .GT. 0)  THEN                                           CoilsO1871
          CALL ListAdd(<sy;DescNodes>, <sy;DescInletNode>)                      CoilsO1872
          CALL ListAdd(<sy;DescNodes>, <sy;DescOutltNode>)                      CoilsO1873
        ENDIF                                                                   CoilsO1874
        IF (<CHW-LOOP> .GT. 0)  THEN                                            CoilsO1875
          CALL ListAdd(<sy;CHWNodes>, <sy;CHWInletNode>)                        CoilsO1876
          CALL ListAdd(<sy;CHWNodes>, <sy;CHWOutletNode>)                       CoilsO1877
        ENDIF                                                                   CoilsO1878
        IF (<CW-LOOP> .GT. 0)  THEN                                             CoilsO1879
          CALL ListAdd(<sy;CWNodes>, <sy;CWInletNode>)                          CoilsO1880
          CALL ListAdd(<sy;CWNodes>, <sy;CWOutletNode>)                         CoilsO1881
        ENDIF                                                                   CoilsO1882
        IF (<WSE-LOOP> .GT. 0  .AND.                                            CoilsO1883
     &                        <WSE-LOOP> .NE. <CW-LOOP>)  THEN                  CoilsO1884
          CALL ListAdd(<sy;WSENodes>, <sy;WSEInletNode>)                        CoilsO1885
          CALL ListAdd(<sy;WSENodes>, <sy;WSEOutletNode>)                       CoilsO1886
        ENDIF                                                                   CoilsO1887
c                                                                               CoilsO1888
c              loop thru zones                                                  CoilsO1889
        ISZ = <ISZONES>                                                         CoilsO1890
        NSZ = <NZONES>                                                          CoilsO1891
        DO  NZ=1,NSZ                                                            CoilsO1892
          ZP1 = ISZ + (NZ-1)*NZD                                                CoilsO1893
          ZP2 = <ZP2>                                                           CoilsO1894
c              only conditioned zones or plenums have loop attachments          CoilsO1895
          IF (<ZONE-TYPE> .EQ. 2)  CYCLE                                        CoilsO1896
c              All zone nodes                                                   CoilsO1897
          CALL ListNodes(<zn;CoilNodes>, 0,0,ZP2,0, 0,0)                        CoilsO1898
c              Nodes for each coil                                              CoilsO1899
          IF (<HW-LOOPZ> .GT. 0)  THEN                                          CoilsO1900
            CALL ListAdd(<zn;HWNodes>, <zn;HWInletNode>)                        CoilsO1901
            CALL ListAdd(<zn;HWNodes>, <zn;HWOutletNode>)                       CoilsO1902
          ENDIF                                                                 CoilsO1903
          IF (<BBRD-LOOPZ> .GT. 0)  THEN                                        CoilsO1904
            CALL ListAdd(<zn;BBRDNodes>, <zn;BBRDInletNode>)                    CoilsO1905
            CALL ListAdd(<zn;BBRDNodes>, <zn;BBRDOutletNod>)                    CoilsO1906
          ENDIF                                                                 CoilsO1907
          IF (<CHW-LOOPZ> .GT. 0)  THEN                                         CoilsO1908
            CALL ListAdd(<zn;CHWNodes>, <zn;CHWInletNode>)                      CoilsO1909
            CALL ListAdd(<zn;CHWNodes>, <zn;CHWOutletNode>)                     CoilsO1910
          ENDIF                                                                 CoilsO1911
          IF (<CW-LOOPZ> .GT. 0)  THEN                                          CoilsO1912
            CALL ListAdd(<zn;CWNodes>, <zn;CWInletNode>)                        CoilsO1913
            CALL ListAdd(<zn;CWNodes>, <zn;CWOutletNode>)                       CoilsO1914
          ENDIF                                                                 CoilsO1915
          IF (<WSE-LOOP> .GT. 0  .AND.                                          CoilsO1916
     &                    <WSE-LOOP> .NE. <CW-LOOP>)  THEN                      CoilsO1917
            CALL ListAdd(<zn;WSENodes>, <zn;WSEInletNode>)                      CoilsO1918
            CALL ListAdd(<zn;WSENodes>, <zn;WSEOutletNode>)                     CoilsO1919
          ENDIF                                                                 CoilsO1920
        ENDDO  ! zonal loop                                                     CoilsO1921
      ENDDO    ! systems loop                                                   CoilsO1922
c                                                                               CoilsO1923
c              Histories                                                        CoilsO1924
      CASE (208)                                                                CoilsO1925
      DO  NS=1,NSYS                                                             CoilsO1926
        NSP   = IS + (NS-1)*NSS                                                 CoilsO1927
        IF (<HW-LOOP> .GT. 0)  THEN                                             CoilsO1928
          Kfi  = <sy;HWInletNode>                                               CoilsO1929
          Kfo  = <sy;HWOutletNode>                                              CoilsO1930
          KliX = 0                                                              CoilsO1931
          CALL ListXNodes(<sy;HWNodes>, KliX)                                   CoilsO1932
          <sy;HWHsty> = Newhistory(NSP,0,NSP, KliX, <sy;HWNodes>,               CoilsO1933
     &                    3, 5, 1.5,                                            CoilsO1934
     &                    <#fo.Toutlet> , <sp:ERROR-T>   , 1,                   CoilsO1935
     &                    <#fo.Moutlet2>, <sp:ERROR-FLOW>, 2,                   CoilsO1936
     &                    <#fi.Mreqd>   , <sp:ERROR-FLOW>, 2,                   CoilsO1937
     &                    <#fi.Preqd>   , <sp:ERROR-P>   , 1,                   CoilsO1938
     &                    <#fi.Treqd>   , <sp:ERROR-T>   , 1,                   CoilsO1939
     &                    0,0.,0)                                               CoilsO1940
        ENDIF                                                                   CoilsO1941
        IF (<PHW-LOOP> .GT. 0)  THEN                                            CoilsO1942
          Kfi  = <sy;PHWInletNode>                                              CoilsO1943
          Kfo  = <sy;PHWOutletNode>                                             CoilsO1944
          KliX = 0                                                              CoilsO1945
          CALL ListXNodes(<sy;PHWNodes>, KliX)                                  CoilsO1946
          <sy;PHWHsty> = NewHistory(NSP,0,NSP, KliX, <sy;PHWNodes>,             CoilsO1947
     &                     3, 5, 1.5,                                           CoilsO1948
     &                     <#fo.Toutlet> , <sp:ERROR-T>   , 1,                  CoilsO1949
     &                     <#fo.Moutlet2>, <sp:ERROR-FLOW>, 2,                  CoilsO1950
     &                     <#fi.Mreqd>   , <sp:ERROR-FLOW>, 2,                  CoilsO1951
     &                     <#fi.Preqd>   , <sp:ERROR-P>   , 1,                  CoilsO1952
     &                     <#fi.Treqd>   , <sp:ERROR-T>   , 1,                  CoilsO1953
     &                     0,0.,0)                                              CoilsO1954
        ENDIF                                                                   CoilsO1955
        IF (<DESC-LOOP> .GT. 0)  THEN                                           CoilsO1956
          Kfi  = <sy;DescInletNode>                                             CoilsO1957
          Kfo  = <sy;DescOutltNode>                                             CoilsO1958
          KliX = 0                                                              CoilsO1959
          CALL ListXNodes(<sy;DescNodes>, KliX)                                 CoilsO1960
          <sy;DescHsty> = NewHistory(NSP,0,NSP, KliX, <sy;DescNodes>,           CoilsO1961
     &                      3, 5, 1.5,                                          CoilsO1962
     &                      <#fo.Toutlet> , <sp:ERROR-T>   , 1,                 CoilsO1963
     &                      <#fo.Moutlet2>, <sp:ERROR-FLOW>, 2,                 CoilsO1964
     &                      <#fi.Mreqd>   , <sp:ERROR-FLOW>, 2,                 CoilsO1965
     &                      <#fi.Preqd>   , <sp:ERROR-P>   , 1,                 CoilsO1966
     &                      <#fi.Treqd>   , <sp:ERROR-T>   , 1,                 CoilsO1967
     &                      0,0.,0)                                             CoilsO1968
        ENDIF                                                                   CoilsO1969
        IF (<CHW-LOOP> .GT. 0)  THEN                                            CoilsO1970
          Kfi  = <sy;CHWInletNode>                                              CoilsO1971
          Kfo  = <sy;CHWOutletNode>                                             CoilsO1972
          KliX = 0                                                              CoilsO1973
          CALL ListXNodes(<sy;CHWNodes>, KliX)                                  CoilsO1974
          <sy;CHWHsty> = NewHistory(NSP,0,NSP,  KliX, <sy;CHWNodes>,            CoilsO1975
     &                     3, 5, 1.5,                                           CoilsO1976
     &                     <#fo.Toutlet> , <sp:ERROR-T>   , 1,                  CoilsO1977
     &                     <#fo.Moutlet2>, <sp:ERROR-FLOW>, 2,                  CoilsO1978
     &                     <#fi.Mreqd>   , <sp:ERROR-FLOW>, 2,                  CoilsO1979
     &                     <#fi.Preqd>   , <sp:ERROR-P>   , 1,                  CoilsO1980
     &                     <#fi.Treqd>   , <sp:ERROR-T>   , 1,                  CoilsO1981
     &                     0,0.,0)                                              CoilsO1982
        ENDIF                                                                   CoilsO1983
        IF (<CW-LOOP> .GT. 0)  THEN                                             CoilsO1984
          Kfi  = <sy;CWInletNode>                                               CoilsO1985
          Kfo  = <sy;CWOutletNode>                                              CoilsO1986
          KliX = 0                                                              CoilsO1987
          CALL ListXNodes(<sy;CWNodes>, KliX)                                   CoilsO1988
          <sy;CWHsty> = NewHistory(NSP,0,NSP, KliX, <sy;CWNodes>,               CoilsO1989
     &                    3, 5, 1.5,                                            CoilsO1990
     &                    <#fo.Toutlet> , <sp:ERROR-T>   , 1,                   CoilsO1991
     &                    <#fo.Moutlet2>, <sp:ERROR-FLOW>, 2,                   CoilsO1992
     &                    <#fi.Mreqd>   , <sp:ERROR-FLOW>, 2,                   CoilsO1993
     &                    <#fi.Preqd>   , <sp:ERROR-P>   , 1,                   CoilsO1994
     &                    <#fi.Treqd>   , <sp:ERROR-T>   , 1,                   CoilsO1995
     &                    0,0.,0)                                               CoilsO1996
        ENDIF                                                                   CoilsO1997
        IF (<WSE-LOOP> .GT. 0)  THEN                                            CoilsO1998
          IF (<WSE-LOOP> .NE. <CW-LOOP>)  THEN                                  CoilsO1999
            Kfi  = <sy;WSEInletNode>                                            CoilsO2000
            Kfo  = <sy;WSEOutletNode>                                           CoilsO2001
            KliX = 0                                                            CoilsO2002
            CALL ListXNodes(<sy;WSENodes>, KliX)                                CoilsO2003
            <sy;WSEHsty> = NewHistory(NSP,0,NSP, KliX, <sy;WSENodes>,           CoilsO2004
     &                       3, 5, 1.5,                                         CoilsO2005
     &                       <#fo.Toutlet> , <sp:ERROR-T>   , 1,                CoilsO2006
     &                       <#fo.Moutlet2>, <sp:ERROR-FLOW>, 2,                CoilsO2007
     &                       <#fi.Mreqd>   , <sp:ERROR-FLOW>, 2,                CoilsO2008
     &                       <#fi.Preqd>   , <sp:ERROR-P>   , 1,                CoilsO2009
     &                       <#fi.Treqd>   , <sp:ERROR-T>   , 1,                CoilsO2010
     &                       0,0.,0)                                            CoilsO2011
          ENDIF                                                                 CoilsO2012
        ENDIF                                                                   CoilsO2013
c                                                                               CoilsO2014
c              loop thru zones                                                  CoilsO2015
        ISZ = <ISZONES>                                                         CoilsO2016
        NSZ = <NZONES>                                                          CoilsO2017
        DO  NZ=1,NSZ                                                            CoilsO2018
          ZP1 = ISZ + (NZ-1)*NZD                                                CoilsO2019
          ZP2 = <ZP2>                                                           CoilsO2020
c              only conditioned zones or plenums have loop attachments          CoilsO2021
          IF (<ZONE-TYPE> .EQ. 2)  CYCLE                                        CoilsO2022
          ZM = <MULTIPLIER>                                                     CoilsO2023
          IF (<HW-LOOPZ> .GT. 0)  THEN                                          CoilsO2024
            Kfi  = <zn;HWInletNode>                                             CoilsO2025
            Kfo  = <zn;HWOutletNode>                                            CoilsO2026
            KliX = 0                                                            CoilsO2027
            CALL ListXNodes(<zn;HWNodes>, KliX)                                 CoilsO2028
            <zn;HWHsty> = NewHistory(NSP,-NSP,ZP2, KliX, <zn;HWNodes>,          CoilsO2029
     &                       3, 5, 1.5,                                         CoilsO2030
     &                       <#fo.Toutlet> , <sp:ERROR-T>   , 1,                CoilsO2031
     &                       <#fo.Moutlet2>, <sp:ERROR-FLOW>, 2,                CoilsO2032
     &                       <#fi.Mreqd>   , <sp:ERROR-FLOW>, 2,                CoilsO2033
     &                       <#fi.Preqd>   , <sp:ERROR-P>   , 1,                CoilsO2034
     &                       <#fi.Treqd>   , <sp:ERROR-T>   , 1,                CoilsO2035
     &                       0,0.,0)                                            CoilsO2036
          ENDIF                                                                 CoilsO2037
          IF (<BBRD-LOOPZ> .GT. 0)  THEN                                        CoilsO2038
            Kfi  = <zn;BBRDInletNode>                                           CoilsO2039
            Kfo  = <zn;BBRDOutletNod>                                           CoilsO2040
            KliX = 0                                                            CoilsO2041
            CALL ListXNodes(<zn;BBRDNodes>, KliX)                               CoilsO2042
            <zn;BBRDHsty> = NewHistory(NSP,-NSP,ZP2,                            CoilsO2043
     &                                            KliX, <zn;BBRDNodes>,         CoilsO2044
     &                       3, 5, 1.5,                                         CoilsO2045
     &                       <#fo.Toutlet> , <sp:ERROR-T>   , 1,                CoilsO2046
     &                       <#fo.Moutlet2>, <sp:ERROR-FLOW>, 2,                CoilsO2047
     &                       <#fi.Mreqd>   , <sp:ERROR-FLOW>, 2,                CoilsO2048
     &                       <#fi.Preqd>   , <sp:ERROR-P>   , 1,                CoilsO2049
     &                       <#fi.Treqd>   , <sp:ERROR-T>   , 1,                CoilsO2050
     &                       0,0.,0)                                            CoilsO2051
          ENDIF                                                                 CoilsO2052
          IF (<CHW-LOOPZ> .GT. 0)  THEN                                         CoilsO2053
            Kfi  = <zn;CHWInletNode>                                            CoilsO2054
            Kfo  = <zn;CHWOutletNode>                                           CoilsO2055
            KliX = 0                                                            CoilsO2056
            CALL ListXNodes(<zn;CHWNodes>, KliX)                                CoilsO2057
            <zn;CHWHsty> = NewHistory(NSP,-NSP,ZP2, KliX,<zn;CHWNodes>,         CoilsO2058
     &                       3, 5, 1.5,                                         CoilsO2059
     &                       <#fo.Toutlet> , <sp:ERROR-T>   , 1,                CoilsO2060
     &                       <#fo.Moutlet2>, <sp:ERROR-FLOW>, 2,                CoilsO2061
     &                       <#fi.Mreqd>   , <sp:ERROR-FLOW>, 2,                CoilsO2062
     &                       <#fi.Preqd>   , <sp:ERROR-P>   , 1,                CoilsO2063
     &                       <#fi.Treqd>   , <sp:ERROR-T>   , 1,                CoilsO2064
     &                       0,0.,0)                                            CoilsO2065
          ENDIF                                                                 CoilsO2066
          IF (<CW-LOOPZ> .GT. 0)  THEN                                          CoilsO2067
            Kfi  = <zn;CWInletNode>                                             CoilsO2068
            Kfo  = <zn;CWOutletNode>                                            CoilsO2069
            KliX = 0                                                            CoilsO2070
            CALL ListXNodes(<zn;CWNodes>, KliX)                                 CoilsO2071
            <zn;CWHsty> = NewHistory(NSP,-NSP,ZP2, KliX, <zn;CWNodes>,          CoilsO2072
     &                       3, 5, 1.5,                                         CoilsO2073
     &                       <#fo.Toutlet> , <sp:ERROR-T>   , 1,                CoilsO2074
     &                       <#fo.Moutlet2>, <sp:ERROR-FLOW>, 2,                CoilsO2075
     &                       <#fi.Mreqd>   , <sp:ERROR-FLOW>, 2,                CoilsO2076
     &                       <#fi.Preqd>   , <sp:ERROR-P>   , 1,                CoilsO2077
     &                       <#fi.Treqd>   , <sp:ERROR-T>   , 1,                CoilsO2078
     &                       0,0.,0)                                            CoilsO2079
          ENDIF                                                                 CoilsO2080
          IF (<WSE-LOOP> .GT. 0)  THEN                                          CoilsO2081
            IF (<WSE-LOOP> .NE. <CW-LOOP>)  THEN                                CoilsO2082
              Kfi  = <zn;WSEInletNode>                                          CoilsO2083
              Kfo  = <zn;WSEOutletNode>                                         CoilsO2084
              KliX = 0                                                          CoilsO2085
              CALL ListXNodes(<zn;WSENodes>, KliX)                              CoilsO2086
              <zn;WSEHsty> = NewHistory(NSP,-NSP,ZP2,                           CoilsO2087
     &                                          KliX, <zn;WSENodes>,            CoilsO2088
     &                       3, 5, 1.5,                                         CoilsO2089
     &                       <#fo.Toutlet> , <sp:ERROR-T>   , 1,                CoilsO2090
     &                       <#fo.Moutlet2>, <sp:ERROR-FLOW>, 2,                CoilsO2091
     &                       <#fi.Mreqd>   , <sp:ERROR-FLOW>, 2,                CoilsO2092
     &                       <#fi.Preqd>   , <sp:ERROR-P>   , 1,                CoilsO2093
     &                       <#fi.Treqd>   , <sp:ERROR-T>   , 1,                CoilsO2094
     &                       0,0.,0)                                            CoilsO2095
            ENDIF                                                               CoilsO2096
          ENDIF                                                                 CoilsO2097
        ENDDO  ! zonal loop                                                     CoilsO2098
      ENDDO    ! systems loop                                                   CoilsO2099
c                                                                               CoilsO2100
c              History lists                                                    CoilsO2101
      CASE (209)                                                                CoilsO2102
      DO  NS=1,NSYS                                                             CoilsO2103
        NSP   = IS + (NS-1)*NSS                                                 CoilsO2104
c              Airhandler & zones system                                        CoilsO2105
        CALL ListHstys(<sy;SystemHstys>, NSP, 0, 0)                             CoilsO2106
c              Airhandler coils                                                 CoilsO2107
        CALL ListHstys(<sy;CoilHstys>, 0, 0, NSP)                               CoilsO2108
c              Airhandler zonal subsystem                                       CoilsO2109
        CALL ListHstys(<sy;ZoneCoilHstys>, 0,-NSP, 0)                           CoilsO2110
c              Zone coils                                                       CoilsO2111
        ISZ = <ISZONES>                                                         CoilsO2112
        NSZ = <NZONES>                                                          CoilsO2113
        DO  NZ=1,NSZ                                                            CoilsO2114
          ZP1 = ISZ + (NZ-1)*NZD                                                CoilsO2115
          ZP2 = <ZP2>                                                           CoilsO2116
            CALL ListHstys(<zn;CoilHstys>, 0, 0, ZP2)                           CoilsO2117
        ENDDO                                                                   CoilsO2118
      ENDDO                                                                     CoilsO2119
c                                                                               CoilsO2120
c              Dump pointers (not implemented)                                  CoilsO2121
      CASE (210)                                                                CoilsO2122
      iFlag = 0                                                                 CoilsO2123
      DO  NS=1,NSYS                                                             CoilsO2124
        NSP   = IS + (NS-1)*NSS                                                 CoilsO2125
      ENDDO    ! systems loop                                                   CoilsO2126
c                                                                               CoilsO2127
c                                                                               CoilsO2128
      END SELECT  ! Mode                                                        CoilsO2129
c                                                                               CoilsO2130
      RETURN                                                                    CoilsO2131
c                                                                               CoilsO2132
c              dump formats                                                     CoilsO2133
 9000 FORMAT(' ',8A4                                                            CoilsO2134
     &      / 17X,   ' HEATING  CAPACITY       GPM     DESDT      HEAD'         CoilsO2135
     &      /              25X,    F10.0,    F10.1,    F10.1,     F10.1)        CoilsO2136
 9001 FORMAT(' ',8A4                                                            CoilsO2137
     &      / 17X,   ' PREHEAT  CAPACITY       GPM     DESDT      HEAD'         CoilsO2138
     &      /              25X,    F10.0,    F10.1,    F10.1,     F10.1)        CoilsO2139
 9002 FORMAT(' ',8A4                                                            CoilsO2140
     &      / 17X,   ' COOLING  CAPACITY       GPM     DESDT      HEAD'         CoilsO2141
     &      /              25X,    F10.0,    F10.1,    F10.1,     F10.1)        CoilsO2142
 9003 FORMAT(' ',8A4                                                            CoilsO2143
     &      / 17X,   '    COND  CAPACITY       GPM      HEAD          '         CoilsO2144
     &      /              25X,    F10.0,    F10.1,    F10.1           )        CoilsO2145
 9004 FORMAT(' ',8A4                                                            CoilsO2146
     &      / 17X,   ' WS ECON  CAPACITY   CAP6544      HEAD          '         CoilsO2147
     &      /              25X,    F10.0,    F10.1,    F10.1           )        CoilsO2148
 9005 FORMAT(' ',8A4                                                            CoilsO2149
     &      / 17X,   ' BASEBRD  CAPACITY       GPM     DESDT      HEAD'         CoilsO2150
     &      /              25X,    F10.0,    F10.1,    F10.1,     F10.1)        CoilsO2151
c                                                                               CoilsO2152
c              Message formats                                                  CoilsO2153
                                                                                CoilsO2154
 9109 FORMAT(14X,'System: ',8A4,' has a desiccant'                     /        CoilsO2155
     &       14X,'system with DESC-HEAT-SOURCE=GAS-CHILLER, but no gas'/        CoilsO2156
     &       14X,'chiller has been defined.'                           )        CoilsO2157
 9201 FORMAT(/' Air Handlers                           NSP        In',          CoilsO2158
     &'       Out           '                                 /                 CoilsO2159
     &1x,32('-'),3('  --------'))                                               CoilsO2160
 9202 FORMAT(1x,8A4,5I10)                                                       CoilsO2161
      END                                                                       CoilsO2162
C ##############################################################################PmpAlg   2
C ##############################################################################PmpAlg   3
C ##############################################################################PmpAlg   4
C ##############################################################################PmpAlg   5
C ##########                                                          ##########PmpAlg   6
C ##########                      PUMP ROUTINES                       ##########PmpAlg   7
C ##########                                                          ##########PmpAlg   8
C ##############################################################################PmpAlg   9
C ##############################################################################PmpAlg  10
C ##############################################################################PmpAlg  11
C ##############################################################################PmpAlg  12
c                                                                               PmpAlg  13
      SUBROUTINE PumpAlgs(Mode, Knx)                                            PmpAlg  14
c                                                                               PmpAlg  15
c              Selects the correct pump algorithm                               PmpAlg  16
c                                                                               PmpAlg  17
c              Mode   Simulation mode                                           PmpAlg  18
c              Knx    Pointer to the component or the component's               PmpAlg  19
c                        node                                                   PmpAlg  20
c                                                                               PmpAlg  21
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
c                                                                               PmpAlg  24
C ??*CA /IdNode/                                                                PmpAlg  25
c                                                                               PmpAlg  26
c              Knx may point either to the component or to one of the           PmpAlg  27
c              component's nodes                                                PmpAlg  28
c      IF (<nx;Ident> .EQ. IdNode)  THEN                                        PmpAlg  29
c        Jna = <nx;Component>                                                   PmpAlg  30
c      ELSE                                                                     PmpAlg  31
c        Jna = Knx                                                              PmpAlg  32
c      ENDIF                                                                    PmpAlg  33
c                                                                               PmpAlg  34
c              Currently, only one pump algorithm                               PmpAlg  35
      CALL Pump(Mode, Knx)                                                      PmpAlg  36
c                                                                               PmpAlg  37
      RETURN                                                                    PmpAlg  38
      END                                                                       PmpAlg  39
      SUBROUTINE Pump(Mode, Knx)                                                Pump     2
c                                                                               Pump     3
c              Simulates the performance of one or more pumps, with             Pump     4
c              either constant or variable flow, and constant speed,            Pump     5
c              2-speed, staged, or variable speed capacity control              Pump     6
c                                                                               Pump     7
c                                                                               Pump     8
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /FNSYS/  ISKIPS, MSYSF(120)                                       /FNSYS/  2
      COMMON  /MISCD / TEMPS(4,4096),CONS(5),TEMPSL(4096),                      /MISCD/  2
     1                 BLDGQH,BLDGQC,BLDGQL,BLDGP,BPMULT,                       /MISCD/  3
     2                 DBTMIN,DBTMAX,WMIN,WMAX,NSPZ(4096),                      /MISCD/  4
     3                 DQ, DTP, DTR, DTS, FPI, PLRCC , POM, TC2, TDM,           /MISCD/  5
     4                 TRA,WCOL,WCOLM,WMM,YPI,KWBTU,BTUKW,UNFILD,Unusedm        /MISCD/  6
      REAL             KWBTU                                                    /MISCD/  7
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         /REPORT/ 2
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               Pump    17
      COMMON  /PlntKy/ CHW, Pipe2, loop3, HW, loop5, STM, WLHP, DHW,            /PlntKy/ 2
     &                 CW, Deleted, Pipe2h, WLHPh, COGEN, NoType,               /PlntKy/ 3
     &                 Fixed, OA, Sch, Load,  Zone, Outdoor,                    /PlntKy/ 4
     &                 Standby, Demand, Snap, Scheduled,                        /PlntKy/ 5
     &                 CONSTANT, VARIABLE, ModeText(4),                         /PlntKy/ 6
     &                 OffMode, Floating, HeatMode, CoolMode, ElecMode,         /PlntKy/ 7
     &                 AtCoils, EnterLoop, AtPump,                              /PlntKy/ 8
     &                 INDOORS, OUTDOORS, TUNNEL, UNDERGROUND,                  /PlntKy/ 9
     &                 PRIMARY, SECONDARY,                                      /PlntKy/10
     &                 DIRECT, HX,                                              /PlntKy/11
     &                 Water, Ethylene, Propylene, Brine                        /PlntKy/12
      INTEGER          CHW, Pipe2, loop3, HW, loop5, STM, WLHP, DHW,            /PlntKy/13
     &                 CW, Deleted, Pipe2h, WLHPh, COGEN, NoType,               /PlntKy/14
     &                 Fixed, OA, Sch, Load,  Zone, Outdoor,                    /PlntKy/15
     &                 Standby, Demand, Snap, Scheduled,                        /PlntKy/16
     &                 CONSTANT, VARIABLE, ModeText,                            /PlntKy/17
     &                 OffMode, Floating, HeatMode, CoolMode, ElecMode,         /PlntKy/18
     &                 AtCoils, EnterLoop, AtPump,                              /PlntKy/19
     &                 INDOORS, OUTDOORS, TUNNEL, UNDERGROUND,                  /PlntKy/20
     &                 PRIMARY, SECONDARY,                                      /PlntKy/21
     &                 DIRECT, HX,                                              /PlntKy/22
     &                 Water, Ethylene, Propylene, Brine                        /PlntKy/23
      COMMON  /PUMPKY/ OneSpeed, TwoSpeed, VarSpeed, CyclePump,                 /PUMPKY/ 2
     &                 PrimaryPump, SecondaryPump, EquipmentPump                /PUMPKY/ 3
      INTEGER          OneSpeed, TwoSpeed, VarSpeed, CyclePump,                 /PUMPKY/ 4
     &                 PrimaryPump, SecondaryPump, EquipmentPump                /PUMPKY/ 5
c                                                                               Pump    20
c              limits for inverse curves                                        Pump    21
      DIMENSION RPMLIM(2), Coefs(6)                                             Pump    22
      INTEGER   rH, PmpCtrl(3,6)                                                Pump    23
      DATA RPMLIM  /1.2, 0.0/                                                   Pump    24
      DATA Coefs   /6*0./                                                       Pump    25
      DATA PmpCtrl                                                              Pump    26
     &    / 4H   O,4HNE-S,4HPEED,         4H   T,4HWO-S,4HPEED,                 Pump    27
     &      4H   V,4HAR-S,4HPEED,         4H    ,4H  ST,4HAGED,                 Pump    28
     &      4H2-SP,4HD&ST,4HAGED,         4H  VF,4HD&ST,4HAGED       /          Pump    29
      DATA IdNode /4H$Kno/                                                      /IdNode/ 2
c                                                                               Pump    31
c                                                                               Pump    32
      IF (<nx;Ident> .EQ. IdNode)  THEN                                         Pump    33
        Jpm = <nx;Component>                                                    Pump    34
      ELSE                                                                      Pump    35
        Jpm = Knx                                                               Pump    36
      ENDIF                                                                     Pump    37
c                                                                               Pump    38
      Jpl = <pm;Plant>                                                          Pump    39
c                                                                               Pump    40
      SELECT CASE (Mode)                                                        Pump    41
c                                                                               Pump    42
c                                                                               Pump    43
c ============ HOURLY OPERATING CAPACITY - HEAD =============================== Pump    44
      CASE (21)                                                                 Pump    45
c                                                                               Pump    46
c              Calc maximum head of all pumps at given flow                     Pump    47
      IF (<pm.Mfluid> .lt. <pm;Flow@ZeroHead>)  THEN                            Pump    48
c              head at current flow                                             Pump    49
        <pm.GPMr> = <pm.Mfluid> * <pm;1/TotalFlow>                              Pump    50
        dPmax     = Curve(Jpm,<pm:HEAD-FFLOW>, <pm.GPMr>, xx)                   Pump    51
        <pm.dP>   = <pm;DesHead> * dPmax                                        Pump    52
      ELSE                                                                      Pump    53
c              flow exceeds maximum flow at 0' head                             Pump    54
        <pm.dP> = 0.01                                                          Pump    55
      ENDIF                                                                     Pump    56
c                                                                               Pump    57
c                                                                               Pump    58
c ============ HOURLY OPERATING CAPACITY - FLOW =============================== Pump    59
      CASE (22)                                                                 Pump    60
c                                                                               Pump    61
c              Calc maximum flow of all pumps at given head                     Pump    62
c              Ratio of control head to design head                             Pump    63
      IF (<pm.Psetpt> .lt. <pm;Head@ZeroFlow>)  THEN                            Pump    64
        <pm.HEADr> = <pm.Psetpt> / <pm;DesHead>                                 Pump    65
        CALL CurveInvert(Jpm,<pm:HEAD-FFLOW>, 1,<pm.GPMr>,Y,<pm.HEADr>,         Pump    66
     &                                                             Ierr)        Pump    67
        <pm.GPMr>   = MAX(0., MIN(<pm.GPMr>, <pm:MAX-RATIO>))                   Pump    68
        <pm.Mfluid> = <pm;DesFlow> * <pm.GPMr>                                  Pump    69
      ELSE                                                                      Pump    70
C              head exceeds maximum at zero flow                                Pump    71
        <pm.Mfluid> = 0.01                                                      Pump    72
      ENDIF                                                                     Pump    73
c                                                                               Pump    74
c                                                                               Pump    75
c ============ OFF ============================================================ Pump    76
      CASE (30)                                                                 Pump    77
c                                                                               Pump    78
c              Pump is off                                                      Pump    79
      CALL ZeroAA(<#pm.HrZeroStart..>, <#pm.HrZeroEnd....>)                     Pump    80
      <pm.Mfluid> = 0.                                                          Pump    81
      <pm.Psetpt> = -88888.                                                     Pump    82
c              electric node                                                    Pump    83
      Kmd = <pm:ELEC-METER>                                                     Pump    84
      IF (<md.Elec> .GT. 0.)  THEN                                              Pump    85
        Kmx           = <md;Xnode>                                              Pump    86
        <mx.IterFlag> = Jpm                                                     Pump    87
      ENDIF                                                                     Pump    88
      <md.Elec>     = 0.                                                        Pump    89
      <md.IterFlag> = 0                                                         Pump    90
c                                                                               Pump    91
c                                                                               Pump    92
c ============ HOURLY SIMULATION ============================================== Pump    93
      CASE (31:38)                                                              Pump    94
c                                                                               Pump    95
c ****         run function : Pump-1                                            Pump    96
c       IF( MSYSF(?) .NE. 0 )   CALL FINTS( MSYSF(?), 1. )                      Pump    97
                                                                                Pump    98
c              Start by assuming pumps at max output                            Pump    99
      <pm.Number> = <pm:NUMBER>    ! number staged on                           Pump   100
      <pm.RPMr>   = 1.0            ! speed ratio                                Pump   101
                                                                                Pump   102
c              Find operating head                                              Pump   103
c              Check if required head is less than pump deadhead                Pump   104
      IF (<pm.Psetpt> .ge. <pm;Head@ZeroFlow>)  THEN                            Pump   105
        <pm.Mfluid> = Min(0.01, <pm.Mfluid>)                                    Pump   106
                                                                                Pump   107
c              Check if required flow is less than freeflow                     Pump   108
      ELSEIF (<pm.Mfluid> .ge. <pm;Flow@ZeroHead>)  THEN                        Pump   109
        <pm.Mfluid> = <pm;Flow@ZeroHead>                                        Pump   110
      ELSE                                                                      Pump   111
c              Maximum head at required flow                                    Pump   112
        <pm.GPMr> = <pm.Mfluid> * <pm;1/TotalFlow>                              Pump   113
        dPmax     = Curve(Jpm,<pm:HEAD-FFLOW>, <pm.GPMr>, xx)                   Pump   114
        <pm.dP>   = <pm;DesHead> * dPmax                                        Pump   115
c              Check if pump can meet setpoint                                  Pump   116
        IF (<pm.dP> .gt. <pm.Psetpt>)  THEN                                     Pump   117
c              Ratio of setpoint head to design head                            Pump   118
          <pm.HEADr> = Max(<pm.Psetpt>,0.001) / <pm;DesHead>                    Pump   119
                                                                                Pump   120
c              See how many pumps required                                      Pump   121
          IF (<pm:NUMBER> .gt. 1)  THEN                                         Pump   122
c              maximum flow of one pump at the required head                    Pump   123
            CALL CurveInvert(Jpm, <pm:HEAD-FFLOW>,                              Pump   124
     &                            1,<pm.GPMr>,Y,<pm.HEADr>, Ierr)               Pump   125
            <pm.GPMr>   = Min(<pm.GPMr>, <pm:MAX-RATIO>)                        Pump   126
            <pm.GPMmax> = <pm;DesFlow> * <pm.GPMr>                              Pump   127
c              required number of pumps                                         Pump   128
            <pm.Number> = Float(Max(1,                                          Pump   129
     &                              Int(<pm.Mfluid>/<pm.GPMmax>+.9999)))        Pump   130
            <pm.Number> = Min(<pm.Number>, <pm:NUMBER>)                         Pump   131
          ENDIF                                                                 Pump   132
                                                                                Pump   133
c              Check if pumps can modulate                                      Pump   134
          IF (<pm:CAP-CTRL> .eq. TwoSpeed  .or.                                 Pump   135
     &        <pm:CAP-CTRL> .eq. VarSpeed)  THEN                                Pump   136
c              2-speed or variable-speed; determine speed                       Pump   137
c              flow ratio of each pump                                          Pump   138
            <pm.GPMr> = <pm.Mfluid> / (<pm;DesFlow>*<pm.Number>)                Pump   139
c              solve for speed                                                  Pump   140
            Jcv       = <pm:HEAD-FFLOW>                                         Pump   141
            Coefs(3)  = <cv:COEF-1>                                             Pump   142
            Coefs(2)  = <cv:COEF-2> * <pm.GPMr>                                 Pump   143
            Coefs(1)  = <cv:COEF-3> * <pm.GPMr>*<pm.GPMr> - <pm.HEADr>          Pump   144
            CALL CurveInvertCustom(Jpm, Coefs(1), 3,                            Pump   145
     &                             1,<pm.RPMr>,Y,0.0, RPMLIM(1), Ierr)          Pump   146
c                                                                               Pump   147
            IF (<pm:CAP-CTRL> .eq. TwoSpeed)  THEN                              Pump   148
c              if required pump speed .LE. low speed then OK                    Pump   149
              IF (<pm.RPMr> .le. <pm:MIN-SPEED>)  THEN                          Pump   150
                <pm.RPMr> = <pm:MIN-SPEED>                                      Pump   151
              ELSE                                                              Pump   152
                <pm.RPMr> = 1.0                                                 Pump   153
              ENDIF                                                             Pump   154
            ELSE                                                                Pump   155
c              variable-speed - do not let pump operate below min speed         Pump   156
              <pm.RPMr> = Max(<pm.RPMr>, <pm:MIN-SPEED>)                        Pump   157
            ENDIF                                                               Pump   158
          ENDIF  ! pumps can modulate                                           Pump   159
        ENDIF  ! pump can meet setpoint                                         Pump   160
      ENDIF  ! deadhead or freeflow                                             Pump   161
                                                                                Pump   162
c              Adjust nominal horsepower for speed.  Pump laws                  Pump   163
c              say HP=f(rpm)**3.  Use HP=f(rpm)**3.05 to account for            Pump   164
c              friction within pump which changes impeller efficiency           Pump   165
      <pm.HPrpm>  = <pm.RPMr>**<pm:POWER-EXP>                                   Pump   166
c              flow ratio of each pump, adjusted for speed                      Pump   167
      <pm.GPMr>   = <pm.Mfluid> / (<pm;DesFlow>*<pm.Number>)                    Pump   168
      <pm.xGPMr>  = <pm.GPMr> / <pm.RPMr>                                       Pump   169
c              HP vs. GPM                                                       Pump   170
      <pm.HPfGPM> = Curve(Jpm, <pm:HP-FFLOW> , <pm.xGPMr>, xx)                  Pump   171
c              actual pump head                                                 Pump   172
      <pm.dP>     = <pm;DesHead>                                                Pump   173
     &            * Curve(Jpm,<pm:HEAD-FFLOW>, <pm.xGPMr>, <pm.xGPMr>)          Pump   174
     &            * <pm.RPMr>*<pm.RPMr>                                         Pump   175
                                                                                Pump   176
c              Pump power                                                       Pump   177
      PumpKW = <pm;DesKW> * <pm.HPrpm> * <pm.HPfGPM> * <pm.Number>              Pump   178
     &                                               * <pm.RunFrac>             Pump   179
c              adjust for viscosity                                             Pump   180
      IF (<pl:FLUID-RELATNS> .EQ. 2)  THEN                                      Pump   181
        cStokes      = <pl.Visc>/6.71955E-4 * 62.3/<pl.Dens>                    Pump   182
        <pm.MechEff> = <pm:MECH-EFF>                                            Pump   183
     &               * Curve(Jpm, <pm:EFF-FVISC>, cStokes, cStokes)             Pump   184
        PumpKW       = PumpKW * <pm;DesMechEff>/<pm.MechEff>                    Pump   185
      ENDIF                                                                     Pump   186
c              loss from VFD                                                    Pump   187
      IF (<pm:CAP-CTRL> .EQ. VarSpeed)  THEN                                    Pump   188
        PLRkW          = PumpKW / (<pm;DesKW>*<pm.Number>*<pm.RunFrac>)         Pump   189
        <pm.VFDkWloss> = <pm;DesVFDkWloss> * <pm.Number> * <pm.RunFrac>         Pump   190
     &                 * Curve(Jpm, <pm:VFD-LOSS-FPLR> , PLRkW, PLRkW)          Pump   191
      ENDIF                                                                     Pump   192
c              Net electric, set flag in meter                                  Pump   193
      <pm.kW> = PumpKW + <pm.VFDkWloss>                                         Pump   194
      Kmd     = <pm:ELEC-METER>                                                 Pump   195
      IF (ABS(1. - <md.Elec>/<pm.kW>) .GT. <sp:ERROR-LOAD>)  THEN               Pump   196
        Kmx           = <md;Xnode>                                              Pump   197
        <mx.IterFlag> = Jpm                                                     Pump   198
      ENDIF                                                                     Pump   199
      <md.Elec>     = <pm.kW>                                                   Pump   200
      <md.IterFlag> = 0                                                         Pump   201
                                                                                Pump   202
c              Pump heat into loop                                              Pump   203
      <pm.Qfluid> = PumpKW * BTUKW * <pm;MotorEff>                              Pump   204
      <pm.dT>     = <pm.Qfluid> / (<pl.Btuh/GPM-F>*<pm.Mfluid>)                 Pump   205
                                                                                Pump   206
c                                                                               Pump   207
c ****         run function : Pump-2                                            Pump   208
c     IF( MSYSF(?) .NE. 0 )   CALL FINTS( MSYSF(?), 1. )                        Pump   209
c                                                                               Pump   210
c                                                                               Pump   211
c ============ REPORT CREATION ================================================ Pump   212
      CASE (50)                                                                 Pump   213
c                                                                               Pump   214
c              statistics blocks                                                Pump   215
      Ks2Load      = NewStat2(Jpm, <+pm.Qfluid>, 0, 1.)                         Pump   216
      Ks2Elec      = NewStat2(Jpm, <+pm.kW>,     0, 1.)                         Pump   217
      Ks5FlowBin   = NewStat5(Jpm, <+pm.Mfluid>, 0, 1.)                         Pump   218
      Ks5RPMBin    = NewStat5(Jpm, <+pm.RPMr>,   0, 1.)                         Pump   219
      Ks5ElecBin   = NewStat5(Jpm, <+pm.kW>,     0, 1.)                         Pump   220
c                                                                               Pump   221
c              Create the type "H" report                                       Pump   222
      IF (<pm:REPORTS> .GT. 0  .AND.  IREPRT(3,23) .GT. 0)                      Pump   223
     &  <pm;PS-H> = NewReport_H(Jpm, 61,                                        Pump   224
     &                          3, 4, 5,                                        Pump   225
     &                          Ks2Load, Ks2Elec, 0,0,                          Pump   226
     &                          Ks5FlowBin, Ks5RPMBin, Ks5ElecBin,              Pump   227
     &                          0, 0, 0)                                        Pump   228
c                                                                               Pump   229
c              Setpoint overload                                                Pump   230
      <pm;s10> = NewStat10(Jpm, <#pm.Psetpt>, <#pm.dP>, 0.1,-1,                 Pump   231
     &                          <#pm.kW>)                                       Pump   232
c                                                                               Pump   233
c                                                                               Pump   234
c ============ REPORT ORDER =================================================== Pump   235
      CASE (52)                                                                 Pump   236
c                                                                               Pump   237
      Call Report_H(Mode, <pm;PS-H>)                                            Pump   238
c                                                                               Pump   239
c                                                                               Pump   240
c ============ REPORTS - VERIFICATION DATA ==================================== Pump   241
      CASE (54)                                                                 Pump   242
c                                                                               Pump   243
c              Output design information                                        Pump   244
      IF (<pm;PS-H> .ne. 0)  THEN                                               Pump   245
        rH = <pm;PS-H>                                                          Pump   246
        NumPump = INT(<pm:NUMBER>)                                              Pump   247
        WRITE(IREPFL) 5,<rH;Iuniq>,1,1,1, NumPump                               Pump   248
c              pointer to attached loop or primary equipment                    Pump   249
        Jna = <pm;XComponent>                                                   Pump   250
c              capacity control index                                           Pump   251
        Icap = <pm:CAP-CTRL>                                                    Pump   252
        IF (NumPump .GT. 1)  Icap = Icap + 3                                    Pump   253
        WRITE(IREPFL) 20,<rH;Iuniq>,1,2,16,                                     Pump   254
     &    (<na:NAME>,II=1,8),                                                   Pump   255
     &    <pm;TotalFlow>, <pm;DesHead>, <pm;TotalKW>,                           Pump   256
     &    (PmpCtrl(II,Icap),II=1,3), <pm.MechEff>, <pm;MotorEff>                Pump   257
      ENDIF                                                                     Pump   258
c                                                                               Pump   259
c                                                                               Pump   260
c ============ REPORTS - YEARLY SUMMARY (SPECIAL) ============================= Pump   261
      CASE (58)                                                                 Pump   262
c                                                                               Pump   263
c              Setpoint overload                                                Pump   264
      IF (<pm;PS-H> .ne. 0)  THEN                                               Pump   265
        rH = <pm;PS-H>                                                          Pump   266
        CALL Report_s10(<rH;Iuniq>, 6, <pm;s10>)                                Pump   267
      ENDIF                                                                     Pump   268
c                                                                               Pump   269
c                                                                               Pump   270
c ============ HOURLY REPORTS - HOURLY DATA =================================== Pump   271
      CASE (62)                                                                 Pump   272
c                                                                               Pump   273
c              Hourly-report variables                                          Pump   274
      IF (<pm;HourRepBuf> .EQ. 0)  RETURN                                       Pump   275
c                                                                               Pump   276
      IAptr        = <pm;HourRepBuf>-1                                          Pump   277
      AA(IAptr+ 1) = <pm.Number>                                                Pump   278
      AA(IAptr+ 2) = <pm.Mfluid>                                                Pump   279
      AA(IAptr+ 3) = <pm.dP>                                                    Pump   280
      AA(IAptr+ 4) = <pm.kW>                                                    Pump   281
      AA(IAptr+ 5) = <pm.Qfluid>                                                Pump   282
      AA(IAptr+ 6) = <pm.dT>                                                    Pump   283
      AA(IAptr+ 7) = <pm.RunFrac>                                               Pump   284
      AA(IAptr+ 8) = <pm.GPMmax>                                                Pump   285
      AA(IAptr+ 9) = <pm.GPMr>                                                  Pump   286
      AA(IAptr+10) = <pm.RPMr>                                                  Pump   287
      AA(IAptr+11) = <pm.HEADr>                                                 Pump   288
      AA(IAptr+12) = <pm.HPrpm>                                                 Pump   289
      AA(IAptr+13) = <pm.xGPMr>                                                 Pump   290
      AA(IAptr+14) = <pm.HPfGPM>                                                Pump   291
      AA(IAptr+15) = <pm.Psetpt>                                                Pump   292
      AA(IAptr+16) = <pm.MechEff>                                               Pump   293
      AA(IAptr+17) = <pm.VFDkWloss>                                             Pump   294
c                                                                               Pump   295
c                                                                               Pump   296
c ============ DESIGN CALCULATIONS - INITIALIZATION =========================== Pump   297
      CASE (110)                                                                Pump   298
c                                                                               Pump   299
c                                                                               Pump   300
c ============ DESIGN CALCULATIONS ============================================ Pump   301
      CASE (111)                                                                Pump   302
c                                                                               Pump   303
c              Design pump flow                                                 Pump   304
      IF (<pm:FLOW> .GT. 0.)  THEN                                              Pump   305
        <pm;DesFlow> = <pm:FLOW>                                                Pump   306
      ELSE                                                                      Pump   307
        <pm;DesFlow> = <pm.Mfluid> * <pm:FLOW-RATIO> / <pm:NUMBER>              Pump   308
      ENDIF                                                                     Pump   309
c              Design pump head                                                 Pump   310
      IF (<pm:HEAD> .GT. 0.)  THEN                                              Pump   311
        <pm;DesHead> = <pm:HEAD>                                                Pump   312
      ELSE                                                                      Pump   313
        <pm;DesHead> = <pm.Psetpt> * <pm:HEAD-RATIO>                            Pump   314
      ENDIF                                                                     Pump   315
c                                                                               Pump   316
c              Design pump mech eff - modify for viscosity based on             Pump   317
c              Fig 6.30 in Mech. Eng. Review Manual, 6th Edition, p.6-39        Pump   318
c              Neglect changes in capacity and head, as they are minor          Pump   319
c              for typical HVAC fluids (.lt. 5% effect)                         Pump   320
      cStokes         = <pl.Visc>/6.71955E-4 * 62.3/<pl.Dens>                   Pump   321
      <pm;DesMechEff> = <pm:MECH-EFF>                                           Pump   322
     &                * Curve(Jpm, <pm:EFF-FVISC>, cStokes, cStokes)            Pump   323
      <pm.MechEff>    = <pm;DesMechEff>                                         Pump   324
c                                                                               Pump   325
c              iteration counter                                                Pump   326
      NumIter = 0                                                               Pump   327
c                                                                               Pump   328
c              Now design the pump.                                             Pump   329
c              pump brake horsepower                                            Pump   330
 1010 BHP = <pm;DesFlow> * <pm;DesHead> * <pl.Dens>                             Pump   331
     &                                 / (33000.*7.479 * <pm.MechEff>)          Pump   332
c              motor efficiency                                                 Pump   333
      IF (<pm:MOTOR-EFF> .GT. 0.)  THEN                                         Pump   334
        <pm;MotorEff> = <pm:MOTOR-EFF>                                          Pump   335
      ELSE                                                                      Pump   336
c              assume motor is 30% larger than BHP                              Pump   337
        HP            = BHP * 1.3                                               Pump   338
        <pm;MotorEff> = EffMotor(HP,<pm:MOTOR-CLASS>)                           Pump   339
      ENDIF                                                                     Pump   340
c              power consumption                                                Pump   341
      <pm;DesKW> = BHP * .746 / <pm;MotorEff>                                   Pump   342
c                                                                               Pump   343
c              If kw is user-specified, check to see if consistent              Pump   344
c              with other user input and/or design parameters                   Pump   345
      IF (<pm:KW> .GT. 0.)  THEN                                                Pump   346
        Error = <pm:KW>/<pm;DesKW>                                              Pump   347
        IF (ABS(1.-Error) .GT. 0.01)  THEN                                      Pump   348
c              inconsistent design assumptions - first try recalculating the    Pump   349
c              head, then the flow, then the mechanical efficiency.             Pump   350
          NumIter = NumIter + 1                                                 Pump   351
          IF (<pm:HEAD> .EQ. 0.  .AND.  <pm:FLOW> .EQ. 0.)  THEN                Pump   352
            Error = SQRT(Error)                                                 Pump   353
            <pm;DesHead> = <pm;DesHead> * Error                                 Pump   354
            <pm;DesFlow> = <pm;DesFlow> * Error                                 Pump   355
          ELSEIF (<pm:HEAD> .EQ. 0.)  THEN                                      Pump   356
            <pm;DesHead> = <pm;DesHead> * Error                                 Pump   357
          ELSEIF (<pm:FLOW> .EQ. 0)  THEN                                       Pump   358
            <pm;DesFlow> = <pm;DesFlow> * Error                                 Pump   359
          ELSE                                                                  Pump   360
            <pm.MechEff> = <pm.MechEff> / Error                                 Pump   361
          ENDIF                                                                 Pump   362
          IF (NumIter .LT. 11)  THEN                                            Pump   363
            GOTO 1010                                                           Pump   364
          ELSE                                                                  Pump   365
c              no solution found - shouldn't ever be here                       Pump   366
            CALL MSGSIM(-1,II,II,II,II)                                         Pump   367
            WRITE (IOUTPT, 9001)  (<pm:NAME>,II=1,8)                            Pump   368
            CALL MessageBox( NULL,                                              Pump   369
     &        'Pump design calcs have failed -'//char(10)//char(13)//           Pump   370
     &        'Check input for consistency'//char(0),                           Pump   371
     &        'PUMP Errors'//char(0),                                           Pump   372
     &        MB_OK + MB_ICONSTOP + MB_TASKMODAL )                              Pump   373
            IwinReturn = 1                                                      Pump   374
            RETURN                                                              Pump   375
          ENDIF                                                                 Pump   376
        ENDIF                                                                   Pump   377
      ENDIF                                                                     Pump   378
c              Total flow and power for all pumps, and VFD loss                 Pump   379
      <pm;TotalFlow>    = <pm;DesFlow> * <pm:NUMBER>                            Pump   380
      <pm;TotalKW>      = <pm;DesKW>   * <pm:NUMBER>                            Pump   381
      <pm;DesVFDkWloss> = <pm;DesKW>   * <pm:VFD-LOSS>                          Pump   382
      <pm.kW>           = <pm;DesKW>                                            Pump   383
c                                                                               Pump   384
c              Outlet conditions - flow, temp, reference load, pressure         Pump   385
      IF (<pm;DesFlow> .GT. 0.)  THEN                                           Pump   386
        <pm.Qfluid> = <pm;TotalKW> * <pm;MotorEff> * BTUKW                      Pump   387
        <pm.dT>     = <pm.Qfluid> / (<pl.Btuh/GPM-F>*<pm;DesFlow>)              Pump   388
      ENDIF                                                                     Pump   389
c                                                                               Pump   390
c                                                                               Pump   391
c ============ DESIGN CALCULATIONS - RECONCILIATION =========================== Pump   392
      CASE (119)                                                                Pump   393
c                                                                               Pump   394
c              Check if pump design reasonable.  First, flow                    Pump   395
      IF (<pm;DesFlow> .EQ. 0.)  THEN                                           Pump   396
        CALL MSGSIM(-1,II,II,II,II)                                             Pump   397
        WRITE (IOUTPT, 9002)  (<pm:NAME>,II=1,8)                                Pump   398
        CALL MessageBox( NULL,                                                  Pump   399
     &    'Pump has zero design flow'//char(0),                                 Pump   400
     &    'PUMP Errors'//char(0),                                               Pump   401
     &    MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                  Pump   402
        IwinReturn = 1                                                          Pump   403
        RETURN                                                                  Pump   404
      ENDIF                                                                     Pump   405
      IF (<pm;TotalFlow> .LT. <pm.Mfluid>*0.95)  THEN                           Pump   406
        CALL MSGSIM(-2,II,II,II,II)                                             Pump   407
        WRITE (IOUTPT,9003) (<pm:NAME>,II=1,8),                                 Pump   408
     &                       <pm;TotalFlow>, <pm.Mfluid>                        Pump   409
      ENDIF                                                                     Pump   410
c              head                                                             Pump   411
      IF (<pm;DesHead> .LT. <pm.Psetpt>*0.95)  THEN                             Pump   412
        CALL MSGSIM(-2,II,II,II,II)                                             Pump   413
        WRITE (IOUTPT,9004)  (<pm:NAME>,II=1,8), <pm;DesHead>,                  Pump   414
     &                                           <pm.Psetpt>                    Pump   415
      ENDIF                                                                     Pump   416
c              mechanical efficiency                                            Pump   417
      IF (<pm.MechEff> .NE. <pm:MECH-EFF>)  THEN                                Pump   418
        IF (<pm.MechEff> .LT. 0.25  .OR.  <pm.MechEff> .GT. 0.90)  THEN         Pump   419
          CALL MSGSIM(-1,II,II,II,II)                                           Pump   420
          WRITE (IOUTPT,9005)  (<pm:NAME>,II=1,8), <pm.MechEff>                 Pump   421
          CALL MessageBox( NULL,                                                Pump   422
     &      'Pump input parameters are inconsistent'//char(0),                  Pump   423
     &      'PUMP Errors'//char(0),                                             Pump   424
     &      MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                Pump   425
          IwinReturn = 1                                                        Pump   426
          RETURN                                                                Pump   427
        ELSE                                                                    Pump   428
          CALL MSGSIM(-3,II,II,II,II)                                           Pump   429
          WRITE (IOUTPT,9006)  (<pm:NAME>,II=1,8), <pm.MechEff>                 Pump   430
        ENDIF                                                                   Pump   431
      ENDIF                                                                     Pump   432
c              Check to make sure that max flow ratio is reasonable.            Pump   433
c              Get flow at 25% design head                                      Pump   434
      CALL CurveInvert(Jpm,<pm:HEAD-FFLOW>, 1,PmpGPMr,Y,0.25, Ierr)             Pump   435
c              compare to specified                                             Pump   436
      IF (<pm:MAX-RATIO> .GT. PmpGPMr)  THEN                                    Pump   437
        CALL MSGSIM(-2,II,II,II,II)                                             Pump   438
        WRITE (IOUTPT, 9007)  (<pm:NAME>,II=1,8), PmpGPMr                       Pump   439
        <pm:MAX-RATIO> = PmpGPMr                                                Pump   440
      ENDIF                                                                     Pump   441
c                                                                               Pump   442
      IF (<pm;TotalFlow> .GT. 0.)                                               Pump   443
     &  <pm;1/TotalFlow> = 1.0 / <pm;TotalFlow>                                 Pump   444
                                                                                Pump   445
c              Outer bounds of head vs. flow curve                              Pump   446
      CALL CurveInvert(Jpm,<pm:HEAD-FFLOW>, 1,PmpGPMr,Y,0.01, Ierr)             Pump   447
      <pm;Flow@ZeroHead> = <pm;DesFlow> * PmpGPMr * <pm:NUMBER>                 Pump   448
      HEADr              = Curve(Jpm,<pm:HEAD-FFLOW>, 0.01, xx)                 Pump   449
      <pm;Head@ZeroFlow> = <pm;DesHead> * HEADr                                 Pump   450
c                                                                               Pump   451
c                                                                               Pump   452
c ============ ATTACHMENTS ==================================================== Pump   453
c                                                                               Pump   454
c              Initial attachments                                              Pump   455
      CASE (201)                                                                Pump   456
c              Component pointers, schedules, and curves                        Pump   457
        <pm:ELEC-METER>    = Jcomponent(13, <pm:ELEC-METER>)                    Pump   458
        <pm:COST-DATA>     = Jcomponent(18, <pm:COST-DATA>)                     Pump   459
        <pm:HEAD-FFLOW>    = Jcurve(<pm:HEAD-FFLOW>)                            Pump   460
        <pm:HP-FFLOW>      = Jcurve(<pm:HP-FFLOW>)                              Pump   461
        <pm:EFF-FVISC>     = Jcurve(<pm:EFF-FVISC>)                             Pump   462
        <pm:VFD-LOSS-FPLR> = Jcurve(<pm:VFD-LOSS-FPLR>)                         Pump   463
c              force pump number to be an integer                               Pump   464
        <pm:NUMBER>   = MAX(1., FLOAT(INT(<pm:NUMBER>+0.5)))                    Pump   465
c                                                                               Pump   466
c              Second level of attachments                                      Pump   467
      CASE (202)                                                                Pump   468
c                                                                               Pump   469
c              Create nodes                                                     Pump   470
      CASE (203)                                                                Pump   471
c              meter                                                            Pump   472
        Jme = <pm:ELEC-METER>                                                   Pump   473
        <pm:ELEC-METER> = NewNode(1, Jpl,0,Jpm,Jme, 11,2,7, 1.)                 Pump   474
c              Note that no inlet or outlet node                                Pump   475
c                                                                               Pump   476
c                                                                               Pump   477
      END SELECT  ! Mode                                                        Pump   478
c                                                                               Pump   479
      RETURN                                                                    Pump   480
c                                                                               Pump   481
c              Message formats                                                  Pump   482
 9001 FORMAT(14X,'Pump: ',8A4,' design calcs could not'                /        Pump   483
     &       14X,'find a solution in 10 iterations.  Check input for'  /        Pump   484
     &       14X,'consistency, or allow program to calculate kW.'      )        Pump   485
 9002 FORMAT(14X,'Pump: ',8A4,' has zero design flow.  If attached to' /        Pump   486
     &       14X,'a DHW loop, make sure the recirculation flow is '    /        Pump   487
     &       14X,'nonzero.'                                            )        Pump   488
 9003 FORMAT(14X,'Pump: ',8A4,' has a total user-specified flow'       /        Pump   489
     &       14X,'of ',F10.1,' gpm, but the loop flow is ',F10.1       ,        Pump   490
     &           ' gpm.'                                               )        Pump   491
 9004 FORMAT(14X,'Pump: ',8A4,' has a user-specified head'             /        Pump   492
     &       14X,'of ',F10.1,' feet, required head is ',F10.1,' feet.' )        Pump   493
 9005 FORMAT(14X,'Pump: ',8A4,' has user specified'                    /        Pump   494
     &       14X,'parameters that force the mechanical efficiency to'  /        Pump   495
     &       14X,'be unreasonable.  Check input or allow the program'  /        Pump   496
     &       14X,'to calculate the kW.'                                /        Pump   497
     &       14X,'Calculated mechanical efficiency =',F10.3            )        Pump   498
 9006 FORMAT(14X,'Pump: ',8A4,' has user specified'                    /        Pump   499
     &       14X,'parameters that force the mechanical efficiency to'  /        Pump   500
     &       14X,'be recalculated as',F6.3                             )        Pump   501
 9007 FORMAT(14X,'Pump: ',8A4,' has a PUMP-MAX-RATIO greater'          /        Pump   502
     &       14X,'than the flow corresponding to 25% of design head.'  /        Pump   503
     &       14X,'MAX-RATIO will be reset to ',F4.2                    )        Pump   504
 9101 FORMAT(14X,'Pump: ',8a4,' cannot match the system'               /        Pump   505
     &       14X,'flow at the minimum required head.'                  /        Pump   506
     &       14X,'Required system flow =',F7.1,' gpm at head =',F6.1   /        Pump   507
     &       14X,'Pump balance point =',F7.1,' gpm at head of',F6.1    /        Pump   508
     &       14X,'If the pump was sized by default, most likely this'  /        Pump   509
     &       14X,'is caused by a primary equipment unit operating at'  /        Pump   510
     &       14X,'greater than its design flow, and causing a pressure'/        Pump   511
     &       14X,'drop greater than design.  Try increasing the pump'  /        Pump   512
     &       14X,'head or head ratio to compensate.'                   /        Pump   513
     &       14X,'First occurrence is on ',I2,'/',I2,', hour ',I2      )        Pump   514
c                                                                               Pump   515
      END                                                                       Pump   516
      SUBROUTINE Pump_Detach(Jpm)                                               PmpDtch  2
c                                                                               PmpDtch  3
c              Detaches an unused pump                                          PmpDtch  4
c                                                                               PmpDtch  5
c              Jpm  Pointer to the pump                                         PmpDtch  6
c                                                                               PmpDtch  7
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
c                                                                               PmpDtch 11
      CALL MSGSIM(-2,II,II,II,II)                                               PmpDtch 12
      WRITE (IOUTPT,9001)  (<pm:NAME>,II=1,8)                                   PmpDtch 13
c                                                                               PmpDtch 14
      JpmPrevious = <pm;Previous>                                               PmpDtch 15
      JpmNext     = <pm;Next>                                                   PmpDtch 16
c                                                                               PmpDtch 17
      IF (JpmPrevious .GT. 0)  THEN                                             PmpDtch 18
        Jpm       = JpmPrevious                                                 PmpDtch 19
        <pm;Next> = JpmNext                                                     PmpDtch 20
      ENDIF                                                                     PmpDtch 21
c                                                                               PmpDtch 22
      IF (JpmNext .GT. 0)  THEN                                                 PmpDtch 23
        Jpm           = JpmNext                                                 PmpDtch 24
        <pm;Previous> = JpmPrevious                                             PmpDtch 25
      ENDIF                                                                     PmpDtch 26
c                                                                               PmpDtch 27
c              Detach all nodes                                                 PmpDtch 28
      CALL DetachNode(<pm:ELEC-METER>)                                          PmpDtch 29
c                                                                               PmpDtch 30
      RETURN                                                                    PmpDtch 31
 9001 FORMAT(14x,'Pump: ',8A4,' is not attached to any'                /        PmpDtch 32
     &       14x,'component.  Will be ignored.'                        )        PmpDtch 33
      END                                                                       PmpDtch 34
C ##############################################################################HtExch   2
C ##############################################################################HtExch   3
C ##############################################################################HtExch   4
C ##############################################################################HtExch   5
C ##########                                                          ##########HtExch   6
C ##########                 HEAT-EXCHANGER ROUTINES                  ##########HtExch   7
C ##########                                                          ##########HtExch   8
C ##############################################################################HtExch   9
C ##############################################################################HtExch  10
C ##############################################################################HtExch  11
C ##############################################################################HtExch  12
c                                                                               HtExch  13
c  NewHtExch           Creates a new heat-exchanger block                       HtExch  14
c  HtExchAlgs           Selects the correct algorithm                           HtExch  15
c                       Supply   to   Demand                                    HtExch  16
      SUBROUTINE HX(Mode, Khx,     Qhx,                                         HX       2
     &                         SupFlow, SupTi, SupTo,                           HX       3
     &                         DemFlow, DemTi, DemTo)                           HX       4
                                                                                HX       5
c              Simulates sensible heat exchangers                               HX       6
                                                                                HX       7
c              Khx      Pointer to heat exchanger component                     HX       8
c              Qhx      Heat transferred across HX                              HX       9
c              SupFlow  Supply side flow, cfm, gpm, lbs/hr                      HX      10
c              SupTi    Supply side inlet temperature                           HX      11
c              SupTo    Supply side outlet temperature                          HX      12
c              DemFlow  Demand side flow, cfm, gpm, lbs/hr                      HX      13
c              DemTi    Demand side inlet temperature                           HX      14
c              DemTo    Demand side outlet temperature                          HX      15
                                                                                HX      16
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /FNSYS/  ISKIPS, MSYSF(120)                                       /FNSYS/  2
      COMMON  /HRREP / Irb, Ihrp, Lrb, Lhrp, Nrb, Nhrp, IVTLIM(3,50),           HRr      1
     &                 IGRPtr, IBRPtr, IRSch, IRSchT(5),                        HRr      2
     &                 NHRTyp(3), ITBUF(3), ITBUFB(3), ITBUFE(3),               HRr      3
     &                 IHREOF, ICDFLG                                           HRr      4
      COMMON  /HXdat / HXerror, HXconfig, HXua, Csup, Cdem, Cmin,               /HXdat/  2
     &                 HXeff, UAeff                                             /HXdat/  3
      INTEGER          HXconfig                                                 /HXdat/  4
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
      COMMON  /TIME  / IDOY, IDOW, IDSTF, ISCHR, ISCDAY, iDSdates(6),           /TIME/   2
     &                 IMO, IDAY, IYR, IHR, CLOCK(10), IDSFLG,                  /TIME/   3
     &                 MONDSC(12), MONLEN(12), MONSDA(12), IEODMR               /TIME/   4
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
                                                                                HX      26
      COMMON  /HXKY  / Counterflow, Parallelflow, CrossflowNoMix,               /HXKY/   2
     &                 CrossflowBothMix, CrossflowDemMix,                       /HXKY/   3
     &                 CrossflowSupMix                                          /HXKY/   4
      INTEGER          Counterflow, Parallelflow, CrossflowNoMix,               /HXKY/   5
     &                 CrossflowBothMix, CrossflowDemMix,                       /HXKY/   6
     &                 CrossflowSupMix                                          /HXKY/   7
                                                                                HX      28
      INTEGER  Routine(4)                                                       HX      29
      DATA     Routine    /4HHX  ,4H    ,4H    ,4H    /                         HX      30
                                                                                HX      31
c              Mode specifies the parameters to solve, given other data         HX      32
                                                                                HX      33
c              Mode  Qhx  SupFlow  SupTi  SupTo  DemFlow  DemTi  DemTo          HX      34
c              ----  ---  -------  -----  -----  -------  -----  -----          HX      35
c                1  Solve  Given   Given  Solve   Given   Given  Solve          HX      36
c                2  Given  Given   Solve  Solve   Given   Given  -----          HX      37
c                3  Given  Solve   Given  Solve   Given   Given  Solve          HX      38
c                4  Given  Given   Given  -----   Given   Solve  Solve          HX      39
c                5  Given  Given   Given  -----   Solve   Given  Solve          HX      40
                                                                                HX      41
c              Mode 3 : Before modulating SupFlow, Mode 1 or 2 must first       HX      42
c                       be called to establish that demand can be met at        HX      43
c                       maximum allowed SupFlow                                 HX      44
                                                                                HX      45
      HXconfig = <hx:CONFIGURATION>                                             HX      46
                                                                                HX      47
c              Fluid specific heats, if calculated hourly                       HX      48
      <hx;CpSupply> = AA(<hx;AAptrCpSupply>)                                    HX      49
      <hx;CpDemand> = AA(<hx;AAptrCpDemand>)                                    HX      50
                                                                                HX      51
c              Calculate what is needed                                         HX      52
      SELECT CASE (Mode)                                                        HX      53
                                                                                HX      54
c              Get heat transfer and leaving temps                              HX      55
        CASE (1)                                                                HX      56
          Call CalcQhx                                                          HX      57
          Qhx   = QhxNew                                                        HX      58
          SupTo = SupTi + Qhx/Csup                                              HX      59
          DemTo = DemTi - Qhx/Cdem                                              HX      60
                                                                                HX      61
c              Calc required supply-side inlet and outlet temperatures          HX      62
c              when heat transfer and flows are specified.                      HX      63
        CASE (2)                                                                HX      64
c              First, get transport factors and effectiveness                   HX      65
          Call CalcQhx                                                          HX      66
c              Required supply temperatures                                     HX      67
          SupTi = DemTi - Qhx/UAeff                                             HX      68
          SupTo = SupTi + Qhx/Csup                                              HX      69
                                                                                HX      70
c              Calc required supply flow and leaving T given the load           HX      71
        CASE (3)                                                                HX      72
          ABS_Qhx = ABS(Qhx)                                                    HX      73
          Save    = SupFlow                                                     HX      74
          FlowMin = 0.                                                          HX      75
          QhxMin  = 0.                                                          HX      76
c              get upper bound on hx performance                                HX      77
          SupFlow = <hx;DesMsup>                                                HX      78
          DO  iCount=1,100                                                      HX      79
            Call CalcQhx                                                        HX      80
            IF (ABS(QhxNew) .GT. ABS_Qhx)  Exit                                 HX      81
c              reset lower bound                                                HX      82
            FlowMin = SupFlow                                                   HX      83
            QhxMin  = QhxNew                                                    HX      84
c              increase upper bound                                             HX      85
            SupFlow = SupFlow * 2.                                              HX      86
            IF (iCount .EQ. 100)                                                HX      87
     &        CALL CnvgMsg2(1, Routine, Jparent(<hx;Parent>))                   HX      88
          ENDDO                                                                 HX      89
c              upper bound is found                                             HX      90
          FlowMax = SupFlow                                                     HX      91
          QhxMax  = QhxNew                                                      HX      92
c              if non-zero, first guess is value last calculated                HX      93
          IF (Save .GT. 0.)  THEN                                               HX      94
            SupFlow = MIN(FlowMax, MAX(Save, FlowMin))                          HX      95
          ELSE                                                                  HX      96
            Ratio   = (Qhx-QhxMin) / (QhxMax-QhxMin)                            HX      97
            SupFlow = FlowMin + (FlowMax-FlowMin)*Ratio                         HX      98
          ENDIF                                                                 HX      99
          Denom = 1. / Qhx                                                      HX     100
          DO  iCount=1,100                                                      HX     101
c                hx performance at this flow                                    HX     102
            Call CalcQhx                                                        HX     103
c                compare hx performance to required performance                 HX     104
            Error = 1. - QhxNew*Denom                                           HX     105
            IF (ABS(Error) .LT. HXerror)  EXIT                                  HX     106
c                tighten solution boundaries                                    HX     107
            IF (ABS(QhxNew) .GT. ABS_Qhx)  THEN                                 HX     108
              FlowMax = SupFlow                                                 HX     109
              QhxMax  = QhxNew                                                  HX     110
            ELSE                                                                HX     111
              FlowMin = SupFlow                                                 HX     112
              QhxMin  = QhxNew                                                  HX     113
            ENDIF                                                               HX     114
c                Interpolate for SupFlow between solution boundaries            HX     115
            Ratio   = (Qhx-QhxMin) / (QhxMax-QhxMin)                            HX     116
            Ratio   = MAX(0.15, MIN(0.85, Ratio))                               HX     117
            SupFlow = FlowMin + (FlowMax-FlowMin)*Ratio                         HX     118
            IF (iCount .EQ. 100)                                                HX     119
     &        CALL CnvgMsg2(2, Routine, Jparent(<hx;Parent>))                   HX     120
          ENDDO                                                                 HX     121
          SupTo = SupTi + QhxNew/Csup                                           HX     122
                                                                                HX     123
        CASE (4)                                                                HX     124
c              Determine demand-side inlet and outlet temperatures when         HX     125
c              heat transfer and flows are specified                            HX     126
          Call CalcQhx                                                          HX     127
          DemTi = SupTi + Qhx/UAeff                                             HX     128
          DemTo = DemTi - Qhx/Cdem                                              HX     129
                                                                                HX     130
        CASE (5)                                                                HX     131
c ?? doesn't work for phase change because supply flow is decoupled from demand HX     132
c ?? flow - see refg chiller                                                    HX     133
c              Determine demand-side load and flow given demand-side            HX     134
c              inlet and outlet temps.                                          HX     135
          dTdem = ABS(DemTi-DemTo)                                              HX     136
c              get upper bound on hx performance                                HX     137
          Save    = DemFlow                                                     HX     138
          Call CalcQhx                                                          HX     139
          dTmin   = ABS(QhxNew/Cdem)                                            HX     140
          IF (dTmin .GE. dTdem)  THEN                                           HX     141
c              hx will deliver maximum flow                                     HX     142
            Qhx = Cdem * dTdem                                                  HX     143
          ELSE                                                                  HX     144
c              hx will deliver less than maximum flow                           HX     145
            FlowMax = DemFlow                                                   HX     146
            FlowMin = 0.                                                        HX     147
            dTmax   = ABS(SupTi-DemTi)                                          HX     148
c              first guess is value last calculated                             HX     149
            DemFlow = Save                                                      HX     150
            Denom   = 1. / dTdem                                                HX     151
            DO  iCount=1,100                                                    HX     152
c                 hx performance at this flow                                   HX     153
              Call CalcQhx                                                      HX     154
c                 compare hx performance to required performance                HX     155
              dT    = ABS(QhxNew/Cdem)                                          HX     156
              Error = 1. - dT*Denom                                             HX     157
              IF (ABS(Error) .LT. HXerror)  EXIT                                HX     158
c                 tighten solution boundaries                                   HX     159
              IF (dT .LT. dTdem)  THEN                                          HX     160
                FlowMax = DemFlow                                               HX     161
                dTmin   = dT                                                    HX     162
              ELSE                                                              HX     163
                FlowMin = DemFlow                                               HX     164
                dTMax   = dT                                                    HX     165
              ENDIF                                                             HX     166
c                Interpolate for DemFlow between solution boundaries            HX     167
              Ratio   = (dTdem-dTmin) / (dTmax-dTmin)                           HX     168
              Ratio   = MIN(0.85, MAX(0.15, Ratio))                             HX     169
              DemFlow = FlowMax + (FlowMin-FlowMax)*Ratio                       HX     170
              IF (iCount .EQ. 100)                                              HX     171
     &          CALL CnvgMsg2(3, Routine, Jparent(<hx;Parent>))                 HX     172
            ENDDO                                                               HX     173
            Qhx = QhxNew                                                        HX     174
          ENDIF                                                                 HX     175
      END SELECT  ! Mode                                                        HX     176
                                                                                HX     177
      <hx;Qnet>  = Qhx                                                          HX     178
      RETURN                                                                    HX     179
                                                                                HX     180
      CONTAINS                                                                  HX     181
c ============== CalcQhx =======================================================HX     182
      Subroutine CalcQhx                                                        HX     183
                                                                                HX     184
c              Calculates the heat transfer of the HX                           HX     185
                                                                                HX     186
c              Calculate the UA from the film resistances                       HX     187
      Rsup = FluidFilm(<hx;FluidPropSup>, SupFlow)                              HX     188
      Rdem = FluidFilm(<hx;FluidPropDem>, DemFlow)                              HX     189
      Rtot = Rsup + <hx;Rmedia> + Rdem                                          HX     190
      HXua = 1. / Rtot                                                          HX     191
                                                                                HX     192
c              Fluid capacity rates                                             HX     193
      Csup = SupFlow * <hx;CpSupply>                                            HX     194
      Cdem = DemFlow * <hx;CpDemand>                                            HX     195
                                                                                HX     196
c              Effectiveness and heat transferred                               HX     197
      Call HX_Eff                                                               HX     198
      UAeff  = HXeff * Cmin                                                     HX     199
      QhxNew = UAeff * (DemTi-SupTi)                                            HX     200
                                                                                HX     201
      End Subroutine CalcQhx                                                    HX     202
c                                                                               HX     203
      END                                                                       HX     204
      SUBROUTINE HX_Design(Khx, QhxDesign,                                      HXdes    2
     &                            SupFlow, SupCp, SupTi,                        HXdes    3
     &                            DemFlow, DemCp, DemTi)                        HXdes    4
                                                                                HXdes    5
c              Design calculations for a sensible heat exchanger                HXdes    6
                                                                                HXdes    7
c              Khx         Pointer to heat-exchanger component                  HXdes    8
c              QhxDesign   Required heat transfer, Btuh                         HXdes    9
c              SupFlow     Supply-side flow, cfm or gpm                         HXdes   10
c              SupCp       Supply-side heat capacity, Btu/(hr-F-flow)           HXdes   11
c              SupTi       Supply-side inlet temperature                        HXdes   12
c              DemFlow     Demand-side flow, cfm or gpm                         HXdes   13
c              DemCp       Demand-side heat capacity, Btu/(hr-F-flow)           HXdes   14
c              DemTi       Demand-side inlet temperature                        HXdes   15
                                                                                HXdes   16
c              SupCp and DemCp include the units of flow (cfm, gpm, etc.)       HXdes   17
c              so that the hourly algorithm can be passed the supply-side       HXdes   18
c              and demand-side flow in actual units of cfm, gpm, etc.           HXdes   19
                                                                                HXdes   20
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /HXdat / HXerror, HXconfig, HXua, Csup, Cdem, Cmin,               /HXdat/  2
     &                 HXeff, UAeff                                             /HXdat/  3
      INTEGER          HXconfig                                                 /HXdat/  4
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
c                                                                               HXdes   27
      INTEGER  Routine(4)                                                       HXdes   28
      DATA     Routine    /4HHX_D,4Hesig,4Hn   ,4H    /                         HXdes   29
                                                                                HXdes   30
      Jna = <hx;Parent>                                                         HXdes   31
                                                                                HXdes   32
c              error for design calcs                                           HXdes   33
      ErrorMax = <sp:ERROR-LOAD> / 10.                                          HXdes   34
                                                                                HXdes   35
c              Check heat-exchanger resistances for consistency                 HXdes   36
      IF (1.-(<hx:SUP-FILM-RES>+<hx:DEM-FILM-RES>).LT. 0.)  THEN                HXdes   37
c              Unreal supply/demand resistance fractions                        HXdes   38
        CALL MSGSIM(-1,II,II,II,II)                                             HXdes   39
        WRITE (IOUTPT, 9001)  (<na:NAME>,II=1,8)                                HXdes   40
        call MessageBox( NULL, 'HT-EXCH design error -'                         HXdes   41
     &    //' ABORTING'//char(0),'HT-EXCHD Errors'//char(0), MB_OK              HXdes   42
     &    + MB_ICONSTOP + MB_TASKMODAL )                                        HXdes   43
        IwinReturn = 1                                                          HXdes   44
        RETURN                                                                  HXdes   45
      ENDIF                                                                     HXdes   46
                                                                                HXdes   47
c              Store miscellaneous parameters                                   HXdes   48
      <hx;TDinlets> = DemTi - SupTi                                             HXdes   49
      <hx;DesMsup>  = SupFlow                                                   HXdes   50
      <hx;DesMdem>  = DemFlow                                                   HXdes   51
c              specific heats include the units of flow (gpm, cfm, etc.)        HXdes   52
      <hx;CpSupply> = SupCp                                                     HXdes   53
      <hx;CpDemand> = DemCp                                                     HXdes   54
                                                                                HXdes   55
c              Don't attempt to design until load is known                      HXdes   56
      IF (QhxDesign .EQ. 0.)  RETURN                                            HXdes   57
                                                                                HXdes   58
      IF (<hx:UA> .NE. 0.)  THEN                                                HXdes   59
c              Rated UA is specified.  Solve for the design UA.                 HXdes   60
        <hx;RatedUA> = <hx:UA>                                                  HXdes   61
        Rrated       = 1. / <hx:UA>                                             HXdes   62
c              Rated supply-side, demand-side, and media resistances            HXdes   63
        Rsup         = Rrated * <hx:SUP-FILM-RES>                               HXdes   64
        Rdem         = Rrated * <hx:DEM-FILM-RES>                               HXdes   65
        <hx;Rmedia>  = Rrated - (Rsup+Rdem)                                     HXdes   66
                                                                                HXdes   67
c?? revisit this; not sure why I did it                                         HXdes   68
c              Iterate to solve for design (not rated) UA                       HXdes   69
        Qhx     = QhxDesign                                                     HXdes   70
        QhxLast = 0.                                                            HXdes   71
        DO  Iter=1,10                                                           HXdes   72
c              Given rated resistances, solve for design resistances            HXdes   73
          CALL FluidFilm_Design(1, <hx;FluidPropSup>, Rsup,<hx;Rsupply>,        HXdes   74
     &                             SupFlow, SupTi, Qhx)                         HXdes   75
          CALL FluidFilm_Design(1, <hx;FluidPropDem>, Rdem,<hx;Rdemand>,        HXdes   76
     &                             DemFlow, DemTi, -Qhx)                        HXdes   77
c              heat transfered                                                  HXdes   78
          CALL HX(1, Khx, Qhx,                                                  HXdes   79
     &                SupFlow, SupTi, SupTo,                                    HXdes   80
     &                DemFlow, DemTi, DemTo)                                    HXdes   81
          IF (ABS(1. - QhxLast/Qhx) .LT. ErrorMax)  EXIT                        HXdes   82
          IF (Iter .GT. 5)  Qhx = (Qhx+QhxLast) * 0.5                           HXdes   83
          QhxLast = Qhx                                                         HXdes   84
        ENDDO                                                                   HXdes   85
        <hx;DesUA> = 1. / (<hx;Rsupply>+<hx;Rmedia>+<hx;Rdemand>)               HXdes   86
        <hx;DesQ>  = Qhx                                                        HXdes   87
        <hx;Qnet>  = Qhx                                                        HXdes   88
        QhxDesign  = Qhx                                                        HXdes   89
      ELSE                                                                      HXdes   90
c              Default the design UA                                            HXdes   91
        <hx;DesUA> = HX_UA(Khx, QhxDesign,                                      HXdes   92
     &                            SupFlow, SupCp, SupTi,                        HXdes   93
     &                            DemFlow, DemCp, DemTi)                        HXdes   94
                                                                                HXdes   95
c              Design UA is now known.  Solve for the rated UA                  HXdes   96
c              First guess of rated resistance                                  HXdes   97
        Rrated = 0.1 / <hx;DesUA>                                               HXdes   98
        DO  Iter=1,100                                                          HXdes   99
c              Rated supply-side, demand-side, and media resistances            HXdes  100
          Rsup        = Rrated * <hx:SUP-FILM-RES>                              HXdes  101
          Rdem        = Rrated * <hx:DEM-FILM-RES>                              HXdes  102
          <hx;Rmedia> = Rrated - (Rsup+Rdem)                                    HXdes  103
c              Now get the design (not rated) resistances                       HXdes  104
          CALL FluidFilm_Design(1, <hx;FluidPropSup>, Rsup,<hx;Rsupply>,        HXdes  105
     &                             SupFlow, SupTi, QhxDesign)                   HXdes  106
          CALL FluidFilm_Design(1, <hx;FluidPropDem>, Rdem,<hx;Rdemand>,        HXdes  107
     &                             DemFlow, DemTi, -QhxDesign)                  HXdes  108
          UAdesign = 1. / (<hx;Rsupply> + <hx;Rmedia> + <hx;Rdemand>)           HXdes  109
          Error    = UAdesign/<hx;DesUA>                                        HXdes  110
          IF (ABS(1.-Error) .LT. ErrorMax)  EXIT                                HXdes  111
          Rrated   = Rrated * MAX(0.5, MIN(1.5, Error))                         HXdes  112
          IF (Iter .EQ. 100)                                                    HXdes  113
     &      CALL CnvgMsg2(1, Routine, Jparent(<hx;Parent>))                     HXdes  114
        ENDDO                                                                   HXdes  115
        <hx;RatedUA> = 1. / Rrated                                              HXdes  116
        <hx;DesQ>  = QhxDesign                                                  HXdes  117
      ENDIF                                                                     HXdes  118
                                                                                HXdes  119
      RETURN                                                                    HXdes  120
                                                                                HXdes  121
c              message formats                                                  HXdes  122
 9001 FORMAT(14X,'Heat-Exchanger supply-side and demand-side film'     /        HXdes  123
     &       14X,'resistances are inconsistent.  Component: ',8A4      )        HXdes  124
      END                                                                       HXdes  125
      Subroutine HX_Eff                                                         HXEff    2
c                                                                               HXEff    3
c              Calculates the effectiveness of a heat exchanger                 HXEff    4
c                                                                               HXEff    5
c              HXconfig  Type of heat exchanger                                 HXEff    6
c              HXua      UA product of heat exchanger                           HXEff    7
c              Csup      Supply-side heat transport capacity                    HXEff    8
c              Cdem      Demand-side heat transport capacity                    HXEff    9
c                                                                               HXEff   10
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON  /HXdat / HXerror, HXconfig, HXua, Csup, Cdem, Cmin,               /HXdat/  2
     &                 HXeff, UAeff                                             /HXdat/  3
      INTEGER          HXconfig                                                 /HXdat/  4
                                                                                HXEff   13
      REAL    NTU                                                               HXEff   14
c                                                                               HXEff   15
      Cmin = Min(Csup, Cdem)                                                    HXEff   16
      Cmax = Max(Csup, Cdem)                                                    HXEff   17
      C    = Cmin / Cmax                                                        HXEff   18
      NTU  = HXua / Cmin                                                        HXEff   19
c                                                                               HXEff   20
c              effectiveness                                                    HXEff   21
      SELECT CASE (HXconfig)                                                    HXEff   22
        CASE (-1) ! uniform temperature both sides                              HXEff   23
          HXeff = HXua / Cmin                                                   HXEff   24
c                                                                               HXEff   25
        CASE (0)  ! phase change on one side                                    HXEff   26
          HXeff = 1.0 - EXP(-NTU)                                               HXEff   27
c                                                                               HXEff   28
        CASE (1)  ! counterflow                                                 HXEff   29
          IF (C .LT. .9999)  THEN                                               HXEff   30
            x = EXP(-NTU*(1.-C))                                                HXEff   31
            HXeff = (1.0 - x) / (1.0 - C*x)                                     HXEff   32
          ELSE                                                                  HXEff   33
            HXeff = NTU / (1.+NTU)                                              HXEff   34
          ENDIF                                                                 HXEff   35
c                                                                               HXEff   36
        CASE (2)  ! parallel flow                                               HXEff   37
          HXeff = (1.0 - EXP(-NTU*(1.+C))) / (1.0 + C)                          HXEff   38
c                                                                               HXEff   39
        CASE (3)  ! crossflow with no mixing                                    HXEff   40
          x = NTU**(-0.22)                                                      HXEff   41
          HXeff = 1. - EXP((EXP(-NTU*C*x)-1.)/(C*x))                            HXEff   42
c                                                                               HXEff   43
        CASE (4)  ! crossflow with both streams mixed                           HXEff   44
          HXeff = 1. / (1./(1.-EXP(-NTU))                                       HXEff   45
     &          + C/(1.-EXP(-NTU*C)) - 1./NTU)                                  HXEff   46
c                                                                               HXEff   47
        CASE ( 5)  ! crossflow with demand side mixed                           HXEff   48
          IF (Cdem .EQ. Cmin)  THEN                                             HXEff   49
c              Cmin is mixed, Cmax is unmixed                                   HXEff   50
            HXeff = 1. - EXP(-(1.-EXP(-NTU*C)) / C)                             HXEff   51
          ELSE                                                                  HXEff   52
c              Cmin is unmixed, Cmax is mixed                                   HXEff   53
            HXeff = (1.-EXP(-C*(1.-EXP(-NTU)))) / C                             HXEff   54
          ENDIF                                                                 HXEff   55
c                                                                               HXEff   56
        CASE (6)  ! crossflow with supply side mixed                            HXEff   57
          IF (Csup .EQ. Cmin)  THEN                                             HXEff   58
c              Cmin is mixed, Cmax is unmixed                                   HXEff   59
            HXeff = 1. - EXP(-(1.-EXP(-NTU*C)) / C)                             HXEff   60
          ELSE                                                                  HXEff   61
c              Cmin is unmixed, Cmax is mixed                                   HXEff   62
            HXeff = (1.-EXP(-C*(1.-EXP(-NTU)))) / C                             HXEff   63
          ENDIF                                                                 HXEff   64
c                                                                               HXEff   65
        CASE (7)  ! 1-2 Parallel-Counterflow                                    HXEff   66
          y = (1.+C*C)**0.5                                                     HXEff   67
          x = -NTU*Y                                                            HXEff   68
          HXeff = 2. / (1.+C + y*(1.+EXP(x))/(1.-EXP(x)) )                      HXEff   69
      END SELECT                                                                HXEff   70
c                                                                               HXEff   71
      RETURN                                                                    HXEff   72
      END                                                                       HXEff   73
      FUNCTION HX_UA(Khx, QhxDesign,                                            HXUA     2
     &                      SupFlow, SupCp, SupTi,                              HXUA     3
     &                      DemFlow, DemCp, DemTi)                              HXUA     4
                                                                                HXUA     5
c              Calculates the design UA product for a heat-exchanger            HXUA     6
                                                                                HXUA     7
c              Khx         Pointer to this heat exchanger                       HXUA     8
c              QhxDesign   Design heat rejection                                HXUA     9
c              SupFlow     Supply fluid flow                                    HXUA    10
c              SupCp       Supply fluid specific heat                           HXUA    11
c              SupTi       Supply fluid inlet temperature                       HXUA    12
c              DemFlow     Demand fluid flow                                    HXUA    13
c              DemCp       Demand fluid specific heat                           HXUA    14
c              DemTi       Demand fluid inlet temperature                       HXUA    15
                                                                                HXUA    16
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             /FILES/  2
     1                 IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL,                       /FILES/  3
     2                 IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                   /FILES/  4
     3                 IHRREP(3), IHRPAS(2)                                     /FILES/  5
      COMMON  /HXdat / HXerror, HXconfig, HXua, Csup, Cdem, Cmin,               /HXdat/  2
     &                 HXeff, UAeff                                             /HXdat/  3
      INTEGER          HXconfig                                                 /HXdat/  4
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
      COMMON /WCTRL/   IwinReturn, Imsgflg                                      /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* /WCTRL/  4 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        /WCTRL/  5
     &                MB_ICONINFORMATION                                        /WCTRL/  6
#else                                                                        /* /WCTRL/  7 */ 
      include 'msgbox.fi'                                                       /WCTRL/  8
#endif                                                                       /* /WCTRL/  9 */ 
                                                                                HXUA    23
      HXconfig = <hx:CONFIGURATION>                                             HXUA    24
c              Maximum allowed error                                            HXUA    25
      ErrorMax = <sp:ERROR-LOAD> / 10.                                          HXUA    26
                                                                                HXUA    27
c              Supply-side and demand-side capacity rates                       HXUA    28
      Csup = SupFlow * SupCp                                                    HXUA    29
      Cdem = DemFlow * DemCp                                                    HXUA    30
                                                                                HXUA    31
c              Leaving conditions                                               HXUA    32
      IF (HXconfig .NE. -1)  THEN                                               HXUA    33
        SupTo = SupTi + QhxDesign/Csup                                          HXUA    34
        DemTo = DemTi - QhxDesign/Cdem                                          HXUA    35
      ELSE  ! uniform temperature both sides                                    HXUA    36
        SupTo = SupTi                                                           HXUA    37
        DemTo = DemTi                                                           HXUA    38
      ENDIF                                                                     HXUA    39
                                                                                HXUA    40
c              Initialize the UA to the ideal                                   HXUA    41
      TDinlets = DemTi - SupTi                                                  HXUA    42
      HXua     = QhxDesign / TDinlets                                           HXUA    43
c              check to see if design parameters consistent                     HXUA    44
      IF (HXua .LE. 0.)  THEN                                                   HXUA    45
        Call ErrorMsg1                                                          HXUA    46
        WRITE (IOUTPT, 9002)                                                    HXUA    47
        Call ErrorMsg2                                                          HXUA    48
        RETURN                                                                  HXUA    49
      ELSEIF (QhxDesign .GT. 0.)  THEN                                          HXUA    50
        IF (SupTi .GT. DemTo-1.E-6)  THEN                                       HXUA    51
          Call ErrorMsg1                                                        HXUA    52
          WRITE (IOUTPT, 9003)                                                  HXUA    53
          Call ErrorMsg2                                                        HXUA    54
          RETURN                                                                HXUA    55
        ELSEIF (SupTo .GT. DemTi-1.E-6)  THEN                                   HXUA    56
          Call ErrorMsg1                                                        HXUA    57
          WRITE (IOUTPT, 9004)                                                  HXUA    58
          Call ErrorMsg2                                                        HXUA    59
          RETURN                                                                HXUA    60
        ENDIF                                                                   HXUA    61
      ELSE                                                                      HXUA    62
        IF (SupTi .LT. DemTo+1.E-6)  THEN                                       HXUA    63
          Call ErrorMsg1                                                        HXUA    64
          WRITE (IOUTPT, 9005)                                                  HXUA    65
          Call ErrorMsg2                                                        HXUA    66
          RETURN                                                                HXUA    67
        ELSEIF (SupTo .LT. DemTi+1.E-6)  THEN                                   HXUA    68
          Call ErrorMsg1                                                        HXUA    69
          WRITE (IOUTPT, 9006)                                                  HXUA    70
          Call ErrorMsg2                                                        HXUA    71
          RETURN                                                                HXUA    72
        ENDIF                                                                   HXUA    73
      ENDIF                                                                     HXUA    74
                                                                                HXUA    75
c              Solve for UA iteratively                                         HXUA    76
      DO  Iter=1,100                                                            HXUA    77
c              heat exchanger effectiveness                                     HXUA    78
        Call HX_Eff                                                             HXUA    79
c              heat transfer for this size hx                                   HXUA    80
        Qhx   = HXeff * Cmin * TDinlets                                         HXUA    81
c              see if converged on UA                                           HXUA    82
        Error = QhxDesign / Qhx                                                 HXUA    83
        HXua  = HXua * Error                                                    HXUA    84
        IF (ABS(1.-Error) .LT. ErrorMax)  EXIT                                  HXUA    85
      ENDDO                                                                     HXUA    86
                                                                                HXUA    87
      IF (ABS(1.-Error) .GE. ErrorMax)  THEN                                    HXUA    88
c              Convergence has failed                                           HXUA    89
        Call ErrorMsg1                                                          HXUA    90
        WRITE (IOUTPT, 9007)                                                    HXUA    91
        Call ErrorMsg2                                                          HXUA    92
      ENDIF                                                                     HXUA    93
                                                                                HXUA    94
      HX_UA = HXua                                                              HXUA    95
                                                                                HXUA    96
      RETURN                                                                    HXUA    97
                                                                                HXUA    98
c              Message formats                                                  HXUA    99
 9002 FORMAT(/                                                                  HXUA   100
     &14x,'Qhx has wrong sign for inlet temperatures.'                 )        HXUA   101
 9003 FORMAT(/                                                                  HXUA   102
     &14x,'Supply inlet T is greater than or equal to demand outlet T.')        HXUA   103
 9004 FORMAT(/                                                                  HXUA   104
     &14x,'Supply outlet T is greater than or equal to demand inlet T.')        HXUA   105
 9005 FORMAT(/                                                                  HXUA   106
     &14x,'Supply inlet T is less than or equal to demand outlet T.'   )        HXUA   107
 9006 FORMAT(/                                                                  HXUA   108
     &14x,'Supply outlet T is less than demand inlet T.'               )        HXUA   109
 9007 FORMAT(                                                                   HXUA   110
     &14x,'UA calculation failed to converge.'                         )        HXUA   111
                                                                                HXUA   112
                                                                                HXUA   113
      CONTAINS                                                                  HXUA   114
c ============== ErrorMsg1 ==================================================== HXUA   115
      Subroutine ErrorMsg1                                                      HXUA   116
                                                                                HXUA   117
      Jna = Jparent(Khx)                                                        HXUA   118
      CALL MSGSIM(-1,II,II,II,II)                                               HXUA   119
      WRITE (IOUTPT,9001)  (<na:NAME>,II=1,8),                                  HXUA   120
     &                      QhxDesign, SupFlow, SupTi, SupTo,                   HXUA   121
     &                                 DemFlow, DemTi, DemTo                    HXUA   122
                                                                                HXUA   123
 9001 FORMAT(                                                                   HXUA   124
     &14x,'Heat-Exchanger: ',8A4,' has inconsistent'                   /        HXUA   125
     &14x,'design parameters:'                                        //        HXUA   126
     &14x,' QhxDesign  Sup Flow    Sup Ti    Sup To'                   /        HXUA   127
     &14x,4F10.1                                                       /        HXUA   128
     &24x,          '  Dem Flow    Dem Ti    Dem To'                   /        HXUA   129
     &24x,3F10.1                                                       )        HXUA   130
                                                                                HXUA   131
      End Subroutine ErrorMsg1                                                  HXUA   132
                                                                                HXUA   133
                                                                                HXUA   134
c ============== ErrorMsg2 ==================================================== HXUA   135
      Subroutine ErrorMsg2                                                      HXUA   136
                                                                                HXUA   137
      CALL MessageBox( NULL,                                                    HXUA   138
     &  'Inconsistent input parameters - cannot calc UA'//char(0),              HXUA   139
     &  'Heat-Exchanger errors'//char(0),                                       HXUA   140
     &  MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                    HXUA   141
      IwinReturn = 1                                                            HXUA   142
                                                                                HXUA   143
      End Subroutine ErrorMsg2                                                  HXUA   144
                                                                                HXUA   145
      END                                                                       HXUA   146
      FUNCTION NewHX(Jcomp, Config, UA, KfpSup, SupRes,                         NewHX    2
     &                                  KfpDem, DemRes)                         NewHX    3
c                                                                               NewHX    4
c              Creates a heat-exchanger sub-component for components            NewHX    5
c              having imbedded heat exchangers                                  NewHX    6
c                                                                               NewHX    7
c                                                                               /JJHSDG/ 2
c              DEVELOPED BY                                                     /JJHSDG/ 3
c                            S. D. Gates                                        /JJHSDG/ 4
c                            J. J. Hirsch                                       /JJHSDG/ 5
c                            James J. Hirsch & Associates                       /JJHSDG/ 6
c                            Camarillo, California                              /JJHSDG/ 7
c                                                                               /JJHSDG/ 8
Copyright (c) 1997-2001 by James J. Hirsch.  All Rights Reserved.               /JJHSDG/ 9
c Unpublished rights reserved under the Copyright Laws of the United States.    /JJHSDG/10
c U.S. GOVERNMENT RESTRICTED RIGHTS:  In accordance with FAR 12.212 or          /JJHSDG/11
c DFARS 227.7202, as applicable, use, duplication, or disclosure of the         /JJHSDG/12
c SOFTWARE by the Government is subject to restrictions. Manufacturer is        /JJHSDG/13
c James J. Hirsch DBA James J. Hirsch & Associates, 12185 Presilla Road,        /JJHSDG/14
c Camarillo, CA, 93012-9243.                                                    /JJHSDG/15
c                                                                               /JJHSDG/16
      COMMON //        AA(75 000 000)                                           /BLANK/  2
      INTEGER          IA(75 000 000)                                           /BLANK/  3
      EQUIVALENCE      (AA(1),IA(1))                                            /BLANK/  4
      COMMON  /PTRPLT/ Ipm,Ipl,Ich,Ibl,Idw,Itw,Ifr,Ign,Itk,Isp,                 /PTRPLT/ 2
     &                 Iec,Ilm,Ime,Ipq,Ifl,Isp4,Imm,Imc,Igl,Ire,                /PTRPLT/ 3
     &                 Irf,Irc,Isc,Icp,Isg,Ids,Icd,Ifc,Irs,Isp1,                /PTRPLT/ 4
     &                 Npm,Npl,Nch,Nbl,Ndw,Ntw,Nfr,Ngn,Ntk,Nspx,                /PTRPLT/ 5
     &                 Nec,Nlm,Nme,Npq,Nfl,Nsp4,Nmm,Nmc,Ngl,Nre,                /PTRPLT/ 6
     &                 Nrf,Nrc,Nsc,Ncp,Nsg,Nds,Ncd,Nfc,Nrs,Nsp1,                /PTRPLT/ 7
     &                 Lpm,Lpl,Lch,Lbl,Ldw,Ltw,Lfr,Lgn,Ltk,Lsp,                 /PTRPLT/ 8
     &                 Lec,Llm,Lme,Lpq,Lfl,Lsp4,Lmm,Lmc,Lgl,Lre,                /PTRPLT/ 9
     &                 Lrf,Lrc,Lsc,Lcp,Lsg,Lds,Lcd,Lfc,Lrs,Lsp1,                /PTRPLT/10
     &                 Ihx,Iac,Ifb,kpr, NumElecMeters,                          /PTRPLT/11
     &                 xPTRPLT                                                  /PTRPLT/12
      COMMON  /PtrJsp/ Jsp                                                      /PtrJsp/ 2
      DATA NameSubcomponent /4H$Sub/                                            /SubNam/ 2
      INTEGER Config                                                            NewHX   13
      SAVE    Khx                                                               NewHX   14
                                                                                NewHX   15
c              Create a record and link                                         NewHX   16
      NewHX = NewRecord(<+hx~Len>)                                              NewHX   17
      IF (Ihx .eq. 0)  THEN                                                     NewHX   18
        Ihx         = NewHX                                                     NewHX   19
        KhxPrevious = 0                                                         NewHX   20
        HXerror     = <sp:ERROR-LOAD> / 4.  ! for hourly calcs                  NewHX   21
      ELSE                                                                      NewHX   22
        <hx;Next>   = NewHX                                                     NewHX   23
        KhxPrevious = Khx                                                       NewHX   24
      ENDIF                                                                     NewHX   25
      Khx           = NewHX                                                     NewHX   26
      <hx;Previous> = KhxPrevious                                               NewHX   27
                                                                                NewHX   28
c              Transfer parameters                                              NewHX   29
      <hx;Ident>         = NameSubcomponent                                     NewHX   30
      <hx;Parent>        = Jcomp                                                NewHX   31
      <hx;FluidPropSup>  = KfpSup                                               NewHX   32
      <hx;FluidPropDem>  = KfpDem                                               NewHX   33
      <hx:CONFIGURATION> = Config                                               NewHX   34
      <hx:UA>            = UA                                                   NewHX   35
      <hx:SUP-FILM-RES>  = SupRes                                               NewHX   36
      <hx:DEM-FILM-RES>  = DemRes                                               NewHX   37
c                                                                               NewHX   38
c              Absolute location in AA of the supply-side specific heat.        NewHX   39
c              This allows the hourly HX calcs to quickly access the            NewHX   40
c              varying heat transport capacity associated with fluids           NewHX   41
c              that may change temperature (and Cp).                            NewHX   42
      Kfp = KfpSup                                                              NewHX   43
      SELECT CASE (<fp:Type>)                                                   NewHX   44
        CASE (11:19)                                                            NewHX   45
c              For water or other central plant fluids, point at the            NewHX   46
c              plant's heat transport capacity                                  NewHX   47
          Jpl = <fp;Jpl>                                                        NewHX   48
          <hx;AAptrCpSupply> = Jpl + <+pl.Btuh/GPM-F>                           NewHX   49
        CASE DEFAULT                                                            NewHX   50
c              For all others, point back to hx specific heat                   NewHX   51
          <hx;AAptrCpSupply> = Khx + <+hx;CpSupply>                             NewHX   52
      END SELECT                                                                NewHX   53
c              Repeat for demand-side specific heat                             NewHX   54
      Kfp = KfpDem                                                              NewHX   55
      SELECT CASE (<fp:Type>)                                                   NewHX   56
        CASE (11:19)                                                            NewHX   57
          Jpl = <fp;Jpl>                                                        NewHX   58
          <hx;AAptrCpDemand> = Jpl + <+pl.Btuh/GPM-F>                           NewHX   59
        CASE DEFAULT                                                            NewHX   60
          <hx;AAptrCpDemand> = Khx + <+hx;CpDemand>                             NewHX   61
      END SELECT                                                                NewHX   62
c                                                                               NewHX   63
      NewHX = Khx                                                               NewHX   64
c                                                                               NewHX   65
      RETURN                                                                    NewHX   66
      END                                                                       NewHX   67
