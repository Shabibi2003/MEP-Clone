#if _WIN64                                                                   /* -048     8 */ 
#define address integer*8                                                    /* -048     9 */ 
#else                                                                        /* -048    10 */ 
#define address integer*4                                                    /* -048    11 */ 
#endif                                                                       /* -048    12 */ 
#ifdef _DLL                                                                  /* -048    13 */ 
      SUBROUTINE DOESIM                                                         -048    14
#else                                                                        /* -048    15 */ 
      PROGRAM DOESIM                                                            -048    16
#endif                                                                       /* -048    17 */ 
C                                                                               DOESIM   3
C                            CONTROL OVERLAY FOR SIMULATION                     DOESIM   4
C                                                                               DOESIM   5
C              DEVELOPED BY                                                     COPYR96  1
C                            W. F. Buhl                                         COPYR96  2
C                            A. E. Erdem                                        COPYR96  3
C                            F. C. Winkelmann                                   COPYR96  4
C                            J. J. Hirsch                                       COPYR96  5
C                            Lawrence Berkeley National Laboratory              COPYR96  6
C                            University of California                           COPYR96  7
C                                                                               COPYR96  8
C                            S. D. Gates                                        COPYR96  9
C                            J. J. Hirsch                                       COPYR96 10
C                            James J. Hirsch & Associates                       COPYR96 11
C                            Camarillo, California                              COPYR96 12
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COPYR96 13
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COPYR96 14
C Portions developed under University of California/USDOE Purchase Order        COPYR96 15
C #4607010 with JJ Hirsch and covered by above copyrights.                      COPYR96 16
C                                                                               DOESIM   8
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON        // AA( 75 000 000)                                          -048a    2
      INTEGER          IA( 75 000 000)                                          -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON        // AA( 75 000 000)                                          -048a    5
      INTEGER          IA( 75 000 000)                                          -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE      (AA(1), IA(1))                                           HR       3
      COMMON /CTRL  / VERS(2),IRPFLG(4),IOVRLL(7),IWRTFL,IPROG,                 /CTRL/   2
     1                        IFATAL,NAMPRG(3,7),MTRICR                         /CTRL/   3
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             -044     1
     1                IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL                         /FILES/  3
     2              , IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                    /FILES/  4
     3                IHRREP(3), IHRPAS(2)                                      /FILES/  5
      COMMON  /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE, IAXlds, IAXsys         HR       6
      COMMON /NHRSHR/ NHRSHR(128), IHRCTR(5,128), NHRITM, FILEHR, ICECHS        -048j    1
      INTEGER         FILEHR                                                    /NHRSHR/ 3
      COMMON  /PPDAT0/  IPPIN0, IPPPRG                                          /PPDAT0/ 2
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         BIGNAM   1
      COMMON /UNITT/   VKONV(300), DUMLOG(4), JUNITT(4,300,2)                   UNITS1   1
c              ** Caution ** must also mod WCTRL1                               -048     1
      COMMON /WCTRL/  IwinReturn, Imsgflg                                       /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* -048     2 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        -048     3
     &                MB_ICONINFORMATION                                        -048     4
#else                                                                        /* -048     5 */ 
      include 'msgbox.fi'                                                       -048     6
#endif                                                                       /* -048     7 */ 
      COMMON  /WEATH / IWDID(5),LRECX,WLAT,WLONG,LTIMZ,IFX,IWSIZ,               /WEATH/  2
     1                 CLRNES,TGNDR,WBT,DBT,PATM,CLDAMT,ISNOW,IRAIN,            /WEATH/  3
     2                 IWNDDR,HUMRAT,DENSTY,ENTHAL,DIFSOL,DIRSOL,SOLRAD,        /WEATH/  4
     3                 ICLDTY,WNDSPD,IDUMMY,DPT,WNDDRR,CLDCOV,RDNCC,            /WEATH/  5
     4                 BSCC,SKYA,DBTR,GTEMP(12),CLR(12),ESKY,EGND,IWINTR        /WEATH/  6
#ifdef _DLL                                                                  /* -048    18 */ 
      structure /sim_struct/                                                    /PDARGS/ 2
         integer NoScrnMsg                                                      /PDARGS/ 3
         integer fDirLgth                                                       /PDARGS/ 4
         integer wDirLgth                                                       /PDARGS/ 5
         integer iFileLgth                                                      /PDARGS/ 6
         integer wFileLgth                                                      /PDARGS/ 7
         integer fDirLoc(64)                                                    /PDARGS/ 8
         integer wDirLoc(64)                                                    /PDARGS/ 9
         integer iFileLoc(64)                                                   /PDARGS/10
         integer wFileLoc(64)                                                   /PDARGS/11
         address pCallbackFunc                                                  /PDARGS/12
      end structure                                                             /PDARGS/13
      record /sim_struct/ args                                                  /PDARGS/14
      COMMON /PDARGS/ args                                                      /PDARGS/15
      address loc_args                                                          /PDARGS/16
      COMMON /PDARGSL/ loc_args                                                 /PDARGS/17
      SAVE /PDARGS/                                                             /PDARGS/18
      SAVE /PDARGSL/                                                            /PDARGS/19
      COMMON /PDFILE/ scrfnm,wdfnm , fdfnm,wffnm,iffnm,                         /PDFILE/ 2
     $                       iwdlen,ifdlen,      iiflen                         /PDFILE/ 3
      character*256   scrfnm,wdfnm ,fdfnm ,wffnm,iffnm                          /PDFILE/ 4
#endif                                                                       /* -048    21 */ 
      DIMENSION ISIM(2,100), IKREP(100), FILES(2,3)                             DOESIM  18
c ??  CHARACTER ICECNO*2, ICECHFN*11, ICECDFN*11, CPNUM*1, scrfnm0*12           -048    22
      CHARACTER ICECNO*2, ICECHFN*256, ICECDFN*256, CPNUM*1, scrfnm0*256        -048    23
      Character  PathName*256                                                   -048n    1
      LOGICAL CECPR                                                             DOESIM  20
C                                                                               DOESIM  21
      DATA FILES/4HDSNF,4HIL  ,4HLDSO,4HUT  ,4HSYSO,4HUT  /                     DOESIM  23
c                                                                               -044c2   2
      CALL FILLN( 0, IKREP, 100)                                                -044c2   3
      CALL FILLN( 0, ISIM,  200)                                                -044c2   4
      CECPR = .FALSE.                                                           -044c2   5
      IwinReturn = 0                                                            -044c2   6
#ifndef _DLL                                                                 /* -048    24 */ 
      OPEN( ISTNDF, FILE=PathName('STDFIL.TMP'), FORM='UNFORMATTED',            -048n    2
     1                           BLOCKSIZE=32768, STATUS='old' )                -048n    3
      OPEN( ICTRL , FILE=PathName('CTRL.TMP')  , FORM='UNFORMATTED',            -048n    4
     1                                           STATUS='old' )                 -048n    5
      OPEN( IHDFIL, FILE=PathName('HDRFIL.bin'), FORM='UNFORMATTED',            -048n    6
     1              RECORDTYPE='variable',BLOCKSIZE=32768,STATUS='old' )        -048n    7
      OPEN( IWEATH, FILE=PathName('WEATHER.BIN'), FORM='UNFORMATTED',           -048n    8
     1                           BLOCKSIZE=32768, STATUS='old',                 -048n    9
     2                           recordtype='variable',recl=6200)               -048n   10
      OPEN( IDSNFL, FILE=PathName('DSNFIL.TMP'), FORM='UNFORMATTED',            -048n   11
     1                                           STATUS='UNKNOWN' )             -048n   12
                                                                                -048n   13
      OPEN( IOUTPT, FILE=PathName('DOESIM.OUT'), FORM='FORMATTED',              -048n   14
     1      carriagecontrol='FORTRAN',STATUS='UNKNOWN',BLOCKSIZE=131072)        -048n   15
      OPEN( 15    , FILE=PathName('DOESIM.LOG'), FORM='FORMATTED',              -048n   16
     1                                         status='unknown' )               -048n   17
                                                                                -048n   18
      OPEN( ILDSO ,                    FORM='UNFORMATTED',                      -048n   19
     1      BLOCKSIZE=262144         , STATUS='SCRATCH' )                       -048n   20
      OPEN( ISYSO ,                    FORM='UNFORMATTED',                      -048n   21
     1      BLOCKSIZE=131072         , STATUS='SCRATCH' )                       -048n   22
      OPEN( IPLTO , FILE=PathName('PLTOUT.TMP'), FORM='UNFORMATTED',            -048n   23
     1                        BLOCKSIZE=32768, STATUS='UNKNOWN' )               -048n   24
      write(   *, 15) IADIM                                                     PC      26
#endif                                                                       /* -048    29 */ 
      write(  15, 15) IADIM                                                     PC      27
   15 FORMAT (/,'Start DOESIM : Storage capacity = ',i9)                        -048a    8
C             Initalize elapsed time counter                                    PC      29
      STTIM = CPUTIM(0)                                                         PC      30
C                                                                               DOESIM  59
c                                                                               DOESIM  60
c                                                                               HVACi    1
c              Initialize all common block values to zero                       HVACi    2
      CALL InitialSim                                                           HVACi    3
c                                                                               HVACi    4
c    get the version number                                                     DOESIM  61
c                                                                               DOESIM  62
       call  VERSION( VERS(2) )                                                 DOESIM  63
c                                                                               DOESIM  64
C              INITIALIZE NUM OF FATAL ERRORS                                   DOESIM  65
      IFATAL = 0                                                                DOESIM  66
C              INITIALIZE LAST PROGRAM NUM                                      DOESIM  67
      IPROG  = 1                                                                DOESIM  68
C             Initialize so that weather file name is picked up                 PC      31
      CALL INIT0(AA,0)                                                          PC      32
      IF (IwinReturn .ne. 0)  GOTO 900                                          -047k    1
C                                                                               DOESIM  69
C         INITIALIZE NUMBER OF CECFILES TO ZERO                                 DOESIM  70
C         THIS WILL BE INCREMENTED IF THE KEYWORD                               DOESIM  71
C         HOURLY-DATA-SAVE EQUALS YES FOR ANY OVERLAY                           DOESIM  72
C                                                                               DOESIM  73
      NUMCEC=0                                                                  DOESIM  74
C              REWIND AND READ IN THE CONTROL FILE                              DOESIM  75
      REWIND ICTRL                                                              DOESIM  76
C              READS FIRST RECORD'S UNITS TABLE                                 DOESIM  77
      READ(ICTRL,END=51) VKONV,JUNITT                                           DOESIM  78
      READ(ICTRL) ISAVFL,NFWRT,NSIM,ISIM,IKREP                                  DOESIM  79
      GOTO 50                                                                   DOESIM  80
C              IF FILE WAS EMPTY ABORT                                          DOESIM  81
   51 CALL MSGSIM(1,DUM,DUM,DUM,DUM)                                            DOESIM  82
#ifdef _DLL                                                                  /* -048    30 */ 
      GOTO 190                                                                  -048    31
#else                                                                        /* -048    32 */ 
      CALL ABT                                                                  DOESIM  83
#endif                                                                       /* -048    33 */ 
C              IF THERE WERE BDL ERRORS AND SAVE-FILES WAS ON                   DOESIM  84
C              CALL ABORT TO PREVENT USER SAVING JUNK                           DOESIM  85
   50 IF((NSIM .EQ. 0) .AND. (NFWRT .EQ. 1)) THEN                               -048    34
#ifdef _DLL                                                                  /* -048    35 */ 
      GOTO 900                                                                  -048    36
#else                                                                        /* -048    37 */ 
      CALL ABT  ! ?? or Return ??                                               -048    38
#endif                                                                       /* -048    39 */ 
      ENDIF                                                                     -048    40
C              CHECK FOR SAVED FILES                                            DOESIM  87
      IF(NSIM .EQ. 0)  GOTO 900                                                 DOESIM  88
  100 IF(ISAVFL .EQ. 1)  GOTO 190                                               DOESIM  89
C              CHECK FOR DESIGN FILE RECORDS                                    DOESIM  90
      IEND   = ISAVFL -1                                                        DOESIM  91
      IF (ISAVFL .EQ. 2)  IEND=3                                                DOESIM  92
      IF (ISAVFL .EQ. 3)  IEND = 6                                              DOESIM  93
      IF (ISAVFL .EQ. 4)  IEND = 7                                              DOESIM  94
      DO 110 I=1,IEND                                                           DOESIM  95
      READ(IDSNFL,END=111)                                                      DOESIM  96
      GOTO 110                                                                  DOESIM  97
  111 CALL MSGSIM(2,FILES(1,1),DUM,DUM,DUM)                                     DOESIM  98
  110 CONTINUE                                                                  DOESIM  99
C              CHECK FOR OUTPUT FILES THAT ARE NEEDED                           DOESIM 100
C              SEE IF LOADS OUTPUT IS THERE                                     DOESIM 101
      IF(ISAVFL .NE. 2)  GOTO 120                                               DOESIM 102
      REWIND ILDSO                                                              DOESIM 103
      READ(ILDSO,END=121)                                                       DOESIM 104
      GOTO 120                                                                  DOESIM 105
  121 CALL MSGSIM(2,FILES(1,2),DUM,DUM,DUM)                                     DOESIM 106
C              CHECK IF SYSTEMS OUTPUT NEEDED                                   DOESIM 107
  120 IF(ISAVFL .NE. 3)  GOTO 190                                               DOESIM 108
      REWIND ISYSO                                                              DOESIM 109
      READ(ISYSO,END=191)                                                       DOESIM 110
      GOTO 190                                                                  DOESIM 111
  191 CALL MSGSIM(2,FILES(1,3),DUM,DUM,DUM)                                     DOESIM 112
#ifdef _DLL                                                                  /* -048    41 */ 
  190 IF(IFATAL .NE. 0) THEN                                                    -048    42
        Call MessageBox(NULL,'Errors while preparing for simulation -'          -048    43
     &  //' ABORTING'//char(0),'DOESIM Errors'//char(0), MB_OK                  -048    44
     &  + MB_ICONSTOP+MB_TASKMODAL )                                            -048    45
        GOTO 900                                                                -048    46
      ENDIF                                                                     -048    47
#else                                                                        /* -048    48 */ 
  190 IF(IFATAL .NE. 0)  CALL ABT                                               DOESIM 113
#endif                                                                       /* -048    49 */ 
      MSIM   = 0                                                                DOESIM 114
#ifndef _DLL                                                                 /* -048    50 */ 
      REWIND IWEATH                                                             DOESIM 117
      READ (IWEATH,END=194) (IWDID(I),I=1,5)                                    DOESIM 118
      GO TO 195                                                                 DOESIM 119
  194 CALL MSGSIM(11,IFATAL,IFATAL,IFATAL,IFATAL)                               DOESIM 120
      CALL ABT                                                                  DOESIM 121
  195 REWIND IWEATH                                                             DOESIM 122
#endif                                                                       /* -048    51 */ 
C                                                                               DOESIM 123
C              GET READY FOR NEXT SIMULATION                                    DOESIM 124
C                                                                               DOESIM 125
C              ISIM IS THE LIST OF SIMULATIONS TO BE DONE                       DOESIM 127
C              1 = PROGRAM NUMBER                                               DOESIM 128
C              2 = RECORD NUM WHERE STDFILE STARTS -1                           DOESIM 129
C              MSIM IS THE CURRENT INDEX INTO ISIM                              DOESIM 130
C              IPROG IS THE CURRENT OVERLAY NUMBER TO CALL                      DOESIM 131
C              IWRTFL IS FLAG TO WRITE AN OUTPUT FILE                           DOESIM 132
C              1 = WRITE FILE 0 = DO NOT WRITE FILE                             DOESIM 133
  200 MSIM   = MSIM + 1                                                         HVAC2    1
      IPROG  = ISIM(1,MSIM)                                                     DOESIM 135
c              flag to call systems if loads is about to be called              HVAC2    2
      IF (IPROG .EQ. 1)  THEN                                                   HVAC2    3
        ISYSFlag = 1                                                            HVAC2    4
      ELSE                                                                      HVAC2    5
        ISYSFlag = 0                                                            HVAC2    6
      ENDIF                                                                     HVAC2    7
      IECOFlag = 0                                                              HVAC7    1
C              SET OUTPUT CONVERSION FLAG                                       DOESIM 136
      MTRICR = IKREP(MSIM)                                                      DOESIM 137
      IF(IPROG.EQ.5) IPROG = 7                                                  DOESIM 138
      ISFREC = ISIM(2,MSIM)                                                     DOESIM 139
C              CHECK IF OUTPUT FILE TO BE WRITTEN                               DOESIM 140
      IWRTFL = 1                                                                DOESIM 141
      IF(NFWRT .NE. 0)  GOTO 300                                                DOESIM 142
C              CHECK IF THIS OUTPUT WILL BE USED                                DOESIM 143
      IF(ISIM(1,MSIM+1) .LE. IPROG  .AND.  ISYSFlag .EQ. 0)  IWRTFL = 0         HVAC2    8
  300 IFATAL = 0                                                                HVAC2    9
C              CORRECTLY POSITION STANDARD FILE                                 DOESIM 146
      REWIND ISTNDF                                                             DOESIM 147
      I      = 0                                                                DOESIM 148
  310 I      = I + 1                                                            DOESIM 149
      IF(I.EQ.ISFREC) GO TO 400                                                 DOESIM 150
      READ(ISTNDF)                                                              DOESIM 151
      GO TO 310                                                                 DOESIM 152
  400 CONTINUE                                                                  DOESIM 153
C              CORRECTLY POSITION DESIGN FILE                                   DOESIM 154
      REWIND IDSNFL                                                             DOESIM 155
      IF (IPROG .LE. 2)  GO TO 500                                              DOESIM 156
      IF (IPROG .EQ. 4)  IEND=3                                                 HVAC7    2
      IF(IPROG.EQ.7) GO TO 500                                                  DOESIM 159
      DO 410 I=1,IEND                                                           DOESIM 160
  410 READ (IDSNFL)                                                             DOESIM 161
  500 CONTINUE                                                                  DOESIM 162
C              POSITION OUTPUT FILES                                            DOESIM 163
      REWIND ILDSO                                                              DOESIM 164
      REWIND ISYSO                                                              DOESIM 165
      REWIND IPLTO                                                              DOESIM 166
      CLOSE(IREPFL)                                                             RemPA    6
#ifdef _DLL                                                                  /* -048    52 */ 
      scrfnm = wdfnm(1:iwdLen)//iffnm(1:iifLen)//'.TMP'                         -048    53
      IF(IPROG.EQ.1) scrfnm = wdfnm(1:iwdLen)//iffnm(1:iifLen)//'.lrp'          -048    54
      IF(IPROG.EQ.2) scrfnm = wdfnm(1:iwdLen)//iffnm(1:iifLen)//'.srp'          -048    55
      IF(IPROG.EQ.3) scrfnm = wdfnm(1:iwdLen)//iffnm(1:iifLen)//'.prp'          -048    56
      IF(IPROG.EQ.4) scrfnm = wdfnm(1:iwdLen)//iffnm(1:iifLen)//'.erp'          -048    57
      IF(IPROG.LE.4) THEN                                                       -048    58
        OPEN(IREPFL,FILE=scrfnm,FORM='UNFORMATTED',BLOCKSIZE=65536,             -048    59
     $               RECL=5000,RECORDTYPE='variable')                           -048    60
      ELSE                                                                      -048    61
        OPEN(IREPFL,            FORM='UNFORMATTED',                             -048    62
     $              RECL=5000,RECORDTYPE='variable',status='scratch')           -048    63
      ENDIF                                                                     -048    64
      CLOSE(IHRREP(1))                                                          -048    65
      IF(IPROG.EQ.1) scrfnm = wdfnm(1:iwdLen)//iffnm(1:iifLen)//'.lin'          -048    66
      IF(IPROG.EQ.2) scrfnm = wdfnm(1:iwdLen)//iffnm(1:iifLen)//'.sin'          -048    67
      IF(IPROG.EQ.3) scrfnm = wdfnm(1:iwdLen)//iffnm(1:iifLen)//'.pin'          -048    68
      IF(IPROG.LE.3) THEN                                                       -048    69
        OPEN(IHRREP(1),FILE=scrfnm,FORM='UNFORMATTED',BLOCKSIZE=131072,         -048    70
     $               RECL=132000,RECORDTYPE='variable',status='replace')        -048r    1
      ELSE                                                                      -048    72
        OPEN(IHRREP(1),            FORM='UNFORMATTED',                          -048    73
     $               RECL=132000,RECORDTYPE='variable',status='scratch')        -048j    3
      ENDIF                                                                     -048    75
C              POSITION WEATHER FILE                                            -048    76
      REWIND IWEATH                                                             -048    77
      LRECX  = 0                                                                -048    78
#else                                                                        /* -048    79 */ 
      scrfnm0 = 'DOEREP.TMP'                                                    PC2001   2
      IF(IPROG.EQ.1) scrfnm0 = 'DOEREP.lrp'                                     PC2001   3
      IF(IPROG.EQ.2) scrfnm0 = 'DOEREP.srp'                                     PC2001   4
      IF(IPROG.EQ.3) scrfnm0 = 'DOEREP.prp'                                     PC2001   5
      IF(IPROG.EQ.4) scrfnm0 = 'DOEREP.erp'                                     PC2001   6
      IF(IPROG.LE.4) THEN                                                       PC2001   7
        OPEN(IREPFL,FILE=PathName(scrfnm0),FORM='UNFORMATTED',                  -048n   25
     &              BLOCKSIZE=65536,RECL=5000,RECORDTYPE='variable')            -048n   26
      ELSE                                                                      PC2001  10
        OPEN(IREPFL,            FORM='UNFORMATTED',                             PC2001  11
     $              RECL=5000,RECORDTYPE='variable',status='scratch')           PC2001  12
      ENDIF                                                                     PC2001  13
      CLOSE(IHRREP(1))                                                          PC2001  14
      IF(IPROG.EQ.1) scrfnm0 = 'DOEHRREP.lin'                                   PC2001  15
      IF(IPROG.EQ.2) scrfnm0 = 'DOEHRREP.sin'                                   PC2001  16
      IF(IPROG.EQ.3) scrfnm0 = 'DOEHRREP.pin'                                   PC2001  17
      IF(IPROG.LE.3) THEN                                                       PC2001  18
        OPEN(IHRREP(1),FILE=PathName(scrfnm0),FORM='UNFORMATTED',               -048n   27
     $              BLOCKSIZE=131072,RECL=132000,RECORDTYPE='variable',         -048r    2
     $                                                 status='replace')        -048r    3
      ELSE                                                                      PC2001  21
        OPEN(IHRREP(1),            FORM='UNFORMATTED',                          PC2001  22
     $               RECL=132000,RECORDTYPE='variable',status='scratch')        -048j    5
      ENDIF                                                                     PC2001  24
C              POSITION WEATHER FILE                                            DOESIM 167
      REWIND IWEATH                                                             DOESIM 168
#endif                                                                       /* -048    80 */ 
C              ZERO REPORT FLAGS                                                DOESIM 169
C              1 = SUMMARY AND VERIFICATION REPORTS                             DOESIM 170
C              2 = HOURLY-REPORTS                                               DOESIM 171
      DO 510 I=1,4                                                              DOESIM 172
  510 IRPFLG(I) = 0                                                             DOESIM 173
C                                                                               DOESIM 174
C              CALL OVERLAY                                                     DOESIM 175
C                                                                               DOESIM 176
C              GET ACCOUNTING INFORMATION                                       DOESIM 177
      CALL DAYSIM(0)                                                            PC      43
C              ---                                                              DOESIM 179
C              --- MOVE CURRENT IPROG TO IPPPRG FOR POST-PROC                   DOESIM 180
C              ---                                                              DOESIM 181
      IPPPRG = IPROG                                                            DOESIM 182
      IPRG = IPROG                                                              IREPRT   2
c              IAX is the last word used in AA                                  HR       9
      SELECT CASE (IPROG)                                                       HR      10
        CASE (1)  ! Loads                                                       HR      11
          IAX = 0                                                               HR      12
          CALL FILLN(0., AA, IADIM)                                             HR      13
          CALL LOADS                                                            HR      14
          IAXlds = IAX                                                          HR      15
        CASE (2)  ! Mechanical systems                                          HR      16
          IAX = IAXlds                                                          HR      17
          CALL FILLN(0., AA(IAX+1), IADIM-IAX)                                  HR      18
          CALL SYSTEM                                                           HR      19
          IAXsys = IAX                                                          HR      20
          IF(IREPRT(2,15) .NE. 0)  IECOFlag = 0                                 -044a    1
        CASE (4)  ! Economics                                                   HR      21
          IAX = 0                                                               HR      22
          CALL FILLN(0., AA, IADIM)                                             HR      23
          CALL ECON                                                             HR      24
      END SELECT                                                                HR      25
      IF (IwinReturn .ne. 0)  GOTO 900                                          -047k    2
C              Save post-simulation memory use position                         -42c     3
      IAXrep = IAX                                                              -42c     4
C              DISPLAY TIMING INFORMATION                                       DOESIM 197
      CALL DAYSIM(1)                                                            PC      44
      IF (IwinReturn .ne. 0)  GOTO 900                                          -047k    3
C                                                                               DOESIM 199
C              CHECK FOR REPORTING FLAGS                                        DOESIM 200
C                                                                               DOESIM 201
C              CHECK FOR VERIFICATION REPORTS                                   DOESIM 202
      IF(IRPFLG(1) .EQ. 0)  GOTO 600                                            DOESIM 203
C              CLEAR ACCOUNTING INFO                                            DOESIM 204
      IPROG  = 5                                                                DOESIM 205
#ifdef _DLL                                                                  /* -048    81 */ 
      CALL DISPC                                                                -048    82
      IF( IwinReturn .ne. 0 )  GOTO 900                                         -048    83
#endif                                                                       /* -048    84 */ 
      CALL DAYSIM(0)                                                            PC      45
C              REWIND REPORT AND HEADER FILES                                   DOESIM 207
      REWIND IHDFIL                                                             DOESIM 208
      REWIND IREPFL                                                             DOESIM 209
      CALL FILLN(0., AA(IAX+1), IADIM-IAX)                                      HR      26
      CALL RPTGEN                                                               DOESIM 210
C              DISPLAY TIMING INFO                                              DOESIM 211
      CALL DAYSIM(1)                                                            PC      46
      REWIND IREPFL                                                             DOESIM 213
C              Set IAX back to post-simulation value                            -42c     5
      IAX    = IAXrep                                                           -42c     6
C              CHECK FOR HOURLY REPORTS                                         DOESIM 215
  600 IF(IRPFLG(2) .EQ. 0)  GOTO 700                                            DOESIM 216
      IF(IREPRT(IPRG,37).EQ.0) GO TO 620                                        IREPRT   3
C        INCREMENT NUMBER OF CECFILES IF                                        DOESIM 218
C        HOURLY-DATA-SAVE EQUALS YES, AND THEN                                  DOESIM 219
C        WRITE TO THE APPROPRIATE FILE                                          DOESIM 220
C        ICECHR CONTAINS HEADER INFO, ICECDT CONTAINS                           DOESIM 221
C        THE HOURLY DATA RECORDS.                                               DOESIM 222
      NUMCEC=NUMCEC+1                                                           DOESIM 223
      WRITE(ICECNO, 605) NUMCEC                                                 DOESIM 224
  605 FORMAT(I2)                                                                DOESIM 225
      IF(NUMCEC .LT. 10) ICECNO(1:1) = '0'                                      DOESIM 226
      IF(IREPRT(IPRG,37).NE.1) GO TO 601                                        IREPRT   4
#ifdef _DLL                                                                  /* -048n   29 */ 
      ICECHFN = wdfnm(1:iwdLen)//iffnm(1:iifLen)//                              -048n   30
     $                           '_HourlyDataHeaders' //ICECNO//'.BIN'          -048n   31
      ICECDFN = wdfnm(1:iwdLen)//iffnm(1:iifLen)//                              -048n   32
     $                           '_HourlyData'        //ICECNO//'.BIN'          -048n   33
      OPEN(UNIT=ICECHR, FILE=ICECHFN, FORM='UNFORMATTED',                       -048n   34
     $     STATUS='UNKNOWN', ERR=610)                                           -048n   35
      OPEN(UNIT=ICECDT, FILE=ICECDFN, FORM='UNFORMATTED',                       -048n   36
     $     STATUS='UNKNOWN', ERR=610)                                           -048n   37
      IF(.NOT. CECPR) THEN                                                      -048n   38
       scrfnm= wdfnm(1:iwdLen)//iffnm(1:iifLen)//'_HourlyDataTitles.DAT'        -048n   39
        OPEN(UNIT=ICECPR, FILE=scrfnm, STATUS='UNKNOWN', ERR=610)               -048n   40
        CECPR = .TRUE.                                                          -048n   41
      ENDIF                                                                     -048n   42
  601 IF(IREPRT(IPRG,37).NE.2) GO TO 620                                        -048n   43
      WRITE (CPNUM,'(I1)')IPPPRG                                                -048n   44
      ICECDFN= wdfnm(1:iwdLen)//iffnm(1:iifLen)//                               -048n   45
     $                         '_HourlyData'//CPNUM//'_'//ICECNO//'.DAT'        -048n   46
      OPEN(UNIT=ICECDT, FILE=ICECDFN, ERR=610)                                  -048n   47
#else                                                                        /* -048n   48 */ 
      ICECHFN = 'CECHR' // ICECNO // '.BIN'                                     -048n   49
      ICECDFN = 'CECDT' // ICECNO // '.BIN'                                     -048n   50
      OPEN(UNIT=ICECHR, FILE=PathName(ICECHFN), FORM='UNFORMATTED',             -048n   51
     $     STATUS='UNKNOWN', ERR=610)                                           -048n   52
      OPEN(UNIT=ICECDT, FILE=PathName(ICECDFN), FORM='UNFORMATTED',             -048n   53
     $     STATUS='UNKNOWN', ERR=610)                                           -048n   54
      IF(.NOT. CECPR) THEN                                                      -048n   55
        OPEN(UNIT=ICECPR, FILE=PathName('CECPRO.FMT'), STATUS='UNKNOWN',        -048n   56
     $       ERR=610)                                                           -048n   57
        CECPR = .TRUE.                                                          -048n   58
      ENDIF                                                                     -048n   59
  601 IF(IREPRT(IPRG,37).NE.2) GO TO 620                                        -048n   60
      WRITE (CPNUM,'(I1)')IPPPRG                                                -048n   61
      ICECDFN= 'CEC' // CPNUM // '_' // ICECNO // '.DAT'                        -048n   62
      OPEN(UNIT=ICECDT, FILE=PathName(ICECDFN), ERR=610)                        -048n   63
#endif                                                                       /* -048n   64 */ 
      WRITE(IOUTPT,607,ERR=620) NUMCEC, IPPPRG                                  DOESIM 244
  607 FORMAT(' HOURLY DATA FILE ', I3, 'FROM PROG ', I3)                        DOESIM 245
      GOTO 620                                                                  DOESIM 246
  610 CONTINUE                                                                  DOESIM 247
      IREPRT(IPRG,37) = 0                                                       IREPRT   6
      WRITE(IOUTPT,609,ERR=620) IPPPRG                                          DOESIM 249
  609 FORMAT(' UNABLE TO OPEN ALL HOURLY DATA FILES FROM PROG ', I3)            DOESIM 250
  620 CONTINUE                                                                  DOESIM 251
C              POSITION FILES                                                   DOESIM 252
      REWIND IHRREP(1)                                                          DOESIM 253
      REWIND IHRHDF                                                             DOESIM 254
C              CLEAR ACCOUNTING INFO                                            DOESIM 255
      IPROG  = 6                                                                DOESIM 256
#ifdef _DLL                                                                  /* -048   102 */ 
      CALL DISPC                                                                -048   103
      IF (IwinReturn .NE. 0)  GOTO 900                                          -048   104
C     irv= messageboxi( NULL, 'About to call USERPR'                            -048   105
C    $     //char(0),'inside DOESIM'//char(0), MB_OK)                           -048   106
#endif                                                                       /* -048   107 */ 
      CALL DAYSIM(0)                                                            PC      48
      CALL FILLN(0., AA(IAX+1), IADIM-IAX)                                      HR      27
      CALL USERPR                                                               DOESIM 258
C              DISPLAY TIMING INFO                                              DOESIM 259
      CALL DAYSIM(1)                                                            PC      49
      CLOSE( ICECHR )                                                           DOESIM 261
      CLOSE( ICECDT )                                                           DOESIM 262
#ifdef _DLL                                                                  /* -048   108 */ 
      CLOSE( ICECPR )                                                           -048   109
#endif                                                                       /* -048   110 */ 
      REWIND IHRREP(1)                                                          DOESIM 263
  700 CONTINUE                                                                  DOESIM 265
      IF (IwinReturn .ne. 0)  GOTO 900                                          -047k    4
C              Check for another simulation to be done - always call            HVAC2   10
C              systems if loads was just simulated                              HVAC2   11
      IF (ISYSFlag .EQ. 1)  THEN                                                HVAC7    3
        IPROG    = 2                                                            HVAC7    4
        ISFREC   = ISIM(2,MSIM) + 44  ! 44 loads records                        -045a    1
        ISYSFlag = 0                                                            HVAC7    6
c              flag to call economics next                                      HVAC7    7
        IECOFlag = 1                                                            HVAC7    8
        GOTO 300                                                                HVAC7    9
      ELSEIF (IECOFlag .EQ. 1)  THEN                                            HVAC7   10
        IPROG    = 4                                                            HVAC7   11
c              44 loads records, 8 systems, 39 plant                            -045a    2
        ISFREC   = ISIM(2,MSIM) + 91                                            HR      29
        IECOFlag = 0                                                            HVAC7   14
        GOTO 300                                                                HVAC7   15
      ELSE                                                                      HVAC7   16
        IF (MSIM .LT. NSIM)  GOTO 200                                           HVAC7   17
      ENDIF                                                                     HVAC7   18
  900 CONTINUE                                                                  DOESIM 268
      STTIM = CPUTIM(1) - STTIM                                                 PC      50
      write(   *  , 9915) STTIM                                                 PC      51
      write( 15   , 9915) STTIM                                                 PC      52
 9915 FORMAT ('End   DOESIM : Total elapsed time of ',F8.1,' seconds')          PC      53
      END                                                                       DOESIM 269
      SUBROUTINE ABT                                                            PC      54
C                                                                               PC      55
C                            UPON FATAL ERROR THIS ROUTINE IS CALLED            PC      56
C                            TO TERMINATE THE RUN                               PC      57
C                            fexit(0)   -  CAUSES ABNORNAL PROGRAM TERMINATION  PC      58
C                                          FLAG TO BE SET,  THUS ERROR TRAPPING PC      59
C                                          CAN BE DONE IN JOB CONTROL STREAM    PC      60
C                                                                               PC      61
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             -044     1
     1                IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL                         /FILES/  3
     2              , IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                    /FILES/  4
     3                IHRREP(3), IHRPAS(2)                                      /FILES/  5
      DIMENSION IFLS(21)                                                        PC      63
      EQUIVALENCE (IFLS(1),ISTNDF)                                              PC      64
c              ** Caution ** must also mod WCTRL1                               -048     1
      COMMON /WCTRL/  IwinReturn, Imsgflg                                       /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* -048     2 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        -048     3
     &                MB_ICONINFORMATION                                        -048     4
#else                                                                        /* -048     5 */ 
      include 'msgbox.fi'                                                       -048     6
#endif                                                                       /* -048     7 */ 
      WRITE(IOUTPT,1000)                                                        PC      65
 1000 FORMAT(//,1X,30(1H*),30H PROGRAM EXECUTION TERMINATED.)                   PC      66
C          Write termination message to log file and monitor                    PC      67
      write( 15   , 98001)                                                      PC      68
#ifndef _DLL                                                                 /* -048   111 */ 
      write(   *  , 98001)                                                      PC      69
#endif                                                                       /* -048   112 */ 
98001 FORMAT('*** DOE-2 SIMULATION WAS TERMINATED DUE TO ERRORS'/               PC      70
     $       '*** EXAMINE THE OUTPUT FILE FOR EXPLANATIONS OR ERRORS')          PC      71
      DO 25 i=1,21                                                              PC      72
      CLOSE(IFLS(i),ERR=25)                                                     PC      73
   25 CONTINUE                                                                  PC      74
#ifdef _DLL                                                                  /* -048   113 */ 
      Call MessageBox( NULL, 'Simulation Error - Aborting'//char(0),            -048   114
     $                 'DOE-2.2 Simulation - ABT'//char(0), MB_OK               -048   115
     $  + MB_ICONSTOP + MB_TASKMODAL )                                          -048   116
      IwinReturn = 1                                                            -048   117
      RETURN                                                                    -048   118
#else                                                                        /* -048   119 */ 
      CLOSE(15,ERR=26)                                                          PC      75
   26 call EXIT( 1 )                                                            -048   120
#endif                                                                       /* -048   121 */ 
      END                                                                       PC      77
      SUBROUTINE MessageBox( I1, CharString1, CharString2, I2)                  ABT1     2
c                                                                               ABT1     3
c              Temporary abort link for DOE-2.2                                 ABT1     4
c              Delete this routine for Windows                                  ABT1     5
c                                                                               ABT1     6
c              ** Caution ** must also mod WCTRL1                               -048     1
      COMMON /WCTRL/  IwinReturn, Imsgflg                                       /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* -048     2 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        -048     3
     &                MB_ICONINFORMATION                                        -048     4
#else                                                                        /* -048     5 */ 
      include 'msgbox.fi'                                                       -048     6
#endif                                                                       /* -048     7 */ 
                                                                                -048   123
      CHARACTER CharString1(*), CharString2(*)                                  -048   124
#ifdef _DLL                                                                  /* -048   125 */ 
c                                                                               -048   126
      IF(Imsgflg .eq. 0) THEN                                                   -048   127
        Irv = messageboxi(NULL,CharString1,CharString2,                         -048   128
     &  MB_OK+MB_ICONSTOP+MB_TASKMODAL )                                        -048   129
      ENDIF                                                                     -048   130
#endif                                                                       /* -048   131 */ 
c                                                                               ABT1     8
      RETURN                                                                    ABT1    10
      END                                                                       ABT1    11
      SUBROUTINE CKAA (IA, N)                                                   CKAA     2
C                                                                               CKAA     3
C              CKAA CHECKS TO INSURE N MORE WORDS ARE                           CKAA     4
C              AVAILABLE IN THE AA ARRAY.  IF NOT, MORE                         CKAA     5
C              ARE REQUESTED.                                                   CKAA     6
C                                                                               CKAA     7
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             -044     1
     1                IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL                         /FILES/  3
     2              , IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                    /FILES/  4
     3                IHRREP(3), IHRPAS(2)                                      /FILES/  5
      COMMON  /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE, IAXlds, IAXsys         HR       6
c              ** Caution ** must also mod WCTRL1                               -048     1
      COMMON /WCTRL/  IwinReturn, Imsgflg                                       /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* -048     2 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        -048     3
     &                MB_ICONINFORMATION                                        -048     4
#else                                                                        /* -048     5 */ 
      include 'msgbox.fi'                                                       -048     6
#endif                                                                       /* -048     7 */ 
C                                                                               CKAA    10
      NEED   = IAX + N + 10                                                     CKAA    11
C              CHECK MAX                                                        CKAA    12
      IAXMAX = MAX0(IAXMAX,NEED)                                                CKAA    13
C              IF ARRAY BIG ENOUGH                                              CKAA    14
   10 IF ((NEED).LT.IADIMV) RETURN                                              CKAA    15
C                                                                               CKAA    16
C              NEED MORE SPACE                                                  CKAA    17
C                                                                               CKAA    18
C              IF IA IS VARIABLY DIMENSIONED                                    CKAA    19
      IF (IADIM.EQ.0) GO TO 100                                                 CKAA    20
      WRITE(IOUTPT,1001)  IADIM                                                 CKAA    21
 1001 FORMAT(/,1X,75(1H*),/,                                                    PC      78
     1      29H EXCEEDED STORAGE CAPACITY OF ,I9, 7H WORDS. ,/,                 PC22b    1
     2      27H RERUN USING LARGER VERSION ,/,1X,75(1H*))                       PC      80
#ifdef _DLL                                                                  /* -048   132 */ 
      Call MessageBox( NULL, 'Problem too large for memory size -'              -048   133
     &  //' ABORTING'//char(0),'CKAA Errors'//char(0), MB_OK                    -048   134
     &  + MB_ICONSTOP+MB_TASKMODAL )                                            -048   135
      IwinReturn = 1                                                            -048   136
#else                                                                        /* -048   137 */ 
      CALL ABT                                                                  CKAA    25
#endif                                                                       /* -048   138 */ 
  100 RETURN                                                                    CKAA    26
      END                                                                       CKAA    27
      BLOCK DATA DATSIM                                                         DATSIM   2
C                                                                               DATSIM   3
C                            CONTROL OVERLAY COMMON BLOCK DATA                  DATSIM   4
C                                                                               DATSIM   5
      COMMON /CTRL  / VERS(2),IRPFLG(4),IOVRLL(7),IWRTFL,IPROG,                 /CTRL/   2
     1                        IFATAL,NAMPRG(3,7),MTRICR                         /CTRL/   3
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             -044     1
     1                IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL                         /FILES/  3
     2              , IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                    /FILES/  4
     3                IHRREP(3), IHRPAS(2)                                      /FILES/  5
      COMMON  /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE, IAXlds, IAXsys         HR       6
      COMMON /INTS  / IZERO,IONE,ITWO,ITHREE,IFOUR,IFIVE,ISIX,                  /INTS/   2
     1                ISEVEN,IEIGHT,ININE,ITEN,                                 /INTS/   3
     2                I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,                  /INTS/   4
     3                I21,I22,I23,I24,I25,I26,I27,I28,I29,I30,                  RemPA    1
     4                I31,I32,I33,I34,I35,I36,I37,I38,I39,I40,                  RemPA    2
     5                I41,I42,I43,I44,I45,I46,I47,I48,I49,I50,                  RemPA    3
     $                I51,I52,I53,I54,I55,I56,I57,I58,I59,I60,                  HVAC6    1
     $                I61,I62,I63,I64,I65,I66,I67,I68,I69,I70,                  HVAC6    2
     $                I71,I72,I73,I74,I75,I76,I77,I78,I79,I80,                  HVAC6    3
     $                I81,I82,I83,I84,I85,I86,I87,I88,I89,I90,                  HVAC6    4
     $                I91,I92,I93,I94,I95,I96,I97,I98,I99,I100                  HVAC6    5
      INTEGER         INTS(101)                                                 HVAC6    6
      EQUIVALENCE (IZERO,INTS(1))                                               /INTS/   7
C                                                                               /INTS/   8
      COMMON  /PPDAT0/  IPPIN0, IPPPRG                                          /PPDAT0/ 2
      COMMON  /TIME  / IDOY, IYR, IMO, IDAY, IHR,                               Time     1
     &                 ISCMO, ISCDAY, ISCHR, IDOW, ISCDOW, iDSdates(6),         -044e5   1
     &                 iTimeFlg, iDSFlg, iDDFlg, InitialFlg, LeapYr,            Time     3
     &                 CLOCK(10), MONDSC(13), MONLEN(12), MONSDA(12)            HR       8
      COMMON /UNITT/   VKONV(300), DUMLOG(4), JUNITT(4,300,2)                   UNITS1   1
      COMMON  /WEATH / IWDID(5),LRECX,WLAT,WLONG,LTIMZ,IFX,IWSIZ,               /WEATH/  2
     1                 CLRNES,TGNDR,WBT,DBT,PATM,CLDAMT,ISNOW,IRAIN,            /WEATH/  3
     2                 IWNDDR,HUMRAT,DENSTY,ENTHAL,DIFSOL,DIRSOL,SOLRAD,        /WEATH/  4
     3                 ICLDTY,WNDSPD,IDUMMY,DPT,WNDDRR,CLDCOV,RDNCC,            /WEATH/  5
     4                 BSCC,SKYA,DBTR,GTEMP(12),CLR(12),ESKY,EGND,IWINTR        /WEATH/  6
C                                                                               DATSIM  14
      DATA VERS /4H2.2-,4H0000/                                                 -41m     1
      DATA NAMPRG/4HLOAD, 4HS   , 4H    ,                                       DATSIM  16
     1            4HHVAC, 4H    , 4H    ,                                       -042L1   1
     2            4HPLAN, 4HT   , 4H    ,                                       DATSIM  18
     3            4HECON, 4HOMIC, 4HS   ,                                       DATSIM  19
     4            4HREPO, 4HRT  , 4H    ,                                       DATSIM  20
     5            4HHOUR, 4HLY-R, 4HEP  ,                                       DATSIM  21
     6            4HSOLA, 4HR   , 4H    /                                       DATSIM  22
      DATA ISTNDF/1/                                                            DATSIM  23
      DATA ICTRL /7/                                                            DATSIM  24
      DATA IWEATH/17/                                                           PC      81
      DATA ITDV/0/                                                              -044     2
      DATA IDSNFL/2/                                                            DATSIM  26
      DATA ILDSO /3/                                                            DATSIM  27
      DATA ISYSO /4/                                                            DATSIM  28
      DATA IREPFL/8/                                                            DATSIM  29
      DATA IHDFIL/11/                                                           DATSIM  30
      DATA IHRHDF/11/                                                           DATSIM  31
      DATA IOUTPT/6/                                                            DATSIM  32
      DATA IOUTPT /16/                                                          PC      82
      DATA IPLTO/13/                                                            DATSIM  34
#ifdef _DLL                                                                  /* -048a    9 */ 
      DATA IADIM / 75 000 000/                                                  -048a   10
#else                                                                        /* -048a   11 */ 
      DATA IADIM / 75 000 000/                                                  -048a   12
#endif                                                                       /* -048a   13 */ 
      DATA  IPPFIL /14/                                                         DATSIM  36
      DATA IAXMAX /0/                                                           DATSIM  37
C              ---                                                              DATSIM  38
      DATA ICECPR/19/                                                           DATSIM  39
      DATA ICECHR/21/                                                           DATSIM  40
      DATA ICECDT/31/                                                           DATSIM  41
C              UNITS FOR HOURLY-REPORTS - NORMAL, BINARY, FORMATTED             DATSIM  42
      DATA IHRREP /9, 24, 25/                                                   DATSIM  43
C              UNITS FOR FILES TO PASS HOURLY-REPORT DATA FROM LOADS/SYSTEMS    DATSIM  44
      DATA IHRPAS /26, 27/                                                      DATSIM  45
      DATA  DUMLOG/4*4H    /                                                    DATSIM  46
C              ---                                                              DATSIM  47
      DATA INTS/ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,                                  HVAC6    7
     $          10,11,12,13,14,15,16,17,18,19,                                  HVAC6    8
     $          20,21,22,23,24,25,26,27,28,29,                                  HVAC6    9
     $          30,31,32,33,34,35,36,37,38,39,                                  HVAC6   10
     $          40,41,42,43,44,45,46,47,48,49,                                  HVAC6   11
     $          50,51,52,53,54,55,56,57,58,59,                                  HVAC6   12
     $          60,61,62,63,64,65,66,67,68,69,                                  HVAC6   13
     $          70,71,72,73,74,75,76,77,78,79,                                  HVAC6   14
     $          80,81,82,83,84,85,86,87,88,89,                                  HVAC6   15
     $          90,91,92,93,94,95,96,97,98,99,100/                              HVAC6   16
      DATA IOVRLL /60000, 60000, 50000, 30000, 2*30000, 36864/                  DATSIM  50
      DATA KORE/0/                                                              DATSIM  51
      DATA MONLEN/31,28,31,30,31,30,31,31,30,31,30,31/                          DATSIM  52
      DATA MONSDA/0,31,59,90,120,151,181,212,243,273,304,334/                   DATSIM  53
      DATA MONDSC /3HJAN, 3HFEB, 3HMAR, 3HAPR, 3HMAY, 3HJUN,                    HR      31
     &             3HJUL, 3HAUG, 3HSEP, 3HOCT, 3HNOV, 3HDEC,                    HR      32
     &             3H YR/                                                       HR      33
      DATA IFX,IWSIZ / 0,0 /                                                    DATSIM  56
      DATA IWDID / 4H    ,4H    ,4H    ,4H    ,4H     /                         DATSIM  57
C              --- POST-PROC ZERO LEVEL INIT FLAG                               DATSIM  58
      DATA  IPPIN0 /0/                                                          DATSIM  59
      END                                                                       DATSIM  60
      SUBROUTINE DAYSIM( IFLAG )                                                PC      83
C                                                                               PC      84
      COMMON /CTRL  / VERS(2),IRPFLG(4),IOVRLL(7),IWRTFL,IPROG,                 /CTRL/   2
     1                        IFATAL,NAMPRG(3,7),MTRICR                         /CTRL/   3
      COMMON  /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE, IAXlds, IAXsys         HR       6
      COMMON  /TIME  / IDOY, IYR, IMO, IDAY, IHR,                               Time     1
     &                 ISCMO, ISCDAY, ISCHR, IDOW, ISCDOW, iDSdates(6),         -044e5   1
     &                 iTimeFlg, iDSFlg, iDDFlg, InitialFlg, LeapYr,            Time     3
     &                 CLOCK(10), MONDSC(13), MONLEN(12), MONSDA(12)            HR       8
      COMMON  /WEATH / IWDID(5),LRECX,WLAT,WLONG,LTIMZ,IFX,IWSIZ,               /WEATH/  2
     1                 CLRNES,TGNDR,WBT,DBT,PATM,CLDAMT,ISNOW,IRAIN,            /WEATH/  3
     2                 IWNDDR,HUMRAT,DENSTY,ENTHAL,DIFSOL,DIRSOL,SOLRAD,        /WEATH/  4
     3                 ICLDTY,WNDSPD,IDUMMY,DPT,WNDDRR,CLDCOV,RDNCC,            /WEATH/  5
     4                 BSCC,SKYA,DBTR,GTEMP(12),CLR(12),ESKY,EGND,IWINTR        /WEATH/  6
      CHARACTER fmto*72,ynh*2(2),namep*12(3),nf*2                               PC      89
      EQUIVALENCE (namep,NAMPRG)                                                PC      90
      SAVE TIM0                                                                 -047k    5
C                                                                               PC      91
      DATA   ynh /'ff','n '/                                                    PC      92
C            Write program unit start/end information to log file and monitor   PC      93
C                                                                               PC      94
      IF( IFLAG .EQ. 0 ) THEN                                                   PC      95
C---    GET CPU TIME BEFORE SIMULATION                                          PC      96
        TIM0 = CPUTIM( 0 )                                                      PC      97
        I = 0                                                                   PC      98
        if( (IPROG.le.3) .or. (IPROG.eq.7) ) then                               PC      99
          J = IWRTFL + 1                                                        PC     100
          nf = ynh(J)                                                           PC     101
          write(    15, 9000 ) namep(IPROG)(1:8),nf,IWDID                       PC     102
#ifndef _DLL                                                                 /* -048   139 */ 
          write(   *  , 9000 ) namep(IPROG)(1:8),nf,IWDID                       PC     103
#endif                                                                       /* -048   140 */ 
        else                                                                    PC     104
          write(    15, 9010 ) namep(IPROG)(:8)                                 PC     105
#ifndef _DLL                                                                 /* -048   141 */ 
          write(   *  , 9010 ) namep(IPROG)(:8)                                 PC     106
#endif                                                                       /* -048   142 */ 
        endif                                                                   PC     107
 9000   FORMAT                                                                  PC     108
     $   (9HStarting ,A8,17H: SAVE-FILES is O,A2,13H, weather is ,5A4)          PC     109
 9010   FORMAT                                                                  PC     110
     $   (9HStarting ,A8)                                                       PC     111
      ELSE                                                                      PC     112
C---    GET CPU TIME AFTER SIMULATION                                           PC     113
        T = CPUTIM( 1 ) - TIM0                                                  PC     114
#ifndef _DLL                                                                 /* -048   143 */ 
        write(   *  , 1003, ERR=103)                                            PC     115
     1   (NAMPRG(I,IPROG),I=1,2), CLOCK(7), itypls(CLOCK(8)), IAXMAX, T         PC     116
#endif                                                                       /* -048   144 */ 
  103   write( 15, 1003, ERR=104 )                                              PC     117
     1   (NAMPRG(I,IPROG),I=1,2), CLOCK(7), itypls(CLOCK(8)), IAXMAX, T         PC     118
 1003   FORMAT(  9HFinished ,2A4,1X,A4,I2,17H : Memory (wds) =,I10,             -048j    6
     1       14H, Time (sec) =,F8.2 )                                           PC2001  26
  104   CONTINUE                                                                PC     121
      ENDIF                                                                     PC     122
      RETURN                                                                    PC     123
      END                                                                       PC     124
      FUNCTION  cputim ( icode )                                                PC     125
      INTEGER*4 IHR,IMIN,ISEC,I100                                              -048   145
      CALL GETTIM(IHR,IMIN,ISEC,I100)                                           PC     127
      CPUTIM=((IHR*60)+IMIN)*60+ISEC+REAL(I100)/100.                            PC     128
      RETURN                                                                    PC     129
      END                                                                       PC     130
      SUBROUTINE DISPC                                                          DISPC    2
c           Console display of run status                                       -048   146
                                                                                -048   147
#ifdef _DLL                                                                  /* -048   148 */ 
      USE, INTRINSIC :: ISO_C_BINDING                                           -048   149
      USE SIMSTRUCT                                                             -048   150
      integer PDreturn                                                          -048   151
                                                                                -048   152
#endif                                                                       /* -048   153 */ 
      COMMON /CTRL  / VERS(2),IRPFLG(4),IOVRLL(7),IWRTFL,IPROG,                 /CTRL/   2
     1                        IFATAL,NAMPRG(3,7),MTRICR                         /CTRL/   3
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         BIGNAM   1
      COMMON  /TIME  / IDOY, IYR, IMO, IDAY, IHR,                               Time     1
     &                 ISCMO, ISCDAY, ISCHR, IDOW, ISCDOW, iDSdates(6),         -044e5   1
     &                 iTimeFlg, iDSFlg, iDDFlg, InitialFlg, LeapYr,            Time     3
     &                 CLOCK(10), MONDSC(13), MONLEN(12), MONSDA(12)            HR       8
c              ** Caution ** must also mod WCTRL1                               -048     1
      COMMON /WCTRL/  IwinReturn, Imsgflg                                       /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* -048     2 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        -048     3
     &                MB_ICONINFORMATION                                        -048     4
#else                                                                        /* -048     5 */ 
      include 'msgbox.fi'                                                       -048     6
#endif                                                                       /* -048     7 */ 
                                                                                -048   158
      CHARACTER*3 months(12),days(10)                                           PC112    7
      data months /3HJan,3HFeb,3HMar,3HApr,                                     DISPC   10
     1             3HMay,3HJun,3HJul,3HAug,                                     DISPC   11
     2             3HSep,3HOct,3HNov,3HDec/                                     DISPC   12
      data days   /3HSun,3HMon,3HTue,3HWed,3HThu,3HFri,3HSat,                   PC112    8
     1             3HHol,3HHDD,3HCDD/                                           PC112    9
                                                                                -048   159
#ifndef _DLL                                                                 /* -048   160 */ 
      write(  *  ,120) days(ISCDOW), months(IMO), IDAY, IYR,CHAR(13)            -048   161
  120 FORMAT(a3,1X,a3,i3,i5,a1$)                                                -048   162
#else                                                                        /* -048   163 */ 
      IwinReturn = 0                                                            -048   164
      IF(( IPRG .eq. 1) .or. ( IPRG .eq. 2)) THEN                               -048   165
        IF( InitialFlg .eq. 0 )  THEN                                           -048   166
          IDx = ISCDOW                                                          -048   167
        ELSE                                                                    -048   168
          IDx = 0                                                               -048   169
        ENDIF                                                                   -048   170
      ELSE                                                                      -048   171
        IDx = ISCDOW                                                            -048   172
      ENDIF                                                                     -048   173
      if( args.pCallbackFunc .ne. NULL)  then                                   -048   174
        PDreturn = performcallback5( args.pCallbackFunc,                        -048   175
     $                               IPROG, IDx, IMO, IDAY, IYR )               -048   176
        if( PDreturn .ne. 0 )  then                                             -048   177
          IwinReturn = 2                                                        -048   178
        endif                                                                   -048   179
      endif                                                                     -048   180
#endif                                                                       /* -048   181 */ 
      return                                                                    DISPC   17
      end                                                                       DISPC   18
      FUNCTION DEWPT(W,P)                                                       DEWPT    2
C                                                                               DEWPT    3
C              CALCULATE DEW POINT TEMPERATURE                                  DEWPT    4
C                                                                               DEWPT    5
C              SEE ASHRAE FUND. 1985, PAGE 6.13                                 DEWPT    6
C                                                                               DEWPT    7
      IF (W .LE. 0.)  W = .0001                                                 DEWPT    8
      PPWV = P*W/(.62198+W)                                                     DEWPT    9
      ALPHA = LOG(PPWV)                                                         DEWPT   10
      DP = 79.047 + 30.5790*ALPHA + 1.8893*ALPHA*ALPHA                          DEWPT   11
      IF (DP .LT. 32.) DP = 71.98 + 24.873*ALPHA + .8927*ALPHA*ALPHA            DEWPT   12
      DEWPT = DP                                                                DEWPT   13
      RETURN                                                                    DEWPT   14
      END                                                                       DEWPT   15
      SUBROUTINE DUMMY(INFILE)                                                  DUMMY    2
C                                                                               DUMMY    3
C     DUMMY ROUTINE TO LOAD I/O ROUTINES                                        DUMMY    4
C                                                                               DUMMY    5
      REWIND INFILE                                                             DUMMY    6
      ENDFILE INFILE                                                            DUMMY    7
      BACKSPACE INFILE                                                          DUMMY    8
      WRITE (INFILE) INFILE                                                     DUMMY    9
      READ (INFILE,1000) INFILE                                                 DUMMY   10
 1000 FORMAT(A1)                                                                DUMMY   11
      RETURN                                                                    DUMMY   12
      END                                                                       DUMMY   13
      subroutine  DUMPIT( it, IA, L )                                           PC110    1
c---                                                                            PC110    2
c--- dump it(1-5) as title (5a4), and ten IA's per line                         PC110    3
c---   v3 : write title on right hand side                                      PC110    4
c---   d2 : doe2 version ( uppercase ASCII only )                               PC110    5
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             -044     1
     1                IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL                         /FILES/  3
     2              , IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                    /FILES/  4
     3                IHRREP(3), IHRPAS(2)                                      /FILES/  5
c---                                                                            PC110    7
      INTEGER      it(5), IA(1)                                                 PC110    8
      CHARACTER*5  ifmt(60)                                                     PC110    9
      EQUIVALENCE  ( IW, RW )                                                   PC110   10
      integer      izerofl, izerofl0                                            PC110   11
c---                                                                            PC110   13
      data  inc0/10/                                                            PC110   14
C     data  ioutpt/6/                                                           PC110   15
c---                                                                            PC110   16
      IF ( L .lt. 1 )  THEN                                                     PC110   17
          write( IOUTPT, '(1x,i7,1h*,98x,1x,5a4)' )  L, it                      PC110   18
          return                                                                PC110   19
      ENDIF                                                                     PC110   20
      IF ( L .ne. 1 )      write( IOUTPT, '(1x)' )                              PC110   21
      inc    = inc0                                                             PC110   22
      DO  6000  J1 = 1 , L , INC                                                PC110   23
          J2 = MIN0( J1+INC-1, L )                                              PC110   24
          ifmt(1) = '(  1x'                                                     -048   182
          mf = 1                                                                PC110   26
          IF ( L .ne. 1 )    THEN                                               PC110   27
              ifmt(mf+1) = ',  i8'                                              -048   183
              ifmt(mf+2) = ', 1H*'                                              -048   184
              mf = mf + 2                                                       PC110   30
          ELSE                                                                  PC110   31
              ifmt(mf+1) = ',5A4,'                                              -048   185
              ifmt(mf+2) = '3H : '                                              -048   186
              mf = mf + 2                                                       PC110   34
          ENDIF                                                                 PC110   35
          DO  5000  J = J1 , J2                                                 PC110   36
              IW = IA(J)                                                        PC110   37
c---------------- ck if a4 format                                               PC110   38
              IX = IW                                                           PC110   39
              DO 200  K = 1 , 4                                                 PC110   40
                  IXX = IX .and. 255                                            PC110   41
c--  ctrl chars                                                                 PC110   42
                  if (    ( ixx .lt. 32 )                                       PC110   43
c--  [ and above (but not lowercase or {}                                       PC110   44
     1               .or.(( ixx .ge. 94 ).and.( ixx .le. 95))                   PC110   45
     1               .or. ( ixx .ge. 126).or. ( ixx .eq. 124)                   PC110   46
c--  !"#$%&'()*+,                                                               PC110   47
C    1               .or.(( ixx .ge. 33 ).and.( ixx .le. 44 ))                  PC110   48
c--  "                                                                          PC110   49
     1               .or. ( ixx .eq. 34 )                                       PC110   50
c--  ;<=>?@                                                                     PC110   51
C    1               .or.(( ixx .ge. 59 ).and.( ixx .le. 64 ))                  PC110   52
c--  ?@                                                                         PC110   53
     1               .or.(( ixx .ge. 63 ).and.( ixx .le. 64 ))                  PC110   54
     2               )  goto  300                                               PC110   55
                  IX = IX / 256                                                 PC110   56
200           CONTINUE                                                          PC110   57
              ifmt(mf+1) = ',2H "'                                              -048   187
              ifmt(mf+2) = 'A4,1H'                                              -048   188
              ifmt(mf+3) = '", 3X'                                              -048   189
              mf = mf + 3                                                       PC110   61
              GOTO  5000                                                        PC110   62
C--- CK INTEGER FORMAT                                                          PC110   63
300           IF( IABS( IW ) .GT. 9999999 )  GOTO  400                          PC110   64
                  ifmt(mf+1) = ',I8 ,'                                          -048   190
                  ifmt(mf+2) = '   2X'                                          -048   191
                  mf = mf + 2                                                   PC110   67
                  GOTO  5000                                                    PC110   68
400           continue                                                          PC110   69
c--- ck nan                                                                     PC110   70
cc            if ( (iw .and. '7f800000'x) .ne. '7f800000'x)  goto  500          PC110   71
cc                ifmt(mf+1) = 5h,1h#,                                          PC110   72
cc                ifmt(mf+2) = 5hz8,1x                                          PC110   73
cc                mf = mf + 2                                                   PC110   74
cc                GOTO  5000                                                    PC110   75
C--- MUST BE F.P.                                                               PC110   76
500           ifmt(mf+1) = '    ,'                                              -048   192
              mf = mf + 1                                                       PC110   78
                  IFMT(MF+1) = 'F10.7'                                          -048   193
                  IF( ABS( RW ) .ge. 1.    )  IFMT(MF+1) = 'F10.6'              -048   194
                  IF( ABS( RW ) .ge. 10.   )  IFMT(MF+1) = 'F10.5'              -048   195
                  IF( ABS( RW ) .ge. 100.  )  IFMT(MF+1) = 'F10.4'              -048   196
                  IF( ABS( RW ) .ge. 1000. )  IFMT(MF+1) = 'F10.3'              -048   197
                  IF( ABS( RW ) .ge. 10000.)  IFMT(MF+1) = 'F10.2'              -048   198
                  IF( ABS( RW ) .ge. 100000.) IFMT(MF+1) = 'F10.1'              -048   199
                  IF( ABS( RW ) .ge. 1000000.)IFMT(MF+1) = 'F10.0'              -048   200
                  IF( ABS( RW ) .ge. 1.0e7 )  IFMT(MF+1) = 'e10.4'              -048   201
                  IF( ABS( RW ) .le. 1.0e-4 ) IFMT(MF+1) = 'E10.4'              -048   202
              mf = mf + 1                                                       PC110   89
5000      CONTINUE                                                              PC110   90
          izerofl = 1                                                           PC110   91
          DO  J = J1 , J2                                                       PC110   92
              if( IA(J) .ne. 0 )   izerofl = 0                                  PC110   93
          ENDDO                                                                 PC110   94
          IF ( J1 .eq. 1 )  THEN                                                PC110   95
              IF ( L .ne. 1 )   THEN                                            PC110   96
                  DO  j = j2+1 , inc                                            PC110   97
                      mf = mf + 1                                               PC110   98
                      ifmt(mf) = ', 10x'                                        -048   203
                  ENDDO                                                         PC110  100
                  ifmt(mf+1) = ',  1x'                                          -048   204
                  ifmt(mf+2) = ',5a4,'                                          -048   205
                  ifmt(mf+3) = '1H: ,'                                          -048   206
                  ifmt(mf+4) = 'i3  )'                                          -048   207
                  if ( L .gt. 999  )    ifmt(mf+4) = 'i4  )'                    -048   208
                  if ( L .gt. 9999 )    ifmt(mf+4) = 'i5  )'                    -048   209
                  if ( L .gt. 99999)    ifmt(mf+4) = 'i6  )'                    -048   210
                  if ( L .gt. 999999)   ifmt(mf+4) = 'i8  )'                    -048   211
                  WRITE( IOUTPT, ifmt )   J1, ( IA(J), J=J1,J2 ), it, L         PC110  109
               ELSE                                                             PC110  110
                  ifmt(mf+1) = '    )'                                          -048   212
                  WRITE( IOUTPT, ifmt )   it, IA(1)                             PC110  112
              ENDIF                                                             PC110  113
           ELSE                                                                 PC110  114
              ifmt(mf+1) = ')    '                                              -048   213
              IF ( izerofl .eq. 0 )    THEN                                     PC110  116
                  WRITE( IOUTPT, ifmt )   J1, ( IA(J), J=J1,J2 )                PC110  117
               ELSE                                                             PC110  118
                  if( izerofl0 .eq. 0 )                                         PC110  119
     1                  write( ioutpt, '(1x,i8,1h*''--all zeros--'')' )         -048r    4
     2                                      J1                                  PC110  121
              ENDIF                                                             PC110  122
          ENDIF                                                                 PC110  123
          Flush( IOUTPT )                                                       -048   214
          izerofl0 = izerofl                                                    PC110  125
6000  CONTINUE                                                                  PC110  126
      RETURN                                                                    PC110  127
      END                                                                       PC110  128
      SUBROUTINE  DUMPIT2 ( IT, IA, nn, mm )                                    PC110  129
C---                                                                            PC110  130
C--- DUMP SUBROUTINE FOR DEBUGGING ,  dump ia(nn,mm)                            PC110  131
C---                                                                            PC110  132
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             -044     1
     1                IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL                         /FILES/  3
     2              , IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                    /FILES/  4
     3                IHRREP(3), IHRPAS(2)                                      /FILES/  5
C---                                                                            PC110  134
      DIMENSION    IT(5), IA(10000)                                             PC110  135
      CHARACTER*5  IFMT(60)                                                     PC110  136
      EQUIVALENCE  ( IW, RW )                                                   PC110  137
      dimension    iout(64)                                                     PC110  138
      INTEGER IBLANK                                                            PC110  139
C---                                                                            PC110  141
C      data  ioutpt /6/                                                         PC110  142
      data  inc    /14/                                                         PC110  143
      data iblank/4h    /                                                       PC110  144
C---                                                                            PC110  145
      WRITE( IOUTPT, 1 )  IT, nn, mm                                            PC110  146
1     FORMAT(/,1x,10(1H-),1X,5A4,4x,'nn='I6,4x,'mm='i6,1x,32(1h-))              PC110  147
      IF ( nn .le. 14 )    THEN                                                 PC110  148
          inc = 14                                                              PC110  149
        ELSE                                                                    PC110  150
          inc = 10                                                              PC110  151
      END IF                                                                    PC110  152
      l = nn * mm                                                               PC110  153
      IFMT(1) = '(1X  '                                                         PC110  154
      DO  600  mm1 = 1 , mm                                                     PC110  155
          j0 = (mm1-1) * nn                                                     PC110  156
          DO  550   nn1 = 1 , nn , inc                                          PC110  157
              j1 = j0 + nn1                                                     PC110  158
              j2 = min( j0+nn, j1-1+inc )                                       PC110  159
              MF = 1                                                            PC110  160
              nout = 0                                                          PC110  161
              ifmt(mf+1) = '1h(i5'                                              PC110  162
              ifmt(mf+2) = ',1h,,'                                              PC110  163
              ifmt(mf+3) = 'i3'')'''                                            PC110  164
              ifmt(mf+4) = 'i5''*'''                                            PC110  165
              iout(nout+1) = nn1                                                PC110  166
              iout(nout+2) = mm1                                                PC110  167
              iout(nout+3) = j1                                                 PC110  168
              IF ( nn1 .ne. 1 )    THEN                                         PC110  169
                  ifmt(mf+3) = 'a3'')'''                                        PC110  170
                  iout(nout+2) = iblank                                         PC110  171
              END IF                                                            PC110  172
              mf = mf + 4                                                       PC110  173
              nout = nout + 3                                                   PC110  174
              DO  500  J = J1 , J2                                              PC110  175
                  iout(nout+1) = ia(j)                                          PC110  176
                  nout = nout + 1                                               PC110  177
                  IW = IA(J)                                                    PC110  178
C--- CK IF A4 FORMAT                                                            PC110  179
                  IX = IW                                                       PC110  180
                  DO 200  K = 1 , 4                                             PC110  181
                      IXX = IX .AND. 255                                        PC110  182
c-- $ %                                                                         PC110  183
                      IF( (IXX .LT. 32) .OR. (IXX .GT. 90) )  GOTO  300         PC110  184
c-- ( )                                                                         PC110  185
                      if( (ixx .eq. 36) .or. (ixx .eq. 37) )  goto  300         PC110  186
c-- ,                                                                           PC110  187
                      if( (ixx .eq. 40) .or. (ixx .eq. 41) )  goto  300         PC110  188
c-- :                                                                           PC110  189
                      if( ixx .eq. 44 )  goto  300                              PC110  190
c-- ;                                                                           PC110  191
                      if( ixx .eq. 58 )  goto  300                              PC110  192
c-- =                                                                           PC110  193
                      if( ixx .eq. 59 )  goto  300                              PC110  194
c-- ? @                                                                         PC110  195
                      if( ixx .eq. 61 )  goto  300                              PC110  196
                      if( (ixx .eq. 63) .or. (ixx .eq. 64) )  goto  300         PC110  197
                          IX = IX / 256                                         PC110  198
200               CONTINUE                                                      PC110  199
                  IFMT(MF+1) = ',2h "'                                          PC110  200
                  IFMT(MF+2) = 'A4,1h'                                          PC110  201
                  IFMT(MF+3) = '", 1x'                                          PC110  202
                  MF = MF + 3                                                   PC110  203
                  GOTO  500                                                     PC110  204
C--- CK INTEGER FORMAT                                                          PC110  205
300           IF( IABS( IW ) .GT. 999999 )  GOTO  400                           PC110  206
                  IFMT(MF+1) = ',  I8'                                          PC110  207
                  if( iabs( iw ) .le. 999999 )  ifmt(mf+1) = 'i7,1x'            PC110  208
                  MF = MF + 1                                                   PC110  209
                  GOTO  500                                                     PC110  210
C--- MUST BE F.P.                                                               PC110  211
400               IFMT(MF+1) = '    ,'                                          PC110  212
                  MF = MF + 1                                                   PC110  213
                  IFMT(MF+1) = ' f8.6'                                          PC110  214
                  IF( ABS( RW ) .ge. 1.    )  IFMT(MF+1) = ' F8.5'              PC110  215
                  IF( ABS( RW ) .ge. 10.   )  IFMT(MF+1) = ' F8.4'              PC110  216
                  IF( ABS( RW ) .ge. 100.  )  IFMT(MF+1) = ' F8.3'              PC110  217
                  IF( ABS( RW ) .ge. 1000. )  IFMT(MF+1) = ' F8.2'              PC110  218
                  IF( ABS( RW ) .ge. 10000.)  IFMT(MF+1) = ' F8.1'              PC110  219
                  IF( ABS( RW ) .ge. 100000.) IFMT(MF+1) = ' F8.0'              PC110  220
                  IF( ABS( RW ) .ge. 1.0e6 )  IFMT(MF+1) = 'e11.5'              PC110  221
                  IF( ABS( RW ) .le. 1.0e-4 ) IFMT(MF+1) = 'E11.5'              PC110  222
                  MF = MF + 1                                                   PC110  223
500           CONTINUE                                                          PC110  224
              IFMT(MF+1) = ')    '                                              PC110  225
              WRITE( IOUTPT, IFMT )  (iout(j), j=1,nout)                        PC110  226
              Flush( IOUTPT )                                                   -048   215
550       continue                                                              PC110  228
600   CONTINUE                                                                  PC110  229
      RETURN                                                                    PC110  230
      END                                                                       PC110  231
      FUNCTION  FILM ( IS )                                                     FILM     2
C                                                                               FILM     3
C              CALCULATES OUTSIDE SURFACE FILM COEFFICIENT AS A FUNCTION        FILM     4
C              OF WIND SPEED AND SURFACE ROUGHNESS                              FILM     5
C                                                                               FILM     6
C                                                                               FILM     7
      COMMON  /WEATH / IWDID(5),LRECX,WLAT,WLONG,LTIMZ,IFX,IWSIZ,               /WEATH/  2
     1                 CLRNES,TGNDR,WBT,DBT,PATM,CLDAMT,ISNOW,IRAIN,            /WEATH/  3
     2                 IWNDDR,HUMRAT,DENSTY,ENTHAL,DIFSOL,DIRSOL,SOLRAD,        /WEATH/  4
     3                 ICLDTY,WNDSPD,IDUMMY,DPT,WNDDRR,CLDCOV,RDNCC,            /WEATH/  5
     4                 BSCC,SKYA,DBTR,GTEMP(12),CLR(12),ESKY,EGND,IWINTR        /WEATH/  6
C                                                                               FILM     9
      EQUIVALENCE  (V     , WNDSPD)                                             FILM    10
C                                                                               FILM    11
      IF( IS-2 )  100, 110, 20                                                  FILM    12
   20 IF( IS-4 )  120, 130, 40                                                  FILM    13
   40 IF( IS-6 )  140, 150, 150                                                 FILM    14
  100 FILM   = .535*V+2.04                                                      FILM    15
      RETURN                                                                    FILM    16
  110 FILM   = (.001329*V+.369)*V+2.20                                          FILM    17
      RETURN                                                                    FILM    18
  120 FILM   = .380*V+1.90                                                      FILM    19
      RETURN                                                                    FILM    20
  130 FILM   = (.363 - .002658*V)*V + 1.45                                      FILM    21
      RETURN                                                                    FILM    22
  140 FILM   = .281*V  +  1.8                                                   FILM    23
      RETURN                                                                    FILM    24
  150 FILM   = ( .302 - .001661 * V ) * V  +  1.45                              FILM    25
      RETURN                                                                    FILM    26
      END                                                                       FILM    27
      SUBROUTINE  FILLN ( C, X, N )                                             FILLN    2
C              ---                                                              FILLN    3
C              --- FILL C INTO X(1-N)                                           FILLN    4
C              ---                                                              FILLN    5
      DIMENSION  X(1)                                                           FILLN    6
      IF( N .LT. 1 )  RETURN                                                    FILLN    7
      DO  100  I = 1 , N                                                        FILLN    8
      X(I)   = C                                                                FILLN    9
  100 CONTINUE                                                                  FILLN   10
      RETURN                                                                    FILLN   11
      END                                                                       FILLN   12
      subroutine  FIMOV ( X )                                                   FIMOV    2
      entry       FIMOVS( X )                                                   FIMOV    3
c---                                                                            FIMOV    4
c--- move data to , from simulation and function variable area                  FIMOV    5
c---                                                                            FIMOV    6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON        // AA( 75 000 000)                                          -048a    2
      INTEGER          IA( 75 000 000)                                          -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON        // AA( 75 000 000)                                          -048a    5
      INTEGER          IA( 75 000 000)                                          -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE      (AA(1), IA(1))                                           HR       3
      COMMON  /FPTRS/  IFLABL(4), LSFREC, NLITT , NCONT , NCODE, ICONT0         /FPTRS/  2
     .               , IFLEVL, NSYMT, ISYMT0, ICODE0, ILITT0, IVAR0             /FPTRS/  3
     3               , IFNBGN, NFN, FRANDX, FNTYPE, IFGET, IVAR, JSYMT          /FPTRS/  4
c---                                                                            FIMOV    9
      equivalence  ( XX, IXX )                                                  FIMOV   10
c---                                                                            FIMOV   11
c---- IFGET = 0 for fetching =1 for storing                                     FIMOV   12
c---                                                                            FIMOV   13
      if( IFGET .ne. 0 )    then                                                FIMOV   14
          XX = X                                                                FIMOV   15
          AA(IVAR) = XX                                                         FIMOV   16
C---------    IA(JSYMT+5) .lt. 0  if integer                                    FIMOV   17
          if( IA(JSYMT+5) .lt. 0 )  AA(IVAR) = IXX                              FIMOV   18
      else                                                                      FIMOV   19
          XX = AA(IVAR)                                                         FIMOV   20
          if( IA(JSYMT+5) .lt. 0 )    then                                      FIMOV   21
              if( XX .ge. 0 )    then                                           FIMOV   22
                  IXX = XX + 0.000001                                           FIMOV   23
              else                                                              FIMOV   24
                  IXX = XX - 0.000001                                           FIMOV   25
              endif                                                             FIMOV   26
          endif                                                                 FIMOV   27
          X = XX                                                                FIMOV   28
      endif                                                                     FIMOV   29
      return                                                                    FIMOV   30
      end                                                                       FIMOV   31
c-----------------------------------------------------------------------        FIMOV   32
      subroutine  FINTL ( MFN, FNTYPX )                                         FINT     2
c---                                                                            FINT     3
c--- interpret function code for LOADS and SYSTEMS.                             FINT     4
c---                                                                            FINT     5
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             -044     1
     1                IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL                         /FILES/  3
     2              , IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                    /FILES/  4
     3                IHRREP(3), IHRPAS(2)                                      /FILES/  5
      common  /FMPTR/  MPTR(16)                                                 /FMPTR/  2
      COMMON  /FPTRS/  IFLABL(4), LSFREC, NLITT , NCONT , NCODE, ICONT0         /FPTRS/  2
     .               , IFLEVL, NSYMT, ISYMT0, ICODE0, ILITT0, IVAR0             /FPTRS/  3
     3               , IFNBGN, NFN, FRANDX, FNTYPE, IFGET, IVAR, JSYMT          /FPTRS/  4
      COMMON  /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE, IAXlds, IAXsys         HR       6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON        // AA( 75 000 000)                                          -048a    2
      INTEGER          IA( 75 000 000)                                          -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON        // AA( 75 000 000)                                          -048a    5
      INTEGER          IA( 75 000 000)                                          -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE      (AA(1), IA(1))                                           HR       3
c---                                                                            FINT    11
      dimension  TMP(100), ARGV(100), IARGL(100)                                FINT    12
c              ** Caution ** must also mod WCTRL1                               -048     1
      COMMON /WCTRL/  IwinReturn, Imsgflg                                       /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* -048     2 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        -048     3
     &                MB_ICONINFORMATION                                        -048     4
#else                                                                        /* -048     5 */ 
      include 'msgbox.fi'                                                       -048     6
#endif                                                                       /* -048     7 */ 
c---                                                                            FINT    13
      H(DB,W)   = 0.24*DB + (1061.0+0.444*DB)*W                                 FINT    14
      V(DB,W,P) = 0.754*(DB+459.7)*(1.0+1.605*W)/P                              FINT    15
c-----------------------------------------------------------------------        FINT    16
c     ILS = 0 for LOADS functions, = 1 for SYSTEMS functions.                   FINT    17
c                                                                               FINT    18
      ILS = 0                                                                   FINT    19
      goto  100                                                                 FINT    20
c-----------------------------------------------------------------------        FINT    21
c                                                                               FINT    22
      entry        FINTS ( MFN, FNTYPX )                                        FINT    23
c                                                                               FINT    24
      ILS    = 1                                                                FINT    25
      ISKIPS = 0                                                                FINT    26
c-----------------------------------------------------------------------        FINT    27
c                                                                               FINT    28
100   FNTYPE = FNTYPX                                                           FINT    29
c                                                                               FINT    30
c--- get values from simulation data structure and put them                     FINT    31
c---   in function symbol table.                                                FINT    32
c                                                                               FINT    33
c-----first move the pointers.                                                  FINT    34
c                                                                               FINT    35
       call  MOVEN( IA(MFN+9), ICONT0, 7 )                                      FINT    36
c                                                                               FINT    37
c$    write( IOUTPT, 901 )  (IA(MFN+I), I=1,4), MFN                             FINT    38
c$901 format( ' )))) FINT ))))  NAME=', 4A4, '   MFN=', I5 )                    FINT    39
c                                                                               FINT    40
c-----move calculation related data.                                            FINT    41
c                                                                               FINT    42
      IFGET = 1                                                                 FINT    43
      if ( ILS .eq. 0 )    then                                                 FINT    44
           call  FIACCL( 0, 0 )                                                 FINT    45
      else                                                                      FINT    46
           call  FIACCS( 0, 0 )                                                 FINT    47
      endif                                                                     FINT    48
c                                                                               FINT    49
c$    write( IOUTPT, 902 )  (I, (AA(ISYMT0+(I-1)*8+J),J=1,2)                    FINT    50
c$   .                      , AA(IVAR0+I), I=1,NSYMT)                           FINT    51
c$902 format( 1X, I3'=' A4A3, G11.3,   5X, I3'=' A4A3, G11.3,                   FINT    52
c$   .        5X, I3'=' A4A3, G11.3,   5X, I3'=' A4A3, G11.3,                   FINT    53
c$   .        5X, I3'=' A4A3, G11.3 )                                           FINT    54
c$    IPCXXX = 0                                                                FINT    55
c                                                                               FINT    56
      IPC  = ICODE0 + 1                                                         FINT    57
      IOUNIT = IOUTPT                                                           FINT    58
300   NTMP = 0                                                                  FINT    59
      NARG = 0                                                                  FINT    60
400   continue                                                                  FINT    61
c                                                                               FINT    62
c$    if( IPCXXX .ne. 0 )  then                                                 FINT    63
c$        write( IOUTPT, 903 ) IPCXXX, IOPCD, IOPRN, NTMP, OPRN                 FINT    64
c$   .                       , (TMP(I), I=1,min( NTMP, 4 ))                     FINT    65
c$903     format( ' ---- FINT ----  ('I4,I3,I5,')  NTMP='I2,                    FINT    66
c$   .            '  OPRND='G12.5, '  TMP='4G14.6 )                             FINT    67
c$        if( NTMP .gt. 4 )  write( IOUTPT, 904 )  (TMP(I), I=5,NTMP)           FINT    68
c$904     format( 40X,6G14.6 )                                                  FINT    69
c$    endif                                                                     FINT    70
c$    IPCXXX = IPC - ICODE0                                                     FINT    71
c                                                                               FINT    72
      IOPRN = IA(IPC) / 256  -  100000                                          FINT    73
      IOPCD = MOD( IA(IPC), 256 )                                               FINT    74
      IPC   = IPC + 1                                                           FINT    75
c---- ck if  OP = NOOP                                                          FINT    76
      if( IOPCD .ne. 25 )   goto  421                                           FINT    77
          LINENO = IOPRN                                                        FINT    78
          goto  300                                                             FINT    79
421   continue                                                                  FINT    80
      if( IOPCD .ge. 23 )     then                                              FINT    81
          goto  23000                                                           FINT    82
      endif                                                                     FINT    83
      if( IOPRN .eq. 0 )  goto  440                                             FINT    84
          OPRN = AA(IVAR0+IOPRN)                                                FINT    85
          goto  450                                                             FINT    86
440   OPRN = TMP(NTMP)                                                          FINT    87
c---------if binary op,  pop stack.                                             FINT    88
      if( (IOPCD .le. 16) .or. (IOPCD .eq. 21) )  NTMP = NTMP - 1               FINT    89
450   P = TMP(NTMP)                                                             FINT    90
      goto(  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,                             FINT    91
     1      11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 ), IOPCD             FINT    92
c-----op= +                                                                     FINT    93
1     TMP(NTMP) = TMP(NTMP) + OPRN                                              FINT    94
              goto  400                                                         FINT    95
c-----op= -                                                                     FINT    96
2     TMP(NTMP) = TMP(NTMP) - OPRN                                              FINT    97
              goto  400                                                         FINT    98
c-----op= *                                                                     FINT    99
3     TMP(NTMP) = TMP(NTMP) * OPRN                                              FINT   100
              goto  400                                                         FINT   101
c-----op= /                                                                     FINT   102
4     if( OPRN .EQ. 0. )     then                                               FINT   103
          goto  804                                                             FINT   104
      endif                                                                     FINT   105
      TMP(NTMP) = TMP(NTMP) / OPRN                                              FINT   106
              goto  400                                                         FINT   107
c-----op= R-                                                                    FINT   108
5     TMP(NTMP) = OPRN - TMP(NTMP)                                              FINT   109
              goto  400                                                         FINT   110
c-----op= R/                                                                    FINT   111
6     if( TMP(NTMP) .EQ. 0. )     then                                          FINT   112
          goto  804                                                             FINT   113
      endif                                                                     FINT   114
      TMP(NTMP) = OPRN / TMP(NTMP)                                              FINT   115
              goto  400                                                         FINT   116
c-----op= U-                                                                    FINT   117
17    NTMP = NTMP + 1                                                           FINT   118
      TMP(NTMP) = - OPRN                                                        FINT   119
              goto  400                                                         FINT   120
c-----op= =                                                                     FINT   121
19    AA(IVAR0+IOPRN) = TMP(NTMP)                                               FINT   122
      NTMP = 0                                                                  FINT   123
c$    write( IOUTPT, 902 )  (I, (AA(ISYMT0+(I-1)*8+J),J=1,2)                    FINT   124
c$   .                      , AA(IVAR0+I), I=1,NSYMT)                           FINT   125
              goto  400                                                         FINT   126
c-----op= LD                                                                    FINT   127
20    NTMP = NTMP + 1                                                           FINT   128
      TMP(NTMP) = OPRN                                                          FINT   129
              goto  400                                                         FINT   130
c-----op= ARG                                                                   FINT   131
21    NARG = NARG + 1                                                           FINT   132
      ARGV(NARG)  = OPRN                                                        FINT   133
      IARGL(NARG) = IOPRN                                                       FINT   134
c$    write( IOUTPT, 905 )  NARG, (ARGV(I), IARGL(I), I=1,min( 5,NARG ))        FINT   135
c$905 format( ' ---- FINT ----  NARG=',I3,'  ARG.=', 5(G12.5,I5,'  ,'))         FINT   136
c$    if( NARG .gt. 5 ) write(IOUTPT, 906)  (ARGV(I),IARGL(I),I=6,NARG)         FINT   137
c$906 format( 26X, G12.5,I5,3H  ,, G12.5,I5,3H  ,, G12.5,I5,3H  ,,              FINT   138
c$   .             G12.5,I5,3H  ,, G12.5,I5 )                                   FINT   139
              goto  400                                                         FINT   140
c-----op= **                                                                    FINT   141
7     X = TMP(NTMP)                                                             FINT   142
      Y = OPRN                                                                  FINT   143
70000 if( FLOAT( INT( Y ) ) .ne. Y )  goto  70020                               FINT   144
          TMP(NTMP) = X ** INT( Y )                                             FINT   145
          goto  400                                                             FINT   146
70020 if ( TMP(NTMP) .ge. 0. )    then                                          FINT   147
           TMP(NTMP) = TMP(NTMP) ** OPRN                                        FINT   148
              goto  400                                                         FINT   149
      else                                                                      FINT   150
          goto  807                                                             FINT   151
      endif                                                                     FINT   152
c-----op= R**                                                                   FINT   153
8     X = OPRN                                                                  FINT   154
      Y = TMP(NTMP)                                                             FINT   155
        goto  70000                                                             FINT   156
c-----op= .EQ.                                                                  FINT   157
9     if( TMP(NTMP) .eq. OPRN )  goto  1700                                     FINT   158
              goto  1800                                                        FINT   159
c-----op= .NE.                                                                  FINT   160
10    if( TMP(NTMP) .ne. OPRN )  goto  1700                                     FINT   161
              goto  1800                                                        FINT   162
c-----op= .GT.                                                                  FINT   163
11    if( TMP(NTMP) .gt. OPRN )  goto  1700                                     FINT   164
              goto  1800                                                        FINT   165
c-----op= .GE.                                                                  FINT   166
12    if( TMP(NTMP) .ge. OPRN )  goto  1700                                     FINT   167
              goto  1800                                                        FINT   168
c-----op= .LT.                                                                  FINT   169
13    if( TMP(NTMP) .lt. OPRN )  goto  1700                                     FINT   170
              goto  1800                                                        FINT   171
c-----op= .LE.                                                                  FINT   172
14    if( TMP(NTMP) .le. OPRN )  goto  1700                                     FINT   173
              goto  1800                                                        FINT   174
c-----op= .OR.                                                                  FINT   175
15    if( (TMP(NTMP).ne.0) .or. (OPRN.ne.0) )  goto  1700                       FINT   176
              goto  1800                                                        FINT   177
c-----op= .and.                                                                 FINT   178
16    if( (TMP(NTMP).ne.0) .and. (OPRN.ne.0) )  goto  1700                      FINT   179
              goto  1800                                                        FINT   180
c-----op= .NOT.                                                                 FINT   181
18    NTMP = NTMP + 1                                                           FINT   182
      if( OPRN .eq. 0 )  goto  1700                                             FINT   183
              goto  1800                                                        FINT   184
c-------result = .T.                                                            FINT   185
1700  TMP(NTMP) = 1                                                             FINT   186
      goto  400                                                                 FINT   187
c-------result = .F.                                                            FINT   188
1800  TMP(NTMP) = 0                                                             FINT   189
      goto  400                                                                 FINT   190
c-----op= P=                                                                    FINT   191
c----------- for all <> variables using this pointer                            FINT   192
c----------- 1.store value in AA using old value of pointer                     FINT   193
c----------- 2.fetch value from AA using new value of pointer                   FINT   194
c----------- then, update ptr value in MPTR()                                   FINT   195
22    AA(IVAR0+IOPRN) = TMP(NTMP)                                               FINT   196
      IOFFG0 = TMP(NTMP) + 0.1                                                  FINT   197
      ISYPTR = ISYMT0 + (IOPRN-1)*8                                             FINT   198
      IPTROF = IA(ISYPTR+8)                                                     FINT   199
      IOFFP0 = MPTR(IPTROF)                                                     FINT   200
      MPTR(IPTROF) = IOFFG0                                                     FINT   201
      IVAR   = IVAR0                                                            FINT   202
      JSYMT  = ISYMT0 - 8                                                       FINT   203
c                                                                               FINT   204
      do  2201  ISYMT = 1 , NSYMT                                               FINT   205
          IVAR  = IVAR + 1                                                      FINT   206
          JSYMT = JSYMT + 8                                                     FINT   207
          if( (IA(JSYMT+4).ne.1) .or. (IA(JSYMT+6).ne.3) .or.                   FINT   208
     1        (IA(JSYMT+7).ne.IPTROF) )  goto  2201                             FINT   209
              IFGET = 0                                                         FINT   210
               call  FIMOV( AA(IOFFP0 + IA(JSYMT+8)) )                          FINT   211
              IFGET = 1                                                         FINT   212
               call  FIMOV( AA(IOFFG0 + IA(JSYMT+8)) )                          FINT   213
2201  continue                                                                  FINT   214
      NTMP = 0                                                                  FINT   215
c$    write( IOUTPT, 902 )  (I, (AA(ISYMT0+(I-1)*8+J),J=1,2)                    FINT   216
c$   .                      , AA(IVAR0+I), I=1,NSYMT)                           FINT   217
              goto  400                                                         FINT   218
c                                                                               FINT   219
c--- non numeric opcodes                                                        FINT   220
c                                                                               FINT   221
23000 IOPCD1 = IOPCD - 22                                                       FINT   222
      goto( 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34                      FINT   223
     1    , 35, 36, 37, 38, 39, 40, 41 ), IOPCD1                                FINT   224
c-----op= IFGO                                                                  FINT   225
23    if( TMP(NTMP) .eq. 0 )  IPC = ICODE0 + IOPRN                              FINT   226
              goto  300                                                         FINT   227
c-----op= goto                                                                  FINT   228
34    IPC = ICODE0 + IOPRN                                                      FINT   229
              goto  300                                                         FINT   230
c-----op= call                                                                  FINT   231
24    if( IOPRN .gt. 0 )  goto  24100                                           FINT   232
          IOPRN = - IOPRN                                                       FINT   233
          NTMP  = NTMP + 1                                                      FINT   234
          NARG  = NARG - 1                                                      FINT   235
          goto  ( 24001, 24002, 24003, 24004, 24005, 24006, 24007               FINT   236
     1          , 24008, 24009, 24010, 24011, 24012, 24013, 24014               FINT   237
     2          , 24015, 24016, 24017, 24018, 24019, 24020, 24021               FINT   238
     3          , 24022, 24023, 24024, 24025, 24026, 24027                      FINT   239
     4          , 24028, 24029 ), IOPRN                                         FINT   240
24001         TMP(NTMP) = SIN( ARGV(NARG+1) )                                   FINT   241
                                                goto  400                       FINT   242
24002         TMP(NTMP) = COS( ARGV(NARG+1) )                                   FINT   243
                                                goto  400                       FINT   244
24003         TMP(NTMP) = ATAN( ARGV(NARG+1) )                                  FINT   245
                                                goto  400                       FINT   246
c------------ ALOG( X ) ------------                                            FINT   247
24004         if( ARGV(NARG+1) .le. 0. )    then                                FINT   248
                  goto  82404                                                   FINT   249
              endif                                                             FINT   250
              TMP(NTMP) = ALOG( ARGV(NARG+1) )                                  FINT   251
                                                goto  400                       FINT   252
24005         TMP(NTMP) = ABS(  ARGV(NARG+1) )                                  FINT   253
                                                goto  400                       FINT   254
24006         TMP(NTMP) = EXP(  ARGV(NARG+1) )                                  FINT   255
                                                goto  400                       FINT   256
c------------ RAND(.) ------------                                              FINT   257
24007         FRANDX = (FLOAT( MOD( 3612 * INT( FRANDX * 566927.0)+5701,        FINT   258
     1                             566927 ) ) +0.5) / 566927.0                  FINT   259
              TMP(NTMP) = FRANDX                                                FINT   260
                                                goto  400                       FINT   261
c------------ SQRT( X ) ------------                                            FINT   262
24008         if( ARGV(NARG+1) .le. 0. )     then                               FINT   263
                  goto  82408                                                   FINT   264
              endif                                                             FINT   265
              TMP(NTMP) = SQRT( ARGV(NARG+1) )                                  FINT   266
                                                goto  400                       FINT   267
c------------ ALOG10( X ) ------------                                          FINT   268
24009         if( ARGV(NARG+1) .le. 0. )     then                               FINT   269
                  goto  82404                                                   FINT   270
              endif                                                             FINT   271
              TMP(NTMP) = ALOG10( ARGV(NARG+1) )                                FINT   272
                                                goto  400                       FINT   273
24010         NARG = NARG - 1                                                   FINT   274
              TMP(NTMP) = AMOD( ARGV(NARG+2), ARGV(NARG+1) )                    FINT   275
                                                goto  400                       FINT   276
24011         NARG = NARG - 1                                                   FINT   277
              TMP(NTMP) = AMAX1( ARGV(NARG+1), ARGV(NARG+2) )                   FINT   278
                                                goto  400                       FINT   279
24012         NARG = NARG - 1                                                   FINT   280
              TMP(NTMP) = AMIN1( ARGV(NARG+1), ARGV(NARG+2) )                   FINT   281
                                                goto  400                       FINT   282
c------------ PWL( TABLE, X ) -------- ??? TABLE ARG OF PWL MUST BE BY PTR      FINT   283
24013         NARG = NARG - 1                                                   FINT   284
              if ( IARGL(NARG+2) .gt. NSYMT )    then                           FINT   285
                  goto  82413                                                   FINT   286
              endif                                                             FINT   287
              MSYT = ( IARGL(NARG+2) - 1 ) * 8   +   ISYMT0                     FINT   288
              M    = IA(MSYT+5)  +  ICONT0                                      FINT   289
              X    = ARGV(NARG+1)                                               FINT   290
              I2   = IA(MSYT+7)                                                 FINT   291
              do  I = 2 , I2                                                    FINT   292
                  M = M + 2                                                     FINT   293
                  if( X .lt. AA(M) )  goto  24213                               FINT   294
              enddo                                                             FINT   295
24213         TMP(NTMP) = ( AA(M+1) - AA(M-1) )  /  ( AA(M) - AA(M-2) )         FINT   296
     1                  * ( X - AA(M-2) )   +   AA(M-1)                         FINT   297
                                                goto  400                       FINT   298
c------------ INT( X ) ------------                                             FINT   299
24014         S = 0.00001                                                       FINT   300
              if( ARGV(NARG+1) .lt. 0 )  S = -0.00001                           FINT   301
              TMP(NTMP) = INT( ARGV(NARG+1)  +  S )                             FINT   302
                                                goto  400                       FINT   303
c------------ ACCESS( IXIA ) ------------                                       FINT   304
24015         I = ARGV(NARG+1) + 0.01                                           FINT   305
              TMP(NTMP) = AA(I)                                                 FINT   306
                                                goto  400                       FINT   307
c------------ STORE( val, IXIA ) ------------                                   FINT   308
24016         NARG = NARG - 1                                                   FINT   309
              I = ARGV(NARG+1)+ 0.01                                            FINT   310
              AA(I) = ARGV(NARG+2)                                              FINT   311
              TMP(NTMP) = AA(I)                                                 FINT   312
                                                goto  400                       FINT   313
c------------ IACCESS( IXIA ) ------------                                      FINT   314
24017         I = ARGV(NARG+1) + 0.01                                           FINT   315
              TMP(NTMP) = IA(I)                                                 FINT   316
                                                goto  400                       FINT   317
c------------ ISTORE( val, IXIA ) ------------                                  FINT   318
24018         NARG = NARG - 1                                                   FINT   319
              I = ARGV(NARG+1)+ 0.01                                            FINT   320
              IA(I) = INT( ARGV(NARG+2) )                                       FINT   321
              TMP(NTMP) = IA(I)                                                 FINT   322
                                                goto  400                       FINT   323
c------------- GETAA( N ) ------------                                          FINT   324
24019         TMP(NTMP) = IAX + 1                                               FINT   325
               call  CKAA( IA, INT( ARGV(NARG+1) ) )                            FINT   326
                                                goto  400                       FINT   327
24020         NARG = NARG - 1                                                   FINT   328
              TMP(NTMP) = H( ARGV(NARG+2), ARGV(NARG+1) )                       FINT   329
                                                goto  400                       FINT   330
24021         NARG = NARG - 2                                                   FINT   331
              TMP(NTMP) = V( ARGV(NARG+3), ARGV(NARG+2), ARGV(NARG+1) )         FINT   332
                                                goto  400                       FINT   333
24022         NARG = NARG - 2                                                   FINT   334
              TMP(NTMP) =RHFUNC( ARGV(NARG+3),ARGV(NARG+2),ARGV(NARG+1))        FINT   335
                                                goto  400                       FINT   336
24023         NARG = NARG - 2                                                   FINT   337
              TMP(NTMP) = WBFS(  ARGV(NARG+3),ARGV(NARG+2),ARGV(NARG+1))        FINT   338
                                                goto  400                       FINT   339
24024         NARG = NARG - 2                                                   FINT   340
              TMP(NTMP) = WFUNC( ARGV(NARG+3),ARGV(NARG+2),ARGV(NARG+1))        FINT   341
                                                goto  400                       FINT   342
24025         NARG = NARG - 2                                                   FINT   343
              if ( ILS .eq. 0 )    then                                         FINT   344
                  goto  82425                                                   FINT   345
              endif                                                             FINT   346
              TMP(NTMP) = CVAL( INT( ARGV(NARG+3)+0.1 ),                        FINT   347
     1                          ARGV(NARG+2), ARGV(NARG+1) )                    FINT   348
                                                goto  400                       FINT   349
c------------ GET( v, i ) ------------                                          FINT   350
24026 NARG = NARG - 1                                                           FINT   351
      i = ARGV(NARG+1) + 0.01                                                   FINT   352
      JSYMT = (IARGL(NARG+2) - 1) * 8  +  ISYMT0                                FINT   353
      IVAR  =  IARGL(NARG+2) - 1       +  IVAR0                                 FINT   354
      IFGET = 1                                                                 FINT   355
      sav = AA(IVAR)                                                            FINT   356
      if ( ILS .eq. 0 )    then                                                 FINT   357
           call  FIACCL( 1, i-1 )                                               FINT   358
      else                                                                      FINT   359
           call  FIACCS( 1, i-1 )                                               FINT   360
      endif                                                                     FINT   361
      TMP(NTMP) = AA(IVAR)                                                      FINT   362
      AA(ivar) = sav                                                            FINT   363
                                                goto  400                       FINT   364
c------------ PUT( x, v, i ) ------------                                       FINT   365
24027 NARG = NARG - 2                                                           FINT   366
      i = ARGV(NARG+1) + 0.01                                                   FINT   367
      JSYMT = (IARGL(NARG+2) - 1) * 8  +  ISYMT0                                FINT   368
      IVAR  =  IARGL(NARG+2) - 1       +  IVAR0                                 FINT   369
      IFGET = 0                                                                 FINT   370
      sav = AA(IVAR)                                                            FINT   371
      AA(IVAR) = ARGV(NARG+3)                                                   FINT   372
      if ( ILS .eq. 0 )    then                                                 FINT   373
           call  FIACCL( 1, i-1 )                                               FINT   374
      else                                                                      FINT   375
           call  FIACCS( 1, i-1 )                                               FINT   376
      endif                                                                     FINT   377
      AA(IVAR) = sav                                                            FINT   378
      TMP(NTMP) = ARGV(NARG+3)                                                  FINT   379
                                                goto  400                       FINT   380
c------------ GETI( v, i ) ------------                                         FINT   381
24028 NARG = NARG - 1                                                           FINT   382
      i = ARGV(NARG+1) + 0.01                                                   FINT   383
      JSYMT = (IARGL(NARG+2) - 1) * 8  +  ISYMT0                                FINT   384
      IVAR  =  IARGL(NARG+2) - 1       +  IVAR0                                 FINT   385
      IFGET = 1                                                                 FINT   386
      sav = AA(IVAR)                                                            FINT   387
      if ( ILS .eq. 0 )    then                                                 FINT   388
           call  FIACCL( 1, i-1 )                                               FINT   389
      else                                                                      FINT   390
           call  FIACCS( 1, i-1 )                                               FINT   391
      endif                                                                     FINT   392
      TMP(NTMP) = IA(IVAR)                                                      FINT   393
      AA(ivar) = sav                                                            FINT   394
                                                goto  400                       FINT   395
c------------ PUTI( x, v, i ) ------------                                      FINT   396
24029 NARG = NARG - 2                                                           FINT   397
      i = ARGV(NARG+1) + 0.01                                                   FINT   398
      JSYMT = (IARGL(NARG+2) - 1) * 8  +  ISYMT0                                FINT   399
      IVAR  =  IARGL(NARG+2) - 1       +  IVAR0                                 FINT   400
      IFGET = 0                                                                 FINT   401
      sav = AA(IVAR)                                                            FINT   402
      IA(IVAR) = ARGV(NARG+3)                                                   FINT   403
      if ( ILS .eq. 0 )    then                                                 FINT   404
           call  FIACCL( 1, i-1 )                                               FINT   405
      else                                                                      FINT   406
           call  FIACCS( 1, i-1 )                                               FINT   407
      endif                                                                     FINT   408
      AA(IVAR) = sav                                                            FINT   409
      TMP(NTMP) = ARGV(NARG+3)                                                  FINT   410
                                                goto  400                       FINT   411
24100 continue                                                                  FINT   412
              goto  300                                                         FINT   413
c-----op= NOOP                                                                  FINT   414
25    LINENO = IOPRN                                                            FINT   415
              goto  300                                                         FINT   416
c-----op= END                                                                   FINT   417
26    goto 9000                                                                 FINT   418
c-----op= RETURN                                                                FINT   419
27    goto 9000                                                                 FINT   420
c-----op= STOP                                                                  FINT   421
28    write( IOUTPT, 28001 )   (IA(MFN+I), I=1,4), LINENO                       FINT   422
28001 format( 30H0**** FUNCTION **** STOP **** ,12HAT FUNCTION=,4A4,            FINT   423
     1        6H LINE=,I5 )                                                     FINT   424
      stop                                                                      FINT   425
c-----op= PRINT                                                                 FINT   426
29    IODEVF = IOUTPT                                                           FINT   427
29010 JFORMT = ILITT0 + IOPRN                                                   FINT   428
       call  FINTIO( 1, IODEVF, IA(JFORMT), ARGV, NARG )                        FINT   429
      goto  300                                                                 FINT   430
c-----op= unused                                                                FINT   431
30    continue                                                                  FINT   432
31    continue                                                                  FINT   433
32    continue                                                                  FINT   434
33    continue                                                                  FINT   435
35    continue                                                                  FINT   436
36    continue                                                                  FINT   437
              goto  400                                                         FINT   438
c-----op= RD                                                                    FINT   439
37    IODEVF = IOUNIT                                                           FINT   440
      if( IOPRN .eq. 0 )  goto  37500                                           FINT   441
          JFORMT = ILITT0 + IOPRN                                               FINT   442
           call  FINTIO( 0, IODEVF, IA(JFORMT), ARGV, NARG )                    FINT   443
          if( NARG .lt. 1 )  goto  300                                          FINT   444
37100     do  I = 1 , NARG                                                      FINT   445
              AA(IARGL(I)+IVAR0) = ARGV(I)                                      FINT   446
          enddo                                                                 FINT   447
              goto  300                                                         FINT   448
37500 if( NARG .lt. 1 )  goto  37520                                            FINT   449
          read( IODEVF )  (ARGV(I), I=1,NARG)                                   FINT   450
          goto  37100                                                           FINT   451
37520 read( IODEVF )                                                            FINT   452
              goto  300                                                         FINT   453
c-----op= WR                                                                    FINT   454
38    IODEVF = IOUNIT                                                           FINT   455
      if( IOPRN .ne. 0 )  goto  29010                                           FINT   456
      if( NARG  .lt. 1 )  goto  38020                                           FINT   457
          write( IODEVF )  (ARGV(I), I=1,NARG)                                  FINT   458
          NARG = 0                                                              FINT   459
              goto  300                                                         FINT   460
38020 write( IODEVF )                                                           FINT   461
              goto  300                                                         FINT   462
c-----op= EOF                                                                   FINT   463
39    endfile  IOPRN                                                            FINT   464
              goto  300                                                         FINT   465
c-----op= REW(IND)                                                              FINT   466
40    rewind  IOPRN                                                             FINT   467
              goto  300                                                         FINT   468
c-----op= UNIT                                                                  FINT   469
41    IOUNIT = IOPRN                                                            FINT   470
              goto  400                                                         FINT   471
c                                                                               FINT   472
9000  continue                                                                  FINT   473
      IFGET = 0                                                                 FINT   474
      if ( ILS .eq. 0 )    then                                                 FINT   475
           call  FIACCL( 0, 0 )                                                 FINT   476
      else                                                                      FINT   477
           call  FIACCS( 0, 0 )                                                 FINT   478
      endif                                                                     FINT   479
c                                                                               FINT   480
c$    write( IOUTPT, 902 )  (I, (AA(ISYMT0+(I-1)*8+J),J=1,2)                    FINT   481
c$   .                      , AA(IVAR0+I), I=1,NSYMT)                           FINT   482
c$    write( IOUTPT, 908 )  (IA(MFN+I), I=1,4)                                  FINT   483
c$908 format( ' (((( FINT ((((  NAME=', 4A4 )                                   FINT   484
c                                                                               FINT   485
      return                                                                    FINT   486
c                                                                               FINT   487
c--- errors                                                                     FINT   488
c                                                                               FINT   489
804   write( IOUTPT, 8041 )  (IA(MFN+I), I=1,4), LINENO                         FINT   490
8041  format( ' *** FUNCTION ERROR ***  attempted division by ZERO',            FINT   491
     1        '  in function=', 4A4, '  line=', I5, ' ***' )                    FINT   492
      goto  88888                                                               FINT   493
807   write( IOUTPT, 8071 )  (IA(MFN+I), I=1,4), LINENO                         FINT   494
8071  format( ' *** FUNCTION ERROR ***  X**Y with  X .lt. 0',                   FINT   495
     1        '  in function=', 4A4, '  line=', I5, ' ***' )                    FINT   496
      goto  88888                                                               FINT   497
82404 write( IOUTPT, 8244 )  (IA(MFN+I), I=1,4), LINENO                         FINT   498
8244  format(' *** FUNCTION ERROR ***  ALOG or ALOG10 argument .le. 0',         FINT   499
     1        '  in function=', 4A4, '  line=', I5, ' ***' )                    FINT   500
      goto  88888                                                               FINT   501
82408 write( IOUTPT, 8248 )  (IA(MFN+I), I=1,4), LINENO                         FINT   502
8248  format( ' *** FUNCTION ERROR ***  SQRT argument .lt. 0',                  FINT   503
     1        '  in function=', 4A4, '  line=', I5, ' ***' )                    FINT   504
      goto  88888                                                               FINT   505
82413 write( IOUTPT, 8241 )  (IA(MFN+I), I=1,4), LINENO                         FINT   506
8241  format( ' *** FUNCTION ERROR ***  PWL(,) first arg must be TABLE',        FINT   507
     1        '  in function=', 4A4, '  line=', I5, ' ***' )                    FINT   508
      goto  88888                                                               FINT   509
82425 write( IOUTPT, 8241 )  (IA(MFN+I), I=1,4), LINENO                         FINT   510
8245  format( ' *** FUNCTION ERROR ***  CVAL(,) not available in LOADS',        FINT   511
     1        '  in function=', 4A4, '  line=', I5, ' ***' )                    FINT   512
c                                                                               FINT   513
#ifdef _DLL                                                                  /* -048   216 */ 
88888 Call MessageBox( NULL, 'Errors in executing a FUNCTION -'                 -048   217
     &  //' ABORTING'//char(0),'FINT Errors'//char(0), MB_OK                    -048   218
     &  + MB_ICONSTOP+MB_TASKMODAL )                                            -048   219
      IwinReturn = 1                                                            -048   220
      RETURN                                                                    -048   221
#else                                                                        /* -048   222 */ 
88888  call  ABT                                                                FINT   514
#endif                                                                       /* -048   223 */ 
      end                                                                       FINT   515
c-----------------------------------------------------------------------        FINT   516
      SUBROUTINE  FINTIO ( IOFLG, IODEVF, IFORMT, ARG, NARG )                   FINTIO   2
C---                                                                            FINTIO   3
C--- DO FORMATTED I/O FOR SUBROUTINE FINTL                                      FINTIO   4
C---                                                                            FINTIO   5
      DIMENSION  IFORMT(1000), ARG(1000)                                        FINTIO   6
C---                                                                            FINTIO   7
      IF( IOFLG .NE. 0 )  GOTO  2000                                            FINTIO   8
          IF( NARG .LT. 1 )  GOTO  200                                          FINTIO   9
              READ( IODEVF, IFORMT )  (ARG(I), I=1,NARG)                        FINTIO  10
              GOTO  9000                                                        FINTIO  11
200       READ( IODEVF, IFORMT )                                                FINTIO  12
          GOTO  9000                                                            FINTIO  13
2000  IF( NARG .LT. 1 )  GOTO  2200                                             FINTIO  14
              WRITE( IODEVF, IFORMT )  (ARG(I), I=1,NARG)                       FINTIO  15
              GOTO  9000                                                        FINTIO  16
2200      WRITE( IODEVF, IFORMT )                                               FINTIO  17
9000  CONTINUE                                                                  FINTIO  18
      RETURN                                                                    FINTIO  19
      END                                                                       FINTIO  20
      SUBROUTINE  FNATT ( IFNAM1, IFPTR1, IA )                                  FNATT    2
C---                                                                            FNATT    3
C--- IF IFNAM1(1-4) CONTAINS FUNCTION NAME , SEARCH IT IN FUNCTIONS             FNATT    4
C--- BLOCK AND SET IFPTR1 TO BEGINNING OF THE FN                                FNATT    5
C--- ELSE SET IFPTR1=0                                                          FNATT    6
C---                                                                            FNATT    7
      COMMON  /FPTRS/  IFLABL(4), LSFREC, NLITT , NCONT , NCODE, ICONT0         /FPTRS/  2
     .               , IFLEVL, NSYMT, ISYMT0, ICODE0, ILITT0, IVAR0             /FPTRS/  3
     3               , IFNBGN, NFN, FRANDX, FNTYPE, IFGET, IVAR, JSYMT          /FPTRS/  4
C---                                                                            FNATT    9
      DIMENSION  IFNAM1(4), IA(1)                                               FNATT   10
C---                                                                            FNATT   11
      DATA  INONE/4HNONE/, INULL/4HNULL/, INO/4HNO  /, IFBLNK/4H    /           FNATT   12
C---                                                                            FNATT   13
      IF( IFNAM1(1) .EQ. 0 )  GOTO  900                                         FNATT   14
200   IF( (IFNAM1(2).EQ.IFBLNK) .AND. ( (IFNAM1(1) .EQ. INONE) .OR.             FNATT   15
     .                                  (IFNAM1(1) .EQ. INULL) .OR.             FNATT   16
     .                                  (IFNAM1(1) .EQ. INO ) ) )               FNATT   17
     3      GOTO  900                                                           FNATT   18
      IF( NFN .LT. 1 )  GOTO  800                                               FNATT   19
          JF = IFNBGN                                                           FNATT   20
              DO  400  IFN = 1 , NFN                                            FNATT   21
                  DO  300  I = 1 , 4                                            FNATT   22
                  IF( IFNAM1(I) .NE. IA(JF+I) )  GOTO  360                      FNATT   23
CC$    PRINT 902, JF, IA(JF+I)                                                  FNATT   24
CC$902 FORMAT( ' -- FREAD  ---  JF=' I5, '   IA(JF+I)=' A4 )                    FNATT   25
300               CONTINUE                                                      FNATT   26
              IFPTR1 = JF                                                       FNATT   27
              GOTO  1000                                                        FNATT   28
360           JF = JF + IA(JF+5)                                                FNATT   29
400           CONTINUE                                                          FNATT   30
C................................... FUNCTION=. NOT DEFINED IN INPUT            FNATT   31
800    CALL  MSGSIM( 21, IFNAM1, IDUM, IDUM, IDUM )                             FNATT   32
900   IFPTR1 = 0                                                                FNATT   33
1000  CONTINUE                                                                  FNATT   34
      RETURN                                                                    FNATT   38
      END                                                                       FNATT   39
      SUBROUTINE  FREAD ( ISCB  , NSCHED , MLAST, IA )                          FREAD    2
C---                                                                            FREAD    3
C--- READ FUNCTION RECORDS FROM STANDARD FILE.                                  FREAD    4
C--- STOP AT ZERO LENGTH RECORD.                                                FREAD    5
C--- ALSO MATCH SIMULATION SCHEDULE NAMES WITH FUNCTION SCHEDULE NAMES.         FREAD    6
C---                                                                            FREAD    7
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             -044     1
     1                IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL                         /FILES/  3
     2              , IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                    /FILES/  4
     3                IHRREP(3), IHRPAS(2)                                      /FILES/  5
      COMMON  /FPTRS/  IFLABL(4), LSFREC, NLITT , NCONT , NCODE, ICONT0         /FPTRS/  2
     .               , IFLEVL, NSYMT, ISYMT0, ICODE0, ILITT0, IVAR0             /FPTRS/  3
     3               , IFNBGN, NFN, FRANDX, FNTYPE, IFGET, IVAR, JSYMT          /FPTRS/  4
      COMMON  /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE, IAXlds, IAXsys         HR       6
C---                                                                            FREAD   11
      DIMENSION  IA(1)                                                          FREAD   12
C---                                                                            FREAD   13
      FRANDX = 0.5                                                              FREAD   14
      NFN    = 0                                                                FREAD   15
      IFNBGN = IAX                                                              FREAD   16
1000  READ(ISTNDF)  NUMOVX, LSFREC                                              FREAD   17
      IF( LSFREC .LT. 1 )  GOTO  9000                                           FREAD   18
      NFN    = NFN + 1                                                          FREAD   19
      IA1    = IAX + 1                                                          FREAD   20
      IA2    = IA1 + LSFREC - 1                                                 FREAD   21
       CALL  GETBUF( IA, LSFREC, MLAST )                                        FREAD   22
      READ(ISTNDF)  (IA(I), I=IA1,IA2)                                          FREAD   23
       CALL  MOVEN( IA(IA1), IFLABL, 15 )                                       FREAD   24
      ISYMT0 = IA1 + 15 - 1                                                     FREAD   25
      ICODE0 = ISYMT0 + NSYMT*8                                                 FREAD   26
      ILITT0 = ICODE0 + NCODE                                                   FREAD   27
      ICONT0 = ILITT0 + NLITT                                                   FREAD   28
      IVAR0  = ICONT0 + NCONT + 1                                               FREAD   29
       CALL  MOVEN( IFLABL, IA(IA1), 15 )                                       FREAD   30
C---                                                                            FREAD   33
C--- PUT ACTUAL SCHEDULE PTR FOR SCHEDULE SYMBOLS                               FREAD   34
C---                                                                            FREAD   35
      IF( NSYMT .LT. 1 )  GOTO  7000                                            FREAD   36
          DO  6000  ISYMT = 1 , NSYMT                                           FREAD   37
          JSYM = ( ISYMT - 1 ) * 8  +  ISYMT0                                   FREAD   38
          IF( IA(JSYM+4) .NE. 3 )  GOTO  4000                                   FREAD   39
              JLIT = ILITT0 + IA(JSYM+5)                                        FREAD   40
              IF( NSCHED .LT. 1 )  GOTO  3280                                   FREAD   41
                  JSC = ISCB                                                    FREAD   42
                  DO  3200  ISC = 1 , NSCHED                                    FREAD   43
                  IF( (IA(JLIT+1) .EQ. IA(JSC)  ) .AND.                         FREAD   44
     .                (IA(JLIT+2) .EQ. IA(JSC+1)) .AND.                         FREAD   45
     .                (IA(JLIT+3) .EQ. IA(JSC+2)) .AND.                         FREAD   46
     .                (IA(JLIT+4) .EQ. IA(JSC+3)) )  GOTO  3300                 FREAD   47
                  JSC = JSC + 8                                                 FREAD   48
3200              CONTINUE                                                      FREAD   49
C............................... ERR IN FN=.., SCHEDULE=.. NOT FOUND            FREAD   50
3280           CALL  MSGSIM( 20, IFLABL, IA(JLIT+1), IDUM, IDUM )               FREAD   51
              GOTO  6000                                                        FREAD   52
3300              IA(JSYM+8) = JSC + 7                                          FREAD   53
                  GOTO  6000                                                    FREAD   54
4000      CONTINUE                                                              FREAD   55
6000      CONTINUE                                                              FREAD   56
7000  CONTINUE                                                                  FREAD   57
      GOTO  1000                                                                FREAD   58
9000  CONTINUE                                                                  FREAD   59
      RETURN                                                                    FREAD   60
      END                                                                       FREAD   61
      SUBROUTINE  GETBUF( IA,NUM,LAST )                                         GETBUF   2
C                                                                               GETBUF   3
C              CHECK FOR ROOM IN IA FOR NUM MORE                                GETBUF   4
C                                                                               GETBUF   5
      COMMON  /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE, IAXlds, IAXsys         HR       6
      DIMENSION IA(1)                                                           GETBUF   7
C                                                                               GETBUF   8
C              CHECK FOR ROOM                                                   GETBUF   9
      IAX    = LAST                                                             GETBUF  10
      CALL CKAA(IA,NUM)                                                         GETBUF  11
C              ZERO THE NEW BLOCK TO BE USED                                    GETBUF  12
      DO 300 I=1,NUM                                                            GETBUF  13
      IA(LAST+I) = 0                                                            GETBUF  14
  300 CONTINUE                                                                  GETBUF  15
C              UPDATE LAST AA IN USE                                            GETBUF  16
      LAST   = LAST + NUM                                                       GETBUF  17
      IAX    = IAX + NUM                                                        GETBUF  18
      RETURN                                                                    GETBUF  19
      END                                                                       GETBUF  20
      SUBROUTINE  GETAA( NUM )                                                  GETAA    2
C                                                                               GETAA    3
C              CHECK FOR ROOM IN IA FOR NUM MORE                                GETAA    4
C                                                                               GETAA    5
      COMMON  /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE, IAXlds, IAXsys         HR       6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON        // AA( 75 000 000)                                          -048a    2
      INTEGER          IA( 75 000 000)                                          -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON        // AA( 75 000 000)                                          -048a    5
      INTEGER          IA( 75 000 000)                                          -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE      (AA(1), IA(1))                                           HR       3
C                                                                               GETAA    8
      IF(NUM .LE. 0)  RETURN                                                    GETAA    9
C              CHECK FOR ROOM                                                   GETAA   10
      CALL CKAA(IA,NUM)                                                         GETAA   11
C              ZERO THE NEW BLOCK TO BE USED                                    GETAA   12
      DO I=1,NUM                                                                GETAA   13
        IA(IAX+I) = 0                                                           GETAA   14
      ENDDO                                                                     GETAA   15
C              UPDATE LAST AA IN USE                                            GETAA   16
      IAX    = IAX + NUM                                                        GETAA   17
      RETURN                                                                    GETAA   18
      END                                                                       GETAA   19
      SUBROUTINE Holiday                                                        Time     6
c                                                                               Time     7
c              Sets the schedule day to 8 if the current day is                 Time     8
c              a holiday                                                        Time     9
c                                                                               Time    10
      COMMON  /DESHRQ/ NDESDY, IDDTYP(2), DESHRQ(360)                           /DESHRQ/ 2
      COMMON /HOLALT/ NHOLA(2),IHOLTY(2),IHOLDY(60,2),IHOLMN(60,2)              HOLID1   1
      COMMON  /LOCALD/ STALAT, STALON, ITIMZ, BAZIM, BALTIT,                    /LOCALD/ 2
     &                 SSTALA, CSTALA, TSTALA, SBAZIM, CBAZIM,                  /LOCALD/ 3
     &                 BXORG, BYORG, SHCOEF, TP1, TP2, WSTP1, WSTP2,            /LOCALD/ 4
     &                 WSHGT, WSHGTL(12), ISREFL, IHOLX                         /LOCALD/ 5
      DIMENSION        LOCALD(32)                                               /LOCALD/ 6
      EQUIVALENCE      (LOCALD(1),STALAT)                                       /LOCALD/ 7
      COMMON  /TIME  / IDOY, IYR, IMO, IDAY, IHR,                               Time     1
     &                 ISCMO, ISCDAY, ISCHR, IDOW, ISCDOW, iDSdates(6),         -044e5   1
     &                 iTimeFlg, iDSFlg, iDDFlg, InitialFlg, LeapYr,            Time     3
     &                 CLOCK(10), MONDSC(13), MONLEN(12), MONSDA(12)            HR       8
c                                                                               Time    15
c              Initialize the schedule day to the day of the week               Time    16
      ISCDOW = IDOW                                                             Time    17
c                                                                               Time    18
      IF (IDDFLG .GT. 0) THEN                                                   Time    19
c              Design day                                                       Time    20
        ISCDOW = IDDTYP(iDDFlg) + 8                                             Time    21
      ELSEIF (IHOLTY(IHOLX) .EQ. 1)  THEN                                       Time    22
c              No holidays                                                      Time    23
      ELSEIF (IHOLTY(IHOLX) .EQ. 2)  THEN                                       Time    24
c              United States holidays                                           Time    25
        SELECT CASE (ISCMO)                                                     Time    26
          CASE (1)  ! January                                                   Time    27
            SELECT CASE (ISCDAY)                                                Time    28
              CASE (1)                                 ! New Year's day         Time    29
                IF (IDOW .NE. 1  .AND.  IDOW .NE. 7)   ! (midweek)              Time    30
     &            ISCDOW = 8                                                    Time    31
              CASE (2)                                 ! New Year's day         Time    32
                IF (IDOW .EQ. 2)  ISCDOW = 8           ! (Monday)               Time    33
              CASE (15:21)                             ! M.L. King              ChlrHP   1
                IF (IDOW .EQ. 2)  ISCDOW = 8           ! (Monday)               ChlrHP   2
            END SELECT                                                          Time    34
          CASE (2)  ! February                                                  Time    35
            SELECT CASE (ISCDAY)                                                Time    36
              CASE (15:21)                             ! President's day        Time    37
                IF (IDOW .EQ. 2)  ISCDOW = 8           ! (Monday)               Time    38
            END SELECT                                                          Time    39
          CASE (5)  ! May                                                       Time    40
            SELECT CASE (ISCDAY)                                                Time    41
              CASE (25:31)                             ! Memorial day           Time    42
                IF (IDOW .EQ. 2)  ISCDOW = 8           ! (Monday)               Time    43
            END SELECT                                                          Time    44
          CASE (7)  ! July                                                      Time    45
            SELECT CASE (ISCDAY)                                                Time    46
              CASE (3)                                 ! 4th of July            Time    47
                IF (IDOW .EQ. 6)  ISCDOW = 8           ! (Friday)               Time    48
              CASE (4)                                 ! 4th of July            Time    49
                IF (IDOW .NE. 1  .AND.  IDOW .NE. 7)   ! (midweek)              Time    50
     &            ISCDOW = 8                                                    Time    51
              CASE (5)                                 ! 4th of July            Time    52
                IF (IDOW .EQ. 2)  ISCDOW = 8           ! (Monday)               Time    53
            END SELECT                                                          Time    54
          CASE (9)  ! September                                                 Time    55
            SELECT CASE (ISCDAY)                                                Time    56
              CASE (1:7)                               ! Labor day              Time    57
                IF (IDOW .EQ. 2)  ISCDOW = 8           ! (Monday)               Time    58
            END SELECT                                                          Time    59
          CASE (10)  ! October                                                  Time    60
            SELECT CASE (ISCDAY)                                                Time    61
              CASE (8:14)                              ! Columbus day           Time    62
                IF (IDOW .EQ. 2)  ISCDOW = 8           ! (Monday)               Time    63
            END SELECT                                                          Time    64
          CASE (11)  ! November                                                 Time    65
            SELECT CASE (ISCDAY)                                                Time    66
              CASE (10)                                ! Veteran's day          Time    67
                IF (IDOW .EQ. 6)  ISCDOW = 8           ! (Friday)               Time    68
              CASE (11)                                ! Veteran's day          Time    69
                IF (IDOW .NE. 1  .AND.  IDOW .NE. 7)   ! (midweek)              Time    70
     &            ISCDOW = 8                                                    Time    71
              CASE (12)                                ! Veteran's day          Time    72
                IF (IDOW .EQ. 2)  ISCDOW = 8           ! (Monday)               Time    73
              CASE (22:28)                             ! Thanksgiving           Time    74
                IF (IDOW .EQ. 5)  ISCDOW = 8           ! (Thursday)             Time    75
            END SELECT                                                          Time    76
          CASE (12)  ! December                                                 Time    77
            SELECT CASE (ISCDAY)                                                Time    78
              CASE (24)                                ! Christmas              Time    79
                IF (IDOW .EQ. 6)  ISCDOW = 8           ! (Friday)               Time    80
              CASE (25)                                ! Christmas              Time    81
                IF (IDOW .NE. 1  .AND.  IDOW .NE. 7)   ! (midweek)              Time    82
     &            ISCDOW = 8                                                    Time    83
              CASE (26)                                ! Christmas              Time    84
                IF (IDOW .EQ. 2)  ISCDOW = 8           ! (Monday)               Time    85
              CASE (31)                                ! New Year's eve         Time    86
                IF (IDOW .EQ. 6)  ISCDOW = 8           ! (Monday)               Time    87
            END SELECT                                                          Time    88
        END SELECT  ! iscmo                                                     Time    89
      ELSE                                                                      Time    90
c              User-defined holdays                                             Time    91
        NHL = NHOLA(IHOLX)                                                      Time    92
        DO I=1,NHL                                                              Time    93
          IF (ISCMO  .EQ. IHOLMN(I,IHOLX) .AND.                                 Time    94
     1        ISCDAY .EQ. IHOLDY(I,IHOLX)) THEN                                 Time    95
            ISCDOW = 8                                                          Time    96
            EXIT                                                                Time    97
          ENDIF                                                                 Time    98
        ENDDO                                                                   Time    99
      ENDIF                                                                     Time   100
c                                                                               Time   101
      RETURN                                                                    HOLIDA  60
      END                                                                       HOLIDA  61
      FUNCTION IndexPosition(Istart, Ipos, Mode)                                INDEX    2
c                                                                               INDEX    3
c              Mode = 1  Returns the position in IA                             INDEX    4
c                        of Ipos relative to Istart,                            INDEX    5
c                        where Istart is the base component pointer             INDEX    6
c              Mode = 2  Returns the length in IA                               INDEX    7
c                        between Istart and Ipos, inclusive of both,            INDEX    8
c                        where Istart may be any variable preceeding Ipos       INDEX    9
c                                                                               INDEX   10
cDEC$ NOOPTIMIZE                                                                -048   224
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON        // AA( 75 000 000)                                          -048a    2
      INTEGER          IA( 75 000 000)                                          -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON        // AA( 75 000 000)                                          -048a    5
      INTEGER          IA( 75 000 000)                                          -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE      (AA(1), IA(1))                                           HR       3
c                                                                               INDEX   12
      DIMENSION Istart(1), Ipos(1)                                              INDEX   13
c                                                                               INDEX   14
      Isave   = Ipos(1)                                                         INDEX   15
      Ipos(1) = 654321                                                          INDEX   16
      I = 1                                                                     INDEX   17
   10 IF (Istart(I) .EQ. 654321)  GOTO 20                                       INDEX   18
      I = I + 1                                                                 INDEX   19
      GOTO 10                                                                   INDEX   20
   20 IF (Mode .EQ. 1)  THEN                                                    INDEX   21
        IndexPosition = I - 1                                                   INDEX   22
      ELSE                                                                      INDEX   23
        IndexPosition = I                                                       INDEX   24
      ENDIF                                                                     INDEX   25
      Ipos(1) = Isave                                                           INDEX   26
c                                                                               INDEX   27
      RETURN                                                                    INDEX   28
      END                                                                       INDEX   29
      FUNCTION IDOYR(IM,ID)                                                     IDOYR    2
C                                                                               IDOYR    3
C              CALCULATE THE DAY OF THE YEAR                                    IDOYR    4
C                                                                               IDOYR    5
      COMMON  /TIME  / IDOY, IYR, IMO, IDAY, IHR,                               Time     1
     &                 ISCMO, ISCDAY, ISCHR, IDOW, ISCDOW, iDSdates(6),         -044e5   1
     &                 iTimeFlg, iDSFlg, iDDFlg, InitialFlg, LeapYr,            Time     3
     &                 CLOCK(10), MONDSC(13), MONLEN(12), MONSDA(12)            HR       8
      IDOYR = MONSDA(IM) + ID                                                   IDOYR    7
      RETURN                                                                    IDOYR    8
      END                                                                       IDOYR    9
      FUNCTION IDOWK(IYEAR,IDOFY)                                               IDOWK    2
C                                                                               IDOWK    3
C              COMPUTE THE DAY OF THE WEEK; SUNDAY = 1                          IDOWK    4
C                                                                               IDOWK    5
C              Note that this algorithm will fail in the                        Y2K      1
C              year 2100, since 2100 is NOT a leap year,                        Y2K      2
C              and this algorithm assumes every year divisible                  Y2K      3
C              by 4 is.                                                         Y2K      4
      IC = IYEAR - 1900                                                         Y2K      5
      I1 = IDOFY + IC + (IC-1)/4                                                IDOWK    7
      IDOWK = 7.*(FLOAT(I1)/7. - I1/7) + 1.0001                                 IDOWK    8
      RETURN                                                                    IDOWK    9
      END                                                                       IDOWK   10
      SUBROUTINE INIT0 (IA, N)                                                  INIT0    2
C                                                                               INIT0    3
C              INIT0 INITIALIZES MISC VARIABLES FOR                             INIT0    4
C              THE SIMULATION PROGRAMS                                          INIT0    5
C                                                                               INIT0    6
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             -044     1
     1                IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL                         /FILES/  3
     2              , IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                    /FILES/  4
     3                IHRREP(3), IHRPAS(2)                                      /FILES/  5
      COMMON  /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE, IAXlds, IAXsys         HR       6
      COMMON  /WEATH / IWDID(5),LRECX,WLAT,WLONG,LTIMZ,IFX,IWSIZ,               /WEATH/  2
     1                 CLRNES,TGNDR,WBT,DBT,PATM,CLDAMT,ISNOW,IRAIN,            /WEATH/  3
     2                 IWNDDR,HUMRAT,DENSTY,ENTHAL,DIFSOL,DIRSOL,SOLRAD,        /WEATH/  4
     3                 ICLDTY,WNDSPD,IDUMMY,DPT,WNDDRR,CLDCOV,RDNCC,            /WEATH/  5
     4                 BSCC,SKYA,DBTR,GTEMP(12),CLR(12),ESKY,EGND,IWINTR        /WEATH/  6
C                                                                               INIT0   10
      DIMENSION LOOK(14)                                                        INIT0   11
c              ** Caution ** must also mod WCTRL1                               -048     1
      COMMON /WCTRL/  IwinReturn, Imsgflg                                       /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* -048     2 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        -048     3
     &                MB_ICONINFORMATION                                        -048     4
#else                                                                        /* -048     5 */ 
      include 'msgbox.fi'                                                       -048     6
#endif                                                                       /* -048     7 */ 
C                                                                               INIT0   12
      LOGICAL FIRST                                                             INIT0   13
      DIMENSION W(23)                                                           -048   225
      EQUIVALENCE (W(1),WBT)                                                    INIT0   15
C                                                                               INIT0   16
      DATA FIRST /.TRUE./                                                       INIT0   17
C                                                                               INIT0   18
      IF (.NOT. FIRST)  GO TO 10                                                INIT0   19
      DO 1 I = 1,23                                                             INIT0   20
    1 W(I)   = 0.                                                               INIT0   21
#ifdef _DLL                                                                  /* -048   226 */ 
      REWIND IWEATH                                                             -048   227
#endif                                                                       /* -048   228 */ 
C              READ FIRST RECORD OF WEATHER FILE TO DETERMINE                   INIT0   22
C              TYPE OF WEATHER FILE                                             INIT0   23
      READ ( IWEATH, END=7 ) LOOK                                               INIT0   24
      GO TO 5                                                                   INIT0   25
    7 CALL MSGSIM(11,IFX,IFX,IFX,IFX)                                           INIT0   26
#ifdef _DLL                                                                  /* -048   229 */ 
      Call MessageBox( NULL, 'Errors while reading weather file -'              -048   230
     &  //' ABORTING'//char(0),'INIT0 Errors'//char(0), MB_OK                   -048   231
     &  + MB_ICONSTOP+MB_TASKMODAL )                                            -048   232
      IwinReturn = 1                                                            -048   233
      RETURN                                                                    -048   234
#else                                                                        /* -048   235 */ 
      CALL ABT                                                                  INIT0   27
#endif                                                                       /* -048   236 */ 
    5 IFX    = LOOK(14)                                                         INIT0   28
      IF (LOOK(11) .EQ. 0)  IFX = 0                                             INIT0   29
      IWSIZ   = MOD(IFX,2) + 1                                                  INIT0   30
      IFX    = IFX + 1                                                          INIT0   31
      REWIND IWEATH                                                             INIT0   32
      DO I=1,5                                                                  PC     211
        IWDID(I) = LOOK(I)                                                      PC     212
      ENDDO                                                                     PC     213
   10 CONTINUE                                                                  INIT0   33
      Call GetTDV                                                               -044     3
      LRECX  = 0                                                                INIT0   34
      KORE   = 0                                                                INIT0   35
C              CLEAR IAX MAX                                                    INIT0   38
      IAXMAX = 0                                                                INIT0   39
C              GET FIXED DIMENSION OF IA FOR THIS OVERLAY                       INIT0   40
C              INIT VARIABLE DIMENSION TO FIXED DIMEN                           INIT0   41
      IADIMV = IADIM                                                            INIT0   42
      CALL CKAA (IA, N)                                                         INIT0   43
#ifdef _DLL                                                                  /* -048   237 */ 
      FIRST = .TRUE.                                                            -048   238
#else                                                                        /* -048   239 */ 
      FIRST = .FALSE.                                                           INIT0   44
#endif                                                                       /* -048   240 */ 
      RETURN                                                                    INIT0   45
      END                                                                       INIT0   46
      Subroutine InitialSIM                                                     INITSIM  2
c                                                                               INITSIM  3
c              Initializes all common block variables to zero                   INITSIM  4
c              in the SYSTEMS and PLANT code sections                           INITSIM  5
c                                                                               INITSIM  6
c                                                                               INITSIM  7
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             -044     1
     1                IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL                         /FILES/  3
     2              , IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                    /FILES/  4
     3                IHRREP(3), IHRPAS(2)                                      /FILES/  5
      common  /FMPTR/  MPTR(16)                                                 /FMPTR/  2
      common  /FNSYS/  ISKIPS, MSYSF(120)                                       /FNSYS/  2
      COMMON  /FPTRS/  IFLABL(4), LSFREC, NLITT , NCONT , NCODE, ICONT0         /FPTRS/  2
     .               , IFLEVL, NSYMT, ISYMT0, ICODE0, ILITT0, IVAR0             /FPTRS/  3
     3               , IFNBGN, NFN, FRANDX, FNTYPE, IFGET, IVAR, JSYMT          /FPTRS/  4
      COMMON /HOLALT/ NHOLA(2),IHOLTY(2),IHOLDY(60,2),IHOLMN(60,2)              HOLID1   1
      COMMON /HRPSTA/ ISTUF(20)                                                 /HRPSTA/ 2
      EQUIVALENCE (ISTUF(1),Ihrp),(ISTUF(2),Nhrp),                              HR       4
     1   (ISTUF(3),Lhrp),(ISTUF(4),ITBUFB),(ISTUF(5),ITBUFE),                   HR       5
     2   (ISTUF(6),ITBUF),(ISTUF(7),IBUFSB),(ISTUF(8),IRSCH),                   /HRPSTA/ 5
     3   (ISTUF(9),IDUM)                                                        /HRPSTA/ 6
      EQUIVALENCE     (ICDFLG, ISTUF(10)), (NHRPB,  ISTUF(11)),                 /HRPSTA/ 7
     1                (ISTRTB, ISTUF(12)), (IENDB,  ISTUF(13)),                 /HRPSTA/ 8
     2                (ILENB,  ISTUF(14)), (ISCHB,  ISTUF(15)),                 /HRPSTA/ 9
     3                (NHRPF,  ISTUF(16)), (ISTRTF, ISTUF(17)),                 /HRPSTA/10
     4                (IENDF,  ISTUF(18)), (ILENF,  ISTUF(19)),                 /HRPSTA/11
     5                (ISCHF,  ISTUF(20))                                       /HRPSTA/12
      COMMON /IRUNPD/ NRUNPD, JRUNPD, IRUNPD(6,15)                              /IRUNPD/ 2
      COMMON /NHRSHR/ NHRSHR(128), IHRCTR(5,128), NHRITM, FILEHR, ICECHS        -048j    1
      INTEGER         FILEHR                                                    /NHRSHR/ 3
      COMMON  /PPDAT0/  IPPIN0, IPPPRG                                          /PPDAT0/ 2
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         BIGNAM   1
      COMMON  /TIME  / IDOY, IYR, IMO, IDAY, IHR,                               Time     1
     &                 ISCMO, ISCDAY, ISCHR, IDOW, ISCDOW, iDSdates(6),         -044e5   1
     &                 iTimeFlg, iDSFlg, iDDFlg, InitialFlg, LeapYr,            Time     3
     &                 CLOCK(10), MONDSC(13), MONLEN(12), MONSDA(12)            HR       8
      COMMON /TITLE / TITLE(10,5)                                               /TITLE/  2
      COMMON /UNITT/   VKONV(300), DUMLOG(4), JUNITT(4,300,2)                   UNITS1   1
      COMMON  /WEATH / IWDID(5),LRECX,WLAT,WLONG,LTIMZ,IFX,IWSIZ,               /WEATH/  2
     1                 CLRNES,TGNDR,WBT,DBT,PATM,CLDAMT,ISNOW,IRAIN,            /WEATH/  3
     2                 IWNDDR,HUMRAT,DENSTY,ENTHAL,DIFSOL,DIRSOL,SOLRAD,        /WEATH/  4
     3                 ICLDTY,WNDSPD,IDUMMY,DPT,WNDDRR,CLDCOV,RDNCC,            /WEATH/  5
     4                 BSCC,SKYA,DBTR,GTEMP(12),CLR(12),ESKY,EGND,IWINTR        /WEATH/  6
c                                                                               INITSIM 22
c               /CTRL/ not initialized                                          INITSIM 23
c               /FILES/ not initialized                                         INITSIM 24
c               /FMPTR/                                                         INITSIM 25
      CALL FILLN(0, MPTR(1), 16)                                                INITSIM 26
c               /FNSYS/                                                         INITSIM 27
      CALL FILLN(0, ISKIPS, 121)                                                INITSIM 28
c               /FPTRS/                                                         INITSIM 29
      CALL FILLN(0, IFLABL(1), 22)                                              INITSIM 30
c               /HOLALT/                                                        INITSIM 31
      CALL FILLN(0, NHOLA, 244)                                                 HOLID1  16
c               /HRPSTA/                                                        INITSIM 33
      CALL FILLN(0,  ISTUF(1), 20)                                              INITSIM 34
c               /IAX/ not initialized                                           INITSIM 35
c               /IRUNPD/                                                        INITSIM 36
      CALL FILLN(0, NRUNPD, 92)                                                 INITSIM 37
c               /NHRSHR/                                                        INITSIM 38
      CALL FILLN(0, NHRSHR(1), 771)                                             -048j    7
c               /PPDAT0/                                                        INITSIM 40
      CALL FILLN(0, IPPIN0, 2)                                                  INITSIM 41
c               /REPORT/                                                        INITSIM 42
      CALL FILLN(0, IREPRT(1,1), 149)                                           INITSIM 43
c               /TIME/ partially initialized                                    INITSIM 44
      CALL FILLN(0, IDOY, 24)                                                   Time   102
c               /TITLE/                                                         INITSIM 46
      CALL FILLN(0, TITLE(1,1), 50)                                             INITSIM 47
c               /UNITT/ not initialized                                         INITSIM 48
c               /WEATH/ partially initialized                                   INITSIM 49
      CALL FILLN(0, LRECX, 58)                                                  INITSIM 50
c                                                                               INITSIM 51
      RETURN                                                                    INITSIM 52
      END                                                                       INITSIM 53
      FUNCTION Jsched(NumSch)                                                   Time   103
c                                                                               Time   104
c              Converts schedule numbers into schedule pointers                 Time   105
c              into the schedule block                                          Time   106
c                                                                               Time   107
      COMMON  /PtrSch/ Isched, Nsched, Lsched, NVECT                            HR       7
c                                                                               Time   109
      IF (NumSch .EQ. 0)  THEN                                                  Time   110
        Jsched = 0                                                              Time   111
      ELSE                                                                      Time   112
        Jsched = Isched + (NumSch-1)*<+ys~Len>                                  -045d    1
      ENDIF                                                                     Time   114
c                                                                               Time   115
      RETURN                                                                    Time   116
      END                                                                       Time   117
      FUNCTION ITYPLS(I)                                                        ITYPLS   2
C                                                                               ITYPLS   3
C                            USE ITYPLS TO GET A INTEGER OUT                    ITYPLS   4
C                            OF A REAL ARRAY WITHOUT TYPE                       ITYPLS   5
C                            CONVERSION                                         ITYPLS   6
C                                                                               ITYPLS   7
      ITYPLS = I                                                                ITYPLS   8
      RETURN                                                                    ITYPLS   9
      END                                                                       ITYPLS  10
      SUBROUTINE KDIV(A,IG,N,IDIV)                                              KDIV     2
C                                                                               KDIV     3
C              CONVERSION ROUTINE.     IDIV=0  ENGLISH TO METRIC                KDIV     4
C                                         1  METRIC TO ENGLISH                  KDIV     5
C                                                                               KDIV     6
      COMMON /UNITT/   VKONV(300), DUMLOG(4), JUNITT(4,300,2)                   UNITS1   1
      DIMENSION A(1)                                                            KDIV     8
      IF (IG.LE.2)  GOTO 9                                                      KDIV     9
      DO 1 I = 1,N                                                              KDIV    10
      IF (A(I).EQ.-66666.)  GOTO 1                                              KDIV    11
      IF(IDIV.EQ.0) GO TO 3                                                     KDIV    12
      A(I)   = A(I)/VKONV(IG)                                                   KDIV    13
      IF (IG.EQ.8)  A(I)=A(I)+32.                                               KDIV    14
      GOTO1                                                                     KDIV    15
    3 IF(IG.EQ.8)A(I)=A(I)-32.                                                  KDIV    16
      A(I)   = A(I)*VKONV(IG)                                                   KDIV    17
    1 CONTINUE                                                                  KDIV    18
    9 RETURN                                                                    KDIV    19
      END                                                                       KDIV    20
      SUBROUTINE  MOVEN ( X, Y, N )                                             MOVEN    2
C              ---                                                              MOVEN    3
C              --- MOVE N WORDS FROM X TO Y                                     MOVEN    4
C              ---                                                              MOVEN    5
      DIMENSION  X(1), Y(1)                                                     MOVEN    6
C              ---                                                              MOVEN    7
      IF( N .LT. 1 )  RETURN                                                    MOVEN    8
      DO  100  I = 1 , N                                                        MOVEN    9
      Y(I)   = X(I)                                                             MOVEN   10
  100 CONTINUE                                                                  MOVEN   11
      RETURN                                                                    MOVEN   12
      END                                                                       MOVEN   13
      SUBROUTINE MSGSIM(IENUM,I1,I2,I3,I4)                                      MSGSIM   2
C                                                                               MSGSIM   3
C                            ROUTINE TO PRINT MESSAGES ONTO THE OUTPUT          MSGSIM   4
C                                                                               MSGSIM   5
C                            IF ERROR LEVEL IS FATAL ABT SHOULD ALSO BE         MSGSIM   6
C                            CALLED                                             MSGSIM   7
C                                                                               MSGSIM   8
C              I1,I2,I3,I4 ARE USED TO PASS INFORMATION THE THE ROUTINE         MSGSIM   9
C                                                                               MSGSIM  10
      COMMON /CTRL  / VERS(2),IRPFLG(4),IOVRLL(7),IWRTFL,IPROG,                 /CTRL/   2
     1                        IFATAL,NAMPRG(3,7),MTRICR                         /CTRL/   3
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             -044     1
     1                IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL                         /FILES/  3
     2              , IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                    /FILES/  4
     3                IHRREP(3), IHRPAS(2)                                      /FILES/  5
c              ** Caution ** must also mod WCTRL1                               -048     1
      COMMON /WCTRL/  IwinReturn, Imsgflg                                       /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* -048     2 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        -048     3
     &                MB_ICONINFORMATION                                        -048     4
#else                                                                        /* -048     5 */ 
      include 'msgbox.fi'                                                       -048     6
#endif                                                                       /* -048     7 */ 
      COMMON  /TIME  / IDOY, IYR, IMO, IDAY, IHR,                               Time     1
     &                 ISCMO, ISCDAY, ISCHR, IDOW, ISCDOW, iDSdates(6),         -044e5   1
     &                 iTimeFlg, iDSFlg, iDDFlg, InitialFlg, LeapYr,            Time     3
     &                 CLOCK(10), MONDSC(13), MONLEN(12), MONSDA(12)            HR       8
      COMMON /TITLE / TITLE(10,5)                                               /TITLE/  2
      COMMON  /WEATH / IWDID(5),LRECX,WLAT,WLONG,LTIMZ,IFX,IWSIZ,               /WEATH/  2
     1                 CLRNES,TGNDR,WBT,DBT,PATM,CLDAMT,ISNOW,IRAIN,            /WEATH/  3
     2                 IWNDDR,HUMRAT,DENSTY,ENTHAL,DIFSOL,DIRSOL,SOLRAD,        /WEATH/  4
     3                 ICLDTY,WNDSPD,IDUMMY,DPT,WNDDRR,CLDCOV,RDNCC,            /WEATH/  5
     4                 BSCC,SKYA,DBTR,GTEMP(12),CLR(12),ESKY,EGND,IWINTR        /WEATH/  6
C                                                                               MSGSIM  13
      DIMENSION I1(4),I2(4),I3(4),I4(4),ERRPX(3),WARPX(3),CAUPX(3),             MSGSIM  14
     1          NOTPX(3),MESS(3,4)                                              MSGSIM  15
      EQUIVALENCE (MESS(1,1),ERRPX(1)),(MESS(1,2),WARPX(1)),                    MSGSIM  16
     1            (MESS(1,3),CAUPX(1)),(MESS(1,4),NOTPX(1))                     MSGSIM  17
      DATA ERRPX/4H ***,4HERRO,4HR***/                                          MSGSIM  18
      DATA WARPX/4H **W,4HARNI,4HNG**/                                          MSGSIM  19
      DATA CAUPX/4H **C,4HAUTI,4HON**/                                          MSGSIM  20
      DATA NOTPX/4H ***,4HNOTE,4H****/                                          MSGSIM  21
      IF(IFATAL .LE. 0)  THEN                                                   PC     214
C              PRINT Report Header                                              -042L1   5
        IF(IPROG .GT. 0) THEN                                                   -042L1   6
          WRITE(IOUTPT,10,ERR=14) ((TITLE(I,J), I=1,10), J=1,2),                -042L1   7
     $                             (VERS(I),I=1,2),                             -042L1   8
     $            (CLOCK(I),I=1,8),((TITLE(I,J),I=1,10),J=3,5)                  -042L1   9
   14     WRITE(IOUTPT,12,ERR=15) (NAMPRG(I,IPROG),I=1,3),                      -042L1  10
     $                            (IWDID(I),I=1,5)                              -042L1  11
        ELSE                                                                    -042L1  12
          WRITE(IOUTPT,13,ERR=15) (VERS(I),I=1,2),(IWDID(I),I=1,5)              -042L1  13
        ENDIF                                                                   -042L1  14
   15   CONTINUE                                                                -042L1  15
        WRITE(15    ,11) (NAMPRG(I,IPROG),I=1,2)                                PC     217
#ifndef _DLL                                                                 /* -048   241 */ 
        WRITE(  *   ,11) (NAMPRG(I,IPROG),I=1,2)                                PC     218
#endif                                                                       /* -048   242 */ 
      ENDIF                                                                     PC     219
   10 FORMAT(1H1,20A4,' DOE-',2A4,2X,7A4,3HRUN,I3 / 1X,30A4)                    -042L1  16
   12 FORMAT(45H REPORT- ATTN Simulation Messages For Review ,                  -042L1  17
     $        3A4,7HProgram,13X,12X,                                            -042L1  18
     $       18H    WEATHER FILE- ,5A4 / 1X, 129(1H-) /)                        -042L1  19
   13 FORMAT(1H1,40X,' DOE-',2A4 //                                             -042L1  20
     $       45H REPORT- ATTN Simulation Messages For Review ,                  -042L1  21
     $       18HSimulation Startup,14X,12X,                                     -042L1  22
     $       18H    WEATHER FILE- ,5A4 / 1X, 129(1H-) /)                        -042L1  23
   11 FORMAT('*** ERRORS or WARNINGS from ',2A4,' program.',                    PC     221
     $       ' Examine output file for details.')                               PC     222
      IFATAL = IFATAL + 1                                                       MSGSIM  24
      IF(IENUM .EQ. 0) RETURN                                                   MSGSIM  25
      IF(IENUM .GT. 0) GOTO 30                                                  MSGSIM  26
      I      = MIN0(4,-IENUM)                                                   MSGSIM  27
      WRITE(IOUTPT,21)  (MESS(J,I),J=1,3)                                       MSGSIM  28
      IF (IENUM .EQ. -1)  IwinReturn = 1                                        -044c2  17
   21 FORMAT(1H0,3A4,68(1H*))                                                   MSGSIM  29
      RETURN                                                                    MSGSIM  30
   30 WRITE(IOUTPT,31)                                                          MSGSIM  31
   31 FORMAT(1H0,80(1H*))                                                       MSGSIM  32
      GOTO (101,102,103,104,105,106,107,108,109,110,111,112,113,                MSGSIM  33
     1       114,115,116,117,118,119,120,121), IENUM                            MSGSIM  34
C                                                                               MSGSIM  35
  101 WRITE(IOUTPT,1001) ERRPX                                                  MSGSIM  36
 1001 FORMAT(3A4,28HMISSING FILE FROM BDL - CTRL )                              MSGSIM  37
      GOTO 900                                                                  MSGSIM  38
  102 WRITE(IOUTPT,1002) ERRPX,(I1(I),I=1,2)                                    MSGSIM  39
 1002 FORMAT(3A4,45HFILE FROM PREVIOUS RUN EMPTY OR INCOMPLETE -  ,2A4)         MSGSIM  40
      GOTO 900                                                                  MSGSIM  41
  103 WRITE(IOUTPT,1003)  ERRPX, (I1(I),I=1,2), (I2(I),I=1,2)                   MSGSIM  42
 1003 FORMAT(3A4, 2A4, 11H FILE FROM  , 2A4,20H EMPTY OR INCOMPLETE )           MSGSIM  43
      GO TO 900                                                                 MSGSIM  44
  104 CONTINUE                                                                  -035     1
      GO TO 900                                                                 MSGSIM  48
  105 CONTINUE                                                                  MSGSIM  49
      GO TO 900                                                                 MSGSIM  50
  106 CONTINUE                                                                  MSGSIM  51
      GO TO 900                                                                 MSGSIM  52
  107 CONTINUE                                                                  MSGSIM  53
      GO TO 900                                                                 MSGSIM  54
  108 WRITE(IOUTPT,1008) ERRPX,I1                                               MSGSIM  55
 1008 FORMAT(3A4,29HNO SUPPLY FAN CFM FOR SYSTEM  ,4A4)                         MSGSIM  56
      GO TO 900                                                                 MSGSIM  57
  109 WRITE(IOUTPT,1009) ERRPX,I1                                               MSGSIM  58
 1009 FORMAT(3A4,4A4,45H = SCHEDULE NOT DEFINED FOR ENTIRE RUN-PERIOD )         MSGSIM  59
      GO TO 900                                                                 MSGSIM  60
  110 WRITE(IOUTPT,1010) WARPX,I1                                               MSGSIM  61
 1010 FORMAT(3A4,40HSYSTEMS MATCH NOT FOUND FOR PLANT NAMED ,4A4,               MSGSIM  62
     1           20H. FIRST PLANT USED. )                                       MSGSIM  63
      GOTO 900                                                                  MSGSIM  64
  111 WRITE(IOUTPT,1011) ERRPX                                                  MSGSIM  65
 1011 FORMAT(3A4,33H END OF FILE READ ON WEATHER FILE)                          MSGSIM  66
      GO TO 900                                                                 MSGSIM  67
  112 WRITE(IOUTPT,1012)  NOTPX                                                 MSGSIM  68
#ifdef _DLL                                                                  /* -048   243 */ 
 1012 FORMAT(3A4,' VERIFICATION is REPORT-ONLY - No Simulation')                -048   244
#else                                                                        /* -048   245 */ 
 1012 FORMAT(3A4,34H DEBUG RUN --- SIMULATION NOT DONE)                         MSGSIM  69
#endif                                                                       /* -048   246 */ 
      GO TO 900                                                                 MSGSIM  70
  113 WRITE(IOUTPT,1013) WARPX,I1(1)                                            MSGSIM  71
 1013 FORMAT(3A4,41HILLEGAL EQUIPMENT ON HEAT RECOVERY LEVEL ,I1,               MSGSIM  72
     1            8H IGNORED)                                                   MSGSIM  73
      GO TO 900                                                                 MSGSIM  74
  114 WRITE(IOUTPT,1014) WARPX,I1(1)                                            MSGSIM  75
 1014 FORMAT(3A4,45HTEMPERATURE OF DEMAND GREATER THAN SUPPLY ON ,              MSGSIM  76
     1           20HHEAT RECOVERY LEVEL ,I1)                                    MSGSIM  77
      GO TO 900                                                                 MSGSIM  78
  115 WRITE(IOUTPT,1015) ERRPX                                                  MSGSIM  79
 1015 FORMAT(3A4,49HHOT TANK INPUT BUT NOT HOOKED UP IN HEAT RECOVERY)          MSGSIM  80
      GO TO 900                                                                 MSGSIM  81
  116 WRITE(IOUTPT,1016) ERRPX                                                  MSGSIM  82
 1016 FORMAT(3A4,50HONLY HOT TANK OR LEFTOVERS CAN BE SPECIFIED TWICE ,         MSGSIM  83
     1           16HIN HEAT RECOVERY)                                           MSGSIM  84
      GO TO 900                                                                 MSGSIM  85
  117 WRITE(IOUTPT,1017) WARPX                                                  MSGSIM  86
 1017 FORMAT(3A4,47HEQUIPMENT HOOKED UP IN HEAT RECOVERY BUT NEVER ,            MSGSIM  87
     1            7HDEFINED)                                                    MSGSIM  88
      GO TO 900                                                                 MSGSIM  89
  118 WRITE(IOUTPT,1018) ERRPX,I1(1)                                            MSGSIM  90
 1018 FORMAT(3A4,I1,45H UTILITIES NEEDED IN THIS RUN, ONLY 5 ALLOWED)           MSGSIM  91
      GO TO 900                                                                 MSGSIM  92
  119 WRITE(IOUTPT,1019) ERRPX,I1,I2                                            MSGSIM  93
 1019 FORMAT(3A4,23HMISSING DEFINITION FOR ,4A4,  7H NAMED ,4A4)                MSGSIM  94
      GOTO 900                                                                  MSGSIM  95
120   WRITE(IOUTPT,1020)  ERRPX, (I1(I), I=1,4), (I2(I), I=1,4)                 MSGSIM  96
1020  FORMAT( 3A4, 18H---- IN FUNCTION = , 4A4, 22H ----  SCHEDULE NAMED=,      MSGSIM  97
     .        4A4, 31H  NOT FOUND IN SIMULATION INPUT )                         MSGSIM  98
      GOTO  900                                                                 MSGSIM  99
121   WRITE(IOUTPT,1021)  ERRPX, (I1(I), I=1,4)                                 MSGSIM 100
1021  FORMAT( 3A4, 14H---- FUNCTION=, 4A4, 22H  NOT DEFINED IN INPUT )          MSGSIM 101
      GOTO  900                                                                 MSGSIM 102
  900 CONTINUE                                                                  MSGSIM 103
      RETURN                                                                    MSGSIM 104
      END                                                                       MSGSIM 105
                                                                                PName    2
      Function PathName(FileName)                                               PName    3
                                                                                PName    4
c              Allows an environment variable to rename a file                  PName    5
c              and/or set its path. Used in .exe version where                  PName    6
c              batch processing files may set a path name to a                  PName    7
c              file via an environment variable.                                PName    8
                                                                                PName    9
c              FileName  Name of file, or name of environment                   PName   10
c                           variable replacing file name                        PName   11
c              PathName  Name of file, including pathname as                    PName   12
c                           set by an environment variable                      PName   13
                                                                                PName   14
      Character  PathName*256, FileName*256                                     PName   15
      Integer    FileLen, FileStatus                                            PName   16
                                                                                PName   17
                                                                                PName   18
c              Check if name defined via an environment variable.               PName   19
c              If so, get the name with the path                                PName   20
      Call Get_Environment_Variable (FileName, PathName,                        PName   21
     &                               FileLen, FileStatus, .True.)               PName   22
                                                                                PName   23
      SELECT CASE (FileStatus)                                                  PName   24
      CASE (0)  ! Environment variable legal                                    PName   25
c              if zero length, FileName has no path                             PName   26
        IF (FileLen .eq. 0)  PathName = FileName                                PName   27
                                                                                PName   28
      CASE (1)  ! Environment variable does not exist                           PName   29
        PathName = FileName                                                     PName   30
                                                                                PName   31
      CASE (-1) ! Path name too long                                            PName   32
        Write (*,9001) FileName, FileLen, PathName                              PName   33
        Read (*, *) Dummy                                                       PName   34
                                                                                PName   35
      CASE DEFAULT  ! Illegal                                                   PName   36
        Write (*,9002) FileName, FileStatus                                     PName   37
        Read (*, *) Dummy                                                       PName   38
      END SELECT                                                                PName   39
                                                                                PName   40
      Return                                                                    PName   41
                                                                                PName   42
 9001 Format(                                                                   PName   43
     & ' *** File name:', A /                                                   PName   44
     & '     File path too long:', I3,' characters; 256 maximum' /              PName   45
     & '    ', A /                                                              PName   46
     & ' (Press any key to continue)')                                          PName   47
 9002 Format(                                                                   PName   48
     & ' *** Illegal Pathname:', A  /                                           PName   49
     & '               Status:', A  /                                           PName   50
     & ' (Press any key to continue)')                                          PName   51
      End  ! PathName                                                           PName   52
      SUBROUTINE READN(IFILE,ARRAY,NUMBER)                                      READN    2
C                                                                               READN    3
C                 THIS ROUTINE JUST DOES AN ORDINARY BINARY READ                READN    4
C                                                                               READN    5
C                                                                               READN    6
      DIMENSION ARRAY(NUMBER)                                                   READN    7
c              ** Caution ** must also mod WCTRL1                               -048     1
      COMMON /WCTRL/  IwinReturn, Imsgflg                                       /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* -048     2 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        -048     3
     &                MB_ICONINFORMATION                                        -048     4
#else                                                                        /* -048     5 */ 
      include 'msgbox.fi'                                                       -048     6
#endif                                                                       /* -048     7 */ 
                                                                                -048   247
#ifndef _DLL                                                                 /* -048   248 */ 
      READ (IFILE) ARRAY                                                        -048   249
#else                                                                        /* -048   250 */ 
      READ (IFILE,END=100) ARRAY                                                -048   251
      RETURN                                                                    -048   252
  100 CALL MSGSIM(1,II,II,II,II)                                                -048   253
      Call MessageBox(NULL,'Error in READN, please report to support'           -048   254
     $     //char(0),'inside READN'//char(0), MB_OK                             -048   255
     $  + MB_ICONSTOP+MB_TASKMODAL )                                            -048   256
      IwinReturn = 1                                                            -048   257
#endif                                                                       /* -048   258 */ 
      RETURN                                                                    READN    9
      END                                                                       READN   10
      SUBROUTINE ScheduleIncrement(Mode)                                        Time   118
c                                                                               Time   119
c              Increments the schedules to the next day                         Time   120
c                                                                               Time   121
c              Mode  0  Initialize schedules for run period                     Time   122
c                    1  Normal call                                             Time   123
c                                                                               Time   124
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON        // AA( 75 000 000)                                          -048a    2
      INTEGER          IA( 75 000 000)                                          -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON        // AA( 75 000 000)                                          -048a    5
      INTEGER          IA( 75 000 000)                                          -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE      (AA(1), IA(1))                                           HR       3
      COMMON  /PtrSch/ Isched, Nsched, Lsched, NVECT                            HR       7
      COMMON  /TIME  / IDOY, IYR, IMO, IDAY, IHR,                               Time     1
     &                 ISCMO, ISCDAY, ISCHR, IDOW, ISCDOW, iDSdates(6),         -044e5   1
     &                 iTimeFlg, iDSFlg, iDDFlg, InitialFlg, LeapYr,            Time     3
     &                 CLOCK(10), MONDSC(13), MONLEN(12), MONSDA(12)            HR       8
c              ** Caution ** must also mod WCTRL1                               -048     1
      COMMON /WCTRL/  IwinReturn, Imsgflg                                       /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* -048     2 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        -048     3
     &                MB_ICONINFORMATION                                        -048     4
#else                                                                        /* -048     5 */ 
      include 'msgbox.fi'                                                       -048     6
#endif                                                                       /* -048     7 */ 
c                                                                               Time   128
c              Abort flag                                                       Time   129
      Iabort = 0                                                                Time   130
c              Check for holiday                                                Time   131
      CALL Holiday                                                              Time   132
c              Display time on PC console                                       Time   133
      CALL DisPC                                                                Time   134
c                                                                               Time   135
c              Cycle thru all year schedules                                    Time   136
      DO  NST=1,NSCHED                                                          Time   137
c              Pointer to year schedule                                         Time   138
        NSC = Isched + (NST-1)*<+ys~Len>                                        -045d    2
c              If initializing, reset week schedule to first                    Time   140
        IF (Mode .EQ. 0)  <CURRENT-WEEK> = 1                                    BIGNM4   3
c              Loop thru the week schedules to find current schedule            Time   142
        DO                                                                      Time   143
c              Pointer to week schedule                                         Time   144
          NWB = <FIRST-WEEK> + (<CURRENT-WEEK>-1)*<+ws~Len>                     -045d    3
          IF (ISCMO .LT. <END-MONTH> .OR.                                       BIGNM4   5
     &       (ISCMO .EQ. <END-MONTH> .AND. ISCDAY .LE. <END-DAY>))  THEN        BIGNM4   6
c              Week schedule is found                                           Time   148
c              Current day ptr = week ptr + sched day                           Time   149
            JJ = ISCDOW                                                         BIGNM4   7
            <CURRENT-DAY> = <WEEK-DAYS>                                         BIGNM4   8
            EXIT                                                                Time   151
          ELSE                                                                  Time   152
c              Increment to next week schedule                                  Time   153
            <CURRENT-WEEK> = <CURRENT-WEEK> + 1                                 BIGNM4   9
c              Check if fallen off end of schedule                              Time   155
            IF (<CURRENT-WEEK> .GT. <NUM-OF-WEEKS>)  THEN                       BIGNM4  10
              Iabort = 1                                                        Time   157
              II = 1                                                            BIGNM4  11
              CALL MSGSIM(9,<SCHEDULE-NAME>,II,II,II)                           BIGNM4  12
              EXIT                                                              Time   159
            ENDIF                                                               Time   160
          ENDIF                                                                 Time   161
        ENDDO  ! week schedule                                                  Time   162
      ENDDO  ! year schedule                                                    Time   163
      IF (Iabort .ne. 0) THEN                                                   -048   259
        Call MessageBox( NULL, 'Errors in SCHEDULE definition -'                -048   260
     &    //' ABORTING'//char(0),'ScheduleIncrement Errors'                     -048   261
     &    //char(0), MB_OK+ MB_ICONSTOP+MB_TASKMODAL )                          -048   262
        IwinReturn = 1                                                          -048   263
        CALL ABT        ! ?? or Return ??                                       -048   264
      ENDIF                                                                     -048   265
c                                                                               Time   166
      RETURN                                                                    Time   167
      END                                                                       Time   168
      SUBROUTINE SCHMNX(NSC,SMAX,SMIN)                                          -045d    4
C                                                                               SCHMAX   3
C              SCAN THE HOURLY VALUES OF THE SCHEDULE POINTED                   SCHMAX   4
C              TO BY NSC AND FIND THE MIN AND MAX                               -045d    5
C                                                                               SCHMAX   6
C              INPUT                                                            SCHMAX   7
C              -----                                                            SCHMAX   8
C              NSC        POINTER TO SCHEDULE                                   -045d    6
C                                                                               SCHMAX  15
C              OUTPUT                                                           SCHMAX  16
C              ------                                                           SCHMAX  17
C              SMAX     - MAXIMUM VALUE OF SCHEDULE                             SCHMAX  18
C              SMIN     - MINIMUM VALUE OF SCHEDULE                             SCHMAX  19
C                                                                               SCHMAX  20
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON        // AA( 75 000 000)                                          -048a    2
      INTEGER          IA( 75 000 000)                                          -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON        // AA( 75 000 000)                                          -048a    5
      INTEGER          IA( 75 000 000)                                          -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE      (AA(1), IA(1))                                           HR       3
      SMAX = -999.                                                              SCHMAX  22
      SMIN = 999.                                                               SCHMAX  23
C              NUMBER OF WEEK SCHEDULES                                         SCHMAX  24
      NWS = <NUM-OF-WEEKS>                                                      -045d    8
C              BEGINNING OF WEEK SCHEDULE DATA FOR THIS SCHEDULE                SCHMAX  26
      NWB = <FIRST-WEEK>                                                        -045d    9
C              LOOP OVER WEEK SCHEDULES                                         SCHMAX  28
      DO IWS=1,NWS                                                              SCHMAX  29
C              GET POINTER TO DAY SCHEDULE FOR EACH DAY OF WEEK                 SCHMAX  30
        DO JJ=1,10                                                              -045d   10
          IDS = <WEEK-DAYS>                                                     -045d   11
C              SCAN 24 HOURLY VALUES AND CHECK FOR MAX                          -045d   12
          DO IH=1,24                                                            -045d   13
            SMAX = AMAX1(SMAX,AA(IDS+IH))                                       -045d   14
            SMIN = AMIN1(SMIN,AA(IDS+IH))                                       -045d   15
          ENDDO                                                                 -045d   16
        ENDDO                                                                   -045d   17
C              INCREMENT WEEK SCHEDULE POINTER                                  -045d   18
        NWB = NWB + <+ws~Len>                                                   -045d   19
      ENDDO                                                                     -045d   20
      RETURN                                                                    SCHMAX  42
      END                                                                       SCHMAX  43
      Function SchVal(NSC, Default)                                             -045d   21
c                                                                               SchVal   3
c              Returns the hourly value of a schedule                           SchVal   4
c                                                                               SchVal   5
c              NSC        Pointer to schedule                                   -045d   22
c              Default    Default value when no schedule defined                SchVal   7
c                                                                               SchVal   8
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON        // AA( 75 000 000)                                          -048a    2
      INTEGER          IA( 75 000 000)                                          -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON        // AA( 75 000 000)                                          -048a    5
      INTEGER          IA( 75 000 000)                                          -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE      (AA(1), IA(1))                                           HR       3
      COMMON  /SUND/   ISUNUP, GUNDOG, HORANG, TDECLN, EQTIME, SOLCON,          /SUND/   2
     1                 ATMEXT, SKYDFF, RAYCOS(3), RDN,                          /SUND/   3
     2                 BSUN, DECLN, CD, SD, FSUNUP                              /SUND/   4
      COMMON  /TIME  / IDOY, IYR, IMO, IDAY, IHR,                               Time     1
     &                 ISCMO, ISCDAY, ISCHR, IDOW, ISCDOW, iDSdates(6),         -044e5   1
     &                 iTimeFlg, iDSFlg, iDDFlg, InitialFlg, LeapYr,            Time     3
     &                 CLOCK(10), MONDSC(13), MONLEN(12), MONSDA(12)            HR       8
c                                                                               SchVal  11
      IF (NSC .eq. 0)  THEN                                                     -045d   24
c              No schedule defined - use default                                SchVal  13
        SchVal = Default                                                        SchVal  14
      ELSE                                                                      SchVal  15
        SchVal = AA(<CURRENT-DAY> + ISCHR)                                      -045d   25
                                                                                -045d   26
c              check for photocell control                                      -045d   27
        SELECT CASE (<PHOTOCELL-CTRL>)                                          -045d   28
        CASE (1)  ! daylight forces off                                         -045j    1
          SchVal = SchVal * (1.-FSUNUP)                                         -045j    2
        CASE (2)  ! daylight forces on                                          -045j    3
          SchVal = SchVal*(1.-FSUNUP) + FSUNUP                                  -045j    4
        CASE (3)  ! night forces off                                            -045j    5
          SchVal = SchVal*FSUNUP                                                -045j    6
        CASE (4)  ! night forces on                                             -045j    7
          SchVal = SchVal*FSUNUP + (1-FSUNUP)                                   -045j    8
        END SELECT                                                              -045j    9
      ENDIF                                                                     SchVal  17
c                                                                               SchVal  18
      RETURN                                                                    SchVal  19
      END                                                                       SchVal  20
      Function SchSnap(Mode, NSC, Flag, Default)                                -045d   38
c                                                                               SchFlg   3
c              Returns the hourly value of a schedule that snaps                SchFlg   4
c              (output = ON or OFF) according to a flag value.                  SchFlg   5
c                                                                               SchFlg   6
c              Mode     Snap criterion                                          SchFlg   7
c                         < 0  ON when Flag < schedule value                    SchFlg   8
c                         = 0  ON when Flag = schedule value                    SchFlg   9
c                         > 0  ON when Flag > schedule value                    SchFlg  10
c              NSC      Pointer to schedule                                     -045d   39
c              Flag     Flag value                                              SchFlg  12
c              Default  Default output when no schedule defined                 SchFlg  13
c                                                                               SchFlg  14
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON        // AA( 75 000 000)                                          -048a    2
      INTEGER          IA( 75 000 000)                                          -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON        // AA( 75 000 000)                                          -048a    5
      INTEGER          IA( 75 000 000)                                          -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE      (AA(1), IA(1))                                           HR       3
      COMMON  /SUND/   ISUNUP, GUNDOG, HORANG, TDECLN, EQTIME, SOLCON,          /SUND/   2
     1                 ATMEXT, SKYDFF, RAYCOS(3), RDN,                          /SUND/   3
     2                 BSUN, DECLN, CD, SD, FSUNUP                              /SUND/   4
      COMMON  /TIME  / IDOY, IYR, IMO, IDAY, IHR,                               Time     1
     &                 ISCMO, ISCDAY, ISCHR, IDOW, ISCDOW, iDSdates(6),         -044e5   1
     &                 iTimeFlg, iDSFlg, iDDFlg, InitialFlg, LeapYr,            Time     3
     &                 CLOCK(10), MONDSC(13), MONLEN(12), MONSDA(12)            HR       8
c                                                                               SchFlg  17
c              Initialize output to OFF                                         SchFlg  18
      SchSnap = 0.                                                              SchFlg  19
c                                                                               SchFlg  20
      IF (NSC .EQ. 0)  THEN                                                     -045d   40
c              No schedule defined - use default                                SchFlg  22
        IF (Default .NE. 0.)  SchSnap = 1.                                      SchFlg  23
      ELSE                                                                      SchFlg  24
        SchFlag = AA(<CURRENT-DAY> + ISCHR)                                     -045d   41
        IF (Mode .EQ. 0)  THEN                                                  SchFlg  26
c              ON when Flag matches schedule value                              SchFlg  27
          IF (Flag .EQ. SchFlag)  SchSnap = 1.                                  SchFlg  28
        ELSEIF (SchFlag .EQ.  0.  .OR.  SchFlag .EQ. 1.  .OR.                   SchFlg  29
     &          SchFlag .EQ. -1.  .OR.  SchFlag .EQ. -999.)  THEN               SchFlg  30
c              Schedule is forcing ON or OFF state                              SchFlg  31
          SchSnap = SchFlag                                                     SchFlg  32
        ELSEIF (Mode .GT. 0)  THEN                                              SchFlg  33
c              ON when Flag exceeds schedule value                              SchFlg  34
          IF (Flag .GT. SchFlag)  SchSnap = 1.                                  SchFlg  35
        ELSE                                                                    SchFlg  36
c              ON when Flag below schedule value                                SchFlg  37
          IF (Flag .LT. SchFlag)  SchSnap = 1.                                  SchFlg  38
        ENDIF  ! Mode                                                           SchFlg  39
      ENDIF  ! Jsched                                                           SchFlg  40
c                                                                               SchFlg  41
c              Check for photocell control. Assume the snap occurs              -045j   11
c              when the sun is up/down for half an hour                         -045j   12
        SELECT CASE (<PHOTOCELL-CTRL>)                                          -045j   13
        CASE (1)  ! daylight forces off                                         -045j   14
          IF (FSUNUP .gt. 0.5)  SchSnap = 0.                                    -045j   15
        CASE (2)  ! daylight forces on                                          -045j   16
          IF (FSUNUP .gt. 0.5)  SchSnap = 1.                                    -045j   17
        CASE (3)  ! night forces off                                            -045j   18
          IF (FSUNUP .lt. 0.5)  SchSnap = 0.                                    -045j   19
        CASE (4)  ! night forces on                                             -045j   20
          IF (FSUNUP .lt. 0.5)  SchSnap = 1.                                    -045j   21
        END SELECT                                                              -045j   22
                                                                                -045j   23
      RETURN                                                                    SchFlg  42
      END                                                                       SchFlg  43
      SUBROUTINE SETFLS (I)                                                     SETFLS   2
C                                                                               SETFLS   3
C     INTEGER REM (3)                                                           SETFLS   4
C     DATA REM/0,0,0/                                                           SETFLS   5
C                                                                               SETFLS   6
C     ENCODE (20,1001,REM) I                                                    SETFLS   7
C1001 FORMAT(4X, 5HFL =  ,O6)                                                   SETFLS   8
C              UNECCESSARY AT BKY                                               SETFLS   9
C     CALL REMARK (REM)                                                         SETFLS  10
      RETURN                                                                    SETFLS  11
      END                                                                       SETFLS  12
      SUBROUTINE STATHR                                                         HR      34
C                                                                               STATHR   3
C                                                                               STATHR   4
C               CALLED HOURLY TO COLLECT HOURLY-REPORT STATS                    STATHR   5
C                                                                               STATHR   6
C                                                                               STATHR   7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON        // AA( 75 000 000)                                          -048a    2
      INTEGER          IA( 75 000 000)                                          -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON        // AA( 75 000 000)                                          -048a    5
      INTEGER          IA( 75 000 000)                                          -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE      (AA(1), IA(1))                                           HR       3
                                                                                HR      36
      COMMON /HRPSTA/ ISTUF(20)                                                 /HRPSTA/ 2
      EQUIVALENCE (ISTUF(1),Ihrp),(ISTUF(2),Nhrp),                              HR       4
     1   (ISTUF(3),Lhrp),(ISTUF(4),ITBUFB),(ISTUF(5),ITBUFE),                   HR       5
     2   (ISTUF(6),ITBUF),(ISTUF(7),IBUFSB),(ISTUF(8),IRSCH),                   /HRPSTA/ 5
     3   (ISTUF(9),IDUM)                                                        /HRPSTA/ 6
      EQUIVALENCE     (ICDFLG, ISTUF(10)), (NHRPB,  ISTUF(11)),                 /HRPSTA/ 7
     1                (ISTRTB, ISTUF(12)), (IENDB,  ISTUF(13)),                 /HRPSTA/ 8
     2                (ILENB,  ISTUF(14)), (ISCHB,  ISTUF(15)),                 /HRPSTA/ 9
     3                (NHRPF,  ISTUF(16)), (ISTRTF, ISTUF(17)),                 /HRPSTA/10
     4                (IENDF,  ISTUF(18)), (ILENF,  ISTUF(19)),                 /HRPSTA/11
     5                (ISCHF,  ISTUF(20))                                       /HRPSTA/12
      COMMON  /TIME  / IDOY, IYR, IMO, IDAY, IHR,                               Time     1
     &                 ISCMO, ISCDAY, ISCHR, IDOW, ISCDOW, iDSdates(6),         -044e5   1
     &                 iTimeFlg, iDSFlg, iDDFlg, InitialFlg, LeapYr,            Time     3
     &                 CLOCK(10), MONDSC(13), MONLEN(12), MONSDA(12)            HR       8
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         BIGNAM   1
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             -044     1
     1                IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL                         /FILES/  3
     2              , IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                    /FILES/  4
     3                IHRREP(3), IHRPAS(2)                                      /FILES/  5
      COMMON /NHRSHR/ NHRSHR(128), IHRCTR(5,128), NHRITM, FILEHR, ICECHS        -048j    1
      INTEGER         FILEHR                                                    /NHRSHR/ 3
C                                                                               STATHR  14
C   SKIP MOST OF THIS IF ONLY BINARY OR FORMATTED FILE OUTPUT DEFINED           STATHR  15
C      (IOPTION = 3 OR 4)                                                       STATHR  16
      IF (NHRP .EQ. 0)  GO TO 8000                                              STATHR  17
      INDEX  = MIN(4, iTimeFlg)                                                 HR      37
      IREPHR = 21                                                               STATHR  19
      IEND   = 0                                                                STATHR  20
7100  IBUFPT = ITBUFB                                                           STATHR  21
      ISTAPT = IBUFSB                                                           STATHR  22
C                                                                               STATHR  23
C  THE FOLLOWING LOOP CHECKS TO SEE IF THERE ARE NEW DATA.  IF SO,              STATHR  24
C  THE DAY (MONTH OR YEAR) STATISTICS ARE UPDATED, THE DAY (MONTH               STATHR  25
C  OR YEAR) SUMMARY STATISTICS ARE WRITTEN TO THE HOURLY REPORT                 STATHR  26
C  FILE AND THE DAY (MONTH OR YEAR) BUFFER IS REINITIALIZED.                    STATHR  27
C                                                                               STATHR  28
      DO 7900 I=1,INDEX                                                         STATHR  29
C                                                                               STATHR  30
C  FOR HOURLY DATA, CHECK TO SEE IF THE REPORT WAS ON.                          STATHR  31
      IF(I.EQ.1 .AND. IRSCH.EQ.0) GOTO 7600                                     STATHR  32
      IF(I.EQ.1) GOTO 7400                                                      STATHR  33
C  FOR DAY, MONTH OR YEAR UPDATES (I>1), CHECK TO SEE IF THERE                  STATHR  34
C  ARE ANY NEW DATA.                                                            STATHR  35
      IND = I                                                                   STATHR  36
      IF(I.EQ.4) IND=3                                                          STATHR  37
      DO 7300 IRP=1,NHRP                                                        STATHR  38
      IF(IHRCTR(IND,IRP).NE.0) GOTO 7400                                        STATHR  39
7300  CONTINUE                                                                  STATHR  40
      IF (I.NE.4) GOTO 7350                                                     STATHR  41
      DO 7320 IRP=1,NHRP                                                        STATHR  42
      IF (IHRCTR(4,IRP).NE.0) GOTO 7350                                         STATHR  43
7320  CONTINUE                                                                  STATHR  44
      GOTO 7900                                                                 STATHR  45
7350  GOTO 7600                                                                 STATHR  46
C                                                                               STATHR  47
C  UPDATE THE SUMMARY STATISTICS.                                               STATHR  48
C  COMPARE THE MAX AND MIN FOR THE HOUR (DAY OR MONTH) AGAINST THOSE            STATHR  49
C  FOR THE DAY (MONTH OR YEAR);  INCREMENT THE TOTAL AND THE NUMBER             STATHR  50
C  OF HOURS THE REPORT WAS ON FOR THE APPROPRIATE TIME PERIOD.                  STATHR  51
C    IBUFPT IS THE POINTER IN THE ARRAY OF DATA OR STATISTICS ALREADY           STATHR  52
C    CALCULATED;  ISTAPT IS THE POINTER IN THE ARRAY OF STATISTICS              STATHR  53
C    BEING CHANGED AND INCREMENTED;  IFLAG INDICATES WHETHER DAILY,             STATHR  54
C    MONTHLY OR YEARLY STATISTICS ARE BEING CALCULATED.                         STATHR  55
7400  IBPTR = IBUFPT                                                            STATHR  56
      ISPTR = ISTAPT                                                            STATHR  57
      IFLAG = I+1                                                               STATHR  58
C  LOOP OVER THE STATISTICS TO BE CALCULATED                                    STATHR  59
      DO 500 ISTAT = 1,3                                                        STATHR  60
      IF(IFLAG.EQ.2) IBPTR = ITBUFB                                             STATHR  61
C  LOOP OVER THE REPORTS                                                        STATHR  62
      DO 412 IRP = 1,NHRP                                                       STATHR  63
C  FIND THE NUMBER OF ITEMS IN THIS REPORT                                      STATHR  64
      NITMS = IHRCTR(1,IRP)                                                     STATHR  65
C                                                                               STATHR  66
C  CHECK TO SEE IF THE HOURLY REPORT IS ON FOR THIS HOUR;  IF NOT,              STATHR  67
C  INCREMENT THE POINTERS AND GO ON TO THE NEXT REPORT.                         STATHR  68
      IF(AA(IBPTR).EQ.-99999.) GOTO 300                                         STATHR  69
C                                                                               STATHR  70
C  INCREMENT THE COUNTER OF THE NUMBER OF HOURS THIS REPORT WAS ON.             STATHR  71
C  IF UPDATING MONTHLY OR YEARLY STATS, INCREMENT BY THE NUMBER OF              STATHR  72
C  HOURS IN THE DAY OR MONTH.                                                   STATHR  73
C                                                                               STATHR  74
      IF(ISTAT.EQ.1.AND.IFLAG.NE.2)IHRCTR(IFLAG,IRP) = IHRCTR(IFLAG,IRP)        STATHR  75
     *     + IHRCTR(IFLAG-1,IRP)                                                STATHR  76
15    IF(ISTAT.EQ.1.AND.IFLAG.EQ.2)IHRCTR(IFLAG,IRP) =                          STATHR  77
     *   IHRCTR(IFLAG,IRP) + 1                                                  STATHR  78
C                                                                               STATHR  79
C  FOR EACH ITEM IN THIS REPORT, CHECK TO SEE IF THE MAX AND MIN FOR THIS       STATHR  80
C  HOUR (DAY OR MONTH) ARE THE MAX AND MIN FOR THE DAY (MONTH OR YEAR);         STATHR  81
C  INCREMENT THE TOTAL.                                                         STATHR  82
300   DO 7480 J=1,NITMS                                                         STATHR  83
      IF (AA(IBPTR).EQ.-99999.) GOTO 7460                                       STATHR  84
      IF (ISTAT.EQ.1.AND.(AA(IBPTR).LT.AA(ISPTR).OR.AA(ISPTR)                   STATHR  85
     *  .EQ.-99999.)) AA(ISPTR)=AA(IBPTR)                                       STATHR  86
      IF(ISTAT.EQ.2.AND.AA(IBPTR).GT.AA(ISPTR)) AA(ISPTR)=                      STATHR  87
     *  AA(IBPTR)                                                               STATHR  88
      IF(ISTAT.EQ.3 .AND. AA(ISPTR).NE.-99999.) AA(ISPTR)=                      STATHR  89
     *  AA(ISPTR) + AA(IBPTR)                                                   STATHR  90
      IF(ISTAT.EQ.3 .AND. AA(ISPTR).EQ.-99999.) AA(ISPTR)=AA(IBPTR)             STATHR  91
      GOTO 7470                                                                 STATHR  92
7460  IF(IHRCTR(IFLAG,IRP).EQ.0) AA(ISPTR) = AA(IBPTR)                          STATHR  93
7470  ISPTR = ISPTR + 1                                                         STATHR  94
      IBPTR = IBPTR + 1                                                         STATHR  95
7480   CONTINUE                                                                 STATHR  96
C                                                                               STATHR  97
412   CONTINUE                                                                  STATHR  98
500   CONTINUE                                                                  STATHR  99
C  IF THIS IS HOURLY DATA, WRITE THE HOURLY REPORT FILE.                        STATHR 100
      IF(I.EQ.1) GOTO 7550                                                      STATHR 101
C                                                                               STATHR 102
C  IF THIS IS THE END OF THE DAY, MONTH OR YEAR, COMPUTE THE                    STATHR 103
C  AVERAGE AND WRITE THE SUMMARY STATISTICS TO THE HOURLY                       STATHR 104
C  REPORT FILE.                                                                 STATHR 105
C                                                                               STATHR 106
7500  ISTPTR = IBUFPT                                                           STATHR 107
      INDHR = IREPHR                                                            STATHR 108
      IFLAG = I                                                                 STATHR 109
      IF(IREPRT(IPRG,36).LE.(I-1))                                              IREPRT   7
     &  CALL STAOUT(ISTPTR,IFLAG,INDHR)                                         HR      38
C  REINITIALIZE THE COUNTER OF THE NO. OF HOURS THE REPORT                      STATHR 112
C  WAS ON FOR THE APPROPRIATE TIME PERIOD.                                      STATHR 113
      DO 7510 IRP=1,NHRP                                                        STATHR 114
7510  IHRCTR(I,IRP) = 0                                                         STATHR 115
      IF(IEND.EQ.1) GOTO 7900                                                   STATHR 116
C                                                                               STATHR 117
C  REINITIALIZE THE SUMMARY BUFFER                                              STATHR 118
      IPTR = IBUFPT                                                             STATHR 119
      CALL FILLN(9E+15,AA(IPTR),NHRITM)                                         STATHR 120
      CALL FILLN(-9E+15,AA(IPTR + NHRITM),NHRITM)                               STATHR 121
      CALL FILLN(0.,AA(IPTR + NHRITM*2),NHRITM)                                 STATHR 122
C                                                                               STATHR 123
      GOTO 7600                                                                 STATHR 124
C                                                                               STATHR 125
C  WRITE THE HOURLY DATA TO THE REPORT FILE.                                    STATHR 126
7550  IF(IREPRT(IPRG,36).EQ.0) WRITE (IHRREP(1)) IYR,IMO,IDAY,IHR,ITBUF,        IREPRT   8
     +  (AA(J), J=ITBUFB,ITBUFE)                                                STATHR 128
      IF(IREPRT(IPRG,33).EQ.1) WRITE(IOUTPT,8997)IYR,IMO,IDAY,IHR               IREPRT   9
8997  FORMAT(//,1H ,6HIYR = ,I4,3X,6HIMO = ,I2,3X,7HIDAY = ,I2,3X,              STATHR 130
     +       6HIHR = ,I2)                                                       STATHR 131
      IF (IREPRT(IPRG,33).EQ.1)                                                 IREPRT  10
     +   CALL DUMPIT(20HHOURLY-FILE          ,AA(ITBUFB),ITBUF)                 STATHR 133
C                                                                               STATHR 134
C  INCREMENT THE POINTERS                                                       STATHR 135
7600  IF(I.EQ.3) GOTO 7900                                                      STATHR 136
      IF(I.NE.1) IBUFPT = IBUFPT + NHRITM*3                                     STATHR 137
      IF(I.EQ.1) IBUFPT = IBUFSB                                                STATHR 138
      ISTAPT = ISTAPT + NHRITM*3                                                STATHR 139
      IREPHR = IREPHR + 4                                                       STATHR 140
      IF(I.EQ.4) IEND = 1                                                       STATHR 141
      IF(I.EQ.4) GOTO 7500                                                      STATHR 142
C                                                                               STATHR 143
7900  CONTINUE                                                                  STATHR 144
C                                                                               STATHR 145
8000  CONTINUE                                                                  STATHR 146
C                                                                               STATHR 147
C   WRITE ANY BINARY OR FORMATTED REPORTS DEFINED                               STATHR 148
C   FIRST BINARY                                                                STATHR 149
C              FOR BINARY FILES, WRITE FILE HOUR INSTEAD OF YEAR                STATHR 150
      IF (ISCHB .GT. 0)  WRITE (IHRREP(2)) FILEHR,IMO,IDAY,IHR,ILENB,           STATHR 151
     1                                     (AA(I),I=ISTRTB,IENDB)               STATHR 152
C   FORMATTED                                                                   STATHR 153
C-  NOTE THAT THIS IS NOT COMPLETED                                             STATHR 154
C$      IF (ISCHF. GT. 0)  WRITE (IHRREP(3)) IYR                                STATHR 155
      RETURN                                                                    STATHR 156
      END                                                                       STATHR 157
      SUBROUTINE STAOUT(ISTAPT,IFLAG,INDHR)                                     HR      39
C                                                                               STAOUT   3
C  THIS SUBROUTINE COMPUTES THE AVERAGE AND WRITES THE SUMMARY                  STAOUT   4
C  STATISTICS (MIN, MAX, TOTAL AND AVERAGE) TO THE REPORT FILE.                 STAOUT   5
C                                                                               STAOUT   6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON        // AA( 75 000 000)                                          -048a    2
      INTEGER          IA( 75 000 000)                                          -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON        // AA( 75 000 000)                                          -048a    5
      INTEGER          IA( 75 000 000)                                          -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE      (AA(1), IA(1))                                           HR       3
      COMMON /HRPSTA/ ISTUF(20)                                                 /HRPSTA/ 2
      EQUIVALENCE (ISTUF(1),Ihrp),(ISTUF(2),Nhrp),                              HR       4
     1   (ISTUF(3),Lhrp),(ISTUF(4),ITBUFB),(ISTUF(5),ITBUFE),                   HR       5
     2   (ISTUF(6),ITBUF),(ISTUF(7),IBUFSB),(ISTUF(8),IRSCH),                   /HRPSTA/ 5
     3   (ISTUF(9),IDUM)                                                        /HRPSTA/ 6
      EQUIVALENCE     (ICDFLG, ISTUF(10)), (NHRPB,  ISTUF(11)),                 /HRPSTA/ 7
     1                (ISTRTB, ISTUF(12)), (IENDB,  ISTUF(13)),                 /HRPSTA/ 8
     2                (ILENB,  ISTUF(14)), (ISCHB,  ISTUF(15)),                 /HRPSTA/ 9
     3                (NHRPF,  ISTUF(16)), (ISTRTF, ISTUF(17)),                 /HRPSTA/10
     4                (IENDF,  ISTUF(18)), (ILENF,  ISTUF(19)),                 /HRPSTA/11
     5                (ISCHF,  ISTUF(20))                                       /HRPSTA/12
      COMMON  /TIME  / IDOY, IYR, IMO, IDAY, IHR,                               Time     1
     &                 ISCMO, ISCDAY, ISCHR, IDOW, ISCDOW, iDSdates(6),         -044e5   1
     &                 iTimeFlg, iDSFlg, iDDFlg, InitialFlg, LeapYr,            Time     3
     &                 CLOCK(10), MONDSC(13), MONLEN(12), MONSDA(12)            HR       8
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         BIGNAM   1
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             -044     1
     1                IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL                         /FILES/  3
     2              , IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                    /FILES/  4
     3                IHRREP(3), IHRPAS(2)                                      /FILES/  5
      COMMON /NHRSHR/ NHRSHR(128), IHRCTR(5,128), NHRITM, FILEHR, ICECHS        -048j    1
      INTEGER         FILEHR                                                    /NHRSHR/ 3
C                                                                               STAOUT  13
C  DEFINE A POINTER TO THE TOTAL STATISTICS                                     STAOUT  14
      ITOTPT = ISTAPT + NHRITM*2                                                STAOUT  15
C                                                                               STAOUT  16
C  LOOP OVER THE STATISTICS TO BE WRITTEN (MIN, MAX, AND TOTAL)                 STAOUT  17
      DO 500 ISTAT=1,3                                                          STAOUT  18
C  SET POINTER TO THE END OF THE BUFFER CONTAINING ALL STATISTICS               STAOUT  19
      IBUFND = ISTAPT + NHRITM -1                                               STAOUT  20
C                                                                               STAOUT  21
C  WRITE THE MIN, MAX, AND TOTAL TO THE REPORT FILE                             STAOUT  22
      WRITE(IHRREP(1)) IYR,IMO,IDAY,INDHR,NHRITM,(AA(J),J=ISTAPT,IBUFND)        STAOUT  23
      IF(IREPRT(IPRG,33).EQ.1)WRITE(IOUTPT,8997)IYR,IMO,IDAY,INDHR              IREPRT  11
      IF(IREPRT(IPRG,33).EQ.1)CALL DUMPIT(20HHR RP SUMMARY BUFFER,              IREPRT  12
     +     AA(ISTAPT),NHRITM)                                                   STAOUT  26
C                                                                               STAOUT  27
C  ONCE THE TOTAL IS WRITTEN, COMPUTE THE AVERAGE AND WRITE IT                  STAOUT  28
C  TO THE REPORT FILE                                                           STAOUT  29
      IF(ISTAT.NE.3) GOTO 400                                                   STAOUT  30
      INDHR = INDHR + 1                                                         STAOUT  31
C                                                                               STAOUT  32
      Jhr = Ihrp                                                                HR      41
      DO 300 IRP=1,NHRP                                                         STAOUT  34
      NITMS = IHRCTR(1,IRP)                                                     STAOUT  35
      IBUFND = ISTAPT + NITMS - 1                                               STAOUT  36
      IF(AA(ISTAPT).EQ.-99999.) GOTO 210                                        STAOUT  37
C  INCREMENT THE COUNTER OF THE NUMBER OF SUMMARY REPORTS WRITTEN               STAOUT  38
C  FOR THIS REPORT                                                              STAOUT  39
      IHRCTR(5,IRP) = IHRCTR(5,IRP)+1                                           STAOUT  40
C  INCREMENT THE COUNTER OF THE NUMBER OF HOURS WRITTEN TO EACH REPORT          STAOUT  41
       <hr;NumHours> = <hr;NumHours> + 4                                        HR      42
C                                                                               STAOUT  44
C  COMPUTE THE AVERAGE                                                          STAOUT  45
      DO 200 J=1,NITMS                                                          STAOUT  46
      IF(AA(ISTAPT).EQ.0.) GOTO 190                                             STAOUT  47
      AA(ISTAPT) = AA(ISTAPT)/FLOAT(IHRCTR(IFLAG,IRP))                          STAOUT  48
190   ISTAPT = ISTAPT + 1                                                       STAOUT  49
200   CONTINUE                                                                  STAOUT  50
      GOTO 220                                                                  STAOUT  51
210   ISTAPT = ISTAPT + NITMS                                                   STAOUT  52
220   Jhr = Jhr + <+hr;Len> + <hr;NumBlocks>                                    HR      43
300   CONTINUE                                                                  STAOUT  54
C                                                                               STAOUT  55
      WRITE(IHRREP(1)) IYR,IMO,IDAY,INDHR,NHRITM,(AA(K),K=ITOTPT,IBUFND)        STAOUT  56
      IF(IREPRT(IPRG,33).EQ.1)WRITE(IOUTPT,8997)IYR,IMO,IDAY,INDHR              IREPRT  13
      IF(IREPRT(IPRG,33).EQ.1)CALL DUMPIT(20HHR REP AVERAGES      ,             IREPRT  14
     +     AA(ITOTPT),NHRITM)                                                   STAOUT  59
      GOTO 500                                                                  STAOUT  60
C                                                                               STAOUT  61
400   ISTAPT = ISTAPT + NHRITM                                                  STAOUT  62
      INDHR = INDHR + 1                                                         STAOUT  63
C                                                                               STAOUT  64
500   CONTINUE                                                                  STAOUT  65
8997  FORMAT(//,1H ,6HIYR = ,I4,3X,6HIMO = ,I2,3X,7HIDAY = ,I2,3X,              STAOUT  66
     +       6HIHR = ,I2)                                                       STAOUT  67
      RETURN                                                                    STAOUT  68
      END                                                                       STAOUT  69
      Subroutine GetTDV                                                         GetTDV   2
                                                                                GetTDV   3
c              Checks to see if the California time-dependent valuation         GetTDV   4
c              data is needed.                                                  GetTDV   5
#ifdef _DLL                                                                  /* -048   266 */ 
      COMMON /PDFILE/ scrfnm,wdfnm , fdfnm,wffnm,iffnm,                         /PDFILE/ 2
     $                       iwdlen,ifdlen,      iiflen                         /PDFILE/ 3
      character*256   scrfnm,wdfnm ,fdfnm ,wffnm,iffnm                          /PDFILE/ 4
#endif                                                                       /* -048   268 */ 
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             -044     1
     1                IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL                         /FILES/  3
     2              , IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                    /FILES/  4
     3                IHRREP(3), IHRPAS(2)                                      /FILES/  5
      COMMON  /TDVdat/ NameTDV, TDVmax(3), TDVmin(3), TDVavg(3),                /TDVdat/ 2
     &                 TDVsrc(3,8760), KtvTDV2(4)                               /TDVdat/ 3
      Character        NameTDV*4                                                /TDVdat/ 4
      COMMON  /WEATH / IWDID(5),LRECX,WLAT,WLONG,LTIMZ,IFX,IWSIZ,               /WEATH/  2
     1                 CLRNES,TGNDR,WBT,DBT,PATM,CLDAMT,ISNOW,IRAIN,            /WEATH/  3
     2                 IWNDDR,HUMRAT,DENSTY,ENTHAL,DIFSOL,DIRSOL,SOLRAD,        /WEATH/  4
     3                 ICLDTY,WNDSPD,IDUMMY,DPT,WNDDRR,CLDCOV,RDNCC,            /WEATH/  5
     4                 BSCC,SKYA,DBTR,GTEMP(12),CLR(12),ESKY,EGND,IWINTR        /WEATH/  6
                                                                                GetTDV   9
      Character  PathName*256                                                   -048n   65
      Dimension NameCTZ(16)                                                     GetTDV  10
      Data      NameCTZ /4HCZ01, 4HCZ02, 4HCZ03, 4HCZ04, 4HCZ05,                GetTDV  11
     $                   4HCZ06, 4HCZ07, 4HCZ08, 4HCZ09, 4HCZ10,                GetTDV  12
     $                   4HCZ11, 4HCZ12, 4HCZ13, 4HCZ14, 4HCZ15,                GetTDV  13
     $                   4HCZ16/                                                GetTDV  14
      ITDV  = 30                                                                GetTDV  15
      DO I=1,16                                                                 GetTDV  16
        IF (NameCTZ(I) .eq. IWDID(1))  THEN                                     GetTDV  17
          iSkip = I - 1                                                         GetTDV  18
          GoTo 10                                                               GetTDV  19
        ENDIF                                                                   GetTDV  20
      ENDDO                                                                     GetTDV  21
c              Zero the TDV file unit for use as an hourly flag                 GetTDV  22
      ITDV  = 0                                                                 GetTDV  23
      Return                                                                    GetTDV  24
#ifdef _DLL                                                                  /* -048   269 */ 
   10 scrfnm = fdfnm(1:ifdLen)//'TDVCTZ.BIN'                                    -048   270
      lenscr = ifdLen+10                                                        -048   271
      Open(ITDV,File=scrfnm,Form='UNFORMATTED',Status='OLD',RECL=105120,        -048   272
     $          ERR=20,IOSTAT=io,ACTION='READ',SHARE='DENYNONE',                -048   273
     $          RECORDTYPE='variable',BLOCKSIZE=105128)                         -048   274
      IF(io .ne. 0)  GOTO 20                                                    -048   275
#else                                                                        /* -048   276 */ 
                                                                                GetTDV  25
   10 Open(ITDV,FILE=PathName('TDVCTZ.BIN'),FORM='UNFORMATTED',                 -048n   66
     $          RECL=105120,ERR=20,RECORDTYPE='variable',                       -048n   67
     $          BLOCKSIZE=105128,STATUS='OLD',ACTION='READ',                    -048n   68
     $          SHARE='DENYNONE')                                               -048n   69
#endif                                                                       /* -048   277 */ 
      DO  I=1,iSkip                                                             GetTDV  29
        Read(ITDV, End=20)                                                      GetTDV  30
        Read(ITDV, End=20)                                                      GetTDV  31
      ENDDO                                                                     GetTDV  32
      Read(ITDV, End=20) NameTDV, TDVmax, TDVmin, TDVavg, Jcheck                GetTDV  33
      Read(ITDV, End=20) TDVsrc                                                 GetTDV  34
      Close(ITDV)                                                               GetTDV  35
                                                                                GetTDV  36
c              Compare the checksum in the data file                            GetTDV  37
      Icheck = 0                                                                GetTDV  38
      DO  I=1,8760                                                              GetTDV  39
        Icheck = Icheck + Int(TDVsrc(1,I)*10.)                                  GetTDV  40
     $                  + Int(TDVsrc(2,I))                                      GetTDV  41
     $                  + Int(TDVsrc(3,I))                                      GetTDV  42
      ENDDO                                                                     GetTDV  43
      IF (Icheck .ne. Jcheck)  GoTo 30                                          GetTDV  44
      Return                                                                    GetTDV  45
                                                                                GetTDV  46
c              Error Processing                                                 GetTDV  47
   20 Call MSGSIM(-1,II,II,II,II)                                               GetTDV  48
      Write (IOUTPT, 1020)                                                      GetTDV  49
 1020 Format(14x,'Time-Dependent Valuation data not available.')                GetTDV  50
      ITDV  = 0                                                                 GetTDV  51
      Return                                                                    GetTDV  52
                                                                                GetTDV  53
   30 Call MSGSIM(-1,II,II,II,II)                                               GetTDV  54
      Write(IOUTPT, 1030)                                                       GetTDV  55
 1030 Format(14x,'Time-Dependent Valuation data corrupt.')                      GetTDV  56
      ITDV  = 0                                                                 GetTDV  57
      Return                                                                    GetTDV  58
      End                                                                       GetTDV  59
      SUBROUTINE TimeIncrement                                                  Time   169
c                                                                               Time   170
c              Increments the actual and schedule times.                        Time   171
c                                                                               Time   172
c              iTimeFlg = 0  Run period initialization                          Time   173
c                         1  Hour during the day                                Time   174
c                         2  Last hour of the day                               Time   175
c                         3  Last hour of the month                             Time   176
c                         4  Last hour of the year                              Time   177
c                         5  Last hour of the run period                        Time   178
c                                                                               Time   179
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON        // AA( 75 000 000)                                          -048a    2
      INTEGER          IA( 75 000 000)                                          -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON        // AA( 75 000 000)                                          -048a    5
      INTEGER          IA( 75 000 000)                                          -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE      (AA(1), IA(1))                                           HR       3
      COMMON  /DESHRQ/ NDESDY, IDDTYP(2), DESHRQ(360)                           /DESHRQ/ 2
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             -044     1
     1                IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL                         /FILES/  3
     2              , IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                    /FILES/  4
     3                IHRREP(3), IHRPAS(2)                                      /FILES/  5
      COMMON /IRUNPD/ NRUNPD, JRUNPD, IRUNPD(6,15)                              /IRUNPD/ 2
      COMMON  /PtrSch/ Isched, Nsched, Lsched, NVECT                            HR       7
      COMMON  /TIME  / IDOY, IYR, IMO, IDAY, IHR,                               Time     1
     &                 ISCMO, ISCDAY, ISCHR, IDOW, ISCDOW, iDSdates(6),         -044e5   1
     &                 iTimeFlg, iDSFlg, iDDFlg, InitialFlg, LeapYr,            Time     3
     &                 CLOCK(10), MONDSC(13), MONLEN(12), MONSDA(12)            HR       8
      COMMON  /WEATH / IWDID(5),LRECX,WLAT,WLONG,LTIMZ,IFX,IWSIZ,               /WEATH/  2
     1                 CLRNES,TGNDR,WBT,DBT,PATM,CLDAMT,ISNOW,IRAIN,            /WEATH/  3
     2                 IWNDDR,HUMRAT,DENSTY,ENTHAL,DIFSOL,DIRSOL,SOLRAD,        /WEATH/  4
     3                 ICLDTY,WNDSPD,IDUMMY,DPT,WNDDRR,CLDCOV,RDNCC,            /WEATH/  5
     4                 BSCC,SKYA,DBTR,GTEMP(12),CLR(12),ESKY,EGND,IWINTR        /WEATH/  6
c                                                                               Time   185
      INTEGER    WkStrt, WkEnd, DyStrt, DyEnd                                   -044e5   4
      SAVE       iStrtDS, iEndDS                                                -044e5   5
c                                                                               Time   189
      SELECT CASE (iTimeFlg)                                                    Time   190
        CASE (0)  ! initial hour of run period                                  Time   191
c              Hour of day (non-daylight savings time), and schedule            Time   192
c              hour, adjusted for daylight savings time                         Time   193
          IHR   = 1                                                             Time   194
          ISCHR = IHR                                                           Time   195
c                If daylight savings defined                                    -044e5   6
          IF (iDSFlg .ne. 0) THEN                                               -047k    6
c              set up the start/stop days-of-year                               -044e5   8
            IF (InitialFlg .eq. 7)  Call DaylightSavings                        -048   278
c              advance schedule hour if daylight savings active                 -044e5  10
            IF (iStrtDS .lt. iEndDS) THEN  ! northern hemisphere                -044e5  11
              IF (IDOY .ge. iStrtDS  .and.                                      -044e5  12
     &            IDOY .lt. iEndDS)      ISCHR = IHR + 1                        -044e5  13
            ELSE  ! southern hemisphere                                         -044e5  14
              IF (IDOY .lt. iEndDS  .or.                                        -044e5  15
     &            IDOY .ge. iStrtDS)     ISCHR = IHR + 1                        -044e5  16
            ENDIF                                                               -044e5  17
            iquck = IDOWK(IYR,IDOY)                                             -044e5  18
            if (iquck .ne. idow) then                                           -044e5  19
              quck1 = 0.                                                        -044e5  20
            endif                                                               -044e5  21
          ENDIF  ! daylight savings                                             Time   209
c              Initialize schedules                                             Time   210
          CALL ScheduleIncrement(0)                                             Time   211
        CASE (1)  ! new hour in same day                                        Time   212
          IHR = IHR + 1                                                         Time   213
          Call ScheduleTime                                                     -048   279
        CASE DEFAULT   ! new day, month, and/or year                            Time   215
c              skip if initialization period                                    ChlrHP   3
          IF (InitialFlg .EQ. 0)  THEN                                          ChlrHP   4
            IDOY = IDOY + 1                                                     Time   220
            SELECT CASE (iTimeFlg)                                              Time   221
              CASE (2)  ! new day                                               Time   222
                IDAY = IDAY + 1                                                 Time   223
              CASE (3)  ! new month                                             Time   224
                IDAY = 1                                                        Time   225
                IMO  = IMO + 1                                                  Time   226
              CASE (4)  ! new year                                              Time   227
                IDAY = 1                                                        Time   228
                IMO  = 1                                                        Time   229
                IYR  = IYR + 1                                                  Time   230
                IDOY = 1                                                        Time   231
                Call DaylightSavings                                            -048   280
            END SELECT                                                          Time   232
          ENDIF  ! iDDFlg                                                       Time   233
          IHR = 1                                                               -044e5  23
          Call ScheduleTime                                                     -048   281
      END SELECT  ! iTimeFlg                                                    Time   237
c                                                                               Time   238
c              Set time flag                                                    Time   239
      IF (IHR .NE. 24)  THEN                                                    Time   240
        iTimeFlg = 1                              ! normal hour                 Time   241
      ELSEIF (IMO  .EQ. IRUNPD(4,JRUNPD)  .AND.                                 Time   242
     &        IDAY .EQ. IRUNPD(5,JRUNPD)  .AND.                                 Time   243
     &        IYR  .EQ. IRUNPD(6,JRUNPD))  THEN                                 Time   244
        iTimeFlg = 5                              ! end of run period           Time   245
      ELSEIF (IMO  .EQ. 12  .AND.                                               Time   246
     &        IDAY .EQ. MONLEN(12))  THEN                                       Time   247
        iTimeFlg = 4                              ! end of year                 Time   248
      ELSEIF (IDAY .EQ. MONLEN(IMO))  THEN                                      Time   249
        iTimeFlg = 3                              ! end of month                Time   250
      ELSE                                                                      Time   251
        iTimeFlg = 2                              ! end of day                  Time   252
      ENDIF                                                                     Time   253
c                                                                               Time   254
      RETURN                                                                    Time   255
c                                                                               -044e5  25
      CONTAINS                                                                  -048   282
c=============== DaylightSavings ============================================== -048   283
      Subroutine DaylightSavings                                                -048   284
                                                                                -044e5  29
c              Calculates the start and stop day-of-year for the                -044e5  30
c              daylight savings period                                          -044e5  31
                                                                                -044e5  32
      IF (iDSdates(1) .gt. 0.) THEN  ! user-defined                             -044e5  33
        WkStrt = iDSdates(1)  ! starting week                                   -044e5  34
        DyStrt = iDSdates(2)  !          day of week                            -044e5  35
        MoStrt = iDSdates(3)  !          month                                  -044e5  36
        WkEnd  = iDSdates(4)  ! endinf   week                                   -044e5  37
        DyEnd  = iDSdates(5)  !          day of week                            -044e5  38
        MoEnd  = iDSdates(6)  !          month                                  -044e5  39
      ELSEIF (IYR .gt. 2006) THEN                                               -044e5  40
c              second Sunday in March thru 1st Sunday in November               -044e5  41
        WkStrt = 2                                                              -044e5  42
        DyStrt = 1                                                              -044e5  43
        MoStrt = 3                                                              -044e5  44
        WkEnd  = 1                                                              -044e5  45
        DyEnd  = 1                                                              -044e5  46
        MoEnd  = 11                                                             -044e5  47
      ELSEIF (IYR .gt. 1986) THEN                                               -044e5  48
c              first Sunday in April thru last Sunday in October                -044e5  49
        WkStrt = 1                                                              -044e5  50
        DyStrt = 1                                                              -044e5  51
        MoStrt = 4                                                              -044e5  52
        WkEnd  = 5                                                              -044e5  53
        DyEnd  = 1                                                              -044e5  54
        MoEnd  = 10                                                             -044e5  55
      ELSE                                                                      -044e5  56
c              last Sunday in April thru last Sunday in October                 -044e5  57
        WkStrt = 5                                                              -044e5  58
        DyStrt = 1                                                              -044e5  59
        MoStrt = 4                                                              -044e5  60
        WkEnd  = 5                                                              -044e5  61
        DyEnd  = 1                                                              -044e5  62
        MoEnd  = 10                                                             -044e5  63
      ENDIF                                                                     -044e5  64
                                                                                -044e5  65
c              Day of year daylight savings starts                              -044e5  66
      IF (WkStrt .lt. 5) THEN  ! relative to 1st of month                       -044e5  67
        iStrtDS = MONSDA(MoStrt) + 1      ! DOY on 1st of month                 -044e5  68
        MoDOW   = IDOWK(IYR,iStrtDS)      ! DOW on 1st of month                 -044e5  69
        iStrtDS = iStrtDS + (WkStrt-1)*7  ! add full weeks                      -044e5  70
c              add the differential days in excess of a full week               -044e5  71
        iStrtDS = iStrtDS + DyStrt-MoDOW                                        -044e5  72
c              if differential is negative, add another week                    -044e5  73
        IF (MoDOW .gt. DyStrt)  iStrtDS = iStrtDS + 7                           -044e5  74
      ELSE  ! relative to end of month                                          -044e5  75
        iStrtDS = MONSDA(MoStrt)          ! DOY at end of month                 -044e5  76
     &          + MONLEN(MoStrt)                                                -044e5  77
        MoDOW   = IDOWK(IYR,iStrtDS)      ! DOW at end of month                 -044e5  78
c              delete the differential days                                     -044e5  79
        iStrtDS = iStrtDS + DyStrt-MoDOW                                        -044e5  80
c              if differential is positive, delete a week                       -044e5  81
        IF (MoDOW .lt. DyStrt)  iStrtDS = iStrtDS - 7                           -044e5  82
      ENDIF                                                                     -044e5  83
                                                                                -044e5  84
c                Day of year daylight savings ends                              -044e5  85
      IF (WkEnd .lt. 5) THEN  ! relative to 1st of month                        -044e5  86
        iEndDS = MONSDA(MoEnd) + 1        ! DOY on 1st of month                 -044e5  87
        MoDOW  = IDOWK(IYR,iEndDS)        ! DOW on 1st of month                 -044e5  88
        iEndDS = iEndDS + (WkEnd-1)*7     ! add full weeks                      -044e5  89
        iEndDS = iEndDS + DyEnd-MoDOW                                           -044e5  90
        IF (MoDOW .gt. DyEnd)  iEndDS = iEndDS + 7                              -044e5  91
      ELSE  ! relative to end of month                                          -044e5  92
        iEndDS = MONSDA(MoEnd)            ! DOY at end of month                 -044e5  93
     &         + MONLEN(MoEnd)                                                  -044e5  94
        MoDOW  = IDOWK(IYR,iEndDS)        ! DOW at end of month                 -044e5  95
        iEndDS = iEndDS + DyEnd-MoDOW                                           -044e5  96
        IF (MoDOW .lt. DyEnd)  iEndDS = iEndDS - 7                              -044e5  97
      ENDIF                                                                     -044e5  98
                                                                                -044e5  99
c              Check for start/stop inconsistent with latitude                  -044e5 100
      IF (iStrtDS .lt. iEndDS) THEN                                             -044e5 101
        IF (WLAT .lt. 0.) THEN                                                  -044e5 102
          CALL MsgSim(-2,II,II,II,II)                                           -044e5 103
          WRITE (IOUTPT, 9001)                                                  -044e5 104
        ENDIF                                                                   -044e5 105
      ELSE                                                                      -044e5 106
        IF (WLAT .gt. 0.) THEN                                                  -044e5 107
          CALL MsgSim(-2,II,II,II,II)                                           -044e5 108
          WRITE (IOUTPT, 9002)                                                  -044e5 109
        ENDIF                                                                   -044e5 110
      ENDIF                                                                     -044e5 111
                                                                                -044e5 112
 9001 Format(                                                                   -048   285
     &14x,'In the Southern hemisphere, the daylight savings start date'/        -048   286
     &14x,'should be later than the end date. If the latitude is taken'/        -048   287
     &14x,'from the weather file, you must manually specify the'       /        -048   288
     &14x,'daylight savings interval in the SITE-PARAMETERS component.')        -048   289
 9002 Format(                                                                   -048   290
     &14x,'In the Northern hemisphere, the daylight savings start date'/        -048   291
     &14x,'should be earlier than the end date.'                       )        -048   292
                                                                                -048   293
      End Subroutine DaylightSavings                                            -048   294
c                                                                               Time   256
c                                                                               Time   257
c=============== ScheduleTime ================================================= -048   295
      Subroutine ScheduleTime                                                   -048   296
c                                                                               Time   260
c              Calculates the schedule hour, day of week, and month.            Time   261
c              These may vary from the actual hour due to daylight              Time   262
c              savings time                                                     Time   263
c                                                                               Time   264
      IF (ISCHR .LT. 24)  THEN                                                  Time   265
c              Still in same schedule day                                       Time   266
        ISCHR = ISCHR + 1                                                       Time   267
      ELSE                                                                      Time   268
c              New schedule day                                                 Time   269
        ISCHR = 1                                                               Time   270
c              skip if initialization                                           ChlrHP   5
        IF (InitialFlg .EQ. 0)  THEN                                            ChlrHP   6
c              day of week                                                      Time   273
          IF (IDOW .LT. 7)  THEN                                                Time   274
            IDOW  = IDOW + 1                                                    Time   275
          ELSE  ! new week                                                      Time   276
            IDOW = 1                                                            Time   277
          ENDIF                                                                 Time   278
c              day of month                                                     Time   279
          IF (ISCDAY .LT. MONLEN(ISCMO))  THEN                                  Time   280
            ISCDAY  = ISCDAY + 1                                                Time   281
          ELSE  ! new month                                                     Time   282
            ISCDAY = 1                                                          Time   283
            IF (ISCMO .LT. 12)  THEN                                            Time   284
              ISCMO = ISCMO + 1                                                 Time   285
            ELSE  ! new year, reset schedules                                   Time   286
              ISCMO  = 1                                                        Time   287
              CALL ScheduleIncrement(0)                                         Time   288
            ENDIF                                                               Time   289
          ENDIF                                                                 Time   290
c              Check for holidays and increment schedules                       Time   291
          CALL ScheduleIncrement(1)                                             Time   292
        ENDIF  ! iddflg                                                         Time   293
      ENDIF  ! ischr                                                            Time   294
c                                                                               Time   295
c              Adjust schedule hour for daylight savings                        Time   296
      IF (IHR .EQ. 1  .AND.  iDSFlg .EQ. 1)  THEN                               Time   297
        iquck2 = IDOWK(IYR,IDOY)                                                -044e5 114
        if (iquck2 .ne. idow) then                                              -044e5 115
          quck2 = 0.                                                            -044e5 116
        endif                                                                   -044e5 117
        IF (iStrtDS .lt. iEndDS) THEN  ! northern hemisphere                    -044e5 118
          IF (IDOY .ge. iStrtDS  .and.  IDOY .lt. iEndDS) THEN                  -044e5 119
            ISCHR = IHR + 1                                                     -044e5 120
          ELSE                                                                  -044e5 121
            ISCHR = IHR                                                         -044e5 122
          ENDIF                                                                 -044e5 123
        ELSE  ! southern hemisphere                                             -044e5 124
          IF (IDOY .ge. iStrtDS  .or.  IDOY .lt. iEndDS) THEN                   -044e5 125
            ISCHR = IHR + 1                                                     -044e5 126
          ELSE                                                                  -044e5 127
            ISCHR = IHR                                                         -044e5 128
          ENDIF                                                                 -044e5 129
        ENDIF                                                                   -044e5 130
      ENDIF                                                                     Time   308
c                                                                               Time   309
      End Subroutine ScheduleTime                                               -048   297
                                                                                -048   298
      End  ! TimeIncrement                                                      -048   299
      SUBROUTINE TimeInitial                                                    Time   313
c                                                                               Time   314
c              Initializes the time variables at the beginning of each          Time   315
c              run period                                                       Time   316
c                                                                               Time   317
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON        // AA( 75 000 000)                                          -048a    2
      INTEGER          IA( 75 000 000)                                          -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON        // AA( 75 000 000)                                          -048a    5
      INTEGER          IA( 75 000 000)                                          -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE      (AA(1), IA(1))                                           HR       3
      COMMON /IRUNPD/ NRUNPD, JRUNPD, IRUNPD(6,15)                              /IRUNPD/ 2
      COMMON  /TIME  / IDOY, IYR, IMO, IDAY, IHR,                               Time     1
     &                 ISCMO, ISCDAY, ISCHR, IDOW, ISCDOW, iDSdates(6),         -044e5   1
     &                 iTimeFlg, iDSFlg, iDDFlg, InitialFlg, LeapYr,            Time     3
     &                 CLOCK(10), MONDSC(13), MONLEN(12), MONSDA(12)            HR       8
c                                                                               Time   321
c              Month, day, year, and day of year                                Time   322
      IMO    = IRUNPD(1,JRUNPD)                                                 Time   323
      IDAY   = IRUNPD(2,JRUNPD)                                                 Time   324
      IYR    = IRUNPD(3,JRUNPD)                                                 Time   325
      IDOY   = IDOYR(IMO,IDAY)                                                  Time   326
c                                                                               Time   327
c              Schedule month, day, day of week, and day of week modified       Time   328
c              for holidays                                                     Time   329
      ISCMO  = IMO                                                              Time   330
      ISCDAY = IDAY                                                             Time   331
      IDOW   = IDOWK(IYR,IDOY)                                                  Time   332
      ISCDOW = IDOW                                                             Time   333
c                                                                               Time   334
c              Initialize time keeping flag                                     Time   335
      iTimeFlg = 0                                                              Time   336
c                                                                               Time   337
      RETURN                                                                    Time   338
      END                                                                       Time   339
      FUNCTION TYPLS(X)                                                         TYPLS    2
C                                                                               TYPLS    3
C                            USE THIS ROUTINE TO RETURN A REAL                  TYPLS    4
C                            OUT OF A REAL ARRAY WITHOUT TYPE                   TYPLS    5
C                            CONVERSION                                         TYPLS    6
C                                                                               TYPLS    7
      TYPLS = X                                                                 TYPLS    8
      RETURN                                                                    TYPLS    9
      END                                                                       TYPLS   10
      FUNCTION VECSUM(VECT,LEN)                                                 VECSUM   2
C                                                                               VECSUM   3
C     This function returns the sum of the vector passed to it                  VECSUM   4
C        first parameter VECT is the vector to sum                              VECSUM   5
C        2nd parameter LEN is the number of elements in VECT to sum             VECSUM   6
C                                                                               VECSUM   7
      DIMENSION VECT(LEN)                                                       VECSUM   8
      SUM = 0.                                                                  VECSUM   9
      IF( LEN .GT. 0 ) THEN                                                     VECSUM  10
        DO I=1,LEN                                                              VECSUM  11
           SUM = SUM + VECT(I)                                                  VECSUM  12
        ENDDO                                                                   VECSUM  13
      ENDIF                                                                     VECSUM  14
      VECSUM = SUM                                                              VECSUM  15
      RETURN                                                                    VECSUM  16
      END                                                                       VECSUM  17
      FUNCTION VECVAL(VECT,LEN)                                                 VECVAL   2
C                                                                               VECVAL   3
C     This function returns 0. for 0 vectors, 1. for non-zero vectors           VECVAL   4
C        first parameter VECT is the vector to sum                              VECVAL   5
C        2nd parameter LEN is the number of elements in VECT to sum             VECVAL   6
C                                                                               VECVAL   7
      DIMENSION VECT(LEN)                                                       VECVAL   8
      VECVAL = 1.                                                               VECVAL   9
      IF( LEN .GT. 0 ) THEN                                                     VECVAL  10
        DO I=1,LEN                                                              VECVAL  11
           IF( VECT(I) .NE. 0. )  RETURN                                        VECVAL  12
        ENDDO                                                                   VECVAL  13
      ENDIF                                                                     VECVAL  14
      VECVAL = 0.                                                               VECVAL  15
      RETURN                                                                    VECVAL  16
      END                                                                       VECVAL  17
      SUBROUTINE WEATHI                                                         WEATHI   2
C                                                                               WEATHI   3
C              THIS SUBROUTINE UNPACKS ONE HOUR OF A PACKED DOE-2 WEATHER       WEATHI   4
C              FILE WHICH CONTAINS TWO WORDS PER HOUR.  INFO IS STORED IN       WEATHI   5
C              ARRAY CALC, WHICH IS EQUIVALENCED TO THE FOLLOWING LIST--        WEATHI   6
C              WET BULB TEMP            HUMIDITY RATIO                          WEATHI   7
C              DRY BULB TEMP            DENSITY                                 WEATHI   8
C              ATMOSPHERIC PRESSURE     ENTHALPY                                WEATHI   9
C              CLOUD AMOUNT             SOLAR RADIATION                         WEATHI  10
C              SNOW FLAG(UNUSED)        DIRECT SOLAR                            WEATHI  11
C              RAIN FLAG(UNUSED)        CLOUD TYPE                              WEATHI  12
C              WIND DIRECTION           WIND SPEED                              WEATHI  13
C              ROUTINE USES MONTH DAY HOUR (IMON,IDAY,IHR)                      WEATHI  14
C                                                                               WEATHI  15
C                                                                               WEATHI  16
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             -044     1
     1                IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL                         /FILES/  3
     2              , IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                    /FILES/  4
     3                IHRREP(3), IHRPAS(2)                                      /FILES/  5
      COMMON  /TIME  / IDOY, IYR, IMO, IDAY, IHR,                               Time     1
     &                 ISCMO, ISCDAY, ISCHR, IDOW, ISCDOW, iDSdates(6),         -044e5   1
     &                 iTimeFlg, iDSFlg, iDDFlg, InitialFlg, LeapYr,            Time     3
     &                 CLOCK(10), MONDSC(13), MONLEN(12), MONSDA(12)            HR       8
      COMMON  /WEATH / IWDID(5),LRECX,WLAT,WLONG,LTIMZ,IFX,IWSIZ,               /WEATH/  2
     1                 CLRNES,TGNDR,WBT,DBT,PATM,CLDAMT,ISNOW,IRAIN,            /WEATH/  3
     2                 IWNDDR,HUMRAT,DENSTY,ENTHAL,DIFSOL,DIRSOL,SOLRAD,        /WEATH/  4
     3                 ICLDTY,WNDSPD,IDUMMY,DPT,WNDDRR,CLDCOV,RDNCC,            /WEATH/  5
     4                 BSCC,SKYA,DBTR,GTEMP(12),CLR(12),ESKY,EGND,IWINTR        /WEATH/  6
C                                                                               WEATHI  20
      DIMENSION CALC(14)                                                        WEATHI  21
      DIMENSION XMASK(16,2)                                                     WEATHI  22
      DIMENSION LOOK(14),IWDIDO(2)                                              WEATHI  23
      DIMENSION IDAT30(1536),IDAT60(768),IDATO(1488),IDAT(1536)                 WEATHI  24
      EQUIVALENCE (IDAT(1),IDAT30(1)),(IDAT(1),IDAT60(1)),                      WEATHI  25
     1            (IDAT(1),IDATO(1)),(IWDIDO(1),IWDID(1))                       WEATHI  26
      EQUIVALENCE  (CALC(1),WBT)                                                WEATHI  27
c              ** Caution ** must also mod WCTRL1                               -048     1
      COMMON /WCTRL/  IwinReturn, Imsgflg                                       /WCTRL/  2
c              For DLLs, delete Win_MB and enable msgbox.fi                     /WCTRL/  3
#ifndef _DLL                                                                 /* -048     2 */ 
      COMMON /WIN_MB/ MB_OK,MB_ICONSTOP,MB_ICONEXCLAMATION,MB_TASKMODAL,        -048     3
     &                MB_ICONINFORMATION                                        -048     4
#else                                                                        /* -048     5 */ 
      include 'msgbox.fi'                                                       -048     6
#endif                                                                       /* -048     7 */ 
C                                                                               WEATHI  28
      DATA XMASK /-99.0,-99.0,15.0,0.0,0.0,0.0,0.0,0.0,0.02,-30.0,0.0,          WEATHI  29
     1            0.0,0.0,0.0,0.0,10.0,1.0,1.0,0.1,1.0,1.0,1.0,1.0,             WEATHI  30
     2            0.0001,0.001,0.5,1.0,1.0,1.0,1.0,0.0,0.0                      WEATHI  31
     3            /                                                             WEATHI  32
C                                                                               WEATHI  33
C     IRECX IS THE RECORD INDEX.  LRECX IS THE LAST RECORD READ.                WEATHI  34
      IRECX = IMO                                                               WEATHI  35
      IDX = IDAY                                                                WEATHI  36
      IF (IFX .LT. 3)  GO TO 30                                                 WEATHI  37
      IRECX = IMO*2 + (IDAY-1)/16 - 1                                           WEATHI  38
      IDX = MOD(IDAY-1,16) + 1                                                  WEATHI  39
   30 CONTINUE                                                                  WEATHI  40
      IF (IRECX - LRECX)  100,300,200                                           WEATHI  41
  100 CONTINUE                                                                  WEATHI  42
C     BACKSPACE TO PROPER RECORD                                                WEATHI  43
      IDIF = LRECX - IRECX + 1                                                  WEATHI  44
      DO 120 I=1,IDIF                                                           WEATHI  45
      BACKSPACE IWEATH                                                          WEATHI  46
  120 CONTINUE                                                                  WEATHI  47
 200  GO TO (210,210,220,230,220,230) , IFX                                     WEATHI  48
 210  READ (IWEATH,END=290) IWDIDO,LYR,WLAT,WLONG,LTIMZ,LRECX,IDUM,             WEATHI  49
     .                      CLRNES,TGNDR,IDUM,IDATO                             WEATHI  50
      GO TO 30                                                                  WEATHI  51
 220  READ (IWEATH,END=290) IWDID,LYR,WLAT,WLONG,LTIMZ,LRECX,IDUM,              WEATHI  52
     .                      CLRNES,TGNDR,IDUM,IDAT60                            WEATHI  53
      GO TO 30                                                                  WEATHI  54
 230  READ (IWEATH,END=290) IWDID,LYR,WLAT,WLONG,LTIMZ,LRECX,IDUM,              WEATHI  55
     .                      CLRNES,TGNDR,IDUM,IDAT30                            WEATHI  56
      GO TO 30                                                                  WEATHI  57
 290  WRITE(IOUTPT,291)                                                         WEATHI  58
 291  FORMAT(27H0*** WEATHER FILE ERROR ***)                                    WEATHI  59
  231 CALL MSGSIM(11,IDUM,IDUM,IDUM,IDUM)                                       WEATHI  60
#ifdef _DLL                                                                  /* -048   300 */ 
      Call MessageBox( NULL, 'Errors reading WEATHER file -'                    -048   301
     &  //' ABORTING'//char(0),'WEATHI Errors'//char(0), MB_OK                  -048   302
     &  + MB_ICONSTOP+MB_TASKMODAL )                                            -048   303
      IwinReturn = 1                                                            -048   304
      RETURN                                                                    -048   305
#else                                                                        /* -048   306 */ 
      CALL ABT                                                                  WEATHI  61
#endif                                                                       /* -048   307 */ 
  300 CONTINUE                                                                  WEATHI  62
      IP1 = 96*(IDX-1) + 4*IHR - 3                                              WEATHI  63
      LOOK(3) = IDAT(IP1)/65536                                                 WEATHI  64
      LOOK(1) = MOD(IDAT(IP1),65536)/256                                        WEATHI  65
      LOOK(2) = MOD(IDAT(IP1),256)                                              WEATHI  66
      LOOK(11) = IDAT(IP1+1)/1048576                                            WEATHI  67
      LOOK(12) = MOD(IDAT(IP1+1),1048576)/1024                                  WEATHI  68
      LOOK(4) = MOD(IDAT(IP1+1),1024)/64                                        WEATHI  69
      LOOK(5) = MOD(IDAT(IP1+1),64)/32                                          WEATHI  70
      LOOK(6) = MOD(IDAT(IP1+1),32)/16                                          WEATHI  71
      LOOK(7) = MOD(IDAT(IP1+1),16)                                             WEATHI  72
      LOOK(8) = IDAT(IP1+2)/128                                                 WEATHI  73
      LOOK(9) = MOD(IDAT(IP1+2),128)                                            WEATHI  74
      LOOK(10) = IDAT(IP1+3)/2048                                               WEATHI  75
      LOOK(13) = MOD(IDAT(IP1+3),2048)/128                                      WEATHI  76
      LOOK(14) = MOD(IDAT(IP1+3),128)                                           WEATHI  77
      DO 720 I=1,14                                                             WEATHI  78
      CALC(I) = FLOAT(LOOK(I))*XMASK(I,2) + XMASK(I,1)                          WEATHI  79
  720 CONTINUE                                                                  WEATHI  80
 2000 ISNOW = INT(CALC(5))                                                      WEATHI  81
      IRAIN = INT(CALC(6))                                                      WEATHI  82
      IWNDDR = INT(CALC(7))                                                     WEATHI  83
      WNDSPD = CALC(14)                                                         WEATHI  84
      ICLDTY = INT(CALC(13))                                                    WEATHI  85
      SOLRAD = CALC(11)                                                         WEATHI  86
      IF (IFX .EQ. 1)  WNDSPD = 0.869*WNDSPD                                    WEATHI  87
      DIFSOL = 0.                                                               WEATHI  88
      if ( IWINTR .ne. 0 )    then                                              WEATHI  89
         call  WTHINT                                                           WEATHI  90
      endif                                                                     WEATHI  91
      DBTR = DBT + 460.                                                         WEATHI  92
      IF (IFX .LT. 7)  GO TO 740                                                WEATHI  93
      TGNDR  = TGNDR/10.+273.16                                                 WEATHI  94
      CALL KDIV(TGNDR,60,1,1)                                                   WEATHI  95
  740 CONTINUE                                                                  WEATHI  96
C              OTHER INITIALISATIONS                                            WEATHI  97
      IDUMMY = 0                                                                WEATHI  98
      DPT    = -90000.                                                          WEATHI  99
      WNDDRR = IWNDDR * 0.39269908                                              WEATHI 100
      CLDCOV = 0.                                                               WEATHI 101
      IF(CLR(IMO) .EQ. -66666.)  CLR(IMO) = CLRNES                              WEATHI 102
      IF(GTEMP(IMO) .EQ. -66666.)  GTEMP(IMO) = TGNDR                           WEATHI 103
      CLRNES = CLR(IMO)                                                         WEATHI 104
      TGNDR = GTEMP(IMO)                                                        WEATHI 105
      RETURN                                                                    WEATHI 106
      END                                                                       WEATHI 107
      Subroutine ZeroAA(iStart, iEnd)                                           ZeroAA   2
c                                                                               ZeroAA   3
c              Zeroes a range in AA                                             ZeroAA   4
c                                                                               ZeroAA   5
c              iStart  The first variable in the range                          ZeroAA   6
c              iEnd    The last  variable in the range                          ZeroAA   7
c                                                                               ZeroAA   8
c              DEVELOPED BY                                                     ZeroAA   9
c                            S. D. Gates                                        ZeroAA  10
c                            J. J. Hirsch                                       ZeroAA  11
c                            James J. Hirsch & Associates                       ZeroAA  12
c                            Camarillo, California                              ZeroAA  13
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON        // AA( 75 000 000)                                          -048a    2
      INTEGER          IA( 75 000 000)                                          -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON        // AA( 75 000 000)                                          -048a    5
      INTEGER          IA( 75 000 000)                                          -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE      (AA(1), IA(1))                                           HR       3
c                                                                               ZeroAA  15
      DO  I=iStart,iEnd                                                         ZeroAA  16
        AA(I) = 0.                                                              ZeroAA  17
      ENDDO                                                                     ZeroAA  18
c                                                                               ZeroAA  19
      Return                                                                    ZeroAA  20
      End                                                                       ZeroAA  21
      subroutine  WTHIN0                                                        WTHIN0   2
c                                                                               WTHIN0   3
c ---- initialize one day of interpolated weather data                          WTHIN0   4
c                                                                               WTHIN0   5
      COMMON  /TIME  / IDOY, IYR, IMO, IDAY, IHR,                               Time     1
     &                 ISCMO, ISCDAY, ISCHR, IDOW, ISCDOW, iDSdates(6),         -044e5   1
     &                 iTimeFlg, iDSFlg, iDDFlg, InitialFlg, LeapYr,            Time     3
     &                 CLOCK(10), MONDSC(13), MONLEN(12), MONSDA(12)            HR       8
      COMMON  /WEATH / IWDID(5),LRECX,WLAT,WLONG,LTIMZ,IFX,IWSIZ,               /WEATH/  2
     1                 CLRNES,TGNDR,WBT,DBT,PATM,CLDAMT,ISNOW,IRAIN,            /WEATH/  3
     2                 IWNDDR,HUMRAT,DENSTY,ENTHAL,DIFSOL,DIRSOL,SOLRAD,        /WEATH/  4
     3                 ICLDTY,WNDSPD,IDUMMY,DPT,WNDDRR,CLDCOV,RDNCC,            /WEATH/  5
     4                 BSCC,SKYA,DBTR,GTEMP(12),CLR(12),ESKY,EGND,IWINTR        /WEATH/  6
c                                                                               WTHIN0   8
      real  XDBT(24), XHUM(24), XPATM(24), XWSPD(24)                            WTHIN0   9
c                                                                               WTHIN0  10
      H(DB,W) = 0.24*DB + (1061.0+0.444*DB)*W                                   WTHIN0  11
      V(DB,W,P) = 0.754*(DB+459.7)*(1.0+1.605*W)/P                              WTHIN0  12
c                                                                               WTHIN0  13
      do  100  IHR = 1 , 24                                                     WTHIN0  14
         call  WEATHI                                                           WTHIN0  15
        XDBT(IHR) = DBT                                                         WTHIN0  16
        XHUM(IHR) = HUMRAT                                                      WTHIN0  17
        XPATM(IHR) = PATM                                                       WTHIN0  18
        XWSPD(IHR) = WNDSPD                                                     WTHIN0  19
100   continue                                                                  WTHIN0  20
c----- adjust endpoints                                                         WTHIN0  21
      n = 21                                                                    WTHIN0  22
      do  200  i = n , 24                                                       WTHIN0  23
        XDBT(i)  = XDBT(n)  + ((XDBT(1) -XDBT(n) )/(25-n)) * (i-n)              WTHIN0  24
        XHUM(i)  = XHUM(n)  + ((XHUM(1) -XHUM(n) )/(25-n)) * (i-n)              WTHIN0  25
        XPATM(i) = XPATM(n) + ((XPATM(1)-XPATM(n))/(25-n)) * (i-n)              WTHIN0  26
        XWSPD(i) = XWSPD(n) + ((XWSPD(1)-XWSPD(n))/(25-n)) * (i-n)              WTHIN0  27
200   continue                                                                  WTHIN0  28
c----- set interpolation flag                                                   WTHIN0  29
      IWINTR = 1                                                                WTHIN0  30
      return                                                                    WTHIN0  31
c                                                                               WTHIN0  32
c  ---------------------------------------------------------------------        WTHIN0  33
c                                                                               WTHIN0  34
      entry  WTHINS                                                             WTHIN0  35
c                                                                               WTHIN0  36
c ---- stop returning interpolated weather data                                 WTHIN0  37
c                                                                               WTHIN0  38
      IWINTR = 0                                                                WTHIN0  39
      return                                                                    WTHIN0  40
c                                                                               WTHIN0  41
c  ---------------------------------------------------------------------        WTHIN0  42
c                                                                               WTHIN0  43
      entry  WTHINT                                                             WTHIN0  44
c                                                                               WTHIN0  45
c ---- return current mon,day,hour's interpolated weather data                  WTHIN0  46
c                                                                               WTHIN0  47
      DBT    = XDBT(IHR)                                                        WTHIN0  48
      HUMRAT = XHUM(IHR)                                                        WTHIN0  49
      PATM   = XPATM(IHR)                                                       WTHIN0  50
      WNDSPD = XWSPD(IHR)                                                       WTHIN0  51
      ENTHAL = H( DBT, HUMRAT )                                                 WTHIN0  52
      DENSTY = 1.0 / V( DBT,HUMRAT,PATM )                                       WTHIN0  53
      wbt    = WBF( ENTHAL, PATM )                                              WTHIN0  54
      dpt    = DEWPT( HUMRAT, PATM )                                            WTHIN0  55
      return                                                                    WTHIN0  56
      end                                                                       WTHIN0  57
#ifdef _DLL                                                                  /* INIT_SIM 2 */ 
      address function INIT_SIM( )                                              INIT_SIM 3
      structure /sim_struct/                                                    /PDARGS/ 2
         integer NoScrnMsg                                                      /PDARGS/ 3
         integer fDirLgth                                                       /PDARGS/ 4
         integer wDirLgth                                                       /PDARGS/ 5
         integer iFileLgth                                                      /PDARGS/ 6
         integer wFileLgth                                                      /PDARGS/ 7
         integer fDirLoc(64)                                                    /PDARGS/ 8
         integer wDirLoc(64)                                                    /PDARGS/ 9
         integer iFileLoc(64)                                                   /PDARGS/10
         integer wFileLoc(64)                                                   /PDARGS/11
         address pCallbackFunc                                                  /PDARGS/12
      end structure                                                             /PDARGS/13
      record /sim_struct/ args                                                  /PDARGS/14
      COMMON /PDARGS/ args                                                      /PDARGS/15
      address loc_args                                                          /PDARGS/16
      COMMON /PDARGSL/ loc_args                                                 /PDARGS/17
      SAVE /PDARGS/                                                             /PDARGS/18
      SAVE /PDARGSL/                                                            /PDARGS/19
c              ** Caution ** must also mod WCTRL                                /WCTRL1/ 2
      COMMON /WCTRL/  IwinReturn, Imsgflg                                       /WCTRL1/ 3
      include 'msgbox.fi'                                                       /WCTRL1/ 4
      COMMON  /REPORT/ IREPRT(4,37),IPRG,IUNIQV(100),IUNIQS(100),IUNIQL         BIGNAM   1
      IPRG   = 0                                                                INIT_SIM 7
      args.NoScrnMsg   = 0                                                      INIT_SIM 8
      args.fDirLgth    = 0                                                      INIT_SIM 9
      args.wDirLgth    = 0                                                      INIT_SIM10
      args.iFileLgth   = 0                                                      INIT_SIM11
      args.wFileLgth   = 0                                                      INIT_SIM12
      loc_args =  LOC( args )                                                   INIT_SIM13
      INIT_SIM = loc_args                                                       INIT_SIM14
      End                                                                       INIT_SIM15
#endif                                                                       /* INIT_SIM16 */ 
#ifdef _DLL                                                                  /* RUN_SIM  2 */ 
      integer function RUN_SIM ( )                                              RUN_SIM  3
      use simstruct                                                             RUN_SIM  4
c              ** Caution ** must also mod WCTRL                                /WCTRL1/ 2
      COMMON /WCTRL/  IwinReturn, Imsgflg                                       /WCTRL1/ 3
      include 'msgbox.fi'                                                       /WCTRL1/ 4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             -044     1
     1                IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL                         /FILES/  3
     2              , IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                    /FILES/  4
     3                IHRREP(3), IHRPAS(2)                                      /FILES/  5
      COMMON /PDFILE/ scrfnm,wdfnm , fdfnm,wffnm,iffnm,                         /PDFILE/ 2
     $                       iwdlen,ifdlen,      iiflen                         /PDFILE/ 3
      character*256   scrfnm,wdfnm ,fdfnm ,wffnm,iffnm                          /PDFILE/ 4
      INTEGER          FILENUM(22)                                              RUN_SIM  8
      EQUIVALENCE      (ISTNDF, FILENUM(1))                                     RUN_SIM  9
      IwinReturn = 0                                                            RUN_SIM 10
C             Allow simulation screen messages to toggle; 1=suppress            RUN_SIM 11
      Imsgflg = args.NoScrnMsg                                                  RUN_SIM 12
      Call SETUP                                                                RUN_SIM 13
      IF(IwinReturn .EQ. 0) Call DOESIM                                         RUN_SIM 14
      CLOSE( 15 )                                                               RUN_SIM 15
      CLOSE( ICECHR )                                                           RUN_SIM 16
      CLOSE( ICECDT )                                                           RUN_SIM 17
      CLOSE( ICECPR )                                                           RUN_SIM 18
      DO I=1,22                                                                 RUN_SIM 19
        IF(FILENUM(I) .NE. 0) CLOSE( FILENUM(I) )                               RUN_SIM 20
      ENDDO                                                                     RUN_SIM 21
      RUN_SIM = IwinReturn                                                      RUN_SIM 22
      RETURN                                                                    RUN_SIM 23
      END                                                                       RUN_SIM 24
#endif                                                                       /* RUN_SIM 25 */ 
#ifdef _DLL                                                                  /* SETUP    2 */ 
      SUBROUTINE SETUP                                                          SETUP    3
                                                                                SETUP    4
      structure /sim_struct/                                                    /PDARGS/ 2
         integer NoScrnMsg                                                      /PDARGS/ 3
         integer fDirLgth                                                       /PDARGS/ 4
         integer wDirLgth                                                       /PDARGS/ 5
         integer iFileLgth                                                      /PDARGS/ 6
         integer wFileLgth                                                      /PDARGS/ 7
         integer fDirLoc(64)                                                    /PDARGS/ 8
         integer wDirLoc(64)                                                    /PDARGS/ 9
         integer iFileLoc(64)                                                   /PDARGS/10
         integer wFileLoc(64)                                                   /PDARGS/11
         address pCallbackFunc                                                  /PDARGS/12
      end structure                                                             /PDARGS/13
      record /sim_struct/ args                                                  /PDARGS/14
      COMMON /PDARGS/ args                                                      /PDARGS/15
      address loc_args                                                          /PDARGS/16
      COMMON /PDARGSL/ loc_args                                                 /PDARGS/17
      SAVE /PDARGS/                                                             /PDARGS/18
      SAVE /PDARGSL/                                                            /PDARGS/19
c              ** Caution ** must also mod WCTRL                                /WCTRL1/ 2
      COMMON /WCTRL/  IwinReturn, Imsgflg                                       /WCTRL1/ 3
      include 'msgbox.fi'                                                       /WCTRL1/ 4
      COMMON  /FILES / ISTNDF,ICTRL,IWEATH,ITDV,IDSNFL,ILDSO,ISYSO,             -044     1
     1                IREPFL,IHDFIL,IHRHDF,IOUTPT,IOVRL                         /FILES/  3
     2              , IPLTO, IPPFIL, ICECHR, ICECDT, ICECPR,                    /FILES/  4
     3                IHRREP(3), IHRPAS(2)                                      /FILES/  5
      COMMON /PDFILE/ scrfnm,wdfnm , fdfnm,wffnm,iffnm,                         /PDFILE/ 2
     $                       iwdlen,ifdlen,      iiflen                         /PDFILE/ 3
      character*256   scrfnm,wdfnm ,fdfnm ,wffnm,iffnm                          /PDFILE/ 4
                                                                                SETUP    9
      character*10 axc                                                          SETUP   10
                                                                                SETUP   11
C     irv= messageboxi( NULL, 'About to OPEN files'//char(0),                   SETUP   12
C    & 		'SETUP subroutine'//char(0), MB_OK)                                    SETUP   13
                                                                                SETUP   14
      write(wdfnm,'(64A4)')(args.wDirLoc(i),i=1,args.wDirLgth)                  SETUP   15
      write(fdfnm,'(64A4)')(args.fDirLoc(i),i=1,args.fDirLgth)                  SETUP   16
      write(iffnm,'(64A4)')(args.iFileLoc(i),i=1,args.iFileLgth)                SETUP   17
      write(wffnm,'(64A4)')(args.wFileLoc(i),i=1,args.wFileLgth)                SETUP   18
      iwdLen = args.wDirLgth * 4                                                SETUP   19
      ifdLen = args.fDirLgth * 4                                                SETUP   20
      iwfLen = args.wFileLgth * 4                                               SETUP   21
      j      = args.iFileLgth * 4                                               SETUP   22
      DO I=1,j                                                                  SETUP   23
        IF(iffnm(j-I+1:j-I+1) .eq. '.')  THEN                                   SETUP   24
          iifLen = j-I                                                          SETUP   25
          GoTo 5                                                                SETUP   26
        ENDIF                                                                   SETUP   27
      ENDDO                                                                     SETUP   28
      iifLen = j                                                                SETUP   29
    5 iffnm=iffnm(1:iifLen)                                                     SETUP   30
C     axc = 'append'                                                            SETUP   31
      axc = 'sequential'                                                        SETUP   32
      scrfnm = wdfnm(1:iwdLen)//iffnm(1:iifLen)//'.SIM'                         SETUP   33
      lenscr = iwdLen+iifLen+4                                                  SETUP   34
                                                                                SETUP   35
C     irv= messageboxi( NULL, 'About to open file: '//scrfnm//char(0),          SETUP   36
C    & 		'SETUP Function'//char(0), MB_OK)                                      SETUP   37
                                                                                SETUP   38
      OPEN( IOUTPT, FILE=scrfnm, FORM='FORMATTED',ACCESS=axc,                   SETUP   39
     &     carriagecontrol='FORTRAN', STATUS='UNKNOWN',BLOCKSIZE=131072,        SETUP   40
     &     ERR=11,IOSTAT=io,SHARE='DENYWR',ACTION='READWRITE')                  SETUP   41
      IF(io .ne. 0)  GOTO 10                                                    SETUP   42
      scrfnm = wdfnm(1:iwdLen)//iffnm(1:iifLen)//'.LOG'                         SETUP   43
      lenscr = iwdLen+iifLen+4                                                  SETUP   44
                                                                                SETUP   45
C     irv= messageboxi( NULL, 'About to open file: '//scrfnm//char(0),          SETUP   46
C    & 		'SETUP Function'//char(0), MB_OK)                                      SETUP   47
                                                                                SETUP   48
      open( 15    , file=scrfnm, FORM='FORMATTED', ACCESS='append',             SETUP   49
     &      ERR=10,IOSTAT=io, status='unknown' )                                SETUP   50
      IF(io .ne. 0)  GOTO 10                                                    SETUP   51
      scrfnm = wdfnm(1:iwdLen)//iffnm(1:iifLen)//'.STD'                         SETUP   52
      lenscr = iwdLen+iifLen+4                                                  SETUP   53
                                                                                SETUP   54
C     irv= messageboxi( NULL, 'About to open file: '//scrfnm//char(0),          SETUP   55
C    & 		'SETUP Function'//char(0), MB_OK)                                      SETUP   56
                                                                                SETUP   57
      OPEN( ISTNDF, FILE=scrfnm, FORM='UNFORMATTED',ERR=10,IOSTAT=io,           SETUP   58
     &      BLOCKSIZE=32768, STATUS='old' )                                     SETUP   59
      IF(io .ne. 0)  GOTO 10                                                    SETUP   60
      scrfnm = wdfnm(1:iwdLen)//iffnm(1:iifLen)//'.CTL'                         SETUP   61
      lenscr = iwdLen+iifLen+4                                                  SETUP   62
                                                                                SETUP   63
C     irv= messageboxi( NULL, 'About to open file: '//scrfnm//char(0),          SETUP   64
C    & 		'SETUP Function'//char(0), MB_OK)                                      SETUP   65
                                                                                SETUP   66
      OPEN( ICTRL , FILE=scrfnm, FORM='UNFORMATTED',                            SETUP   67
     &      ERR=10,IOSTAT=io, STATUS='old' )                                    SETUP   68
      IF(io .ne. 0)  GOTO 10                                                    SETUP   69
      scrfnm = wffnm(1:IwfLen)                                                  SETUP   70
      lenscr = iwfLen                                                           SETUP   71
                                                                                SETUP   72
C     irv= messageboxi( NULL, 'About to open file: '//scrfnm//char(0),          SETUP   73
C    & 		'SETUP Function'//char(0), MB_OK)                                      SETUP   74
                                                                                SETUP   75
      OPEN( IWEATH, FILE=scrfnm, FORM='UNFORMATTED',ERR=10,IOSTAT=io,           SETUP   76
     &      BLOCKSIZE=32768, STATUS='old',recordtype='variable',                SETUP   77
     &      recl=6200,ACTION='READ',SHARE='DENYNONE')                           SETUP   78
      IF(io .ne. 0)  GOTO 10                                                    SETUP   79
      scrfnm = wdfnm(1:iwdLen)//iffnm(1:iifLen)//'.DSN'                         SETUP   80
      lenscr = iwdLen+iifLen+4                                                  SETUP   81
                                                                                SETUP   82
C     irv= messageboxi( NULL, 'About to open file: '//scrfnm//char(0),          SETUP   83
C    & 		'SETUP Function'//char(0), MB_OK)                                      SETUP   84
                                                                                SETUP   85
      OPEN( IDSNFL, FILE=scrfnm, FORM='UNFORMATTED',                            SETUP   86
     $      ERR=10,IOSTAT=io, STATUS='UNKNOWN')                                 SETUP   87
      IF(io .ne. 0)  GOTO 10                                                    SETUP   88
      scrfnm = wdfnm(1:iwdLen)//iffnm(1:iifLen)//'.LDO'                         SETUP   89
      lenscr = iwdLen+iifLen+4                                                  SETUP   90
                                                                                SETUP   91
C     irv= messageboxi( NULL, 'About to open file: '//scrfnm//char(0),          SETUP   92
C    & 		'SETUP Function'//char(0), MB_OK)                                      SETUP   93
                                                                                SETUP   94
      OPEN( ILDSO , FORM='UNFORMATTED',ERR=10,IOSTAT=io,                        SETUP   95
     1      BLOCKSIZE=262144, STATUS='SCRATCH' )                                SETUP   96
      IF(io .ne. 0)  GOTO 10                                                    SETUP   97
      scrfnm = wdfnm(1:iwdLen)//iffnm(1:iifLen)//'.SYO'                         SETUP   98
      lenscr = iwdLen+iifLen+4                                                  SETUP   99
                                                                                SETUP  100
C     irv= messageboxi( NULL, 'About to open file: '//scrfnm//char(0),          SETUP  101
C    & 		'SETUP Function'//char(0), MB_OK)                                      SETUP  102
                                                                                SETUP  103
      OPEN( ISYSO , FORM='UNFORMATTED',ERR=10,IOSTAT=io,                        SETUP  104
     1      BLOCKSIZE=131072, STATUS='SCRATCH' )                                SETUP  105
      IF(io .ne. 0)  GOTO 10                                                    SETUP  106
      scrfnm = wdfnm(1:iwdLen)//iffnm(1:iifLen)//'.PLO'                         SETUP  107
      lenscr = iwdLen+iifLen+4                                                  SETUP  108
                                                                                SETUP  109
C     irv= messageboxi( NULL, 'About to open file: '//scrfnm//char(0),          SETUP  110
C    & 		'SETUP Function'//char(0), MB_OK)                                      SETUP  111
                                                                                SETUP  112
      OPEN( IPLTO , FILE=scrfnm, FORM='UNFORMATTED',ERR=10,IOSTAT=io,           SETUP  113
     1      BLOCKSIZE=32768, STATUS='UNKNOWN' )                                 SETUP  114
      IF(io .ne. 0)  GOTO 10                                                    SETUP  115
      scrfnm = fdfnm(1:ifdLen)//'HDRFIL.BIN'                                    SETUP  116
      lenscr = ifdLen+10                                                        SETUP  117
                                                                                SETUP  118
C     irv= messageboxi( NULL, 'About to open file: '//scrfnm//char(0),          SETUP  119
C    & 		'SETUP Function'//char(0), MB_OK)                                      SETUP  120
                                                                                SETUP  121
      OPEN( IHDFIL, FILE=scrfnm, FORM='UNFORMATTED', ERR=10,IOSTAT=io,          SETUP  122
     &      BLOCKSIZE=32768,RECL=6000, STATUS='old',                            SETUP  123
     &      ACTION='READ',SHARE='DENYNONE')                                     SETUP  124
      IF(io .ne. 0)  GOTO 10                                                    SETUP  125
c                                                                               SETUP  126
      REWIND IOUTPT                                                             SETUP  127
      REWIND IDSNFL                                                             SETUP  128
      REWIND ILDSO                                                              SETUP  129
      REWIND ISYSO                                                              SETUP  130
      REWIND IPLTO                                                              SETUP  131
      RETURN                                                                    SETUP  132
   10 WRITE (IOUTPT,9010) scrfnm(1:lenscr)                                      SETUP  133
 9010 FORMAT(' ERROR: Cannot open a required file: '/1X,A/                      SETUP  134
     $  ' It does not exist or is in use. Correct this and retry.')             SETUP  135
   11 Call MessageBox( NULL, 'ERROR: Cannot open a required file '              SETUP  136
     $  //char(10)//char(13)//char(10)//char(13)//scrfnm(1:lenscr)              SETUP  137
     $  //char(10)//char(13)//char(10)//char(13)//                              SETUP  138
     $  'It does not exist or is in use.  Please correct this '//               SETUP  139
     $  'problem and retry'//char(0),                                           SETUP  140
     $  'DOE-2.2 Simulation Server SETUP'//char(0),                             SETUP  141
     $  MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                    SETUP  142
      IwinReturn = 1                                                            SETUP  143
                                                                                SETUP  144
      RETURN                                                                    SETUP  145
      END                                                                       SETUP  146
#endif                                                                       /* SETUP  147 */ 
      SUBROUTINE ZeroBlock(Istart, Iend)                                        ZeroBk   2
c                                                                               ZeroBk   3
c              Initializes a block of variables to zero                         ZeroBk   4
c                                                                               ZeroBk   5
c              Istart  The first variable in the block                          ZeroBk   6
c              Iend    The last  variable in the block                          ZeroBk   7
c                                                                               ZeroBk   8
c              DEVELOPED BY                                                     ZeroBk   9
c                            S. D. Gates                                        ZeroBk  10
c                            J. J. Hirsch                                       ZeroBk  11
c                            James J. Hirsch & Associates                       ZeroBk  12
c                            Camarillo, California                              ZeroBk  13
c                                                                               ZeroBk  14
cDEC$ NOOPTIMIZE                                                                -048   308
      DIMENSION Istart(1)                                                       ZeroBk  15
      INTEGER Flag                                                              ZeroBk  16
      DATA    Flag /-99999/                                                     ZeroBk  17
c                                                                               ZeroBk  18
      Iend = Flag                                                               ZeroBk  19
      I = 1                                                                     ZeroBk  20
      DO                                                                        ZeroBk  21
        IF (Istart(I) .NE. Flag)  THEN                                          ZeroBk  22
          Istart(I) = 0                                                         ZeroBk  23
          I = I + 1                                                             ZeroBk  24
        ELSE                                                                    ZeroBk  25
          Istart(I) = 0                                                         ZeroBk  26
          Iend      = 0                                                         ZeroBk  27
          EXIT                                                                  ZeroBk  28
        ENDIF                                                                   ZeroBk  29
      ENDDO                                                                     ZeroBk  30
c                                                                               ZeroBk  31
      RETURN                                                                    ZeroBk  32
      END                                                                       ZeroBk  33
      SUBROUTINE  REWUNL ( I )                                                  REQFLS   2
#ifndef _DLL                                                                 /* -048   309 */ 
      REWIND  I                                                                 REQFLS   3
#endif                                                                       /* -048   310 */ 
      RETURN                                                                    REQFLS   4
      END                                                                       REQFLS   5
