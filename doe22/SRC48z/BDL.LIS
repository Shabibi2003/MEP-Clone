#ifdef _DLL                                                                  /* -048     1 */ 
      SUBROUTINE DOEBDL(ICALL)                                                  -048     2
#else                                                                        /* -048     3 */ 
      PROGRAM DOEBDL                                                            -048     4
#endif                                                                       /* -048     5 */ 
C                                                                               DOEBDL   3
C                            CONTROL OVERLAY FOR BDL                            DOEBDL   4
C                                                                               DOEBDL   5
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               DOEBDL   7
C                                                                               DOEBDL  10
      USE ERR_MOD                                                               -048     6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
        CHARACTER*40    CLOCK_CHAR                                              DOEBDL  12
          EQUIVALENCE ( CLOCK_CHAR, CLOCK )                                     DOEBDL  13
      COMMON /CLOCK / CLOCK(10)                                                 /CLOCK/  2
      INTEGER ICLOCK8                                                           PC       1
      EQUIVALENCE (ICLOCK8,CLOCK(8))                                            PC       2
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FFLAGS/ IFFLAG, IFLABL(4), IFLEVL, NUMOVL, NFERR                 /FFLAGS/ 2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      CHARACTER KCTAB1(4)                                                       PC       3
          equivalence (KCTAB1(1), KCTAB)                                        DOEBDL  20
      COMMON /ITITLE/ ITITLE(10,5),ITITLT(10,5)                                 FIX11    1
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON /IUNITS/ VKONV(300),DUMLOG(4),JUNITS(4,300,2),NUNITS,KUNITS        UNITS1   1
      INTEGER DUMLOG                                                            SUBTY1   1
      DIMENSION IUNITS(4,300)                                                   UNITS1   2
      EQUIVALENCE (IUNITS(1,1),JUNITS(1,1,1))                                   /IUNITS/ 4
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON  /KEYP/   KEYP                                                     /KEYP/   2
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
      common  /MACIN0/ macin0                                                   /MACIN0/ 2
      common  /MINC/   NINC, incfil(9), incnum(9), incsil(9), isilnt            /MINC/   2
     1               , incprL                                                   /MINC/   3
     2               , incprf, curfnm, incfnm(9)                                /MINC/   4
      character*256  incprf, curfnm, incfnm                                     -042L5b 21
      COMMON  /NSTDR1/ NSTDR1                                                   /NSTDR1/ 2
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      COMMON  /PPBDL/   IPPFLG                                                  /PPBDL/  2
C              ---                                                              DOEBDL  34
      DIMENSION INPDAT(3,5),ISIM(2,100),IKREP(100),NSTDRO(5)                    DOEBDL  35
      character*256  INPDATf(5), INCOPYf , scrfnm                               -042L5b 23
      COMMON /DFT_STR/ numDFT,idftStr(3,1024)                                   -042L5b 19
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
      COMMON /KEYRD/ KEYREAD, SETUPF, fdfnm, wdfnm, iffnm, lffnm,               /KEYRD/  2
     $               kffnm, str2,                                               /KEYRD/  3
     $               ifdlength, iwdlength, iiflength, ilflength                 /KEYRD/  4
      CHARACTER*256 fdfnm, wdfnm, iffnm, lffnm, kffnm, str2                     /KEYRD/  5
      INTEGER SETUPF                                                            /KEYRD/  6
      COMMON  /IRUNPD/  NRUNPD,IRUNPD(6,15)                                     ALPHA    1
      DIMENSION  KEYUN(16,2),ISYMUN(16,2),IVALUN(2),IDFTUN(2),IVTUN(2)          EXPR2    4
      EQUIVALENCE  (IVALUN(1),METIN)                                            DOEBDL  38
      DIMENSION  ICFUN(4)                                                       DOEBDL  39
      INTEGER ZERCMD(4,13), ZERCOD(4,8), OVRLN(5), IPPOPT(4,5)                  DOEBDL  40
      INTEGER*4 ICDM,ICDD,ICDY,ITDH,ITDM,ITDS,ITDHS                             -048     7
      INTEGER iblnk                                                             PC22     4
      DATA    iblnk/1h /                                                        PC22     5
      DATA INPDAT/15*0/                                                         DOEBDL  41
      DATA IABORT/0/                                                            DOEBDL  42
      DATA  ISIM/200*0/                                                         DOEBDL  43
      DATA  NOPT/ 0 /                                                           DOEBDL  44
      DATA  NCOM/ 0 /                                                           DOEBDL  45
      DATA  I0  / 0 /                                                           DOEBDL  46
      DATA NSIM/0/                                                              DOEBDL  47
      DATA NSTDRO  / 41, 19, 13, 11, 7 /                                        BLIND1   1
      DATA      ZERCMD /                                                        DOEBDL  49
     1          4HINPU, 4HT   , 4H    , 4H    ,                                 DOEBDL  50
     2          4HPARA, 4HMETR, 4HIC-I, 4HNPUT,                                 DOEBDL  51
     3          4HPAR-, 4HINPU, 4HT   , 4H    ,                                 DOEBDL  52
     4          4HCOMP, 4HUTE , 4H    , 4H    ,                                 DOEBDL  53
     5          4HSAVE, 4H-FIL, 4HES  , 4H    ,                                 DOEBDL  54
     6          4HSTOP, 4H    , 4H    , 4H    ,                                 DOEBDL  55
     7          4HTITL, 4HE   , 4H    , 4H    ,                                 DOEBDL  56
     8          4HABOR, 4HT   , 4H    , 4H    ,                                 DOEBDL  57
     9          4HLIST, 4H    , 4H    , 4H    ,                                 DOEBDL  58
     1          4H*ZZZ, 4H    , 4H    , 4H    ,                                 ALPHA    2
     2          4HLIBR, 4HARY-, 4HINPU, 4HT   ,                                 DOEBDL  60
     3          4HDIAG, 4HNOST, 4HIC  , 4H                                      DOEBDL  61
     4        , 4HPOST, 4H-PRO, 4HCESS, 4HOR                                    DOEBDL  62
     5        /                                                                 DOEBDL  63
      DATA      ZERCOD /                                                        DOEBDL  64
     1          4HLOAD, 4HS   , 4H    , 4H    ,                                 METR1    1
     2          4HBDL , 4H    , 4H    , 4H    ,                                 METR1    2
     3          4HPLAN, 4HT   , 4H    , 4H    ,                                 METR1    3
     4          4HECON, 4HOMIC, 4HS   , 4H    ,                                 METR1    4
     5          4HSOLA, 4HR   , 4H    , 4H    ,                                 METR1    5
     6          4HDETA, 4HILED, 4H-LOA, 4HDS  ,                                 METR1    6
     7          4HFOR , 4H    , 4H    , 4H    ,                                 METR1    7
     8          4HLOAD, 4HS   , 4H    , 4H    /                                 METR1    8
      DATA      IPPOPT/ 4HPART, 4HIAL , 4H    , 4H                              DOEBDL  73
     1                , 4HALL-, 4HVERI, 4HFICA, 4HTION                          DOEBDL  74
     2                , 4HALL-, 4HSUMM, 4HARY , 4H                              DOEBDL  75
     3                , 4HALL , 4H    , 4H    , 4H                              DOEBDL  76
     4                , 4HNONE, 4H    , 4H    , 4H     /                        DOEBDL  77
      DATA      OVRLN/3HBDL,3HBDL,3HBDL,3HBDL,3HBDL/                            BIGNA2   1
      DATA      ISAVFL/1/                                                       DOEBDL  79
      DATA      NFWRT/0/                                                        DOEBDL  80
      DATA NOECHS/0/                                                            DOEBDL  81
      DATA      ICOMP /0/                                                       DOEBDL  82
C              DATA IN TABLES FOR UNITS KEYWORDS                                DOEBDL  83
      DATA KEYUN / 4HINPU,4HT-UN,4HITS ,4H    ,4H    ,4H    ,                   DOEBDL  84
     1             2,2,1,100,0,1,0,0,0,0,                                       KEYSIZ   3
     2             4HOUTP,4HUT-U,4HNITS,4H    ,4H    ,4H    ,                   DOEBDL  86
     3             2,2,1,100,0,2,0,0,0,0 /                                      KEYSIZ   4
      DATA ISYMUN / 4HENGL,4HISH ,4H    ,4H    ,4H    ,4H    ,4H    ,           SYMSIZ   3
     1              4H    ,100,0,0,0,0,0,0,0,                                   SYMSIZ   4
     2              4HMETR,4HIC  ,4H    ,4H    ,4H    ,4H    ,4H    ,           SYMSIZ   5
     3              4H    ,100,0,0,1,0,0,0,0 /                                  SYMSIZ   6
      DATA IDFTUN / 1,1 /                                                       DOEBDL  90
      DATA  ICFUN/4HFUNC, 4HTION, 4H    , 4H    /                               DOEBDL  91
      Character PathName*256                                                    -048n    1
                                                                                -048n    2
#ifdef _DLL                                                                  /* -048     8 */ 
      IREAD1 = 0                                                                -048     9
      IF( ICALL .gt. 0 )  THEN                                                  -048    10
CCCCCCC  CALL FILLN( 0, IA, IADIM )                                             -048    11
         GOTO 209                                                               -048    12
      ENDIF                                                                     -048    13
      IF( ICALL .lt. 0 )  GOTO 800                                              -048    14
C          initialize zero level variables                                      -048    15
      NCOM   = 0                                                                -048    16
      NOPT   = 0                                                                -048    17
      IEOF   = 0                                                                -048    18
      IFATAL = 0                                                                -048    19
      IABORT = 0                                                                -048    20
      KRDNUM = 0                                                                -048    21
      Ibkspf = 0                                                                -048    22
      ITERM  = 0                                                                -048    23
      KARD(81) = iblnk                                                          -048    24
      KARD(82) = iblnk                                                          -048    25
      CALL FILLN(iblnk,ITITLE,5*10)                                             -048    26
      KARDX  = 81                                                               -048    27
      KARDI1 = 1                                                                -048    28
      KARDI2 = 81                                                               -048    29
      NRUNPD = 0                                                                -048    30
      CALL FILLN(0,ISIM,2*100)                                                  -048    31
      NSIM   = 0                                                                -048    32
      METKVT = 1                                                                -048    33
      IADIM  = 75 000 000                                                       -048a    9
#endif                                                                       /* -048    35 */ 
      HOLL(14) = IBLNK                                                          PC22     6
C                                                                               DOEBDL  92
c                                                                               DOEBDL  93
c--- initialize version                                                         DOEBDL  94
c                                                                               DOEBDL  95
      CLOCK(1) = TYPLS( 4h2.1E )                                                DOEBDL  96
      call  VERSION(CLOCK(10))                                                  -048    36
c                                                                               DOEBDL  98
c--- initialize filenames                                                       DOEBDL  99
c                                                                               DOEBDL 100
#ifndef _DLL                                                                 /* -048    37 */ 
c              check if file name or path modified via environment              -048n    3
      curfnm = PathName('INPUT2.TMP')                                           -048n    4
#endif                                                                       /* -048    39 */ 
      INCOPYf    = '                                '                           DOEBDL 102
      do  10010  i = 1 , 5                                                      DOEBDL 103
          INPDATf(i) = '????'                                                   DOEBDL 104
10010 continue                                                                  DOEBDL 105
c                                                                               DOEBDL 106
c--- initialize /MACIN0/ , macros                                               DOEBDL 107
c                                                                               DOEBDL 108
      macin0 = 0                                                                DOEBDL 109
c                                                                               DOEBDL 110
c---- macro routines need CKAA to be initialized                                DOEBDL 111
c                                                                               DOEBDL 112
       call  INIT0( IA, 4096 )                                                  DOEBDL 113
c                                                                               DOEBDL 114
c---- initialize macro data structure                                           DOEBDL 115
c                                                                               DOEBDL 116
       call  MAC0                                                               DOEBDL 117
c                                                                               DOEBDL 118
      NSTDR1 = 1                                                                DOEBDL 119
      MSYMTB = 2                                                                DOEBDL 120
      NSYMTB = 2                                                                DOEBDL 121
c                                                                               DOEBDL 122
c--- initialize KCTAB in /HOLL/                                                 DOEBDL 123
c                                                                               DOEBDL 124
      KCTAB     = HOLL(14)                                                      DOEBDL 125
      KCTAB1(1) = CHAR(9)                                                       PC       5
c                                                                               DOEBDL 127
C              SET LIBRARY FILES                                                DOEBDL 128
      IUSLIB = 4                                                                DOEBDL 129
      LIBFIL = 10                                                               DOEBDL 130
      IW4FIL = 12                                                               DOEBDL 131
C              REWIND KEYWORD FILE                                              DOEBDL 132
C>>>>>                                                                          DOEBDL 133
  16  format(                                                                   BANNER   2
     $' This JJHirsch DOE-2.2-',a,' was released in March 2017.'/)              -047k    1
#ifndef _DLL                                                                 /* -048    40 */ 
      OPEN ( INPUT, file=curfnm, ACTION='READ', STATUS='OLD' )                  -048n    5
                                                                                -048n    6
      OPEN( KEYFIL, FILE=PathName('BDLKEY.BIN'), FORM='UNFORMATTED',            -048n    7
     1              ACTION='READ', RECORDTYPE='variable', STATUS='OLD' )        -048n    8
                                                                                -048n    9
      OPEN( LIBFIL, FILE=PathName('BDLLIB.DAT'), FORM='FORMATTED',              -048n   10
     1                                           status='unknown' )             -048n   11
                                                                                -048n   12
      OPEN( IUSLIB, FILE=PathName('USRLIB.DAT'), status='unknown' )             -048n   13
                                                                                -048n   14
      OPEN( 15    , file=PathName('DOEBDL.LOG'), FORM='FORMATTED',              -048n   15
     1              carriagecontrol='FORTRAN' , STATUS='UNKNOWN')               -048n   16
                                                                                -048n   17
      OPEN( IOUTPT, FILE=PathName('DOEBDL.OUT'), recl=1024,                     -048n   18
     1                  carriagecontrol='FORTRAN', STATUS='UNKNOWN')            -048n   19
                                                                                -048n   20
      OPEN( ISTNDF, FILE=PathName('STDFIL.TMP'), FORM='UNFORMATTED',            -048n   21
     1                                           STATUS='UNKNOWN' )             -048n   22
                                                                                -048n   23
      OPEN( ICTRL , FILE=PathName('CTRL.TMP'), FORM='UNFORMATTED',              -048n   24
     1                                         STATUS='UNKNOWN' )               -048n   25
#endif                                                                       /* -048    45 */ 
C>>>>>                                                                          PC      24
      write(15, 16) CLOCK(10)                                                   PC      25
#ifndef _DLL                                                                 /* -048    46 */ 
      write(  *  , 16) CLOCK(10)                                                PC      26
#endif                                                                       /* -048    47 */ 
      write( 15,15 )  IADIM                                                     PC      31
#ifndef _DLL                                                                 /* -048    48 */ 
      write(   *  , 15) IADIM                                                   PC      32
#endif                                                                       /* -048    49 */ 
  15  FORMAT( ' Start DOEBDL : Storage capacity = ',i9 )                        -048a   10
      REWIND KEYFIL                                                             DOEBDL 155
      STTIM = CPUTIM(0)                                                         PC      34
C              READS IN THE UNITS AND CONVERSION ARRAY.                         DOEBDL 156
      READ(KEYFIL) (VKONV(I),((JUNITS(J,I,K),J=1,4),K=1,2),I=1,300)             UNITS1   3
      KEYP   = 1                                                                DOEBDL 158
C                                                                               DOEBDL 159
C              WRITES UNITS-TABLE AS A FIRST RECORD OF THE CONTROL FILE.        DOEBDL 160
      REWIND ICTRL                                                              DOEBDL 161
      WRITE (ICTRL) VKONV,JUNITS                                                DOEBDL 162
C              REWIND STANDARD FILE                                             DOEBDL 163
      REWIND ISTNDF                                                             DOEBDL 164
      CALL FILLN( 0, IA, IADIM )                                                DOEBDL 165
C                                                                               DOEBDL 166
C              PICK UP TIME AND DATE                                            DOEBDL 167
      CALL GETDAT ( ICDY,ICDM,ICDD )                                            PC      35
      CALL GETTIM ( ITDH,ITDM,ITDS,ITDHS )                                      PC      36
      WRITE (CLOCK_CHAR(:24),2001)ICDM,ICDD,ICDY,ITDH,ITDM,ITDS                 PC      37
 2001 FORMAT (I2,'/',I2.2,'/',I4,4X,I2,':',I2.2,':',I2.2)                       PC22    13
C              SET INPUT FILE TO PRIMARY (*INPUT*) FILE                         DOEBDL 173
      INFIL  = INPUT                                                            DOEBDL 174
      WRITE(IOUTPT,1)                                                           DOEBDL 175
    1 FORMAT('1' //                                                             -047k    3
     &12x,                                                                      -047k    4
     &' ***     ***     *   *   ***   ****     ***      ***   *   *'/           -047k    5
     &12x,                                                                      -047k    6
     &'  *       *      *   *    *    *   *   *       *       *   *'/           -047k    7
     &12x,                                                                      -047k    8
     &'  *       *      *****    *    ****     ***    *       *****'/           -047k    9
     &11x,                                                                      -047k   10
     &'*  *    *  *      *   *    *    *  *        *   *       *   *'/          -047k   11
     &12x,                                                                      -047k   12
     &'**      **       *   *   ***   *   *    ***      ***   *   *'//          -047k   13
     &12x,'       ****     ***    *****          ***       *** '/               -047k   14
     &12x,'       *   *   *   *   *             *   *     *   *'/               -047k   15
     &12x,'       *   *   *   *   *****   ***      *         * '/               -047k   16
     &12x,'       *   *   *   *   *              **        **  '/               -047k   17
     &12x,'       ****     ***    *****         *****  *  *****'///             -047k   18
     &12x,                                                                      -047k   19
     &'B U I L D I N G  E N E R G Y  A N A L Y S I S  P R O G R A M'////        -047k   20
     &12x,'                        DEVELOPED BY'//                              -047k   21
     &12x,'E. O. LAWRENCE BERKELEY LABORATORY/UNIVERSITY OF CALIFORNIA'/        -047k   22
     &12x,'                            AND'/                                    -047k   23
     &12x,'        JAMES J. HIRSCH & ASSOCIATES, CAMARILLO, CA'///              -047k   24
     &12x,'                  WITH MAJOR SUPPORT FROM'//                         -047k   25
     &12x,'             UNITED STATES DEPARTMENT OF ENERGY'/                    -047k   26
     &12x,'             ELECTRIC POWER RESEARCH INSTITUTE'/                     -047k   27
     &12x,'           CALIFORNIA PUBLIC UTILITIES COMMISSION'/                  -047k   28
     &12x,'             SOUTHERN CALIFORNIA EDISON COMPANY'/////                -047k   29
     &' *************************   L E G A L   N O T I C E   ********',        -047k   30
     &'*******************'/                                                    -047k   31
     &' *                                                             ',        -047k   32
     &'                  *'/                                                    -047k   33
     &' *    THIS PROGRAM WAS PREPARED AS AN ACCOUNT OF WORK SPONSORED',        -047k   34
     &' BY THE UNITED    *'/                                                    -047k   35
     &' *    STATES GOVERNMENT AND OTHERS. NEITHER THE UNITED STATES N',        -047k   36
     &'OR THE DEPART-    *'/                                                    -047k   37
     &' *    MENT OF  ENERGY,  NOR JAMES J. HIRSCH,  NOR OTHER SPONSOR',        -047k   38
     &'S,  NOR ANY OF    *'/                                                    -047k   39
     &' *    THEIR EMPLOYEES, NOR ANY OF THEIR CONTRACTORS, SUBCONTRAC',        -047k   40
     &'TORS, OR THEIR    *'/                                                    -047k   41
     &' *    EMPLOYEES MAKES ANY WARRANTY,  EXPRESS OR IMPLIED, OR ASS',        -047k   42
     &'UMES ANY LEGAL    *'/                                                    -047k   43
     &' *    LIABILITY OR  RESPONSIBILITY FOR  THE ACCURACY, COMPLETEN',        -047k   44
     &'ESS OR USEFUL-    *'/                                                    -047k   45
     &' *    NESS OF ANY DATA OR RESULTS  PRESENTED, APPARATUS, INFORM',        -047k   46
     &'ATION, PRODUCT    *'/                                                    -047k   47
     &' *    OR PROCESS  DISCLOSED,  OR REPRESENTS  THAT ITS USE  WOUL',        -047k   48
     &'D NOT INFRINGE    *'/                                                    -047k   49
     &' *    PRIVATELY OWNED RIGHTS.                                  ',        -047k   50
     &'                  *'/                                                    -047k   51
     &' *                                                             ',        -047k   52
     &'                  *'/                                                    -047k   53
     &' **************************************************************',        -047k   54
     &'*******************'///                                                  -047k   55
     &'             JJHirsch DOE-2 Version: DOE-2.2-48z',                       -047k   56
     &' (released March 2017)  '///                                             -047k   57
     &'       DOE-2.2 Copyright (c) James J. Hirsch,1996-2017. All Rig',        -047k   58
     &'hts Reserved.'/                                                          -047k   59
     &'     Portions of DOE-2.2 Copyright (c) Regents of the Universit',        -047k   60
     &'y of California'/                                                        -047k   61
     &'                  (pending USDOE approval).  All Rights Reserve',        -047k   62
     &'d.'/                                                                     -047k   63
     &'       Portions of DOE-2.2 Copyright (c) Autodesk, Inc. All Rig',        -047k   64
     &'hts Reserved.'/                                                          -047k   65
     &'     See the full DOE-2.2 license agreement for complete copyri',        -047k   66
     &'ght information.'///// '1')                                              -047k   67
C              IF END-OF-FILE HIT                                               BANNER  78
      NPRUN = 1                                                                 DOEBDL 221
      LIBRUN = 0                                                                -048    50
#ifdef _DLL                                                                  /* -048    51 */ 
      IF( ICALL .eq. 0 )  RETURN                                                -048    52
#endif                                                                       /* -048    53 */ 
209   INFIL = INPUT                                                             DOEBDL 222
      IF( NPRUN .EQ. 2 )  CALL  KRDRD                                           DOEBDL 223
      NPRUN = 1                                                                 DOEBDL 224
210   IF( IEOF .NE. 0 )  GOTO  800                                              DOEBDL 225
      NCOM1 = NCOM                                                              DOEBDL 226
C              GET CHAR STRING                                                  DOEBDL 227
      CALL GETCS                                                                DOEBDL 228
C              IF EOF HIT                                                       DOEBDL 229
      IF (IEOF.NE.0) GO TO 800                                                  DOEBDL 230
C              IF .. NOT HIT                                                    DOEBDL 231
      IF (ITERM .EQ. 0)  GOTO 220                                               DOEBDL 232
      CALL MSG (78)                                                             DOEBDL 233
C              TRY AGAIN                                                        DOEBDL 234
      GOTO 210                                                                  DOEBDL 235
C--- CK IF COMMAND = FUNCTION                                                   DOEBDL 236
#ifdef _DLL                                                                  /* -048    54 */ 
  220           if ( KOMPAR( ISYMU, ICFUN, 4 ) .eq. 0 ) then                    -048    55
C                              IF(IREAD1 .eq. 1) THEN                           -048    56
C                                CALL BKSPAC                                    -048    57
C                                RETURN                                         -048    58
C                              ELSE                                             -048    59
                     goto  228                                                  -048    60
C                              ENDIF                                            -048    61
                 endif                                                          -048    62
#else                                                                        /* -048    63 */ 
220           if ( KOMPAR( ISYMU, ICFUN, 4 ) .eq. 0 )     goto  228             DOEBDL 237
#endif                                                                       /* -048    64 */ 
          NCOM = 140                                                            DOEBDL 238
          IF( (NCOM1 .EQ. 1) .OR. (NCOM1 .EQ. 2) .OR. (NCOM1 .EQ. 3).OR.        DOEBDL 239
     .        (NCOM1 .EQ. 11) )  GOTO  227                                      DOEBDL 240
C......................... ERR BAD POSITION OF FUNCTION COMMAND                 DOEBDL 241
               CALL  MSG2( 80 )                                                 FIX10    1
227       KEYPOS = ( NOPT - 1 ) * 4  +  3                                       DOEBDL 243
#ifdef _DLL                                                                  /* -048    65 */ 
          GOTO  560                                                             -048    66
#else                                                                        /* -048    67 */ 
          GOTO  537                                                             DOEBDL 244
#endif                                                                       /* -048    68 */ 
228   IF( INFIL .EQ. INCOPY )  GOTO  209                                        DOEBDL 245
C                                                                               DOEBDL 246
C              LOOK FOR WORD IN COMMAND TABLE                                   DOEBDL 247
      DO  230  NCOM = 1 , 13                                                    DOEBDL 248
                  if ( KOMPAR( ISYMU, ZERCMD(1,NCOM), 4 ).ne.0) goto 240        DOEBDL 249
  230 CONTINUE                                                                  DOEBDL 250
C              DID NOT FIND IT SO ERROR                                         DOEBDL 251
      CALL MSG (3)                                                              DOEBDL 252
239    CALL  SKPEOC                                                             DOEBDL 253
C              GO LOOK AGAIN                                                    DOEBDL 254
      GOTO 210                                                                  DOEBDL 255
C              PROCESS COMMAND                                                  DOEBDL 256
C--- IF PREVIOUS COMMAND WROTE ON STDFIL, PUT TERMINATOR RECORD                 DOEBDL 257
C---     ALSO INCREMENT NSTDR1                                                  DOEBDL 258
240   IF( (NCOM1 .EQ. 1) .OR. (NCOM1 .EQ. 2) .OR. (NCOM1 .EQ. 3) .OR.           DOEBDL 259
     .    (NCOM1 .EQ. 11) .OR. (NCOM1 .EQ. 140) ) GOTO  242                     DOEBDL 260
           GOTO  243                                                            DOEBDL 261
242   WRITE(ISTNDF) I0, I0                                                      DOEBDL 262
      NSTDR1 = NSTDR1 + 1                                                       DOEBDL 263
243   CONTINUE                                                                  DOEBDL 264
      GOTO  ( 245, 245, 245, 245, 700, 800, 810, 820, 830, 840, 245,            DOEBDL 265
     1        830, 1300 ),                                                      DOEBDL 266
     2       NCOM                                                               DOEBDL 267
C                                                                               DOEBDL 268
C              GET CODE-WORD FOR INPUT AND COMPUTE COMMANDS                     DOEBDL 269
C                                                                               DOEBDL 270
C              GET CODEWORD                                                     DOEBDL 271
  245 CALL GETCS                                                                DOEBDL 272
C              IF FOUND TERMINATOR BACK SPACE TO DEFAULT UNITS                  BIGNA2   2
      IF (ITERM .EQ. 0)  GOTO 250                                               DOEBDL 274
      CALL BKSPAC                                                               BIGNA2   3
      NOPT = 1                                                                  BIGNA2   4
      GOTO 270                                                                  BIGNA2   5
C              LOOK UP WORD IN TABLE                                            DOEBDL 278
  250 IB     = 1                                                                DOEBDL 279
      IE     = 7                                                                DOEBDL 280
      LIBRUN = 0                                                                DOEBDL 281
C              IF LIBRARY-INPUT                                                 DOEBDL 282
      IF (NCOM .NE. 11)  GO TO 255                                              DOEBDL 283
      IB     = 7                                                                DOEBDL 284
      IE     = 8                                                                DOEBDL 285
      LIBRUN = 1                                                                DOEBDL 286
  255 DO 260 NOPT=IB,IE                                                         DOEBDL 287
                  if ( KOMPAR( ISYMU, ZERCOD(1,NOPT), 4 ).ne.0) goto 270        DOEBDL 288
  260 CONTINUE                                                                  DOEBDL 289
      NOPT = 0                                                                  DOEBDL 290
C              NOT FOUND SO ERROR                                               DOEBDL 291
      CALL MSG (22)                                                             DOEBDL 292
C              TRY FOR ANOTHER WORD                                             DOEBDL 293
      GOTO 245                                                                  DOEBDL 294
C              IF WORD WAS *FOR* SKIP TO NEXT                                   DOEBDL 295
  270 IF (NOPT .EQ. 7)  GOTO 245                                                DOEBDL 296
C                IF COMPUTE JUMP                                                DOEBDL 297
      IF (NOPT .LE. 4)  NOPT = 1                                                BIGNA2   6
      IF (NCOM .EQ. 4)  GO TO 600                                               DOEBDL 298
C              FOR INPUT COMMAND, MOVE IN UNITS KEYWORDS                        DOEBDL 299
      CALL INIDAT(0,ISYMUN(1,1),KEYUN(1,1),2,IVALUN(1),IVTUN(1))                EXPR2    5
      CALL SCAN1(0,ISYMUN(1,1),KEYUN(1,1),2,IVALUN(1),IVTUN(1))                 EXPR2    6
      CALL LSDFIL(0,ISYMUN(1,1),KEYUN(1,1),2,IVALUN(1),IDFTUN(1),               4XAA     3
     1            3,ISYMUN(1,1),0,2)                                            FIX7     4
      CALL SYMFIL(ISYMUN(1,1),KEYUN(1,1),2,IVALUN(1))                           DOEBDL 304
      LDSTYP = 1                                                                DOEBDL 305
      IF(METIN.NE.METOUT.AND.LIBRUN.EQ.1)CALL MSG(99)                           DOEBDL 306
C              IF DETAILED LOADS                                                DOEBDL 307
      IF (NOPT .NE. 6)  GO TO 280                                               DOEBDL 308
      LDSTYP = 2                                                                DOEBDL 309
      NOPT   = 1                                                                DOEBDL 310
C              IF LIBRARY-INPUT LOADS                                           DOEBDL 311
  280 IF ((NCOM .NE. 11) .OR. (NOPT .NE. 8))  GO TO 290                         DOEBDL 312
      LDSTYP = 3                                                                DOEBDL 313
      NOPT   = 1                                                                DOEBDL 314
  290 CONTINUE                                                                  DOEBDL 315
C                                                                               DOEBDL 316
C              PROCESS THE INPUT COMMAND                                        DOEBDL 317
C                                                                               DOEBDL 318
C              RESTORE NOECHO                                                   DOEBDL 319
C              INCR NO. OF INPUTS FOR THIS PROG IF NOT A LIB RUN                DOEBDL 320
      IF (LIBRUN .EQ. 0)  INPDAT(3,NOPT) = INPDAT(3,NOPT) + 1                   DOEBDL 321
c--- put name and num in /CLOCK/                                                DOEBDL 322
      CLOCK(7) = TYPLS( OVRLN(NOPT)  )                                          DOEBDL 323
      CLOCK(8) = TYPLS( INPDAT(3,NOPT) )                                        DOEBDL 324
c--- GET STARTING STATS                                                         DOEBDL 325
       CALL  DAYBDL( 0, CLOCK(7) )                                              DOEBDL 326
C                                                                               DOEBDL 327
C              SWITCH LITTERALS-UNITS SYMBOLS IF NECESSARY                      DOEBDL 328
      IF (METIN.EQ.METKVT)  GOTO 505                                            DOEBDL 329
      DO 506 I=1,300                                                            UNITS1   4
      DO 506 J=1,4                                                              DOEBDL 331
      K      = JUNITS(J,I,1)                                                    DOEBDL 332
      JUNITS(J,I,1)=JUNITS(J,I,2)                                               DOEBDL 333
  506 JUNITS(J,I,2)=K                                                           DOEBDL 334
      METKVT = METIN                                                            DOEBDL 335
  505 CONTINUE                                                                  DOEBDL 336
C              IF PAR-INPUT                                                     DOEBDL 337
      IF ((NCOM .EQ. 2) .OR. (NCOM .EQ. 3))  GO TO 510                          DOEBDL 338
C     IF LIB RUN, SKIP SETTING INPDAT                                           DOEBDL 339
      IF (LIBRUN .NE. 0)  GO TO 535                                             DOEBDL 340
      INPDAT(1,NOPT) = KRDNUM                                                   DOEBDL 341
                          INPDATf(NOPT) = curfnm                                DOEBDL 342
      GOTO 530                                                                  DOEBDL 343
  510 CONTINUE                                                                  DOEBDL 344
C              OTHERWISE POSITION INCOPY TO CORRECT LINE                        DOEBDL 345
C              ALSO CHECK THERE WAS A PREVIOUS INPUT                            DOEBDL 346
      IF (INPDAT(1,NOPT).NE.0)  GO TO 515                                       DOEBDL 347
      CALL MSG (1)                                                              DOEBDL 348
      GO TO 210                                                                 DOEBDL 349
515               if ( INPDATf(NOPT) .ne. INCOPYf )     then                    DOEBDL 350
                      if ( INCOPYf(1:4) .ne. '    ' )     then                  DOEBDL 351
                          close ( INCOPY )                                      DOEBDL 352
                      endif                                                     DOEBDL 353
                      INCOPYf = INPDATf(NOPT)                                   DOEBDL 354
                      open (unit=INCOPY, file=INCOPYf,form='FORMATTED',         -037     1
     1                      ACTION='READ',SHARE='DENYNONE',status='old')        -037     2
                  else                                                          DOEBDL 358
                      rewind  INCOPY                                            DOEBDL 359
                  endif                                                         DOEBDL 360
      NPRUN  = 2                                                                DOEBDL 361
      IEND   = INPDAT(1,NOPT)                                                   DOEBDL 362
      DO 520 I=1,IEND                                                           DOEBDL 363
  520 READ (INCOPY,525)                                                         DOEBDL 364
  525 FORMAT(A1)                                                                DOEBDL 365
C              SET STARTING STD FILE REC NUM                                    DOEBDL 366
  530 INPDAT(2,NOPT) = NSTDR1                                                   DOEBDL 367
C              INCR NUM OF RECORDS FOR THIS PROG                                DOEBDL 368
      NSTDR1 = NSTDR1 + NSTDRO(NOPT)                                            DOEBDL 369
C              SET UP LIBRARY FILES                                             DOEBDL 370
  535 LIBSAV = LIBFIL                                                           DOEBDL 371
      IF ((NOPT .EQ. 3) .OR. (NOPT .EQ. 5))  LIBFIL = 2                         DOEBDL 372
C              IF SOLAR, SKIP POSITION OF KEY FILE                              DOEBDL 373
      IF (NOPT.EQ.5) GO TO 565                                                  DOEBDL 374
C              POSITION KEYWORD FILE                                            DOEBDL 375
      KEYPOS = ( NOPT - 1) * 4  +  1                                            DOEBDL 376
#ifndef _DLL                                                                 /* -048    69 */ 
537   IF( KEYP .EQ. KEYPOS )  GOTO  560                                         DOEBDL 377
      IF (KEYP .LT. KEYPOS)  GOTO 540                                           DOEBDL 378
      REWIND KEYFIL                                                             DOEBDL 379
      KEYP   = 0                                                                DOEBDL 380
  540 IEND   = KEYPOS - KEYP                                                    DOEBDL 381
      IF( IEND .LE. 0 )  GOTO  560                                              DOEBDL 382
      DO 550 I=1,IEND                                                           DOEBDL 383
  550 READ (KEYFIL)                                                             DOEBDL 384
#endif                                                                       /* -048    70 */ 
C              SET KEYP TO WHAT IT WILL BE                                      DOEBDL 385
  560 KEYP   = KEYPOS + 2                                                       DOEBDL 386
      IF( NCOM .NE. 140 )  GOTO  565                                            DOEBDL 387
C........................................ PROCESS FUNCTION                      DOEBDL 388
          NUMOVL = NOPT                                                         DOEBDL 389
      CALL F0                                                                   DOEBDL 390
          NCOM = NCOM1                                                          DOEBDL 391
#ifdef _DLL                                                                  /* -048    71 */ 
C                 IF(IREAD1 .eq. 0)  RETURN                                     -048    72
#endif                                                                       /* -048    73 */ 
          GOTO  210                                                             DOEBDL 392
C              TURN SOLAR FLAG OFF                                              DOEBDL 393
  565 ISOLAR = 0                                                                DOEBDL 394
C              SET OVERLAY NUMBER                                               DOEBDL 395
      NOVRL  = NOPT                                                             DOEBDL 396
C              PAGE EJECT BEFORE INPUT PROCESSOR HEADING IF ECHOEING            DOEBDL 397
      IF (NOECHO.EQ.0) WRITE(IOUTPT,1003)                                       DOEBDL 398
      IF (NOECHO.NE.0) WRITE(IOUTPT,1002)                                       DOEBDL 399
 1003 FORMAT(1H1)                                                               DOEBDL 400
 1002 FORMAT(//)                                                                DOEBDL 401
      WRITE(IOUTPT,1005,ERR=99001) OVRLN(NOPT),(CLOCK(I),I=1,7),ICLOCK8         PC     102
99001 CONTINUE                                                                  DOEBDL 403
 1005 FORMAT(22X,A1,46H D L   P R O C E S S O R   I N P U T   D A T A           DOEBDL 404
     1                //28X,7A4,4HRUN ,I3////)                                  PC     103
      GO TO (1111, 1112, 1113, 1114, 1115) ,  NOPT                              DOEBDL 406
#ifdef _DLL                                                                  /* -048    74 */ 
 1111 CALL LDL(0)                                                               -048    75
      GO TO 1116                                                                -048    76
 1112 CALL LDL(0)                                                               -048    77
      GO TO 1116                                                                -048    78
 1113 CALL LDL(0)                                                               -048    79
      GO TO 1116                                                                -048    80
 1114 CALL LDL(0)                                                               -048    81
      GO TO 1116                                                                -048    82
#else                                                                        /* -048    83 */ 
 1111 CALL LDL                                                                  WLIB1    1
      GO TO 1116                                                                DOEBDL 417
 1112 CALL SDL                                                                  DOEBDL 418
      GO TO 1116                                                                DOEBDL 419
 1113 CALL PDL                                                                  DOEBDL 420
      GO TO 1116                                                                DOEBDL 421
 1114 CALL EDL                                                                  DOEBDL 422
      GO TO 1116                                                                DOEBDL 423
#endif                                                                       /* -048    84 */ 
1115   call  MSG( 39 )                                                          DOEBDL 424
      write(IOUTPT,'(13x,a)') 'component-based simulator not available.'        DOEBDL 425
       call  ABT                                                                DOEBDL 426
 1116 CONTINUE                                                                  DOEBDL 427
C              PUT STATS IN DAYFILE                                             DOEBDL 428
#ifdef _DLL                                                                  /* -048    85 */ 
  590 if(IFATAL .NE. 0) write(   15, 1006) (MSGTOT(I),I=1,3)                    -048    86
#else                                                                        /* -048    87 */ 
  590 if(IFATAL .NE. 0) write(  *  , 1006) (MSGTOT(I),I=1,3)                    PC     106
      if(IFATAL .NE. 0) write(   15, 1006) (MSGTOT(I),I=1,3)                    PC     107
#endif                                                                       /* -048    88 */ 
 1006 format( ' *** ISSUED ',I3,' ERRORS, ',I3,' warnings and ',I3,             -047k   68
     $        ' cautions')                                                      PC     109
       CALL DAYBDL( 1, CLOCK(7) )                                               PC     110
      IF (LIBRUN .EQ. 0)  LIBFIL = LIBSAV                                       DOEBDL 430
C              SAVE NO-ECHO                                                     DOEBDL 431
      NOECHS = NOECHO                                                           DOEBDL 432
      IF(IFATAL.NE.0) WRITE(IOUTPT,1004) (MSGTOT(I),I=1,3)                      DOEBDL 433
 1004 FORMAT(// 1X,40(1H*),I5, 7H ERRORS  /                                     DOEBDL 434
     1  1X,40(1H*),I5, 9H WARNINGS  /                                           DOEBDL 435
     2  1X,40(1H*),I5, 9H CAUTIONS )                                            DOEBDL 436
C              INCREMENT NUMBER OF ABORT LEVEL ERRORS                           DOEBDL 437
      IABORT = IABORT + IFATAL                                                  DOEBDL 438
      IFATAL = 0                                                                DOEBDL 439
#ifdef _DLL                                                                  /* -048    89 */ 
      IREAD1 = 1                                                                -048    90
#else                                                                        /* -048    91 */ 
      CALL FILLN( 0, IA, IADIM )                                                DOEBDL 440
#endif                                                                       /* -048    92 */ 
      IF(IwinReturn .ne. 0)  GOTO 800                                           -042L5b 28
      GOTO 210                                                                  -042L5b 29
  600 CONTINUE                                                                  DOEBDL 442
C                                                                               DOEBDL 443
C              PROCESS COMPUTE COMMAND                                          DOEBDL 444
C                                                                               DOEBDL 445
C              GET WHAT SHOULD BE ..                                            DOEBDL 446
      CALL GETCS                                                                DOEBDL 447
C              ISSUE MESSAGE IF NOT                                             DOEBDL 448
      CALL SKPEOC                                                               DOEBDL 449
C              CHECK IF THIS IS FIRST COMPUTE                                   DOEBDL 450
      IF (NSIM .NE. 0)  GO TO 610                                               DOEBDL 451
C              CHECK IF SAVED FILES TO BE ASSUMED                               DOEBDL 452
      IF (NOPT .EQ. 1)  GO TO 620                                               DOEBDL 453
C              IF SOLAR                                                         DOEBDL 454
      IF (NOPT.EQ.5) GO TO 620                                                  DOEBDL 455
      CALL MSG (34)                                                             DOEBDL 456
C              SAVE FLAG AS TO WHICH IS FIRST SIM                               DOEBDL 457
      ISAVFL = NOPT                                                             DOEBDL 458
      GO TO 620                                                                 DOEBDL 459
C              CHECK FOR THIS COMPUT IN CORRECT ORDER (<= LAST + 1)             DOEBDL 460
  610 IF (NOPT .GT. ISIM(1,NSIM)+1)  CALL MSG (5)                               DOEBDL 461
C              INCREMENT NUMBER OF SIMULATIONS                                  DOEBDL 462
  620 CALL MEMCK(NSIM,100)                                                      DOEBDL 463
C              PUT PROG NUM IN ISIM                                             DOEBDL 464
C              STORE OUTPUT CONVERSION FLAG.                                    DOEBDL 465
      IKREP(NSIM)=METOUT                                                        DOEBDL 466
      ISIM(1,NSIM) = NOPT                                                       DOEBDL 467
C              IF THERE WAS INPUT FOR THIS COMPUTE                              DOEBDL 468
      IF(INPDAT(1,NOPT).NE.0) GO TO 630                                         DOEBDL 469
      CALL MSG (4)                                                              DOEBDL 470
      GO TO 210                                                                 DOEBDL 471
C              SET STARTING REC OF STD FILE FOR THIS PROG                       DOEBDL 472
  630 ISIM(2,NSIM) = INPDAT(2,NOPT)                                             DOEBDL 473
      IABORT = IABORT + IFATAL                                                  DOEBDL 474
      IFATAL = 0                                                                DOEBDL 475
      GOTO 210                                                                  DOEBDL 476
C                                                                               DOEBDL 477
C              PROCESS SAVE-FILES COMMAND                                       DOEBDL 478
C                                                                               DOEBDL 479
C              SET FORCE-WRITE                                                  DOEBDL 480
  700 NFWRT  = 1                                                                DOEBDL 481
C              GET ..                                                           DOEBDL 482
      CALL GETCS                                                                DOEBDL 483
C              MESSAGE IF NOT                                                   DOEBDL 484
      CALL SKPEOC                                                               DOEBDL 485
      GOTO 210                                                                  DOEBDL 486
C                                                                               DOEBDL 487
C              PROCESS STOP COMMAND                                             DOEBDL 488
C                                                                               DOEBDL 489
  800 IABORT = IABORT + IFATAL                                                  DOEBDL 490
#ifdef _DLL                                                                  /* -048    93 */ 
C                       IF( ICALL .gt. 0 )  RETURN                              -048    94
#endif                                                                       /* -048    95 */ 
C              SET SIM FLAG TO ZERO IF ANY ERRORS                               DOEBDL 491
      IF(IABORT .GT. 0)  NSIM = 0                                               DOEBDL 492
C              SET SIM FLAG TO ZERO IF LIBRARY-INPUT                            DOEBDL 493
      IF (LIBRUN .NE. 0)  NSIM = 0                                              DOEBDL 494
C              WRITE CONTROL FILE                                               DOEBDL 495
      WRITE (ICTRL) ISAVFL,NFWRT,NSIM,ISIM,IKREP                                DOEBDL 496
C              IF ANY FATAL ERRORS PRINT MESSAGE                                DOEBDL 497
      IF( IABORT .GT. 0)  THEN                                                  PC     111
        WRITE (IOUTPT, 1000) IABORT                                             PC     112
        WRITE (15    , 1001) IABORT                                             PC     113
#ifndef _DLL                                                                 /* -048    96 */ 
        WRITE (  *   , 1001) IABORT                                             PC     114
#endif                                                                       /* -048    97 */ 
      ENDIF                                                                     PC     115
 1001 FORMAT(' *** NUMBER OF ABORT LEVEL DIAGNOSTICS ISSUED:',I5/               -047k   69
     $  ' *** DUE TO THESE ERRORS NO SIMULATION WILL BE PERFORMED'/             -047k   70
     $  ' *** EXAMINE THE OUTPUT FILE TO SEE DIAGNOSTICS')                      -047k   71
 1000 FORMAT(1X,40(1H*),I5,25H ABORT-LEVEL DIAGNOSTICS  )                       PC     119
      GOTO 900                                                                  DOEBDL 500
C              TITLE COMMAND                                                    DOEBDL 501
  810 CALL TITLEI                                                               DOEBDL 502
      GO TO 210                                                                 DOEBDL 503
C              ABORT COMMAND                                                    DOEBDL 504
  820 CALL ABORTI                                                               DOEBDL 505
      GO TO 210                                                                 DOEBDL 506
C              LIST COMMAND                                                     DOEBDL 507
  830 CALL LISTI                                                                DOEBDL 508
      NOECHS = NOECHO                                                           DOEBDL 509
      GO TO 210                                                                 DOEBDL 510
C              RUN-PERIOD command has been deleted from zero level              ALPHA    3
  840 CONTINUE                                                                  ALPHA    4
      GO TO 210                                                                 DOEBDL 513
C              ---                                                              DOEBDL 514
C              --- POST-PROCESSOR COMMAND                                       DOEBDL 515
C              ---                                                              DOEBDL 516
 1300 CALL  GETCS                                                               DOEBDL 517
      IF( ITERM .EQ. 0 )  GOTO  1310                                            DOEBDL 518
      CALL  MSG ( 78 )                                                          DOEBDL 519
      GOTO  210                                                                 DOEBDL 520
 1310 DO  1320  I = 1 , 5                                                       DOEBDL 521
          if ( KOMPAR( ISYMU, IPPOPT(1,I), 4 ) .ne. 0 )     goto  1330          DOEBDL 522
 1320 CONTINUE                                                                  DOEBDL 523
      CALL  MSG ( 22 )                                                          DOEBDL 524
      GOTO  1390                                                                DOEBDL 525
 1330 IPPFLG = I                                                                DOEBDL 526
      IF( IPPFLG .EQ. 5 )  IPPFLG = 0                                           DOEBDL 527
 1390 CALL  GETCS                                                               DOEBDL 528
      CALL  SKPEOC                                                              DOEBDL 529
      GOTO  210                                                                 DOEBDL 530
C              NORMAL TERMINATION                                               DOEBDL 531
  900 CONTINUE                                                                  DOEBDL 532
      STTIM = CPUTIM(1) - STTIM                                                 PC     120
#ifndef _DLL                                                                 /* -048    98 */ 
      write(   *  , 9915) STTIM                                                 PC     121
#endif                                                                       /* -048    99 */ 
      write( 15, 9915 )  STTIM                                                  PC     122
 9915 FORMAT (' End   DOEBDL : Total elapsed time of ',F8.1,' seconds')         -047k   72
#ifdef _DLL                                                                  /* -048   100 */ 
      IFATAL = IABORT                                                           -048   101
      IF( IABORT .GT. 0 )  RETURN                                               -048   102
      RETURN                                                                    -048   103
#else                                                                        /* -048   104 */ 
      IF( IABORT .GT. 0 )  call EXIT( 1 )                                       -048   105
#endif                                                                       /* -048   106 */ 
      END                                                                       DOEBDL 533
      SUBROUTINE ABORTI                                                         ABORTI   2
C                                                                               ABORTI   3
C              ABORTI PROCESSES THE ABORT COMMAND                               ABORTI   4
C                                                                               ABORTI   5
C              ABORTI USES   1 WORDS OF COMMWK                                  ABORTI   6
C                                                                               ABORTI   7
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      EQUIVALENCE (COMMWK(1),I)                                                 ABORTI  11
      DATA IHOLL/4HIF  /                                                        ABORTI  12
C                                                                               ABORTI  13
  100 CALL GETCS                                                                ABORTI  14
C              IF ..                                                            ABORTI  15
      IF (ITERM.NE.0) RETURN                                                    ABORTI  16
C              IF *IF*                                                          ABORTI  17
      if ( ISYMU(1) .eq. IHOLL )     goto  100                                  ABORTI  18
C              IF ONE OF THREE OPTIONS                                          ABORTI  19
      DO 120 I = 1,3                                                            ABORTI  20
          if ( KOMPAR( ISYMU, LISTOP(1,I), 4 ) .ne. 0 )     goto  130           ABORTI  21
  120 CONTINUE                                                                  ABORTI  22
C              BAD OPTION                                                       ABORTI  23
      CALL MSG (22)                                                             ABORTI  24
      GO TO 100                                                                 ABORTI  25
C              SET ABORT LEVEL                                                  ABORTI  26
  130 ABTLVL = I                                                                ABORTI  27
      IF(MSGLVL .LT. ABTLVL) CALL MSG(36)                                       ABORTI  28
      GO TO 100                                                                 ABORTI  29
      END                                                                       ABORTI  30
      SUBROUTINE ABT                                                            ABT      2
C                                                                               ABT      3
C              ABT ABORTS THE PROGRAM AFTER ISSUING A TERM. MESS.               ABT      4
C                                                                               ABT      5
      USE MSGBOX                                                                -048   107
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
      DIMENSION       IFLS(12)                                                  ABT      8
        EQUIVALENCE ( IFLS(1), KEYFIL )                                         ABT      9
      WRITE(IOUTPT,1001)                                                        ABT     11
 1001 FORMAT(// 1X,40(1H*),30H PROGRAM EXECUTION TERMINATED.)                   ABT     12
C              FLUSH BUFFERS                                                    ABT     13
      write(    15, 98001 )                                                     PC     125
#ifndef _DLL                                                                 /* -048   108 */ 
      write(   *  , 98001 )                                                     PC     126
#endif                                                                       /* -048   109 */ 
98001 FORMAT( ' *** DOE-2 BDL TERMINATED WITH ERRORS ***'/                      -047k   73
     $        ' *** CHECK OUTPUT FILE FOR EXPLANATIONS OR ERRORS ***')          -047k   74
      IF (IPDFLG .ne. 0 .and.  Imsgflg .eq. 0)                                  045a1    1
     $  Iret= messageboxi( NULL, 'An irrecoverable error has occurred.'         -042L5b 33
     $  //char(13)//char(10)                                                    -042L5b 34
     $  //'Check the BDL output file for more details.'                         -042L5b 35
     $  //char(13)//char(10)//char(13)//char(10)                                -042L5b 36
     $  //'If you are running an interactive application it is best to'         -042L5b 37
     $  //char(13)//char(10)                                                    -042L5b 38
     $  //'save your work now and restart the application.'//char(0),           -042L5b 39
     $  'DOE-2 BDL MUST EXIT'//char(0),MB_OK+MB_ICONSTOP+MB_TASKMODAL)          -042L5b 40
      DO 25 J=1,12                                                              ABT     17
      IF(J.EQ.9)  GOTO 25                                                       ABT     18
      FLUSH(IFLS(J))                                                            -048   110
   25 CONTINUE                                                                  ABT     20
c--- force abort                                                                ABT     21
#ifdef _DLL                                                                  /* -048   111 */ 
C             return to calling application (error condition)                   -048   112
#else                                                                        /* -048   113 */ 
      call EXIT( 1 )                                                            -048   114
#endif                                                                       /* -048   115 */ 
      RETURN                                                                    ABT     24
      END                                                                       ABT     25
      SUBROUTINE ALTTBL (ITBL, ISTYPE, JSYM, ISYMTB)                            ALTTBL   2
C                                                                               ALTTBL   3
C              ALTTBL SEARCHES ALTERNATE SYMBOL TABLES                          ALTTBL   4
C                                                                               ALTTBL   5
C              ITBL    1  DAY OF WEEK TABLE                                     ALTTBL   6
C              2  SUMMARY REPORT TABLE                                          ALTTBL   7
C              3  VERIFICATION REPORT TABLE                                     ALTTBL   8
C              4  LIBRARY INDEX                                                 ALTTBL   9
C              IF FOUND (IN 2-4) THEN DEFINE FOR FUTURE REF                     ALTTBL  10
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION IDDESC(14),NAMREP(120),                                         DDAY1    1
     1         ISYMTB(16,1)                                                     CWF1     2
      DATA IDDESC/3HMON,3HTUE,3HWED,3HTHU,3HFRI,3HSAT,3HSUN,3HHOL,              ALTTBL  19
     1      2HWD,2HWE,3HWEH,3HALL,3HHDD,3HCDD/                                  DDAY1    2
C                                                                               ALTTBL  21
C              NAMREP ARE THE REPORT NAMES                                      ALTTBL  22
      DATA NAMREP/4HLS-A,4HLS-B,4HLS-C,4HLS-D,4HLS-E,4HLS-F,4HLS-G,             ALTTBL  23
     1     4HLS-H,4HLS-I,4HLS-J,4HLS-K,4HLS-L,4HLS-M,4HLS-N,4HLS-O,             ALTTBL  24
     2            4HLV-A,4HLV-B,4HLV-C,4HLV-D,4HLV-E,4HLV-F,4HLV-G,             ALTTBL  25
     3     4HLV-H,4HLV-I,4HLV-J,4HLV-K,4HLV-L,4HLV-M,4HLV-N,4HLV-O,             ALTTBL  26
     4            4HSS-A,4HSS-B,4HSS-C,4HSS-D,4HSS-E,4HSS-F,4HSS-G,             ALTTBL  27
     5     4HSS-H,4HSS-I,4HSS-J,4HSS-K,4HSS-L,4HSS-M,4HSS-N,4HSS-O,             ALTTBL  28
     6            4HSV-A,4HSV-B,4HSV-C,4HSV-D,4HSV-E,4HSV-F,4HSV-G,             ALTTBL  29
     7     4HSV-H,4HSV-I,4HSV-J,4HSV-K,4HSV-L,4HSV-M,4HSV-N,4HSV-O,             ALTTBL  30
     8            4HPS-A,4HPS-B,4HPS-C,4HPS-D,4HPS-E,4HPS-F,4HPS-G,             ALTTBL  31
     9     4HPS-H,4HPS-I,4HPS-J,4HBEPS,4HBEPU,4HPS-K,4HPS-L,4HPS-M,             ALTTBL  32
     1            4HPV-A,4HPV-B,4HPV-C,4HPV-D,4HPV-E,4HPV-F,4HPV-G,             ALTTBL  33
     2     4HPV-H,4HPV-I,4HPV-J,4HPV-K,4HPV-L,4HPV-M,4HPV-N,4HPV-O,             ALTTBL  34
     3            4HES-A,4HES-B,4HES-C,4HES-D,4HES-E,4HES-F,4HES-G,             ALTTBL  35
     4     4HES-H,4HES-I,4HES-J,4HES-K,4HES-L,4HES-M,4HES-N,4HES-O,             ALTTBL  36
     5            4HEV-A,4HEV-B,4HEV-C,4HEV-D,4HEV-E,4HEV-F,4HEV-G,             ALTTBL  37
     6     4HEV-H,4HEV-I,4HEV-J,4HEV-K,4HEV-L,4HEV-M,4HEV-N,4HEV-O/             ALTTBL  38
      JSYM   = IUNDE                                                            ALTTBL  39
      ILX = 0                                                                   LIB3     4
      IUX = 0                                                                   LIB3     5
      IFFLAG = 0                                                                LIB3     6
      GO TO (100,1000,1000,300,200,200,200,200,200,200,200,200), ITBL           DDAY1    3
  100 DO 110 I = 1,14                                                           DDAY1    4
          if ( ISYMU(1) .eq. IDDESC(I) )     goto  120                          ALTTBL  42
  110 CONTINUE                                                                  ALTTBL  43
      GOTO 1000                                                                 ALTTBL  44
  120 JSYM   = I                                                                ALTTBL  45
      GOTO 1000                                                                 ALTTBL  46
C              SEARCH LSPE-REPORT TABLES                                        ALTTBL  47
  200 IF(ISYMB(2) .NE. HOLL(14))  GO TO 1000                                    ALTTBL  48
      I1 = 1 + (ITBL-5)*15                                                      DDAY1    5
      I2 = I1 + 14                                                              ALTTBL  50
      DO 210 I=I1,I2                                                            ALTTBL  51
          if ( ISYMU(1) .eq. NAMREP(I) )     goto  220                          ALTTBL  52
  210 CONTINUE                                                                  ALTTBL  53
      GOTO 1000                                                                 ALTTBL  54
  220 ISYM = I - I1 + 1                                                         ALTTBL  55
           call  SYMDEF( ISYMTB, ISYMU, 99, JSYM )                              ALTTBL  56
      ISYMTB(12,JSYM) = ISYM                                                    SYMSIZ   8
      GOTO 1000                                                                 ALTTBL  58
C              SEARCH LIBRARY INDEX                                             ALTTBL  59
  300 CALL TBLSCH(ISYMB,LUSIDX,10,NUSLIB,2,IUX)                                 LIB3     7
      IF (IUX.EQ.0) CALL TBLSCH(ISYMB,LIBIDX,10,NLIB,2,ILX)                     LIB3     8
      IF (IUX.GT.0) THEN                                                        LIB3     9
          IFFLAG = 1                                                            LIB3    10
          IF (ISTYPE.EQ.LUSIDX(9,IUX)) THEN                                     LIB3    11
              CALL SYMDEF(ISYMTB,ISYMB,ISTYPE,JSYM)                             LIB3    12
              ISYMTB(13,JSYM) = -IPACK2(IFFLAG,IUX,1048576)                     LIB3    13
              IF (JSYMLX.EQ.0) JSYMLX=JSYM                                      LIB3    14
              CALL MSG(32)                                                      LIB3    15
          ELSE                                                                  LIB3    16
              CALL MSG(37)                                                      LIB3    17
          END IF                                                                LIB3    18
      ELSE IF (ILX.GT.0) THEN                                                   LIB3    19
          IFFLAG = 0                                                            LIB3    20
          IF (ISTYPE.EQ.LIBIDX(9,ILX)) THEN                                     LIB3    21
              CALL SYMDEF(ISYMTB,ISYMB,ISTYPE,JSYM)                             LIB3    22
              ISYMTB(13,JSYM) = -IPACK2(IFFLAG,ILX,1048576)                     LIB3    23
              IF (JSYMLX.EQ.0) JSYMLX=JSYM                                      LIB3    24
              CALL MSG(32)                                                      LIB3    25
          ELSE                                                                  LIB3    26
              CALL MSG(37)                                                      LIB3    27
          END IF                                                                LIB3    28
      END IF                                                                    LIB1    13
 1000 CONTINUE                                                                  ALTTBL  72
      RETURN                                                                    ALTTBL  73
      END                                                                       ALTTBL  74
      SUBROUTINE  A1A4 ( I1, I4, N )                                            A1A4     2
C---                                                                            A1A4     3
C--- PACK 4*N WORDS OF A1 FORMAT IN I1 INTO N WORDS OF A4 FORMAT IN I4          A1A4     4
C---                                                                            A1A4     5
      integer  I1(80), I4(20)                                                   A1A4     6
      LOGICAL*1  L1(4), L4(4)                                                   A1A4     7
      EQUIVALENCE  ( ITEMP, L1(1) ),  ( JTEMP, L4(1) )                          A1A4     8
      J = 0                                                                     A1A4     9
      DO  200  I = 1 , N                                                        A1A4    10
          DO  100  K = 1 , 4                                                    A1A4    11
              J = J + 1                                                         A1A4    12
              ITEMP = I1(J)                                                     A1A4    13
              L4(K) = L1(1)                                                     A1A4    14
 100      CONTINUE                                                              A1A4    15
          I4(I) = JTEMP                                                         A1A4    16
 200  CONTINUE                                                                  A1A4    17
      RETURN                                                                    A1A4    18
      END                                                                       A1A4    19
      SUBROUTINE  A4A1 ( I4, I1, N )                                            A4A1     2
      integer  I4(20), I1(80)                                                   A4A1     3
      LOGICAL*1  L4(4), L1(4)                                                   A4A1     4
          EQUIVALENCE ( IT, L4(1) ),  ( J1, L1(1) )                             A4A1     5
      DATA  IBLNK/4H    /                                                       A4A1     6
      J = 0                                                                     A4A1     7
      DO  2  I = 1 , N                                                          A4A1     8
          IT = I4(I)                                                            A4A1     9
          DO  1  K = 1 , 4                                                      A4A1    10
              J1 = IBLNK                                                        A4A1    11
              L1(1) = L4(K)                                                     A4A1    12
              J = J + 1                                                         A4A1    13
              I1(J) = J1                                                        A4A1    14
1         CONTINUE                                                              A4A1    15
2     CONTINUE                                                                  A4A1    16
      RETURN                                                                    A4A1    17
      END                                                                       A4A1    18
      subroutine  UPPER4 ( IN, OUT, N )                                         UPPER4   2
c                                                                               UPPER4   3
c--- convert N words of IN{a4} to uppercase in OUT{a4}                          UPPER4   4
c                                                                               UPPER4   5
      integer  IN(20), out(20), t                                               UPPER4   6
      CHARACTER C(4)                                                            PC     130
          equivalence         ( t, c(1) )                                       UPPER4   8
c****************************************************************               UPPER4   9
      if ( N .lt. 1 )   return                                                  UPPER4  10
c---- note   95 = 5f (hex)                                                      UPPER4  11
      do  200  i = 1 , N                                                        UPPER4  12
        t = in(i)                                                               UPPER4  13
        if ( (c(1).ge.CHAR(97)).and.(c(1).le.CHAR(122)) )                       PC     131
     $        c(1)=CHAR(ICHAR(c(1))-32)                                         PC     132
        if ( (c(2).ge.CHAR(97)).and.(c(2).le.CHAR(122)) )                       PC     133
     $        c(2)=CHAR(ICHAR(c(2))-32)                                         PC     134
        if ( (c(3).ge.CHAR(97)).and.(c(3).le.CHAR(122)) )                       PC     135
     $        c(3)=CHAR(ICHAR(c(3))-32)                                         PC     136
        if ( (c(4).ge.CHAR(97)).and.(c(4).le.CHAR(122)) )                       PC     137
     $        c(4)=CHAR(ICHAR(c(4))-32)                                         PC     138
        out(i) = t                                                              UPPER4  18
200   continue                                                                  UPPER4  19
      return                                                                    UPPER4  20
      end                                                                       UPPER4  21
      SUBROUTINE BKSPAC                                                         BKSPAC   2
C                                                                               BKSPAC   3
C              BKSPAC BACKSPACES THE KARD POINTER TO THE                        BKSPAC   4
C              LAST CHARACTER STRING READ                                       BKSPAC   5
C                                                                               BKSPAC   6
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
C                                                                               BKSPAC   9
      iBkspF = iBkspF + 1                                                       BKSPAC  10
C$    write(6,'('' BKSPAC --- KARDX=''i4''  KARDSX=''i4''  ITERM=''i2,          BKSPAC  11
C$   1  ''  iBkspF=''i2)')  KARDX, KARDSX, ITERM, iBkspF                        BKSPAC  12
      RETURN                                                                    BKSPAC  13
      END                                                                       BKSPAC  14
      SUBROUTINE CFD(JREF,JOPCDT,IA,ISYMTB,KONTXT,IREFTB,LKDAT,NAMPTR,          DFTEX3   9
     $               LSDPTR,LKPTR,Iphase)                                       DFTEX3  10
C                                                                               CFIN     3
C                                                                               CFIN     4
C                            THIS ROUTINE PROCESSES THE CURVE-FIT               CFIN     5
C                            COMMAND                                            CFIN     6
C                                                                               CFIN     7
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               CFIN     8
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON /IUNITS/ VKONV(300),DUMLOG(4),JUNITS(4,300,2),NUNITS,KUNITS        UNITS1   1
      INTEGER DUMLOG                                                            SUBTY1   1
      DIMENSION IUNITS(4,300)                                                   UNITS1   2
      EQUIVALENCE (IUNITS(1,1),JUNITS(1,1,1))                                   /IUNITS/ 4
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION ISYMTB(16,1),IA(1000000),KONTXT(16,1),IREFTB(5,1)               FIX6     4
      DIMENSION NUMDAT(10),NUMCOF(10),NUMPAR(10),MAPTYP(15),                    DFTEX3  12
     $          MAPCVT(2,15)                                                    DFTEX3  13
      DIMENSION DATA(3,21),IDATA(3,21)                                          DFTEX3  14
      EQUIVALENCE (DATA(1,1),IDATA(1,1))                                        DFTEX3  15
      DATA NUMPAR /2,3,2,3,2,5*0/                                               DFTEX3  16
      DATA NUMCOF/2,4,3,6,4,5*0/                                                DFTEX3  17
      DATA NUMDAT /2,3,3,6,4,5*0/                                               DFTEX3  18
C              MAPTYP converts CURVE-FIT TYPE value to the type                 DFTEX4   4
C              value used in the simulation CVAL routine                        DFTEX4   5
C              1-5  LIN, BI-LIN, QUAD, BI-QUAD, CUBIC                           DFTEX4   6
C                6  BI-LIN-T                                                    DFTEX4   7
C                7  QUAD-T                                                      DFTEX4   8
C                8  BI-QUAD-T&T                                                 DFTEX4   9
C                9  BI-QUAD-DT&T                                                DFTEX4  10
C               10  BI-QUAD-RATIO&T                                             DFTEX4  11
C               11  CUBIC-T                                                     DFTEX4  12
C               12  BI-QUAD-T&RATIO                                             DFTEX4  13
C               13  QUAD-DT                                                     DFTEX4  14
C               14  BI-QUAD-RATIO&DT                                            Chlr1    1
      DATA MAPTYP /1, 2, 3, 4, 5,                                               Chlr1    2
     &             2, 3, 4, 4, 4,                                               Chlr1    3
     &             5, 4, 3, 4, 0/                                               Chlr1    4
C              MAPCVT tells how independants are units converted -              DFTEX4  16
C                     0 - not conversion                                        DFTEX4  17
C                     1 - temperature conversion                                DFTEX4  18
C                     2 - delta temperature conversion                          DFTEX4  19
      DATA MAPCVT /0,0,  0,0,  0,0,  0,0,  0,0,                                 DFTEX4  20
     $             1,1,  1,0,  1,1,  2,1,  0,1,                                 DFTEX4  21
     $             1,0,  1,0,  2,0,  0,2,  0,0/                                 Chlr1    5
      IERR = 0                                                                  DFTEX3  36
      CALL FILLN(0,IDATA(1,1),63)                                               DFTEX3  37
C              SET SOME POINTERS                                                DFTEX3  38
      NSAVE = IOPCDT(17,JOPCDT)                                                 DFTEX3  39
C              IKW IS THE FIRST KEYWORD FOR COMMAND                             DFTEX3  40
      IKW    = IOPCDT(9,JOPCDT)                                                 DFTEX3  41
C              NKW IS THE NUMBER OF KEYWORDS FOR THIS COMMAND                   DFTEX3  42
      NKW    = IOPCDT(10,JOPCDT)                                                DFTEX3  43
C              LVAL IS THE LENGTH OF THE VALUE ARRAY                            DFTEX3  44
      LVAL   = IOPCDT(16,JOPCDT)                                                DFTEX3  45
C              IAVPT1 IS THE START OF THE VALUE BLOCK                           DFTEX3  46
      IAXS = IREFTB(2,JREF)                                                     DFTEX3  47
      IAVPT1 = IAXS + NSAVE                                                     DFTEX3  48
C              LTOT IS THE TOTAL SIZE OF THE VALUE BLOCK                        DFTEX3  49
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,JOPCDT)                                 DFTEX3  50
      IF(Iphase .ne. 2)  THEN                                                   DFTEX3  51
        CALL LSDFIL(JOPCDT,ISYMTB,KONTXT(1,IKW),NKW,IA(IAVPT1+1),               DFTEX3  52
     $            IA(LKDAT+1),LSDPTR,ISYMTB(1,LKPTR),NAMPTR,LVAL)               DFTEX3  53
        IF(Iphase .eq. 1) RETURN                                                DFTEX3  54
      ENDIF                                                                     DFTEX3  55
C              Pick up TYPE and INPUT-TYPE                                      DFTEX3  56
C              pick up maping value to know how TYPE maps into                  DFTEX3  57
C              the FIT routine TYPE                                             DFTEX3  58
      IAVPTR = IAVPT1 + 2*LVAL                                                  DFTEX3  59
      ITSX = IA(IAVPTR+1)                                                       DFTEX3  60
      IITSX = IA(IAVPTR+2)                                                      DFTEX3  61
C              IF TYPE or INPUT-TYPE not specified give up                      DFTEX3  62
      IF(NOVAL(ITSX) .EQ. 0 .or. NOVAL(IITSX) .EQ. 0)  RETURN                   DFTEX3  63
      ITYPES= ISYMTB(12,ITSX)                                                   DFTEX3  64
      INTYPE= ISYMTB(12,IITSX)                                                  DFTEX3  65
      ITYPE  = MAPTYP(ITYPES)                                                   DFTEX3  66
C              COEFFICIENTS specified                                           DFTEX3  67
C                                                                               DFTEX3  68
C              Make sure correct number were given                              DFTEX3  69
      IF (INTYPE .eq. 1) THEN                                                   DFTEX3  70
          N = NUMCOF(ITYPE)                                                     DFTEX3  71
          DO I=1,N                                                              DFTEX3  72
              IF (NOVAL(IA(IAVPTR+4+I)).EQ.0) THEN                              DFTEX3  73
                IF((I .eq. 3) .AND. (ITYPE .eq. 2)) THEN                        HVAC28   4
                  IA(IAVPTR+4+I) = ITYPLS(UNDEF(2))                             HVAC28   5
                ELSE                                                            HVAC28   6
                  IA(IAVPTR+4+I) = ITYPLS(UNDEF(1))                             HVAC28   7
                  IERR=1                                                        HVAC28   8
                ENDIF                                                           HVAC28   9
              ENDIF                                                             DFTEX3  76
          END DO                                                                DFTEX3  77
          IF (IERR.EQ.1) THEN                                                   DFTEX3  78
              CALL MSG(52)                                                      DFTEX3  79
          END IF                                                                DFTEX3  80
C              Make DATA unused                                                 DFTEX3  81
          CALL FILLN(UNDEF(2),IA(IAVPTR+11),60)                                 DFTEX3  82
          IF(METIN.eq.1 .AND. MSGLVL.GE.2 .AND. LIBflg.eq.0)                    METR1    9
     1      WRITE(IOUTPT,1002)                                                  METR1   10
          RETURN                                                                DFTEX3  84
      END IF                                                                    DFTEX3  85
C              DATA was specified                                               DFTEX3  86
C                                                                               DFTEX3  87
C             Check that enough DATA was present to perform fit                 DFTEX3  88
      IERRTOT = 0                                                               DFTEX3  89
      N = NUMDAT(ITYPE)                                                         DFTEX3  90
      DO I=1,N                                                                  DFTEX3  91
          IF (NOVAL(IA(IAVPTR+10+I)) .eq. 0)  THEN                              DFTEX3  92
            IA(IAVPTR+10+I) = ITYPLS(UNDEF(1))                                  DFTEX3  93
            IERR=1                                                              DFTEX3  94
          ENDIF                                                                 DFTEX3  95
      END DO                                                                    DFTEX3  96
      IF (IERR.EQ.1) THEN                                                       DFTEX3  97
          IF(IERRTOT .EQ. 0)  CALL MSG(52)                                      DFTEX3  98
          IERRTOT = IERRTOT + IERR                                              DFTEX3  99
          IERR=0                                                                DFTEX3 100
      END IF                                                                    DFTEX3 101
C              Check the correct numer of INDEPENDENTs are specified            DFTEX3 102
C              and that DEPENDENT is always specified.                          DFTEX3 103
      N = NUMPAR(ITYPE)                                                         DFTEX3 104
      NDATA = 0                                                                 DFTEX3 105
      DO I=1,20                                                                 DFTEX3 106
C              Look through DATA triplets and set required but                  DFTEX3 107
C              unspecified values to UNDEF(1) to throw ERROR and                DFTEX3 108
C              unneeded but specified values to UNUSED to turn off              DFTEX3 109
C              field                                                            DFTEX3 110
          IF (NOVAL(IA(IAVPTR+10+I)) .ne. 0) THEN                               DFTEX3 111
              IF (I .gt. 1) THEN                                                DFTEX4  23
                  IF (NOVAL(IA(IAVPTR+10+I-1)) .eq. 0) THEN                     DFTEX4  24
                      CALL MSG2(116,I-1,'DATA point set  ',I,I)                 DFTEX4  25
                      IERRTOT = IERRTOT + 1                                     DFTEX4  26
                  ENDIF                                                         DFTEX4  27
              ENDIF                                                             DFTEX4  28
              NDATA = NDATA + 1                                                 DFTEX3 112
C              Need 1 ind. and 1 dep.                                           DFTEX3 113
              IF (N.EQ.2) THEN                                                  DFTEX3 114
                  IF(NOVAL(IA(IAVPTR+30+I)).EQ.0) THEN                          DFTEX3 115
                    IERR=1                                                      DFTEX3 116
                    IA(IAVPTR+30+I) = ITYPLS(UNDEF(1))                          DFTEX3 117
                  ENDIF                                                         DFTEX3 118
                  IF(NOVAL(IA(IAVPTR+50+I)).NE.0)                               DFTEX3 119
     $               IA(IAVPTR+50+I)=ITYPLS(UNDEF(2))                           DFTEX3 120
              ELSE                                                              DFTEX4  29
C              Need 2 ind. and 1 dep.                                           DFTEX3 121
                  IF(NOVAL(IA(IAVPTR+30+I)).EQ.0) THEN                          DFTEX3 122
                    IERR=1                                                      DFTEX3 123
                    IA(IAVPTR+30+I) = ITYPLS(UNDEF(1))                          DFTEX3 124
                  ENDIF                                                         DFTEX3 125
                  IF(NOVAL(IA(IAVPTR+50+I)).EQ.0) THEN                          DFTEX3 126
                    IERR=1                                                      DFTEX3 127
                    IA(IAVPTR+50+I) = ITYPLS(UNDEF(1))                          DFTEX3 128
                  ENDIF                                                         DFTEX3 129
              END IF                                                            DFTEX3 130
              IF (IERR.EQ.1) THEN                                               DFTEX3 131
                  CALL MSG(65)                                                  DFTEX3 132
                  IERRTOT = IERRTOT + IERR                                      DFTEX3 133
                  IERR=0                                                        DFTEX3 134
              END IF                                                            DFTEX3 135
          ELSE                                                                  DFTEX4  30
              IA(IAVPTR+30+I) = ITYPLS(UNDEF(3))                                DFTEX4  31
              IA(IAVPTR+50+I) = ITYPLS(UNDEF(3))                                DFTEX4  32
          END IF                                                                DFTEX3 136
      END DO                                                                    DFTEX3 137
C              Check that DEPENDENT is within specified limits                  DFTEX3 138
      N = NUMPAR(ITYPE)                                                         DFTEX3 139
      DO I=1,NDATA                                                              DFTEX3 140
          IDP = IAVPTR + (N-1)*20 + 10 + I                                      DFTEX3 141
          IF(NOVAL(IA(IDP)).NE.0)  THEN                                         DFTEX3 142
            IF(TYPLS(IA(IDP)).LT.TYPLS(IA(IAVPTR+3))) IERR=1                    DFTEX3 143
            IF(TYPLS(IA(IDP)).GT.TYPLS(IA(IAVPTR+4))) IERR=1                    DFTEX3 144
          ENDIF                                                                 DFTEX3 145
      END DO                                                                    DFTEX3 146
      IF(IERR.EQ.1)  THEN                                                       DFTEX3 147
          CALL MSG2(28,IA(IAVPTR+3),IA(IAVPTR+4),DUM,DUM)                       DFTEX3 148
          IF(NOLIMS .EQ. 0) IERRTOT = IERRTOT + IERR                            DFTEX3 149
          IERR=0                                                                DFTEX3 150
      ENDIF                                                                     DFTEX3 151
      IF(IERRTOT .gt. 0)  RETURN                                                DFTEX3 152
C              Move DATA from the three keyword vectors to the                  DFTEX3 153
C              array of triplet values used by FIT routine                      DFTEX3 154
      DO J=1,3                                                                  DFTEX3 155
        DO I=1,20                                                               DFTEX3 156
          IDATA(J,I) = IA(IAVPTR+10+(J-1)*20+I)                                 DFTEX3 157
        ENDDO                                                                   DFTEX3 158
      ENDDO                                                                     DFTEX3 159
C              DO UNIT CONVERSION IF NECESSARY                                  DFTEX3 160
      IF (METIN.EQ.1) THEN                                                      DFTEX3 161
          DO I=1,NDATA                                                          DFTEX3 162
              N = NUMPAR(ITYPE) -1                                              DFTEX3 163
              DO J=1,N                                                          DFTEX3 164
C              Temperature conversion needed                                    DFTEX3 165
                  IF(MAPCVT(J,ITYPES) .eq. 1)  THEN                             DFTEX3 166
                    DATA(J,I)=32.+1.8*DATA(J,I)                                 DFTEX3 167
C              Delta temperature conversion needed                              DFTEX3 168
                  ELSEIF(MAPCVT(J,ITYPES) .eq. 2)  THEN                         DFTEX3 169
                    DATA(J,I)=1.8*DATA(J,I)                                     DFTEX3 170
                  ENDIF                                                         DFTEX3 171
              END DO                                                            DFTEX3 172
          END DO                                                                DFTEX3 173
          IF  (MSGLVL.EQ.10) WRITE(IOUTPT,1001)                                 DFTEX3 174
      END IF                                                                    DFTEX3 175
C              DO FIT, PUT RESULTS IN COEF DATA AREA                            DFTEX3 176
      CALL FIT(ITYPE,NDATA,DATA,IA(IAVPTR+5))                                   DFTEX3 177
C              SET TYPE FOR COEFS TO "DOE-2 DEFAULT DATA"                       DFTEX3 178
      DO I=1,6                                                                  DFTEX3 179
          IA(IAVPT1+4+I) = IPACKB(1,5,1,IA(IAVPT1+4+I))                         DFTEX3 180
      END DO                                                                    DFTEX3 181
 1000 CONTINUE                                                                  DFTEX3 182
 1001 FORMAT(/1X,                                                               DFTEX3 183
     $'COMMENT-  COEFFICIENTS CALCULATED FOR ENGLISH UNIT INPUTS ONLY')         DFTEX3 184
 1002 FORMAT(/1X,                                                               DFTEX3 185
     $'WARNING-  COEFFICIENTS MUST BE FOR ENGLISH UNIT INPUT VALUES')           DFTEX3 186
      RETURN                                                                    CFIN   145
      END                                                                       CFIN   146
      SUBROUTINE CKAA (IA, N)                                                   CKAA     2
C                                                                               CKAA     3
C              CKAA CHECKS TO INSURE N MORE WORDS ARE                           CKAA     4
C              AVAILABLE IN THE AA ARRAY.  IF NOT, MORE                         CKAA     5
C              ARE REQUESTED.                                                   CKAA     6
C                                                                               CKAA     7
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      DIMENSION IA(1)                                                           CKAA    10
C                                                                               CKAA    11
C              HOW MUCH DO I NEED (PLUS 10 FOR SAFETY)                          CKAA    12
      NEED   = IAX + N + 10                                                     CKAA    13
C              CHECK MAX                                                        CKAA    14
      IAXMAX = MAX0(IAXMAX,NEED)                                                CKAA    15
C              IF ARRAY BIG ENOUGH                                              CKAA    16
   10 IF ((NEED).LT.IADIMV) RETURN                                              CKAA    17
C                                                                               CKAA    18
C              NEED MORE SPACE                                                  CKAA    19
C                                                                               CKAA    20
C              IF IA IS VARIABLY DIMENSIONED                                    CKAA    21
      IF (IADIM.EQ.0) GO TO 100                                                 CKAA    22
      CALL MSG2(159,IADIMV,IAXMAX,IAXMAX,IAXMAX)                                DFTEX3 187
      CALL ABT                                                                  PC22    34
  100 RETURN                                                                    CKAA    27
      END                                                                       CKAA    28
      SUBROUTINE CHKPRN(IREFTB,ISYMTB)                                          CHKPRN   2
C                                                                               CHKPRN   3
C              CHECK FOR ELEMENTS OR COMPONENTS THAT ARE NOT ATTACHED           CHKPRN   4
C              TO ANYTHING                                                      CHKPRN   5
C                                                                               CHKPRN   6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
C                                                                               CHKPRN   8
      DIMENSION IREFTB(5,1),ISYMTB(16,1),INONE(4)                               FIX6     5
      DATA INONE /4HDefi,4Hned ,4HObje,4Hct  /                                  FIX6     6
      JKWcur = 0                                                                HVAC28  10
      DO JOP=1,NOPCDT                                                           CHKPRN  10
          NREF = IOPCDT(13,JOP)                                                 CHKPRN  11
          IPCLAS = IOPCDT(20,JOP)                                               CHKPRN  12
C              IF COMMAND HAS BEEN USED AND REQUIRES A PARENT                   CHKPRN  13
          IF (NREF.GT.0 .AND. IPCLAS.NE.0) THEN                                 HVAC17   2
              JOPcur = JOP                                                      HVAC28  11
              DO IREF=1,NREF                                                    CHKPRN  15
                  IRX = IOPCDT(14,JOP)+IREF-1                                   CHKPRN  16
                  JREFcur= IRX                                                  HVAC28  12
                  IREFTB(4,IRX) = IABS(IREFTB(4,IRX))                           CHKPRN  17
C              CHECK FOR ORPHANS                                                HVAC17   3
C              MISSING PARENTs THAT ARE OKAY: FLOOR (50)                        HVAC17   4
                  IF (IREFTB(4,IRX).EQ.0 .AND. IPCLAS.NE.50) THEN               HVAC17   5
                    IERRFLG = 1                                                 HVAC17   6
C              If IPCLAS < 0 ignore orphans that are of TYPE=1                  HVAC17   7
                    IF(IPCLAS .LT. 0)  THEN                                     HVAC17   8
                      LVAL  = IOPCDT(16,JOP)                                    HVAC17   9
                      NSAVE = IOPCDT(17,JOP)                                    HVAC17  10
                      IF(IREFTB(2,IRX) .NE. 0)  THEN                            HVAC17  11
                        JSYMTY = IA(IREFTB(2,IRX)+NSAVE+2*LVAL+1)               HVAC17  12
                        IF(NOVAL(JSYMTY).EQ.1)  THEN                            HVAC17  13
c              for elec meters, neither utility meters nor electric-sale        HVAC27   1
c              meters require parents; building level and sub-meter do          HVAC27   2
                          IF(ISYMTB(12,JSYMTY) .EQ. 1  .OR.                     HVAC27   3
     &                       ISYMTB(12,JSYMTY) .EQ. 4)  IERRFLG = 0             HVAC27   4
                        ENDIF                                                   HVAC17  15
                      ENDIF                                                     HVAC17  16
                    ENDIF                                                       HVAC17  17
                    IF(IERRFLG .EQ. 1) THEN                                     HVAC17  18
                      JOPPRN = JOPSRC(19,IPCLAS)                                HVAC17  19
                      JSYM = IREFTB(1,IRX)                                      HVAC17  20
                      IF(JOPPRN .ne. 0)  THEN                                   HVAC17  21
                        CALL MSG2(91,IOPCDT(1,JOP),ISYMTB(1,JSYM),              HVAC17  22
     $                               IOPCDT(1,JOPPRN),0)                        HVAC17  23
                      ELSE                                                      HVAC17  24
                        CALL MSG2(91,IOPCDT(1,JOP),ISYMTB(1,JSYM),              HVAC17  25
     $                               INONE,0)                                   HVAC17  26
                      ENDIF                                                     HVAC17  27
                    ENDIF                                                       HVAC17  28
                  ENDIF                                                         HVAC17  29
              END DO                                                            CHKPRN  25
          END IF                                                                CHKPRN  26
      END DO                                                                    CHKPRN  27
      JOPcur = 0                                                                HVAC28  13
      JREFcur= 0                                                                HVAC28  14
      RETURN                                                                    CHKPRN  28
      END                                                                       CHKPRN  29
      SUBROUTINE COMMND (IA,ISYMTB,IOP,LEVEL,JREF,JOPCDT)                       OPLST1   5
C                                                                               COMMND   3
C              COMMND READS A COMMAND AND A POSSIBLE UNAME                      COMMND   4
C                                                                               COMMND   5
C              COMMND USES   3 WORDS OF COMMWK                                  COMMND   6
C                                                                               COMMND   7
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      EQUIVALENCE (COMMWK(1),I), (COMMWK(2),ISTYPE),                            COMMND  13
     1      (COMMWK(3),JSYM)                                                    COMMND  14
      CHARACTER*32 cmdname                                                      FIX14   10
      INTEGER     Icmdname(8)                                                   FIX14   11
      EQUIVALENCE(cmdname,Icmdname)                                             FIX14   12
      DIMENSION IA(1),ISYMTB(16,1)                                              SYMSIZ  15
C                                                                               COMMND  16
C                                                                               COMMND  17
C              INPUT COMMAND                                                    COMMND  18
C                                                                               COMMND  19
      IOP    = 0                                                                COMMND  20
      JSYM   = 0                                                                COMMND  21
   20 CALL GETCS                                                                COMMND  22
      IF (ITERM.NE.0) GO TO 20                                                  COMMND  23
      IF (LSYMB .GT. 16) GOTO 80                                                NEWEXP   5
       call  TBLSCH( ISYMU, IOPCDT, 24, NOPCDT, 1, JOPCDT )                     OPLST1   7
C              IF COMM NOT FOUND                                                COMMND  25
      IF (JOPCDT.EQ.0) GO TO 80                                                 COMMND  26
      JOPcur = JOPCDT                                                           ERR-01   1
C              GET OPCODE AND OPCODE LEVEL                                      COMMND  27
      IOP    = IOPCDT(7,JOPCDT)                                                 COMMND  28
      LEVEL  = IOPCDT(8,JOPCDT)                                                 COMMND  29
C              IF COMMAND USES DIFF COMMAND*S REF TBL                           COMMND  30
      JOPOLD = JOPCDT                                                           FIX14   13
      IF (IOPCDT(12,JOPCDT).LT.0) JOPCDT = -IOPCDT(12,JOPCDT)                   COMMND  31
C              Check if this component is default named                         FIX14   14
      IF((NAMDEF .eq. 1)  .AND.                                                 FIX14   15
     $   (JOPOLD.eq. 5 .OR. JOPOLD.eq.10 .OR. JOPOLD.eq.11 .OR.                 FIX14   16
     $    JOPOLD.eq.12 .OR. JOPOLD.eq.13 .OR. JOPOLD.eq.14 .OR.                 FIX14   17
     $    JOPOLD.eq.15 .OR. JOPOLD.eq.33 .OR. JOPOLD.eq.38 .OR.                 FIX14   18
     $    JOPOLD.eq.41 .OR. JOPOLD.eq.48 .OR. JOPOLD.eq.55 .OR.                 FIX14   19
     $    JOPOLD.eq.65 .OR. JOPOLD.eq.66 .OR. JOPOLD.eq.67 .OR.                 FIX14   20
     $    JOPOLD.eq.68 .OR. JOPOLD.eq.71 .OR. JOPOLD.eq.82 .OR.                 FIX14   21
     $    JOPOLD.eq.22 .OR. JOPOLD.eq.35 .OR. JOPOLD.eq.36 .OR.                 FIX14   22
     $    JOPOLD.eq.89 .OR. JOPOLD.eq. 4 .OR. JOPOLD.eq.42 .OR.                 NEWEXP   6
     $    JOPOLD.eq.79 .OR. JOPOLD.eq.87)                                       NEWEXP   7
     $    )  THEN                                                               FIX14   24
C              Make name for command name and reference table number            FIX14   25
         WRITE(cmdname,9000)(IOPCDT(I,JOPOLD),I=1,4),IOPCDT(13,JOPCDT)+1        FIX14   26
 9000    FORMAT(4A4,1X,I4,11X)                                                  FIX14   27
C              Remove multiple spaces                                           FIX14   28
         J = 21                                                                 FIX14   29
         I = 5                                                                  FIX14   30
 9010      IF(cmdname(I:I) .eq. ' ') THEN                                       FIX14   31
 9020        IF(cmdname(I+1:I+1) .eq. ' ') THEN                                 FIX14   32
               DO K=I+1,J                                                       FIX14   33
                 cmdname(K:K) = cmdname(K+1:K+1)                                FIX14   34
               ENDDO                                                            FIX14   35
               J = J - 1                                                        FIX14   36
               IF(I .LT. J-1)  GOTO 9020                                        FIX14   37
             ENDIF                                                              FIX14   38
           ENDIF                                                                FIX14   39
           I = I + 1                                                            FIX14   40
           IF(I .LT. J-1)  GOTO 9010                                            FIX14   41
         CALL MOVEN(Icmdname,LABEL,8)                                           FIX14   42
C              Get symbol type for this command and back up before command      FIX14   43
         ISTYPE = IOPCDT(11,JOPCDT)                                             FIX14   44
         call  BKSPAC                                                           FIX14   45
C              Go do normal thing for named commands                            FIX14   46
         GOTO 160                                                               FIX14   47
      ENDIF                                                                     FIX14   48
      IF(((IOPCDT(20,JOPCDT).gt.0).and.(IOPCDT(20,JOPCDT).lt.200)).AND.         DFTEX4  33
     $    (NPAREF(JOPCDT,JOPPAR).le.0)) THEN                                    DFTEX4  34
        CALL MSG2(58,IOPCDT(1,JOPCDT),IOPCDT(1,JOPPAR),IOP,IOP)                 DFTEX4  35
        CALL SKPEOC                                                             DFTEX4  36
        IOP  = 0                                                                DFTEX4  37
        JSYM = 0                                                                DFTEX4  38
        RETURN                                                                  DFTEX4  39
      ENDIF                                                                     DFTEX4  40
C              INCR REFERENCES IF NECESSARY                                     COMMND  32
      CALL INCRRF (IA(1),IA(1),JOPCDT,0,JREF)                                   REFTB1   7
      JREFcur= JREF                                                             ERR-01   2
C              INDICATE NO LABEL                                                COMMND  34
      LABEL(1) = HOLL(14)                                                       COMMND  35
      IOPCDT(22,JOPCDT) = JREF                                                  FIX3     1
      RETURN                                                                    COMMND  36
C                                                                               COMMND  37
C              ASSUME COMMAND WAS ACTUALLY A UNAME                              COMMND  38
C                                                                               COMMND  39
C              MOVE SYMBOL TO LABEL                                             COMMND  40
   80 DO I=1,8                                                                  SYMSIZ  16
              LABEL(I) = ISYMB(I)                                               SYMSIZ  17
      END DO                                                                    SYMSIZ  18
C              GET NEXT CHAR STRING THIS CARD                                   COMMND  43
       call  GETCS                                                              COMMND  44
C              IF REST OF CARD NOT EMPTY                                        COMMND  45
      IF (ISYMB(1).NE.HOLL(14)) GO TO 130                                       COMMND  46
C              BACKSPACE                                                        COMMND  47
           call  BKSPAC                                                         COMMND  48
  110 CALL MSG (3)                                                              COMMND  49
      CALL SKPEOC                                                               COMMND  50
      RETURN                                                                    COMMND  51
130    call  TBLSCH( ISYMU, IOPCDT, 24, NOPCDT, 1, JOPCDT )                     OPLST1   8
      IF (JOPCDT.EQ.0) GO TO 110                                                COMMND  53
      JOPcur = JOPCDT                                                           ERR-01   3
C              GET OPCODE AND OPCODE LEVEL                                      COMMND  54
      IOP    = IOPCDT(7,JOPCDT)                                                 COMMND  55
      LEVEL  = IOPCDT(8,JOPCDT)                                                 COMMND  56
C              GET SYMBOL TYPE                                                  COMMND  57
      ISTYPE = IOPCDT(11,JOPCDT)                                                COMMND  58
C              IF COMMAND USES DIFF COMMAND*S REF TBL                           COMMND  59
      IF (IOPCDT(12,JOPCDT).LT.0) JOPCDT = -IOPCDT(12,JOPCDT)                   COMMND  60
       call  BKSPAC                                                             COMMND  61
      IF (ISTYPE.NE.0) GO TO 160                                                COMMND  62
      CALL MSG (2)                                                              COMMND  63
      GO TO 190                                                                 COMMND  64
C              DEFINE SYMBOL                                                    COMMND  65
  160 IF(((IOPCDT(20,JOPCDT).gt.0).and.(IOPCDT(20,JOPCDT).lt.200)).AND.         DFTEX4  41
     $    (NPAREF(JOPCDT,JOPPAR).le.0)) THEN                                    DFTEX4  42
        CALL MSG2(58,IOPCDT(1,JOPCDT),IOPCDT(1,JOPPAR),IOP,IOP)                 DFTEX4  43
        CALL SKPEOC                                                             DFTEX4  44
        IOP  = 0                                                                DFTEX4  45
        JSYM = 0                                                                DFTEX4  46
        RETURN                                                                  DFTEX4  47
      ENDIF                                                                     DFTEX4  48
      CALL SYMDEF (IA, LABEL, ISTYPE, JSYM)                                     DFTEX4  49
C              INCR REFERENCES                                                  COMMND  67
      IF (ISYMTB(12,JSYM).EQ.0) THEN                                            SYMSIZ  19
          CALL INCRRF(IA(1),IA(1),JOPCDT,JSYM,JREF)                             OPLST1  10
      ELSE                                                                      OPLST1  11
          JREF = IOPCDT(14,JOPCDT) + ISYMTB(12,JSYM) - 1                        SYMSIZ  20
      END IF                                                                    OPLST1  13
C              SAVE THE REFERENCE TABLE INDEX IN THE COMMAND TABLE.             ATTRF2   4
C              THIS IS THE REF. TABLE INDEX OF THE LAST COMMAND OF              ATTRF2   5
C              THIS TYPE WHICH HAS BEEN DEFINED.                                ATTRF2   6
      IOPCDT(22,JOPCDT) = JREF                                                  ATTRF2   7
      JREFcur= JREF                                                             ERR-01   4
C              REREAD COMMAND                                                   COMMND  69
  190 CALL GETCS                                                                COMMND  70
      RETURN                                                                    COMMND  71
      END                                                                       COMMND  72
      SUBROUTINE COSTI(IA,JREF,JOPCDT)                                          REFTB1   9
C                                                                               COSTI    3
C              COSTI INPUTS THE COST COMMAND                                    COSTI    4
C              COSTI USES .... WORDS OF COMMWK                                  COSTI    5
C                                                                               COSTI    6
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               COSTI    8
      CALL MSG (13)                                                             COSTI    9
      CALL SKPEOC                                                               COSTI   10
      RETURN                                                                    COSTI   11
      END                                                                       COSTI   12
      BLOCK DATA  DATBDL                                                        DATBDL   2
C                                                                               DATBDL   3
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /FOR/    IFOR                                                     /FOR/    2
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON /IPARAM/ NPARAM, MPARAM, IPARAM(17,6000)                           -048t    1
      COMMON  /IRUNPD/  NRUNPD,IRUNPD(6,15)                                     ALPHA    1
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON /ITITLE/ ITITLE(10,5),ITITLT(10,5)                                 FIX11    1
      COMMON /IUNITS/ VKONV(300),DUMLOG(4),JUNITS(4,300,2),NUNITS,KUNITS        UNITS1   1
      INTEGER DUMLOG                                                            SUBTY1   1
      DIMENSION IUNITS(4,300)                                                   UNITS1   2
      EQUIVALENCE (IUNITS(1,1),JUNITS(1,1,1))                                   /IUNITS/ 4
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /LABDUM/ LABDUM(4)                                                 /LABDUM/ 2
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON /MDATA / IDIM(12), ISDOM(12), MONDSC(12)                           /MDATA/  2
      COMMON /OPLIST/ VLIST(2000),LSTEND,LENVLS,LENMAX                          FIX7     2
      DIMENSION IVLIST(2000)                                                    FIX7     3
      EQUIVALENCE (IVLIST(1),VLIST(1))                                          /OPLIST/ 4
      COMMON  /PPBDL/   IPPFLG                                                  /PPBDL/  2
      COMMON /PREFIX/ PREFIX(3,10)                                              FIX11    3
      DIMENSION ERRPX(3), WARPX(3), CAUPX(3), DEFPX(3), INPPX(3),               /PREFIX/ 3
     1      LIKPX(3), NOTPX(3), FROPX(3), LIBPX(3), UDFPX(3)                    FIX11    4
      EQUIVALENCE (ERRPX(1),PREFIX(1,1)), (WARPX(1),PREFIX(1,2)),               /PREFIX/ 5
     1            (CAUPX(1),PREFIX(1,3)), (DEFPX(1),PREFIX(1,4)),               /PREFIX/ 6
     2            (INPPX(1),PREFIX(1,5)), (LIKPX(1),PREFIX(1,6)),               /PREFIX/ 7
     3            (FROPX(1),PREFIX(1,7)), (NOTPX(1),PREFIX(1,8)),               FIX11    5
     4            (LIBPX(1),PREFIX(1,9)), (UDFPX(1),PREFIX(1,10))               FIX11    6
C                                                                               /PREFIX/ 9
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
      DIMENSION KARDD(2)                                                        DATBDL  21
      EQUIVALENCE (KARDD(1),KARD(81))                                           DATBDL  22
C              SET INPUT OUTPUT UNITS FLAGS                                     DATBDL  23
      DATA METIN, METKVT, METOUT / 0, 1, 0 /                                    DATBDL  24
C                                                                               DATBDL  25
C              --- INITIALIZE POST-PROCESSOR FLAG                               DATBDL  26
      DATA  IPPFLG /0/                                                          DATBDL  27
C              ---                                                              DATBDL  28
C              INITIALIZE FILE NUMBERS                                          DATBDL  29
      DATA KEYFIL/9/                                                            DATBDL  30
      DATA ISTNDF/3/                                                            DATBDL  31
      DATA INPUT /1/                                                            DATBDL  32
      DATA INCOPY/8/                                                            DATBDL  33
      DATA ICTRL /7/                                                            DATBDL  34
      DATA IOUTPT/6/                                                            DATBDL  35
      DATA  ITMPFL/ 11 /                                                        DATBDL  36
C                                                                               DATBDL  37
      DATA IFOR / 4HFOR  /                                                      DATBDL  38
      DATA ABTLVL /1/                                                           DATBDL  39
      DATA CAUPX/4H -CA, 4HUTIO, 4HN---/                                        DATBDL  40
      DATA DEFPX/4H -DE, 4HFAUL, 4HT - /                                        DATBDL  41
      DATA ERRPX/4H *ER, 4HROR*, 4H****/                                        DATBDL  42
      DATA FROPX/4H -FR, 4HOM- , 4H- - /                                        DATBDL  43
      DATA LIBPX/4H -LI, 4HBRAR, 4HY - /                                        FIX11    8
      DATA UDFPX/4H -US, 4HER D, 4HEF- /                                        FIX11    9
      DATA HOLL/                                                                DATBDL  44
     1      1H0, 1H1, 1H2, 1H3, 1H4, 1H5, 1H6, 1H7, 1H8, 1H9,                   DATBDL  45
     2      1H., 1H,, 1H=, 1H , 1H(, 1H), 1H[, 1H], 2H.., 1H-,                  DATBDL  46
     3      1H+, 1H*, 1H/, 1HE, 4HTHRU, 4HTYPE, 4HNAME,1H ,1H ,1H /             DATBDL  47
      data  KCDOLR / 4h$    /,  KCNUMB / 4h#    /,  KCE / 4he    /              DATBDL  48
     1    , KCQUO  / 4h'    /,  KCDQUO / 4h"    /                               DATBDL  49
      DATA KCLCRL /4H{   /                                                      EXPR2    7
      DATA KCRCRL /4H}   /                                                      EXPR2    8
      DATA IHOLTY /4HTYPE/                                                      SUBTY7   2
C              SET SIZE OF IA ARRAY                                             DATBDL  50
      DATA  IADIM /75 000 000/                                                  -048a   11
      DATA IDBLSP/0/                                                            DATBDL  52
      DATA IDIM/31,28,31,30,31,30,31,31,30,31,30,31/                            DATBDL  53
      DATA IEOF/0/                                                              DATBDL  54
      DATA IFATAL/0/                                                            DATBDL  55
      DATA INPPX/4H -IN, 4HPUT , 4H- - /                                        DATBDL  56
      DATA ISDOM / 0,31,59,90,120,151,181,212,243,273,304,334 /                 DATBDL  57
      DATA IUNDEF/4H*UND, 4HEFIN, 4HED* , 4H    , 4*4H     /                    FIX11   10
      DATA NUNITS/80/                                                           DATBDL  59
      DATA DUMLOG/4H    ,4H    ,4H    ,4H    /                                  DATBDL  60
      DATA IUNUSE/4H*UNU, 4HSED*, 4H    , 4H    , 4*4H     /                    FIX11   11
      data  KARDX / 81 /,  KARDI1 / 1 /,  KARDI2 / 81 /,  KARDIM / 4096/        DATBDL  62
      DATA KORE /0/                                                             DATBDL  63
      DATA ITITLE/50*1H /                                                       DATBDL  64
      DATA KRDNUM/0/                                                            DATBDL  65
      DATA KARDD/1H ,1H /                                                       DATBDL  66
      DATA LABDUM/0,3*1H /                                                      DATBDL  67
      DATA LIKPX/4H -LI, 4HKE- , 4H- - /                                        DATBDL  68
      DATA LISTOP/                                                              DATBDL  69
     1   4HERRO, 4HRS  , 4H    , 4H    ,                                        DATBDL  70
     2   4HWARN, 4HINGS, 4H    , 4H    ,                                        DATBDL  71
     3   4HCAUT, 4HIONS, 4H    , 4H    ,                                        DATBDL  72
     4   4HDEFA, 4HULTS, 4H    , 4H    ,                                        DATBDL  73
     5   4HCOMM, 4HENTS, 4H    , 4H    ,                                        DATBDL  74
     6   4HWIDE, 4H    , 4H    , 4H    ,                                        DATBDL  75
     7   4HNARR, 4HOW  , 4H    , 4H    ,                                        DATBDL  76
     8   4HECHO, 4H    , 4H    , 4H    ,                                        DATBDL  77
     9   4HNO-E, 4HCHO , 4H    , 4H    ,                                        DATBDL  78
     1   4HSING, 4HLE-S, 4HPACE, 4HD   ,                                        DATBDL  79
     2   4HDOUB, 4HLE-S, 4HPACE, 4HD   ,                                        DATBDL  80
     3   4HLIMI, 4HTS  , 4H    , 4H    ,                                        DATBDL  81
     4   4HNO-L, 4HIMIT, 4HS   , 4H    ,                                        DATBDL  82
     5   4HLIBR, 4HARY-, 4HCONT, 4HENTS,                                        DATBDL  83
     6   4HNO-D, 4HEFAU, 4HLT-N, 4HAMES/                                        FIX14   49
      DATA NAMDEF /1/                                                           FIX14   50
      DATA MONDSC/3HJAN, 3HFEB, 3HMAR, 3HAPR, 3HMAY, 3HJUN,                     DATBDL  85
     1      3HJUL, 3HAUG, 3HSEP, 3HOCT, 3HNOV, 3HDEC/                           DATBDL  86
      DATA MPARAM /6000/                                                        -048t    2
      DATA MSGLVL /3/                                                           DATBDL  89
      DATA  NPARAM/0/                                                           DATBDL  90
      DATA NARROW/0/                                                            DATBDL  91
      DATA NOECHO/0/                                                            DATBDL  92
      DATA NOLIMS /0/                                                           DATBDL  93
      DATA LIBLST /0/                                                           DATBDL  94
      DATA KVTLST/0/                                                            DATBDL  95
C    FLAG FOR FUTUR PRINTOUT OPTION OF LIB IN CONVERTED SEE CDL'S MOVEMR        DATBDL  96
      DATA NOTPX/4H -NO, 4HTE- , 4H- - /                                        DATBDL  97
      DATA NRUNPD/0/                                                            DATBDL  98
      DATA REQD/-99999./                                                        DATBDL  99
      DATA SOWHAT/-77777./                                                      DATBDL 100
      DATA UNUSE/-88888./                                                       DATBDL 101
      DATA UNFILD /-66666./                                                     DATBDL 102
      DATA WARPX/4H *WA, 4HRNIN, 4HG***/                                        DATBDL 103
      DATA IVLIST,LSTEND,LENVLS,LENMAX /2000*0,0,2000,2000/                     FIX7     6
      DATA IPDFLG /0/, Imsgflg /0/                                              -042L5b 41
      DATA IPARAM / 102000*0 /                                                  -048t    3
      END                                                                       DATBDL 104
      SUBROUTINE DAYBDL(IFLAG, NAME)                                            DAYBDL   2
C                                                                               DAYBDL   3
C              DAYBDL PUTS EXECUTION STATISTICS IN THE JOB*S DAYFILE            DAYBDL   4
C                                                                               DAYBDL   5
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      INTEGER  NAME(2)                                                          DAYBDL   7
      SAVE RTIM0                                                                -048   116
C                                                                               DAYBDL   8
C              IF END OF A SIMULATION                                           DAYBDL   9
      IF(IFLAG.NE.0) GO TO 100                                                  DAYBDL  10
c--- get cpu time before bdl                                                    DAYBDL  11
      RTIM0 = cputim( 0 )                                                       DAYBDL  12
      write( 15, 1010 )  NAME                                                   PC     139
#ifndef _DLL                                                                 /* -048   117 */ 
      write(   *  , 1010) NAME                                                  PC     140
#endif                                                                       /* -048   118 */ 
 1010 FORMAT( ' Starting ', A4, I3 )                                            -047k   75
      RETURN                                                                    DAYBDL  15
100   CONTINUE                                                                  DAYBDL  16
c--- get cpu time after bdl                                                     DAYBDL  17
      T = cputim( 1 ) - RTIM0                                                   DAYBDL  18
      write( 15, 1050 )  NAME, IAXMAX, T                                        PC     142
#ifndef _DLL                                                                 /* -048   119 */ 
      write(   *  , 1050) NAME, IAXMAX, T                                       PC     143
#endif                                                                       /* -048   120 */ 
 1050 FORMAT( ' Finished ',A4,I3,' : Memory (wds) = ',I8,                       -047k   76
     1        ', clock time (secs) = ',F7.1 )                                   PC     145
       call  mStat( 80 )                                                        DAYBDL  21
      return                                                                    DAYBDL  22
      END                                                                       DAYBDL  23
      FUNCTION  cputim ( icode )                                                PC     146
      INTEGER*4 IHR,IMIN,ISEC,I100                                              -048   121
      CALL GETTIM(IHR,IMIN,ISEC,I100)                                           PC     148
      CPUTIM=((IHR*60)+IMIN)*60+ISEC+REAL(I100)/1E2                             PC     149
      RETURN                                                                    PC     150
      END                                                                       PC     151
      SUBROUTINE DEBUGI (IA)                                                    DEBUGI   2
C                                                                               DEBUGI   3
C              DEBUGI PRINTS VARIOUS VARIABLES FOR DEBUGGING                    DEBUGI   4
C                                                                               DEBUGI   5
C              DEBUGI USES   7 WORDS OF COMMWK                                  DEBUGI   6
C                                                                               DEBUGI   7
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      COMMON /KEYLEN/  NCONTX,ICONTX,IDFT,NDFT,IEXP,NEXP,LKEYAA,KEYFLG          /KEYLEN/ 2
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
C                                                                               DEBUGI  15
      INTEGER BUGOP (2,4), IA(16,1)                                             SYMSIZ  21
      EQUIVALENCE (COMMWK(1),IH), (COMMWK(2),I1),                               DEBUGI  17
     1      (COMMWK(3),I2), (COMMWK(4),J),                                      DEBUGI  18
     2      (COMMWK(5),R1), (COMMWK(6),R2),                                     DEBUGI  19
     3      (COMMWK(7),I), (COMMWK(8),R)                                        DEBUGI  20
      DATA BUGOP/                                                               DEBUGI  21
     1      4HIOPC,4HDT  ,                                                      DEBUGI  22
     2      4HISYM,4HTB  ,                                                      DEBUGI  23
     3      4HIA  ,4H    ,                                                      DEBUGI  24
     4      4HBDLK,4HEY  /                                                      DFTEX4  52
C                                                                               DEBUGI  26
   10 CALL GETCS                                                                DEBUGI  27
      IF (ITERM.NE.0) RETURN                                                    DEBUGI  28
      DO 20 I = 1,4                                                             DEBUGI  29
          if ( KOMPAR( ISYMU, BUGOP(1,I), 2 ) .ne. 0 )     goto  30             DEBUGI  30
   20 CONTINUE                                                                  DEBUGI  31
      CALL MSG (22)                                                             DEBUGI  32
      GO TO 10                                                                  DEBUGI  33
   30 GOTO (100, 200, 300, 400), I                                              DFTEX4  53
  100 WRITE(IOUTPT,1001) (I, (IOPCDT(J,I),J=1,24),I=1,NOPCDT)                   OPLST1  16
 1001 FORMAT(' BDL Command Table'/                                              DFTEX4  54
     $  200(I4,1X,4A4,1X,2A4,2I3,I6,I4,I3,I5,I4,2I7,9I4/))                      DFTEX4  55
      GO TO 10                                                                  DEBUGI  37
  200 WRITE(IOUTPT,1002) NSYMTB,MSYMTB,NPreDef,                                 DFTEX3 189
     1                   (I, (IA(J,I),J=1,16) ,I=1,NSYMTB)                      DFTEX3 190
 1002 FORMAT(' Symbol Table'/' Current Entries   =',I7/                         DFTEX3 191
     $       ' Maximum Entries   =',I7/' PreDefined Entries='I7/                DFTEX3 192
     $       10000(I8,1X,8A4,8I6/))                                             DFTEX3 193
      WRITE(IOUTPT,1003) NLIBLK,MLIBLK,                                         DFTEX4  56
     1                   (I, (LIBLNK(J,I),J=1,10) ,I=1,NLIBLK)                  DFTEX4  57
 1003 FORMAT(/' LibLnk Table'/' Current Entries   =',I7/                        DFTEX4  58
     $        ' Maximum Entries   =',I7/                                        DFTEX4  59
     $        30000(I8,1X,8A4,2I6/))                                            -48p     4
      GO TO 10                                                                  DEBUGI  40
  300 R      = GETV(R1)                                                         DEBUGI  41
      R      = GETV(R2)                                                         DEBUGI  42
      I1     = INT(R1)                                                          DEBUGI  43
      I2 = INT(R2)                                                              DFTEXP  15
      CALL DUMPIT ('Dump of IA Array    ',IA(I1,1),I2)                          DFTEXP  16
      GO TO 10                                                                  DEBUGI  51
  400 KEYFLG = 1                                                                DFTEX4  61
      GOTO 10                                                                   DFTEX4  62
      END                                                                       DEBUGI  52
      SUBROUTINE DEFINI                                                         DEFINI   2
C                                                                               DEFINI   3
C              DEFINI INPUTS DATA FOR THE DEFINE COMMAND                        DEFINI   4
C                                                                               DEFINI   5
C              DEFINI USES   6 WORDS OF COMMWK                                  DEFINI   6
C                                                                               DEFINI   7
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON /IPARAM/ NPARAM, MPARAM, IPARAM(17,6000)                           -048t    1
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      DIMENSION KPARAM(2)                                                       DEFINI  12
      EQUIVALENCE                                                               DEFINI  13
     1                       (COMMWK(2),I),                                     DEFINI  14
     2      (COMMWK(3),JPARAM), (COMMWK(4),NEW),                                DEFINI  15
     3      (COMMWK(5),NUM), (COMMWK(6),V),                                     DEFINI  16
     4      (COMMWK(7),R),(KPARAM(1),NPARAM)                                    DEFINI  17
C                                                                               DEFINI  18
C              IF NEXT VAR NAME NUMERIC                                         DEFINI  19
  100 IF (GETV(V).NE.0.) GO TO 350                                              DEFINI  20
C              IF ..                                                            DEFINI  21
      IF (ITERM.NE.0) RETURN                                                    DEFINI  22
C              LOOK IN PARAM TABLE                                              DEFINI  23
      CALL TBLSCH (ISYMB, IPARAM, 17, NPARAM, 2, JPARAM)                        PARAM    3
C              IF THERE                                                         DEFINI  25
      IF (JPARAM.NE.0) GO TO 300                                                DEFINI  26
C              INDICATE NEW VARIABLE                                            DEFINI  27
      NEW    = 1                                                                DEFINI  28
C              INCR NUMBER OF PARAMETERS                                        DEFINI  29
      CALL MEMCK (KPARAM(1), KPARAM(2))                                         DEFINI  30
C              SET SEARCH PTR TO NEW ENTRY                                      DEFINI  31
      JPARAM = NPARAM                                                           DEFINI  32
C              MOVE NAME INTO TABLE                                             DEFINI  33
      DO 125 I = 1,8                                                            PARAM    4
  125 IPARAM(I,JPARAM) = ISYMB(I)                                               DEFINI  35
C              INDICATE NUMERIC                                                 DEFINI  36
      NUM    = 1                                                                DEFINI  37
C              IF VALUE IS NUMERIC                                              DEFINI  38
      R      = GETV(I)                                                          DEFINI  39
      IPARAM(10,JPARAM) = I                                                     PARAM    5
      IF (R .NE. 0.) GO TO 130                                                  DEFINI  41
C              INDICATE SYMBOLIC                                                DEFINI  42
      NUM    = 0                                                                DEFINI  43
C              IF ..                                                            DEFINI  44
      IF (ITERM.NE.0) GO TO 250                                                 DEFINI  45
C              MOVE SYMBOL INTO TABLE                                           DEFINI  46
      DO 128 I = 1,8                                                            PARAM    6
  128 IPARAM(9+I,JPARAM) = ISYMB(I)                                             PARAM    7
C              SET PAR TYPE                                                     DEFINI  49
  130 IPARAM(9,JPARAM) = NUM                                                    PARAM    8
      GO TO 100                                                                 DEFINI  51
  250 CALL MSG2 (26, IPARAM(1,JPARAM), DUM, DUM, DUM)                           DEFINI  52
      RETURN                                                                    DEFINI  53
  300 CALL GETCS                                                                DEFINI  54
      IF (ITERM.NE.0) GO TO 250                                                 DEFINI  55
      CALL MSG (12)                                                             DEFINI  56
      GO TO 100                                                                 DEFINI  57
  350 CALL MSG (20)                                                             DEFINI  58
      GO TO 100                                                                 DEFINI  59
      END                                                                       DEFINI  60
      SUBROUTINE DFTIN(ISYMTB,KONTXT,AA)                                        DFTIN    2
C                                                                               DFTIN    3
C                  THIS ROUTINE PROCESSES THE SET-DEFAULT COMMAND               DFTIN    4
C                                                                               DFTIN    5
C                  DFTIN USES .... WORDS OF COMMWK                              DFTIN    6
C                                                                               DFTIN    7
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               DFTIN    9
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FOR/    IFOR                                                     /FOR/    2
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON /ISVS  / ISSVPS(7),IZSVPS(3)                                       -041d    1
      COMMON /JOPS  / JSOP,JZOP,JSROP,JCFOP,ISSOPS(7),IZSOPS(3)                 -048b    1
      DIMENSION   ISYMTB(16,1),KONTXT(16,1),AA(1)                               KEYSIZ   7
      EQUIVALENCE (IKW,COMMWK(1)),(NKW,COMMWK(2)),                              DFTIN   18
     1            (LVAL,COMMWK(3)),(LKDAT,COMMWK(4)),                           DFTIN   19
     2            (INDX,COMMWK(5)),(ISIKW,COMMWK(6)),                           DFTIN   20
     3            (NAMPTR,COMMWK(7)),(ISNKW,COMMWK(8)),                         DFTIN   21
     4            (ISVAL,COMMWK(9)),(ISDAT,COMMWK(10)),                         DFTIN   22
     5            (LSDPTR,COMMWK(11)),                                          DFTIN   23
     6            (ISOP,COMMWK(13)),(ISVP,COMMWK(14))                           DFTIN   24
      REAL    DFTVAL(1024)                                                      bug      1
      INTEGER DFTTYP(1024)                                                      bug      2
       DATA IHOLTY /4HTYPE/                                                     DFTEXP  19
C                                                                               DFTEXP  20
      ITYPE = 1                                                                 DFTEXP  21
      IS    = 1                                                                 DFTEXP  22
C              FIRST FIND FOR = COMMAND-NAME                                    DFTIN   25
      CALL GETCS                                                                DFTIN   26
C              IF ..                                                            DFTIN   27
      IF (ITERM .EQ. 0)  GOTO 5                                                 DFTIN   28
C              ERROR  NO DATA                                                   DFTIN   29
   15 CALL MSG (78)                                                             DFTIN   30
      RETURN                                                                    DFTIN   31
5     if ( ISYMU(1) .eq. IFOR )     goto  10                                    DFTIN   32
      CALL MSG (6)                                                              DFTIN   33
      GOTO 35                                                                   DFTIN   34
C              GET COMMAND NAME                                                 DFTIN   35
   10 CALL GETCS                                                                DFTIN   36
      IF (ITERM .NE. 0)  GOTO 15                                                DFTIN   37
C              FIND COMMAND NAME IN TABLE                                       DFTIN   38
   20 DO 30 JOPCDT=1,NOPCDT                                                     DFTIN   39
          if ( ( KOMPAR( ISYMU, IOPCDT(1,JOPCDT), 4 ) .ne. 0 ) .or.             DFTIN   40
     1         ( KOMPAR( ISYMU, IOPCDT(5,JOPCDT), 2 ) .ne. 0 ) ) goto 40        DFTIN   41
   30 CONTINUE                                                                  DFTIN   42
C              NOT LEGAL COMMAND                                                DFTIN   43
      CALL MSG (3)                                                              DFTIN   44
   35 CALL SKPEOC                                                               DFTIN   45
      RETURN                                                                    DFTIN   46
   40 CONTINUE                                                                  DFTIN   47
C              CHECK FOR COMMAND USING ANOTHER COMMANDS TABLES                  DFTIN   48
C              AND CHANGE JOPCDT IF NECESSARY                                   DFTIN   49
      IF (IOPCDT(12,JOPCDT) .GE. 0)  GO TO 50                                   DFTIN   50
      JOPCDT = -IOPCDT(12,JOPCDT)                                               DFTIN   51
      CALL MSG2(75,IOPCDT(1,JOPCDT),JOPCDT,JOPCDT,JOPCDT)                       DFTIN   52
   50 CONTINUE                                                                  DFTIN   53
C              Don't allow SET-DEFAULT for the following command:               COMB02   9
C                 any sub-commands SPACE-CONDITIONS, SYSTEM-xx, ZONE-xx         COMB02  10
      IF ((JOPCDT.eq.9) .or. (IOPCDT(14,JOPCDT).eq.0) .or.                      DFTEXP  23
     $                       (IOPCDT(10,JOPCDT).eq.0) .or.                      DFTEXP  24
     $    ((JOPCDT.ge.ISSOPS(1)) .and. (JOPCDT.le.ISSOPS(6))) .or.              DFTEXP  25
     $    ((JOPCDT.ge.IZSOPS(1)) .and. (JOPCDT.le.IZSOPS(3))) ) THEN            DFTEXP  26
        CALL MSG(41)                                                            DFTEXP  27
        GO TO 35                                                                DFTEXP  28
      ENDIF                                                                     DFTEXP  29
C              SET SOME POINTERS                                                DFTIN   64
C              IKW IS THE FIRST KEYWORD FOR COMMAND                             DFTIN   65
      IKW    = IOPCDT(9,JOPCDT)                                                 DFTIN   66
C              NKW IS THE NUMBER OF KEYWORDS FOR THIS COMMAND                   DFTIN   67
      NKW    = IOPCDT(10,JOPCDT)                                                DFTIN   68
C              LVAL IS THE LENGTH OF THE VALUE ARRAY                            DFTIN   71
      LVAL   = IOPCDT(16,JOPCDT)                                                DFTIN   72
C              MAKE SURE THERE IS ENOUGH SPACE FOR VALUE ARRAY                  bug      3
      CALL FILLN(0,DFTTYP,LVAL)                                                 bug      4
      CALL FILLN(UNDEF(1),DFTVAL,LVAL)                                          bug      5
C             fill with UNUSED flag then replace with -9's in PRNTVL            bug      6
C              CHECK THAT COMMAND REQUIRES TYPE                                 DFTEXP  32
      IF (IABS(IOPCDT(24,JOPCDT)).GT.1) THEN                                    DFTEXP  33
        IS    = 2                                                               DFTEXP  34
C              LOOK FOR 'TYPE'                                                  DFTEXP  35
        CALL GETCS                                                              DFTEXP  36
        IF (ITYPLS(ISYMU(1)).NE.ITYPLS(IHOLTY)) THEN                            DFTEXP  37
C              TYPE NOT THERE; BACKSPACE OVER SYMBOL READ                       DFTEXP  38
          CALL BKSPAC                                                           DFTEXP  39
C              NO TYPE; ISSUE ERROR MESSAGE                                     DFTEXP  40
          CALL MSG2(52,KONTXT(1,IKW),I,I,I)                                     DFTEXP  41
        ELSE                                                                    DFTEXP  42
C              TYPE FOUND; INPUT DATA                                           DFTEXP  43
          CALL SCAN0(AA(1),KONTXT(1,IKW),1,JK,DFTVAL,DFTTYP,NFND)               DFTEXP  44
          IF(NOVAL(DFTVAL).NE.0 .AND. NFND.NE.0) THEN                           DFTEXP  45
            ITYPE = ISYMTB(12,ITYPLS(DFTVAL))                                   DFTEXP  46
          END IF                                                                DFTEXP  47
        END IF                                                                  DFTEXP  48
      END IF                                                                    DFTEXP  49
      IF(IOPCDT(24,JOPCDT).LT.0 .AND. ITYPE.GT.0) THEN                          DFTEXP  50
          IKW = IKW + (ITYPE-1)*NKW                                             DFTEXP  51
      END IF                                                                    DFTEXP  52
      JOPcur  = JOPCDT                                                          DFTEXP  53
      JREFcur = ITYPE                                                           DFTEXP  54
      JTYPcur = ITYPE                                                           DFTEX4  63
C              GO GET ALL THE KEYWORD VALUES                                    DFTIN   75
C              TAKE INTO ACCOUNT THAT TYPE KEYWORD IS ALREADY                   DFTEXP  55
C              FOUND (skip to 2nd keyword for TYPE commands)                    DFTEXP  56
      CALL SCAN1(0,AA,KONTXT(1,IKW),NKW,DFTVAL,DFTTYP)                          DFTEXP  57
C              PRINT INPUT TABLE                                                DFTIN   78
C     CALL PRNTIN(0,ISYMTB,KONTXT(1,IKW),NKW,DFTVAL)                            DFTEXP  58
C              PICK UP BEGINNING OF DEFAULT VALUES                              COMB02  31
      IDFTS = IOPCDT(15,JOPCDT) + (4*(ITYPE-1)+3)*IOPCDT(23,JOPCDT) - 1         COMB02  32
C              START OF DEFAULT TYPES                                           COMB02  33
      IDFTT = IOPCDT(15,JOPCDT) + (4*(ITYPE-1)+2)*IOPCDT(23,JOPCDT) - 1         COMB02  34
C              PICK UP BEGINNING OF DOE-2 DEFAULT VALUES                        DFTEX2   3
      IDFTS2= IOPCDT(15,JOPCDT) + (4*(ITYPE-1)+1)*IOPCDT(23,JOPCDT) - 1         DFTEX2   4
C              START OF DOE-2 DEFAULT TYPES                                     DFTEX2   5
      IDFTT2= IOPCDT(15,JOPCDT) + (4*(ITYPE-1)  )*IOPCDT(23,JOPCDT) - 1         DFTEX2   6
C              WHERE 1ST KEYWORD VALUE GOES IN DEFAULT ARRAY                    COMB02  35
      IKVS = KONTXT(12,IKW) - 1                                                 COMB02  36
C              SUBSTITUTE SPECIFIED VALUES (skip TYPE keyword)                  COMB02  37
      DO I=IS,LVAL                                                              COMB02  38
          IF (ITYPLS(DFTVAL(I)).NE.ITYPLS(UNDEF(1)) .and.                       DFTEXP  59
     $        ITYPLS(AA(IDFTS+IKVS+I)).NE.ITYPLS(UNDEF(2))) THEN                DFTEXP  60
              AA(IDFTS+IKVS+I) = DFTVAL(I)                                      DFTEXP  61
              AA(IDFTT+IKVS+I) = TYPLS(IPACKB(1,5,7,AA(IDFTT+IKVS+I)))          DFTEXP  62
              IF(ISDflg .eq. 2)  THEN                                           DFTEX2   7
                AA(IDFTT +IKVS+I)=TYPLS(IPACKB(1,5,1,AA(IDFTT +IKVS+I)))        DFTEX2   8
                AA(IDFTS2+IKVS+I)=DFTVAL(I)                                     DFTEX2   9
                AA(IDFTT2+IKVS+I)=TYPLS(IPACKB(1,5,1,AA(IDFTT2+IKVS+I)))        DFTEX2  10
              ENDIF                                                             DFTEX2  11
          END IF                                                                DFTEXP  63
      END DO                                                                    COMB02  43
      RETURN                                                                    COMB02  44
      END                                                                       DFTIN   87
      SUBROUTINE DUMMY(INFILE)                                                  DUMMY    2
C                            DUMMY ROUTINE TO FORCE I/O LOADING                 DUMMY    3
      REWIND INFILE                                                             DUMMY    4
      ENDFILE INFILE                                                            DUMMY    5
      BACKSPACE INFILE                                                          DUMMY    6
      WRITE (INFILE) INFILE                                                     DUMMY    7
      READ (INFILE,1000) INFILE                                                 DUMMY    8
 1000 FORMAT (A1)                                                               DUMMY    9
      RETURN                                                                    DUMMY   10
      END                                                                       DUMMY   11
      subroutine  DUMPIT( it, IA, L )                                           PC22    36
c---                                                                            PC22    37
c--- dump it(1-5) as title (5a4), and ten IA's per line                         PC22    38
c---   v3 : write title on right hand side                                      PC22    39
c---   d2 : doe2 version ( uppercase ASCII only )                               PC22    40
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
c---                                                                            PC22    42
      INTEGER      it(5), IA(1)                                                 PC22    43
      CHARACTER*5  ifmt(60)                                                     PC22    44
      EQUIVALENCE  ( IW, RW )                                                   PC22    45
      integer      izerofl, izerofl0                                            PC22    46
c---                                                                            PC22    48
      data  inc0/10/                                                            PC22    49
C     data  ioutpt/6/                                                           PC22    50
c---                                                                            PC22    51
      IF ( L .lt. 1 )  THEN                                                     PC22    52
          write( IOUTPT, '(1x,i7,1h*,98x,1x,5a4)' )  L, it                      PC22    53
          return                                                                PC22    54
      ENDIF                                                                     PC22    55
      IF ( L .ne. 1 )      write( IOUTPT, '(1x)' )                              PC22    56
      inc    = inc0                                                             PC22    57
      DO  6000  J1 = 1 , L , INC                                                PC22    58
          J2 = MIN0( J1+INC-1, L )                                              PC22    59
          ifmt(1) = '(  1x'                                                     -048   122
          mf = 1                                                                PC22    61
          IF ( L .ne. 1 )    THEN                                               PC22    62
              ifmt(mf+1) = ',  i6'                                              -048   123
              ifmt(mf+2) = ', 1H*'                                              -048   124
              mf = mf + 2                                                       PC22    65
          ELSE                                                                  PC22    66
              ifmt(mf+1) = ',5A4,'                                              -048   125
              ifmt(mf+2) = "' : '"                                              -048   126
              mf = mf + 2                                                       PC22    69
          ENDIF                                                                 PC22    70
          DO  5000  J = J1 , J2                                                 PC22    71
              IW = IA(J)                                                        PC22    72
c---------------- ck if a4 format                                               PC22    73
              IX = IW                                                           PC22    74
              DO 200  K = 1 , 4                                                 PC22    75
                  IXX = IX .and. 255                                            PC22    76
c--  ctrl chars                                                                 PC22    77
                  if (    ( ixx .lt. 32 )                                       PC22    78
c--  [ and above (but not lowercase or {}                                       PC22    79
     1               .or.(( ixx .ge. 94 ).and.( ixx .le. 95))                   PC22    80
     1               .or. ( ixx .ge. 126).or. ( ixx .eq. 124)                   PC22    81
c--  !"#$%&'()*+,                                                               PC22    82
C    1               .or.(( ixx .ge. 33 ).and.( ixx .le. 44 ))                  PC22    83
c--  "                                                                          PC22    84
     1               .or. ( ixx .eq. 34 )                                       PC22    85
c--  ;<=>?@                                                                     PC22    86
C    1               .or.(( ixx .ge. 59 ).and.( ixx .le. 64 ))                  PC22    87
c--  ?@                                                                         PC22    88
     1               .or.(( ixx .ge. 63 ).and.( ixx .le. 64 ))                  PC22    89
     2               )  goto  300                                               PC22    90
                  IX = IX / 256                                                 PC22    91
200           CONTINUE                                                          PC22    92
              ifmt(mf+1) = ',2H "'                                              -048   127
              ifmt(mf+2) = 'A4,1H'                                              -048   128
              ifmt(mf+3) = '", 3X'                                              -048   129
              mf = mf + 3                                                       PC22    96
              GOTO  5000                                                        PC22    97
C--- CK INTEGER FORMAT                                                          PC22    98
300           IF( IABS( IW ) .GT. 19999999 )  GOTO  400                         PC22c    3
                  ifmt(mf+1) = ',I8 ,'                                          -048   130
                  ifmt(mf+2) = '   2X'                                          -048   131
                  mf = mf + 2                                                   PC22   102
                  GOTO  5000                                                    PC22   103
400           continue                                                          PC22   104
c--- ck nan                                                                     PC22   105
cc            if ( (iw .and. '7f800000'x) .ne. '7f800000'x)  goto  500          PC22   106
cc                ifmt(mf+1) = 5h,1h#,                                          PC22   107
cc                ifmt(mf+2) = 5hz8,1x                                          PC22   108
cc                mf = mf + 2                                                   PC22   109
cc                GOTO  5000                                                    PC22   110
C--- MUST BE F.P.                                                               PC22   111
500           ifmt(mf+1) = '    ,'                                              -048   132
              mf = mf + 1                                                       PC22   113
                  IFMT(MF+1) = 'F10.7'                                          -048   133
                  IF( ABS( RW ) .ge. 1.    )  IFMT(MF+1) = 'F10.6'              -048   134
                  IF( ABS( RW ) .ge. 10.   )  IFMT(MF+1) = 'F10.5'              -048   135
                  IF( ABS( RW ) .ge. 100.  )  IFMT(MF+1) = 'F10.4'              -048   136
                  IF( ABS( RW ) .ge. 1000. )  IFMT(MF+1) = 'F10.3'              -048   137
                  IF( ABS( RW ) .ge. 10000.)  IFMT(MF+1) = 'F10.2'              -048   138
                  IF( ABS( RW ) .ge. 100000.) IFMT(MF+1) = 'F10.1'              -048   139
                  IF( ABS( RW ) .ge. 1000000.)IFMT(MF+1) = 'F10.0'              -048   140
                  IF( ABS( RW ) .ge. 1.0e7 )  IFMT(MF+1) = 'e10.4'              -048   141
                  IF( ABS( RW ) .le. 1.0e-4 ) IFMT(MF+1) = 'E10.4'              -048   142
              mf = mf + 1                                                       PC22   124
5000      CONTINUE                                                              PC22   125
          izerofl = 1                                                           PC22   126
          DO  J = J1 , J2                                                       PC22   127
              if( IA(J) .ne. 0 )   izerofl = 0                                  PC22   128
          ENDDO                                                                 PC22   129
          IF ( J1 .eq. 1 )  THEN                                                PC22   130
              IF ( L .ne. 1 )   THEN                                            PC22   131
                  DO  j = j2+1 , inc                                            PC22   132
                      mf = mf + 1                                               PC22   133
                      ifmt(mf) = ', 10x'                                        -048   143
                  ENDDO                                                         PC22   135
                  ifmt(mf+1) = ',  1x'                                          -048   144
                  ifmt(mf+2) = ',5a4,'                                          -048   145
                  ifmt(mf+3) = "':' ,"                                          -048   146
                  ifmt(mf+4) = 'i3  )'                                          -048   147
                  if ( L .gt. 999  )    ifmt(mf+4) = 'i4  )'                    -048   148
                  if ( L .gt. 9999 )    ifmt(mf+4) = 'i5  )'                    -048   149
                  if ( L .gt. 99999)    ifmt(mf+4) = 'i6  )'                    -048   150
                  WRITE( IOUTPT, ifmt )   J1, ( IA(J), J=J1,J2 ), it, L         PC22   143
               ELSE                                                             PC22   144
                  ifmt(mf+1) = '    )'                                          -048   151
                  WRITE( IOUTPT, ifmt )   it, IA(1)                             PC22   146
              ENDIF                                                             PC22   147
           ELSE                                                                 PC22   148
              ifmt(mf+1) = ')    '                                              -048   152
              IF ( izerofl .eq. 0 )    THEN                                     PC22   150
                  WRITE( IOUTPT, ifmt )   J1, ( IA(J), J=J1,J2 )                PC22   151
               ELSE                                                             PC22   152
                  if( izerofl0 .eq. 0 )                                         PC22   153
     1                  write( ioutpt, '(1x,i6,1h*''--all zeros--'')' )         PC22   154
     2                                      J1                                  PC22   155
              ENDIF                                                             PC22   156
          ENDIF                                                                 PC22   157
          FLUSH( IOUTPT )                                                       -048   153
          izerofl0 = izerofl                                                    PC22   159
6000  CONTINUE                                                                  PC22   160
      RETURN                                                                    PC22   161
      END                                                                       PC22   162
      SUBROUTINE  DUMPIT2 ( IT, IA, nn, mm )                                    PC22   163
C---                                                                            PC22   164
C--- DUMP SUBROUTINE FOR DEBUGGING ,  dump ia(nn,mm)                            PC22   165
C---                                                                            PC22   166
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
C---                                                                            PC22   168
      DIMENSION    IT(5), IA(10000)                                             PC22   169
      CHARACTER*5  IFMT(60)                                                     PC22   170
      EQUIVALENCE  ( IW, RW )                                                   PC22   171
      dimension    iout(64)                                                     PC22   172
      INTEGER IBLANK                                                            PC22   173
C---                                                                            PC22   175
C      data  ioutpt /6/                                                         PC22   176
      data  inc    /14/                                                         PC22   177
      data iblank/4h    /                                                       PC22   178
C---                                                                            PC22   179
      WRITE( IOUTPT, 1 )  IT, nn, mm                                            PC22   180
1     FORMAT(/,1x,10(1H-),1X,5A4,4x,'nn='I6,4x,'mm='i6,1x,32(1h-))              PC22   181
      IF ( nn .le. 14 )    THEN                                                 PC22   182
          inc = 14                                                              PC22   183
        ELSE                                                                    PC22   184
          inc = 10                                                              PC22   185
      END IF                                                                    PC22   186
      l = nn * mm                                                               PC22   187
      IFMT(1) = '(1X  '                                                         PC22   188
      DO  600  mm1 = 1 , mm                                                     PC22   189
          j0 = (mm1-1) * nn                                                     PC22   190
          DO  550   nn1 = 1 , nn , inc                                          PC22   191
              j1 = j0 + nn1                                                     PC22   192
              j2 = min( j0+nn, j1-1+inc )                                       PC22   193
              MF = 1                                                            PC22   194
              nout = 0                                                          PC22   195
              ifmt(mf+1) = '1h(i5'                                              PC22   196
              ifmt(mf+2) = ',1h,,'                                              PC22   197
              ifmt(mf+3) = 'i3'')'''                                            PC22   198
              ifmt(mf+4) = 'i5''*'''                                            PC22   199
              iout(nout+1) = nn1                                                PC22   200
              iout(nout+2) = mm1                                                PC22   201
              iout(nout+3) = j1                                                 PC22   202
              IF ( nn1 .ne. 1 )    THEN                                         PC22   203
                  ifmt(mf+3) = 'a3'')'''                                        PC22   204
                  iout(nout+2) = iblank                                         PC22   205
              END IF                                                            PC22   206
              mf = mf + 4                                                       PC22   207
              nout = nout + 3                                                   PC22   208
              DO  500  J = J1 , J2                                              PC22   209
                  iout(nout+1) = ia(j)                                          PC22   210
                  nout = nout + 1                                               PC22   211
                  IW = IA(J)                                                    PC22   212
C--- CK IF A4 FORMAT                                                            PC22   213
                  IX = IW                                                       PC22   214
                  DO 200  K = 1 , 4                                             PC22   215
                      IXX = IX .AND. 255                                        PC22   216
c-- $ %                                                                         PC22   217
                      IF( (IXX .LT. 32) .OR. (IXX .GT. 90) )  GOTO  300         PC22   218
c-- ( )                                                                         PC22   219
                      if( (ixx .eq. 36) .or. (ixx .eq. 37) )  goto  300         PC22   220
c-- ,                                                                           PC22   221
                      if( (ixx .eq. 40) .or. (ixx .eq. 41) )  goto  300         PC22   222
c-- :                                                                           PC22   223
                      if( ixx .eq. 44 )  goto  300                              PC22   224
c-- ;                                                                           PC22   225
                      if( ixx .eq. 58 )  goto  300                              PC22   226
c-- =                                                                           PC22   227
                      if( ixx .eq. 59 )  goto  300                              PC22   228
c-- ? @                                                                         PC22   229
                      if( ixx .eq. 61 )  goto  300                              PC22   230
                      if( (ixx .eq. 63) .or. (ixx .eq. 64) )  goto  300         PC22   231
                          IX = IX / 256                                         PC22   232
200               CONTINUE                                                      PC22   233
                  IFMT(MF+1) = ',2h "'                                          PC22   234
                  IFMT(MF+2) = 'A4,1h'                                          PC22   235
                  IFMT(MF+3) = '", 1x'                                          PC22   236
                  MF = MF + 3                                                   PC22   237
                  GOTO  500                                                     PC22   238
C--- CK INTEGER FORMAT                                                          PC22   239
300           IF( IABS( IW ) .GT. 999999 )  GOTO  400                           PC22   240
                  IFMT(MF+1) = ',  I8'                                          PC22   241
                  if( iabs( iw ) .le. 999999 )  ifmt(mf+1) = 'i7,1x'            PC22   242
                  MF = MF + 1                                                   PC22   243
                  GOTO  500                                                     PC22   244
C--- MUST BE F.P.                                                               PC22   245
400               IFMT(MF+1) = '    ,'                                          PC22   246
                  MF = MF + 1                                                   PC22   247
                  IFMT(MF+1) = ' f8.6'                                          PC22   248
                  IF( ABS( RW ) .ge. 1.    )  IFMT(MF+1) = ' F8.5'              PC22   249
                  IF( ABS( RW ) .ge. 10.   )  IFMT(MF+1) = ' F8.4'              PC22   250
                  IF( ABS( RW ) .ge. 100.  )  IFMT(MF+1) = ' F8.3'              PC22   251
                  IF( ABS( RW ) .ge. 1000. )  IFMT(MF+1) = ' F8.2'              PC22   252
                  IF( ABS( RW ) .ge. 10000.)  IFMT(MF+1) = ' F8.1'              PC22   253
                  IF( ABS( RW ) .ge. 100000.) IFMT(MF+1) = ' F8.0'              PC22   254
                  IF( ABS( RW ) .ge. 1.0e6 )  IFMT(MF+1) = 'e11.5'              PC22   255
                  IF( ABS( RW ) .le. 1.0e-4 ) IFMT(MF+1) = 'E11.5'              PC22   256
                  MF = MF + 1                                                   PC22   257
500           CONTINUE                                                          PC22   258
              IFMT(MF+1) = ')    '                                              PC22   259
              WRITE( IOUTPT, IFMT )  (iout(j), j=1,nout)                        PC22   260
              FLUSH( IOUTPT )                                                   -048   154
550       continue                                                              PC22   262
600   CONTINUE                                                                  PC22   263
      RETURN                                                                    PC22   264
      END                                                                       PC22   265
      subroutine  ECHO                                                          ECHO     2
c                                                                               ECHO     3
c--- echo  a card image if it has not already been echoed                       ECHO     4
c----- if mEchoF = 1 then echo filename and line even when                      ECHO     5
c----- during '##includesilent' , used by LEEDER()                              ECHO     6
c                                                                               ECHO     7
      USE ERR_MOD                                                               -048   155
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
      common  /MINC/   NINC, incfil(9), incnum(9), incsil(9), isilnt            /MINC/   2
     1               , incprL                                                   /MINC/   3
     2               , incprf, curfnm, incfnm(9)                                /MINC/   4
      character*256  incprf, curfnm, incfnm                                     -042L5b 21
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  -042L5b 42
      COMMON /DFT_STR/ numDFT,idftStr(3,1024)                                   -042L5b 19
c                                                                               ECHO    13
      character*1 incTxt(10), cstar                                             ECHO    14
      character*2 StkTxt(33)                                                    ECHO    15
        data      incTxt / ' ','1','2','3','4','5','6','7','8','9' /            ECHO    16
        data      StkTxt /                                                      ECHO    17
     1                 '  ','.1','.2','.3','.4','.5','.6','.7','.8','.9'        ECHO    18
     2               , '.a','.b','.c','.d','.e','.f','.g','.h','.i','.j'        ECHO    19
     3               , '.k','.l','.m','.n','.o','.p','.q','.r','.s','.t'        ECHO    20
     4               , '.u','.v','.w' /                                         ECHO    21
c****************************************************************               ECHO    22
c                                                                               ECHO    23
c---- if already echoed                                                         ECHO    24
c                                                                               ECHO    25
      if ( ( IECHO .ne. 0 ) .or.                                                ECHO    26
     1     (( NOECHO .ne. 0 ) .and. ( mEchoF .eq. 0 )) )     return             ECHO    27
      if ( NINC .gt. 0 )     then                                               ECHO    28
          if ( ( isilnt .ne. 0 ) .and. ( mEchoF .eq. 0 ) )    then              ECHO    29
              goto  900                                                         ECHO    30
          else                                                                  ECHO    31
              if ( ( isilnt .ne. 0 ) .and. ( mEchoF .ne. 0 ) )    then          ECHO    32
                  write ( ioutpt, 1 )  curfnm                                   ECHO    33
1                 format( ' ********** include file : ', a )                    ECHO    34
              endif                                                             ECHO    35
          endif                                                                 ECHO    36
      endif                                                                     ECHO    37
      if ( IDBLSP .ne. 0 )     write( IOUTPT, 2 )                               ECHO    38
2     format( )                                                                 ECHO    39
      cstar = '*'                                                               ECHO    40
      if ( ( mppCmd .ne. 0 ) .or. ( mDefP  .ne. 0 ) )    cstar = '#'            ECHO    41
      if ( ( mifskp .ne. 0 ) .and. ( mppCmd .eq. 0 ) )     cstar = '-'          ECHO    42
      i1 = KARDI1                                                               ECHO    43
200   i2 = min( KARDI2-1, i1+79 )                                               ECHO    44
      FLUSH( IOUTPT )                                                           -048   156
      IF( KRDNUM .LT. 10000) THEN                                               DFTEX3 194
        write ( ioutpt, 3 )  incTxt(NINC+1), StkTxt(mIfstN+1),                  DFTEX3 195
     1        StkTxt(mStkLv+1),cstar, KRDNUM, cstar, (KARD(i), i=i1,i2)         DFTEX3 196
      ELSE                                                                      DFTEX3 197
        write ( ioutpt, 4 )  incTxt(NINC+1), StkTxt(mIfstN+1),                  DFTEX3 198
     1        StkTxt(mStkLv+1),cstar, KRDNUM, cstar, (KARD(i), i=i1,i2)         DFTEX3 199
      ENDIF                                                                     DFTEX3 200
      CALL FILLN( IBLANK,IerrLineTxt(1),25)                                     -042L5b 44
      CALL A1A4 ( KARD(i1),IerrLineTxt(1), INT((i2-i1)/4)+1 )                   -042L5b 45
    3   format( 1x,a1,a2,a2,a1,i4,1x,a1,1x,82a1 )                               DFTEX3 201
    4   format( 1x,a1,a2,a2,a1,i5,   a1,1x,82a1 )                               DFTEX3 202
      if ( i2 .lt. KARDI2-1 )    then                                           ECHO    48
          i1 = i1 + 80                                                          ECHO    49
          goto  200                                                             ECHO    50
      endif                                                                     ECHO    51
c---- indicate already echoed                                                   ECHO    52
900   IECHO = 1                                                                 ECHO    53
      return                                                                    ECHO    54
      end                                                                       ECHO    55
      SUBROUTINE FILLN (X, A, N)                                                FILLN    2
C                                                                               FILLN    3
C              FILLN FILLS N WORDS OF ARRAY A WITH X                            FILLN    4
C                                                                               FILLN    5
      DIMENSION A(1)                                                            FILLN    6
C                                                                               FILLN    7
      IF( N .LT. 1 )  RETURN                                                    FILLN    8
      DO 100 I = 1,N                                                            FILLN    9
  100 A(I)   = X                                                                FILLN   10
      RETURN                                                                    FILLN   11
      END                                                                       FILLN   12
      SUBROUTINE FIT(CTYPE,NUMDAT,DATA,C)                                       FIT      2
C                                                                               FIT      3
C                                                                               FIT      4
C                            THIS ROUTINUE CONTROLS THE COMPUTATION             FIT      5
C                            OF VARIOUS TYPES OF CURVE-FITS                     FIT      6
C                                                                               FIT      7
C                                                                               FIT      8
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON     /FITCOM/    D(7,7),ZZ(7)                                       FIT     11
      DIMENSION              X(20),Y(20),Z(20),C(6),DATA(3,20),                 FIT     12
     1                       XSQ(20),YSQ(20),XCUBE(20),YCUBE(20),               FIT     13
     2                       DIFF(20),ZC(20),PERDIF(20)                         FIT     14
      INTEGER                BILIN,QUAD,BIQUAD,CTYPE,CUBIC                      FIT     15
      DATA                   LIN/1/, BILIN/2/, QUAD/3/, BIQUAD/4/,              FIT     16
     1                       CUBIC/5/                                           FIT     17
      RMSD   = 0.0                                                              FIT     18
      DO 25 I=1,7                                                               FIT     19
      ZZ(I)  = 0.0                                                              FIT     20
      DO 25 J=1,7                                                               FIT     21
      D(I,J) = 0.0                                                              FIT     22
   25 CONTINUE                                                                  FIT     23
      N      = NUMDAT - 1                                                       FIT     24
C                                                                               FIT     25
      IF ((CTYPE .EQ. BILIN) .OR. (CTYPE .EQ. BIQUAD)) GOTO 100                 FIT     26
C                                                                               FIT     27
C                                                                               FIT     28
      ALPHA  = DATA(1,1)                                                        FIT     29
      ZETA   = DATA(2,1)                                                        FIT     30
      DO 150 I=1,N                                                              FIT     31
      X(I)   = DATA(1,1+I)                                                      FIT     32
      Z(I)   = DATA(2,1+I)                                                      FIT     33
      XSQ(I) = X(I) * X(I)                                                      FIT     34
      XCUBE(I) = X(I) * XSQ(I)                                                  FIT     35
  150 CONTINUE                                                                  FIT     36
      GOTO 200                                                                  FIT     37
C                                                                               FIT     38
  100 ALPHA  = DATA(1,1)                                                        FIT     39
      BETA   = DATA(2,1)                                                        FIT     40
      ZETA   = DATA(3,1)                                                        FIT     41
      DO 50 I=1,N                                                               FIT     42
      X(I)   = DATA(1,1+I)*1.00001                                              FIT     43
      Y(I)   = DATA(2,1+I)*1.00001                                              FIT     44
      Z(I)   = DATA(3,1+I)                                                      FIT     45
      XSQ(I) = X(I) * X(I)                                                      FIT     46
      YSQ(I) = Y(I) * Y(I)                                                      FIT     47
      XCUBE(I) = X(I) * XSQ(I)                                                  FIT     48
      YCUBE(I) = Y(I) * YSQ(I)                                                  FIT     49
   50 CONTINUE                                                                  FIT     50
  200 CONTINUE                                                                  FIT     51
C                                                                               FIT     52
C              FILL IN D AND ZZ                                                 FIT     53
C                                                                               FIT     54
      D(1,1) = N                                                                FIT     55
      D(1,3) = 1                                                                FIT     56
      D(2,3) = ALPHA                                                            FIT     57
      D(3,3) = 0                                                                FIT     58
      ZZ(3)  = ZETA                                                             FIT     59
      DO 300 I=1,N                                                              FIT     60
      D(1,2) = D(1,2) + X(I)                                                    FIT     61
      D(2,2) = D(2,2) + XSQ(I)                                                  FIT     62
      ZZ(1)  = ZZ(1) + Z(I)                                                     FIT     63
      ZZ(2)  = ZZ(2) + Z(I) * X(I)                                              FIT     64
  300 CONTINUE                                                                  FIT     65
      IF (CTYPE .EQ. LIN) GOTO 600                                              FIT     66
      IF (CTYPE .EQ. BILIN) GOTO 450                                            FIT     67
C                                                                               FIT     68
      D(2,3)  = 0.0                                                             FIT     69
      ZZ(3)   = 0.0                                                             FIT     70
      DO 500 I=1,N                                                              FIT     71
      D(2,3) = D(2,3) + XCUBE(I)                                                FIT     72
      D(3,3) = D(3,3) + XSQ(I) * XSQ(I)                                         FIT     73
      ZZ(3)  = ZZ(3) + XSQ(I) * Z(I)                                            FIT     74
  500 CONTINUE                                                                  FIT     75
      D(1,3) = D(2,2)                                                           FIT     76
      D(1,4) = 1                                                                FIT     77
      D(2,4) = ALPHA                                                            FIT     78
      D(3,4) = ALPHA * ALPHA                                                    FIT     79
      D(4,4) = 0                                                                FIT     80
      ZZ(4)  = ZETA                                                             FIT     81
      IF (CTYPE .EQ. QUAD) GOTO 600                                             FIT     82
      IF (CTYPE .EQ. BIQUAD) GOTO 540                                           FIT     83
C                                                                               FIT     84
      D(3,4) = 0.0                                                              FIT     85
      ZZ(4)  = 0.0                                                              FIT     86
      DO 510 I=1,N                                                              FIT     87
      D(3,4) = D(3,4) + XSQ(I) * XSQ(I) * X(I)                                  FIT     88
      D(4,4) = D(4,4) + XCUBE(I) * XCUBE(I)                                     FIT     89
      ZZ(4)  = ZZ(4) + XCUBE(I) * Z(I)                                          FIT     90
  510 CONTINUE                                                                  FIT     91
      D(1,4) = D(2,3)                                                           FIT     92
      D(2,4) = D(3,3)                                                           FIT     93
      D(1,5) = 1                                                                FIT     94
      D(2,5) = ALPHA                                                            FIT     95
      D(3,5) = ALPHA * ALPHA                                                    FIT     96
      D(4,5) = ALPHA * D(3,5)                                                   FIT     97
      D(5,5) = 0                                                                FIT     98
      ZZ(5)  = ZETA                                                             FIT     99
      GOTO 600                                                                  FIT    100
C                                                                               FIT    101
  540 D(1,4) = 0.0                                                              FIT    102
      D(2,4) = 0.0                                                              FIT    103
      D(3,4) = 0.0                                                              FIT    104
      ZZ(4)  = 0.0                                                              FIT    105
      DO 550 I=1,N                                                              FIT    106
      D(1,4) = D(1,4) + Y(I)                                                    FIT    107
      D(2,4) = D(2,4) + X(I) * Y(I)                                             FIT    108
      D(3,4) = D(3,4) + XSQ(I) * Y(I)                                           FIT    109
      D(4,4) = D(4,4) + YSQ(I)                                                  FIT    110
      D(2,5) = D(2,5) + X(I) * YSQ(I)                                           FIT    111
      D(3,5) = D(3,5) + XSQ(I) * YSQ(I)                                         FIT    112
      D(4,5) = D(4,5) + YCUBE(I)                                                FIT    113
      D(5,5) = D(5,5) + YSQ(I) * YSQ(I)                                         FIT    114
      D(3,6) = D(3,6) + XCUBE(I) * Y(I)                                         FIT    115
      D(5,6) = D(5,6) + X(I) * YCUBE(I)                                         FIT    116
      ZZ(4)  = ZZ(4) + Z(I) * Y(I)                                              FIT    117
      ZZ(5)  = ZZ(5) + Z(I) * YSQ(I)                                            FIT    118
      ZZ(6)  = ZZ(6) + Z(I) * X(I) * Y(I)                                       FIT    119
  550 CONTINUE                                                                  FIT    120
      D(1,5) = D(4,4)                                                           FIT    121
      D(1,6) = D(2,4)                                                           FIT    122
      D(2,6) = D(3,4)                                                           FIT    123
      D(4,6) = D(2,5)                                                           FIT    124
      D(6,6) = D(3,5)                                                           FIT    125
      D(1,7) = 1                                                                FIT    126
      D(2,7) = ALPHA                                                            FIT    127
      D(3,7) = ALPHA * ALPHA                                                    FIT    128
      D(4,7) = BETA                                                             FIT    129
      D(5,7) = BETA * BETA                                                      FIT    130
      D(6,7) = ALPHA * BETA                                                     FIT    131
      D(7,7) = 0                                                                FIT    132
      ZZ(7)  = ZETA                                                             FIT    133
      GOTO 600                                                                  FIT    134
C                                                                               FIT    135
  450 D(1,3) = 0.0                                                              FIT    136
      D(2,3) = 0.0                                                              FIT    137
      ZZ(3)  = 0.0                                                              FIT    138
      DO 400 I=1,N                                                              FIT    139
      D(1,3) = D(1,3) + Y(I)                                                    FIT    140
      D(2,3) = D(2,3) + X(I) * Y(I)                                             FIT    141
      D(3,3) = D(3,3) + YSQ(I)                                                  FIT    142
      ZZ(3)  = ZZ(3) + Z(I) * Y(I)                                              FIT    143
  400 CONTINUE                                                                  FIT    144
      D(1,4) = 1                                                                FIT    145
      D(2,4) = ALPHA                                                            FIT    146
      D(3,4) = BETA                                                             FIT    147
      D(4,4) = 0                                                                FIT    148
      ZZ(4)  = ZETA                                                             FIT    149
C                                                                               FIT    150
C              MAKE D SYMMETRIC                                                 FIT    151
C                                                                               FIT    152
  600 DO 650 I=1,7                                                              FIT    153
      DO 650 J=1,7                                                              FIT    154
      D(J,I) = D(I,J)                                                           FIT    155
  650 CONTINUE                                                                  FIT    156
C                                                                               FIT    157
      IF (CTYPE .EQ. LIN) GOTO 700                                              FIT    158
      IF (CTYPE .EQ. BIQUAD) GOTO 750                                           FIT    159
      IF (CTYPE .EQ. CUBIC) GOTO 775                                            FIT    160
      CALL FITCOF(4,C,IERR)                                                     FIT    161
      IF(CTYPE .EQ. QUAD)  GOTO 785                                             FIT    162
      C(4)   = C(3)                                                             FIT    163
      C(3)   = 0.0                                                              FIT    164
      GOTO 785                                                                  FIT    165
  700 CALL FITCOF(3,C,IERR)                                                     FIT    166
      GOTO 785                                                                  FIT    167
  750 CALL FITCOF(7,C,IERR)                                                     FIT    168
      GOTO 785                                                                  FIT    169
  775 CALL FITCOF(5,C,IERR)                                                     FIT    170
C                                                                               FIT    171
C              CALC THINGS TO BE PRINTED                                        FIT    172
C                                                                               FIT    173
  785 IF(MSGLVL .LE. 4) RETURN                                                  FIT    174
      IF(IERR .NE. 0)  RETURN                                                   FIT    175
      IF((CTYPE.EQ.BILIN).OR.(CTYPE.EQ.BIQUAD))  GOTO 850                       FIT    176
  795 DO 800 I=1,N                                                              FIT    177
      ZC(I)  = C(1) + C(2)*X(I) + C(3)*XSQ(I) + C(4)*XCUBE(I)                   FIT    178
      DIFF(I)= Z(I) - ZC(I)                                                     FIT    179
      DIFFSQ = DIFF(I)*DIFF(I)                                                  FIT    180
      PERDIF(I) = 99999.                                                        FIT    181
      IF(Z(I) .NE. 0.0)  PERDIF(I) = ABS(DIFF(I)/Z(I))*100.0                    FIT    182
      RMSD   = RMSD + DIFFSQ                                                    FIT    183
  800 CONTINUE                                                                  FIT    184
      GOTO 900                                                                  FIT    185
  850 DO 875 I=1,N                                                              FIT    186
      X(I)   = X(I)/1.00001                                                     FIT    187
      Y(I)   = Y(I)/1.00001                                                     FIT    188
      ZC(I)  = C(1) + C(2)*X(I) + C(3)*XSQ(I) + C(4)*Y(I) +                     FIT    189
     1               C(5)*YSQ(I) + C(6)*X(I)*Y(I)                               FIT    190
      DIFF(I)= Z(I) - ZC(I)                                                     FIT    191
      DIFFSQ = DIFF(I)*DIFF(I)                                                  FIT    192
      PERDIF(I) = 99999.                                                        FIT    193
      IF(Z(I) .NE. 0.0)  PERDIF(I) = ABS(DIFF(I)/Z(I))*100.0                    FIT    194
      RMSD   = RMSD + DIFFSQ                                                    FIT    195
  875 CONTINUE                                                                  FIT    196
  900 IF(N .EQ. 1)  RMSD = 0.0                                                  FIT    197
      IF(N .GT. 1)                                                              FIT    198
     1RMSD   = SQRT(RMSD/FLOAT(N-1))                                            FIT    199
      WRITE(IOUTPT,8000)(I,C(I),I=1,6)                                          FIT    200
      IF((CTYPE.EQ.BILIN).OR.(CTYPE.EQ.BIQUAD))  GOTO 1100                      FIT    201
      WRITE(IOUTPT,9050)ALPHA,ZETA                                              FIT    202
      WRITE(IOUTPT,9070)(X(I),Z(I),ZC(I),DIFF(I),PERDIF(I),I=1,N)               FIT    203
      WRITE(IOUTPT,9090)RMSD                                                    FIT    204
      RETURN                                                                    FIT    205
 1100 WRITE(IOUTPT,9060)ALPHA,BETA,ZETA                                         FIT    206
      WRITE(IOUTPT,9080)(X(I),Y(I),Z(I),ZC(I),DIFF(I),PERDIF(I),I=1,N)          FIT    207
      WRITE(IOUTPT,9090)RMSD                                                    FIT    208
      RETURN                                                                    FIT    209
 8000 FORMAT( 6( / 11X,15H   COEFFICIENT( ,I2,3H) = ,F15.8 ))                   FIT    210
 9050 FORMAT(1H0,16X,5HINPUT,8X,4HCALL                                          FIT    211
     1     / 3X,11HINDEPENDENT ,3X, 9HDEPENDENT ,4X, 9HDEPENDENT ,3X,           FIT    212
     2          10HDIFFERENCE ,5X,10HPRINT DIFF    //   2(3X,F10.3))            FIT    213
 9070 FORMAT(5(3X,F10.3))                                                       FIT    214
 9060 FORMAT(1H0,29X, 5HINPUT ,8X, 4HCALC  /                                    FIT    215
     1        3X,11HINDEPENDENT ,2X,11HINDEPENDENT ,3X, 9HDEPENDENT ,4X,        FIT    216
     2         9HDEPENDENT ,3X,10HDIFFERENCE ,5X,10HPRCNT DIFF    //            FIT    217
     3        3(3X,F10.3))                                                      FIT    218
 9080 FORMAT(6(3X,F10.3))                                                       FIT    219
 9090 FORMAT(31H0 ROOT MEAN SQUARE DIFFERENCE = ,F10.3)                         FIT    220
      END                                                                       FIT    221
      SUBROUTINE FITCOF(N,C,IERR)                                               FITCOF   2
      COMMON    /FITCOM/     D(7,7),ZZ(7)                                       FITCOF   3
      DIMENSION             A(7,7),XD(7,7),C(6)                                 FITCOF   4
      IERR   = 0                                                                FITCOF   5
      DO 100 I=1,6                                                              FITCOF   6
      C(I)   = 0.0                                                              FITCOF   7
  100 CONTINUE                                                                  FITCOF   8
C                                                                               FITCOF   9
C              MAKE COPY OF D                                                   FITCOF  10
      DO 150 I=1,7                                                              FITCOF  11
      DO 150 J=1,7                                                              FITCOF  12
      XD(I,J) = D(I,J)                                                          FITCOF  13
  150 CONTINUE                                                                  FITCOF  14
C                                                                               FITCOF  15
      DETD   = FITDET(XD,N)                                                     FITCOF  16
      IF(DETD .EQ. 0.0)  IERR = 1                                               FITCOF  17
      IF(IERR .EQ. 1)  CALL MSG(53)                                             FITCOF  18
      IF(IERR .EQ. 1)  RETURN                                                   FITCOF  19
      M      = N-1                                                              FITCOF  20
      DO 200 K=1,M                                                              FITCOF  21
      CALL FITFIL(K,A,N)                                                        FITCOF  22
      DETA   = FITDET(A,N)                                                      FITCOF  23
      C(K)   = DETA/DETD                                                        FITCOF  24
  200 CONTINUE                                                                  FITCOF  25
      RETURN                                                                    FITCOF  26
      END                                                                       FITCOF  27
      FUNCTION FITDET(W,N)                                                      FITDET   2
      DIMENSION              W(7,7),TEMP(7)                                     FITDET   3
      FITDET = 1.0                                                              FITDET   4
      NN     = N-1                                                              FITDET   5
      DO 900 M=1,NN                                                             FITDET   6
      K      = N+1-M                                                            FITDET   7
      L      = 1                                                                FITDET   8
      DO 100 I=2,K                                                              FITDET   9
      IF (ABS(W(I,K)) .GT. ABS(W(L,K)))  L = I                                  FITDET  10
  100 CONTINUE                                                                  FITDET  11
      IF (ABS(W(L,K)) .GT. 10E-15)  GOTO 200                                    FITDET  12
      FITDET = 0.0                                                              FITDET  13
      RETURN                                                                    FITDET  14
  200 IF (L .EQ. K) GOTO 400                                                    FITDET  15
      DO 300 I= 1,K                                                             FITDET  16
      TEMP(I) = W(K,I)                                                          FITDET  17
      W(K,I) = W(L,I)                                                           FITDET  18
      W(L,I) = TEMP(I)                                                          FITDET  19
  300 CONTINUE                                                                  FITDET  20
  400 KK     = K-1                                                              FITDET  21
      DO 500 I=1,KK                                                             FITDET  22
      DO 500 J=1,KK                                                             FITDET  23
      W(I,J) = W(I,J) - W(I,K)*W(K,J) / W(K,K)                                  FITDET  24
  500 CONTINUE                                                                  FITDET  25
      FITDET = FITDET * W(K,K)                                                  FITDET  26
      IF (L .NE. K) FITDET = -FITDET                                            FITDET  27
  900 CONTINUE                                                                  FITDET  28
      FITDET = FITDET * W(1,1)                                                  FITDET  29
      IF(ABS(FITDET) .LE. 10E-15)  FITDET = 0.0                                 FITDET  30
      RETURN                                                                    FITDET  31
      END                                                                       FITDET  32
      SUBROUTINE FITFIL(K,A,L)                                                  FITFIL   2
      COMMON    /FITCOM/     D(7,7),ZZ(7)                                       FITFIL   3
      DIMENSION              A(7,7)                                             FITFIL   4
      DO 500 I=1,L                                                              FITFIL   5
      DO 500 J=1,L                                                              FITFIL   6
      IF (J .EQ. K) GOTO 100                                                    FITFIL   7
      A(I,J) = D(I,J)                                                           FITFIL   8
      GOTO 500                                                                  FITFIL   9
  100 A(I,J) = ZZ(I)                                                            FITFIL  10
  500 CONTINUE                                                                  FITFIL  11
      RETURN                                                                    FITFIL  12
      END                                                                       FITFIL  13
      INTEGER FUNCTION FMTSTR( str, lenstr, linewflag )                         FMTSTR   2
      CHARACTER*1024 str, str2                                                  FMTSTR   3
      LOGICAL FLAG                                                              FMTSTR   4
      CHARACTER*14 CRLF                                                         FMTSTR   5
      INTEGER CRLFlen                                                           FMTSTR   6
C                                                                               FMTSTR   7
C              Format a string for output                                       FMTSTR   8
C                str is input character string                                  FMTSTR   9
C                lenstr is the length in put str                                FMTSTR  10
C                linewflag is 0 if not to insert CR/LF's                        FMTSTR  11
C                        <0 if 2nd + lines do not begin with 12X                FMTSTR  12
C                        >0 if insert CR/LF's to make this max line length      FMTSTR  13
C                return value is the new length of string                       FMTSTR  14
C                                                                               FMTSTR  15
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               FMTSTR  17
C              First strip trailing blanks                                      FMTSTR  18
C                                                                               FMTSTR  19
C              NLflag = 0 for CRLF newline (PC's), 1 for LF newline (sun)       FMTSTR  20
C===========>    \/====== set to 1 for SUN, 0 for PC                            FMTSTR  21
      DATA NLflag/0/                                                            FMTSTR  22
      IF(NLflag .eq. 0)  THEN                                                   FMTSTR  23
        CRLF = CHAR(13)//CHAR(10)//'            '                               FMTSTR  24
        CRLFlen = 14                                                            FMTSTR  25
      ELSE                                                                      FMTSTR  26
        CRLF = CHAR(10)//'            '                                         FMTSTR  27
        CRLFlen = 13                                                            FMTSTR  28
      ENDIF                                                                     FMTSTR  29
      IF(linewflag .gt. 0)  THEN                                                FMTSTR  30
         FLAG = .TRUE.                                                          FMTSTR  31
         linew = linewflag                                                      FMTSTR  32
      ELSE                                                                      FMTSTR  33
        FLAG = .FALSE.                                                          FMTSTR  34
        IF(linewflag .lt. 0)  THEN                                              FMTSTR  35
          linew = -linewflag                                                    FMTSTR  36
          IF(NLflag .eq. 0)  THEN                                               FMTSTR  37
            CRLF  = CHAR(13)//CHAR(10)                                          FMTSTR  38
            CRLFlen = 2                                                         FMTSTR  39
          ELSE                                                                  FMTSTR  40
            CRLF  = CHAR(10)                                                    FMTSTR  41
            CRLFlen = 1                                                         FMTSTR  42
          ENDIF                                                                 FMTSTR  43
        ENDIF                                                                   FMTSTR  44
      ENDIF                                                                     FMTSTR  45
      DO ii=1,lenstr                                                            FMTSTR  46
        IF(str(lenstr-ii+1:lenstr-ii+1) .ne. ' ')  GOTO 110                     FMTSTR  47
      ENDDO                                                                     FMTSTR  48
      ii = 1                                                                    FMTSTR  49
  110 kk = lenstr - ii+1                                                        FMTSTR  50
C                                                                               FMTSTR  51
C              Next change multiple spaces to single space                      FMTSTR  52
C              and remove spaces before , : ; .                                 FMTSTR  53
C              Also, if find CRLF turn off format flag                          FMTSTR  54
C                                                                               FMTSTR  55
      ii=1                                                                      FMTSTR  56
  120 IF((FLAG) .and. (kk-ii .ge. CRLFlen-1) .and.                              FMTSTR  57
     $   (str(ii:ii+CRLFlen-1) .eq. CRLF(1:CRLFlen)))  THEN                     FMTSTR  58
          FLAG = .FALSE.                                                        FMTSTR  59
          ii = ii + CRLFlen-1                                                   FMTSTR  60
      ENDIF                                                                     FMTSTR  61
      IF((str(ii:ii+1) .eq. '  ').or.(str(ii:ii+1) .eq. ' ,') .or.              FMTSTR  62
     $   (str(ii:ii+1) .eq. ' ;').or.(str(ii:ii+1) .eq. ' :') .or.              FMTSTR  63
     $   (str(ii:ii+1) .eq. ' .'))  THEN                                        FMTSTR  64
        str(ii:)=str(ii+1:)                                                     FMTSTR  65
        kk= kk - 1                                                              FMTSTR  66
        ii= ii - 1                                                              FMTSTR  67
      ENDIF                                                                     FMTSTR  68
      ii=ii+1                                                                   FMTSTR  69
      IF(ii .lt. kk)  GOTO 120                                                  FMTSTR  70
      FMTSTR = kk                                                               FMTSTR  71
      IF(.NOT. FLAG)  RETURN                                                    FMTSTR  72
C                                                                               FMTSTR  73
C              Now add CR/LF's as needed to make string ready for output        FMTSTR  74
C              with maximum line length of linew                                FMTSTR  75
C                                                                               FMTSTR  76
      ii   = 0                                                                  FMTSTR  77
  150 ii   = ii + linew                                                         FMTSTR  78
      IF(ii .ge. kk)  GOTO 170                                                  FMTSTR  79
C              look backwards for space (assume that is word break)             FMTSTR  80
      DO jj=1,linew                                                             FMTSTR  81
         IF(str(ii-jj+1:ii-jj+1) .eq. ' ')  GOTO  160                           FMTSTR  82
      ENDDO                                                                     FMTSTR  83
      jj   = 1                                                                  FMTSTR  84
 160  ii   = ii - jj + 1                                                        FMTSTR  85
      str2 = str(ii+1:kk)                                                       FMTSTR  86
      str(ii:kk-1+CRLFlen) = CRLF(1:CRLFlen)//str2                              FMTSTR  87
      ii   = ii + 2                                                             FMTSTR  88
      kk   = kk + CRLFlen - 1                                                   FMTSTR  89
      GOTO 150                                                                  FMTSTR  90
  170 FMTSTR = kk                                                               FMTSTR  91
      RETURN                                                                    FMTSTR  92
      END                                                                       FMTSTR  93
      SUBROUTINE FUNC (IA)                                                      FUNC     2
C                                                                               FUNC     3
C              FUNC PROCESSES THE FUNCTION COMMAND                              FUNC     4
C                                                                               FUNC     5
C                                                                               FUNC     6
C              STRING OPS                                                       FUNC     7
C              1  ARITH OPS                                                     FUNC     8
C              2  FETCH INPUT                                                   FUNC     9
C              3  FUNCTION                                                      FUNC    10
C              4  TERMINATOR                                                    FUNC    11
C              5  FETCH CONSTANT                                                FUNC    12
C              6  LONG FUNCTION BEING CALC                                      FUNC    13
C                                                                               FUNC    14
C              IFTBL                                                            FUNC    15
C              1-4  FUNCTION NAME                                               FUNC    16
C              5    NO. OF PARAMETERS                                           FUNC    17
C                                                                               FUNC    18
C              ISTK                                                             FUNC    19
C              1  OP                                                            FUNC    20
C              2  LEVEL                                                         FUNC    21
C              3  FUN-INX FOR FUNCTIONS ONLY                                    FUNC    22
C                                                                               FUNC    23
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /FUN1/ IFSTAT, INMAX, NCON, NFUN, NVAR, ICTYP                      /FUN1/   2
      COMMON /FUN2/ ISTK(3,20), FCON(20), KARDSV(80)                            /FUN2/   2
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      DIMENSION IFTBL(5,10), IND(2,20), IOUTD(12)                               FUNC    30
      DIMENSION IOPTBL(2,13), IA(1)                                             FUNC    31
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DATA IFTBL/                                                               FUNC    33
     1        4HMAX , 4H    , 4H    , 4H    , 2,                                FUNC    34
     2        4HMIN , 4H    , 4H    , 4H    , 2,                                FUNC    35
     3        4HABS , 4H    , 4H    , 4H    , 1,                                FUNC    36
     4        4HCSUM, 4H    , 4H    , 4H    , 1,                                FUNC    37
     5        4HCMAX, 4H    , 4H    , 4H    , 1,                                FUNC    38
     6        4HCMIN, 4H    , 4H    , 4H    , 1,                                FUNC    39
     7        4HCMEA, 4HN   , 4H    , 4H    , 1,                                FUNC    40
     8        15*4H    /                                                        FUNC    41
      DATA    IHOLL1 /4HOUT-/                                                   FUNC    42
      DATA IOPTBL/                                                              FUNC    43
     1        4H $  , 0,                                                        FUNC    44
     2        4H+   , 4,                                                        FUNC    45
     3        4H-   , 4,                                                        FUNC    46
     4        4H- U , 6,                                                        FUNC    47
     5        4H*   , 5,                                                        FUNC    48
     6        4H/   , 5,                                                        FUNC    49
     7        4H**  , 7,                                                        FUNC    50
     8        4H,   , 3,                                                        FUNC    51
     9        4H(   , 9,                                                        FUNC    52
     1        4H)   , 2,                                                        FUNC    53
     2        4H]   , 1,                                                        FUNC    54
     3        4H VAR, 0,                                                        FUNC    55
     4        4H FUN, 8/                                                        FUNC    56
C                                                                               FUNC    57
      DATA IND/     4HIN-1,4H    ,4HIN-2,4H    ,4HIN-3,4H    ,                  FUNC    58
     14HIN-4,4H    ,4HIN-5,4H    ,4HIN-6,4H    ,4HIN-7,4H    ,                  FUNC    59
     24HIN-8,4H    ,4HIN-9,4H    ,4HIN-1,4H0   ,4HIN-1,4H1   ,                  FUNC    60
     34HIN-1,4H2   ,4HIN-1,4H3   ,4HIN-1,4H4   ,4HIN-1,4H5   ,                  FUNC    61
     44HIN-1,4H6   ,4HIN-1,4H7   ,4HIN-1,4H8   ,4HIN-1,4H9   ,                  FUNC    62
     54HIN-2,4H0   /                                                            FUNC    63
      DATA IOUTD/1H1, 1H2, 1H3, 1H4, 1H5, 1H6, 1H7, 1H8,                        FUNC    64
     1      1H9, 2H10, 2H11, 2H12/                                              FUNC    65
C                                                                               FUNC    66
      NSTK   = 1                                                                FUNC    67
      KOMMA  = 1                                                                FUNC    68
      ISTK(1,1) = 1                                                             FUNC    69
      ISTK(2,1) = 0                                                             FUNC    70
      IPAREN = 0                                                                FUNC    71
      NFUN   = NFUN + 1                                                         FUNC    72
C                                                                               FUNC    73
C              OUTPUT NAME                                                      FUNC    74
C                                                                               FUNC    75
      DO 20 IO = 1,20                                                           FUNC    76
          if ( ISYMU(1) .ne. IHOLL1 )    goto  20                               FUNC    77
      IF (ISYMB(2).EQ.IOUTD(IO)) GO TO 40                                       FUNC    78
   20 CONTINUE                                                                  FUNC    79
      CALL FUNERR (61)                                                          FUNC    80
      GO TO 950                                                                 FUNC    81
   40 IOPX   = 1                                                                FUNC    82
      CALL GETCS                                                                FUNC    83
      IF (ISYMB(1).EQ.HOLL(17)) GO TO 100                                       FUNC    84
      CALL MSG (77)                                                             FUNC    85
      GOTO 950                                                                  FUNC    86
  100 IOPXP  = IOPX                                                             FUNC    87
      CALL GETCS                                                                FUNC    88
C                                                                               FUNC    89
C              CHECK FOR INPUT NAME                                             FUNC    90
C                                                                               FUNC    91
      DO 110 II = 1,20                                                          FUNC    92
          if ( (ISYMU(1).eq.IND(1,II)) .and. (ISYMU(2).eq.IND(2,II)))           FUNC    93
     1   GOTO 115                                                               FUNC    94
  110 CONTINUE                                                                  FUNC    95
      GO TO 150                                                                 FUNC    96
  115 IORO   = 2                                                                FUNC    97
C              KEEP TRACK OF HIGHEST INPUT                                      FUNC    98
      IF (II.GT.INMAX) INMAX = II                                               FUNC    99
  120 IOPX   = 12                                                               FUNC   100
      IF (IOPXP.EQ.10) GO TO 130                                                FUNC   101
      IF (IOPXP.EQ.12) GO TO 130                                                FUNC   102
      IF (IOPXP.EQ.13) GO TO 130                                                FUNC   103
      GO TO 140                                                                 FUNC   104
  130 CALL FUNERR (62)                                                          FUNC   105
      GO TO 100                                                                 FUNC   106
  140 CALL MOVEAA (IA, IORO,1)                                                  FUNC   107
      CALL MOVEAA (IA, II,1)                                                    FUNC   108
      GO TO 100                                                                 FUNC   109
C                                                                               FUNC   110
C              OUTPUTS AS INPUT VARIABLES                                       FUNC   111
C                                                                               FUNC   112
  150 DO 160 II = 1,12                                                          FUNC   113
          if ( ISYMU(1) .ne. IHOLL1 )    goto  160                              FUNC   114
      IF (ISYMB(2).EQ.IOUTD(II)) GO TO 170                                      FUNC   115
  160 CONTINUE                                                                  FUNC   116
      GO TO 200                                                                 FUNC   117
  170 IORO   = 7                                                                FUNC   118
C              IF INPUT GREATER THAN OUTPUT                                     FUNC   119
      IF (II.GE.IO) CALL MSG (60)                                               FUNC   120
      GO TO 120                                                                 FUNC   121
C                                                                               FUNC   122
C              OPERATORS                                                        FUNC   123
C                                                                               FUNC   124
  200 DO 210 IOPX = 1,11                                                        FUNC   125
      IF (ISYMB(1).EQ.IOPTBL(1,IOPX)) GO TO 220                                 FUNC   126
  210 CONTINUE                                                                  FUNC   127
      GO TO 500                                                                 FUNC   128
  220 GO TO (240, 240, 260, 260, 240, 240, 240, 300, 320, 350,                  FUNC   129
     1      400), IOPX                                                          FUNC   130
C                                                                               FUNC   131
C              + * / **                                                         FUNC   132
C                                                                               FUNC   133
  240 IF (IOPXP.EQ.12) GO TO 390                                                FUNC   134
      IF (IOPXP.EQ.10) GO TO 390                                                FUNC   135
      CALL FUNERR (62)                                                          FUNC   136
      GO TO 100                                                                 FUNC   137
C                                                                               FUNC   138
C              -                                                                FUNC   139
C                                                                               FUNC   140
  260 IF (IOPXP.EQ.9) GO TO 290                                                 FUNC   141
      IF (IOPXP.EQ.1) GO TO 290                                                 FUNC   142
      IF (IOPXP.EQ.8) GO TO 290                                                 FUNC   143
      IF (IOPXP.EQ.12) GO TO 390                                                FUNC   144
      IF (IOPXP.EQ.10) GO TO 390                                                FUNC   145
      CALL FUNERR (62)                                                          FUNC   146
      GO TO 100                                                                 FUNC   147
  290 IOPX   = IOPX + 1                                                         FUNC   148
      GO TO 390                                                                 FUNC   149
C                                                                               FUNC   150
C              ,                                                                FUNC   151
C                                                                               FUNC   152
  300 IF (IOPXP.EQ.10) GO TO 390                                                FUNC   153
      IF (IOPXP.EQ.12) GO TO 390                                                FUNC   154
      CALL FUNERR (62)                                                          FUNC   155
C                                                                               FUNC   156
C              (                                                                FUNC   157
C                                                                               FUNC   158
  320 IPAREN = IPAREN + 1                                                       FUNC   159
C              IF PREV WAS NOT VAR OR )                                         FUNC   160
      IF ((IOPXP.NE.12).AND.(IOPXP.NE.10)) GO TO 340                            FUNC   161
      CALL FUNERR (62)                                                          FUNC   162
C              IF PREV NOT FUN, SET PAR TO 1                                    FUNC   163
  340 IF (IOPXP.NE.13) ISTK(3,NSTK+1) = 1                                       FUNC   164
      GO TO 390                                                                 FUNC   165
C                                                                               FUNC   166
C              )                                                                FUNC   167
C                                                                               FUNC   168
  350 IPAREN = IPAREN - 1                                                       FUNC   169
      IF (IPAREN.GE.0) GO TO 360                                                FUNC   170
      CALL FUNERR (63)                                                          FUNC   171
      GO TO 950                                                                 FUNC   172
  360 IF (IOPXP.EQ.10) GO TO 390                                                FUNC   173
      IF (IOPXP.EQ.12) GO TO 390                                                FUNC   174
      CALL FUNERR (62)                                                          FUNC   175
      GO TO 950                                                                 FUNC   176
C                                                                               FUNC   177
  390 CALL PUTOP (IA, IOPX, IOPTBL(2,IOPX), ISTK, NSTK, IEOC)                   FUNC   178
      IF (IEOC.NE.0) GO TO 950                                                  FUNC   179
      GO TO 100                                                                 FUNC   180
C                                                                               FUNC   181
C              ..                                                               FUNC   182
C                                                                               FUNC   183
  400 IF (IOPXP.EQ.10) GO TO 410                                                FUNC   184
      IF (IOPXP.EQ.12) GO TO 410                                                FUNC   185
      CALL FUNERR (62)                                                          FUNC   186
  410 IF (IPAREN.EQ.0) GO TO 420                                                FUNC   187
      CALL FUNERR (64)                                                          FUNC   188
  420 CALL PUTOP (IA, IOPX, IOPTBL(2, IOPX), ISTK, NSTK, IEOC)                  FUNC   189
      CALL MOVEAA (IA, 4, 1)                                                    FUNC   190
      CALL MOVEAA (IA, IO, 1)                                                   FUNC   191
          if ( ITERM .ne. 0 )      call  BKSPAC                                 FUNC   192
      GO TO 950                                                                 FUNC   193
  430 IOPX   = 11                                                               FUNC   194
      CALL MSG (80)                                                             FUNC   195
      GO TO 400                                                                 FUNC   196
C                                                                               FUNC   197
C              FUNCTIONS                                                        FUNC   198
C                                                                               FUNC   199
  500 DO 510 IFUNC = 1,7                                                        FUNC   200
              if ( KOMPAR( ISYMU, IFTBL(1,IFUNC), 4 ) .ne. 0 )  goto 515        FUNC   201
  510 CONTINUE                                                                  FUNC   202
      GO TO 800                                                                 FUNC   203
C              IF PREV NOT FUN, VAR, )                                          FUNC   204
  515 IF ((IOPXP.NE.10).AND.(IOPXP.NE.12).AND.(IOPXP.NE.13)) GO TO 520          FUNC   205
      CALL FUNERR (62)                                                          FUNC   206
  520 IOPX   = 13                                                               FUNC   207
      CALL PUTOP (IA, IOPX, IOPTBL(2,IOPX), ISTK, NSTK, IEOC)                   FUNC   208
      IF (IEOC.NE.0) GO TO 950                                                  FUNC   209
      ISTK(3,NSTK) = IFUNC                                                      FUNC   210
C              SET NO. OF PARS FOR ( TO FOLLOW                                  FUNC   211
      ISTK(3,NSTK+1) = IFTBL(5,IFUNC)                                           FUNC   212
      GO TO 100                                                                 FUNC   213
C                                                                               FUNC   214
C              CONSTANT                                                         FUNC   215
C                                                                               FUNC   216
800            call  BKSPAC                                                     FUNC   217
      IF (GETV(C).EQ.0.) GO TO 900                                              FUNC   218
      IF (IOPXP.EQ.10) GO TO 810                                                FUNC   219
      IF (IOPXP.EQ.12) GO TO 810                                                FUNC   220
      IF (IOPXP.EQ.13) GO TO 810                                                FUNC   221
      GO TO 820                                                                 FUNC   222
  810 CALL FUNERR (62)                                                          FUNC   223
      GO TO 100                                                                 FUNC   224
  820 NCON   = NCON + 1                                                         FUNC   225
      IF (NCON.LE.20) GO TO 830                                                 FUNC   226
      CALL FUNERR (83)                                                          FUNC   227
      GO TO 950                                                                 FUNC   228
  830 FCON(NCON) = C                                                            FUNC   229
      IOPX   = 12                                                               FUNC   230
      CALL MOVEAA (IA, 5,1)                                                     FUNC   231
      CALL MOVEAA (IA, NCON, 1)                                                 FUNC   232
      GO TO 100                                                                 FUNC   233
  900 CALL FUNERR (85)                                                          FUNC   234
      IF (ITERM.NE.0) GO TO 430                                                 FUNC   235
      GO TO 100                                                                 FUNC   236
  950 KOMMA  = 0                                                                FUNC   237
      RETURN                                                                    FUNC   238
      END                                                                       FUNC   239
      SUBROUTINE FUNC1 (IA)                                                     FUNC1    2
C                                                                               FUNC1    3
C              FUNC1 INITIALIZES FOR THE FUNCTION COMMANDS TO FOLLOW            FUNC1    4
C                                                                               FUNC1    5
      COMMON /CDLREL/ CNAME(4), CNAME2(4), CSXR, DSXR, ISXR, JRCSX,             /CDLRL/  2
     1      NRI, TSXR, WSXR                                                     /CDLRL/  3
      INTEGER CSXR, CNAME, CNAME2, DSXR, TSXR, WSXR                             /CDLRL/  4
C                                                                               /CDLRL/  5
      COMMON /FUN1/ IFSTAT, INMAX, NCON, NFUN, NVAR, ICTYP                      /FUN1/   2
      COMMON /FUN2/ ISTK(3,20), FCON(20), KARDSV(80)                            /FUN2/   2
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      DIMENSION IA(1)                                                           FUNC1   11
C                                                                               FUNC1   12
      DO 100 I=1,20                                                             FUNC1   13
  100 FCON(I) = 0.0                                                             FUNC1   14
      INMAX  = 0                                                                FUNC1   15
      NFUN   = 0                                                                FUNC1   16
C              CLEAR NO OF CONSTANTS                                            FUNC1   17
      NCON   = 0                                                                FUNC1   18
      IAX    = IAX + 1                                                          FUNC1   19
      WSXR   = IAX                                                              FUNC1   20
      IA(JRCSX+12) = WSXR                                                       FUNC1   21
C              SAVE SPACE FOR CONSTANTS AND NO. OF FUN                          FUNC1   22
      CALL MOVEAA (IA, DUM, 21)                                                 FUNC1   23
      RETURN                                                                    FUNC1   24
      END                                                                       FUNC1   25
      SUBROUTINE FUNC2 (IA)                                                     FUNC2    2
C                                                                               FUNC2    3
C              FUNC2 FINISHES A COMMAND USING FUNCTION SUBCOMMANDS              FUNC2    4
C                                                                               FUNC2    5
C              IFSTAT                                                           FUNC2    6
C              1 PROCESS INPUTS                                                 FUNC2    7
C              2 PROCESSING DEFAULTS                                            FUNC2    8
C              3 PROCESSING UNREFERENCED SYSTEM COMP                            FUNC2    9
C                                                                               FUNC2   10
      COMMON /CDLREL/ CNAME(4), CNAME2(4), CSXR, DSXR, ISXR, JRCSX,             /CDLRL/  2
     1      NRI, TSXR, WSXR                                                     /CDLRL/  3
      INTEGER CSXR, CNAME, CNAME2, DSXR, TSXR, WSXR                             /CDLRL/  4
C                                                                               /CDLRL/  5
      COMMON /FUN1/ IFSTAT, INMAX, NCON, NFUN, NVAR, ICTYP                      /FUN1/   2
      COMMON /FUN2/ ISTK(3,20), FCON(20), KARDSV(80)                            /FUN2/   2
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION IA(1)                                                           FUNC2   19
C                                                                               FUNC2   20
      DO 5 I = 1,80                                                             FUNC2   21
    5 KARDSV(I) = KARD(I)                                                       FUNC2   22
      KARDX2 = KARDX                                                            FUNC2   23
      IF (IFSTAT.EQ.3) CALL FUNC1(IA)                                           FUNC2   24
      DO 100 I = 1,12                                                           FUNC2   25
C              IF ALREADY DEFINED                                               FUNC2   26
      IF ( ITYPLS(IA(CSXR+4+(I-1)*20)).NE.ITYPLS(UNDEF(1)) ) GOTO 40            FIXJH1   4
C              IF NO DEFAULT                                                    FUNC2   28
      IF ( ITYPLS(IA(DSXR+4+(I-1)*20)).EQ.ITYPLS(UNDEF(3)) ) GOTO 50            FIXJH1   5
      CALL A4A1 (IA(DSXR+4+(I-1)*20), KARD, 20)                                 FUNC2   30
C              INDICATE DEFINED                                                 FUNC2   31
      IA(CSXR+4+(I-1)*20) = 0                                                   FUNC2   32
      KARDX  = 1                                                                FUNC2   33
      CALL GETCS                                                                FUNC2   34
      CALL FUNC(IA)                                                             FUNC2   35
      GO TO 100                                                                 FUNC2   36
C              IF BEYOND NVAR, SET UNUSED FLAG                                  FUNC2   37
   40 IF (I.GT.NVAR) IA(DSXR+4+(I-1)*20) = IUNUS                                FUNC2   38
      GO TO 100                                                                 FUNC2   39
C              IF STRAIGHT THRU FUNCTION AND .LT. NVAR                          FUNC2   40
   50 IF ((I.GT.INMAX).AND.(I.LE.NVAR)) INMAX = I                               FUNC2   41
  100 CONTINUE                                                                  FUNC2   42
      IA(WSXR) = IAX - WSXR                                                     FUNC2   43
C              SET NO. OF FUNCTIONS                                             FUNC2   44
      IA(WSXR+21) = NFUN                                                        FUNC2   45
      DO 120 IC =1,20                                                           FUNC2   46
  120 IA(WSXR+IC) = ITYPLS(FCON(IC))                                            FUNC2   47
      IF(ICTYP.EQ.20) INMAX = 6                                                 FUNC2   48
      IF (INMAX.EQ.0) GO TO 190                                                 FUNC2   49
C              SET REDUCED INPUTS                                               FUNC2   50
      IA(JRCSX+13) = INMAX                                                      FUNC2   51
      NRI    = INMAX                                                            FUNC2   52
  190 DO 200 I = 1,80                                                           FUNC2   53
  200 KARD(I) = KARDSV(I)                                                       FUNC2   54
      KARDX   = KARDX2                                                          FUNC2   55
      RETURN                                                                    FUNC2   56
      END                                                                       FUNC2   57
      SUBROUTINE FUNERR(I)                                                      FUNERR   2
C                                                                               FUNERR   3
C              FUNERR PREFACES A FUNCTION ERROR MESSAGE                         FUNERR   4
C              WITH A FUNCTION IMAGE IF A DEFAULT                               FUNERR   5
C                                                                               FUNERR   6
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /FUN1/ IFSTAT, INMAX, NCON, NFUN, NVAR, ICTYP                      /FUN1/   2
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
C                                                                               FUNERR  10
C              IF NOT A LIB FUNCTION                                            FUNERR  11
      IF (IFSTAT.EQ.1) GO TO 100                                                FUNERR  12
      WRITE(IOUTPT,1001) (KARD(J),J=1,80)                                       FUNERR  13
 1001 FORMAT(1X,11(1H*),40HERROR DETECTED IN THE FOLLOWING DEFAULT ,            FUNERR  14
     1    8HFUNCTION   /  12X, 80A1)                                            FUNERR  15
  100 CALL MSG (I)                                                              FUNERR  16
      RETURN                                                                    FUNERR  17
      END                                                                       FUNERR  18
      subroutine  GETCS                                                         GETCS    2
c---                                                                            GETCS    3
c--- get the next significant char string and do macro processing               GETCS    4
c--- will also collect literal strings *.....* "....."                          GETCS    5
c---                                                                            GETCS    6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
c                                                                               GETCS   13
      integer  cEVAL(3)                                                         GETCS   14
        data   cEVAL / 4h#eva,4hl   , 4h#    /                                  GETCS   15
c                                                                               GETCS   16
c****************************************************************               GETCS   17
C$    write(6,'('' GETCS  -->    KARD(''i4'')=''a4'' iBkspF=''i1)')             GETCS   18
C$   1                           KARDX, KARD(KARDX), iBkspF                     GETCS   19
c                                                                               GETCS   20
      if ( iBkspF .ne. 0 )     then                                             GETCS   21
           iBkspF = 0                                                           GETCS   22
          ITERM = 0                                                             GETCS   23
          if ( ISYMB(1) .eq. HOLL(19) )     ITERM = 1                           GETCS   24
C$        if ( iBkspF .eq. 0 ) goto 790                                         GETCS   25
          return                                                                GETCS   26
      endif                                                                     GETCS   27
10    continue                                                                  GETCS   28
      mStkSv = 0                                                                GETCS   29
      mTrKRD = KARDX                                                            GETCS   30
C$    write(6,'('' GETCS  --10-- KARD(''i4'')=''a1,                             GETCS   31
C$   1    ''  mEvFl=''i6''  mSetFl=''i2)')                                      GETCS   32
C$   2    KARDX, KARD(KARDX), mEvFl, mSetFl                                     GETCS   33
c                                                                               GETCS   34
c---- skip leading whitespace , '='                                             GETCS   35
c                                                                               GETCS   36
20    if ( (KARD(KARDX).eq.KCSP) .or. (KARD(KARDX).eq.HOLL(13)) .or.            GETCS   37
     1     (KARD(KARDX).eq.KCTAB) )    then                                     GETCS   38
30        KARDX  = KARDX + 1                                                    GETCS   39
          if ( KARDX .le. KARDI2 )     then                                     GETCS   40
              goto 20                                                           GETCS   41
          else                                                                  GETCS   42
               call  KRDRD                                                      GETCS   43
              goto 10                                                           GETCS   44
          endif                                                                 GETCS   45
      endif                                                                     GETCS   46
c---- save starting position                                                    GETCS   47
      KARDSX = KARDX                                                            GETCS   48
c---- if ',' ignore it                                                          GETCS   49
      if ( KARD(KARDX) .eq. KCCMMA )     goto  30                               GETCS   50
c---- if comment skip it and go back to leading blank checking                  GETCS   51
      if ( KARD(KARDX) .eq. KCDOLR )    then                                    GETCS   52
44        KARDX = KARDX + 1                                                     GETCS   53
          if ( KARDX .ge. KARDI2 )   goto  30                                   GETCS   54
          if ( KARD(KARDX) .ne. KCDOLR )   goto  44                             GETCS   55
          goto  30                                                              GETCS   56
      endif                                                                     GETCS   57
c                                                                               GETCS   58
c---- initialize to non-delimiter , non-literal                                 GETCS   59
c                                                                               GETCS   60
      IDELIM = 0                                                                GETCS   61
      literl = 0                                                                GETCS   62
ccc---- if '[' assume it is '#eval['                                            GETCS   63
cc      if ( KARD(KARDX) .eq. KCLBRA )     then                                 GETCS   64
cc          ISYMB(1) = KCSP                                                     GETCS   65
cc          goto  410                                                           GETCS   66
cc      endif                                                                   GETCS   67
c---- if one-char string '()[]' -- indicate string is a delimiter               GETCS   68
      if (  ( KARD(KARDX) .eq. KCLPAR ) .or. ( KARD(KARDX) .eq. KCRPAR )        GETCS   69
     1 .or. ( KARD(KARDX) .eq. KCLBRA ) .or. ( KARD(KARDX) .eq. KCRBRA )        GETCS   70
     2 .or. ( KARD(KARDX) .eq. KCLCRL ) )     then                              DFTEXP  64
          IDELIM = 1                                                            GETCS   72
          KARDX  = KARDX + 1                                                    GETCS   73
          goto  70                                                              GETCS   74
      endif                                                                     GETCS   75
c---- ck if literal i.e.  *.....* , "....."                                     GETCS   76
      if (((KARD(KARDSX).eq.HOLL(22)).and.(KARD(KARDSX+2).ne.mEvDel))           GETCS   77
     1    .or. (KARD(KARDSX) .eq. KCDQUO) )     then                            GETCS   78
          literl = 1                                                            GETCS   79
46        KARDX = KARDX + 1                                                     GETCS   80
          if ( KARDX .gt. KARDI2 )     then                                     GETCS   81
              goto  80132                                                       GETCS   82
          endif                                                                 GETCS   83
          if ( KARD(KARDX) .ne. KARD(KARDSX) )     goto  46                     GETCS   84
          goto  70                                                              GETCS   85
      endif                                                                     GETCS   86
      KARDX  = KARDX + 1                                                        GETCS   87
c---- increment KARDX until a delimiter found                                   GETCS   88
50    do  55  I = 12 , 18                                                       GETCS   89
          if ( KARD(KARDX) .eq. HOLL(I) )   goto  70                            GETCS   90
55    continue                                                                  GETCS   91
      if ( KARD(KARDX) .eq. KCTAB )         goto  70                            GETCS   92
          KARDX  = KARDX + 1                                                    GETCS   93
          if ( KARDX .le. KARDI2 )     goto 50                                  GETCS   94
70    LSYMB = KARDX - KARDSX - literl                                           GETCS   95
      KARDX = KARDX + literl                                                    GETCS   96
cd     write(6,'('' getcs --70-- KARD(KARDSX+literl)="''80a1)')                 GETCS   97
cd    1   (KARD(iii), iii=KARDSX+literl, KARDSX+literl+LSYMB-1), '"'            GETCS   98
       call  PACK4( KARD(KARDSX+literl), LSYMB, 32 + literl*48 )                SYMSIZ  24
      ITERM  = 0                                                                GETCS  100
      if ( ISYMB(1) .eq. HOLL(19) )   ITERM = 1                                 GETCS  101
90    continue                                                                  GETCS  102
      mKARDX = KARDX                                                            GETCS  103
      mStkSv = mStk                                                             GETCS  104
      mKARD2  = KARDI2                                                          GETCS  105
c--------------------------------------------------------------------           GETCS  110
c---- ck if symbol can be expanded                                              GETCS  111
c--------------------------------------------------------------------           GETCS  112
c                                                                               GETCS  113
      if ( KARD(KARDSX) .eq. KCDQUO )     literl = 0                            GETCS  114
      if ( IDELIM+ITERM+literl .ne. 0 ) then                                    GETCS  115
          if ( mTracF .ne. 0 )    call  mTrack( 0, mKARDX )                     GETCS  116
          do  96  i = 1 , 8                                                     SYMSIZ  25
              ISYMU(i) = ISYMB(i)                                               GETCS  118
96        continue                                                              GETCS  119
          return                                                                GETCS  125
      endif                                                                     GETCS  126
c                                                                               GETCS  127
c---- ck if [ present ,  first skip leading blanks                              GETCS  128
c                                                                               GETCS  129
      do  162  ii = kardx , kardi2                                              GETCS  130
          if ( (KARD(ii).ne.KCSP) .and. (KARD(ii).ne.KCTAB) )  goto  164        GETCS  131
162   continue                                                                  GETCS  132
      ii = kardi2                                                               GETCS  133
164   continue                                                                  GETCS  134
      if ( KARD(ii) .ne. KCLBRA )     then                                      GETCS  135
c                                                                               GETCS  136
c-------- not [                                                                 GETCS  137
c                                                                               GETCS  138
170       continue                                                              GETCS  139
c                                                                               GETCS  140
cd        write(6,'('' GETCS  --120- ia(mTxtP=''i6'')=''i5,                     GETCS  141
cd   1      ''  mP,mEvDef=''i6,i7,''  mEvFl=''i6)' )                            GETCS  142
cd   2      mTxtP, ia(mTxtP), mP, mEvDef, mEvfl                                 GETCS  143
c                                                                               GETCS  144
c---------- if macro EOL , unstack                                              GETCS  145
c                                                                               GETCS  146
          if ( ( KARDX .ge. KARDI2 ) .and. ( mTxtP .gt. 0 ) )     then          GETCS  147
cc            if ( ( ia(mTxtP) .eq. -999 ) .and.                                GETCS  148
cc   1             ( mP .ne. mEvDef ) )    then                                 GETCS  149
              if ( ( ia(mTxtP) .eq. -999 ) .and.                                GETCS  150
     1             ( mEvFl .eq. 0 ) )      then                                 GETCS  151
                  goto  700                                                     GETCS  152
              endif                                                             GETCS  153
          endif                                                                 GETCS  154
c                                                                               GETCS  155
c-------- ck if #eval arg, if yes grab arg value                                GETCS  156
c                                                                               GETCS  157
  128     if ( (mEvFl .gt. 0) .and. (KARD(KARDX+1) .eq. mEvDel) ) then          GETCS  158
              mEvAr = mEvFl                                                     GETCS  159
              mEvFl = mEvFl + 17                                                GETCS  160
              KARDX = KARDX + 2                                                 GETCS  161
              goto  500                                                         GETCS  162
          endif                                                                 GETCS  163
c                                                                               GETCS  164
c-------- handle ##set , ##if                                                   GETCS  165
c                                                                               GETCS  166
          if ( mSetFl .ne. 0 )    then                                          GETCS  167
              goto  600                                                         GETCS  168
          endif                                                                 GETCS  169
c                                                                               GETCS  170
  390     continue                                                              GETCS  171
          if ( mTracF .ne. 0 )    call  mTrack( 0, mKARDX )                     GETCS  172
c                                                                               GETCS  173
c-------- prepare Uppercase symbol also                                         GETCS  174
c                                                                               GETCS  175
           call  UPPER4( ISYMB(1), ISYMU(1), 8 )                                SYMSIZ  26
c                                                                               GETCS  177
c                                                                               GETCS  182
          return                                                                GETCS  183
      endif                                                                     GETCS  184
c                                                                               GETCS  185
c---- [ found ,  search macro names                                             GETCS  186
c                                                                               GETCS  187
      if ( ( (ISYMB(1).eq.cEval(1)) .and. (ISYMB(2).eq.cEval(2)) ) .or.         GETCS  188
     1       (ISYMB(1).eq.cEval(3)) )    then                                   GETCS  189
410       marx = -1                                                             GETCS  190
          goto  420                                                             GETCS  191
      endif                                                                     GETCS  192
      if ( mSytN .gt. 0 )   call  mSytSr                                        GETCS  193
      if ( (mSytI.eq.0).or.(mSytN.eq.0)  )     then                             GETCS  194
          goto  80113                                                           GETCS  195
415        call  mMkUnd                                                         GETCS  196
      endif                                                                     GETCS  197
      marx = 0                                                                  GETCS  198
420   if ( mTracF .ne. 0 )    call  mTrack( 0, KARDSX )                         GETCS  199
       call  mXpand( marx )                                                     GETCS  200
      goto  10                                                                  GETCS  201
c                                                                               GETCS  202
c------------ handle #eval arg ----------                                       GETCS  203
c                                                                               GETCS  204
500           if ( LSYMB .gt. 64 )     then                                     GETCS  205
                  goto  80108                                                   GETCS  206
520               LSYMB = 64                                                    GETCS  207
              endif                                                             GETCS  208
C$            write(6,'('' GETCS  ---    mEvAr=''i6)')  mEvAr                   GETCS  209
              ia(mEvAr+1) = LSYMB                                               GETCS  210
              len4 = ( LSYMB + 3 ) / 4                                          GETCS  211
              do  540  j = 1 , len4                                             GETCS  212
                  ia(mEvAr+j+1) = ISYMB(j)                                      GETCS  213
540           continue                                                          GETCS  214
              goto  10                                                          GETCS  215
c                                                                               GETCS  216
c------------ handle #eval arg ----------End----------                          GETCS  217
c                                                                               GETCS  218
c------------ handle ##set , ##if -----------------------                       GETCS  219
c                                                                               GETCS  220
600   if ( mSetFl .gt. 0 )     then                                             GETCS  221
          if ( LSYMB .gt. 64 )     then                                         GETCS  222
              goto  80127                                                       GETCS  223
604           LSYMB = 64                                                        GETCS  224
          endif                                                                 GETCS  225
           call  mPPset                                                         GETCS  226
      else                                                                      GETCS  227
           call  a4a1( ISYMB(1), KARD(KARDI2+2), 1 )                            GETCS  228
          mifcon = 1                                                            GETCS  229
c-------- BLANK, TAB, '0' ==> false                                             GETCS  230
          if ( (KARD(KARDI2+2) .eq. KCSP) .or.                                  GETCS  231
     1         (KARD(KARDI2+2) .eq. KCSP) .or.                                  GETCS  232
     1         (KARD(KARDI2+2) .eq. HOLL(1)) )     mifcon = -1                  GETCS  233
           call  MIF( mifx * mifcon )                                           GETCS  234
          KARDX = KARDI2                                                        GETCS  235
          mifx = 0                                                              GETCS  236
      endif                                                                     GETCS  237
      mSetFl = 0                                                                GETCS  238
      goto  10                                                                  GETCS  239
c                                                                               GETCS  240
c---------- handle ##set , ##if ----------End----------                         GETCS  241
c                                                                               GETCS  242
c---- if macro EOL, unstack.  Hopefully this is not a multi-line macro          GETCS  243
c                                                                               GETCS  244
700       continue                                                              GETCS  245
c                                                                               GETCS  246
c-------- first we push current state so that error traceback works nicely      GETCS  247
c                                                                               GETCS  248
          mStk   = mStk + mStkC                                                 GETCS  249
          mStkSv = mStk                                                         GETCS  250
          if ( mStk .gt. mStkN )     mStkN = mStk                               GETCS  251
          ia(mStk-9) = mStkLv                                                   GETCS  252
          ia(mStk-8) = mEvFl                                                    GETCS  253
          ia(mStk-7) = KARDSX                                                   GETCS  254
          ia(mStk-6) = KARDX                                                    GETCS  255
          ia(mStk-5) = KARDI1                                                   GETCS  256
          ia(mStk-4) = KARDI2                                                   GETCS  257
          ia(mStk-3) = KRDNUM                                                   GETCS  258
          ia(mStk-2) = mTxtP0                                                   GETCS  259
          ia(mStk-1) = mP                                                       GETCS  260
          ia(mStk)   = mStk - mStkC                                             GETCS  261
          mECHO(mStkLv+1) = IECHO                                               GETCS  262
c                                                                               GETCS  263
c---------------- now pop                                                       GETCS  264
c                                                                               GETCS  265
          mStk = mStk - mStkC                                                   GETCS  266
710       mStkLv = ia(mStk-9)                                                   GETCS  267
          mEvFl  = ia(mStk-8)                                                   GETCS  268
          KARDSX = ia(mStk-7)                                                   GETCS  269
          KARDX  = ia(mStk-6)                                                   GETCS  270
          KARDI1 = ia(mStk-5)                                                   GETCS  271
          KARDI2 = ia(mStk-4)                                                   GETCS  272
          KRDNUM = ia(mStk-3)                                                   GETCS  273
          mTxtP  = ia(mStk-2)                                                   GETCS  274
          mP     = ia(mStk-1)                                                   GETCS  275
          mStk   = ia(mStk)                                                     GETCS  276
          IECHO  = mECHO(mStkLv+1)                                              GETCS  277
c                                                                               GETCS  284
c-------- if end of KARD then unstack more                                      GETCS  285
c                                                                               GETCS  286
          do  730  ii = KARDX , KARDI2                                          GETCS  287
              if ( KARD(ii).ne.KCSP .and. KARD(ii).ne.KCTAB )  goto  731        GETCS  288
730       continue                                                              GETCS  289
          KARDX = KARDI2                                                        GETCS  290
          if ( ( KARDX .ge. KARDI2 ) .and. ( mTxtP .gt. 0 ) )     then          GETCS  291
              if ( ( ia(mTxtP) .eq. -999 ) .and.                                GETCS  292
     1             ( mP .ne. mEvDef ) )    then                                 GETCS  293
                  goto  710                                                     GETCS  294
              endif                                                             GETCS  295
          endif                                                                 GETCS  296
731       continue                                                              GETCS  297
          goto    128                                                           GETCS  298
c                                                                               GETCS  299
c---- error messages                                                            GETCS  300
c                                                                               GETCS  301
80108  call  mERR( 108 )                                                        GETCS  302
      write ( IOUTPT, 80009 )  (KARD(j), j=KARDSX,KARDX), KCDQUO                GETCS  303
80009 format( ' ********* ',5harg=",125a1 )                                     GETCS  304
      goto  520                                                                 GETCS  305
c                                                                               GETCS  306
80113  call  mERR( 113 )                                                        GETCS  307
      goto  415                                                                 GETCS  308
c                                                                               GETCS  309
80127  call  mERR( 127 )                                                        GETCS  310
      write( IOUTPT, 80011 )  (KARD(j), j=KARDSX,KARDX), KCDQUO                 GETCS  311
80011 format( ' ********* ',8hresult=",125a1 )                                  GETCS  312
      goto  604                                                                 GETCS  313
c                                                                               GETCS  314
80132  call  mERR( 132 )                                                        GETCS  315
      goto  70                                                                  GETCS  316
      end                                                                       GETCS  317
      SUBROUTINE GETLL(KWD,JK,NK,IPAREN,IVAL,IVTYPE,NFND)                       FIX11   12
C                                                                               GETLL    3
C              GETLL GETS A LIST OF LITERALS                                    GETLL    4
C                                                                               GETLL    5
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      DIMENSION IVAL(1),KWD(16,1),IVTYPE(1)                                     FIX11   13
      DATA KBLANK /4H    /                                                      FIX11   14
C              NUMBER OF WORDS (32 BIT) IN LIST                                 FIX11   15
      LENTOT = KWD(9,JK)                                                        FIX11   16
C              NUMBER OF WORDS IN EACH LIST ITEM                                FIX11   17
      IWPI   = KWD(10,JK)                                                       FIX11   18
C              GET NUMBER OF LITERALS                                           GETLL   13
      LEN    = LENTOT/IWPI                                                      GETLL   14
C              CLEAR NUMBER OF LITERALS FOUND                                   GETLL   15
      NFND   = 0                                                                GETLL   16
      LENSAV = LEN                                                              FIX11   19
C              BLANK FILL THE VALUE SPACE                                       FIX11   20
      CALL FILLN(KBLANK,IVAL(1),LENTOT)                                         FIX11   21
C              IF ONLY ONE, GO GET THE STRING                                   FIX11   22
      IF (LEN.EQ.1) GO TO 30                                                    GETLL   18
C              CHECK FOR (                                                      FIX11   23
      CALL GETCS                                                                GETLL   20
C              IF FOUND (, PROCESS LIST                                         FIX11   24
      IF (ISYMB(1).EQ.HOLL(15)) GO TO 30                                        GETLL   22
C              NO ( ; IF PARENTHESES NOT REQUIRED, ASSUME SINGLE                FIX11   25
C              ELEMENT LIST                                                     FIX11   26
      IF (IPAREN.EQ.0) THEN                                                     FIX11   27
          LEN = 1                                                               FIX11   28
          GO TO 40                                                              FIX11   29
C              OTHERWISE ISSUE ERROR AND SKIP TO END OF LIST OR COMMAND         FIX11   30
      ELSE                                                                      FIX11   31
          CALL MSG(88)                                                          FIX11   32
          GO TO 210                                                             FIX11   33
      END IF                                                                    FIX11   34
C              INPUT ONE *------*                                               GETLL   25
30     call  GETCS                                                              GETLL   26
C              IF HIT )                                                         GETLL   27
      IF (ISYMB(1).EQ.HOLL(16)) GO TO 70                                        GETLL   28
C              IF HIT ..                                                        GETLL   29
   40 IF (ITERM.NE.0) GO TO 60                                                  FIX11   35
C              INCR NUMBER FOUND                                                GETLL   31
      NFND   = NFND + 1                                                         GETLL   32
C              IF MORE THAN MAX                                                 GETLL   33
      IF (NFND.GT.LEN) GO TO 50                                                 GETLL   34
C              MOVE LITERAL INTO DATA AREA                                      GETLL   35
      DO I=1,IWPI                                                               EXPR2   20
          IVX = IWPI*(NFND-1) + I                                               EXPR2   21
          IVTYPE(IVX) = IPACKB(1,5,5,IVTYPE(IVX))                               EXPR2   22
          IVAL(IVX) = ISYMB(I)                                                  EXPR2   23
      END DO                                                                    EXPR2   24
C              IF ONLY ONE ITEM                                                 GETLL   38
      IF (LEN.EQ.1) THEN                                                        FIX11   36
C              IF NOT A LIST, RETURN                                            FIX11   37
          IF (LENSAV.EQ.1) RETURN                                               FIX11   38
C              IF A LIST WITH NO PARENTHESES, CHECK THAT IT HAS ONLY            FIX11   39
C              ONE ELEMENT.                                                     FIX11   40
          CALL GETCS                                                            FIX11   41
          IF (ITERM.GT.0) RETURN                                                FIX11   42
          CALL TBLSCH(ISYMU,KWD(1,1),16,NK,1,JK2)                               FIX11   43
          IF (JK2.GT.0) THEN                                                    FIX11   44
              CALL BKSPAC                                                       FIX11   45
              RETURN                                                            FIX11   46
          ELSE                                                                  FIX11   47
              CALL BKSPAC                                                       FIX11   48
              CALL MSG(88)                                                      FIX11   49
              GO TO 210                                                         FIX11   50
          END IF                                                                FIX11   51
      END IF                                                                    FIX11   52
C              GET NEXT LIT                                                     GETLL   40
      GO TO 30                                                                  GETLL   41
   50 NFND   = LEN                                                              GETLL   42
      CALL MSG2 (19, LEN, DUM, DUM, DUM)                                        GETLL   43
      GO TO 210                                                                 GETLL   44
   60 IF (LEN.EQ.1) CALL MSG2 (26, KWD, DUM, DUM, DUM)                          GETLL   45
      IF (LEN.NE.1) CALL MSG (66)                                               GETLL   46
      GO TO 300                                                                 GETLL   47
   70 IF (LEN.NE.1) GO TO 80                                                    GETLL   48
      CALL MSG (78)                                                             GETLL   49
      RETURN                                                                    GETLL   50
C              IF EMPTY LIST                                                    GETLL   51
   80 IF (NFND.EQ.0) CALL MSG (67)                                              GETLL   52
      RETURN                                                                    GETLL   53
  210 CALL MSG (86)                                                             GETLL   54
  220 CALL GETCS                                                                GETLL   55
      IF (ITERM.NE.0) GO TO 300                                                 GETLL   56
      IF (ISYMB(1).EQ.HOLL(16)) RETURN                                          GETLL   57
      GO TO 220                                                                 GETLL   58
  300 RETURN                                                                    GETLL   59
      END                                                                       GETLL   60
      SUBROUTINE GETEXP                                                         GETEXP   2
cDEC$ NOOPTIMIZE                                                                -048   157
C                                                                               GETEXP   3
C              Get an expression and store it in iData in /EXP_STRUCT/          GETEXP   4
C                                                                               GETEXP   5
      USE BDLSTRUCT                                                             -048   158
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
C                                                                               GETEXP  11
      INTEGER IEXPBF(4096),IEXPX2,IISV,II,IEXPX                                 DFTEX2  12
      INTEGER ILFD,ICRD                                                         DFTEXP  65
      CHARACTER*4 LFD,CRD                                                       DFTEXP  66
      EQUIVALENCE (ILFD,LFD),(ICRD,CRD)                                         DFTEXP  67
C                                                                               REFG     4
      II = 0                                                                    GETEXP  13
      IEXPX2 = 0                                                                GETEXP  14
      IISV = 0                                                                  GETEXP  15
      IEXPX = 0                                                                 GETEXP  16
      CALL FILLN(HOLL(14),IEXPBF(1),4096)                                       DFTEX2  13
      LFD = CHAR(10)//'   '                                                     REFG     5
      CRD = CHAR(13)//'   '                                                     DFTEXP  68
      KARDIs = KARDSX + 1                                                       DFTEXP  69
   10 DO II=KARDIs,KARDI2                                                       DFTEXP  70
          IISV = II                                                             GETEXP  20
          IEXPX = IEXPX2 + II - KARDIs + 1                                      DFTEXP  71
          IF(IEXPX.GT.4096) THEN                                                DFTEX2  14
            CALL MSG2(158,4096,II,II,II)                                        DFTEX2  15
            GOTO 100                                                            DFTEXP  74
          ENDIF                                                                 DFTEXP  75
          IF (KARD(II).EQ.KCRCRL) GO TO 100                                     GETEXP  23
      END DO                                                                    GETEXP  24
C              Note: not moving the <CR> at end of line!                        GETEXP  25
      NMOVE = KARDI2 - KARDIs                                                   DFTEXP  76
      IF (NMOVE.GT.0) CALL MOVEN(KARD(KARDIs),IEXPBF(IEXPX2+1),NMOVE)           DFTEXP  77
C              Put carriagereturn/linefeed at end of line                       DFTEXP  78
      IEXPBF(IEXPX2+NMOVE+1) = ICRD                                             DFTEXP  79
      IEXPBF(IEXPX2+NMOVE+2) = ILFD                                             DFTEXP  80
      IEXPX2 = IEXPX + 1                                                        DFTEXP  81
      KARDIs = KARDI1                                                           DFTEXP  82
      CALL KRDRD                                                                DFTEXP  83
      GO TO 10                                                                  GETEXP  29
  100 NMOVE = IISV - KARDIs                                                     DFTEXP  84
      IF (NMOVE.GT.0) CALL MOVEN(KARD(KARDIs),IEXPBF(IEXPX2+1),NMOVE)           DFTEXP  85
      CALL A1A4(IEXPBF(1),iData(1),1024)                                        DFTEX2  16
      iExplen = IEXPX2 + IISV - KARDIs                                          DFTEXP  87
      KARDX = II + 1                                                            DFTEXP  88
      RETURN                                                                    GETEXP  35
      END                                                                       GETEXP  36
      SUBROUTINE GETLS(IA,KWD,JK,NK,IOPTLS,IPAREN,IVAL,IVTYPE,NFND)             FIX11   53
      USE BDLSTRUCT                                                             -048   159
      USE MSGBOX                                                                -048   160
C                                                                               GETLS    3
C              GETLS GETS A LIST OF SYMBOLS                                     GETLS    4
C                                                                               GETLS    5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /OPLIST/ VLIST(2000),LSTEND,LENVLS,LENMAX                          FIX7     2
      DIMENSION IVLIST(2000)                                                    FIX7     3
      EQUIVALENCE (IVLIST(1),VLIST(1))                                          /OPLIST/ 4
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      DIMENSION KWD(16,1),IVAL(1),IVTYPE(1),IA(1)                               FIX11   54
      DATA IDEF/4H&D  /                                                         DFTEX4  64
C                                                                               GETLS   10
      LEN = KWD(9,JK)                                                           FIX11   55
      IF (IOPTLS.EQ.1) LEN=LENVLS-1                                             OPLST1  21
      NFND   = 0                                                                GETLS   12
      LENSAV = LEN                                                              FIX11   56
C              IF SINGLE, AVOID ( )                                             GETLS   13
      IF (LEN.EQ.1) GO TO 30                                                    GETLS   14
C              GET ( AND CHECK FOR ERROR                                        GETLS   15
      CALL GETCS                                                                GETLS   16
C              IF ( GO GET NEXT SYMBOL                                          FIX11   57
      IF (ISYMB(1).EQ.HOLL(15)) GO TO 30                                        FIX11   58
C              NO ( ; IF PARENTHESES NOT REQUIRED, ASSUME SINGLE                FIX11   59
C              ELEMENT LIST                                                     FIX11   60
      IF (IPAREN.EQ.0) THEN                                                     FIX11   61
          LEN = 1                                                               FIX11   62
          GO TO 40                                                              FIX11   63
C              OTHERWISE ISSUE ERROR AND SKIP TO END OF LIST OR COMMAND         FIX11   64
      ELSE                                                                      FIX11   65
          CALL MSG(88)                                                          FIX11   66
          GO TO 210                                                             FIX11   67
      END IF                                                                    FIX11   68
C              GET NEXT SYMBOL                                                  GETLS   20
   30 CALL GETCS                                                                GETLS   21
C              IF SINGLE                                                        GETLS   22
      IF (LEN.EQ.1) GO TO 40                                                    GETLS   23
C              IF HIT )                                                         GETLS   24
      IF (ISYMB(1).EQ.HOLL(16)) GO TO 70                                        GETLS   25
C              IF HIT ..                                                        GETLS   26
   40 IF (ITERM.NE.0) GO TO 60                                                  GETLS   27
C              INCR NUMBER FOUND                                                GETLS   28
      NFND   = NFND + 1                                                         GETLS   29
C              IF TOO MANY                                                      GETLS   30
      IF (NFND.GT.LEN) GO TO 50                                                 GETLS   31
C              Check if &D (default list placeholder) was specified             DFTEX4  65
      IF((LEN.GT.1) .and. (ISYMU(1).eq.IDEF)) GOTO 30                           DFTEX4  66
C              GET SYMBOL TABLE INDEX OR AA INDEX OF EXPRESSION                 EXPR2   29
      IF (ISYMB(1).EQ.KCLCRL) THEN                                              EXPR2   30
          iCommand = JOPcur                                                     EXPR2   31
          iReforType = JREFcur                                                  DFTEXP  89
          iKeyword = IOPCDT(9,JOPcur)-IOPCDT(9,1) + JKWcur                      DFTEX4  67
          IF(IOPCDT(24,JOPcur) .lt. 0) IKeyword =                               DFTEX4  68
     $      IKeyword + (JTYPcur-1)*IOPCDT(10,JOPcur)                            DFTEX4  69
          iArray = NFND                                                         EXPR2   34
          IF(ISDflg .eq. 0)  THEN                                               DFTEXP  90
            IF(LIBflg .eq. 0)  THEN                                             DFTEXP  91
              iDataType= 6                                                      DFTEXP  92
            ELSE                                                                DFTEXP  93
              iDataType= 4                                                      DFTEXP  94
            ENDIF                                                               DFTEXP  95
          ELSE                                                                  DFTEXP  96
            IF(ISDflg .eq. 1)  THEN                                             DFTEX2  17
              iDataType= 8                                                      DFTEX2  18
            ELSE                                                                DFTEX2  19
              iDataType= 2                                                      DFTEX2  20
            ENDIF                                                               DFTEX2  21
          ENDIF                                                                 DFTEXP  98
          ifunction = 1                                                         EXPR2   35
C              Do not collect expressions for OPTIONAL LISTs                    DFTEXP 100
C              or within Sub-Commands (space-conditions, etc.)                  -034     1
          ISCiopflg = 0                                                         -034     2
          IF ((iCommand.eq.9) .or.                                              -034     3
     $        ((iCommand.ge.49) .and. (iCommand.le.54)) .or.                    -034     4
     $        ((iCommand.ge.56) .and. (iCommand.le.58)) ) THEN                  -034     5
            ISCiopflg = 1                                                       -034     6
          ENDIF                                                                 -034     7
          IF((IOPTLS .EQ. 0).and.(ISCiopflg.eq.0)) THEN                         -034     8
            CALL GETEXP                                                         -034     9
            irv= bdlexpglobalfunc()                                             -042L5b 48
            IF( NumErr .NE. 0 )  CALL MSGEXP(1)                                 -034    11
          ELSE                                                                  -034    12
            IF(ISCiopflg.eq.0) THEN                                             -034    13
              CALL MSG(109)                                                     -034    14
            ELSE                                                                -034    15
              CALL MSG(92)                                                      -034    16
            ENDIF                                                               -034    17
            CALL GETEXP                                                         -034    18
          ENDIF                                                                 -034    19
          ISCiopflg = 0                                                         -034    20
      ELSE                                                                      EXPR2   41
          CALL GETS(IA,KWD(1,JK),IVAL(NFND))                                    FIX11   69
          IF(NOVAL(IVAL(NFND)) .NE. 0)  THEN                                    DFTEX4  70
            I = 5                                                               DFTEX4  71
          ELSE                                                                  DFTEX4  72
            I = 1                                                               DFTEX4  73
          END IF                                                                DFTEX4  74
          IF (IOPTLS.EQ.0) THEN                                                 DFTEX4  75
            IVTYPE(NFND) = IPACKB(1,5,I,IVTYPE(NFND))                           DFTEX4  76
          ELSE                                                                  DFTEX4  77
            IVTYPE(1) = IPACKB(1,5,I,IVTYPE(1))                                 DFTEX4  78
          END IF                                                                DFTEX4  79
      END IF                                                                    EXPR2   48
C              IF SINGLE                                                        GETLS   34
      IF (LEN.EQ.1) THEN                                                        FIX11   70
C              IF NOT A LIST, RETURN                                            FIX11   71
          IF (LENSAV.EQ.1) RETURN                                               FIX11   72
C              IF A LIST WITH NO PARENTHESES, CHECK THAT IT HAS ONLY            FIX11   73
C              ONE ELEMENT.                                                     FIX11   74
          CALL GETCS                                                            FIX11   75
          IF (ITERM.GT.0) RETURN                                                FIX11   76
          CALL TBLSCH(ISYMU,KWD(1,1),16,NK,1,JK2)                               FIX11   77
          IF (JK2.GT.0) THEN                                                    FIX11   78
              CALL BKSPAC                                                       FIX11   79
              RETURN                                                            FIX11   80
          ELSE                                                                  FIX11   81
              CALL BKSPAC                                                       FIX11   82
              CALL MSG(88)                                                      FIX11   83
              GO TO 210                                                         FIX11   84
          END IF                                                                FIX11   85
      END IF                                                                    FIX11   86
      GO TO 30                                                                  GETLS   36
   50 NFND   = LEN                                                              GETLS   37
      IF (IOPTLS.EQ.0) THEN                                                     OPLST1  29
          CALL MSG2 (19, LEN, DUM, DUM, DUM)                                    OPLST1  30
          GO TO 210                                                             OPLST1  31
      ELSE                                                                      OPLST1  32
          CALL MSG2(153,LENMAX,LENMAX,LENMAX,LENMAX)                            FIX11   87
          GO TO 210                                                             OPLST1  37
      END IF                                                                    OPLST1  38
   60 IF (LEN.EQ.1) CALL MSG2 (26, KWD, DUM, DUM, DUM)                          GETLS   40
      IF (LEN.NE.1) CALL MSG (66)                                               GETLS   41
      GO TO 300                                                                 GETLS   42
   70 IF (NFND.EQ.0) CALL MSG (67)                                              GETLS   43
      RETURN                                                                    GETLS   44
C              SKIP TO .. OR )                                                  GETLS   45
  210 CALL MSG (86)                                                             GETLS   46
  220 CALL GETCS                                                                GETLS   47
      IF (ITERM.NE.0) GO TO 300                                                 GETLS   48
      IF (ISYMB(1).EQ.HOLL(16)) RETURN                                          GETLS   49
      GO TO 220                                                                 GETLS   50
  300 RETURN                                                                    GETLS   51
      END                                                                       GETLS   52
      SUBROUTINE GETLV(KWD,JK,NK,IOPTLS,IPAREN,VAL,IVTYPE,NFND)                 FIX11   88
C                                                                               GETLV    3
C              GETLV GETS A LIST OF VARIABLES FROM THE INPUT                    GETLV    4
C              ARRAY KARD                                                       GETLV    5
C                                                                               GETLV    6
      USE BDLSTRUCT                                                             -048   161
      USE MSGBOX                                                                -048   162
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /OPLIST/ VLIST(2000),LSTEND,LENVLS,LENMAX                          FIX7     2
      DIMENSION IVLIST(2000)                                                    FIX7     3
      EQUIVALENCE (IVLIST(1),VLIST(1))                                          /OPLIST/ 4
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      DIMENSION KWD(16,1),VAL(1),IVTYPE(1)                                      FIX11   89
      DATA IDEF/4H&D  /                                                         DFTEX4  80
C                                                                               GETLV   11
      FLAG = 0.                                                                 EXPR2   53
      KTYPE  = KWD(8,JK)                                                        FIX11   90
      LEN    = KWD(9,JK)                                                        FIX11   91
      IF (IOPTLS.EQ.1) LEN=LENVLS-1                                             OPLST1  42
      VMIN   = TYPLS(KWD(10,JK))                                                FIX11   92
      VMAX   = TYPLS(KWD(11,JK))                                                FIX11   93
C              SET HIGH-CAUTION FLAG                                            GETLV   16
      HICAUT = 0.                                                               OPLST1  43
      IF (KTYPE.EQ.1 .OR. KTYPE.EQ.11) HICAUT=1.                                OPLST1  44
      NFND   = 0                                                                GETLV   19
      LENSAV = LEN                                                              FIX11   94
C              IF SINGLE                                                        GETLV   20
      IF (LEN.EQ.1) GO TO 30                                                    GETLV   21
C              CHECK FOR (                                                      FIX11   95
      FLAG = GETV2(V)                                                           OPLST1  45
C              IF LEFT PARENTHESIS, GO PROCESS LIST                             FIX11   96
      IF (ISYMB(1).EQ.HOLL(15)) GO TO 30                                        OPLST1  47
C              NO (; IF PARENTHESES NOT REQUIRED, ASSUME SINGLE ELEMENT         FIX11   97
C              LIST.                                                            FIX11   98
      IF (IPAREN.EQ.0) THEN                                                     FIX11   99
          LEN = 1                                                               OPLST1  50
C              IF LEGAL VALUE                                                   OPLST1  51
          IF (FLAG.EQ.1.) THEN                                                  FIXJH1   6
              NFND = NFND + 1                                                   OPLST1  53
              GO TO 35                                                          OPLST1  54
C              NOT LEGAL VALUE; GO CHECK FOR EXPRESSION                         FIX11  100
          ELSE                                                                  OPLST1  56
              GO TO 80                                                          OPLST1  57
          END IF                                                                OPLST1  58
C              NO (; PARENTHESES REQUIRED; ISSUE ERROR                          FIX11  101
      ELSE                                                                      OPLST1  60
          CALL MSG(88)                                                          OPLST1  61
          GO TO 210                                                             OPLST1  62
      END IF                                                                    OPLST1  63
   30 NFND   = NFND + 1                                                         GETLV   27
C              IF NOT NUMERIC                                                   GETLV   28
      IF (GETV2(V).EQ.0.) GO TO 80                                              GETLV   29
C              IF NOT ROUNDED TYPE                                              GETLV   30
   35 IF (KTYPE.NE.6 .AND. KTYPE.NE.16) GO TO 40                                OPLST1  64
C              ROUND TO NEAREST INTEGER                                         GETLV   32
      IF (V.GT.0) V = IFIX(V+.5)                                                GETLV   33
      IF (V.LT.0) V = IFIX(V-.5)                                                GETLV   34
C              IF WITHIN BOUNDS                                                 GETLV   35
   40 IF ((V.GE.VMIN).AND.(V.LE.VMAX)) GO TO 60                                 GETLV   36
C              IF NO BOUNDS                                                     GETLV   37
      IF ((VMIN.EQ.0).AND.(VMAX.EQ.0)) GO TO 60                                 GETLV   38
      IF (V.GT.VMAX) GO TO 50                                                   GETLV   39
      CALL MSG2 (28, KWD(10,JK),KWD(11,JK),DUM,DUM)                             FIX11  102
      GO TO 60                                                                  GETLV   41
C              IF NO BOUNDS                                                     GETLV   42
   50 IF (HICAUT.EQ.0.) CALL MSG2 (28,KWD(10,JK),KWD(11,JK),DUM,DUM)            FIX11  103
      IF (HICAUT.NE.0.) CALL MSG2 (18,KWD(11,JK),DUM,DUM,DUM)                   FIX11  104
C              IF NOT FOUND TOO MANY                                            GETLV   45
   60 IF (NFND.LE.LEN) GO TO 70                                                 GETLV   46
   65 NFND   = LEN                                                              EXPR2   54
      IF (IOPTLS.EQ.0) THEN                                                     OPLST1  65
          CALL MSG2 (19,KWD(9,JK),DUM,DUM,DUM)                                  FIX11  105
          GO TO 210                                                             OPLST1  67
      ELSE                                                                      OPLST1  68
          CALL MSG2(153,LENMAX,LENMAX,LENMAX,LENMAX)                            FIX11  106
          GO TO 210                                                             OPLST1  73
      END IF                                                                    OPLST1  74
C              PUT VALUE IN VALUE ARRAY                                         GETLV   50
   70 VAL(NFND) = V                                                             GETLV   51
      IF (IOPTLS.EQ.0) THEN                                                     EXPR2   55
          IVTYPE(NFND) = IPACKB(1,5,5,IVTYPE(NFND))                             EXPR2   56
      ELSE                                                                      EXPR2   57
          IVTYPE(1) = IPACKB(1,5,5,IVTYPE(1))                                   EXPR2   58
      END IF                                                                    EXPR2   59
C              IF SINGLE                                                        FIX11  107
      IF (LEN.EQ.1) THEN                                                        FIX11  108
C              IF NOT A LIST, RETURN                                            FIX11  109
          IF (LENSAV.EQ.1) RETURN                                               FIX11  110
C              IF A LIST WITH NO PARENTHESES, CHECK THAT IT HAS ONLY            FIX11  111
C              ONE ELEMENT.                                                     FIX11  112
          CALL GETCS                                                            FIX11  113
          IF (ITERM.GT.0) RETURN                                                FIX11  114
          CALL TBLSCH(ISYMU,KWD(1,1),16,NK,1,JK2)                               FIX11  115
          IF (JK2.GT.0) THEN                                                    FIX11  116
              CALL BKSPAC                                                       FIX11  117
              RETURN                                                            FIX11  118
          ELSE                                                                  FIX11  119
              CALL BKSPAC                                                       FIX11  120
              CALL MSG(88)                                                      FIX11  121
              GO TO 210                                                         FIX11  122
          END IF                                                                FIX11  123
      END IF                                                                    FIX11  124
      GO TO 30                                                                  GETLV   54
C              IF EXPRESSION                                                    EXPR2   60
   80 IF (ISYMB(1).EQ.KCLCRL) THEN                                              EXPR2   61
          iCommand = JOPcur                                                     EXPR2   62
          iReforType = JREFcur                                                  DFTEXP 109
          iKeyword = IOPCDT(9,JOPcur)-IOPCDT(9,1) + JKWcur                      DFTEX4  81
          IF(IOPCDT(24,JOPcur) .lt. 0) IKeyword =                               DFTEX4  82
     $      IKeyword + (JTYPcur-1)*IOPCDT(10,JOPcur)                            DFTEX4  83
          iArray = NFND                                                         EXPR2   65
          IF(ISDflg .eq. 0)  THEN                                               DFTEXP 110
            IF(LIBflg .eq. 0)  THEN                                             DFTEXP 111
              iDataType= 6                                                      DFTEXP 112
            ELSE                                                                DFTEXP 113
              iDataType= 4                                                      DFTEXP 114
            ENDIF                                                               DFTEXP 115
          ELSE                                                                  DFTEXP 116
            IF(ISDflg .eq. 1)  THEN                                             DFTEX2  22
              iDataType= 8                                                      DFTEX2  23
            ELSE                                                                DFTEX2  24
              iDataType= 2                                                      DFTEX2  25
            ENDIF                                                               DFTEX2  26
          ENDIF                                                                 DFTEXP 118
          ifunction = 1                                                         EXPR2   66
C              Do not collect expressions for OPTIONAL LISTs                    DFTEXP 120
C              or within Sub-Commands (space-conditions, etc.)                  -034    21
          ISCiopflg = 0                                                         -034    22
          IF ((iCommand.eq.9) .or.                                              -034    23
     $        ((iCommand.ge.49) .and. (iCommand.le.54)) .or.                    -034    24
     $        ((iCommand.ge.56) .and. (iCommand.le.58)) ) THEN                  -034    25
            ISCiopflg = 1                                                       -034    26
          ENDIF                                                                 -034    27
          IF((IOPTLS .EQ. 0).and.(ISCiopflg.eq.0)) THEN                         -034    28
            CALL GETEXP                                                         -034    29
            irv= bdlexpglobalfunc()                                             -042L5b 51
            IF( NumErr .NE. 0 )  CALL MSGEXP(1)                                 -034    31
          ELSE                                                                  -034    32
            IF(ISCiopflg.eq.0) THEN                                             -034    33
              CALL MSG(109)                                                     -034    34
            ELSE                                                                -034    35
              CALL MSG(92)                                                      -034    36
            ENDIF                                                               -034    37
            CALL GETEXP                                                         -034    38
          ENDIF                                                                 -034    39
          ISCiopflg = 0                                                         -034    40
          IF (NFND.GT.LEN) GO TO 65                                             EXPR2   69
          IF (LEN.EQ.1) RETURN                                                  EXPR2   73
          GO TO 30                                                              EXPR2   74
C              Check if &D (default list placeholder) was specified             DFTEX4  84
      ELSE IF(ISYMU(1).eq.IDEF) THEN                                            DFTEX4  85
        IF (NFND.GT.LEN) GOTO 65                                                DFTEX4  86
        GOTO 30                                                                 DFTEX4  87
      ENDIF                                                                     DFTEX4  88
      IF (LEN.EQ.1) GO TO 90                                                    EXPR2   76
C              IF NOT A )                                                       GETLV   56
      IF (ISYMB(1).NE.HOLL(16)) GO TO 90                                        GETLV   57
      NFND   = NFND - 1                                                         GETLV   58
      IF (NFND.EQ.0) CALL MSG (67)                                              GETLV   59
      RETURN                                                                    GETLV   60
   90 IF (ITERM.EQ.0) GO TO 100                                                 GETLV   61
      NFND   = NFND - 1                                                         GETLV   62
      IF (LEN.EQ.1) CALL MSG2 (26, KWD, DUM, DUM, DUM)                          GETLV   63
      IF (LEN.NE.1) CALL MSG (66)                                               GETLV   64
      GO TO 300                                                                 GETLV   65
  100 CALL MSG (70)                                                             GETLV   66
      GO TO 60                                                                  GETLV   67
C              IF .. ALREADY HIT                                                GETLV   68
  210 IF (ITERM.NE.0) GO TO 300                                                 GETLV   69
C              SKIPPING TO ) OR ..                                              GETLV   70
      CALL MSG (86)                                                             GETLV   71
  220 CALL GETCS                                                                FIX11  125
      IF (ITERM.NE.0) GO TO 300                                                 FIX11  126
      IF (ISYMB(1).EQ.HOLL(16)) GO TO 300                                       GETLV   73
                                                                                FIX11  127
      GO TO 220                                                                 GETLV   75
  300 CONTINUE                                                                  GETLV   76
      RETURN                                                                    GETLV   77
      END                                                                       GETLV   78
      SUBROUTINE GETS (ISYMTB, KWD, JSYM)                                       GETS     2
C                                                                               GETS     3
C              GETS GETS A SYMBOL FROM THE INPUT KARD                           GETS     4
C              AND CHECKS IT FOR VALIDITY                                       GETS     5
C                                                                               GETS     6
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      COMMON /IPARAM/ NPARAM, MPARAM, IPARAM(17,6000)                           -048t    1
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION KWD(16), DESC(4), ISYMTB(16,1)                                  KEYSIZ  11
C                                                                               GETS    14
      KTYPE  = KWD(8)                                                           GETS    16
      ISTYPE = KWD(10)                                                          GETS    17
      ITBL   = KWD(11)                                                          GETS    18
      ISUBTY = KWD(15)                                                          SUBTY1   5
C              LOOK IN PARAMETER TABLE                                          GETS    19
      CALL TBLSCH (ISYMB, IPARAM, 17, NPARAM, 2, JP)                            PARAM    9
C              IF NOT FOUND                                                     GETS    21
      IF (JP.EQ.0) GO TO 15                                                     GETS    22
C              IF NUMBER                                                        GETS    23
      IF (IPARAM( 9,JP).NE.0) GO TO 20                                          PARAM   10
C              SUBSTITUTE PAR FOR INPUT SYMBOL                                  GETS    25
      DO 10 I = 1,8                                                             PARAM   11
   10 ISYMB(I) = IPARAM(9+I,JP)                                                 PARAM   12
C              IF SYMBOL TABLE NOT TO BE SEARCHED                               GETS    29
   15 IF (KTYPE.EQ.8) GO TO 200                                                 GETS    30
C              IF SYM MUST HAVE BEEN PREV DEF                                   GETS    31
      IF (KTYPE.EQ.2 .OR. KTYPE.EQ.12) GO TO 100                                OPLST1  75
C              IF NEXT SYMBOL NOT A NUMBER                                      GETS    33
              if ( atof( ISYMB, LSYMB, 0, V ) .eq. 0. )     goto  30            FIXJH1   7
   20 CALL MSG (20)                                                             GETS    35
      JSYM   = IUNDE                                                            GETS    36
      RETURN                                                                    GETS    37
C                                                                               GETS    38
C              UNDEFINED SYMBOLS                                                GETS    39
C                                                                               GETS    40
C              LOOK IN SYMBOL TABLE                                             GETS    43
   30 CALL SYMSRU(ISYMB,ISYMTB,NSYMTB,16,8,JSYM)                                SYMSIZ  27
C              IF NOT THERE                                                     GETS    45
      IF (JSYM.EQ.0) GO TO 200                                                  GETS    46
C              CHECK IF SYMBOL IS IN LIBRARY                                    FIX5     2
      IF (ISYMTB(13,JSYM).GT.0) THEN                                            FIX5     3
          ISYMTB(13,JSYM) = -ISYMTB(13,JSYM)                                    FIX5     4
          IF (JSYMLX.EQ.0) THEN                                                 FIX5     5
              JSYMLX = JSYM                                                     FIX5     6
          ELSE                                                                  FIX5     7
              JSYMLX = MIN0(JSYMLX,JSYM)                                        FIX5     8
          END IF                                                                FIX5     9
      END IF                                                                    FIX5    10
C              CHECK FOR CORRECT SYMBOL TYPE                                    SUBTY1   6
      IF (ISTYPE.GT.0 .AND. ISYMTB(9,JSYM).GT.0                                 SUBTY1   7
     1    .AND. ISTYPE.NE.ISYMTB(9,JSYM)) THEN                                  SUBTY1   8
C              GET SYMBOL DESCRIPTION                                           SUBTY1   9
          CALL SYMDSC(ISYMTB(9,JSYM), DESC)                                     SUBTY1  10
C              PRINT ERR MSG                                                    SUBTY1  11
          CALL MSG2 (30, ISYMTB(11,JSYM), DESC, DUM, DUM)                       SUBTY1  12
          JSYM   = IUNDE                                                        SUBTY1  13
          RETURN                                                                FIX6    14
      END IF                                                                    SUBTY1  14
C              CHECK FOR CORRECT SUBTYPE                                        SUBTY1  15
      JSSUB = ISYMTB(14,JSYM)                                                   SUBTY1  16
      IF (ISUBTY.GT.0 .AND. JSSUB.GT.0 .AND.                                    SUBTY4   1
     1    KOMPR3(JSSUB,ISUBTY,1024).EQ.0) THEN                                  SUBTY4   2
          CALL SUBTYPERR(ISYMTB(1,JSYM),ISUBTY)                                 SUBTY4   3
          RETURN                                                                FIX6    15
      END IF                                                                    SUBTY1  20
      RETURN                                                                    GETS    61
C                                                                               GETS    62
C              PREVIOUSLY DEFINED SYMBOLS                                       GETS    63
C                                                                               GETS    64
  100 IF (ISTYPE.LE.99) THEN                                                    GETS    65
          CALL SYMSRU(ISYMB,ISYMTB,NSYMTB,16,8,JSYM)                            SYMSIZ  34
      ELSE                                                                      GETS    67
          CALL SYMSRC(ISYMB,ISYMTB,ISTYPE,NSYMTB,16,8,JSYM)                     SYMSIZ  35
      END IF                                                                    GETS    69
      IF (JSYM.EQ.0) GO TO 200                                                  GETS    70
C              IF SYMBOL UNDEFINED AND NOT A PREV DEFINED SYMBOL                GETS    71
      IF ((ISYMTB(10,JSYM).EQ.0).AND.(ISYMTB(9,JSYM).LT.100))                   SYMSIZ  36
     1      GO TO 140                                                           GETS    73
C              CHECK IF SYMBOL IS IN LIBRARY                                    CRV2     2
      IF (ISYMTB(13,JSYM).GT.0) THEN                                            CRV2     3
          ISYMTB(13,JSYM) = -ISYMTB(13,JSYM)                                    CRV2     4
          IF (JSYMLX.EQ.0) THEN                                                 CRV2     5
              JSYMLX = JSYM                                                     CRV2     6
          ELSE                                                                  CRV2     7
              JSYMLX = MIN0(JSYMLX,JSYM)                                        CRV2     8
          END IF                                                                CRV2     9
      END IF                                                                    CRV2    10
C              CHECK FOR UNUSED CODE WORD.  IF UNUSED, ISSUE MESSAGE.           GETS    76
      IF (ISYMTB(12,JSYM) .EQ. -888)  THEN                                      FIX6    16
         CALL MSG2(82,ISYMTB(1,JSYM),DUM,DUM,DUM)                               FIX6    17
          JSYM   = IUNDE                                                        DFTEX4  89
         RETURN                                                                 FIX6    18
      ENDIF                                                                     FIX6    19
      JSYM2 = JSYM                                                              GETS    79
      IF (ISYMTB(12,JSYM2) .EQ. -888)  JSYM = IUNDE                             SYMSIZ  39
C              CHECK FOR CORRECT SYMBOL TYPE                                    SUBTY1  21
      IF (ISTYPE.GT.0 .AND. ISYMTB(9,JSYM2).GT.0                                SUBTY1  22
     1    .AND. ISTYPE.NE.ISYMTB(9,JSYM2)) THEN                                 SUBTY1  23
          CALL SYMDSC(ISYMTB(9,JSYM2), DESC)                                    SUBTY1  24
          CALL MSG2(30, ISYMTB(11,JSYM2), DESC, DUM, DUM)                       SUBTY1  25
          JSYM   = IUNDE                                                        SUBTY1  26
          RETURN                                                                FIX6    20
      END IF                                                                    SUBTY1  27
C              CHECK FOR CORRECT SUBTYPE                                        SUBTY1  28
      JSSUB = ISYMTB(14,JSYM2)                                                  SUBTY1  29
      IF (ISUBTY.GT.0 .AND. JSSUB.GT.0 .AND.                                    SUBTY4   4
     1    KOMPR3(JSSUB,ISUBTY,1024).EQ.0) THEN                                  SUBTY4   5
          CALL SUBTYPERR(ISYMTB(1,JSYM),ISUBTY)                                 SUBTY4   6
          RETURN                                                                FIX6    21
      END IF                                                                    SUBTY1  33
      RETURN                                                                    GETS    88
C                                                                               GETS    89
C              SYMBOL NOT FOUND                                                 GETS    90
C                                                                               GETS    91
C              IF CODEWORD                                                      GETS    92
  140 IF (ISTYPE.GT.99) CALL MSG ( 8)                                           GETS    93
C              IF NOT A CODEWORD                                                GETS    94
      IF (ISTYPE.LE.99) CALL MSG (14)                                           GETS    95
      JSYM   = IUNDE                                                            GETS    96
      RETURN                                                                    GETS    97
  200 IF (ITBL.EQ.0) GO TO 250                                                  GETS    98
      CALL ALTTBL(ITBL,ISTYPE,JSYM,ISYMTB)                                      GETS    99
      IF (ITYPLS(JSYM) .NE. ITYPLS(UNDEF(1)))  RETURN                           GETS   100
C              CHECK IF DEFINED SYMBOL REQUIRED                                 GETS   101
  250 IF ((KTYPE .EQ. 2) .OR. (KTYPE .EQ. 8))  GO TO 140                        GETS   102
C              ENTER UNDEFINED SYMBOL IN SYMBOL TABLE                           GETS   103
      CALL SYMENT(ISYMTB,ISYMB,ISTYPE,ISUBTY,JSYM)                              SUBTY1  34
      RETURN                                                                    GETS   105
      END                                                                       GETS   106
      FUNCTION GETV (VALUE)                                                     GETV     2
C                                                                               GETV     3
C              GETV GETS A FLOATING POINT VALUE FROM KARD                       GETV     4
c---     return =0. if error , else return =1.                                  GETV     5
C                                                                               GETV     6
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
C                                                                               GETV     8
      VALUE  = 0.                                                               FIXJH1   8
C$    write(6,'('' GETV   -->'')')                                              GETV    10
       call  GETCS                                                              GETV    11
      if ( ITERM .eq. 0 )     then                                              GETV    12
          GETV = AtoF( ISYMB, LSYMB, 0, VALUE )                                 GETV    13
      else                                                                      GETV    14
          GETV = 0.                                                             FIXJH1   9
      endif                                                                     GETV    16
C$    write(6,'('' GETV   <-- =''f4.1)')  GETV                                  GETV    17
      RETURN                                                                    GETV    18
      END                                                                       GETV    19
      FUNCTION GETV2 (V)                                                        GETV2    2
C                                                                               GETV2    3
C              GETV2 INPUTS VARIABLES HAVING SCALE POSSIBILITY                  GETV2    4
C                                                                               GETV2    5
      COMMON /IPARAM/ NPARAM, MPARAM, IPARAM(17,6000)                           -048t    1
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      DIMENSION IHOLL1(2)                                                       GETV2    9
      DATA IHOLL1/4HTIME, 4HS   /                                               GETV2   10
C                                                                               GETV2   11
C$    write(6,'('' GETV2  -->'')')                                              GETV2   12
      IF (GETV(V).NE.0.) GO TO 110                                              GETV2   13
C              SEARCH PARAM TABLE                                               GETV2   14
      CALL TBLSCH (ISYMB, IPARAM, 17, NPARAM, 2, JPARAM)                        PARAM   13
C              IF NOT FOUND                                                     GETV2   16
      IF (JPARAM.EQ.0) GO TO 100                                                GETV2   17
C              IF NUMERIC PARAMETER                                             GETV2   18
      IF (IPARAM(9,JPARAM).EQ.1) GO TO 45                                       PARAM   14
      CALL MSG (89)                                                             GETV2   20
      GO TO 110                                                                 GETV2   21
C              GET NEXT CHAR STRING THIS CARD                                   GETV2   22
45             call  GETCS                                                      GETV2   23
              if ( KOMPAR( ISYMU, IHOLL1, 2 ) .ne. 0 )     goto  50             GETV2   24
C              BACKSPACE BOTH POINTERS                                          GETV2   25
                   call  BKSPAC                                                 GETV2   26
      V      = TYPLS(IPARAM(10,JPARAM))                                         PARAM   15
      GO TO 110                                                                 GETV2   28
   50 IF (GETV(V).NE.0.) GO TO 90                                               GETV2   29
      CALL MSG (70)                                                             GETV2   30
      GO TO 110                                                                 GETV2   31
   90 V      = V * TYPLS(IPARAM(10,JPARAM))                                     PARAM   16
      GO TO 110                                                                 GETV2   33
  100 GETV2  = 0.                                                               GETV2   34
      RETURN                                                                    GETV2   35
  110 GETV2  = 1.                                                               GETV2   36
C$    write(6,'('' GETV2  <-- =''f4.1)')  GETV2                                 GETV2   37
      RETURN                                                                    GETV2   38
      END                                                                       GETV2   39
      SUBROUTINE  HELP(AA,ISYMTB,KONTXT)                                        HELP     2
C                                                                               HELP     3
C              THIS ROUTINE PRODUCES A LISTING OF WHAT CURRENTLY                HELP     4
C              RESIDES IN THE COMMAND,CONTEXT, AND SYMBOL TABLES                HELP     5
C                                                                               HELP     6
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               HELP     8
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /FOR/    IFOR                                                     /FOR/    2
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON /IUNITS/ VKONV(300),DUMLOG(4),JUNITS(4,300,2),NUNITS,KUNITS        UNITS1   1
      INTEGER DUMLOG                                                            SUBTY1   1
      DIMENSION IUNITS(4,300)                                                   UNITS1   2
      EQUIVALENCE (IUNITS(1,1),JUNITS(1,1,1))                                   /IUNITS/ 4
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION NAME(4),AA(4,1),ISYMTB(16,1),KONTXT(16,1),BLANK(3)              KEYSIZ  12
      DIMENSION IDUM(4),NDEFA(4,6),IKTYPE(4,20),DFTN(4)                         DFTEX4  90
      EQUIVALENCE  (DFTS,KDFTS),(DFTN(1),COMMWK(2)),                            HELP    20
     1             (COMMWK(1),DFTS),(COMMWK(126),NAME(4))                       HELP    21
      DATA IDUM /4HCODE, 4H-WOR, 4HD   ,4H    /                                 HELP    22
      DATA IKTYPE /                                                             HELP    23
     1 4HNUME, 4HRIC , 4HERR,, 4HCAU , 4HSYMB, 4HOLIC, 4H DEF, 4HINED,          DFTEX4  91
     2 4HSYMB, 4HOLIC, 4H UND, 4HEF  , 4HLITE, 4HRAL , 4H    , 4H    ,          DFTEX4  92
     3 4HNUME, 4HRIC , 4HERR,, 4HERR , 4HNUME, 4HRIC , 4HROUN, 4HDED ,          DFTEX4  93
     4 4HFUNC, 4HTION, 4H    ,4H     , 4HSYMB, 4HOLIC, 4H IN , 4HTABL,          DFTEX4  94
     5 4HSYMB, 4HOLIC, 4H UND, 4HEF  , 4HSYMB, 4HOLIC, 4H CHI, 4HLD  ,          DFTEX4  95
     6 4HOPL-, 4HNUM , 4HERR,, 4HCAU , 4HOPL-, 4HSYMB, 4H DEF, 4HINED,          DFTEX4  96
     7 4HOPL-, 4HSYMB, 4H UND, 4HEF  , 4HOPL-, 4HLITE, 4HRAL , 4H    ,          DFTEX4  97
     8 4HOPL-, 4HNUM , 4HERR,, 4HERR , 4HOPL-, 4HNUM , 4HROUN, 4HDED ,          DFTEX4  98
     9 4HOPL-, 4H FUN, 4HC   ,4H     , 4HOPL-, 4HSYMB, 4H IN , 4HTABL,          DFTEX4  99
     $ 4HOPL-, 4HSYMB, 4H UND, 4HEF  , 4HOPL-, 4H CHI, 4HLD  , 4HLD  /          DFTEX4 100
      DATA NDEFA /                                                              HELP    32
     14H*REQ, 4HUIRE, 4HD*  , 4H    ,                                           HELP    33
     24H*UNU, 4HSED*, 4H    , 4H    ,                                           HELP    34
     34H*NO , 4HDEFA, 4HULT*, 4H    ,                                           HELP    35
     44H*SIM, 4H CAL, 4HC'd , 4HDFT*,                                           DFTEX4 101
     54H*DFT, 4H EXP, 4HRESS, 4HION*,                                           DFTEX4 102
     64H    , 4H    , 4H    , 4H    /                                           DFTEX4 103
      DATA IALL / 4HALL  /, BLANK / 3*4H     /                                  HELP    37
C              FIND FOR = COMMAND-NAME                                          HELP    38
      CALL GETCS                                                                HELP    39
      IF (ITERM .EQ. 0)  GOTO 1001                                              HELP    40
 1015 CALL MSG (78)                                                             HELP    41
      RETURN                                                                    HELP    42
1001  if ( ISYMU(1) .eq. IFOR )     goto  1010                                  HELP    43
C              FIRST NOT FOR                                                    HELP    44
      CALL MSG (6)                                                              HELP    45
 1005 CALL SKPEOC                                                               HELP    46
      RETURN                                                                    HELP    47
C              GET COMMAND                                                      HELP    48
 1010 CALL GETCS                                                                HELP    49
      IF (ITERM .NE. 0)  GOTO 1015                                              HELP    50
C               SEARCH COMMAND TABLE                                            HELP    51
      DO 1030 IBOP=1,NOPCDT                                                     HELP    52
          if ( ( KOMPAR( ISYMU, IOPCDT(1,IBOP), 4 ) .ne. 0 ) .or.               HELP    53
     1         ( KOMPAR( ISYMU, IOPCDT(5,IBOP), 2 ) .ne. 0 ) ) goto 1040        HELP    54
 1030 CONTINUE                                                                  HELP    55
C                SEE IF ALL                                                     HELP    56
      if ( ISYMU(1) .ne. IALL )     goto  1035                                  HELP    57
      IBOP   = 1                                                                HELP    58
      IEOP   = NOPCDT                                                           HELP    59
      GOTO 1045                                                                 HELP    60
C               BAD COMMAND                                                     HELP    61
 1035 CALL MSG (3)                                                              HELP    62
      GOTO 1005                                                                 HELP    63
 1040 IEOP   = IBOP                                                             HELP    64
C              GET TO ..                                                        HELP    65
 1045 CALL GETCS                                                                HELP    66
      IF (ITERM .NE. 0)  GOTO 1050                                              HELP    67
C              EXTRA DATA                                                       HELP    68
      CALL MSG (22)                                                             HELP    69
      GOTO 1045                                                                 HELP    70
 1050 CONTINUE                                                                  HELP    71
      WRITE(IOUTPT,8000)                                                        HELP    72
      DO 155 JOP=IBOP,IEOP                                                      HELP    73
      WRITE(IOUTPT,8010)(IOPCDT(I,JOP),I=1,6),(IOPCDT(I,JOP),I=12,13)           HELP    74
      IF (IOPCDT(12,JOP) .GE. 0)  GOTO 3                                        HELP    75
      I      = -IOPCDT(12,JOP)                                                  HELP    76
      WRITE(IOUTPT,8090)(IOPCDT(J,I),J=1,4)                                     HELP    77
      GOTO 155                                                                  HELP    78
    3 CONTINUE                                                                  HELP    79
      IF(IOPCDT(10,JOP) .LT. 1)  GOTO 155                                       DFTEX4 104
      NCmdTyp=MAX(1,IABS(IOPCDT(24,JOP)))                                       DFTEX4 105
      DO 160 NCmdT=1,NCmdTyp                                                    DFTEX4 106
      ISDFT  = IOPCDT(15,JOP) +  ((NCmdT-1)*4+1)*IOPCDT(23,JOP)                 DFTEX4 107
      ISK    = IOPCDT(9,JOP)                                                    DFTEX4 108
      IF(IOPCDT(24,JOP) .LT. 0)  ISK = ISK + (NCmdT-1)*IOPCDT(10,JOP)           DFTEX4 109
      IEK    = IOPCDT(10,JOP) + ISK - 1                                         DFTEX4 110
      IF(NCmdTyp .GT. 1)  WRITE (IOUTPT,8015) NCmdT                             DFTEX4 111
      DO 150 JKEY=ISK,IEK                                                       HELP    84
      IPDFT  = ISDFT + KONTXT(12,JKEY) - 1                                      HELP    85
      LEN    = KONTXT(9,JKEY)                                                   HELP    86
      DO I = 1,3                                                                DFTEX4 112
        NDEFA(I,6) = BLANK(I)                                                   DFTEX4 113
      ENDDO                                                                     DFTEX4 114
      DO 10 KDFT=1,4                                                            DFTEX4 115
      IF (ITYPLS(AA(IPDFT,1)) .EQ. ITYPLS(UNDEF(KDFT)))  GOTO 20                DFTEX4 116
   10 CONTINUE                                                                  DFTEX4 117
      KDFT   = 6                                                                DFTEX4 118
      IDFTStyp = IUNPKB(1,5,AA(IPDFT-IOPCDT(23,JOP),1))                         DFTEX4 119
      IF(IDFTStyp.eq.2 .OR. IDFTStyp.eq.8)  KDFT   = 5                          DFTEX4 120
   20 IDFTS = KDFT                                                              HELP    93
      DFTS = AA(IPDFT,1)                                                        HELP    94
      CALL MOVEN(NDEFA(1,KDFT),DFTN(1),4)                                       HELP    95
      IUN    = KONTXT(7,JKEY)                                                   HELP    96
      ITYP   = KONTXT(8,JKEY)                                                   HELP    97
      GOTO (100,110,110,120,100,100,130,110,110,110,                            DFTEX4 121
     $      100,110,110,120,100,100,130,110,110,110),ITYP                       DFTEX4 122
  100 WRITE(IOUTPT,8020,ERR=99003)(KONTXT(I,JKEY),I=1,6),                       HELP    99
     .                            (IUNITS(I,IUN),I=1,4),                        HELP   100
     1               (IKTYPE(I,ITYP),I=1,4),KONTXT(9,JKEY)                      HELP   101
99003 CONTINUE                                                                  HELP   102
      IF(KDFT .EQ. 6) THEN                                                      DFTEX4 123
        WRITE(IOUTPT,8021)(KONTXT(I,JKEY),I=10,11),DFTS                         DFTEX4 124
      ELSE                                                                      DFTEX4 125
        WRITE(IOUTPT,8022)(KONTXT(I,JKEY),I=10,11),(DFTN(I),I=1,4)              DFTEX4 126
      ENDIF                                                                     DFTEX4 127
      GOTO 150                                                                  HELP   106
  110 ISTYP  = KONTXT(10,JKEY)                                                  HELP   107
      NAME(1) = IDUM(1)                                                         HELP   108
      NAME(2) = IDUM(2)                                                         HELP   109
      NAME(3) = IDUM(3)                                                         HELP   110
      NAME(4) = IDUM(4)                                                         HELP   111
      IF ((ISTYP.EQ.0).OR.(ISTYP.GE.100).OR.(ITYP.EQ.8))                        HELP   112
     1       GOTO 114                                                           HELP   113
      DO 111 IOPN=1,NOPCDT                                                      HELP   114
      IF (IOPCDT(11,IOPN) .EQ. ISTYP)  GOTO 112                                 HELP   115
  111 CONTINUE                                                                  HELP   116
      GOTO 114                                                                  HELP   117
  112 DO 113 I=1,4                                                              HELP   118
  113 NAME(I) = IOPCDT(I,IOPN)                                                  HELP   119
  114 CONTINUE                                                                  HELP   120
      IF ((IDFTS.LE.5).OR.(ITYP.EQ.8)) GOTO 116                                 DFTEX4 128
      CALL MOVEN(ISYMTB(1,KDFTS),DFTN(1),4)                                     HELP   123
  116 CONTINUE                                                                  HELP   124
      IF (IDFTS .NE.4)  KDFTS = -10 + IDFTS                                     HELP   125
      WRITE(IOUTPT,8030)(KONTXT(I,JKEY),I=1,6),(IKTYPE(I,ITYP),I=1,4),          HELP   126
     1               KONTXT(9,JKEY),(NAME(I),I=1,4),(DFTN(I),I=1,4)             HELP   127
      IF ((ISTYP.LT.100).OR.(ITYP.EQ.8).OR.(NCmdT.GT.1))  GOTO 150              DFTEX4 129
      DO 118 J=1,NSYMTB                                                         HELP   129
      IF (ISTYP .EQ. ISYMTB(9,J))                                               SYMSIZ  44
     $      WRITE(IOUTPT,8040)(ISYMTB(I,J),I=1,4),ISYMTB(12,J)                  DFTEX4 130
  118 CONTINUE                                                                  HELP   132
      GOTO 150                                                                  HELP   133
  120 NL     = KONTXT(9,JKEY)/KONTXT(10,JKEY)                                   HELP   134
      NC     = KONTXT(10,JKEY)*4                                                HELP   135
      WRITE(IOUTPT,8050)(KONTXT(I,JKEY),I=1,6),(IKTYPE(I,ITYP),I=1,4),          HELP   136
     1               NL,NC                                                      HELP   137
      GOTO 150                                                                  HELP   138
  130 GOTO 150                                                                  HELP   139
  150 CONTINUE                                                                  HELP   140
  160 CONTINUE                                                                  DFTEX4 131
  155 CONTINUE                                                                  HELP   141
      WRITE(IOUTPT,8080)                                                        HELP   142
      RETURN                                                                    HELP   143
 8000 FORMAT(1H1 // 20X,27HCOMMAND AND KEYWORD LIST    )                        HELP   144
 8010 FORMAT(1H0,79(1H*) / 1H0,                                                 HELP   145
     150HCOMMAND NAME      ABREV     MAX DEF    NUM DEF                         HELP   146
     2/ 1X,4A4,2X,2A4,6X,I5,4X,I5)                                              DFTEX4 132
 8015 FORMAT(/'  **** KEYWORDS/DEFAULTS FOR TYPE =',I3,' ****')                 DFTEX4 133
 8020 FORMAT(1X,4A4,2X,2A4,2X,4A4,1X,4A4,2X,6HLEN =  ,I3)                       DFTEX4 134
 8021 FORMAT(11X,17HMIN/MAX/DEFAULT    , 3(F16.4,2X))                           HELP   149
 8022 FORMAT(11X,17HMIN/MAX/DEFAULT    , 2(F16.4,2X),4A4)                       HELP   150
 8030 FORMAT(1X,4A4,2X,2A4,19X,4A4,2X,6HLEN =  ,I3 /                            DFTEX4 135
     111X,17HINPUT/DEFAULT     ,4A4,20X,4A4)                                    HELP   152
 8040 FORMAT(11X,'Legal CODE-WORD is ',5X,4A4,' Value =',I3)                    DFTEX4 136
 8050 FORMAT(1X,4A4,2X,2A4,19X,4A4,2X,6HLEN = ,I3 /                             DFTEX4 137
     111X,17HCHARACTERS/ITEM   ,I3)                                             HELP   155
 8080 FORMAT(1H1)                                                               HELP   156
 8090 FORMAT(40H0  USES KEYWORDS AND REFERENCE TABLE OF  ,4A4)                  HELP   157
      END                                                                       HELP   158
      SUBROUTINE HRD(JREF,JOPCDT,IA,ISYMTB,KONTXT,IREFTB,LKDAT,NAMPTR,          DFTEX3 203
     $               LSDPTR,LKPTR,Iphase)                                       DFTEX3 204
C                                                                               HRIN     3
C                  THIS ROUTINE PROCESSES THE HOURLY-REPORT COMMAND             HRIN     4
C                                                                               HRIN     5
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               HRIN     9
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION IA(1),KONTXT(16,1),ISYMTB(16,1),IPREQ(5),IREFTB(5,1)            FIX6    22
      DATA ISVRBS/39/, NPREQ/4/, IPREQ/14,26,28,30,0/                           OPLST1  76
C              SET SOME POINTERS                                                HRIN    25
      NSAVE = IOPCDT(17,JOPCDT)                                                 OPLST1  77
C              IKW IS THE FIRST KEYWORD FOR COMMAND                             HRIN    26
      IKW    = IOPCDT(9,JOPCDT)                                                 HRIN    27
C              NKW IS THE NUMBER OF KEYWORDS FOR THIS COMMAND                   HRIN    28
      NKW    = IOPCDT(10,JOPCDT)                                                HRIN    29
C              LVAL IS THE LENGTH OF THE VALUE ARRAY                            HRIN    30
      LVAL   = IOPCDT(16,JOPCDT)                                                HRIN    31
C              IAVPT1 IS THE START OF THE VALUE BLOCK                           4XAA    18
      IAXS = IREFTB(2,JREF)                                                     DEF2     5
      IAVPT1 = IAXS + NSAVE                                                     DEF2     6
C              LTOT IS THE TOTAL SIZE OF THE VALUE BLOCK                        4XAA    20
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,JOPCDT)                                 4XAA    21
      IAVPTR = IAVPT1 + LVAL                                                    4XAA    26
C              PICK UP OPTION (FIRST KEYWORD; PRINT | PLOT | ETC)               OPLST1 101
      IOPTIN = IA(IAVPTR+1)                                                     OPLST1 102
      IF (NOVAL(IOPTIN).NE.0) THEN                                              DFTEX4 138
          IOPTIN = ISYMTB(12,IOPTIN)                                            SYMSIZ  45
      ELSE                                                                      OPLST1 105
          IOPTIN = 1                                                            OPLST1 106
      END IF                                                                    OPLST1 107
C              CHECK IF LIKE'D OPTION IS THE SAME TYPE                          OPLST1 108
      IF (LSDPTR.EQ.1) THEN                                                     OPLST1 109
          IOPTLK = IA(LKDAT+1)                                                  OPLST1 110
          IF(NOVAL(IOPTLK) .NE. 0)  THEN                                        FIX9     4
            IOPTLK = ISYMTB(12,IOPTLK)                                          FIX9     5
            IF (IOPTLK.NE.IOPTIN) CALL MSG2(53,IOPCDT(1,JOPCDT),0,0,0)          FIX9     6
          ENDIF                                                                 FIX9     7
      END IF                                                                    OPLST1 113
C              ENTER OPTION DEPENDENT DEFAULTS                                  OPLST1 114
      IF (LSDPTR.EQ.3) THEN                                                     OPLST1 115
          DO I=1,NPREQ                                                          OPLST1 116
              IF (IOPTIN.EQ.2) THEN                                             OPLST1 117
                  IA(LKDAT+IPREQ(I))=ITYPLS(UNDEF(1))                           OPLST1 118
              ELSE                                                              OPLST1 119
                  IA(LKDAT+IPREQ(I))=ITYPLS(UNDEF(2))                           OPLST1 120
              END IF                                                            OPLST1 121
          END DO                                                                OPLST1 122
      END IF                                                                    OPLST1 123
      IF(Iphase .ne. 2)  THEN                                                   DFTEX3 205
        CALL LSDFIL(JOPCDT,ISYMTB,KONTXT(1,IKW),NKW,IA(IAVPT1+1),               DFTEX3 206
     $              IA(LKDAT+1),LSDPTR,ISYMTB(1,LKPTR),NAMPTR,LVAL)             DFTEX3 207
        IF(Iphase .eq. 1) RETURN                                                DFTEX3 208
      ENDIF                                                                     DFTEX3 209
      RETURN                                                                    HRIN   101
      END                                                                       HRIN   102
      SUBROUTINE INCRRF (ISYMTB,IREFTB,JOPCDT,JSYM,JREF)                        REFTB1  15
C                                                                               INCRRF   3
C              INCRRF INCREMENTS THE REFERENCE COUNT FOR A                      INCRRF   4
C              PARTICULAR COMMAND                                               INCRRF   5
C                                                                               INCRRF   6
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,1),IREFTB(5,1)                                        FIX6    23
C                                                                               INCRRF   9
C              Initialize reference table ptr                                   COMB03  17
      JREF   = 0                                                                COMB03  18
      IAPTR  = 0                                                                INCRRF  10
      IF (IOPCDT(12,JOPCDT).EQ.0) RETURN                                        INCRRF  11
      CALL MEMCK (IOPCDT(13,JOPCDT), IOPCDT(12,JOPCDT))                         INCRRF  12
C              IF NO REF TABLE RETURN                                           INCRRF  13
C              If no reference table then return                                COMB03  19
      IF (IOPCDT(11,JOPCDT) .EQ. 0)  RETURN                                     COMB03  20
C              GET NUM OF REFER                                                 INCRRF  15
      NREF   = IOPCDT (13,JOPCDT)                                               INCRRF  16
C              SET THE REFERENCE TABLE POINTER                                  LIB2     1
      JREF = IOPCDT(14,JOPCDT) + NREF - 1                                       REFTB1  17
C              SET SYMBOL TBL PTR                                               INCRRF  19
      IREFTB(1,JREF) = JSYM                                                     REFTB1  18
C              CLEAR IA PTR                                                     INCRRF  21
      IREFTB(2,JREF) = 0                                                        REFTB1  19
C              Initialize LIKE and PARENT pointers                              COMB03  21
      IREFTB(3,JREF) = 0                                                        COMB03  22
      IREFTB(4,JREF) = 0                                                        COMB03  23
C              Initialize object ERROR flag                                     DFTEX3 210
C               0 = old enrty, okay                                             DFTEX3 211
C               1 = old entry, with error                                       DFTEX3 212
C               2 = new entry                                                   DFTEX3 213
C               3 = new entry with error                                        DFTEX3 214
      IREFTB(5,JREF) = IPACKB(1,2,2,IREFTB(5,JREF))                             DFTEX3 215
      NumNewRef = NumNewRef + 1                                                 FIX14   59
C              IF A UNAME, SET REF NO. IN SYMBOL TBL                            INCRRF  23
      IF(JSYM.NE.0) ISYMTB(12,JSYM) = NREF                                      SYMSIZ  48
      RETURN                                                                    INCRRF  25
      END                                                                       INCRRF  26
      FUNCTION IDOYR(IM,ID)                                                     IDOYR    2
C                                                                               IDOYR    3
C              CALCULATE THE DAY OF THE YEAR                                    IDOYR    4
C                                                                               IDOYR    5
      COMMON /MDATA / IDIM(12), ISDOM(12), MONDSC(12)                           /MDATA/  2
      IDOYR = ISDOM(IM) + ID                                                    IDOYR    7
      RETURN                                                                    IDOYR    8
      END                                                                       IDOYR    9
      FUNCTION IDOWK(IYEAR,IDOFY)                                               IDOWK    2
C                                                                               IDOWK    3
C              COMPUTE THE DAY OF THE WEEK; SUNDAY = 1                          IDOWK    4
C                                                                               IDOWK    5
      IC = IYEAR - (IYEAR/100)*100                                              IDOWK    6
      I1 = IDOFY + IC + (IC-1)/4                                                IDOWK    7
      IDOWK = 7.*(FLOAT(I1)/7. - I1/7) + 1.0001                                 IDOWK    8
      RETURN                                                                    IDOWK    9
      END                                                                       IDOWK   10
      SUBROUTINE INIDAT(JOP,IA,KWD,NK,VAL,IVTYPE)                               EXPR2   77
C                                                                               INIDAT   3
C              INIDAT INITIALIZES A COMMAND'S DATA ARRAY                        INIDAT   4
C                                                                               INIDAT   5
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
C                                                                               INIDAT   8
      DIMENSION VAL(1),KWD(16,1),IA(1),IVTYPE(1)                                EXPR2   78
C                                                                               INIDAT  10
      NV = 0                                                                    INIDAT  12
      NVSIM = 0                                                                 INIDAT  13
      IF(NK.EQ.0) RETURN                                                        INIDAT  14
C              FILL VAL ARRAY (USER INPUT) WITH UNDEFINED                       INIDAT  15
      NV     = KWD(12,NK) + KWD(9,NK) - 1                                       INIDAT  16
      CALL FILLN(0,IVTYPE(1),NV)                                                EXPR2   79
      CALL FILLN(UNDEF(1),VAL(1),NV)                                            EXPR2   80
      IF (JOP.GT.0) THEN                                                        INIDAT  19
          NVSIM = IOPCDT(18,JOP)                                                INIDAT  20
C              FILL INPUT DATA WITH UNDEFINED                                   INIDAT  23
          CALL FILLN(UNDEF(3),VAL(NV+1),NV)                                     DFTEX4 139
C              FILL SIMULATION DATA WITH 0.                                     INIDAT  25
          CALL FILLN(0.,VAL(2*NV+1),NVSIM)                                      EXPR2   82
      END IF                                                                    INIDAT  27
      RETURN                                                                    INIDAT  28
      END                                                                       INIDAT  29
      SUBROUTINE INIT0 (IA, N)                                                  INIT0    2
C                                                                               INIT0    3
C              INIT0 INITIALIZES MISC VARIABLES FOR INPUT PROCESSOR             INIT0    4
C                                                                               INIT0    5
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON /IPARAM/ NPARAM, MPARAM, IPARAM(17,6000)                           -048t    1
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      DIMENSION IA(1)                                                           INIT0   14
      KORE   = 0                                                                INIT0   15
C              CLEAR IA INDEX                                                   INIT0   16
      IAX    = 0                                                                INIT0   17
C              CLEAR IAX MAX                                                    INIT0   18
      IAXMAX = 0                                                                INIT0   19
C              GET FIXED DIMENSION OF IA FOR THIS OVERLAY                       INIT0   20
C              INIT VARIABLE DIMENSION TO FIXED DIMEN                           INIT0   21
      IADIMV = IADIM                                                            INIT0   22
      CALL CKAA (IA, N)                                                         INIT0   23
      IF (ISOLAR .EQ. 0)  NPARAM = 0                                            INIT0   24
      NSYMTB = 0                                                                INIT0   25
C     RESET LIBRARY INITIALIZATION FLAG                                         INIT0   26
      IF(ISOLAR .NE. 0)  GOTO 25                                                INIT0   27
C              CLEAR MSG TOTALS                                                 INIT0   28
      DO 20 I = 1,10                                                            FIX11  128
   20 MSGTOT(I) = 0                                                             INIT0   30
C              CLEAR REPORT ARRAY                                               INIT0   31
   25 DO 30 I=1,36                                                              INIT0   32
   30 IREPRT(I) = 0                                                             INIT0   33
C              CLEAR COMMA FLAG                                                 INIT0   34
      RETURN                                                                    INIT0   35
      END                                                                       INIT0   36
      FUNCTION ISDPTR(ISYMTB,IREFTB,JSYM,JOPCDT)                                REFTB1  21
C                                                                               ISDPTR   3
C              ISDPTR GETS A DATA POINTER FOR A SYMBOL                          ISDPTR   4
C                                                                               ISDPTR   5
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,1),IREFTB(5,1)                                        FIX6    26
C                                                                               ISDPTR   8
      IF (JSYM.EQ.0) GO TO 100                                                  ISDPTR   9
      IRX0 = IOPCDT(14, JOPCDT)                                                 REFTB1  23
      IREF = ISYMTB(12,JSYM)                                                    SYMSIZ  50
      ISDPTR = IREFTB(2,IRX0+IREF-1)                                            REFTB1  25
      RETURN                                                                    ISDPTR  13
  100 ISDPTR = 0                                                                ISDPTR  14
      RETURN                                                                    ISDPTR  15
      END                                                                       ISDPTR  16
      INTEGER FUNCTION ISINP( JREFin, NSAVE, NVAL, LKDAT, LVAL, VALUE )         DFTEX3 216
C                                                                               ISINP    3
C     Ceck to see if data is input or default (follows like's to source)        DFTEX3 217
C                 returns = 0 if no data                                        DFTEX3 218
C                           1 if data is User INPUT data (any type)             DFTEX3 219
C                           2 if data is User INPUT expression (any type)       DFTEX3 220
C                          -1 if data is DOE-2 DEFAULT data (type <2)           DFTEX3 221
C                          -2 if data is DOE-2 DEFAULT expression (type 2)      DFTEX3 222
C                                                                               ISINP    8
C                 JREF is ref. tbl. index of object                             ISINP    9
C                 NSAVE is nsave len of object                                  ISINP   10
C                 NVAL is value array (keyword data) position if interest       ISINP   11
C                                                                               ISINP   12
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               ISINP   14
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
C                                                                               ISINP   17
      JREF  = JREFin                                                            ISINP   18
      ISINP = 0                                                                 ISINP   19
      IF((JREF.EQ.0) .or. (NVAL.eq.0))  RETURN                                  ISINP   20
C             First check oject's data for input, default, like                 DFTEX3 223
      ITYPE = IUNPKB(1,5,IA(IREFTB(2,JREF)+NSAVE+NVAL))                         DFTEX3 224
C             Is it user/library input?                                         DFTEX3 225
      IF(((ITYPE.GE. 3).and.(ITYPE.LE. 6)) .OR.                                 COMPLY   1
     $   ((ITYPE.GE.11).and.(ITYPE.LE.15))) THEN                                COMPLY   2
        VALUE = TYPLS(IA(IREFTB(2,JREF)+NSAVE+LVAL+NVAL))                       DFTEX3 227
        IF((ITYPE.EQ.4).or.(ITYPE.EQ.6).or.(ITYPE.EQ.12).or.                    COMPLY   3
     $     (ITYPE.EQ.14)) THEN                                                  COMPLY   4
          ISINP = 2                                                             DFTEX3 229
        ELSE                                                                    DFTEX3 230
          ISINP = 1                                                             DFTEX3 231
        ENDIF                                                                   DFTEX3 232
        RETURN                                                                  DFTEX3 233
      ELSE                                                                      DFTEX3 234
C             Is it DOE-2 default or user default?                              DFTEX3 235
        IF(IREFTB(3,JREF) .EQ. 0)  THEN                                         DFTEX3 236
          ITYPE = IUNPKB(1,5,IA(LKDAT+NVAL-LVAL))                               DFTEX3 237
          VALUE = TYPLS(IA(LKDAT+NVAL))                                         DFTEX3 238
          IF(ITYPE.EQ.2)  THEN                                                  DFTEX3 239
            ISINP = -2                                                          DFTEX3 240
          ELSE IF(ITYPE.EQ.1) THEN                                              DFTEX3 241
            ISINP = -1                                                          DFTEX3 242
          ELSE IF(ITYPE.EQ.8) THEN                                              DFTEX3 243
            ISINP = 2                                                           DFTEX3 244
          ELSE IF(ITYPE.EQ.7) THEN                                              DFTEX3 245
            ISINP = 1                                                           DFTEX3 246
          ELSE                                                                  DFTEX3 247
            ISINP = 0                                                           DFTEX3 248
          ENDIF                                                                 DFTEX3 249
          RETURN                                                                DFTEX3 250
        ENDIF                                                                   DFTEX3 251
      ENDIF                                                                     DFTEX3 252
C              Pick up like index for current object                            ISINP   21
  100 JREFLK = IREFTB(3,JREF)                                                   ISINP   22
      IF(JREFLK .EQ. 0)  RETURN                                                 ISINP   23
C              Get type if data for LIKE object                                 ISINP   24
      ITYPE = IUNPKB(1,5,IA(IREFTB(2,JREFLK)+NSAVE+NVAL))                       NEWEXP   8
C              If this is not a LIKE data then see what it is                   ISINP   26
      IF((ITYPE.NE.9) .and. (ITYPE.NE.10))  THEN                                ISINP   27
        IF(ITYPE.LE.2)  THEN                                                    ISINP   28
C              It is DOE-2 default (data or expression)                         ISINP   29
          IF(ITYPE.EQ.2)  THEN                                                  DFTEX3 253
            VALUE = TYPLS(IA(IREFTB(2,JREF)+NSAVE+NVAL+LVAL))                   DFTEX3 254
            ISINP = -2                                                          DFTEX3 255
          ELSE                                                                  DFTEX3 256
            VALUE = TYPLS(IA(IREFTB(2,JREF)+NSAVE+NVAL+LVAL*2))                 DFTEX3 257
            ISINP = -1                                                          DFTEX3 258
          ENDIF                                                                 DFTEX3 259
        ELSE                                                                    ISINP   31
C              It is user (or lib, user default) (data or expression)           ISINP   32
          IF((ITYPE.EQ. 4).or.(ITYPE.EQ. 6).or.(ITYPE.EQ.8).or.                 COMPLY   5
     $       (ITYPE.EQ.12).or.(ITYPE.EQ.14)) THEN                               COMPLY   6
            VALUE = TYPLS(IA(IREFTB(2,JREF)+NSAVE+NVAL+LVAL))                   DFTEX3 261
            ISINP = 2                                                           DFTEX3 262
          ELSE                                                                  DFTEX3 263
            VALUE = TYPLS(IA(IREFTB(2,JREF)+NSAVE+NVAL+LVAL*2))                 DFTEX3 264
            ISINP = 1                                                           DFTEX3 265
          ENDIF                                                                 DFTEX3 266
        ENDIF                                                                   ISINP   34
        RETURN                                                                  ISINP   35
      ENDIF                                                                     ISINP   36
C              recurse to next lower LIKE'd object                              ISINP   37
      JREF  = JREFLK                                                            ISINP   38
      GOTO 100                                                                  ISINP   39
      END                                                                       ISINP   40
      FUNCTION ITYPEF(IRX,JOP)                                                  ITYPEF   2
C                                                                               ITYPEF   3
C              FIND THE TYPE OF A COMPONENT                                     ITYPEF   4
C                                                                               ITYPEF   5
C              IRX    - REFERENCE TABLE INDEX (INPUT)                           ITYPEF   6
C              JOP    - COMMAND TABLE INDEX (INPUT)                             ITYPEF   7
C                                                                               ITYPEF   8
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      ITYPE = 1                                                                 ITYPEF  14
      IF (IOPCDT(24,JOP).NE.0) THEN                                             ITYPEF  15
          IAVPTR = IREFTB(2,IRX) + 2*IOPCDT(16,JOP) + IOPCDT(17,JOP)            ITYPEF  16
          IF (NOVAL(AA(IAVPTR+1)).GT.0) THEN                                    ITYPEF  17
              ISTX = IA(IAVPTR+1)                                               ITYPEF  18
              ITYPE = ISYMTB(12,ISTX)                                           ITYPEF  19
          END IF                                                                ITYPEF  20
      END IF                                                                    ITYPEF  21
      ITYPEF = ITYPE                                                            ITYPEF  22
      RETURN                                                                    ITYPEF  23
      END                                                                       ITYPEF  24
      FUNCTION ITYPLS (I)                                                       ITYPLS   2
C                                                                               ITYPLS   3
C              ITYPLS IS USED TO MOVE A FLOATING POINT WORD TO                  ITYPLS   4
C              AN INTEGER WORD WITHOUT TYPE CONVERSION                          ITYPLS   5
C                                                                               ITYPLS   6
      ITYPLS = I                                                                ITYPLS   7
      RETURN                                                                    ITYPLS   8
      END                                                                       ITYPLS   9
      SUBROUTINE KDIV(A,IG,N,IDIV)                                              KDIV     2
C                                                                               KDIV     3
C              CONVERTS FROM ENGLISH TO METRIC IF IDIV=0                        KDIV     4
C                            METRIC     ENGLISH        1                        KDIV     5
C                                                                               KDIV     6
      COMMON /IUNITS/ VKONV(300),DUMLOG(4),JUNITS(4,300,2),NUNITS,KUNITS        UNITS1   1
      INTEGER DUMLOG                                                            SUBTY1   1
      DIMENSION IUNITS(4,300)                                                   UNITS1   2
      EQUIVALENCE (IUNITS(1,1),JUNITS(1,1,1))                                   /IUNITS/ 4
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION A(1)                                                            KDIV     9
      IF (IG.LE.2)  GOTO 9                                                      KDIV    10
      DO 1 I = 1,N                                                              KDIV    11
      DO 2 J = 1,4                                                              KDIV    12
      IF (ITYPLS(A(I)).EQ. ITYPLS(UNDEF(J)))  GO TO 1                           KDIV    13
    2 CONTINUE                                                                  KDIV    14
      IF(IDIV.EQ.0) GO TO 3                                                     KDIV    15
      A(I)   = A(I)/VKONV(IG)                                                   KDIV    16
      IF (IG.EQ.8)  A(I)=A(I)+32.                                               KDIV    17
      GOTO1                                                                     KDIV    18
    3 IF(IG.EQ.8)A(I)=A(I)-32.                                                  KDIV    19
      A(I)   = A(I)*VKONV(IG)                                                   KDIV    20
    1 CONTINUE                                                                  KDIV    21
    9 RETURN                                                                    KDIV    22
      END                                                                       KDIV    23
      FUNCTION JOPSRC(ICOL,ITYPE)                                               JOPSRC   2
C                                                                               JOPSRC   3
C              SEARCH FOR ITYPE IN COLUMN ICOL OF THE COMMAND TABLE             JOPSRC   4
C                                                                               JOPSRC   5
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
C                                                                               JOPSRC   7
      JOPSRC = 0                                                                JOPSRC   8
      DO 100 I=1,NOPCDT                                                         JOPSRC   9
          IF (IOPCDT(ICOL,I).EQ.ITYPE) THEN                                     JOPSRC  10
              JOPSRC = I                                                        JOPSRC  11
              RETURN                                                            JOPSRC  12
          END IF                                                                JOPSRC  13
  100 CONTINUE                                                                  JOPSRC  14
      RETURN                                                                    JOPSRC  15
      END                                                                       JOPSRC  16
      FUNCTION KOMPAR (IARR1, IARR2, N)                                         KOMPAR   2
C                                                                               KOMPAR   3
C              KOMPAR COMPARES THE FIRST N ELEMENTS OF ARRAY IARR1 WITH         KOMPAR   4
C              THE FIRST N ELEMENTS OF ARRAY IARR2.                             KOMPAR   5
C                                                                               KOMPAR   6
C              KOMPAR = 0, NOT EQUAL                                            KOMPAR   7
C                     = 1, EQUAL                                                KOMPAR   8
C                                                                               KOMPAR   9
      DIMENSION IARR1(1), IARR2(1)                                              KOMPAR  10
C                                                                               KOMPAR  11
      DO 10 I = 1,N                                                             KOMPAR  12
      IF (IARR1(I).NE.IARR2(I)) GO TO 20                                        KOMPAR  13
   10 CONTINUE                                                                  KOMPAR  14
      KOMPAR = 1                                                                KOMPAR  15
      RETURN                                                                    KOMPAR  16
   20 KOMPAR = 0                                                                KOMPAR  17
      RETURN                                                                    KOMPAR  18
      END                                                                       KOMPAR  19
      SUBROUTINE KEYVRT(ICONV)                                                  FIX15    1
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      IDFXS = 0                                                                 FIX15    5
C              Loop over all commands                                           FIX15    6
      DO 200 JOP=1,NOPCDT                                                       FIX15    7
C              Skip if no keywords                                              FIX15    8
        IF (IOPCDT(10,JOP).EQ.0) GO TO 200                                      FIX15    9
        IDFX = IOPCDT(15,JOP)                                                   FIX15   10
C              Skip if a synonym command                                        FIX15   11
        IF (IDFX.LE.IDFXS) GO TO 200                                            FIX15   12
        IDFXS = IDFX                                                            FIX15   13
C              Find the number of keyword sets or default sets for              FIX15   14
C              TYPE'd commands                                                  FIX15   15
        NKSETS = 1                                                              FIX15   16
        IF (IOPCDT(24,JOP).LT.0) NKSETS=-IOPCDT(24,JOP)                         FIX15   17
        NDFSET = 1                                                              FIX15   18
        IF (IOPCDT(24,JOP).GT.0) NDFSET=IOPCDT(24,JOP)                          FIX15   19
        NDFTS = IOPCDT(23,JOP)                                                  FIX15   20
C              Loop over the keyword sets                                       FIX15   21
        DO IKSETS=1,NKSETS                                                      FIX15   22
          IK1 = IOPCDT(9,JOP) + (IKSETS-1)*IOPCDT(10,JOP)                       FIX15   23
          IKN = IK1 + IOPCDT(10,JOP) - 1                                        FIX15   24
          IVPREV = 0                                                            FIX15   25
C              Loop over the keywords in each set                               FIX15   26
          DO 100 IK=IK1,IKN                                                     FIX15   27
            IV = KONTXT(12,IK)                                                  FIX15   28
C              Skip synonym keywords                                            FIX15   29
            IF (IV.LE.IVPREV) GO TO 100                                         FIX15   30
            IVPREV = IV                                                         FIX15   31
            KTYPE = KONTXT(8,IK)                                                FIX15   32
C              If not a numeric keyword, skip                                   FIX15   33
            IF (KTYPE.EQ.1 .OR. KTYPE.EQ.5 .OR. KTYPE.EQ.6) THEN                FIX15   34
C              Convert the mins and maxes                                       FIX15   35
              CALL KROUND(KONTXT(7,IK),CONTXT(10,IK),ICONV)                     FIX15   36
C              Loop over the default sets                                       FIX15   37
              DO IDFSET=1,NDFSET                                                FIX15   38
C              Set the pointer to the default values                            FIX15   39
                IF (NKSETS.GT.1) THEN                                           FIX15   40
                  IDF1 = IDFX + 4*(IKSETS-1)*NDFTS                              FIX15   41
                ELSE IF (NDFSET.GT.1) THEN                                      FIX15   42
                  IDF1 = IDFX + 4*(IDFSET-1)*NDFTS                              FIX15   43
                ELSE                                                            FIX15   44
                  IDF1 = IDFX                                                   FIX15   45
                END IF                                                          FIX15   46
                IDF2 = IDF1 + NDFTS                                             FIX15   47
                IDF4 = IDF1 + 3*NDFTS                                           FIX15   48
C              Convert the defaults                                             FIX15   49
                CALL KDIV(AA(IDF2+IV-1),KONTXT(7,IK),KONTXT(9,IK),ICONV)        FIX15   50
                CALL KDIV(AA(IDF4+IV-1),KONTXT(7,IK),KONTXT(9,IK),ICONV)        FIX15   51
              END DO                                                            FIX15   52
            END IF                                                              FIX15   53
  100     CONTINUE                                                              FIX15   54
        END DO                                                                  FIX15   55
  200 CONTINUE                                                                  FIX15   56
      RETURN                                                                    KEYVRT  47
      END                                                                       KEYVRT  48
      SUBROUTINE KROUND(IU,Y,ICONV)                                             KROUND   2
C              ---                                                              KROUND   3
      COMMON /IUNITS/ VKONV(300),DUMLOG(4),JUNITS(4,300,2),NUNITS,KUNITS        UNITS1   1
      INTEGER DUMLOG                                                            SUBTY1   1
      DIMENSION IUNITS(4,300)                                                   UNITS1   2
      EQUIVALENCE (IUNITS(1,1),JUNITS(1,1,1))                                   /IUNITS/ 4
      DIMENSION C10S(13),Y(2)                                                   KROUND   5
      DATA C10S/.00001,.0001,.001,.01,.1,1.,10.,100.,1000.,                     KROUND   6
     110000.,100000.,1000000.,10000000./                                        KROUND   7
      IF (IU.LE.2.OR.IU.EQ.22)  GOTO 101                                        KROUND   8
      VK     = VKONV(IU)                                                        KROUND   9
      IF(VK.EQ.0..OR.VK.EQ.1.)  GO TO 101                                       KROUND  10
      DO 100 I=1,2                                                              KROUND  11
      IF(Y(I).EQ.0..AND.IU.NE.8.OR.ABS(Y(I)).GE.9999999.)GO TO 100              KROUND  12
      IF(ICONV.EQ.1)GO TO 1                                                     KROUND  13
      IF(IU.EQ.8)Y(I)=Y(I)-32.                                                  KROUND  14
      Y(I)   = Y(I)*VK                                                          KROUND  15
      GOTO 2                                                                    KROUND  16
    1 Y(I)   = Y(I)/VK                                                          KROUND  17
      IF(IU.EQ.8)Y(I)=Y(I)+32.                                                  KROUND  18
    2 X      = ABS(Y(I))                                                        KROUND  19
      IF  (X.LT.C10S(1))   GOTO 100                                             KROUND  20
      DO 10 J=2,13                                                              KROUND  21
      K      = J                                                                KROUND  22
      IF(X.LT.C10S(J))GO TO 20                                                  KROUND  23
   10 CONTINUE                                                                  KROUND  24
      GO TO 100                                                                 KROUND  25
   20 X      = FLOAT(IROUND(X/(C10S(K)/100.)))*C10S(K)/100.                     KROUND  26
      Y(I)   = SIGN(X,Y(I))                                                     KROUND  27
  100 CONTINUE                                                                  KROUND  28
  101 CONTINUE                                                                  KROUND  29
      RETURN                                                                    KROUND  30
      END                                                                       KROUND  31
      FUNCTION IROUND(F)                                                        IROUND   2
      AF     = F+SIGN(0.5,F)                                                    IROUND   3
      IROUND = INT(AF)                                                          IROUND   4
      RETURN                                                                    IROUND   5
      END                                                                       IROUND   6
      subroutine  KRDRD                                                         KRDRD    2
c                                                                               KRDRD    3
c--- read a line , do macros related preprocessing                              KRDRD    4
c                                                                               KRDRD    5
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
c                                                                               KRDRD   12
c****************************************************************               KRDRD   13
C$    write(6,'('' KRDRD  --> kardi1=''i4''  KARDI2=''i4'' KARDX=''i4,          KRDRD   14
C$   1 ''  mTxtP=''i6''  mStk=''i6)') kardi1, KARDI2, KARDX,mTxtP,mStk          KRDRD   15
c                                                                               KRDRD   16
      mStkSv = 0                                                                KRDRD   17
10    continue                                                                  KRDRD   18
c                                                                               KRDRD   19
c---- ck if macro expansion in progress                                         KRDRD   20
c                                                                               KRDRD   21
      if ( mTxtP .gt. 0 )    then                                               KRDRD   22
          mTxtPx = mTxtP                                                        KRDRD   23
          if ( ia(mTxtP) .eq. -999 )    then                                    KRDRD   24
c                                                                               KRDRD   25
cc            if ( mP .eq. mEvDef )    then                                     KRDRD   26
              if ( mEvFl .ne. 0 )      then                                     KRDRD   27
                   call mXpeva                                                  KRDRD   28
                  mEvFl = 0                                                     KRDRD   29
                  mTxtP = mTxtPx                                                KRDRD   30
c                                                                               KRDRD   31
              else                                                              KRDRD   32
c                                                                               KRDRD   33
                  if ( mTracF .ne. 0 )   call  mTrack( 0, KARDI2 )              KRDRD   34
                  mTrKRD = 99999                                                KRDRD   35
c---------------- first we push current state                                   KRDRD   36
                  if ( mStkSv .eq. 0 )     then                                 KRDRD   37
                      mStk = mStk + mStkC                                       KRDRD   38
                      mStkSv = mStk                                             KRDRD   39
                      ia(mStk-9) = mStkLv                                       KRDRD   40
                      ia(mStk-8) = mEvFl                                        KRDRD   41
                      ia(mStk-7) = KARDSX                                       KRDRD   42
                      ia(mStk-6) = KARDX                                        KRDRD   43
                      ia(mStk-5) = KARDI1                                       KRDRD   44
                      ia(mStk-4) = KARDI2                                       KRDRD   45
                      ia(mStk-3) = KRDNUM                                       KRDRD   46
                      ia(mStk-2) = mTxtP0                                       KRDRD   47
                      ia(mStk-1) = mP                                           KRDRD   48
                      ia(mStk)   = mStk - mStkC                                 KRDRD   49
                      mStk = mStk - mStkC                                       KRDRD   50
                      mECHO(mStkLv+1) = IECHO                                   KRDRD   51
                  endif                                                         KRDRD   52
c---------------- now pop                                                       KRDRD   53
                  mStkLv = ia(mStk-9)                                           KRDRD   54
                  mEvFl  = ia(mStk-8)                                           KRDRD   55
                  KARDSX = ia(mStk-7)                                           KRDRD   56
                  KARDX  = ia(mStk-6)                                           KRDRD   57
                  KARDI1 = ia(mStk-5)                                           KRDRD   58
                  KARDI2 = ia(mStk-4)                                           KRDRD   59
                  KRDNUM = ia(mStk-3)                                           KRDRD   60
                  mTxtP  = ia(mStk-2)                                           KRDRD   61
                  mP     = ia(mStk-1)                                           KRDRD   62
                  mStk   = ia(mStk)                                             KRDRD   63
                  IECHO  = mECHO(mStkLv+1)                                      KRDRD   64
C$                 call  dumpit( 20hKRDRD -- ia(mStk0+1), ia(mStk0+1),          KRDRD   65
C$   1                                                   -(mStk-mStk0) )        KRDRD   66
c---------------- if end of KARD then unstack more                              KRDRD   67
                  do  70  ii = KARDX , KARDI2                                   KRDRD   68
                      if ( (KARD(ii) .ne. KCSP) .and.                           KRDRD   69
     1                     (KARD(ii) .ne. KCTAB)  )     goto  71                KRDRD   70
70                continue                                                      KRDRD   71
                  goto  10                                                      KRDRD   72
71                continue                                                      KRDRD   73
c                                                                               KRDRD   74
              endif                                                             KRDRD   75
c                                                                               KRDRD   83
              return                                                            KRDRD   84
c                                                                               KRDRD   85
          else                                                                  KRDRD   86
c                                                                               KRDRD   87
              KRDNUM = KRDNUM + 1                                               KRDRD   88
              if ( mTracF .ne. 0 )     then                                     KRDRD   89
                   call  mTrack( 1, KARDI2 )                                    KRDRD   90
                   call  mTrack( 3, 0 )                                         KRDRD   91
              endif                                                             KRDRD   92
               call  mTxtMv                                                     KRDRD   93
              goto  200                                                         KRDRD   94
          endif                                                                 KRDRD   95
      endif                                                                     KRDRD   96
c                                                                               KRDRD   97
100   continue                                                                  KRDRD   98
c                                                                               KRDRD   99
c---- read a line from file                                                     KRDRD  100
c                                                                               KRDRD  101
      if ( mTracF .ne. 0 )    call  mTrack( 1, KARDI2 )                         KRDRD  102
       call  KRDRD0( 0 )                                                        KRDRD  103
      if ( mTracF .ne. 0 )    call  mTrack( 3, 0 )                              KRDRD  104
c                                                                               KRDRD  105
200   KARDX  = kardi1                                                           KRDRD  106
      mXpdon = 0                                                                KRDRD  107
      mppCmd = 0                                                                KRDRD  108
c                                                                               KRDRD  109
c---- if end of file                                                            KRDRD  110
c                                                                               KRDRD  111
      if ( IEOF .gt. 0 )     then                                               KRDRD  112
          goto  900                                                             KRDRD  113
      endif                                                                     KRDRD  114
c                                                                               KRDRD  115
c---- indicate not echoed                                                       KRDRD  116
c                                                                               KRDRD  117
      IECHO  = 0                                                                KRDRD  118
c                                                                               KRDRD  119
c---- ck for '## commands'                                                      KRDRD  120
c                                                                               KRDRD  121
      do  310  ii = KARDX , KARDI2-1                                            KRDRD  122
          if ( KARD(ii).ne.KCSP .and. KARD(ii).ne.KCTAB )     goto  320         KRDRD  123
310   continue                                                                  KRDRD  124
      ii = KARDI2 - 1                                                           KRDRD  125
320   if ( (KARD(ii).ne.KCNUMB) .or. (KARD(ii+1).ne.KCNUMB) ) then              KRDRD  126
          if ( NOECHO .eq. 0 )   call  ECHO                                     KRDRD  127
c                                                                               KRDRD  128
c-------- ck if we are in the middle of '##ifskipping'                          KRDRD  129
c                                                                               KRDRD  130
          if ( mifskp .ne. 0 )    then                                          KRDRD  131
              if ( IEOF .ne. 0 )     then                                       KRDRD  132
                  goto  80128                                                   KRDRD  133
              endif                                                             KRDRD  134
              mTrbuf(8) = KCRBRA                                                KRDRD  135
              goto  10                                                          KRDRD  136
          endif                                                                 KRDRD  137
c                                                                               KRDRD  138
c-------- ck if we are in the middle of '##def ' -------------                  KRDRD  139
c                                                                               KRDRD  140
          if ( mdefP .ne. 0 )     then                                          KRDRD  141
              if ( IEOF .ne. 0 )     then                                       KRDRD  142
                  goto  80129                                                   KRDRD  143
              endif                                                             KRDRD  144
               call  mdef0                                                      KRDRD  145
              mTrbuf(8) = KCRBRA                                                KRDRD  146
              goto  10                                                          KRDRD  147
          endif                                                                 KRDRD  148
c-------- ck if we are in the middle of '##def ' ------End------                KRDRD  149
          goto  900                                                             KRDRD  150
c                                                                               KRDRD  151
      endif                                                                     KRDRD  152
      KARDX = ii                                                                KRDRD  153
       call  mPP                                                                KRDRD  154
      if ( NOECHO .eq. 0 )   call  ECHO                                         KRDRD  155
      mTrbuf(8) = KCRBRA                                                        KRDRD  156
      if ( mSetfl .eq. 0 )     then                                             KRDRD  157
          goto  10                                                              KRDRD  158
      else                                                                      KRDRD  159
          goto  900                                                             KRDRD  160
      endif                                                                     KRDRD  161
c---                                                                            KRDRD  162
900   continue                                                                  KRDRD  163
c                                                                               KRDRD  164
c                                                                               KRDRD  171
      return                                                                    KRDRD  172
c                                                                               KRDRD  173
80128  call  mERR( 128 )                                                        KRDRD  174
      goto  810                                                                 KRDRD  175
80129  call  mERR( 129 )                                                        KRDRD  176
810   continue                                                                  KRDRD  177
       call  abt                                                                KRDRD  178
      end                                                                       KRDRD  179
      function  ATOF ( ia4, len, IESHOW, val )                                  ATOF     2
c                                                                               ATOF     3
c--- convert len chars of ia4(1..) from ascii into float                        ATOF     4
c        assumes no leading blanks and one trailing blank                       ATOF     5
c        if IESHOW .ne. 0 then prints error message                             ATOF     6
c        return =0. if there was an error, else return =1.                      ATOF     7
c        if len .lt. 0   :   convert  text pre-scanned by GETCS( )              ATOF     8
c                                   i.e. KARD(KARDSX..KARDX-1)                  ATOF     9
c                                                                               ATOF    10
      integer  ia4(4), len, IESHOW                                              ATOF    11
      real     val                                                              ATOF    12
c                                                                               ATOF    13
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
c                                                                               ATOF    17
      logical  DPFLG, EFLG                                                      ATOF    18
      real     FRAC,  SIGN                                                      ATOF    19
      integer  ESIGN, EVAL                                                      ATOF    20
c****************************************************************               ATOF    21
C$    write(6,'('' atof  -->  len=''i3''  IESHOW=''i1''  ia4=''20a4)')          ATOF    22
C$   1            len, IESHOW, (ia4(i),i=1,(len+3)/4)                           ATOF    23
      if ( len .ge. 0 )     then                                                ATOF    24
          isave1 = KARDX                                                        ATOF    25
          isave2 = KARDSX                                                       ATOF    26
          isave3 = KARDI1                                                       ATOF    27
          KARDI1 = KARDI2 + 1                                                   ATOF    28
          KARDX  = KARDI1                                                       ATOF    29
          KARDSX = KARDI1                                                       ATOF    30
          KARDI2 = KARDI1 + len                                                 ATOF    31
          if ( KARDI2 + 3 .gt. KARDIM )                                         ATOF    32
     1         call  MKRDER                                                     ATOF    33
           call  a4a1( ia4, KARD(KARDI1), (len+3)/4 )                           ATOF    34
          KARD(KARDI2) = KCSP                                                   ATOF    35
      else                                                                      ATOF    36
          isave1      = KARDX                                                   ATOF    37
          isave2      = KARD(KARDX)                                             ATOF    38
           isave3 = KARDI2                                                      ATOF    39
           KARDI2 = KARDX                                                       ATOF    40
          KARD(KARDX) = KCSP                                                    ATOF    41
          KARDX       = KARDSX                                                  ATOF    42
      endif                                                                     ATOF    43
      DPFLG = .false.                                                           ATOF    44
      EFLG  = .false.                                                           ATOF    45
      VAL    = 0.                                                               ATOF    46
      EVAL   = 0                                                                ATOF    47
      ESIGN  = 1                                                                ATOF    48
      FRAC   = 1.0                                                              ATOF    49
      SIGN   = 1.0                                                              ATOF    50
      if ( KARD(KARDX) .eq. HOLL(20) )     then                                 ATOF    51
          sign = -1                                                             ATOF    52
      else                                                                      ATOF    53
          goto  210                                                             ATOF    54
      endif                                                                     ATOF    55
200   KARDX = KARDX + 1                                                         ATOF    56
210   continue                                                                  PC22   268
C     write(6,'('' atof  210  HOLL=''20a4'' VAL=''F16.7)')                      PC22   269
C    1            (HOLL(i),i=1,20), VAL                                         PC22   270
      do  300  i = 1 , 10                                                       PC22   271
          if ( KARD(KARDX) .eq. HOLL(i) )    goto  310                          PC22   272
300   continue                                                                  PC22   273
C     write(6,'('' atof  300  HOLL=''20a4'' VAL=''F16.7)')                      PC22   274
C    1            (HOLL(j),j=1,20), VAL                                         PC22   275
      goto  400                                                                 PC22   276
310   if (      EFLG )     then                                                 PC22   277
                                EVAL = EVAL * 10  +  (i-1)                      PC22   278
      elseif ( DPFLG )     then                                                 PC22   279
          FRAC = FRAC * 0.1                                                     PC22   280
C     write(6,'('' atof  310a1  VAL=''F16.7)') VAL                              PC22   281
          VAL  = VAL  +  FRAC * FLOAT(i-1)                                      PC22   282
C     write(6,'('' atof  310b1  VAL=''F16.7)') VAL                              PC22   283
      else                                                                      PC22   284
C     write(6,'('' atof  310a2  VAL=''F16.7)') VAL                              PC22   285
          VAL  = VAL * 10.0  +  FLOAT(i-1)                                      PC22   286
C     write(6,'('' atof  310b2  VAL=''F16.7)') VAL                              PC22   287
      endif                                                                     PC22   288
C     write(6,'('' atof  310  KARDX=''I2'' EVAL=''I10'' VAL=''F16.7             PC22   289
C    1          '' i='',i15)') KARDX, EVAL, VAL, i                              PC22   290
      goto  200                                                                 ATOF    70
c                                                                               ATOF    71
400   if    ( ( KARD(KARDX) .eq. KCSP ) .or.                                    ATOF    72
     1        ( KARD(KARDX) .eq. KCTAB) )         then                          ATOF    73
          goto  900                                                             ATOF    74
      elseif (  KARD(KARDX) .eq. HOLL(11) )       then                          ATOF    75
          if ( DPFLG )     then                                                 ATOF    76
              goto  800                                                         ATOF    77
          endif                                                                 ATOF    78
          DPFLG = .true.                                                        ATOF    79
          goto  200                                                             ATOF    80
      elseif ( ( KARD(KARDX) .eq. KCE       ) .or.                              ATOF    81
     1         ( KARD(KARDX) .eq. HOLL(24)) )     then                          ATOF    82
          if ( EFLG )     then                                                  ATOF    83
              goto  800                                                         ATOF    84
          endif                                                                 ATOF    85
          if ( VAL .eq. 0 )    goto  800                                        ATOF    86
          EFLG  = .true.                                                        ATOF    87
          KARDX = KARDX + 1                                                     ATOF    88
          if (      KARD(KARDX) .eq. HOLL(20) )       then                      ATOF    89
              ESIGN = -1                                                        ATOF    90
              goto  200                                                         ATOF    91
           elseif ( KARD(KARDX) .eq. HOLL(21) )       then                      ATOF    92
              goto  200                                                         ATOF    93
          endif                                                                 ATOF    94
          goto  210                                                             ATOF    95
      else                                                                      ATOF    96
          goto  800                                                             ATOF    97
      endif                                                                     ATOF    98
c---- there is error                                                            ATOF    99
800   atof = 0.                                                                 FIXJH1  10
      if ( IESHOW .ne. 0 )     then                                             ATOF   101
          goto  80125                                                           ATOF   102
      endif                                                                     ATOF   103
      goto  990                                                                 ATOF   104
c                                                                               ATOF   105
900   if ( KARDX .lt. KARDI2 )     goto  800                                    ATOF   106
C     val= sign * val                                                           PC22   291
C     IF( ESIGN*EVAL .NE. 0. )  val= val*(10.0**(ESIGN*EVAL))                   PC22   292
      val1= sign                                                                PC22   293
      val2= 1                                                                   PC22   294
      val3= val                                                                 PC22   295
      IF( ESIGN*EVAL .NE. 0 )  val2= (10.0**FLOAT(ESIGN*EVAL))                  PC22   296
      val = val1 * val2 * val3                                                  PC22   297
C     write(6,'('' atof   ---   val1=''F16.7''  val2=''F16.7,                   PC22   298
C    $    ''  val3=''F16.7''  val=''F16.7)')  val1, val2, val3, val             PC22   299
      atof = 1.                                                                 FIXJH1  11
990   continue                                                                  ATOF   109
C$    write(6,'('' atof   ---  =''f2.0''  len=''i2''  val=''e14.7,              ATOF   110
C$   1    ''  KARD(''i4''..''i4'')=''(t65,40a1))')  atof, len, val,             ATOF   111
C$   2          KARDSX, KARDX, '"', (KARD(iii), iii=KARDSX,KARDX), '"'          ATOF   112
      if ( len .ge. 0 )     then                                                ATOF   113
          KARDI2 = KARDI1 - 1                                                   ATOF   114
          KARDX  = isave1                                                       ATOF   115
          KARDSX = isave2                                                       ATOF   116
          KARDI1 = isave3                                                       ATOF   117
      else                                                                      ATOF   118
          KARDX       = isave1                                                  ATOF   119
          KARD(KARDX) = isave2                                                  ATOF   120
           KARDI2 = isave3                                                      ATOF   121
      endif                                                                     ATOF   122
      return                                                                    ATOF   123
c                                                                               ATOF   124
80125 ii = KARDX                                                                ATOF   125
      KARDX = KARDI2                                                            ATOF   126
       call  mERR( 125 )                                                        ATOF   127
      KARDX = ii                                                                ATOF   128
cc      write( IOUTPT, 80010 )  KCQUO, (KARD(ii), ii=KARDI1,KARDI2), KCQUO      ATOF   129
cc80010 format( ' ********* field : ',80a1 )                                    ATOF   130
      goto  990                                                                 ATOF   131
      end                                                                       ATOF   132
      subroutine  KRDRD0 ( IECHOX )                                             KRDRD0   2
c                                                                               KRDRD0   3
c--- read a line from file , handle include stack                               KRDRD0   4
c---     if IECHOX = 1 then echo                                                KRDRD0   5
c                                                                               KRDRD0   6
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      common  /MINC/   NINC, incfil(9), incnum(9), incsil(9), isilnt            /MINC/   2
     1               , incprL                                                   /MINC/   3
     2               , incprf, curfnm, incfnm(9)                                /MINC/   4
      character*256  incprf, curfnm, incfnm                                     -042L5b 21
c                                                                               KRDRD0  12
      integer  IEND(3)                                                          KRDRD0  13
      data     IEND /4H..  ,4HEND ,4H..  /                                      KRDRD0  14
c****************************************************************               KRDRD0  15
20010 continue                                                                  KRDRD0  16
      i2 = KARDI1 + 79                                                          KRDRD0  17
      read ( INFIL, 1, end=20700 ) (KARD(I), I=KARDI1,i2)                       KRDRD0  18
1     format(80a1)                                                              KRDRD0  19
      KRDNUM = KRDNUM + 1                                                       KRDRD0  20
c---- eliminate trailing blanks, leave only one trailing blank                  KRDRD0  21
      do  20040  I = 1 , 80                                                     KRDRD0  22
          KARDI2  = i2 + 1 - I                                                  KRDRD0  23
          if ( (KARD(KARDI2) .ne. KCSP  ) .and.                                 KRDRD0  24
     1         (KARD(KARDI2) .ne. KCTAB ) )    goto  20050                      KRDRD0  25
20040 continue                                                                  KRDRD0  26
20050 KARD(KARDI2+1) = KCSP                                                     KRDRD0  27
      KARD(KARDI2+2) = KCSP                                                     KRDRD0  28
      KARDI2 = KARDI2 + 1                                                       KRDRD0  29
      if ( IECHOX .eq. 1 )   then                                               KRDRD0  30
c-------- indicate not echoed                                                   KRDRD0  31
          IECHO  = 0                                                            KRDRD0  32
c-------- echo if wanted                                                        KRDRD0  33
          if ( NOECHO .eq. 0 )   call  ECHO                                     KRDRD0  34
      endif                                                                     KRDRD0  35
900   continue                                                                  KRDRD0  36
C$    write(6,'('' KRDRD0 <---  KARD(''i4'':''i4'')='')') KARDI1, KARDI2        KRDRD0  37
C$    write(6,'(12x10(9h.2345678.i1))') (mod(iiii,10), iiii=1,10)               KRDRD0  38
C$    write(6,'(12x100a1)' )   (KARD(iiii), iiii=KARDI1,KARDI2)                 KRDRD0  39
c                                                                               KRDRD0  40
      return                                                                    KRDRD0  41
c                                                                               KRDRD0  42
c---- EOF hit ,  handle include stack                                           KRDRD0  43
c                                                                               KRDRD0  44
20700 if ( NINC .gt. 0 )  then                                                  KRDRD0  45
          close( infil )                                                        KRDRD0  46
          infil   = incfil(NINC)                                                KRDRD0  47
          krdnum  = incnum(NINC)                                                KRDRD0  48
          isilnt  = incsil(NINC)                                                KRDRD0  49
          curfnm  = incfnm(NINC)                                                KRDRD0  50
          NINC = NINC - 1                                                       KRDRD0  51
          if ( NOECHO .eq. 0 )    then                                          KRDRD0  52
              write( IOUTPT, '(8h file : ,a)' )  curfnm                         KRDRD0  53
          endif                                                                 KRDRD0  54
          goto  20010                                                           KRDRD0  55
      endif                                                                     KRDRD0  56
      write( ioutpt, 80004 )                                                    KRDRD0  57
80004 format(// 1X,30(1H*),32H END-OF-FILE READ ON INPUT FILE. )                KRDRD0  58
      IEOF   = 1                                                                KRDRD0  59
       call A4A1( IEND, KARD(KARDI1), 3 )                                       KRDRD0  60
      KARDI2 = KARDI1 + 11                                                      KRDRD0  61
c---- prevent echo                                                              KRDRD0  62
      IECHO = 1                                                                 KRDRD0  63
      goto  900                                                                 KRDRD0  64
      end                                                                       KRDRD0  65
      subroutine  MAC0                                                          MAC0     2
c                                                                               MAC0     3
c--- initialize MACRO data structures                                           MAC0     4
c                                                                               MAC0     5
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
      common  /MACIN0/ macin0                                                   /MACIN0/ 2
      common  /MINC/   NINC, incfil(9), incnum(9), incsil(9), isilnt            /MINC/   2
     1               , incprL                                                   /MINC/   3
     2               , incprf, curfnm, incfnm(9)                                /MINC/   4
      character*256  incprf, curfnm, incfnm                                     -042L5b 21
c                                                                               MAC0    11
      CHARACTER      cEvdel(4)                                                  PC     233
        equivalence (cEvdel(1), mEvDel)                                         MAC0    13
c****************************************************************               MAC0    14
C$    write(6,'('' mac0  --> macin0=''i6)')  macin0                             MAC0    15
c                                                                               MAC0    16
c---- the following initialization is done only once                            MAC0    17
c                                                                               MAC0    18
      if ( macin0 .eq. 0 )     then                                             MAC0    19
c                                                                               MAC0    20
c-------- initialize mEvDel : used as eval macro delimiter                      MAC0    21
c                                                                               MAC0    22
          mEvDel    = KCSP                                                      MAC0    23
          cEvDel(1) = CHAR(127)                                                 PC     234
C$        mEvDel    = 1h~                                                       MAC0    25
c                                                                               MAC0    26
          NINC   = 0                                                            MAC0    27
          NOslnt = 0                                                            MAC0    28
          mErTrc = 1                                                            MAC0    29
          mShDet = 0                                                            MAC0    30
C$        mShDet = 1                                                            MAC0    31
          mTracF = 0                                                            MAC0    32
          mSytPM =   1 000                                                      MAC0    33
          mStkRS =  10 000                                                      MAC0    34
          MRSRVE =  90 000                                                      MAC0    35
C$        mStkRS =  10 000                                                      MAC0    36
C$        MRSRVE = 100 000 - mStkRS                                             MAC0    37
          incprL = 0                                                            MAC0    38
c                                                                               MAC0    39
      endif                                                                     MAC0    40
      macini = 0                                                                MAC0    41
      iBkspF = 0                                                                MAC0    42
c                                                                               MAC0    43
      mTrac0 = 0                                                                MAC0    44
      isilnt = 0                                                                MAC0    45
      mP     = 0                                                                MAC0    46
      mTxtP  = 0                                                                MAC0    47
      mXpdon = 0                                                                MAC0    48
      mdefP  = 0                                                                MAC0    49
      mSetFl = 0                                                                MAC0    50
      mifx   = 0                                                                MAC0    51
c                                                                               MAC0    52
      mIfany  = 0                                                               MAC0    53
      mIfeli  = 0                                                               MAC0    54
      mifstN  = 0                                                               MAC0    55
      mifskp  = 0                                                               MAC0    56
c                                                                               MAC0    57
      mSytN   = 0                                                               MAC0    58
c                                                                               MAC0    59
      mEvDef  = 0                                                               MAC0    60
      mEvFl   = 0                                                               MAC0    61
      mStk    = 0                                                               MAC0    62
      mStk0   = 0                                                               MAC0    63
      mStkN   = 0                                                               MAC0    64
      mStkLv  = 0                                                               MAC0    65
      mTrbuI  = 0                                                               MAC0    66
      mEchoF  = 0                                                               MAC0    67
c---- reset IADIMV if this is after first MCKAA initialization                  MAC0    68
      if ( macin0 .ne. 0 )     then                                             MAC0    69
          IADIMV = macin0                                                       MAC0    70
      else                                                                      MAC0    71
          macin0 = IADIMV                                                       MAC0    72
      endif                                                                     MAC0    73
C$    write(6,'('' mac0  <-- macin0=''i6)')  macin0                             MAC0    74
      return                                                                    MAC0    75
      end                                                                       MAC0    76
      subroutine  mCKAA ( N )                                                   MCKAA    2
c                                                                               MCKAA    3
c--- get N more words from IA() array for storing macro definitions             MCKAA    4
c---    if N .eq. -999 initialize pointers                                      MCKAA    5
c                                                                               MCKAA    6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
c                                                                               MCKAA   11
      integer Evdef0(34)                                                        MCKAA   12
        data  Evdef0 /    4h#eva,4hl   ,4h    ,4h    ,  -1,                     MCKAA   13
     1                 3, 4hx   ,4h    ,4h    ,4h    ,                          MCKAA   14
     2                    4ho   ,4h    ,4h    ,4h    ,                          MCKAA   15
     3                    4hy   ,4h    ,4h    ,4h    ,                          MCKAA   16
     4     -1, 1,1h ,2,2h~ , -2, 1,1h ,2,2h~ , -3, 1,1h ,3,3h~  , -999 /        MCKAA   17
c                                                                               MCKAA   18
c****************************************************************               MCKAA   19
c                                                                               MCKAA   20
c.    .                                                                         MCKAA   21
c.    . IA() data structure wo macros :                                         MCKAA   22
c.    .                                                                         MCKAA   23
c.    .    |___________________________________________________|                MCKAA   24
c.    .     ^                                                 ^                 MCKAA   25
c.    .     |                                                 |                 MCKAA   26
c.    .     1                                               IADIMV              MCKAA   27
c.    .                                                                         MCKAA   28
c.    . IA() data structure w macros :                                          MCKAA   29
c.    .                                                                         MCKAA   30
c.    .                        <----MRSRVE----> <---mStkRS---->                 MCKAA   31
c.    .    |__________________|________________|_______________|                MCKAA   32
c.    .     ^                ^ ^              ^ ^             ^                 MCKAA   33
c.    .     |                | |              | |             |                 MCKAA   34
c.    .     1         IADIMV-| --mIAX    mStk0-              mStkL              MCKAA   35
c                                                                               MCKAA   36
C$    write(6,'('' mCKAA  --- N=''i5 ''  mIAX=''i6''  mIAXMA='',i6)')           MCKAA   37
C$   1                        N, mIAX, mIAXMA                                   MCKAA   38
      if ( N .eq. -999 )   goto  200                                            MCKAA   39
          if ( mIAX+N+10 .gt. mStk0 )   goto  800                               MCKAA   40
              mIAXMA = max0( mIAXMA, mIAX+N+10 )                                MCKAA   41
              return                                                            MCKAA   42
c                                                                               MCKAA   43
c---- initialize mCKAA                                                          MCKAA   44
c                                                                               MCKAA   45
200   macini = 1                                                                MCKAA   46
      mStkL  = IADIMV                                                           MCKAA   47
      mStk0  = mStkL  - mStkRS                                                  MCKAA   48
      mIAX   = mStk0  - MRSRVE                                                  MCKAA   49
      IADIMV = mIAX                                                             MCKAA   50
      IADIM  = IADIMV                                                           MCKAA   51
      mStk   = mStk0                                                            MCKAA   52
      mStkN  = mStk0                                                            MCKAA   53
c---- get space for macro sytPB                                                 MCKAA   54
      mSytN   = 0                                                               MCKAA   55
      mSytP0 = mIAX                                                             MCKAA   56
      mIAX   = mIAX + mSytPM                                                    MCKAA   57
c---- install '#eval' ,  first put delimiter char in place of tilda             MCKAA   58
      Evdef0(23) = mEvDel                                                       MCKAA   59
      Evdef0(28) = mEvDel                                                       MCKAA   60
      Evdef0(33) = mEvDel                                                       MCKAA   61
      mEvDef = mIAX + 1                                                         MCKAA   62
      mIAX   = mIAX + 34                                                        MCKAA   63
       call  MOVEN( Evdef0, ia(mEvDef), 34 )                                    MCKAA   64
c                                                                               MCKAA   65
      mIAXMA = mIAX                                                             MCKAA   66
      return                                                                    MCKAA   71
c                                                                               MCKAA   72
800    call  mERR( 118 )                                                        MCKAA   73
      write ( IOUTPT, 80001 )  MRSRVE                                           MCKAA   74
80001 format(/ 1x,75(1h*) /                                                     MCKAA   75
     1 ' Need more memory for storing macro definitions.', /                    MCKAA   76
     2 ' Use "##reserve TEXT nnnnnn" command to get more memory.', /            MCKAA   77
     3 ' Current value of nnnnnn is :', i6 )                                    MCKAA   78
       call  abt                                                                MCKAA   79
      end                                                                       MCKAA   80
      subroutine  mdef ( mdef1 )                                                MDEF     2
c                                                                               MDEF     3
c--- process macro definitions . mdef1=1 : one line definition                  MDEF     4
c                                     =0 : read until ##enddef                  MDEF     5
c                                                                               MDEF     6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
c                                                                               MDEF    12
      integer  mArx                                                             MDEF    13
c****************************************************************               MDEF    14
C$    write(6,'('' mdef --> mdef1=''i2)' )  mdef1                               MDEF    15
c                                                                               MDEF    16
      KI1sav  = KARDI1                                                          MDEF    17
      if ( macini .eq. 0 )   call  mCKAA( -999 )                                MDEF    18
C$    mIAX000 = mIAX+1                                                          MDEF    19
       call  ECHO                                                               MDEF    20
c                                                                               MDEF    21
c---- get macro name                                                            MDEF    22
c                                                                               MDEF    23
       call  mGCS( mdef1 )                                                      MDEF    24
       call  mSkpbl( mdef1 )                                                    MDEF    25
cd     write( 6, '('' mdef --- ISYMB="''4a4,''"  KARD(''i4'')=''a4)')           MDEF    26
cd    1                       (ISYMB(iiii), iiii=1,4), KARDX, KARD(KARDX)       MDEF    27
      if ( ISYMB(1) .eq. KCSP )     then                                        MDEF    28
          goto 80105                                                            MDEF    29
      endif                                                                     MDEF    30
       call  mSytSr                                                             MDEF    31
      if ( mSytI .eq. 0 )    then                                               MDEF    32
           call  mSytEn                                                         MDEF    33
      else                                                                      MDEF    34
          goto  80106                                                           MDEF    35
      endif                                                                     MDEF    36
      mdefP = mSytI                                                             MDEF    37
c                                                                               MDEF    38
c---- get macro arguments                                                       MDEF    39
c                                                                               MDEF    40
      mArx       = mIAX + 1                                                     MDEF    41
      IA(mIAX+1) = KRDNUM                                                       MDEF    42
      IA(mIAX+2) = 0                                                            MDEF    43
      mIAX = mIAX + 2                                                           MDEF    44
      if ( KARD(KARDX) .eq. KCLBRA )     then                                   MDEF    45
          KARDX = KARDX + 1                                                     MDEF    46
40120      call  mGCS( mdef1 )                                                  MDEF    47
          if ( IDELIM .ne. 0 )     then                                         MDEF    48
              if (     ISYMB(1) .eq. KCRBRA  )     then                         MDEF    49
                  goto  41000                                                   MDEF    50
              elseif ( ISYMB(1) .eq. KCCMMA  )     then                         MDEF    51
                  goto  40120                                                   MDEF    52
              else                                                              MDEF    53
                  goto  80107                                                   MDEF    54
              endif                                                             MDEF    55
          endif                                                                 MDEF    56
          if ( ISYMB(1) .eq. KCSP )     then                                    MDEF    57
                  goto  80107                                                   MDEF    58
          endif                                                                 MDEF    59
c-------- found a good arg                                                      MDEF    60
           call  mCKAA( 4 )                                                     MDEF    61
           call  MOVEN( ISYMB, IA(mIAX+1), 4 )                                  MDEF    62
          mIAX = mIAX + 4                                                       MDEF    63
          if ( IA(mArx+1) .eq. 32 )     then                                    MDEF    64
              goto  80120                                                       MDEF    65
          endif                                                                 MDEF    66
40130     IA(mArx+1) = IA(mArx+1) + 1                                           MDEF    67
          goto  40120                                                           MDEF    68
      endif                                                                     MDEF    69
41000 IA(mArx+1) = min( 32, IA(mArx+1) )                                        MDEF    70
       call  mSkpbl( 1 )                                                        MDEF    71
       call  mdef0                                                              MDEF    72
      if ( mdef1 .eq. 0 )  then                                                 MDEF    73
          goto  40900                                                           MDEF    74
      endif                                                                     MDEF    75
c---- put marker at end of macro text                                           MDEF    76
      IA(mIAX+1) = -999                                                         MDEF    77
      mIAX = mIAX + 1                                                           MDEF    78
      mdefP = 0                                                                 MDEF    79
      goto  40900                                                               MDEF    80
c                                                                               MDEF    81
80105  call  mERR( 105 )                                                        MDEF    82
                     goto  40900                                                MDEF    83
80106  call  mERR( 106 )                                                        MDEF    84
                     goto  40900                                                MDEF    85
80107  call  mERR( 107 )                                                        MDEF    86
                     goto  41000                                                MDEF    87
80120  call  mERR( 120 )                                                        MDEF    88
                     goto  40130                                                MDEF    89
40900 continue                                                                  MDEF    90
C$    write(6,'('' mdef <-- mIAX000=''i6,''  mIAX=''i6)')mIAX000, mIAX          MDEF    91
C$     call  DUMPIT( 20h    IA(mIAX000-mIAX),IA(mIAX000),                       MDEF    92
C$   1                                                -(mIAX-mIAX000+1))        MDEF    93
      KARDI1 = KI1sav                                                           MDEF    94
      return                                                                    MDEF    95
      end                                                                       MDEF    96
      subroutine  mdef0                                                         MDEF0    2
c                                                                               MDEF0    3
c--- get macro text                                                             MDEF0    4
c---   whenever an argname is found replace it w arg number                     MDEF0    5
c                                                                               MDEF0    6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
c                                                                               MDEF0   12
c****************************************************************               MDEF0   13
C$    write(6,'('' mdef0 --> mdefP=''i6''  narg=''i4)')                         MDEF0   14
c$   1                         mdefP, ia(mdefP+5)                               MDEF0   15
C$    miax00 = MIAX + 1                                                         MDEF0   16
      kx0 = KARDX                                                               MDEF0   17
      k   = KARDX                                                               MDEF0   18
      narg = ia(mdefP+5)                                                        MDEF0   19
      if ( narg .eq. 0 )     then                                               MDEF0   20
          kx  = KARDI2                                                          MDEF0   21
          goto  500                                                             MDEF0   22
      endif                                                                     MDEF0   23
c                                                                               MDEF0   24
100   if ( (KARD(k).eq.KCSP) .or. (KARD(k).eq.KCTAB) )    then                  MDEF0   25
          k  = k  + 1                                                           MDEF0   26
          if ( k .le. KARDI2 )   goto 100                                       MDEF0   27
              kx = KARDI2                                                       MDEF0   28
              goto  500                                                         MDEF0   29
      endif                                                                     MDEF0   30
      k1 = k                                                                    MDEF0   31
200   continue                                                                  MDEF0   32
      if (  ( KARD(k) .eq. KCCMMA  ) .or.                                       MDEF0   33
     1      ( KARD(k) .eq. KCSP    ) .or.                                       MDEF0   34
     2      ( KARD(k) .eq. KCLBRA  ) .or.                                       MDEF0   35
     3      ( KARD(k) .eq. KCRBRA  ) .or.                                       MDEF0   36
     4      ( KARD(k) .eq. KCLPAR  ) .or. ( KARD(k) .eq. KCRPAR  ) .or.         MDEF0   37
     5      ( KARD(k) .eq. KCDOLR  ) .or. ( KARD(k) .eq. HOLL(13)) .or.         MDEF0   38
     4      ( KARD(k) .eq. KCTAB   )  )    goto 300                             MDEF0   39
          k = k + 1                                                             MDEF0   40
          goto 200                                                              MDEF0   41
300   continue                                                                  MDEF0   42
      if ( k .eq. k1 )     then                                                 MDEF0   43
          k = k + 1                                                             MDEF0   44
          goto  100                                                             MDEF0   45
      endif                                                                     MDEF0   46
      isave1 = KARD(k)                                                          MDEF0   47
      isave2 = KARD(k+1)                                                        MDEF0   48
      isave3 = KARD(k+2)                                                        MDEF0   49
      isave4 = KARD(k+3)                                                        MDEF0   50
      KARD(k)   = KCSP                                                          MDEF0   51
      KARD(k+1) = KCSP                                                          MDEF0   52
      KARD(k+2) = KCSP                                                          MDEF0   53
      KARD(k+3) = KCSP                                                          MDEF0   54
      len4 = ( k - k1 + 3 ) / 4                                                 MDEF0   55
       call  A1A4( KARD(k1), ISYMB, len4 )                                      MDEF0   56
      KARD(k)   = isave1                                                        MDEF0   57
      KARD(k+1) = isave2                                                        MDEF0   58
      KARD(k+2) = isave3                                                        MDEF0   59
      KARD(k+3) = isave4                                                        MDEF0   60
      if ( len4 .lt. 4 )     ISYMB(4) = KCSP                                    MDEF0   61
      if ( len4 .lt. 3 )     ISYMB(3) = KCSP                                    MDEF0   62
      if ( len4 .lt. 2 )     ISYMB(2) = KCSP                                    MDEF0   63
c---- search ISYMB in arg. name table                                           MDEF0   64
      iargP = mdefP + 5                                                         MDEF0   65
      do  450  iarg = 1 , narg                                                  MDEF0   66
          if (  ( ISYMB(1) .ne. ia(iargP+1) ) .or.                              MDEF0   67
     1          ( ISYMB(2) .ne. ia(iargP+2) ) .or.                              MDEF0   68
     2          ( ISYMB(3) .ne. ia(iargP+3) ) .or.                              MDEF0   69
     3          ( ISYMB(4) .ne. ia(iargP+4) )  )     then                       MDEF0   70
              iargP = iargP + 4                                                 MDEF0   71
              goto  450                                                         MDEF0   72
          else                                                                  MDEF0   73
              goto  470                                                         MDEF0   74
          endif                                                                 MDEF0   75
450   continue                                                                  MDEF0   76
c---- did not find an arg                                                       MDEF0   77
      goto  100                                                                 MDEF0   78
c---- found an argname so first put current text in out buffer                  MDEF0   79
c----   then put an arg.num identifier to out buffer                            MDEF0   80
470   continue                                                                  MDEF0   81
      len  = k1 - kx0                                                           MDEF0   82
      len4 = (len+3)/4                                                          MDEF0   83
      if ( len4 .gt. 0 )     then                                               MDEF0   84
           call  mCKAA( len4 + 2 )                                              MDEF0   85
          IA(MIAX+1) = len                                                      MDEF0   86
           call  A1A4( KARD(kx0), IA(MIAX+2), len4 )                            MDEF0   87
          MIAX = MIAX + len4 + 1                                                MDEF0   88
      endif                                                                     MDEF0   89
      IA(MIAX+1) = -iarg                                                        MDEF0   90
      MIAX = MIAX + 1                                                           MDEF0   91
      kx0 = k                                                                   MDEF0   92
      goto  100                                                                 MDEF0   93
c                                                                               MDEF0   94
c---- move rest of line                                                         MDEF0   95
c                                                                               MDEF0   96
500   continue                                                                  MDEF0   97
      len  = kx - kx0 + 1                                                       MDEF0   98
      len4 = (len+3)/4                                                          MDEF0   99
      if ( len4 .gt. 0 )     then                                               MDEF0  100
           call  mCKAA( len4 + 2 )                                              MDEF0  101
          IA(MIAX+1) = len                                                      MDEF0  102
           call  A1A4( KARD(kx0), IA(MIAX+2), len4 )                            MDEF0  103
          MIAX = MIAX + len4 + 1                                                MDEF0  104
      endif                                                                     MDEF0  105
      IA(MIAX+1) = 0                                                            MDEF0  106
      MIAX = MIAX + 1                                                           MDEF0  107
C$    write(6, '('' mdef0 <-- miax00=''i6)') miax00                             MDEF0  108
C$     call dumpit(20h        ia(miax00..), ia(miax00),-(miax-miax00+1))        MDEF0  109
      return                                                                    MDEF0  110
      end                                                                       MDEF0  111
      subroutine  MERR ( mx )                                                   MERR     2
c              MSGDSC(1,M) == LEVEL*10 + UNDER                                  MERR     3
c                                                                               MERR     4
c----    error level 1 ERROR  2 WARNING  3 CAUTION  4 DEFAULT                   MERR     5
c                    5 INPUT  6 LIKE     7 FROM     8 NOTE                      MERR     6
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /IUNDER/  IUND, LEVEL, IUNDER(82)                                  /IUNDER/ 2
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON /PREFIX/ PREFIX(3,10)                                              FIX11    3
      DIMENSION ERRPX(3), WARPX(3), CAUPX(3), DEFPX(3), INPPX(3),               /PREFIX/ 3
     1      LIKPX(3), NOTPX(3), FROPX(3), LIBPX(3), UDFPX(3)                    FIX11    4
      EQUIVALENCE (ERRPX(1),PREFIX(1,1)), (WARPX(1),PREFIX(1,2)),               /PREFIX/ 5
     1            (CAUPX(1),PREFIX(1,3)), (DEFPX(1),PREFIX(1,4)),               /PREFIX/ 6
     2            (INPPX(1),PREFIX(1,5)), (LIKPX(1),PREFIX(1,6)),               /PREFIX/ 7
     3            (FROPX(1),PREFIX(1,7)), (NOTPX(1),PREFIX(1,8)),               FIX11    5
     4            (LIBPX(1),PREFIX(1,9)), (UDFPX(1),PREFIX(1,10))               FIX11    6
C                                                                               /PREFIX/ 9
c                                                                               MERR    13
      integer   mERRm(11,39)                                                    MERR    14
      integer        mERRm0(110), mERRm1(110), mERRm2(110), mERRm3(110)         MERR    15
        equivalence (mERRm0(1),mERRm(1, 1)),  (mERRm1(1),mERRm(1,11))           MERR    16
     1            , (mERRm2(1),mERRm(1,21)),  (mERRm3(1),mERRm(1,31))           MERR    17
c----                                                                           MERR    18
c---- messages 100 - 109                                                        MERR    19
c----                                                                           MERR    20
      data  mERRm0/                                                             MERR    21
     1 11, 4hunre,4hcogn,4hizib,4hle m,4hacro,4h com,4hmand,1h ,1h ,1h ,        MERR    22
     1 11, 4hincl,4hude ,4hrecu,4hrsiv,4he   ,4h    ,4h    ,1h ,1h ,1h ,        MERR    23
     2 11, 4htoo ,4hmany,4h inc,4hlude,4hs ne,4hsted,4h    ,1h ,1h ,1h ,        MERR    24
     3 11, 4hcant,4h rea,4hd in,4hclud,4he fi,4hle  ,4h    ,1h ,1h ,1h ,        MERR    25
     4 11, 4hincl,4hude ,4hfile,4h nam,4he mi,4hssin,4hg   ,1h ,1h ,1h ,        MERR    26
     5 11, 4hmacr,4ho na,4hme m,4hissi,4hng  ,4h    ,4h    ,1h ,1h ,1h ,        MERR    27
     6 11, 4hmacr,4ho re,4hdefi,4hned ,4h    ,4h    ,4h    ,1h ,1h ,1h ,        MERR    28
     7 11, 4hmacr,4ho ar,4hg mi,4hssin,4hg   ,4h    ,4h    ,1h ,1h ,1h ,        MERR    29
     8 11, 4h#eva,4hl ar,4hgume,4hnt .,4hgt. ,4h64 c,4hhars,1h ,1h ,1h ,        MERR    30
     9 11, 4hmacr,4ho ta,4hble ,4hcapa,4hcity,4h exc,4heede,1hd,1h ,1h /        MERR    31
c----                                                                           MERR    32
c---- messages 110 - 119                                                        MERR    33
c----                                                                           MERR    34
      data  mERRm1/                                                             MERR    35
     1 11, 4hmacr,4ho ar,4hgume,4hnt m,4hissi,4hng  ,1h ,1h ,1h ,1h ,           MERR    36
     1 11, 4hmacr,4ho ] ,4hmiss,4hing ,4hor i,4hncor,4hrect,4h no ,             MERR    37
     1                                               4hof a,4hrgs ,             MERR    38
     2 11, 4hmacr,4ho st,4hack ,4hover,4hflow,4h    ,1h ,1h ,1h ,1h ,           MERR    39
     3 11, 4hunde,4hfine,4hd ma,4hcro ,4hname,4h ref,4heren,4hced ,             MERR    40
     3                                                       1h ,1h ,           MERR    41
     4 11, 4hif b,4hlock,4hs ne,4hsted,4h mor,4he th,4han 3,4h2 de,             MERR    42
     4                                               4hep  ,1h ,                MERR    43
     5 11, 4hmore,4h tha,4hn on,4he el,4hse i,4hn if,4h blo,4hck  ,             MERR    44
     5                                               1h ,1h ,                   MERR    45
     6 11, 4hunma,4htche,4hd en,4hdif ,4h    ,4h    ,4h    ,1h ,1h ,1h ,        MERR    46
     7 11, 4hfoun,4hd el,4hse o,4hutsi,4hde o,4hf  i,4hf bl,4hock ,             MERR    47
     7                                               1h ,1h ,                   MERR    48
     8 11, 4h****,4h****,4h*** ,4hFATA,4hL ER,4hROR ,4h****,4h****,             MERR    49
     8                                               4h*** ,1h ,                MERR    50
     9 11, 4h#eva,4hl : ,4hbad ,4hoper,4hator,4h    ,4h    ,1h ,1h ,1h /        MERR    51
c----                                                                           MERR    52
c---- messages 120 - 129                                                        MERR    53
c----                                                                           MERR    54
      data  mERRm2/                                                             MERR    55
     1 11, 4hmacr,4ho ha,4hs mo,4hre t,4hhan ,4h32 a,4hrgs ,1h ,1h ,1h ,        MERR    56
     1 11, 4h#eva,4hl : ,4hsqrt,4h arg,4h neg,4hativ,4he   ,1h ,1h ,1h ,        MERR    57
     2 11, 4h#eva,4hl : ,4hbad ,4hfunc,4htion,4h nam,4he   ,1h ,1h ,1h ,        MERR    58
     3 11, 4hbad ,4hkeyw,4hord ,4hfor ,4h##re,4hserv,4he   ,1h ,1h ,1h ,        MERR    59
     4 11, 4hnumb,4her m,4hissi,4hng i,4hn ##,4hrese,4hrve ,1h ,1h ,1h ,        MERR    60
     5 11, 4hbad ,4hchar,4hacte,4hr in,4h num,4hber ,4hfiel,1hd,1h ,1h ,        MERR    61
     6 11, 4h##re,4hserv,4he mu,4hst b,4he fi,4hrst ,4hline,                    MERR    62
     6                                               4h in ,4hinpu,1ht,         MERR    63
     7 11, 4h##se,4ht re,4hsult,4h .gt,4h. 64,4h cha,4hrs  ,1hd,1h ,1h ,        MERR    64
     8 11, 4hEnd ,4hOf F,4hile ,4hinsi,4hde #,4h#if ,4h blo,2hck,1h ,           MERR    65
     8                                                           1h ,           MERR    66
     9 11, 4hEnd ,4hOf F,4hile ,4hinsi,4hde #,4h#def,4h blo,2hck,1h ,           MERR    67
     9                                                           1h /           MERR    68
c----                                                                           MERR    69
c---- messages 130 - 139                                                        MERR    70
c----                                                                           MERR    71
      data  mERRm3/                                                             MERR    72
     1 11, 4hmore,4h tha,4hn 32,4h mac,4hros ,4hnest,4hed  ,1h ,1h ,1h ,        MERR    73
     1 11, 4hfoun,4hd ##,4helse,4hif o,4hutsi,4hde o,4hf  i,4hf bl,             MERR    74
     1            4hock ,1h ,                                                   MERR    75
     2 11, 4hlite,4hral ,4hclos,4hing ,4hquot,4he/as,4hteri,4hsk m,             MERR    76
     2            4hissi,2hng,                                                  MERR    77
     3 11, 4hmacr,4ho ca,4hn no,4ht re,4hques,4ht PA,4hRAME,4hTRIC,             MERR    78
     3            4h run,1h  ,                                                  MERR    79
     4 11, 4h##de,4hf or,4h ##d,4hef1 ,4hnest,2hed,1h ,1h ,1h ,1h ,             MERR    80
     5 11, 4h##se,4ht1 i,4hnsid,4he ##,3hdef, 1h  ,1h ,1h ,1h ,1h ,             MERR    81
     6 11, 4h#eva,4hl : ,4hlog ,4hor l,4hog10,4h arg,4humen,4ht ne,             MERR    82
     6     4hgati,2hve,                                                         MERR    83
     7 11, 4h#eva,4hl : ,4hin A,4h ** ,4hB, A,4h is ,4hnega,4htive,1h ,         MERR    84
     7     1h ,                                                                 MERR    85
     8 11, 4h#eva,4hl : ,4hdivi,4hsor ,4his z,4hero ,1h ,1h ,1h ,1h ,           MERR    86
     9 11, 4h#eva,4hl : ,4hasin,4h or ,4hacos,4h arg,4humen,4ht > ,             MERR    87
     9     4h1   ,1h /                                                          MERR    88
c                                                                               MERR    89
c---- 100 unrecognizible macro command                                          MERR    90
c---- 101 include recursive                                                     MERR    91
c---- 102 too many includes nested                                              MERR    92
c---- 103 cant read include file                                                MERR    93
c---- 104 include file name missing                                             MERR    94
c---- 105 macro name missing                                                    MERR    95
c---- 106 macro redefined                                                       MERR    96
c---- 107 macro arg missing                                                     MERR    97
c---- 108 #eval argument .gt. 64 chars                                          MERR    98
c---- 109 macro table capacity exceeded                                         MERR    99
c---- 110 macro argument missing                                                MERR   100
c---- 111 macro ] missing or incorrect no of args                               MERR   101
c---- 112 macro stack overflow                                                  MERR   102
c---- 113 undefined macro name referenced                                       MERR   103
c---- 114 if blocks nested more than 32 deep                                    MERR   104
c---- 115 more than one else in if block                                        MERR   105
c---- 116 unmatched endif                                                       MERR   106
c---- 117 found else outside of  if block                                       MERR   107
c---- 118 *********** FATAL ERROR ***********                                   MERR   108
c---- 119 #eval : bad operator                                                  MERR   109
c---- 120 macro has more than 32 args                                           MERR   110
c---- 121 #eval : sqrt arg negative                                             MERR   111
c---- 122 #eval : bad function name                                             MERR   112
c---- 123 bad keyword for ##reserve                                             MERR   113
c---- 124 number missing in ##reserve                                           MERR   114
c---- 125 bad character in number field                                         MERR   115
c---- 126 ##reserve must be first line in input                                 MERR   116
c---- 127 ##set result .gt. 64 chars                                            MERR   117
c---- 128 End Of File inside ##if  block                                        MERR   118
c---- 129 End Of File inside ##def block                                        MERR   119
c---- 130 more than 32 macros nested                                            MERR   120
c---- 131 found ##elseif outside of  if block                                   MERR   121
c---- 132 literal closing quote/asterisk missing                                MERR   122
c---- 133 macro can not request PARAMETRIC run                                  MERR   123
c---- 134 ##def or ##def1 nested                                                MERR   124
c---- 135 ##set1 inside ##def                                                   MERR   125
c---- 136 #eval : log or log10 argument negative                                MERR   126
c---- 137 #eval : in A ** B, A is negative                                      MERR   127
c---- 138 #eval : divisor is zero                                               MERR   128
c---- 139 #eval : asin or acos argument > 1                                     MERR   129
c                                                                               MERR   130
c****************************************************************               MERR   131
c                                                                               MERR   132
      m = mx - 100 + 1                                                          MERR   133
      LEVEL         = mERRm(1,m) / 10                                           MERR   134
      MSGTOT(LEVEL) = MSGTOT(LEVEL) + 1                                         MERR   135
      if ( LEVEL .gt. MSGLVL )     return                                       MERR   136
      if ( LEVEL .le. ABTLVL )     IFATAL = IFATAL + 1                          MERR   137
      if ( ( NOECHO .ne. 0 ) .and. ( LEVEL  .gt. 3 ) )     return               MERR   138
c---- get underline flag                                                        MERR   139
      IUND   = mERRm(1,M) - LEVEL*10                                            MERR   140
      idum = mErr0( 1 )                                                         MERR   141
       call  LEEDER( mERRm(2,M), 10 )                                           MERR   142
      idum = mErr0( 3 )                                                         MERR   143
       call  mTrace                                                             MERR   144
      return                                                                    MERR   145
      end                                                                       MERR   146
      function  mErr0 ( icode )                                                 MERR0    2
c                                                                               MERR0    3
c--- low lever routine for setting up error messages                            MERR0    4
c        icode =1 for saving current state and getting mStk                     MERR0    5
c              =2 for getting next mStk                                         MERR0    6
c              =3 for restoring current state                                   MERR0    7
c        return =1 if current data is valid , =0 if stack exhausted             MERR0    8
c                                                                               MERR0    9
      integer  icode                                                            MERR0   10
c                                                                               MERR0   11
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
c****************************************************************               MERR0   16
      if ( ( mP .eq. 0 ) .and. ( mStkSv .eq. 0 ) )     then                     MERR0   22
          mErr0 = 0                                                             MERR0   23
          return                                                                MERR0   24
      endif                                                                     MERR0   25
      goto ( 1, 2, 3 ), icode                                                   MERR0   26
c                                                                               MERR0   27
c-------- icode = 1  :  save current state                                      MERR0   28
                                                                                MERR0   29
  1       IECHOs = IECHO                                                        MERR0   30
          KARDXs = KARDX                                                        MERR0   31
          KRDSXs = KARDSX                                                       MERR0   32
          KRDI1s = KARDI1                                                       MERR0   33
          KRDI2s = KARDI2                                                       MERR0   34
          KRDNUs = KRDNUM                                                       MERR0   35
          mPs    = mP                                                           MERR0   36
          mStks  = mStk                                                         MERR0   37
          mStkLs = mStkLv                                                       MERR0   38
c-------- make mStkSv non-zero so that quick-return if above fails              MERR0   39
          if ( mStkSv .eq. 0 )     mStkSv = mStk                                MERR0   40
c                                                                               MERR0   41
c-------- if macro expansion in progress get new values                         MERR0   42
c                                                                               MERR0   43
          if ( mStkSv .gt. mStk )      then                                     MERR0   44
              mStk = mStkSv                                                     MERR0   45
              goto  2                                                           MERR0   46
          endif                                                                 MERR0   47
          goto  900                                                             MERR0   48
c                                                                               MERR0   49
c-------- icode = 2  :  unstack                                                 MERR0   50
c                                                                               MERR0   51
  2       if ( mStk .le. mStk0 )     then                                       MERR0   52
              goto  800                                                         MERR0   53
          endif                                                                 MERR0   54
          mStkLv = ia(mStk-9)                                                   MERR0   55
          KARDSX = ia(mStk-7)                                                   MERR0   56
          KARDX  = ia(mStk-6)                                                   MERR0   57
          KARDI1 = ia(mStk-5)                                                   MERR0   58
          KARDI2 = ia(mStk-4)                                                   MERR0   59
          KRDNUM = ia(mStk-3)                                                   MERR0   60
          mP     = ia(mStk-1)                                                   MERR0   61
          IECHO  = mECHO(mStkLv+1)                                              MERR0   62
          mStk = ia(mStk)                                                       MERR0   63
          goto  900                                                             MERR0   64
c                                                                               MERR0   65
c-------- icode = 3  :  restore current state                                   MERR0   66
c                                                                               MERR0   67
  3       IECHO  = IECHOs                                                       MERR0   68
          KARDX  = KARDXs                                                       MERR0   69
          KARDSX = KRDSXs                                                       MERR0   70
          KARDI1 = KRDI1s                                                       MERR0   71
          KARDI2 = KRDI2s                                                       MERR0   72
          KRDNUM = KRDNUs                                                       MERR0   73
          mP     = mPs                                                          MERR0   74
          mStk   = mStks                                                        MERR0   75
          mStkLv = mStkLs                                                       MERR0   76
          goto  900                                                             MERR0   77
800   mErr0 = 0                                                                 MERR0   78
      goto  910                                                                 MERR0   79
900   mErr0 = 1                                                                 MERR0   80
910   continue                                                                  MERR0   81
      return                                                                    MERR0   87
      end                                                                       MERR0   88
      subroutine  mGCS ( inord )                                                MGCS     2
c                                                                               MGCS     3
c--- like GETCS , but does not attempt macro expansion                          MGCS     4
c                                                                               MGCS     5
c         inord = 0  : can read next line                                       MGCS     6
c                                                                               MGCS     7
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
c****************************************************************               MGCS    11
C$    write(6,'('' mGCS   -->'')')                                              MGCS    12
      IDELIM = 0                                                                MGCS    13
c                                                                               MGCS    14
c---- skip leading whitespace                                                   MGCS    15
c                                                                               MGCS    16
20    if ( (KARD(KARDX).eq.KCSP) .or. (KARD(KARDX).eq.KCTAB) )    then          MGCS    17
          KARDX  = KARDX + 1                                                    MGCS    18
          if ( KARDX .le. KARDI2 )   goto 20                                    MGCS    19
          if ( inord .eq. 0 )   then                                            MGCS    20
              KARDI1 = KARDI2                                                   MGCS    21
c                                                                               MGCS    22
               call  KRDRD0( 1 )                                                MGCS    23
              if ( IEOF .eq. 0 )     goto 20                                    MGCS    24
          endif                                                                 MGCS    25
          ISYMB(1) = KCSP                                                       MGCS    26
          goto  90                                                              MGCS    27
      endif                                                                     MGCS    28
c---- save starting pos.                                                        MGCS    29
      KARDSX = KARDX                                                            MGCS    30
c---- ck for delimiters ', [] TAB SPACE'                                        MGCS    31
50    if (  ( KARD(KARDX) .eq. KCCMMA  ) .or.                                   MGCS    32
     1      ( KARD(KARDX) .eq. KCSP    ) .or.                                   MGCS    33
     2      ( KARD(KARDX) .eq. KCLBRA  ) .or.                                   MGCS    34
     3      ( KARD(KARDX) .eq. KCRBRA  ) .or.                                   MGCS    35
     4      ( KARD(KARDX) .eq. KCTAB   )  )    goto 70                          MGCS    36
          KARDX  = KARDX + 1                                                    MGCS    37
          goto 50                                                               MGCS    38
70    if ( KARDX .ne. KARDSX )     then                                         MGCS    39
           call  PACK4 (KARD(KARDSX), KARDX-KARDSX, 16)                         MGCS    40
      else                                                                      MGCS    41
          ISYMB(1) = KARD(KARDX)                                                MGCS    42
          KARDX    = KARDX + 1                                                  MGCS    43
          IDELIM   = 1                                                          MGCS    44
      endif                                                                     MGCS    45
90    continue                                                                  MGCS    46
C$    write(6,'('' mGCS   <-- ISYMB="''4a4,''"  KARD(''i4'')=''a4,              MGCS    47
C$   1          ''  IDELIM=''i1)')                                              MGCS    48
C$   2          (ISYMB(iiii), iiii=1,4), KARDX, KARD(KARDX), IDELIM             MGCS    49
      return                                                                    MGCS    50
      end                                                                       MGCS    51
      subroutine  mGetAR                                                        MGETAR   2
c                                                                               MGETAR   3
c--- get macro arg value for macro expansion                                    MGETAR   4
c          terminators are ', ]'.  Will strip one level of quotes               MGETAR   5
c          if there are no quotes then skip thru balanced ()s, []s              MGETAR   6
c                                                                               MGETAR   7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
c                                                                               MGETAR  12
      integer  quotfl, balpar, balbra                                           MGETAR  13
c****************************************************************               MGETAR  14
       call  mSkpbl( 0 )                                                        MGETAR  15
cd     write(6,'('' mGetAR -->  KARDX=''i4)' )  KARDX                           MGETAR  16
c                                                                               MGETAR  17
      quotfl = 0                                                                MGETAR  18
      balpar = 0                                                                MGETAR  19
      balbra = 0                                                                MGETAR  20
      KARDSX = KARDX                                                            MGETAR  21
      if     ( KARD(KARDX) .eq. KCQUO )     then                                MGETAR  22
          quotfl = 1                                                            MGETAR  23
          goto  200                                                             MGETAR  24
      elseif ( KARD(KARDX) .eq. KCDQUO )     then                               MGETAR  25
          quotfl = 2                                                            MGETAR  26
          goto  200                                                             MGETAR  27
      endif                                                                     MGETAR  28
100   KARDSX = KARDX                                                            MGETAR  29
200   KARDX  = KARDX + 1                                                        MGETAR  30
      if ( KARDX .gt. KARDI2 )   goto  300                                      MGETAR  31
          if ( quotfl .eq. 1 )   then                                           MGETAR  32
              if ( KARD(KARDX) .ne. KCQUO ) goto  200                           MGETAR  33
              goto  300                                                         MGETAR  34
          endif                                                                 MGETAR  35
          if ( quotfl .eq. 2 )   then                                           MGETAR  36
              if ( KARD(KARDX) .ne. KCDQUO ) goto  200                          MGETAR  37
              goto  300                                                         MGETAR  38
          endif                                                                 MGETAR  39
          if (      KARD(KARDX) .eq. kclpar )    then                           MGETAR  40
              balpar = balpar + 1                                               MGETAR  41
           elseif ( KARD(KARDX) .eq. KCLBRA )    then                           MGETAR  42
              balbra = balbra + 1                                               MGETAR  43
           elseif ( KARD(KARDX) .eq. kcrpar )    then                           MGETAR  44
              if  ( balpar .gt. 0 )              balpar = balpar - 1            MGETAR  45
           elseif ( KARD(KARDX) .eq. KCRBRA )    then                           MGETAR  46
              if  ( balbra .gt. 0 )                  then                       MGETAR  47
                  balbra = balbra - 1                                           MGETAR  48
                  goto  200                                                     MGETAR  49
              endif                                                             MGETAR  50
          endif                                                                 MGETAR  51
          if ( (balpar .gt. 0) .or. (balbra .gt. 0) )    goto  200              MGETAR  52
          if (   ( KARD(KARDX) .ne. KCSP    ) .and.                             MGETAR  53
     1           ( KARD(KARDX) .ne. KCTAB   ) .and.                             MGETAR  54
     2           ( KARD(KARDX) .ne. KCCMMA  ) .and.                             MGETAR  55
     3           ( KARD(KARDX) .ne. KCRBRA  )  )     goto  200                  MGETAR  56
300   if ( quotfl .ne. 0 )    then                                              MGETAR  57
          if ( KARDX .lt. KARDI2 )    KARDX = KARDX + 1                         MGETAR  58
      endif                                                                     MGETAR  59
      isave1 = KARD(KARDX)                                                      MGETAR  60
      isave2 = KARD(KARDX+1)                                                    MGETAR  61
      isave3 = KARD(KARDX+2)                                                    MGETAR  62
      isave4 = KARD(KARDX+3)                                                    MGETAR  63
      KARD(KARDX)   = KCSP                                                      MGETAR  64
      KARD(KARDX+1) = KCSP                                                      MGETAR  65
      KARD(KARDX+2) = KCSP                                                      MGETAR  66
      KARD(KARDX+3) = KCSP                                                      MGETAR  67
      len  = KARDX - KARDSX                                                     MGETAR  68
      len4 = ( len + 3 ) / 4                                                    MGETAR  69
      if ( mStkX + len4 + 2 .gt. mStkL )    then                                MGETAR  70
          goto  80112                                                           MGETAR  71
      endif                                                                     MGETAR  72
      IA(mStkX+1) = len                                                         MGETAR  73
       call  A1A4( KARD(KARDSX), IA(mStkX+2), len4 )                            MGETAR  74
      mStkX = mStkX + len4 + 1                                                  MGETAR  75
      KARD(KARDX)   = isave1                                                    MGETAR  76
      KARD(KARDX+1) = isave2                                                    MGETAR  77
      KARD(KARDX+2) = isave3                                                    MGETAR  78
      KARD(KARDX+3) = isave4                                                    MGETAR  79
      IA(mStkX+1) = -999                                                        MGETAR  80
      mStkX = mStkX + 1                                                         MGETAR  81
c                                                                               MGETAR  82
C$     write(6,'('' mGetAR <--  len=''i4''  KARD(''i4'')=''a4)' )               MGETAR  83
C$   1                           len, KARDX, KARD(KARDX)                        MGETAR  84
c                                                                               MGETAR  85
      return                                                                    MGETAR  86
80112  call  mERR( 112 )                                                        MGETAR  87
       call  abt                                                                MGETAR  88
      end                                                                       MGETAR  89
      subroutine  MIF ( mifcon )                                                MIF      2
c                                                                               MIF      3
c--- set mIfskp (: if skipping flag )  used by ##ifdef , ##if                   MIF      4
c                                                                               MIF      5
      integer  mifcon                                                           MIF      6
c                                                                               MIF      7
c--- mifcon  =0  : no if skipping                                               MIF      8
c--- mifcon  =1  : dont skip until 'else,endif' then                            MIF      9
c---                skip after 'else' until 'endif' found                       MIF     10
c--- mifcon  =-1 : skip until 'else,endif' found                                MIF     11
c                                                                               MIF     12
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
c****************************************************************               MIF     14
C$    write(6,'('' mIF   -->  mifcon=''i2''  mIfskp=''i2                        MIF     15
C$   1 ''  mIfels=''i2''  mIfend=''i2''  mIfx=''i2''  mIfStN=''i2               MIF     16
C$   2 ''  mIfany=''i2''  mIfeli=''i2)')  mifcon                                MIF     17
C$   2     , mIfskp, mIfels, mIfend, mIfx, mIfStN, mIfany, mIfeli               MIF     18
      mIfskp = 0                                                                MIF     19
      if ( mifcon .eq. -1 )     mIfskp = 1                                      MIF     20
      if ( mIfStN .ge. 32 )     then                                            MIF     21
          goto  80114                                                           MIF     22
      endif                                                                     MIF     23
      mIfStN = mIfStN + 1                                                       MIF     24
      if ( mIfeli .eq. 0 )     then                                             MIF     25
          mIfStk(mIfStN) = mIfels * 8  +  mIfany                                MIF     26
          mIfany = 0                                                            MIF     27
          mIfels = 0                                                            MIF     28
      endif                                                                     MIF     29
      if ( mIfskp .eq. 0  )     mIfany  = 1                                     MIF     30
900   continue                                                                  MIF     31
      mIfend = 0                                                                MIF     32
C$    write(6,'('' mIF   <--  mifcon=''i2''  mIfskp=''i2                        MIF     33
C$   1 ''  mIfels=''i2''  mIfend=''i2''  mIfx=''i2''  mIfStN=''i2               MIF     34
C$   2 ''  mIfany=''i2)')                                                       MIF     35
C$   2     mifcon, mIfskp, mIfels, mIfend, mIfx, mIfStN, mIfany                 MIF     36
C$    if ( mIfStN .gt. 0 )                                                      MIF     37
C$   1   write(6,'(12x''mIfStk()=''32i2)')  (mIfStk(iii), iii=1,mIfStN)         MIF     38
      return                                                                    MIF     39
80114  call  mERR( 114 )                                                        MIF     40
      goto   900                                                                MIF     41
      end                                                                       MIF     42
      subroutine  MKRDER                                                        MKRDER   2
c                                                                               MKRDER   3
c--- write err msg 'macro recursion or exceeded KARD() stack'                   MKRDER   4
c                                                                               MKRDER   5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
c****************************************************************               MKRDER   7
       call  mERR( 118 )                                                        MKRDER   8
      write( IOUTPT, '('' macro recursion or exceeded KARD() stack'')' )        MKRDER   9
       call  abt                                                                MKRDER  10
      end                                                                       MKRDER  11
      subroutine  mMkUnd                                                        mMkUnd   2
c                                                                               mMkUnd   3
c---- If not already installed , install a fake macro to take care              mMkUnd   4
c----   of undefined macros.                                                    mMkUnd   5
c---- This macro is equvalent to :                                              mMkUnd   6
c----   ##set1  !!!Undefined!!!  00000                                          mMkUnd   7
c                                                                               mMkUnd   8
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
c                                                                               mMkUnd  11
      integer  IDUMNM(4), IDUMTX(4)                                             mMkUnd  12
        data   IDUMNM/ 4h!!!U,4hndef,4hined,4h!!!  /                            mMkUnd  13
        data   IDUMTX/ 4h0000,4h0   ,4h    ,4h     /                            mMkUnd  14
c                                                                               mMkUnd  15
       call  MOVEN( IDUMNM, ISYMB, 4 )                                          mMkUnd  16
       call  mSytSr                                                             mMkUnd  17
      if ( mSytI .eq. 0 )    then                                               mMkUnd  18
           call  MOVEN( IDUMNM, mSetNm, 4 )                                     mMkUnd  19
           call  MOVEN( IDUMTX, ISYMB , 4 )                                     mMkUnd  20
          LSYMB = 5                                                             mMkUnd  21
           call  mPPset                                                         mMkUnd  22
      endif                                                                     mMkUnd  23
      return                                                                    mMkUnd  24
      end                                                                       mMkUnd  25
      function  mPAR ( NPRUNx )                                                 EXPR2   83
c                                                                               MPARAM   3
c--- handle the PARAMETRIC related stuff                                        MPARAM   4
c                                                                               MPARAM   5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
c****************************************************************               MPARAM   9
c                                                                               MPARAM  10
c---- if not a PARAMETRIC run , do nothing                                      MPARAM  11
c                                                                               MPARAM  12
      if ( NPRUNx .eq. 1 )     then                                             MPARAM  13
          mPAR = 0                                                              EXPR2   84
          return                                                                MPARAM  15
      endif                                                                     MPARAM  16
c                                                                               MPARAM  17
c---- it is PARAMETRIC run                                                      MPARAM  18
c                                                                               MPARAM  19
      if ( INFIL .ne. INCOPY )     then                                         MPARAM  20
c                                                                               MPARAM  21
c--------- switch INFIL <== INCOPY                                              MPARAM  22
c                                                                               MPARAM  23
          if ( mStkLv .gt. 0 )     then                                         MPARAM  24
c                                                                               MPARAM  25
               call  mERR( 133 )                                                MPARAM  26
               call  abt                                                        MPARAM  27
          endif                                                                 MPARAM  28
          mzzPAR(1) = KARDI1                                                    MPARAM  29
          mzzPAR(2) = KARDI2                                                    MPARAM  30
          mzzPAR(3) = KARDX                                                     MPARAM  31
          mzzPAR(4) = mP                                                        MPARAM  32
          KARDI1 = KARDI2 + 1                                                   MPARAM  33
          INFIL = INCOPY                                                        MPARAM  34
           call  KRDRD                                                          MPARAM  35
          mPAR = 1                                                              EXPR2   85
      else                                                                      MPARAM  37
c                                                                               MPARAM  38
c-------- switching of INFIL <== INPUT will bel done in DOEBDL( )               MPARAM  39
c                                                                               MPARAM  40
          KARDI1 = mzzPAR(1)                                                    MPARAM  41
          KARDI2 = mzzPAR(2)                                                    MPARAM  42
          KARDX  = mzzPAR(3)                                                    MPARAM  43
          mP     = mzzPAR(4)                                                    MPARAM  44
          mPAR = 0                                                              EXPR2   86
      endif                                                                     MPARAM  46
      return                                                                    MPARAM  47
      end                                                                       MPARAM  48
      subroutine  mPP                                                           MPP      2
c                                                                               MPP      3
c--- process macro commands  (lines that start w ##)                            MPP      4
c                                                                               MPP      5
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
      common  /MINC/   NINC, incfil(9), incnum(9), incsil(9), isilnt            /MINC/   2
     1               , incprL                                                   /MINC/   3
     2               , incprf, curfnm, incfnm(9)                                /MINC/   4
      character*256  incprf, curfnm, incfnm                                     -042L5b 21
                                                                                -048n   26
      character cisymb*64, cisymb256*256                                        -048n   27
      character PathName*256                                                    -048n   28
                                                                                -048n   29
      integer  m1tb(2,28) ,  mrestb(2,3)                                        MPP     16
        data   m1tb / 4hDEF1,4h    , 4hDEF ,4h    , 4hENDD,4hEF  ,              MPP     17
     1                4hLIST,4h    , 4hNOLI,4hST  , 4hINCL,4hUDES,              MPP     18
     2 4hINCL,4hUDE , 4hNOSI,4hLENT, 4hIFDE,4hF   , 4hIFND,4hEF  ,              MPP     19
     3 4hIF  ,4h    , 4hIFN ,4h    , 4hELSE,4hIF  , 4hELSE,4h    ,              MPP     20
     4 4hENDI,4hF   , 4hSET1,4h    , 4hRESE,4hRVE , 4hSHOW,4h    ,              MPP     21
     6 4hNOSH,4hOW  , 4hSHOW,4hDETA, 4hNOSH,4hOWDE, 4hCLEA,4hR   ,              MPP     22
     7 4hTRAC,4hEBAC, 4hNOTR,4hACEB, 4hWRIT,4hE   , 4hNOWR,4hITE ,              MPP     23
     8 4hSYMB,4hOLTA, 4hFILE,4hPREF /                                           MPP     24
        data   mrestb / 4hTEXT,4h    , 4hSTAC,4hK   , 4hNAME,4hS    /           MPP     25
c****************************************************************               MPP     26
C$    write(6,'('' mPP -->'')' )                                                MPP     27
c                                                                               MPP     28
      mppCmd = 0                                                                MPP     29
      mTrac0 = 1                                                                MPP     30
      KI1sav  = KARDI1                                                          MPP     31
      KARDX   = KARDX + 2                                                       MPP     32
       call  mSkpbl( 1 )                                                        MPP     33
       call  mGCS( 1 )                                                          MPP     34
       call  UPPER4( ISYMB, ISYMB, 4 )                                          MPP     35
c                                                                               MPP     36
c--- make ##def higher priority then other macro commands. (EE 920624)          MPP     37
c                                                                               MPP     38
c                                                                               MPP     39
c-------- ck if we are in the middle of '##def ' -------------                  MPP     40
c                                                                               MPP     41
          if ( mdefP .ne. 0 )     then                                          MPP     42
              if ( IEOF .ne. 0 )     then                                       MPP     43
                   call  mERR( 129 )                                            MPP     44
                   call  abt                                                    MPP     45
              endif                                                             MPP     46
c------------ if not ##enddef keep on storing the macro                         MPP     47
              if ( (ISYMB(1) .ne. m1tb(1,3)) .or.                               MPP     48
     1             (ISYMB(2) .ne. m1tb(2,3)) )    then                          MPP     49
                  KARDX = KARDI1                                                MPP     50
                   call  mdef0                                                  MPP     51
                  KARDX = KARDI2                                                MPP     52
                  goto  39000                                                   MPP     53
              endif                                                             MPP     54
          endif                                                                 MPP     55
c-------- ck if we are in the middle of '##def ' ------End------                MPP     56
c                                                                               MPP     57
c                                                                               MPP     58
c---- ck if we are in the middle of '##ifskipping'                              MPP     59
c                                                                               MPP     60
      if ( mIfskp .ne. 0 )    then                                              MPP     61
c-------- ck for 'IF ', 'IFDEF ', 'IFNDEF '                                     MPP     62
cc        if     ((  ISYMB(1).eq.4hIF   ) .or.                                  MPP     63
cc   1            ( (ISYMB(1).eq.4hIFDE).and.(ISYMB(2).eq.4hF   ) ) .or.        MPP     64
cc   2            ( (ISYMB(1).eq.4hIFND).and.(ISYMB(2).eq.4hEF  ) ))then        MPP     65
          if     ((  ISYMB(1).eq.m1tb(1,11) )  .or.                             MPP     66
     1            ( (ISYMB(1).eq.m1tb(1,9)) .and.                               MPP     67
     2              (ISYMB(2).eq.m1tb(2,9)) )  .or.                             MPP     68
     3            ( (ISYMB(1).eq.m1tb(1,10)) .and.                              MPP     69
     4              (ISYMB(2).eq.m1tb(2,10)) ))     then                        MPP     70
              mIfend = mIfend + 1                                               MPP     71
              goto  39000                                                       MPP     72
c-------- ck for 'ENDIF '                                                       MPP     73
          elseif ( (ISYMB(1).eq.m1tb(1,15)) .and.                               MPP     74
     1             (ISYMB(2).eq.m1tb(2,15)) )     then                          MPP     75
              if ( mIfend .gt. 0 )   then                                       MPP     76
                  mIfend = mIfend - 1                                           MPP     77
                  goto  39000                                                   MPP     78
               else                                                             MPP     79
                  goto  30000                                                   MPP     80
              endif                                                             MPP     81
          endif                                                                 MPP     82
          if ( mIfend .gt. 0 )    then                                          MPP     83
              goto  39000                                                       MPP     84
          endif                                                                 MPP     85
c                                                                               MPP     86
c-------- if '##else' , '##elseif' , process w regular ## commands              MPP     87
c                                                                               MPP     88
          if ( ISYMB(1) .eq. m1tb(1,14) )     then                              MPP     89
              goto  30000                                                       MPP     90
          endif                                                                 MPP     91
          goto  39000                                                           MPP     92
      endif                                                                     MPP     93
c---- ck if we are in the middle of '##ifskipping' --------End--------          MPP     94
c                                                                               MPP     95
c---- ck for ## commands                                                        MPP     96
c                                                                               MPP     97
30000 mppCmd = 1                                                                MPP     98
c---- ck if comment line.                                                       MPP     99
      if ( KARD(KARDSX) .eq. KCDOLR )    then                                   MPP    100
          KARDX  = KARDI2                                                       MPP    101
          goto  39000                                                           MPP    102
      endif                                                                     MPP    103
c                                                                               MPP    104
      do  30020  i = 1 , 28                                                     MPP    105
          if ( (m1tb(1,i).eq.ISYMB(1)) .and. (m1tb(2,i).eq.ISYMB(2)) )          MPP    106
     1         goto   30030                                                     MPP    107
30020 continue                                                                  MPP    108
      goto  80100                                                               MPP    109
30030 goto ( 30100, 30200, 30300, 30400, 30500, 30600, 30700, 30800,            MPP    110
     1       30900, 31000, 31100, 31200, 31300, 31400, 31500, 31600,            MPP    111
     2       31700, 31800, 31900, 32000, 32100, 32200, 32300, 32400,            MPP    112
     3       32500, 32600, 32700, 32800 ) , i                                   MPP    113
c                                                                               MPP    114
c---- '##def1' , '##def' ,  if mdef1=1 it is a one line ##def                   MPP    115
c                                                                               MPP    116
30100 mdef1 = 1                                                                 MPP    117
      goto  30202                                                               MPP    118
30200 mdef1 = 0                                                                 MPP    119
c                                                                               MPP    120
30202 if ( mdefP .ne. 0 )     then                                              MPP    121
          goto  80134                                                           MPP    122
      endif                                                                     MPP    123
       call  mdef( mdef1 )                                                      MPP    124
      goto   39000                                                              MPP    125
c                                                                               MPP    126
c---- '##enddef'                                                                MPP    127
c                                                                               MPP    128
30300 IA(MIAX+1) = -999                                                         MPP    129
      MIAX = MIAX + 1                                                           MPP    130
      mdefP = 0                                                                 MPP    131
      goto  39000                                                               MPP    132
c                                                                               MPP    133
c---- '##list' , '##nolist'                                                     MPP    134
c                                                                               MPP    135
30400 NOECHO = 0                                                                MPP    136
      goto  39000                                                               MPP    137
30500 NOECHO = 1                                                                MPP    138
      goto  39000                                                               MPP    139
c                                                                               MPP    140
c---- '##includesilent', '##include'. if isilnt=1 disable printout              MPP    141
c                                                                               MPP    142
30600 isilnX = 1                                                                MPP    143
      goto  30702                                                               MPP    144
30700 isilnX = 0                                                                MPP    145
c                                                                               MPP    146
30702 if ( NOECHO .eq. 0 )    call  ECHO                                        MPP    147
c---- filename delimited by SPACE                                               MPP    148
       call  mSkpbl( 1 )                                                        MPP    149
      KARDSX = KARDX                                                            MPP    150
      do  30712  KARDX = KARDSX , KARDI2                                        MPP    151
          if ( (KARD(KARDX) .eq. KCSP) .or.                                     MPP    152
     1         (KARD(KARDX) .eq. KCTAB) )     goto  30714                       MPP    153
30712 continue                                                                  MPP    154
      KARDX = KARDI2                                                            MPP    155
30714 L = min( 64, KARDX - KARDSX )                                             MPP    156
      if ( L .le. 0 )     then                                                  MPP    157
          goto  80104                                                           MPP    158
      endif                                                                     MPP    159
      write ( cisymb, '(64a1)' )  (KARD(KARDSX+i-1), i=1, L)                    MPP    160
      if ( incprL .gt. 0 )     then                                             MPP    161
          L = min( L, 64 - incprL )                                             MPP    162
          cisymb = incprf(1:incprL) // cisymb(1:L)                              MPP    163
          L = L + incprL                                                        MPP    164
      endif                                                                     MPP    165
      L = L + 1                                                                 MPP    166
      if ( L .le. 64 )     then                                                 MPP    167
          do  30718  i = L , 64                                                 MPP    168
              cisymb(i:i) = ' '                                                 MPP    169
30718     continue                                                              MPP    170
      endif                                                                     MPP    171
      if ( IECHO .eq. 0 )     call  ECHO                                        MPP    172
C$    write(6,'('' mPP --- cisymb=''a)')  cisymb                                MPP    173
      if ( ( NOECHO .eq. 0 ) .and. ( incprL .gt. 0 ) .and.                      MPP    174
     1     ( isilnt .eq. 0 ) )                                                  MPP    175
     2    write( IOUTPT, '(8h file : ,a)' )  cisymb                             MPP    176
c---- make sure new filename is not on stack                                    MPP    177
      do  30720  i = 1 , NINC                                                   MPP    178
          if ( cisymb .eq. incfnm(i) )     then                                 MPP    179
              goto 80101                                                        MPP    180
          endif                                                                 MPP    181
30720 continue                                                                  MPP    182
      if ( NINC .ge. 9 )     then                                               MPP    183
          goto  80102                                                           MPP    184
      endif                                                                     MPP    185
c---- include file unit number = 30 + NINC                                      MPP    186
      i = 30 + NINC                                                             MPP    187
c---- convert to 265 characters and                                             -048n   30
c---- check if file name or path modified via environment (.exe)                -048n   31
#ifdef _DLL                                                                  /* -048n   32 */ 
      cISYMB256 = cisymb                                                        -048n   33
#else                                                                        /* -048n   34 */ 
      cISYMB256 = PathName(cisymb)                                              -048n   35
#endif                                                                       /* -048n   36 */ 
      open( i, file=cISYMB256, err=80103, status='old'                          -048n   37
     $                    , ACTION='READ',SHARE='DENYNONE' )                    -037     4
c                                                                               MPP    189
      NINC = NINC + 1                                                           MPP    190
      incfil(NINC) = infil                                                      MPP    191
      incnum(NINC) = KRDNUM                                                     MPP    192
      incsil(NINC) = isilnt                                                     MPP    193
      incfnm(NINC) = curfnm                                                     MPP    194
      curfnm = cisymb                                                           MPP    195
      infil  = i                                                                MPP    196
      KRDNUM = 0                                                                MPP    197
      isilnt = isilnX                                                           MPP    198
      if ( NOslnt .ne. 0 )   isilnt = 0                                         MPP    199
      goto  39000                                                               MPP    200
c                                                                               MPP    201
c---- '##nosilent'                                                              MPP    202
c                                                                               MPP    203
30800 NOslnt = 1                                                                MPP    204
      goto  39000                                                               MPP    205
c                                                                               MPP    206
c---- '##ifdef' , '##ifndef'                                                    MPP    207
c                                                                               MPP    208
30900 mIfx = 1                                                                  MPP    209
      goto  31002                                                               MPP    210
31000 mIfx = -1                                                                 MPP    211
c                                                                               MPP    212
31002 mIfeli = 0                                                                MPP    213
       call  mGCS( 1 )                                                          MPP    214
       call  mSytSr                                                             MPP    215
      if ( mSytI .ne. 0 )     then                                              MPP    216
          mifcon = 1                                                            MPP    217
       else                                                                     MPP    218
          mifcon = -1                                                           MPP    219
      endif                                                                     MPP    220
c                                                                               MPP    221
c--- mifcon  =0  : no if skipping                                               MPP    222
c--- mifcon  =1  : dont skip until 'else,endif' then                            MPP    223
c---                skip after 'else' until 'endif' found                       MPP    224
c--- mifcon  =-1 : skip until 'else,endif' found                                MPP    225
c                                                                               MPP    226
       call  MIF( mifcon * mIfx )                                               MPP    227
      goto  39000                                                               MPP    228
c                                                                               MPP    229
c---- '##if' , '##ifn'                                                          MPP    230
c                                                                               MPP    231
31100 mIfx = 1                                                                  MPP    232
      goto  31202                                                               MPP    233
31200 mIfx = -1                                                                 MPP    234
c                                                                               MPP    235
31202 mIfeli = 0                                                                MPP    236
31204 mSetFl = -1                                                               MPP    237
      goto  39000                                                               MPP    238
c                                                                               MPP    239
c---- '##elseif'                                                                MPP    240
c                                                                               MPP    241
31300 if ( mIfStN .le. 0 )     then                                             MPP    242
          goto  80131                                                           MPP    243
      endif                                                                     MPP    244
      if ( mIfels .ne. 0 )     then                                             MPP    245
          goto  80131                                                           MPP    246
      endif                                                                     MPP    247
      mIfStN  = mIfStN - 1                                                      MPP    248
      mIfeli  = 1                                                               MPP    249
      mIfx    = 1                                                               MPP    250
      goto  31204                                                               MPP    251
c                                                                               MPP    252
c---- '##else'                                                                  MPP    253
c                                                                               MPP    254
31400 if ( mIfels .gt. 0 )   then                                               MPP    255
          goto  80115                                                           MPP    256
      endif                                                                     MPP    257
31474 if ( mIfStN .le. 0 )   then                                               MPP    258
          goto  80117                                                           MPP    259
      endif                                                                     MPP    260
      mIfStN = mIfStN - 1                                                       MPP    261
       call  ECHO                                                               MPP    262
c---- Only if any previous ##if, ##elseif =.t. we can turn-on skip flag         MPP    263
      mIfskp  = mIfAny                                                          MPP    264
      mIfStN  = mIfStN + 1                                                      MPP    265
      mIfels  = mIfels + 1                                                      MPP    266
      mIfend  = 0                                                               MPP    267
      goto  39000                                                               MPP    268
c                                                                               MPP    269
c---- '##endif'                                                                 MPP    270
c                                                                               MPP    271
31500 continue                                                                  MPP    272
      if ( mIfStN .le. 0 )     then                                             MPP    273
          goto  80116                                                           MPP    274
      endif                                                                     MPP    275
      mIfels  = mIfStk(mIfStN) / 8                                              MPP    276
      mifany  = mIfStk(mIfStN)  -  mIfels * 8                                   MPP    277
      mIfStN  = mIfStN - 1                                                      MPP    278
      mIfskp  = 0                                                               MPP    279
      goto  39000                                                               MPP    280
c                                                                               MPP    281
c---- '##set1'                                                                  MPP    282
c                                                                               MPP    283
31600 if ( mdefP .ne. 0 )     then                                              MPP    284
          goto  80135                                                           MPP    285
      endif                                                                     MPP    286
       call  mSkpbl( 1 )                                                        MPP    287
       call  mGCS( 1 )                                                          MPP    288
       call  mSkpbl( 1 )                                                        MPP    289
      do  31602  i = 1 , 4                                                      MPP    290
          mSetNm(i) = ISYMB(i)                                                  MPP    291
31602 continue                                                                  MPP    292
      mSetFl = 1                                                                MPP    293
      goto  39000                                                               MPP    294
c                                                                               MPP    295
c---- '##reserve TEXT nnnnnn  NAMES iiii  STACK mmmmm'                          MPP    296
c                                                                               MPP    297
31700 if ( macini .ne. 0 )     then                                             MPP    298
          goto  80126                                                           MPP    299
      endif                                                                     MPP    300
       call  mSkpbl( 1 )                                                        MPP    301
       call  mGCS( 1 )                                                          MPP    302
       call  UPPER4( ISYMB, ISYMB, 4 )                                          MPP    303
      if ( ISYMB(1) .eq. KCSP )     then                                        MPP    304
          goto  39000                                                           MPP    305
      endif                                                                     MPP    306
      do  j=1,3                                                                 MPP    307
          if( (ITYPLS(ISYMB(1)) .eq. ITYPLS(mrestb(1,j)) ) .and.                MPP    308
     1        (ITYPLS(ISYMB(2)) .eq. ITYPLS(mrestb(2,j)) ) ) goto  31720        MPP    309
      enddo                                                                     MPP    310
      goto  80123                                                               MPP    311
31720  call  mSkpbl( 1 )                                                        MPP    312
       call  mGCS( 1 )                                                          MPP    313
      if ( ISYMB(1) .eq. KCSP )     then                                        MPP    314
          goto  80124                                                           MPP    315
      endif                                                                     MPP    316
      if ( atof( ISYMB, -1, 1, x ) .ne. 0. )     then                           FIXJH1  12
          if (     j .eq. 1 )     then                                          MPP    318
              MRSRVE = x + 0.001                                                MPP    319
          elseif ( j .eq. 2 )     then                                          MPP    320
              mStkRS = x + 0.001                                                MPP    321
          elseif ( j .eq. 3 )     then                                          MPP    322
              mSytPM = x + 0.001                                                MPP    323
          endif                                                                 MPP    324
      endif                                                                     MPP    325
      goto  31700                                                               MPP    326
c                                                                               MPP    327
c---- ##show                                                                    MPP    328
c                                                                               MPP    329
31800 if ( mTracF .eq. 0 )     mTracF = 1                                       MPP    330
      if ( mTracF .eq. 2 )     mTracF = 3                                       MPP    331
      goto  39000                                                               MPP    332
c                                                                               MPP    333
c---- ##noshow                                                                  MPP    334
c                                                                               MPP    335
31900 if ( mTracF .eq. 1 )     mTracF = 0                                       MPP    336
      if ( mTracF .eq. 3 )     mTracF = 2                                       MPP    337
      goto  39000                                                               MPP    338
c                                                                               MPP    339
c---- ##showdetail                                                              MPP    340
c                                                                               MPP    341
32000 mShDet = 1                                                                MPP    342
      goto  39000                                                               MPP    343
c                                                                               MPP    344
c---- ##noshowdetail                                                            MPP    345
c                                                                               MPP    346
32100 mShDet = 0                                                                MPP    347
      goto  39000                                                               MPP    348
c                                                                               MPP    349
c---- ##clear  :  clear all macro data structures                               MPP    350
c                                                                               MPP    351
32200  call  mac0                                                               MPP    352
      goto  39000                                                               MPP    353
c                                                                               MPP    354
c---- ##traceback  :  enable detailed traceback                                 MPP    355
c                                                                               MPP    356
32300 mErTrc = 1                                                                MPP    357
      goto  39000                                                               MPP    358
c                                                                               MPP    359
c---- ##notraceback  :  disable detailed traceback                              MPP    360
c                                                                               MPP    361
32400 mErTrc = 0                                                                MPP    362
      goto  39000                                                               MPP    363
c                                                                               MPP    364
c---- ##write  :  write expanded text in file 22                                MPP    365
c                                                                               MPP    366
32500 if ( mTracF .eq. 0 )     mTracF = 2                                       MPP    367
      if ( mTracF .eq. 1 )     mTracF = 3                                       MPP    368
      goto  39000                                                               MPP    369
c                                                                               MPP    370
c---- ##nowrite  :  nowrite expanded text in file                               MPP    371
c                                                                               MPP    372
32600 if ( mTracF .eq. 2 )     mTracF = 0                                       MPP    373
      if ( mTracF .eq. 3 )     mTracF = 1                                       MPP    374
      goto  39000                                                               MPP    375
c                                                                               MPP    376
c---- ##symboltable : print symbol table                                        MPP    377
c                                                                               MPP    378
32700  call  ECHO                                                               MPP    379
       call  mSytPr                                                             MPP    380
      goto  39000                                                               MPP    381
c                                                                               MPP    382
c---- ##fileprefix  <path> : prefix for ##include filenames                     MPP    383
c                                                                               MPP    384
32800  call  mSkpbl( 1 )                                                        MPP    385
c---- prefix is delimited by SPACE                                              MPP    386
      KARDSX = KARDX                                                            MPP    387
      do  32812  KARDX = KARDSX , KARDI2                                        MPP    388
          if ( (KARD(KARDX) .eq. KCSP) .or.                                     MPP    389
     1         (KARD(KARDX) .eq. KCTAB) )     goto  32814                       MPP    390
32812 continue                                                                  MPP    391
      KARDX = KARDI2                                                            MPP    392
32814 incprL = min( 64, KARDX - KARDSX )                                        MPP    393
      if ( incprL .gt. 0 )     then                                             MPP    394
          write( incprf, '(64a1)' )  (KARD(KARDSX+i-1), i=1, incprL)            MPP    395
      else                                                                      MPP    396
          incprf(1:1) = ' '                                                     MPP    397
          incprL = 0                                                            MPP    398
      endif                                                                     MPP    399
C$    write(6,'('' mPP --- incprL=''i3''  incprf=''a)')incprL,incprf            MPP    400
c                                                                               MPP    401
39000 continue                                                                  MPP    402
      KARDI1  = KI1sav                                                          MPP    403
      mTrac0 = 0                                                                MPP    404
C$    write(6,'('' mPP <--'')' )                                                MPP    405
      return                                                                    MPP    406
c                                                                               MPP    407
c---- Errors                                                                    MPP    408
c                                                                               MPP    409
80100  call  mERR( 100 )                                                        MPP    410
                       goto   39000                                             MPP    411
80101  call  mERR( 101 )                                                        MPP    412
                       goto   39000                                             MPP    413
80102  call  mERR( 102 )                                                        MPP    414
                       goto   39000                                             MPP    415
80103  call  mERR( 103 )                                                        MPP    416
                       goto   39000                                             MPP    417
80104  call  mERR( 104 )                                                        MPP    418
                       goto   39000                                             MPP    419
80115  call  mERR( 115 )                                                        MPP    420
                       goto   31474                                             MPP    421
80116  call  mERR( 116 )                                                        MPP    422
                       goto   39000                                             MPP    423
80117  call  mERR( 117 )                                                        MPP    424
                       goto   39000                                             MPP    425
80123  call  mERR( 123 )                                                        MPP    426
      write( IOUTPT, 80008 )   (ISYMB(ii), ii=1,4)                              MPP    427
80008 format( ' ********* keyword is : ',4a4,' *********' )                     MPP    428
                       goto   39000                                             MPP    429
80124  call  mERR( 124 )                                                        MPP    430
                       goto   39000                                             MPP    431
80126  call  mERR( 126 )                                                        MPP    432
                       goto   39000                                             MPP    433
80131  call  mERR( 131 )                                                        MPP    434
                       goto   39000                                             MPP    435
80134  call  mERR( 134 )                                                        MPP    436
                       goto   39000                                             MPP    437
80135  call  mERR( 135 )                                                        MPP    438
                       goto   39000                                             MPP    439
      end                                                                       MPP    440
      subroutine  mPPset                                                        MPPSET   2
c                                                                               MPPSET   3
c--- install ##set macro in macro data structure                                MPPSET   4
c                                                                               MPPSET   5
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
c                                                                               MPPSET  11
c****************************************************************               MPPSET  12
C$    write(6,'('' mPPset --> KARDSX=''i4''  mKARDI2=''i4)')                    MPPSET  13
C$   1                        KARDSX, mKARDI2                                   MPPSET  14
c                                                                               MPPSET  15
      if ( macini .eq. 0 )   call  mCKAA( -999 )                                MPPSET  16
C$    mIAX000 = mIAX+1                                                          MPPSET  17
c                                                                               MPPSET  18
      if ( mSetNm(1) .eq. KCSP )     then                                       MPPSET  19
          goto 80105                                                            MPPSET  20
      endif                                                                     MPPSET  21
       call  moven( ISYMB , ISYMU, 4 )                                          MPPSET  22
       call  moven( mSetNm, ISYMB, 4 )                                          MPPSET  23
       call  mSytSr                                                             MPPSET  24
      if ( mSytI .eq. 0 )    then                                               MPPSET  25
           call  mSytEn                                                         MPPSET  26
          MIAY = 0                                                              MPPSET  27
      else                                                                      MPPSET  28
          MIAY = mIAX                                                           MPPSET  29
          mIAX = mSytI + 3                                                      MPPSET  30
C$        mIAX000 = mSytI                                                       MPPSET  31
      endif                                                                     MPPSET  32
       call  moven( ISYMU, ISYMB, 4 )                                           MPPSET  33
c                                                                               MPPSET  34
c---- no of args = 0                                                            MPPSET  35
c                                                                               MPPSET  36
      IA(mIAX+1) = KRDNUM                                                       MPPSET  37
      IA(mIAX+2) = 0                                                            MPPSET  38
      mIAX = mIAX + 2                                                           MPPSET  39
c                                                                               MPPSET  40
c---- move the text  +  extra BLANK                                             MPPSET  41
c                                                                               MPPSET  42
      len        = min( LSYMB, 63 )                                             MPPSET  43
      len4       = ( len + 3 ) / 4                                              MPPSET  44
      IA(mIAX+1) = len + 1                                                      MPPSET  45
       call  mCKAA( 16 + 2 )                                                    MPPSET  46
       call  filln( KCSP , IA(mIAX+2), 16   )                                   MPPSET  47
       call  moven( ISYMB, IA(mIAX+2), len4 )                                   MPPSET  48
      len4       = ( len + 4 ) / 4                                              MPPSET  49
      IA(mIAX+2+len4) = -999                                                    MPPSET  50
      mIAX = mIAX + 18                                                          MPPSET  51
      if ( MIAY .ne. 0 )     mIAX = MIAY                                        MPPSET  52
900   continue                                                                  MPPSET  53
C$    write(6,'('' mPPset   <-- mIAX000=''i6,''  mIAX=''i6)')mIAX000, mIAX      MPPSET  54
C$     call  DUMPIT( 20h    IA(mIAX000-mIAX),IA(mIAX000),                       MPPSET  55
C$   1                                                -(mIAX-mIAX000+1))        MPPSET  56
      return                                                                    MPPSET  57
c                                                                               MPPSET  58
80105  call  mERR( 105 )                                                        MPPSET  59
                     goto  900                                                  MPPSET  60
      end                                                                       MPPSET  61
      subroutine  mSkpbl ( iNoRd )                                              MSKPBL   2
c                                                                               MSKPBL   3
c--- if iNoRd = 0 can read next line.                                           MSKPBL   4
c                                                                               MSKPBL   5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
c****************************************************************               MSKPBL  10
c$    write( 6, '('' MSKPBL --- iNoRd =''i2'' KARD(''i4'')=''a4)')              MSKPBL  11
c$   1                          iNoRd, KARDX, KARD(KARDX)                       MSKPBL  12
100   continue                                                                  MSKPBL  13
c                                                                               MSKPBL  14
c---- if we need to read another line.                                          MSKPBL  15
c                                                                               MSKPBL  16
      if ( (KARDX .ge. KARDI2) .and. (iNoRd .eq. 0) )    then                   MSKPBL  17
c-------- if showdetail print macro call.                                       MSKPBL  18
          if ( (mShDet .ne. 0) .and. (mP .ne. mEvDef) )     then                MSKPBL  19
              i = max( 1, min( 80, mKRDS1 - KARDI1 + 12 ) )                     MSKPBL  20
c$            write(6,'('' mSkpbl --- KARDI1,KARDI2=''i4,i5,                    MSKPBL  21
c$   1          ''  mKRDS1=''i4''  i=''i4)') KARDI1, KARDI2, mKRDS1, i          MSKPBL  22
              if ( mStkLv .gt. 1 )     i = 1                                    MSKPBL  23
              write(IOUTPT,'(1x,130a1)')  (KCSP, ii=1,i), KCQUO                 MSKPBL  24
     1          , (KARD(ii), ii=mKRDS1,KARDI2), KCQUO                           MSKPBL  25
          endif                                                                 MSKPBL  26
c-------- print track buffer up to now.                                         MSKPBL  27
          if ( mTracF .ne. 0 )    call  mTrack( 2, 0 )                          MSKPBL  28
c-------- now read the line                                                     MSKPBL  29
           call  KRDRD                                                          MSKPBL  30
          mKRDS1 = KARDI1                                                       MSKPBL  31
          goto  100                                                             MSKPBL  32
      endif                                                                     MSKPBL  33
c----                                                                           MSKPBL  34
c                                                                               MSKPBL  35
C$    write(6,'('' MSKPBL --- KARD(''i4'')=''a4)')  KARDX, KARD(KARDX)          MSKPBL  36
      if( (KARD(KARDX).ne.KCSP) .and. (KARD(KARDX).ne.KCTAB) )    return        MSKPBL  37
      if( KARDX .ge. KARDI2 )     return                                        MSKPBL  38
      KARDX = KARDX + 1                                                         MSKPBL  39
      goto  100                                                                 MSKPBL  40
      end                                                                       MSKPBL  41
      subroutine  mStat ( IUNIT )                                               MSTAT    2
c                                                                               MSTAT    3
c--- write out macro statistics                                                 MSTAT    4
c                                                                               MSTAT    5
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
      common  /MACIN0/ macin0                                                   /MACIN0/ 2
c****************************************************************               MSTAT    9
C$    write(6,'('' mSTAT -><- mIAX=''i6''  IADIMV=''i6''  mStk=''i6             MSTAT   10
C$   1  ''  mStk0=''i6)')  mIAX, IADIMV, mStk, mStk0                            MSTAT   11
      if ( macini .eq. 0 )     return                                           MSTAT   12
      istack = mStkN - mStk0                                                    MSTAT   13
      itext  = mIAX  - IADIMV                                                   MSTAT   14
      write( IUNIT, 1 )  istack, itext, mSytN                                   MSTAT   15
1     format( ' words used for STACK=',i6                                       MSTAT   16
     1        ' , for TEXT =',i6                                                MSTAT   17
     2        ' , no. of defined NAMES=',i4 )                                   MSTAT   18
      return                                                                    MSTAT   19
      end                                                                       MSTAT   20
      subroutine  mSytPr                                                        MSYTPR   2
c                                                                               MSYTPR   3
c--- print symbol table                                                         MSYTPR   4
c                                                                               MSYTPR   5
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
c****************************************************************               MSYTPR   9
      write( IOUTPT, 1 )                                                        MSYTPR  10
1     format( //,' ########## macro names defined ##########',/ )               MSYTPR  11
      do  200  isyx = 1 , mSytN                                                 MSYTPR  12
          j = IA(mSytP0+isyx)                                                   MSYTPR  13
          write( IOUTPT, 2 )  isyx, (IA(j+i-1), i=1,4)                          MSYTPR  14
2         format( 1x,i4,2x,4a4 )                                                MSYTPR  15
200   continue                                                                  MSYTPR  16
      write( IOUTPT, 3 )                                                        MSYTPR  17
3     format( / ,' #########################################',/ )               MSYTPR  18
      return                                                                    MSYTPR  19
      end                                                                       MSYTPR  20
      subroutine  mSytSr                                                        MSYTSR   2
c                                                                               MSYTSR   3
c--- search macro name in table                                                 MSYTSR   4
c                                                                               MSYTSR   5
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
c                                                                               MSYTSR  10
      integer  lo, hi, mid, isgn                                                MSYTSR  11
c****************************************************************               MSYTSR  12
      if ( mSytN .eq. 0 )   then                                                MSYTSR  13
          goto  700                                                             MSYTSR  14
      endif                                                                     MSYTSR  15
      lo = 1                                                                    MSYTSR  16
      hi = mSytN                                                                MSYTSR  17
100   mid = ( lo + hi ) / 2                                                     MSYTSR  18
      ix = IA(mSytP0+mid)                                                       MSYTSR  19
      if ( ISYMB(1) .gt. IA(ix)   )   goto  300                                 MSYTSR  20
      if ( ISYMB(1) .lt. IA(ix)   )   goto  500                                 MSYTSR  21
      if ( ISYMB(2) .gt. IA(ix+1) )   goto  300                                 MSYTSR  22
      if ( ISYMB(2) .lt. IA(ix+1) )   goto  500                                 MSYTSR  23
      if ( ISYMB(3) .gt. IA(ix+2) )   goto  300                                 MSYTSR  24
      if ( ISYMB(3) .lt. IA(ix+2) )   goto  500                                 MSYTSR  25
      if ( ISYMB(4) .gt. IA(ix+3) )   goto  300                                 MSYTSR  26
      if ( ISYMB(4) .lt. IA(ix+3) )   goto  500                                 MSYTSR  27
      mSytI = ix                                                                MSYTSR  28
      goto  900                                                                 MSYTSR  29
300   isgn = 1                                                                  MSYTSR  30
      if ( lo .eq. hi )   goto  700                                             MSYTSR  31
      lo = mid + 1                                                              MSYTSR  32
      goto  100                                                                 MSYTSR  33
500   isgn = -1                                                                 MSYTSR  34
      if ( lo .eq. hi )   goto  700                                             MSYTSR  35
      hi = mid                                                                  MSYTSR  36
      goto  100                                                                 MSYTSR  37
700   mSytI = 0                                                                 MSYTSR  38
900   continue                                                                  MSYTSR  39
C$    write(6,'('' mSytSrc -><-ISYMB="''4a4''"  mSytI=''i6''  mSytP0=''         MSYTSR  40
C$   1  i6''  mSytN=''i6)') (ISYMB(iii), iii=1,4), mSytI, mSytP0, mSytN         MSYTSR  41
      return                                                                    MSYTSR  42
c                                                                               MSYTSR  43
c                                                                               MSYTSR  44
      entry  mSytEn                                                             MSYTSR  45
c                                                                               MSYTSR  46
c--- enter  macro name in table                                                 MSYTSR  47
c                                                                               MSYTSR  48
      if ( mSytN .eq. 0 )   then                                                MSYTSR  49
          lo = 1                                                                MSYTSR  50
          goto  1300                                                            MSYTSR  51
      endif                                                                     MSYTSR  52
cd    write(6,'('' mSytEnt --- isgn=''i2''  lo, hi, mid=''3i5)')                MSYTSR  53
cd   1                         isgn, lo, hi, mid                                MSYTSR  54
      if ( isgn .eq. 1 )   lo = lo + 1                                          MSYTSR  55
      if ( mSytI .gt. mSytN )  goto  1300                                       MSYTSR  56
          K = mSytN                                                             MSYTSR  57
          do  1250  i = lo , mSytN                                              MSYTSR  58
              K = K - 1                                                         MSYTSR  59
              IA(mSytP0+K+2) = IA(mSytP0+K+1)                                   MSYTSR  60
1250      continue                                                              MSYTSR  61
1300  if ( mSytN .ge. mSytPM ) goto  80109                                      MSYTSR  62
c                                                                               MSYTSR  63
          mSytN          = mSytN + 1                                            MSYTSR  64
          mSytI          = MIAX + 1                                             MSYTSR  65
          IA(mSytP0+lo) = MIAX + 1                                              MSYTSR  66
           call  MCKAA( 4 )                                                     MSYTSR  67
          do  1350  i = 1 , 4                                                   MSYTSR  68
              IA(MIAX+i) = ISYMB(i)                                             MSYTSR  69
1350      continue                                                              MSYTSR  70
          MIAX = MIAX + 4                                                       MSYTSR  71
          goto  1900                                                            MSYTSR  72
c                                                                               MSYTSR  73
80109  call  mERR( 109 )                                                        MSYTSR  74
      write ( IOUTPT, 80002 )  mSytPM                                           MSYTSR  75
80002 format(/ 1x,75(1h*) /                                                     MSYTSR  76
     1 ' Need more memory for storing macro names.', /                          MSYTSR  77
     2 ' Use "##reserve NAMES nnnnnn" command to get more memory.', /           MSYTSR  78
     3 ' Current value of nnnnnn is :', i6 )                                    MSYTSR  79
       call  abt                                                                MSYTSR  80
1900  continue                                                                  MSYTSR  81
cd    write(6,'('' mSytEnt --> mSytP0=''i6''  mSytN=''i6''  ISYMB="''           MSYTSR  82
cd   1 4a4,''"'')')           mSytP0, mSytN, (ISYMB(iiii), iiii=1,4)            MSYTSR  83
C$    write(6,'('' mSytEnt -><-ISYMB="''4a4''"  mSytI=''i6''  mSytP0=''         MSYTSR  84
C$   1 i6''  mSytN=''i6)') (ISYMB(iii), iii=1,4), mSytI, mSytP0, mSytN          MSYTSR  85
      return                                                                    MSYTSR  86
      end                                                                       MSYTSR  87
      subroutine  mTrace                                                        MTRACE   2
c                                                                               MTRACE   3
c--- write out macro traceback                                                  MTRACE   4
c                                                                               MTRACE   5
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON /IUNDER/  IUND, LEVEL, IUNDER(82)                                  /IUNDER/ 2
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
c                                                                               MTRACE  14
      character*18   c18                                                        MTRACE  15
      character*8       c8                                                      MTRACE  16
        integer             ic8(2)                                              MTRACE  17
          equivalence  (c8, ic8(1))                                             MTRACE  18
      integer  kinput(4), karrow(2)                                             MTRACE  19
          data kinput / 4h...i,4hnput,4h... ,4h     /                           MTRACE  20
          data            karrow / 4h  --,4h->   /                              MTRACE  21
      data     KCCOL / 1h: / ,  KCPERD / 1h. /                                  MTRACE  22
c                                                                               MTRACE  23
c***********************************************************************        MTRACE  24
c                                                                               MTRACE  25
C$    write(6,'('' mTrace  --> mP=''i6''  mStkSv=''i6''  mStk=''i6,             MTRACE  26
C$   1  ''  mErTrc=''i2)')  mP, mStkSv, mStk, mErTrc                            MTRACE  27
      if ( ( mP .eq. 0 ) .and.                                                  MTRACE  28
     1     ((mStkSv .eq. mStk) .or. (mStkSv .eq.0)) )     then                  MTRACE  29
          return                                                                MTRACE  30
      endif                                                                     MTRACE  31
      c18 = 'macro traceback = '                                                MTRACE  32
c----     call  MCKAA( 116 )                                                    MTRACE  33
      if ( MIAX + 116 .gt. mStk0 )     then                                     MTRACE  34
          MIAX = IADIMV                                                         MTRACE  35
      endif                                                                     MTRACE  36
      ii = mErr0( 1 )                                                           MTRACE  37
100   jbuf  = MIAX                                                              MTRACE  38
200   continue                                                                  MTRACE  39
cd     write(6,'('' mTrace --- mStk=''i6''  mP=''i6''  mErTrc=''i2,             MTRACE  40
cd    1  ''  jbuf=''i6''  mP=''i6)')  mStk, mP, mErTrc, jbuf, mP                MTRACE  41
cd      call  dumpit( 20h          ia(..mStk), ia(mStk0+1),                     MTRACE  42
cd    1                                               -(mStk-mStk0))            MTRACE  43
c                                                                               MTRACE  44
c---- add macro name                                                            MTRACE  45
c                                                                               MTRACE  46
      if ( mP .ne. 0 )     then                                                 MTRACE  47
           call  a4a1( ia(mP), ia(jbuf+1), 4 )                                  MTRACE  48
      else                                                                      MTRACE  49
           call  a4a1( kinput , ia(jbuf+1), 4 )                                 MTRACE  50
      endif                                                                     MTRACE  51
      do  210  j = jbuf+1 , jbuf+16                                             MTRACE  52
          if ( ia(j) .eq. KCSP )    goto  215                                   MTRACE  53
210   continue                                                                  MTRACE  54
      j    = jbuf + 17                                                          MTRACE  55
215   jbuf = j - 1                                                              MTRACE  56
      ia(jbuf+1) = KCSP                                                         MTRACE  57
      ia(jbuf+2) = KCCOL                                                        MTRACE  58
      ia(jbuf+3) = KCSP                                                         MTRACE  59
      jbuf = jbuf + 3                                                           MTRACE  60
c                                                                               MTRACE  61
c---- add line no                                                               MTRACE  62
c                                                                               MTRACE  63
      write( c8, '(i8)' )    KRDNUM                                             MTRACE  64
       call  a4a1( ic8, ia(jbuf+1), 2 )                                         MTRACE  65
      do  330  j = jbuf+1 , jbuf+8                                              MTRACE  66
          if ( ia(j) .ne. KCSP )    goto  335                                   MTRACE  67
330   continue                                                                  MTRACE  68
      j = jbuf+1                                                                MTRACE  69
335   i2 = jbuf + 8                                                             MTRACE  70
      do  340  i = j , i2                                                       MTRACE  71
          jbuf = jbuf + 1                                                       MTRACE  72
          ia(jbuf) = ia(i)                                                      MTRACE  73
340   continue                                                                  MTRACE  74
      ia(jbuf+1) = KCPERD                                                       MTRACE  75
      jbuf = jbuf + 1                                                           MTRACE  76
c                                                                               MTRACE  77
c---- add column no                                                             MTRACE  78
c                                                                               MTRACE  79
      write( c8, '(i8)' )    KARDX - KARDI1                                     MTRACE  80
       call  a4a1( ic8, ia(jbuf+1), 2 )                                         MTRACE  81
      do  430  j = jbuf+1 , jbuf+8                                              MTRACE  82
          if ( ia(j) .ne. KCSP )    goto  435                                   MTRACE  83
430   continue                                                                  MTRACE  84
      j  = jbuf+1                                                               MTRACE  85
435   i2 = jbuf + 8                                                             MTRACE  86
      do  440  i = j , i2                                                       MTRACE  87
          jbuf = jbuf + 1                                                       MTRACE  88
          ia(jbuf) = ia(i)                                                      MTRACE  89
440   continue                                                                  MTRACE  90
       call  a4a1( karrow, ia(jbuf+1), 2 )                                      MTRACE  91
      jbuf = jbuf + 8                                                           MTRACE  92
cd     write(6,'('' mTrace --- ia(..jbuf)=''100a1)')(ia(i),i=MIAX+1,jbuf)       MTRACE  93
c                                                                               MTRACE  94
c---- if detailed trace print line                                              MTRACE  95
c                                                                               MTRACE  96
      if ( mErTrc .ne. 0 )     then                                             MTRACE  97
          LEVEL = -iabs( LEVEL )                                                MTRACE  98
          jbuf = max( MIAX, jbuf-6 )                                            MTRACE  99
           call  filln( KCSP, ia(jbuf+1), 3 )                                   MTRACE 100
           call  a1a4( ia(MIAX+1), ia(jbuf+4), (jbuf-MIAX+3)/4 )                MTRACE 101
          IUND = 1                                                              MTRACE 102
           call  LEEDER( ia(jbuf+4), (jbuf-MIAX+3)/4 )                          MTRACE 103
          jbuf = MIAX                                                           MTRACE 104
      endif                                                                     MTRACE 105
c                                                                               MTRACE 106
c---- pop the stack                                                             MTRACE 107
c                                                                               MTRACE 108
      if ( mErr0( 2 ) .ne. 0 )     then                                         MTRACE 109
          if ( jbuf .lt. MIAX + 90 )     goto  200                              MTRACE 110
          if ( mErTrc .eq. 0 )     then                                         MTRACE 111
              write( IOUTPT, '(1x,a18,113a1)' )  c18                            MTRACE 112
     1           , (ia(j), j=MIAX+1,jbuf-8)                                     MTRACE 113
              c18 = '                  '                                        MTRACE 114
              goto  100                                                         MTRACE 115
          endif                                                                 MTRACE 116
      endif                                                                     MTRACE 117
          if ( mErTrc .eq. 0 )     then                                         MTRACE 118
              write( IOUTPT, '(1x,a18,113a1)' )  c18                            MTRACE 119
     1           , (ia(j), j=MIAX+1,jbuf-8)                                     MTRACE 120
              c18 = '                  '                                        MTRACE 121
          endif                                                                 MTRACE 122
c                                                                               MTRACE 123
c---- if clobbered memory then abort                                            MTRACE 124
c                                                                               MTRACE 125
      if ( MIAX .eq. IADIMV )     then                                          MTRACE 126
          goto  80118                                                           MTRACE 127
      endif                                                                     MTRACE 128
c                                                                               MTRACE 129
c---- restore                                                                   MTRACE 130
c                                                                               MTRACE 131
      ii = mErr0( 3 )                                                           MTRACE 132
C$    write(6,'('' mTrace <--'')')                                              MTRACE 133
      return                                                                    MTRACE 134
80118 write ( IOUTPT, 80001 )  MRSRVE                                           MTRACE 135
80001 format( ' *********** FATAL ERROR ***********',/,1x,75(1h*) /             MTRACE 136
     1 ' Need more memory for storing macro definitions.', /                    MTRACE 137
     2 ' Use "##reserve TEXT nnnnnn" command to get more memory.', /            MTRACE 138
     3 ' Current value of nnnnnn is :', i6 )                                    MTRACE 139
       call  abt                                                                MTRACE 140
      end                                                                       MTRACE 141
      subroutine  mTrack ( icode, Kto )                                         MTRACK   2
c                                                                               MTRACK   3
c--- copy previous text to track buffer, and/or write out track buffer          MTRACK   4
c---    icode =0 add to buffer                                                  MTRACK   5
c---          =1 add to buffer and write                                        MTRACK   6
c---          =2 write                                                          MTRACK   7
c---          =3 add <KRDNUM> to buffer                                         MTRACK   8
c                                                                               MTRACK   9
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
c                                                                               MTRACK  14
      character*8      c8                                                       MTRACK  15
        integer            ic8(2)                                               MTRACK  16
          equivalence (c8, ic8)                                                 MTRACK  17
c****************************************************************               MTRACK  18
c                                                                               MTRACK  19
      n = max( 0, Kto - mTrKRD )                                                MTRACK  20
      if ( icode .eq. 3 )     n = 8                                             MTRACK  21
      if ( mTrac0 .ne. 0 )     then                                             MTRACK  30
           return                                                               MTRACK  31
      endif                                                                     MTRACK  32
      if ( ( icode .eq. 0 ) .or. ( icode .eq. 1 ) )     then                    MTRACK  33
          if ( ( mTrbuI + n .gt. 256 ) .and.                                    MTRACK  34
     1         ( mTrbuf(8) .eq. KCSP  ) )     then                              MTRACK  35
              if ( (mTracF .eq. 2) .or. (mTracF .eq. 3) )                       MTRACK  36
     1            write( 22    , '(1x,100a1)' ) (mTrbuf(i), i=1,mTrbuI)         MTRACK  37
              if ( ( mXpdon .ne. 0 ) .and.                                      MTRACK  38
     1             ((mTracF .eq. 1) .or. (mTracF .eq. 3)) )                     MTRACK  39
     2            write( IOUTPT, '(6x,100a1)' ) (mTrbuf(i), i=1,mTrbuI)         MTRACK  40
              mTrbuI = 8                                                        MTRACK  41
          endif                                                                 MTRACK  42
          if ( mTrKRD .gt. 0 )     then                                         MTRACK  43
               call  moven( KARD(mTrKRD), mTrbuf(mTrbuI+1), n )                 MTRACK  44
              mTrbuI = mTrbuI + n                                               MTRACK  45
          endif                                                                 MTRACK  46
      endif                                                                     MTRACK  47
      if ( ( icode .eq. 1 ) .or. ( icode .eq. 2 ) )     then                    MTRACK  48
c-------- dont write if we have only <KRDNUM> followed by spaces                MTRACK  49
          if ( (mTrbuI .gt. 8) .and. (mTrbuf(8) .eq. KCSP) )     then           MTRACK  50
              if ( (mTracF .eq. 2) .or. (mTracF .eq. 3) )                       MTRACK  51
     1            write( 22    , '(1x,100a1)' ) (mTrbuf(i), i=1,mTrbuI)         MTRACK  52
              if ( ( mXpdon .ne. 0 ) .and.                                      MTRACK  53
     1             ((mTracF .eq. 1) .or. (mTracF .eq. 3)) )                     MTRACK  54
     2            write( IOUTPT, '(6x,100a1)' ) (mTrbuf(i), i=1,mTrbuI)         MTRACK  55
          endif                                                                 MTRACK  56
          mTrbuI = 0                                                            MTRACK  57
      endif                                                                     MTRACK  58
      if ( icode .eq. 3 )     then                                              MTRACK  59
          write( c8, '(1h(,i4,3h ) )' )  KRDNUM                                 IcRink   1
           call  a4a1( ic8, mTrbuf(1), 2 )                                      MTRACK  61
          mTrbuI = 8                                                            MTRACK  62
          mTrKRD = 99999                                                        MTRACK  63
      endif                                                                     MTRACK  64
      return                                                                    MTRACK  65
      end                                                                       MTRACK  66
      subroutine  mTxtMv                                                        MTXTMV   2
c                                                                               MTXTMV   3
c--- move to KARD the new macro text, expand argname values                     MTXTMV   4
c                                                                               MTXTMV   5
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
c****************************************************************               MTXTMV  10
      kx = KARDI1                                                               MTXTMV  11
      i  = mTxtP                                                                MTXTMV  12
100   continue                                                                  MTXTMV  13
cd     write(6,'('' mTxtMov --- i=''i6''  ia(i)=''z8)') i, ia(i)                MTXTMV  14
      if     ( ia(i) .eq. -999 )     then                                       MTXTMV  15
          goto  200                                                             MTXTMV  16
      elseif ( ia(i) .eq. 0 )        then                                       MTXTMV  17
          i = i + 1                                                             MTXTMV  18
          goto  200                                                             MTXTMV  19
      elseif ( ia(i) .lt. 0 )        then                                       MTXTMV  20
          ix = -ia(i)                                                           MTXTMV  21
          i = i + 1                                                             MTXTMV  22
      else                                                                      MTXTMV  23
          ix = i                                                                MTXTMV  24
          i  = i + (ia(i)+3)/4 + 1                                              MTXTMV  25
      endif                                                                     MTXTMV  26
cd      call  dumpit(20hmTxtMov ---   ia(ix),ia(ix),-((ia(ix)+7)/4))            MTXTMV  27
      if ( kx + ia(ix) .gt. KARDIM )     then                                   MTXTMV  28
          goto  80118                                                           MTXTMV  29
      endif                                                                     MTXTMV  30
       call  A4A1( ia(ix+1), KARD(kx), (ia(ix)+3)/4 )                           MTXTMV  31
      kx = kx + ia(ix)                                                          MTXTMV  32
      goto  100                                                                 MTXTMV  33
200   mTxtP  = i                                                                MTXTMV  34
      KARDI2 = kx - 1                                                           MTXTMV  35
      return                                                                    MTXTMV  36
80118  call  MKRDER                                                             MTXTMV  37
      end                                                                       MTXTMV  38
      subroutine  mXpand ( iflag )                                              MXPAND   2
c                                                                               MXPAND   3
c--- expand macro                                                               MXPAND   4
c---        Note : mXpand can convert a symbol into a number, literal           MXPAND   5
c---                          or a list of symbols, numbers, literals           MXPAND   6
c---    iflag =-1 : for '#eval'                                                 MXPAND   7
c---          = 0 : expand using macro name                                     MXPAND   8
c                                                                               MXPAND   9
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
c                                                                               MXPAND  15
      integer  margP(32)                                                        MXPAND  16
c              margP : ptr to each arg val that is on stack                     MXPAND  17
      data     mStkC / 10 /                                                     MXPAND  18
c****************************************************************               MXPAND  19
      if ( macini .eq. 0 )   call  mCKAA( -999 )                                MXPAND  20
c                                                                               MXPAND  28
      mXpdon = 1                                                                MXPAND  29
      mStkX0 = mStk                                                             MXPAND  30
      mKRDS1 = KARDSX                                                           MXPAND  31
      mKRDI1 = KARDI1                                                           MXPAND  32
      mStkX  = mStk                                                             MXPAND  33
c                                                                               MXPAND  34
c---- handle '#eval' -------------------                                        MXPAND  35
c                                                                               MXPAND  36
      if ( iflag .eq. -1 )     then                                             MXPAND  37
          mSytI    = mEvDef                                                     MXPAND  38
          mEvFl1   = mStkX                                                      MXPAND  39
          if ( mStkX+17*3 .gt. mStkL )     then                                 MXPAND  40
              goto  81112                                                       MXPAND  41
          endif                                                                 MXPAND  42
          mStkX = mStkX + 17*3                                                  MXPAND  43
          do  200  ii = mEvFl1 , mStkX                                          MXPAND  44
              ia(ii+1) = 0                                                      MXPAND  45
200       continue                                                              MXPAND  46
       else                                                                     MXPAND  47
          mEvFl1 = 0                                                            MXPAND  48
      endif                                                                     MXPAND  49
c---- handle '#eval' --------End--------                                        MXPAND  50
c                                                                               MXPAND  51
c---- expand using macro name , or '#eval'                                      MXPAND  52
c                                                                               MXPAND  53
       call  mSkpbl( 0 )                                                        MXPAND  54
      narg = IA(mSytI+5)                                                        MXPAND  55
      ibrac = 0                                                                 MXPAND  56
      if ( KARD(KARDX) .eq. KCLBRA )    then                                    MXPAND  57
          ibrac = 1                                                             MXPAND  58
          KARDX = KARDX + 1                                                     MXPAND  59
      else                                                                      MXPAND  60
          if ( narg .gt. 0 )     then                                           MXPAND  61
              iarg = 1                                                          MXPAND  62
              goto  80110                                                       MXPAND  63
          endif                                                                 MXPAND  64
      endif                                                                     MXPAND  65
      if ( narg .gt. 0 )     then                                               MXPAND  66
          do  310  iarg = 1 , narg                                              MXPAND  67
              margP(iarg) = mStkX + 1                                           MXPAND  68
               call  mSkpbl( 0 )                                                MXPAND  69
              if ( KARD(KARDX) .eq. KCRBRA )     then                           MXPAND  70
                  goto  80110                                                   MXPAND  71
              endif                                                             MXPAND  72
               call  mGetAR                                                     MXPAND  73
               call  mSkpbl( 0 )                                                MXPAND  74
              if ( KARD(KARDX) .eq. KCCMMA )  KARDX = KARDX + 1                 MXPAND  75
310       continue                                                              MXPAND  76
c                                                                               MXPAND  77
      endif                                                                     MXPAND  78
       call  mSkpbl( 0 )                                                        MXPAND  79
      if ( KARD(KARDX) .ne. KCRBRA )    then                                    MXPAND  80
          if ( ibrac .ne. 0 )     then                                          MXPAND  81
              goto  80111                                                       MXPAND  82
          endif                                                                 MXPAND  83
       else                                                                     MXPAND  84
          KARDX = KARDX + 1                                                     MXPAND  85
      endif                                                                     MXPAND  86
315   continue                                                                  MXPAND  87
c                                                                               MXPAND  88
cd          call  dumpit(20hmXpand --- margP()  , margP(1),-narg )              MXPAND  89
cd          call  dumpit(20h           mStkX0   , mStkX0  , -1 )                MXPAND  90
cd          call  dumpit(20h        ia(mStkX0+1),ia(mStkX0+1),                  MXPAND  91
cd    1                                            -(mStkX-mStkX0) )            MXPAND  92
c                                                                               MXPAND  93
      mPnew = mSytI                                                             MXPAND  94
c                                                                               MXPAND  95
c---- if '##showdetail' store macro request in buffer ( "AA[11,12]" ==> )       MXPAND  96
c                                                                               MXPAND  97
c                                                                               MXPAND  98
c---- save current mTxtP so that we put it in stack.                            MXPAND  99
c                                                                               MXPAND 100
      mTxtP0 = mTxtP                                                            MXPAND 101
      mShwdI = KARDX - 1                                                        MXPAND 102
c                                                                               MXPAND 103
c---- Handle macro text                                                         MXPAND 104
c                                                                               MXPAND 105
      mTxtP = mSytI  + 6 + 4*narg                                               MXPAND 106
      if ( narg .eq. 0 )     then                                               MXPAND 107
c-------- if no args use the original macro text wo copying to stack            MXPAND 108
          goto  500                                                             MXPAND 109
      else                                                                      MXPAND 110
c-------- have args, so copy macro def text and replace arg.no by arg.text      MXPAND 111
          i     = mTxtP - 1                                                     MXPAND 112
          mTxtP = mStkX + 1                                                     MXPAND 113
400       i = i + 1                                                             MXPAND 114
          l = ia(i)                                                             MXPAND 115
cd         write(6,'('' mXpand -- l=''i6''  mStkX=''i6''  mStkL=''i6)')         MXPAND 116
cd    1                           l, mStkX, mStkL                               MXPAND 117
          mStkX = mStkX + 1                                                     MXPAND 118
          ia(mStkX) = l                                                         MXPAND 119
          if     ( l .eq. -999 )     then                                       MXPAND 120
              goto  500                                                         MXPAND 121
          elseif ( l .eq. 0 )        then                                       MXPAND 122
              goto  400                                                         MXPAND 123
          elseif ( l .lt. 0 )        then                                       MXPAND 124
              ia(mStkX) = -margP(-l)                                            MXPAND 125
          endif                                                                 MXPAND 126
c-------- move macro text to stack                                              MXPAND 127
          l4 = ( l + 3 ) / 4                                                    MXPAND 128
          if ( mStkX+l4 .gt. mStkL )     then                                   MXPAND 129
              goto  81112                                                       MXPAND 130
          endif                                                                 MXPAND 131
          do  420  j = 1 , l4                                                   MXPAND 132
              i  = i + 1                                                        MXPAND 133
              mStkX = mStkX + 1                                                 MXPAND 134
              ia(mStkX) = IA(i)                                                 MXPAND 135
420       continue                                                              MXPAND 136
          goto  400                                                             MXPAND 137
      endif                                                                     MXPAND 138
500   continue                                                                  MXPAND 139
      if ( mStkX + mStkC .gt. mStkL )    then                                   MXPAND 140
          goto  81112                                                           MXPAND 141
      endif                                                                     MXPAND 142
      mStk = mStkX + mStkC                                                      MXPAND 143
      ia(mStk-9) = mStkLv                                                       MXPAND 144
      ia(mStk-8) = mEvFl                                                        MXPAND 145
      ia(mStk-7) = mKRDS1                                                       MXPAND 146
      ia(mStk-6) = KARDX                                                        MXPAND 147
      ia(mStk-5) = mKRDI1                                                       MXPAND 148
      ia(mStk-4) = KARDI2                                                       MXPAND 149
      ia(mStk-3) = KRDNUM                                                       MXPAND 150
      ia(mStk-2) = mTxtP0                                                       MXPAND 151
      ia(mStk-1) = mP                                                           MXPAND 152
      ia(mStk)   = mStkX0                                                       MXPAND 153
      mEcho(mStkLv+1) = IECHO                                                   MXPAND 154
      mStkLv = mStkLv + 1                                                       MXPAND 155
      if ( mStkLv .gt. 32 )     then                                            MXPAND 156
          goto  80130                                                           MXPAND 157
      endif                                                                     MXPAND 158
      if ( mStk .gt. mStkN )     mStkN = mStk                                   MXPAND 159
c                                                                               MXPAND 160
      IECHO   = 0                                                               MXPAND 161
      KARDI1  = KARDI2 + 1                                                      MXPAND 162
      KARDX   = KARDI1                                                          MXPAND 163
      mP      = mPnew                                                           MXPAND 164
      mEvFl   = mEvFl1                                                          MXPAND 165
      KRDNUM  = IA(mP+4)                                                        MXPAND 166
c--------- now route new macro text to KARD(KARDI1) .                           MXPAND 167
       call  mTxtMv                                                             MXPAND 168
c---- if '##showdetail' print substitute text                                   MXPAND 169
      if ( (mShdet .ne. 0) .and. (mP .ne. mEvDef) )     then                    MXPAND 170
          i = max( 1, min( 80, mKRDS1 - mKRDI1 + 12 ) )                         MXPAND 171
C$        write(6,'('' mXpand --- mKRDI1,KARDI2=''i4,i5,                        MXPAND 172
C$   1      ''  mKRDS1=''i4''  i=''i4)') mKRDI1, KARDI2, mKRDS1, i              MXPAND 173
          if ( mStkLv .gt. 1 )     i = 1                                        MXPAND 174
          write(IOUTPT,'(1x,130a1)')  (KCSP, ii=1,i), KCQUO                     MXPAND 175
     1      , (KARD(ii), ii=mKRDS1,mShwdI), KCQUO,' ','=','=','>',' '           MXPAND 176
     2      , KCQUO, (KARD(ii), ii=KARDI1,KARDI2), KCQUO                        MXPAND 177
      endif                                                                     MXPAND 178
900   continue                                                                  MXPAND 179
c                                                                               MXPAND 180
c                                                                               MXPAND 190
      return                                                                    MXPAND 191
c                                                                               MXPAND 192
80110  call  mERR( 110 )                                                        MXPAND 193
      if ( KARD(KARDX) .eq. KCRBRA )     KARDX = KARDX + 1                      MXPAND 194
      goto  900                                                                 MXPAND 195
80111  call  mERR( 111 )                                                        MXPAND 196
      goto  315                                                                 MXPAND 197
81112  call  mERR( 112 )                                                        MXPAND 198
      write ( IOUTPT, 80003 )  mStkRS                                           MXPAND 199
80003 format(/ 1x,75(1h*) /                                                     MXPAND 200
     1 ' Need more memory for evaluating nested macros.', /                     MXPAND 201
     2 ' Use "##reserve STACK nnnnnn" command to get more memory.', /           MXPAND 202
     3 ' Current value of nnnnnn is :', i6 )                                    MXPAND 203
       call  abt                                                                MXPAND 204
80130  call  mERR( 130 )                                                        MXPAND 205
       call  abt                                                                MXPAND 206
      end                                                                       MXPAND 207
      subroutine  mXpeva                                                        MXPEVA   2
c                                                                               MXPEVA   3
c--- do the '#eval' macro                                                       MXPEVA   4
c        return new text in KARD(KARDI1), update KARDX, KARDI2                  MXPEVA   5
c                                                                               MXPEVA   6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
c                                                                               MXPEVA  13
      character*20     cformt, cresul                                           MXPEVA  14
        integer                iresul(4)                                        MXPEVA  15
          equivalence         (iresul(1), cresul)                               MXPEVA  16
      real     result                                                           MXPEVA  17
      logical lresul                                                            MXPEVA  18
c                                                                               MXPEVA  19
      integer  moptb(22)                                                        MXPEVA  20
        data   moptb / 4h+   ,4h-   ,4h*   ,4h/   ,4hEQ  ,4hNE  ,4hGT  ,        MXPEVA  21
     1                 4hGE  ,4hLT  ,4hLE  ,4hOF  ,4h//  ,4h/// ,4hEQS ,        MXPEVA  22
     2                 4hNES ,4hAND ,4hOR  ,4hNOT ,4h**  ,4hMIN ,4hMAX ,        MXPEVA  23
     3                 4hMOD /                                                  MXPEVA  24
      integer  mfntb(11)                                                        MXPEVA  25
        data   mfntb / 4hSIN ,4hCOS ,4hTAN ,4hSQRT,4hABS ,4hASIN,4hACOS,        MXPEVA  26
     1                 4hATAN,4hINT ,4hLOG ,4hLOG1 /                            MXPEVA  27
      equivalence  (KC0 , HOLL(1))                                              MXPEVA  28
c****************************************************************               MXPEVA  29
      mEvFl  = ia(mStk)                                                         MXPEVA  30
C$    write(6,'('' mXpeval -->  mEvFl=mopr1=''i6)' )  mEvFl                     MXPEVA  31
      mopr1  =    mEvFl                                                         MXPEVA  32
      miop   = ia(mEvFl + (2-1)*17 + 1 + 1)                                     MXPEVA  33
      mopr2  =    mEvFl + (3-1)*17                                              MXPEVA  34
      result = 0                                                                MXPEVA  35
C$     call dumpit( 20h       - ia(mopr1+1), ia(mopr1+1), -3*17 )               MXPEVA  36
       call  UPPER4( miop, miop, 1 )                                            MXPEVA  37
      do  200  iop = 1 , 22                                                     MXPEVA  38
          if ( miop .eq. moptb(iop) )   goto  210                               MXPEVA  39
200   continue                                                                  MXPEVA  40
      goto  80119                                                               MXPEVA  41
210   if ( (iop .le. 10) .or. (iop .ge. 19) )     then                          MXPEVA  42
          dum = atof( ia(mopr1+2), ia(mopr1+1), 1, opr1 )                       MXPEVA  43
      endif                                                                     MXPEVA  44
      if ( (iop .le. 11) .or. (iop .ge. 19) )     then                          MXPEVA  45
          dum = atof( ia(mopr2+2), ia(mopr2+1), 1, opr2 )                       MXPEVA  46
      endif                                                                     MXPEVA  47
      goto ( 301, 302, 303, 304, 305, 306, 307, 308, 309, 310,                  MXPEVA  48
     1       311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321              MXPEVA  49
     2     , 322 ), iop                                                         MXPEVA  50
301       result = opr1 + opr2                                                  MXPEVA  51
                                   goto  520                                    MXPEVA  52
302       result = opr1 - opr2                                                  MXPEVA  53
                                   goto  520                                    MXPEVA  54
303       result = opr1 * opr2                                                  MXPEVA  55
                                   goto  520                                    MXPEVA  56
304       if ( opr2 .ne. 0. )    then                                           MXPEVA  57
              result = opr1 / opr2                                              MXPEVA  58
          else                                                                  MXPEVA  59
              result = 0.                                                       MXPEVA  60
c------------------------- 138 #eval : divisor is zero                          MXPEVA  61
               call  merr( 138 )                                                MXPEVA  62
          endif                                                                 MXPEVA  63
                                   goto  520                                    MXPEVA  64
305       lresul  = opr1 .eq. opr2                                              MXPEVA  65
                                   goto  510                                    MXPEVA  66
306       lresul  = opr1 .ne. opr2                                              MXPEVA  67
                                   goto  510                                    MXPEVA  68
307       lresul  = opr1 .gt. opr2                                              MXPEVA  69
                                   goto  510                                    MXPEVA  70
308       lresul  = opr1 .ge. opr2                                              MXPEVA  71
                                   goto  510                                    MXPEVA  72
309       lresul  = opr1 .lt. opr2                                              MXPEVA  73
                                   goto  510                                    MXPEVA  74
310       lresul  = opr1 .le. opr2                                              MXPEVA  75
                                   goto  510                                    MXPEVA  76
c---------library functions                                                     MXPEVA  77
c                                                                               MXPEVA  78
311       jj = ia(mopr1+2)                                                      MXPEVA  79
           call  UPPER4( jj, jj, 1 )                                            MXPEVA  80
          do  390  i = 1 , 11                                                   MXPEVA  81
              if ( jj .eq. mfntb(i) )    goto  400                              MXPEVA  82
390       continue                                                              MXPEVA  83
          goto  80122                                                           MXPEVA  84
400       goto ( 401, 402, 403, 404, 405, 406, 407, 408, 409, 410               MXPEVA  85
     1         , 411 ) , i                                                      MXPEVA  86
401           result = sin( opr2 * 0.01745329238 )                              MXPEVA  87
                                           goto  520                            MXPEVA  88
402           result = cos( opr2 * 0.01745329238 )                              MXPEVA  89
                                           goto  520                            MXPEVA  90
403           result = tan( opr2 * 0.01745329238 )                              MXPEVA  91
                                           goto  520                            MXPEVA  92
404           if ( opr2 .ge. 0 )     then                                       MXPEVA  93
                  result = sqrt( opr2 )                                         MXPEVA  94
              else                                                              MXPEVA  95
                  result = 1.                                                   MXPEVA  96
                  goto  80121                                                   MXPEVA  97
              endif                                                             MXPEVA  98
                                           goto  520                            MXPEVA  99
405           result = abs( opr2 )                                              MXPEVA 100
                                           goto  520                            MXPEVA 101
406           if ( opr2 .gt. 1.0 )    then                                      MXPEVA 102
c----------------------------- 139 #eval : asin or acos argument > 1            MXPEVA 103
                   call  merr( 139 )                                            MXPEVA 104
                  write( IOUTPT, 80006 )  opr2                                  MXPEVA 105
                  opr2 = 1.                                                     MXPEVA 106
              endif                                                             MXPEVA 107
              result = asin( opr2 ) / 0.01745329238                             MXPEVA 108
                                           goto  520                            MXPEVA 109
407           if ( opr2 .gt. 1.0 )    then                                      MXPEVA 110
c----------------------------- 139 #eval : asin or acos argument > 1            MXPEVA 111
                   call  merr( 139 )                                            MXPEVA 112
                  write( IOUTPT, 80006 )  opr2                                  MXPEVA 113
                  opr2 = 1.                                                     MXPEVA 114
              endif                                                             MXPEVA 115
              result = acos( opr2 ) / 0.01745329238                             MXPEVA 116
                                           goto  520                            MXPEVA 117
408           result = atan( opr2 ) / 0.01745329238                             MXPEVA 118
                                           goto  520                            MXPEVA 119
409           result = int( opr2 )                                              MXPEVA 120
                                           goto  520                            MXPEVA 121
410           if ( opr2 .lt. 0 )    then                                        MXPEVA 122
                    call  merr( 136 )                                           MXPEVA 123
                   write( IOUTPT, 80006 )  opr2                                 MXPEVA 124
                   opr2 = abs( opr2 )                                           MXPEVA 125
              endif                                                             MXPEVA 126
              result = alog( opr2 )                                             MXPEVA 127
                                           goto  520                            MXPEVA 128
411           if ( opr2 .lt. 0 )    then                                        MXPEVA 129
                    call  merr( 136 )                                           MXPEVA 130
                   write( IOUTPT, 80006 )  opr2                                 MXPEVA 131
                   opr2 = abs( opr2 )                                           MXPEVA 132
              endif                                                             MXPEVA 133
              result = alog10( opr2 )                                           MXPEVA 134
                                           goto  520                            MXPEVA 135
c---------library functions----------End----------                              MXPEVA 136
c                                                                               MXPEVA 137
c---- handle the output of logical results                                      MXPEVA 138
c                                                                               MXPEVA 139
510       result = 0.                                                           MXPEVA 140
          if ( lresul )      result = 1.                                        MXPEVA 141
c                                                                               MXPEVA 142
c---- handle the output of numeric results                                      MXPEVA 143
c                                                                               MXPEVA 144
520       continue                                                              MXPEVA 145
c                                                                               MXPEVA 146
c-------- convert result into a1 form in KARD(KARDI1)                           MXPEVA 147
c                                                                               MXPEVA 148
          if ( int( result ) .eq. result )   then                               MXPEVA 149
                  cformt = '(i15,1x)'                                           MXPEVA 150
                  write ( cresul, cformt )   int( result )                      MXPEVA 151
           else                                                                 MXPEVA 152
              if (     abs( result ) .lt. 0.01 )   then                         MXPEVA 153
                  cformt = '(e15.8,1x)'                                         MXPEVA 154
              elseif ( abs( result ) .lt. 9999. )   then                        MXPEVA 155
                  cformt = '(f15.9,1x)'                                         MXPEVA 156
              elseif ( abs( result ) .lt. 99999999. )   then                    MXPEVA 157
                  cformt = '(f15.5,1x)'                                         MXPEVA 158
               else                                                             MXPEVA 159
                  cformt = '(e15.8,1x)'                                         MXPEVA 160
              endif                                                             MXPEVA 161
              write ( cresul, cformt )   result                                 MXPEVA 162
          endif                                                                 MXPEVA 163
          do  530  i = 1 , 16                                                   MXPEVA 164
              if ( cresul(i:i) .ne. ' ' )    goto  540                          MXPEVA 165
530       continue                                                              MXPEVA 166
          i = 17                                                                MXPEVA 167
540       k = 1                                                                 MXPEVA 168
          do  550  j = i , 16                                                   MXPEVA 169
              if ( cresul(j:j) .eq. ' ' )   goto  560                           MXPEVA 170
                  cresul(k:k) = cresul(j:j)                                     MXPEVA 171
                  k = k + 1                                                     MXPEVA 172
550       continue                                                              MXPEVA 173
560       cresul(k:k) = ' '                                                     MXPEVA 174
          KARDI2 = KARDI1 + k - 1                                               MXPEVA 175
          if ( KARDI2 + 3 .gt. KARDIM )                                         MXPEVA 176
     1         call  MKRDER                                                     MXPEVA 177
           call  a4a1( iresul, KARD(KARDI1), 4 )                                MXPEVA 178
          goto  900                                                             MXPEVA 179
c                                                                               MXPEVA 180
c-------- '//'  (iop=12) : concatanate                                          MXPEVA 181
c-------- '///' (iop=13) : add blank then concatanate                           MXPEVA 182
c                                                                               MXPEVA 183
312       continue                                                              MXPEVA 184
313       if ( KARDI1 + ia(mopr1+1) + ia(mopr2+1) + 3                           MXPEVA 185
     1                    .gt. KARDIM )                                         MXPEVA 186
     1         call  MKRDER                                                     MXPEVA 187
          KARD(KARDI1)   = KCDQUO                                               MXPEVA 188
           call  a4a1( ia(mopr1+2), KARD(KARDI1+1), (ia(mopr1+1)+3)/4)          MXPEVA 189
          KARDI2 = KARDI1 + ia(mopr1+1) + 1                                     MXPEVA 190
          if ( iop .eq. 13 )     then                                           MXPEVA 191
              KARD(KARDI2) = KCSP                                               MXPEVA 192
              KARDI2 = KARDI2 + 1                                               MXPEVA 193
          endif                                                                 MXPEVA 194
           call  a4a1( ia(mopr2+2), KARD(KARDI2), (ia(mopr2+1)+3)/4 )           MXPEVA 195
          KARDI2 = KARDI2 + ia(mopr2+1) + 1                                     MXPEVA 196
          KARD(KARDI2-1) = KCDQUO                                               MXPEVA 197
          KARD(KARDI2)   = KCSP                                                 MXPEVA 198
          goto  900                                                             MXPEVA 199
c                                                                               MXPEVA 200
c-------- 'EQS' (iop=14) , 'NES' (iop=15) ----------                            MXPEVA 201
c                                                                               MXPEVA 202
314       continue                                                              MXPEVA 203
315       continue                                                              MXPEVA 204
          lresul = ia(mopr1+1) .eq. ia(mopr2+1)                                 MXPEVA 205
          if ( lresul )     then                                                MXPEVA 206
              l4 = ( ia(mopr1+1) + 3 ) / 4                                      MXPEVA 207
              do  31514  i = 1 , l4                                             MXPEVA 208
                  if ( ia(mopr1+1+i).ne.ia(mopr2+1+i) ) lresul =.false.         MXPEVA 209
31514         continue                                                          MXPEVA 210
          endif                                                                 MXPEVA 211
          if ( iop .eq. 15 )     lresul = .not. lresul                          MXPEVA 212
          goto  510                                                             MXPEVA 213
c                                                                               MXPEVA 214
c-------- 'AND' (iop=16) , 'OR' (iop=17) , 'NOT' (iop=18) ----------            MXPEVA 215
c                                                                               MXPEVA 216
316       lresul = .not. (                                                      MXPEVA 217
     1      ((ia(mopr1+2).eq.KCSP) .or. (ia(mopr1+2).eq.KC0) .or.               MXPEVA 218
     2       (ia(mopr1+2).eq.KCTAB))  .or.                                      MXPEVA 219
     3      ((ia(mopr2+2).eq.KCSP) .or. (ia(mopr2+2).eq.KC0) .or.               MXPEVA 220
     4       (ia(mopr2+2).eq.KCTAB)) )                                          MXPEVA 221
          goto  510                                                             MXPEVA 222
317       lresul = .not. (                                                      MXPEVA 223
     1      ((ia(mopr1+2).eq.KCSP) .or. (ia(mopr1+2).eq.KC0) .or.               MXPEVA 224
     2       (ia(mopr1+2).eq.KCTAB))  .and.                                     MXPEVA 225
     3      ((ia(mopr2+2).eq.KCSP) .or. (ia(mopr2+2).eq.KC0) .or.               MXPEVA 226
     4       (ia(mopr2+2).eq.KCTAB)) )                                          MXPEVA 227
          goto  510                                                             MXPEVA 228
318       lresul = ((ia(mopr2+2).eq.KCSP) .or. (ia(mopr2+2).eq.KC0))            MXPEVA 229
          goto  510                                                             MXPEVA 230
319   if ( int( opr2 ) .eq. opr2 )    then                                      MXPEVA 231
          result = opr1 ** int( opr2 )                                          MXPEVA 232
      else                                                                      MXPEVA 233
          if ( opr1 .lt. 0. )    then                                           MXPEVA 234
               call  merr( 137 )                                                MXPEVA 235
              write( IOUTPT, 80006 )  opr1                                      MXPEVA 236
              opr1 = abs( opr1 )                                                MXPEVA 237
          endif                                                                 MXPEVA 238
          result = opr1 ** opr2                                                 MXPEVA 239
      endif                                                                     MXPEVA 240
                                   goto  520                                    MXPEVA 241
320   result = amin1( opr1, opr2 )                                              MXPEVA 242
                                   goto  520                                    MXPEVA 243
321   result = amax1( opr1, opr2 )                                              MXPEVA 244
                                   goto  520                                    MXPEVA 245
322   result = amod( opr1, opr2 )                                               MXPEVA 246
                                   goto  520                                    MXPEVA 247
c                                                                               MXPEVA 248
900   KARDX  = KARDI1                                                           MXPEVA 249
c---- if '##showdetail' print substitute text                                   MXPEVA 250
      if ( mShdet .ne. 0 )     then                                             MXPEVA 251
          i1 = ia(mStk-7)                                                       MXPEVA 252
          i2 = ia(mStk-6) - 1                                                   MXPEVA 253
          write( IOUTPT, '(1x,130a1)' )  KCQUO, (KARD(ii), ii=i1,i2)            MXPEVA 254
     1      , KCQUO, ' ','=','=','>',' '                                        MXPEVA 255
     2      , KCQUO, (KARD(ii), ii=KARDI1,KARDI2), KCQUO                        MXPEVA 256
      endif                                                                     MXPEVA 257
C$    write(6,'('' mXpeval <--'')' )                                            MXPEVA 258
      return                                                                    MXPEVA 259
c                                                                               MXPEVA 260
80119  call  mERR( 119 )                                                        MXPEVA 261
      write( IOUTPT, 80005 )  miop                                              MXPEVA 262
80005 format( ' ********* operator = ',a4,' **********' )                       MXPEVA 263
      goto  520                                                                 MXPEVA 264
80121  call  mERR( 121 )                                                        MXPEVA 265
      write( IOUTPT, 80006 )  opr2                                              MXPEVA 266
80006 format( ' ********* value of argument=',e15.8,' *********' )              MXPEVA 267
      goto  520                                                                 MXPEVA 268
80122  call  mERR( 122 )                                                        MXPEVA 269
      write( IOUTPT, 80007 )  ia(mopr1+1)                                       MXPEVA 270
80007 format( ' ********* name =',a4,' *********' )                             MXPEVA 271
      goto  520                                                                 MXPEVA 272
      end                                                                       MXPEVA 273
      SUBROUTINE LBLCK                                                          LBLCK    2
C                                                                               LBLCK    3
C              LBLCK CHECKS FOR A REQUIRED LABEL                                LBLCK    4
C                                                                               LBLCK    5
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
C                                                                               LBLCK    8
      IF (LABEL(1).EQ.HOLL(14)) CALL MSG (19)                                   LBLCK    9
      RETURN                                                                    LBLCK   10
      END                                                                       LBLCK   11
      subroutine LEEDER ( msgTxt, msgL )                                        LEEDER   2
c                                                                               LEEDER   3
c--- build a leader array with optional underline and print it                  LEEDER   4
c                                                                               LEEDER   5
      USE ERR_MOD                                                               -048   163
      integer  msgTxt(11), msgL                                                 LEEDER   6
c                                                                               LEEDER   7
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /IUNDER/  IUND, LEVEL, IUNDER(82)                                  /IUNDER/ 2
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      common /MAC/ macini  , mDefP   , mEcho(33), mEchoF , mErTrc, mEvFl        /MAC/    2
     1           , mEvDef  , mEvDel  , mIAX    , mIAXma  , mIfany               /MAC/    3
     2 , mIfeli  , mIfels  , mIfend  , mIfskp  , mifstk(32), mIfstN             /MAC/    4
     3 , mIfx    , mKARD2  , mKARDX  , mP      , mppCmd  , mRSRVE               /MAC/    5
     4 , mSetFl  , mSetNm(4),mShDet  , mStk    , mStk0   , mStkC                /MAC/    6
     5 , mStkL   , mStkLv  , mStkN   , mStkRS  , mStkSv  , mStkX                /MAC/    7
     6 , mSytI   , mSytN   , mSytP0  , mSytPM  , mTracF  , mTrac0               /MAC/    8
     7 , mTrbuf(256),mTrbuI, mTrKRD                                             /MAC/    9
     8 , mTxtP   , mXpdon  , mzzPAR(4), NOslnt, mKRDS1, mTxtP0                  /MAC/   10
      COMMON /PREFIX/ PREFIX(3,10)                                              FIX11    3
      DIMENSION ERRPX(3), WARPX(3), CAUPX(3), DEFPX(3), INPPX(3),               /PREFIX/ 3
     1      LIKPX(3), NOTPX(3), FROPX(3), LIBPX(3), UDFPX(3)                    FIX11    4
      EQUIVALENCE (ERRPX(1),PREFIX(1,1)), (WARPX(1),PREFIX(1,2)),               /PREFIX/ 5
     1            (CAUPX(1),PREFIX(1,3)), (DEFPX(1),PREFIX(1,4)),               /PREFIX/ 6
     2            (INPPX(1),PREFIX(1,5)), (LIKPX(1),PREFIX(1,6)),               /PREFIX/ 7
     3            (FROPX(1),PREFIX(1,7)), (NOTPX(1),PREFIX(1,8)),               FIX11    5
     4            (LIBPX(1),PREFIX(1,9)), (UDFPX(1),PREFIX(1,10))               FIX11    6
C                                                                               /PREFIX/ 9
c                                                                               LEEDER  15
      COMMON /PDARGSL/ loc_args                                                 /PDARGL/ 2
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  -042L5b 52
      COMMON /DFT_STR/ numDFT,idftStr(3,1024)                                   -042L5b 19
      integer  LDR(2)                                                           LEEDER  16
        data   LDR / 1H*, 1H- /                                                 LEEDER  17
c****************************************************************               LEEDER  18
C$    write(6,'('' LEEDER -->  LEVEL=''i2''  IUND=''i2''  msgL=''i3,            LEEDER  19
C$   1  ''  msgTxt=''11a4)')  LEVEL, IUND, msgL, (msgTxt(ii), ii=1,msgL)        LEEDER  20
c                                                                               LEEDER  21
c---- for underline : if error or warning, use '*' else use '-'                 LEEDER  22
c                                                                               LEEDER  23
      LDRTYP = 1                                                                LEEDER  24
      if ( iabs( LEVEL ) .gt. 2 )     LDRTYP = 2                                LEEDER  25
      do  100  I = 1 , 82                                                       LEEDER  26
          IUNDER(I) = LDR(LDRTYP)                                               LEEDER  27
100   continue                                                                  LEEDER  28
      i1 = max(  1, KARDSX - KARDI1 + 1 )                                       LEEDER  29
      i2 = min( 80, max( 1, KARDX - KARDI1 ) )                                  LEEDER  30
      if ( ( mStkLv .eq. 0 ) .or. ( LEVEL .lt. 0 ) )     then                   LEEDER  31
c                                                                               LEEDER  32
c-------- not inside a macro, or called from mTrace( )                          LEEDER  33
c                                                                               LEEDER  34
          if ( IUND .ne. 0 )     then                                           LEEDER  35
              do  120  i = i1 , i2                                              LEEDER  36
                  IUNDER(i+1) = HOLL(13)                                        LEEDER  37
120           continue                                                          LEEDER  38
              IUNDER(i1)   = KCSP                                               LEEDER  39
              if ( i2 .le. 80 )     IUNDER(i2+2) = KCSP                         LEEDER  40
          endif                                                                 LEEDER  41
      else                                                                      LEEDER  42
c                                                                               LEEDER  43
c-------- we are in the middle of macro                                         LEEDER  44
c                                                                               LEEDER  45
          do  320  i = i1 , i2                                                  LEEDER  46
              IUNDER(i+1) = KARD(KARDI1+i-1)                                    LEEDER  47
320       continue                                                              LEEDER  48
          IUNDER(i1)   = KCDQUO                                                 LEEDER  49
          if ( i2 .le. 80 )     IUNDER(i2+2) = KCDQUO                           LEEDER  50
      endif                                                                     LEEDER  51
c                                                                               LEEDER  52
c---- now write error msg                                                       LEEDER  53
c                                                                               LEEDER  54
      if ( IECHO .eq. 0 )    then                                               LEEDER  55
          mEchoF = 1                                                            LEEDER  56
           call  ECHO                                                           LEEDER  57
          mEchoF = 0                                                            LEEDER  58
      endif                                                                     LEEDER  59
      mECHO(mStkLv+1) = 1                                                       LEEDER  60
c                                                                               LEEDER  61
      if ( msgL .lt. 1 )     then                                               LEEDER  62
          goto  900                                                             LEEDER  63
      endif                                                                     LEEDER  64
c                                                                               LEEDER  65
      do  410  i = 1 , msgL                                                     LEEDER  66
          i2 = msgL - i + 1                                                     LEEDER  67
          if ( msgTxt(i2) .ne. KCSP )     goto  420                             LEEDER  68
410   continue                                                                  LEEDER  69
      i2 = 0                                                                    LEEDER  70
420   if ( LEVEL .gt. 0 )     then                                              LEEDER  71
          write(IOUTPT, 1) (PREFIX(i,LEVEL), i=1,3),IUNDER(1),IUNDER,           ERR-01   6
     1                        (msgTxt(i), i=1,i2)                               ERR-01   7
1         format( 3a4,a1, 82a1, 9a4,a4 )                                        ERR-01   8
      else                                                                      LEEDER  75
          write(IOUTPT, 2)  IUNDER, (msgTxt(i), i=1,i2)                         LEEDER  76
2         format( 13x, 82a1, 9a4,a4 )                                           ERR-01   9
      endif                                                                     LEEDER  78
      CALL FILLN( IBLANK,IerrLineUnd(1),25)                                     -042L5b 54
      IF(IUND .ne. 0)  CALL A1A4 ( IUNDER(2),IerrLineUnd(1),20 )                -042L5b 55
c                                                                               LEEDER  79
900   continue                                                                  LEEDER  80
C$    write(6,'('' LEEDER <---'')')                                             LEEDER  81
      return                                                                    LEEDER  82
      end                                                                       LEEDER  83
      SUBROUTINE LIKINP(ISYMTB,ISTYPE,JSYM,JOPCDT,JREF,LIBOK,IERRF)             DFTEX3 267
C                                                                               LIKINP   3
C              LIKINP READS THE NEXT CHARACTER STRING TO SEE IF                 LIKINP   4
C              IT IS A LIKE KEYWORD                                             LIKINP   5
C                                                                               LIKINP   6
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      DIMENSION IHOLL2(2), IHOLL3(4), DESC(4), ISYMTB(16,1), ISTYPE(1)          DFTEX3 269
      DATA IHOLL1/4HLIKE/                                                       LIKINP  12
      DATA IHOLL2/4HEXCE, 4HPT  /                                               LIKINP  13
      DATA IHOLL3/4HLIBR, 4HARY-,4HENTR,4HY   /                                 DFTEX3 270
C                                                                               LIKINP  14
      IF(LIBOK .EQ. 0)  GOTO 20                                                 DFTEX3 271
C              GET *LIBRARY*                                                    DFTEX3 272
      CALL GETCS                                                                DFTEX3 273
C              IF NOT *LIBRARY*                                                 DFTEX3 274
      if ( KOMPAR( ISYMU, IHOLL3, 4 ) .eq. 0 )  THEN                            DFTEX3 275
        CALL BKSPAC                                                             DFTEX3 276
        GOTO  20                                                                DFTEX3 277
      ENDIF                                                                     DFTEX3 278
C              GET LIBRARY-ENTRY NAME                                           DFTEX3 279
      CALL GETCS                                                                DFTEX3 280
C              IF NOT ..                                                        DFTEX3 281
      IF (ITERM.NE.0) THEN                                                      DFTEX3 282
        CALL MSG (78)                                                           DFTEX3 283
        IERRF = 1                                                               DFTEX3 284
        CALL BKSPAC                                                             DFTEX3 285
        GO TO 20                                                                DFTEX3 286
      ENDIF                                                                     DFTEX3 287
   10 CALL TBLSCH(ISYMB,LUSIDX,10,NUSLIB,2,IUX)                                 DFTEX3 288
      IF (IUX.EQ.0) CALL TBLSCH(ISYMB,LIBIDX,10,NLIB,2,ILX)                     DFTEX3 289
      IF (IUX.GT.0) THEN                                                        DFTEX3 290
C              Fetch from user library and place entry in linkage table         DFTEX3 291
          IF (ISTYPE(1).EQ.LUSIDX(9,IUX)) THEN                                  DFTEX3 292
              CALL MSG(32)                                                      DFTEX3 293
              JR = JREF                                                         DFTEX3 294
              JO = JOPCDT                                                       DFTEX3 295
              CALL LIBPRC(JR,JO,1,IUX,0,1)                                      DFTEX4 140
              IF(NLIBLK .lt. MLIBLK) THEN                                       DFTEX3 297
                NLIBLK = NLIBLK + 1                                             DFTEX4 141
                IF(ISYMTB((JREF-1)*5+1,1) .eq. 0)  THEN                         DFTEX3 298
                  JSYM = 0                                                      DFTEX3 299
                  ISYMTB(15,JSYM) = 0                                           DFTEX3 300
                  CALL MSG(19)                                                  DFTEX3 301
                ELSE                                                            DFTEX3 302
                  JSYM = ISYMTB((JREF-1)*5+1,1)                                 DFTEX3 303
                  ISYMTB(15,JSYM) = NLIBLK                                      DFTEX3 304
C===   Comment   WRITE (6,6)(ISYMTB(J,JSYM),J=1,8),(LUSIDX(J,IUX),J=1,8)        DFTEX3 305
C===6  Comment    FORMAT(1X'- NOTE -',8A4,' has been linked to',8A4)            DFTEX3 306
                ENDIF                                                           DFTEX3 307
                LIBLNK(10,NLIBLK) = JSYM                                        DFTEX3 309
                LIBLNK( 9,NLIBLK) = 1                                           DFTEX3 310
                CALL MOVEN(LUSIDX(1,IUX),LIBLNK(1,NLIBLK),8)                    DFTEX3 311
              ELSE                                                              DFTEX3 312
                IERRF = 2                                                       DFTEX3 313
                CALL MSG(58)                                                    DFTEX3 314
              ENDIF                                                             DFTEX3 315
              IF(JSYMLX .GT. 0)  CALL LIBREF                                    DFTEX4 142
          ELSE                                                                  DFTEX3 316
              IERRF = 1                                                         DFTEX3 317
              CALL MSG(37)                                                      DFTEX3 318
          END IF                                                                DFTEX3 319
      ELSE IF (ILX.GT.0) THEN                                                   DFTEX3 320
C              Fetch from DOE-2 library and place entry in linkage table        DFTEX3 321
          IF (ISTYPE(1).EQ.LIBIDX(9,ILX)) THEN                                  DFTEX3 322
              CALL MSG(32)                                                      DFTEX3 323
              JR = JREF                                                         DFTEX3 324
              JO = JOPCDT                                                       DFTEX3 325
              CALL LIBPRC(JR,JO,0,ILX,0,1)                                      DFTEX4 143
              IF(NLIBLK .lt. MLIBLK) THEN                                       DFTEX3 327
                NLIBLK = NLIBLK + 1                                             DFTEX4 144
                IF(ISYMTB((JREF-1)*5+1,1) .eq. 0)  THEN                         DFTEX3 328
                  JSYM = 0                                                      DFTEX3 329
                  ISYMTB(15,JSYM) = 0                                           DFTEX3 330
                  CALL MSG(19)                                                  DFTEX3 331
                ELSE                                                            DFTEX3 332
                  JSYM = ISYMTB((JREF-1)*5+1,1)                                 DFTEX3 333
                  ISYMTB(15,JSYM) = NLIBLK                                      DFTEX3 334
C===   Comment   WRITE (6,6)(ISYMTB(J,JSYM),J=1,8),(LIBIDX(J,ILX),J=1,8)        DFTEX3 335
                ENDIF                                                           DFTEX3 336
                LIBLNK(10,NLIBLK) = JSYM                                        DFTEX3 338
                LIBLNK( 9,NLIBLK) = 0                                           DFTEX3 339
                CALL MOVEN(LIBIDX(1,ILX),LIBLNK(1,NLIBLK),8)                    DFTEX3 340
C===   Comment  WRITE(6,7) NLIBLK,MLIBLK,                                       DFTEX3 341
C=== $ Comment             ((LIBLNK(j,k),j=1,10),k=1,nliblk)                    DFTEX3 342
C===7  Comment  format(1x,'Nliblk=',I4,' Mliblk=',I4/                           DFTEX3 343
C=== $ Comment            1500(1X,8A4,I3,I6/))                                  DFTEX3 344
              ELSE                                                              DFTEX3 345
                IERRF = 2                                                       DFTEX3 346
                CALL MSG(58)                                                    DFTEX3 347
              ENDIF                                                             DFTEX3 348
              IF(JSYMLX .GT. 0)  CALL LIBREF                                    DFTEX4 145
          ELSE                                                                  DFTEX3 349
              IERRF = 1                                                         DFTEX3 350
              CALL MSG(37)                                                      DFTEX3 351
          END IF                                                                DFTEX3 352
      ELSE                                                                      DFTEX3 353
          IERRF = 1                                                             DFTEX3 354
          CALL MSG2(29,ISYMB,ILX,ILX,ILX)                                       DFTEX3 355
      END IF                                                                    DFTEX3 356
      JSYMLX = 0                                                                DFTEX3 357
   20 JSYM   = 0                                                                DFTEX3 358
      IERRF = 0                                                                 LIKINP  16
C              GET *LIKE*                                                       LIKINP  17
      CALL GETCS                                                                LIKINP  18
C              IF NOT *LIKE*                                                    LIKINP  19
      if ( ISYMU(1) .ne. IHOLL1 )     goto  110                                 LIKINP  20
C              GET UNAME                                                        LIKINP  21
      CALL GETCS                                                                LIKINP  22
C              IF NOT ..                                                        LIKINP  23
      IF (ITERM.EQ.0) GO TO 30                                                  LIKINP  24
      CALL MSG (78)                                                             LIKINP  25
      IERRF = 1                                                                 LIKINP  26
      GO TO 110                                                                 LIKINP  27
C              LOOK IN SYMBOL TABLE                                             LIKINP  28
   30 CALL SYMSRU(ISYMB,ISYMTB,NSYMTB,16,8,JSYM)                                SYMSIZ  52
C              IF  THERE                                                        LIKINP  30
      IF ((JSYM .GT. 0) .AND. (ISYMTB(10,JSYM) .GT. 0))  GO TO 40               SYMSIZ  53
      CALL MSG (14)                                                             LIKINP  32
      IERRF = 1                                                                 LIKINP  33
      JSYM = 0                                                                  LIKINP  34
      GO TO 105                                                                 LIKINP  35
C              IF RIGHT TYPE                                                    LIKINP  36
   40 IF (ISTYPE(1).EQ.ISYMTB(9,JSYM)) GO TO 100                                SYMSIZ  54
C              GET SYMBOL TYPE DESCRIPTION                                      LIKINP  38
      CALL SYMDSC(ISYMTB(9,JSYM), DESC)                                         SYMSIZ  55
      CALL MSG2 (30, ISYMTB(11,JSYM), DESC, DUM, DUM)                           SYMSIZ  56
      IERRF = 1                                                                 LIKINP  41
      JSYM   = 0                                                                LIKINP  42
      GOTO  105                                                                 LIKINP  43
C              CHECK FOR DATA BEING THERE                                       LIKINP  44
  100 LKDAT = ISDPTR(ISYMTB,ISYMTB,JSYM,JOPCDT)                                 REFTB1  26
      IF (LKDAT .GT. 0) GO TO 102                                               LIKINP  46
      CALL MSG2(88,ISYMTB(1,JSYM),DUM,DUM,DUM)                                  LIKINP  47
      JSYM = 0                                                                  LIKINP  48
      IERRF = 1                                                                 LIKINP  49
      GO TO 105                                                                 LIKINP  50
  102 IF (LABEL(1) .EQ. HOLL(14))  GO TO 105                                    LIKINP  51
      CALL SYMSRU(LABEL(1),ISYMTB,NSYMTB,16,8,JSYM2)                            SYMSIZ  57
      IF (ISYMTB(12,JSYM2) .GT. ISYMTB(12,JSYM))  GO TO 105                     SYMSIZ  58
      CALL MSG(82)                                                              LIKINP  54
      IERRF = 1                                                                 LIKINP  55
      JSYM   = 0                                                                LIKINP  56
  105 CALL GETCS                                                                LIKINP  57
      if ( KOMPAR( ISYMU, IHOLL2, 2 ) .ne. 0 )     return                       LIKINP  58
  110 CALL BKSPAC                                                               LIKINP  59
      RETURN                                                                    LIKINP  60
      END                                                                       LIKINP  61
      SUBROUTINE LISTI                                                          LISTI    2
C                                                                               LISTI    3
C              LISTI PROCESSES THE LIST COMMAND                                 LISTI    4
C                                                                               LISTI    5
C              LISTI  USES   1 WORDS OF COMMWK                                  LISTI    6
C                                                                               LISTI    7
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      INTEGER DESC(4)                                                           COMB06   3
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      EQUIVALENCE (COMMWK(1),I)                                                 LISTI   11
C                                                                               LISTI   12
  100 CALL GETCS                                                                LISTI   13
      IF (ITERM.NE.0) RETURN                                                    LISTI   14
      DO 120 I = 1,15                                                           LISTI   15
          if ( KOMPAR( ISYMU, LISTOP(1,I), 4 ) .ne. 0 )     goto  130           LISTI   16
  120 CONTINUE                                                                  LISTI   17
      CALL MSG (22)                                                             LISTI   18
      GO TO 100                                                                 LISTI   19
  130 IF (I.GT.5) GO TO 170                                                     LISTI   20
      MSGLVL = I                                                                LISTI   21
      IF(MSGLVL .LT. ABTLVL)  CALL MSG(36)                                      LISTI   22
C              IF COMMENTS                                                      LISTI   23
      IF (MSGLVL.EQ.5) MSGLVL = 10                                              LISTI   24
      GO TO 100                                                                 LISTI   25
  170 IF (I.GT.7) GO TO 180                                                     LISTI   26
      NARROW = I - 6                                                            LISTI   27
      GO TO 100                                                                 LISTI   28
  180 IF (I.GT.9) GO TO 200                                                     LISTI   29
      NOECHO = I - 8                                                            LISTI   30
      GO TO 100                                                                 LISTI   31
  200 IF(I .GT. 11)  GOTO 220                                                   LISTI   32
      IDBLSP = I - 10                                                           LISTI   33
      GO TO 100                                                                 LISTI   34
  220 IF(I .GT. 13)  GOTO 240                                                   LISTI   35
      NOLIMS = I - 12                                                           LISTI   36
      GOTO 100                                                                  LISTI   37
  240 IF(I .GT. 14)  GOTO 260                                                   LISTI   38
 1000 FORMAT(//1x,A13,' Library listing:  (Current Line is',I5,')'/             COMB06   4
     $1x,'Entry   Name',30x,'Entry Type',8x,'Line Number'//)                    COMB06   5
 1001 FORMAT(1x,I4,4X,8A4,2X,4A4,2X,I6)                                         COMB06   6
      WRITE (IOUTPT,1000) 'DOE-2 Default',ILINEX                                COMB06   7
      DO j=1,NLIB                                                               COMB06   8
        CALL SYMDSC(LIBIDX(9,j), DESC)                                          COMB06   9
        WRITE (IOUTPT,1001)  j,(LIBIDX(i,j),i=1,8),DESC,LIBIDX(10,j)            COMB06  10
      ENDDO                                                                     COMB06  11
      WRITE (IOUTPT,1000) 'User Custom ',ILINEX                                 COMB06  12
      DO j=1,NUSLIB                                                             COMB06  13
        CALL SYMDSC(LUSIDX(9,j), DESC)                                          COMB06  14
        WRITE (IOUTPT,1001)  j,(LUSIDX(i,j),i=1,8),DESC,LUSIDX(10,j)            COMB06  15
      ENDDO                                                                     COMB06  16
      GOTO 100                                                                  LISTI   40
  260 CONTINUE                                                                  LISTI   41
C              Turn off default naming                                          FIX14   60
      NAMDEF = 0                                                                FIX14   61
      GOTO 100                                                                  LISTI   43
      END                                                                       LISTI   44
      SUBROUTINE LSDFIL (JOP,ISYMTB,KWD,NK,VAL,FILL,LSD,NAME,NAMF,LVALF)        FIX7     8
      USE BDLSTRUCT                                                             -048   165
      USE MSGBOX                                                                -048   166
      USE ERR_MOD                                                               -048   167
C                                                                               LSDFIL   3
C              LSDFIL FILLS THE VALUE ARRAY FOR LIKE, SUBCOMMAND,               LSDFIL   4
C              AND DEFAULT SITUATIONS.                                          LSDFIL   5
C                                                                               LSDFIL   6
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON /DFT_STR/ numDFT,idftStr(3,1024)                                   -042L5b 19
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      DIMENSION KWD(16,1),VAL(1000),ISYMTB(16,1),NAME(8),                       FIX11  129
     1          FILL(1000)                                                      FIX11  130
      LOGICAL WASDEF                                                            LSDFIL  13
C              EXISTING DATA TYPE                                               TYP1     2
      IDTINP = 0                                                                TYP1     3
C                                                                               LSDFIL  17
C              LVAL IS THE LENGTH OF THE VALUE ARRAY                            FIX11  131
      LVAL = 0                                                                  FIX11  132
      IF (JOP.GT.0) LVAL = IOPCDT(16,JOP)                                       FIX11  133
C              INITIALIZE THE DATA TYPE                                         4XAA    44
      IF (LSD.EQ.3) THEN                                                        4XAA    45
          IDTYPE = 1                                                            4XAA    46
      ELSE IF (LSD.EQ.1) THEN                                                   4XAA    47
          IDTYPE = 9                                                            4XAA    48
      ELSE                                                                      4XAA    49
          IDTYPE = 5                                                            FIX6    27
      END IF                                                                    4XAA    51
      IOLDPT = 0                                                                LSDFIL  24
      JK     = 0                                                                LSDFIL  25
      IF(IREPRT(35) .eq. 1) THEN                                                HVAC28  15
        CALL DUMPIT ('ValArr 1 into LSDFIL',VAL,LVALF)                          HVAC28  16
        IF(JOP .ne. 0)  THEN                                                    HVAC28  17
          CALL DUMPIT ('ValArr 2 into LSDFIL',VAL(LVALF+1),LVALF)               HVAC28  18
          CALL DUMPIT ('ValArr 3 into LSDFIL',VAL(2*LVALF+1),LVALF)             HVAC28  19
        ENDIF                                                                   HVAC28  20
      ENDIF                                                                     HVAC28  21
  100 JK     = JK + 1                                                           LSDFIL  26
      JKWcur = 0                                                                ERR-01  10
      IF (JK.GT.NK) THEN                                                        DFTEXP 133
C               Do any required library fetches                                 -044c8   1
C      IF(JSYMLX .GT. 0)  CALL LIBREF                                           -044c8   2
C              If not in interactive mode (PowerDOE) doing defaulting           -034    41
C              and there is a 3X value array and this is not a sub-             -034    42
C              command, call to evaluate all this object's expressions          -034    43
        IF( ((IPDFLG .eq. 0).or.(IPDFLG .eq. 2).or.(LIBflg.ne.0))               -034    44
     $      .and.(JOP.ne.0).and.(LSD.ne.2) )  THEN                              -034    45
          IF( (IOPCDT(11,JOP).gt.0).and.(IOPCDT(11,JOP).le.99).and.             -034    46
     $        ((JOP.ne.9) .and.                                                 -034    47
     $         ((JOP.lt.49) .or. (JOP.gt.54)) .and.                             -034    48
     $         ((JOP.lt.56) .or. (JOP.gt.58))) ) THEN                           -034    49
            call filln(0,exp_struct_vars(  1) ,1033)                            DFTEX2  27
            call filln(0,exp_struct_vars(1036), 388)                            DFTEX2  28
            ifunction  = 3                                                      DFTEXP 139
            iCommand   = JOP                                                    DFTEXP 141
            iReforType = JREFcur                                                DFTEXP 142
            iDataType  = 0                                                      DFTEXP 143
            IF(IREPRT(35) .eq. 1) THEN                                          HVAC28  22
              CALL DUMPIT ('ValArr 1 Before Exps',VAL,LVALF)                    HVAC28  23
              CALL DUMPIT ('ValArr 2 Before Exps',VAL(LVALF+1),LVALF)           HVAC28  24
              CALL DUMPIT ('ValArr 3 Before Exps',VAL(2*LVALF+1),LVALF)         HVAC28  25
            ENDIF                                                               HVAC28  26
            irv= bdlexpglobalfunc()                                             -042L5b 58
            IF( NumErr .NE. 0 )  CALL MSGEXP(2)                                 DFTEXP 147
            IF(IREPRT(35) .eq. 1) THEN                                          HVAC28  27
              CALL DUMPIT ('ValArr 1 After Exps ',VAL,LVALF)                    HVAC28  28
              CALL DUMPIT ('ValArr 2 After Exps ',VAL(LVALF+1),LVALF)           HVAC28  29
              CALL DUMPIT ('ValArr 3 After Exps ',VAL(2*LVALF+1),LVALF)         HVAC28  30
            ENDIF                                                               HVAC28  31
          ENDIF                                                                 DFTEXP 150
        ELSE                                                                    DFTEX3 359
        IF(IREPRT(35) .eq. 1) THEN                                              HVAC28  32
          CALL DUMPIT ('ValArr 1 from LSDFIL',VAL,LVALF)                        HVAC28  33
          IF(JOP .ne. 0)  THEN                                                  HVAC28  34
            CALL DUMPIT ('ValArr 2 from LSDFIL',VAL(LVALF+1),LVALF)             HVAC28  35
            CALL DUMPIT ('ValArr 3 from LSDFIL',VAL(2*LVALF+1),LVALF)           HVAC28  36
          ENDIF                                                                 HVAC28  37
        ENDIF                                                                   HVAC28  38
        ENDIF                                                                   DFTEX3 362
        RETURN                                                                  DFTEXP 152
      ENDIF                                                                     DFTEXP 153
      JKWcur = JK                                                               ERR-01  11
C              GET KWD TYPE                                                     LSDFIL  28
      KTYPE  = KWD(8,JK)                                                        LSDFIL  29
C              GET KWD LENGTH                                                   LSDFIL  30
      NWDS   = KWD(9,JK)                                                        LSDFIL  31
C              GET VALUE PTR                                                    LSDFIL  32
C              IVPTR POINTS TO THE VALUE ARRAY, IFPTR POINTS TO THE             4XAA    52
C              FILL DATA.                                                       4XAA    53
      IPTR0 = KWD(12,JK) - KWD(12,1) + 1                                        4XAA    54
      IFPTR = IPTR0                                                             4XAA    55
      IDTPTR = IPTR0                                                            DEF2     8
      IF (JOP.GT.0) THEN                                                        4XAA    56
          IF (LSD.EQ.3) THEN                                                    4XAA    57
              IVPTR = IPTR0 + 2*LVAL                                            4XAA    58
          ELSE IF (LSD.EQ.1) THEN                                               4XAA    60
              IVPTR = IPTR0 + 2*LVAL                                            4XAA    61
          ELSE                                                                  4XAA    63
              IVPTR = KWD(12,JK) + 2*LVAL                                       4XAA    64
              IDTPTR = KWD(12,JK)                                               DEF2     9
          END IF                                                                4XAA    66
      ELSE                                                                      4XAA    67
          IVPTR = IPTR0                                                         4XAA    68
C         IFPTR = IPTR0                                                         4XAA    69
      END IF                                                                    4XAA    70
      IF (IVPTR .LE. IOLDPT)  GO TO 100                                         LSDFIL  34
      IOLDPT = IVPTR                                                            LSDFIL  35
C              SET LOOP INCREMENT                                               LSDFIL  36
      INCR   = 1                                                                LSDFIL  37
C              INIT WORDS LEFT                                                  LSDFIL  40
      NWDSL  = NWDS                                                             LSDFIL  41
C              INITIALIZE DEFINED FLAG                                          LSDFIL  42
      WASDEF = .FALSE.                                                          LSDFIL  43
C              PROCESS ENTIRE LIST                                              LSDFIL  44
      DO 510 IWD = 1,NWDS,INCR                                                  LSDFIL  45
C              IF KWD DEFINED                                                   LSDFIL  46
      IF (JOP.GT.0) THEN                                                        DEF2    10
        IDTINP = IUNPKB(1,5,VAL(IDTPTR))                                        FIX7     9
        IF(((IDTINP.GE. 3).and.(IDTINP.LE. 6)) .OR.                             COMPLY   7
     $     ((IDTINP.GE.11).and.(IDTINP.LE.15))) THEN                            COMPLY   8
            IF((IDTINP.EQ. 3).or.(IDTINP.EQ. 5).or.(IDTINP.EQ.11).or.           COMPLY   9
     $         (IDTINP.EQ.13).or.(IDTINP.EQ.15))  THEN                          COMPLY  10
               CALL MOVEN (VAL(IVPTR-LVAL), VAL(IVPTR), INCR)                   FIX7    12
C           ELSE                                                                FIX10    2
C              If expression leave old (last evaluation) value there            FIX10    3
            ENDIF                                                               FIX7    15
            GO TO 400                                                           FIX7    16
        ENDIF                                                                   FIX7    17
      ELSE                                                                      DEF2    19
          IF (ITYPLS(VAL(IVPTR)).NE.ITYPLS(UNDEF(1))) GO TO 400                 DEF2    20
      END IF                                                                    DEF2    21
C              RESET DATA TYPE FROM FILL ARRAY and FILL TYPE CORRECTLY          HVAC17  30
       IF(JOP.GT.0) THEN                                                        HVAC17  31
C              Change type of this data to be correct (data or                  HVAC17  32
C              expression) as the thing being filled                            HVAC17  33
C                                                                               HVAC17  34
C              pick up the type of thing from fill object                       HVAC17  35
         IF((LSD .eq. 1) .or. (LSD .EQ. 2))  THEN                               HVAC17  36
           IFTYPE = IUNPKB(1,5,FILL(IFPTR-LVALF*2))                             HVAC17  37
           IF(LSD .EQ. 2)  THEN                                                 HVAC17  38
             IF((IFTYPE .LE. 2) .or. (IFTYPE .EQ. 7) .or.                       HVAC17  39
     $          (IFTYPE .EQ. 8))  GOTO 400                                      HVAC17  40
           ENDIF                                                                HVAC17  41
         ELSE                                                                   HVAC17  42
           IFTYPE = IUNPKB(1,5,FILL(IFPTR-LVALF))                               HVAC17  43
         ENDIF                                                                  HVAC17  44
C              For DEFAULT use fill type ELSE use LIKE/SUB-COMMAND type         HVAC17  45
C              corrected for expression types                                   HVAC17  46
         IF (LSD.EQ.3) THEN                                                     HVAC17  47
           IDFTYP =IFTYPE                                                       HVAC17  48
         ELSE                                                                   HVAC17  49
           IDFTYP =IDTYPE                                                       HVAC17  50
           IF((IFTYPE .eq. 2).or.(IFTYPE .eq. 4).or.(IFTYPE .eq. 6).or.         COMPLY  11
     $        (IFTYPE .eq. 8).or.(IFTYPE .eq.10).or.(IFTYPE .eq.12).or.         COMPLY  12
     $        (IFTYPE .eq.14))                                                  COMPLY  13
     $       IDFTYP = IDFTYP + 1                                                DFTEX3 365
         ENDIF                                                                  HVAC17  53
C              Place FILL TYPE into TYPE (1st) value array                      NEWEXP   9
C              and check/overwrite exp index of value changing                  NEWEXP  10
C              from expression result to static value                           NEWEXP  11
         DO I=1,INCR                                                            NEWEXP  12
           VAL(IDTPTR+I-1)=TYPLS(IPACKB(1,5,IDFTYP,VAL(IDTPTR+I-1)))            NEWEXP  13
           IF(((IDFTYP .lt. 2).or.(IDFTYP .eq. 3).or.(IDFTYP .eq. 5).or.        COMPLY  14
     $         (IDFTYP .eq. 7).or.(IDFTYP .eq. 9).or.(IDFTYP .eq.11).or.        COMPLY  15
     $         (IDFTYP .eq.13).or.(IDFTYP .eq.15)) .AND.                        COMPLY  16
     $        ((IDTINP .eq. 2).or.(IDTINP .eq. 4).or.(IDTINP .eq. 6).or.        COMPLY  17
     $         (IDTINP .eq. 8).or.(IDTINP .eq.10).or.(IDTINP .eq.12).or.        COMPLY  18
     $         (IDTINP .eq.14))) THEN                                           COMPLY  19
             VAL(IDTPTR+I-1+LVAL) = UNDEF(1)                                    NEWEXP  18
           ENDIF                                                                NEWEXP  19
         END DO                                                                 NEWEXP  20
       ELSE                                                                     HVAC17  58
         IFTYPE = IDTYPE                                                        HVAC17  59
         IDFTYP = IDTYPE                                                        HVAC17  60
       ENDIF                                                                    HVAC17  61
C              If not an expression check for flag values that                  DFTEX3 366
C              cause special flag fills or skipping of this item                DFTEX3 367
      IF((IFTYPE .lt. 2).or.(IFTYPE .eq. 3).or.(IFTYPE .eq. 5).or.              COMPLY  20
     $   (IFTYPE .eq. 7).or.(IFTYPE .eq. 9).or.(IFTYPE .eq.11).or.              COMPLY  21
     $   (IFTYPE .eq.13).or.(IFTYPE .eq.15)) THEN                               COMPLY  22
C              REQUIRED                                                         DFTEX3 370
        IF(ITYPLS(FILL(IFPTR)).EQ.ITYPLS(UNDEF(1))) GO TO 600                   DFTEX3 371
C              Last list value was defined for a LIKE so skip rest of list      DFTEX3 372
C       === removed JJH 3/25/02                                                 -041     1
C       IF( WASDEF .AND. (LSD .EQ. 1) )  GO TO 750                              -041     2
C              WEIGHTING-FACTOR keyword don't fill                              DFTEX3 374
        IF((KTYPE .EQ. 3) .AND. (KWD(10,JK) .EQ. 71))  GOTO 500                 DFTEX3 375
C              UNUSED                                                           DFTEX3 376
        IF(ITYPLS(FILL(IFPTR)).EQ.ITYPLS(UNDEF(2))) GO TO 700                   DFTEX3 377
C              SO-WHA                                                           DFTEX3 378
        IF(ITYPLS(FILL(IFPTR)).EQ.ITYPLS(UNDEF(3))) GO TO 750                   DFTEX3 379
C              UN-FILLED                                                        DFTEX3 380
        IF(ITYPLS(FILL(IFPTR)).EQ.ITYPLS(UNDEF(4))) GO TO 800                   DFTEX3 381
C              Skip CHILD LIST keywords                                         DFTEX3 382
        IF(LSD.EQ.1 .AND. KTYPE.EQ.20) GO TO 750                                DFTEX3 383
      ENDIF                                                                     DFTEX3 384
C            put correct data into 3rd and 2nd (if one exists) value array      DFTEX3 385
      IF(JOP .GT. 0) THEN                                                       FIX6    44
C            if expression - place IA ptr to exp in 2nd not 3rd                 DFTEX3 386
C                            initialize 3rd to no_default                       DFTEX3 387
        IF(IFTYPE.eq. 2 .OR. IFTYPE.eq. 4 .OR. IFTYPE.eq. 6 .OR.                COMPLY  23
     $     IFTYPE.eq. 8 .OR. IFTYPE.eq.10 .OR. IFTYPE.eq.12 .OR.                COMPLY  24
     $     IFTYPE.eq.14) THEN                                                   COMPLY  25
C              Only fill 3rd value array first time                             DFTEX4 146
C              (exprsn's do it later in interactive mode)                       DFTEX4 147
        IF((IPDFLG .eq. 0).or.(IPDFLG .eq. 2).or.(LIBflg.ne.0))                 DFTEX4 148
     $    CALL FILLN(UNDEF(3),VAL(IVPTR),INCR)                                  DFTEX4 149
          IF(LSD .EQ. 3)  THEN                                                  FIX10    4
C            if default - IA ptr is in fill array                               FIX10    5
            CALL MOVEN (FILL(IFPTR), VAL(IVPTR-LVAL), INCR)                     FIX10    6
          ELSE                                                                  FIX10    7
C            if LIKE/SC - IA ptr is in 2nd value array                          FIX10    8
            CALL MOVEN (FILL(IFPTR-LVALF), VAL(IVPTR-LVAL), INCR)               FIX10    9
          ENDIF                                                                 FIX10   10
        ELSE                                                                    FIX6    49
C            if value - place value 3rd then initialize 2nd                     DFTEX3 389
          CALL MOVEN (FILL(IFPTR), VAL(IVPTR), INCR)                            DFTEX3 390
          IF(LSD.EQ.2)  THEN                                                    FIX6    50
C            if sub-command also fill user input value array                    FIX6    51
C            so that sub-command data is treated like user input                FIX6    52
            CALL MOVEN (FILL(IFPTR), VAL(IVPTR-LVAL), INCR)                     FIX7    36
          ELSE                                                                  FIX6    54
C            if non-exp LIKE or DEFAULT just re-initialize                      FIX6    55
            CALL FILLN (UNDEF(1), VAL(IVPTR-LVAL), INCR)                        FIX7    37
          ENDIF                                                                 FIX6    57
        ENDIF                                                                   FIX6    58
      ELSE                                                                      DFTEX3 391
C            if non-command table call, just fill value array                   DFTEX3 392
        CALL MOVEN (FILL(IFPTR), VAL(IVPTR), INCR)                              DFTEX3 393
      ENDIF                                                                     FIX6    59
C              If SYMBOL, but NOT expression, cause library fetch if needed     FIX14   64
      IF(                                                                       FIX14   65
     $  ((KTYPE.EQ. 2).OR.(KTYPE.EQ.3).OR.(KTYPE.EQ.8).OR.(KTYPE.EQ.10))        FIX14   66
     $   .AND.                                                                  FIX14   67
     $  ((IFTYPE.NE. 2).and.(IFTYPE.NE. 4).and.(IFTYPE.NE. 6).and.              COMPLY  26
     $   (IFTYPE.NE. 8).and.(IFTYPE.NE.10).and.(IFTYPE.NE.12).and.              COMPLY  27
     $   (IFTYPE.NE.14))                                                        COMPLY  28
     $   )  THEN                                                                FIX14   70
          JSYM   = ITYPLS(VAL(IVPTR))                                           FIX11  138
          IF (JSYM .LE. 0)  GOTO 500                                            FIX11  139
          IF(LSD.EQ.3 .AND. ISYMTB(11,JSYM).LE.0) ISYMTB(11,JSYM)=KRDNUM        FIX11  140
C              CHECK IF SYMBOL IN LIBRARY                                       FIX11  141
          IF (ISYMTB(13,JSYM).GT.0) THEN                                        FIX11  142
              ISYMTB(13,JSYM) = -ISYMTB(13,JSYM)                                FIX11  143
              IF (JSYMLX.EQ.0) THEN                                             FIX11  144
                  JSYMLX = JSYM                                                 FIX11  145
              ELSE                                                              FIX11  146
                  JSYMLX = MIN0(JSYMLX,JSYM)                                    FIX11  147
              END IF                                                            FIX11  148
          END IF                                                                FIX11  149
      END IF                                                                    FIX11  150
      GO TO 500                                                                 LSDFIL  87
C              IF NOT AN UNUSED KWD                                             LSDFIL  88
  400 WASDEF = .TRUE.                                                           LSDFIL  89
C              Check for UNUSED keyword - but ignore if LIKE'd to               DFTEX4 150
C              an expression result (will add evaluate for local                DFTEX4 151
C              object's keyword UNUSED at later time - need to allow            DFTEX4 152
C              evaluation of single local expression without destroying         DFTEX4 153
C              display area existing result)                                    DFTEX4 154
      IF(ITYPLS(FILL(IFPTR)).NE.ITYPLS(UNDEF(2))) GOTO 500                      FIX17    1
      IF((LSD.EQ.1) .AND. (JOP.GT.0))  THEN                                     FIX17    2
        IFTYPE = IUNPKB(1,5,FILL(IFPTR-LVALF*2))                                FIX17    3
        IF((IFTYPE.eq. 2).OR.(IFTYPE.eq. 4).OR.(IFTYPE.eq. 6).OR.               COMPLY  29
     $     (IFTYPE.eq. 8).OR.(IFTYPE.eq.10).OR.(IFTYPE.eq.12).OR.               COMPLY  30
     $     (IFTYPE.eq.14)) GOTO 500                                             COMPLY  31
      ENDIF                                                                     FIX17    6
C              Remove all data for UNUSED keyword                               -035     1
      IF(JOP.GT.0)  THEN                                                        -035     2
        IF( IPDFLG .eq. 1 ) THEN                                                bug      7
          VAL(IDTPTR)=TYPLS(IPACKB(1,5,1,VAL(IDTPTR)))                          bug      8
          VAL(IDTPTR+LVAL) = UNDEF(1)                                           bug      9
        ELSE                                                                    bug     10
          VAL(IDTPTR+LVAL) = UNDEF(2)                                           bug     11
        ENDIF                                                                   bug     12
      ENDIF                                                                     -035     5
      VAL(IVPTR) = UNUSE                                                        HVAC28  39
      GO TO 500                                                                 HVAC28  40
C              Place the correct value in value array and also                  FIX14   71
C              in the data type array                                           FIX14   72
C                                                                               FIX14   73
C              If sub-command, skip to next keyword (no required keywords)      FIX14   74
C              If LIKE or DEFAULT place REQUIRED flag into value array          FIX14   75
C              so that PRNTVL will issue ERROR message                          FIX14   76
  600 IF (LSD .EQ. 2) GO TO 500                                                 HVAC28  41
      JFILL = 1                                                                 FIX14   78
      GOTO 900                                                                  FIX14   79
  700 JFILL = 2                                                                 HVAC17  66
      GO TO 900                                                                 HVAC17  67
  750 JFILL = 3                                                                 HVAC17  68
      GO TO 900                                                                 HVAC17  69
  800 JFILL = 4                                                                 HVAC17  70
C              Place correct value into TYPE and VALUE arrays                   HVAC17  71
  900 VAL(IVPTR) = UNDEF(JFILL)                                                 HVAC28  42
  500 IVPTR  = IVPTR + INCR                                                     HVAC28  43
      IFPTR = IFPTR + INCR                                                      HVAC28  44
      IDTPTR = IDTPTR + INCR                                                    HVAC28  45
      NWDSL  = NWDSL - INCR                                                     HVAC28  46
  510 CONTINUE                                                                  HVAC28  47
      GO TO 100                                                                 HVAC17  79
      END                                                                       LSDFIL 115
      SUBROUTINE LSPERD(JREF,JOPCDT,IA,ISYMTB,KONTXT,IREFTB,LKDAT,              DFTEX3 394
     $                  NAMPTR,LSDPTR,LKPTR,Iphase)                             DFTEX3 395
C                                                                               LSPERI   3
C                  THIS ROUTINE PROCESSES THE LSPERI COMMAND                    LSPERI   4
C                                                                               LSPERI   5
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               LSPERI   9
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION IA(1000000),ISYMTB(16,1),KONTXT(16,1),IREFTB(5,1)               FIX6    60
C              SET SOME POINTERS                                                LSPERI  18
C              IKW IS THE FIRST KEYWORD FOR COMMAND                             LSPERI  19
      IKW    = IOPCDT(9,JOPCDT)                                                 LSPERI  20
C              NKW IS THE NUMBER OF KEYWORDS FOR THIS COMMAND                   LSPERI  21
      NKW    = IOPCDT(10,JOPCDT)                                                LSPERI  22
C              LVAL IS THE LENGTH OF THE VALUE ARRAY                            LSPERI  23
      LVAL   = IOPCDT(16,JOPCDT)                                                LSPERI  24
      NSAVE = IOPCDT(17,JOPCDT)                                                 4XAA    82
C              IAVPT1 IS THE START OF THE VALUE BLOCK                           4XAA    85
      IAXS = IREFTB(2,JREF)                                                     DEF2    26
      IAVPT1 = IAXS + NSAVE                                                     DEF2    27
C              LTOT IS THE TOTAL SIZE OF THE VALUE BLOCK                        4XAA    87
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,JOPCDT)                                 4XAA    88
      IF(Iphase .ne. 2)  THEN                                                   DFTEX3 396
        CALL LSDFIL(JOPCDT,ISYMTB,KONTXT(1,IKW),NKW,IA(IAVPT1+1),               DFTEX3 397
     $              IA(LKDAT+1),LSDPTR,IOPCDT(1,JOPCDT),NAMPTR,LVAL)            DFTEX3 398
        IF(Iphase .eq. 1) RETURN                                                DFTEX3 399
      ENDIF                                                                     DFTEX3 400
      CALL CKAA(IA,LVAL*3)                                                      HVAC11   2
      IAVPTR = IAVPT1 + 2*LVAL                                                  4XAA    94
      IAVPTS = IAVPT1 + 3*LVAL                                                  4XAA    95
      IAX2 = IAX + LVAL*2                                                       HVAC11   3
      CALL FILLN(0,IA(IAX2+1),LVAL)                                             4XAA    97
      CALL MOVEN(IA(IAVPTR+1),IA(IAVPTS+1),LVAL)                                4XAA    98
      CALL REDEF(IA(IAVPTS+1),LVAL)                                             4XAA    99
C              CONVERT SYMTB PTRS TO VALUES                                     LSPERI  39
      CALL SYMFIL(IA,KONTXT(1,IKW),NKW,IA(IAVPTS+1))                            4XAA   100
C              1-15 ARE THE VERIFICATION REPORTS   SEE WHICH USED               LSPERI  41
      DO I=1,15                                                                 LIB4     1
        IREP = IA(IAVPTS+I)                                                     LIB4     2
        IF (IREP.EQ.16) THEN                                                    LIB4     3
C              IF ALL THEN FILL ALL POSITIONS                                   LIB4     4
          DO J=1,14                                                             LIB4     5
            IA(IAX2+J) = 1                                                      LIB4     6
          ENDDO                                                                 LIB4     7
        ELSEIF (IREP.LT.16 .and. IREP.GT.0) THEN                                LIB4     8
          IA(IAX2+IREP) = 1                                                     LIB4     9
        ENDIF                                                                   LIB4    10
      ENDDO                                                                     LIB4    11
C              16-30 ARE THE SUMMARY REPORTS  SEE WHICH                         LSPERI  51
      DO 200 I=16,30                                                            LSPERI  52
      IREP = IA(IAVPTS+I)                                                       4XAA   102
      IF (IREP.EQ.0) GO TO 290                                                  ALPHA   15
      IF (IREP.EQ.16) GO TO 250                                                 ALPHA   16
  200 IA(IAX2+IREP+15) = 1                                                      ALPHA   17
      GOTO 290                                                                  LSPERI  56
C              IF ALL THEN FILL ALL POSITIONS                                   LSPERI  57
  250 DO 260 I=16,30                                                            LSPERI  58
  260 IA(IAX2+I) = 1                                                            ALPHA   18
  290 CONTINUE                                                                  LSPERI  60
C              31-35 ARE DUMP OPTIONS                                           LSPERI  61
      DO 300 I=31,35                                                            LSPERI  62
      IREP = IA(IAVPTS+I)                                                       4XAA   103
      IF (IREP.EQ.0) GO TO 390                                                  ALPHA   20
      IF (IREP.EQ.10) GO TO 350                                                 ALPHA   21
  300 IA(IAX2+IREP+30) = 1                                                      ALPHA   22
      GOTO 390                                                                  LSPERI  66
  350 DO 360 I=31,35                                                            LSPERI  67
  360 IA(IAX2+I) = 1                                                            ALPHA   23
  390 CONTINUE                                                                  LSPERI  69
C              MOVE REWORKED DATA BACK DOWN TO IAX                              ALPHA   24
      CALL MOVEN(IA(IAX2+1),IA(IAVPTS+1),LVAL-2)                                4XAA   104
C              Place most recent command data into output array                 COMB06  17
C              so that it is available during input for debugging               COMB06  18
      CALL MOVEN(IA(IAVPTS+1),IREPRT(1),LVAL)                                   COMB06  19
      RETURN                                                                    LSPERI  74
      END                                                                       LSPERI  75
      SUBROUTINE MEMCK (I,MAX)                                                  MEMCK    2
C                                                                               MEMCK    3
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      DIMENSION I(1), MAX(1)                                                    MEMCK    5
C              IF THIS WILL BE TOO MANY                                         MEMCK    6
      IF (I(1).GE.MAX(1)) GO TO 100                                             MEMCK    7
      I(1)      = I(1) + 1                                                      MEMCK    8
      RETURN                                                                    MEMCK    9
  100 CALL MSG2 (23, MAX, DUM, DUM, DUM)                                        MEMCK   10
      RETURN                                                                    MEMCK   11
      END                                                                       MEMCK   12
      SUBROUTINE MONDAY (M,ID,IERR)                                             MONDAY   2
C                                                                               MONDAY   3
C              MONDAY PROCESSES A MONTH,DAY INPUT STRING.                       MONDAY   4
C              THE MONTH STRING MUST ALREADY BE IN ISYMB(1).                    MONDAY   5
C                                                                               MONDAY   6
      COMMON /IPARAM/ NPARAM, MPARAM, IPARAM(17,6000)                           -048t    1
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON /MDATA / IDIM(12), ISDOM(12), MONDSC(12)                           /MDATA/  2
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
C                                                                               MONDAY  11
       CALL TBLSCH ( ISYMB, IPARAM, 17, NPARAM, 2, JPARAM )                     PARAM   17
      IF( JPARAM .EQ. 0 )  GO TO 2000                                           MONDAY  13
        IF( IPARAM(9,JPARAM) .EQ. 1 )  GO TO 1000                               PARAM   18
         CALL  MOVEN ( IPARAM(10,JPARAM), ISYMB(1), 8 )                         PARAM   19
          GO TO 2000                                                            MONDAY  16
1000    M2 = TYPLS( IPARAM(10,JPARAM) ) + 0.1                                   PARAM   20
        GO TO 40                                                                MONDAY  18
2000  CONTINUE                                                                  MONDAY  19
      DO 20 M2 = 1,12                                                           MONDAY  20
          if ( ISYMU(1) .eq. MONDSC(M2) )     goto  40                          MONDAY  21
   20 CONTINUE                                                                  MONDAY  22
      CALL MSG (76)                                                             MONDAY  23
      IERR   = 3                                                                MONDAY  24
      RETURN                                                                    MONDAY  25
   40 M      = M2                                                               MONDAY  26
      IF (GETV2(D).NE.0.) GO TO 60                                              MONDAY  27
      CALL MSG (70)                                                             MONDAY  28
      IERR   = 2                                                                MONDAY  29
      RETURN                                                                    MONDAY  30
   60 ID     = D + .5                                                           MONDAY  31
      IF ((ID.GE.1).AND.(ID.LE.IDIM(M))) GO TO 80                               MONDAY  32
      PARMS(1) = 1.0                                                            MONDAY  33
      PARMS(2) = FLOAT(IDIM(M))                                                 MONDAY  34
      CALL MSG2 (28, PARMS(1), PARMS(2), DUM, DUM)                              MONDAY  35
      IERR   = 1                                                                MONDAY  36
      RETURN                                                                    MONDAY  37
   80 IERR   = 0                                                                MONDAY  38
      RETURN                                                                    MONDAY  39
      END                                                                       MONDAY  40
      SUBROUTINE MOVEAA (IA, IARR, N)                                           MOVEAA   2
C                                                                               MOVEAA   3
C              MOVEAA MOVES N WORDS FROM IARR TO THE                            MOVEAA   4
C              AA ARRAY AFTER CALLING CKAA TO INSURE                            MOVEAA   5
C              THE WORDS ARE AVAILABLE                                          MOVEAA   6
C                                                                               MOVEAA   7
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      DIMENSION IARR(1), IA(1)                                                  MOVEAA   9
C                                                                               MOVEAA  10
      CALL CKAA (IA, N)                                                         MOVEAA  11
      DO 200 I = 1,N                                                            MOVEAA  12
  200 IA(IAX+I) = IARR(I)                                                       MOVEAA  13
      IAX    = IAX + N                                                          MOVEAA  14
      RETURN                                                                    MOVEAA  15
      END                                                                       MOVEAA  16
      SUBROUTINE MOVEN (A, B, N)                                                MOVEN    2
C                                                                               MOVEN    3
C              MOVEN MOVES N WORDS OF ARRAY A TO ARRAY B                        MOVEN    4
C                                                                               MOVEN    5
      DIMENSION A(1), B(1)                                                      MOVEN    6
C                                                                               MOVEN    7
      IF( N .LT. 1 )  RETURN                                                    MOVEN    8
      DO 100 I = 1,N                                                            MOVEN    9
  100 B(I)   = A(I)                                                             MOVEN   10
      RETURN                                                                    MOVEN   11
      END                                                                       MOVEN   12
      FUNCTION MVTOSM(JREF,JOPCDT,IKYOP)                                        MVTOSM   2
C                                                                               MVTOSM   3
C              MVTOSM MOVES VALUES FROM THE 3RD SECTION OF THE VALUE            MVTOSM   4
C              ARRAY TO THE 4TH.                                                MVTOSM   5
C              MVTOSM RETURNS THE AA INDEX OF THE START OF THE                  MVTOSM   6
C              KEYWORD VALUES IN THE 4TH SECTION OF THE VALUE ARRAY.            MVTOSM   7
C                                                                               MVTOSM   8
C              IKYOP IS THE AA INDEX OFFSET FROM THE START OF THE 4TH           MVTOSM   9
C              SECTION OF THE VALUE ARRAY OF THE 1ST KEYWORD VALUE.             MVTOSM  10
C                                                                               MVTOSM  11
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
C                                                                               MVTOSM  15
      LVAL = IOPCDT(16,JOPCDT)                                                  MVTOSM  16
      IAVPT3 = IREFTB(2,JREF) + IOPCDT(17,JOPCDT) + 2*LVAL                      MVTOSM  17
      IAVPT = IAVPT3 + LVAL + IKYOP                                             MVTOSM  18
      CALL MOVEN(AA(IAVPT3+1),AA(IAVPT+1),LVAL)                                 MVTOSM  19
      MVTOSM = IAVPT                                                            MVTOSM  20
      RETURN                                                                    MVTOSM  21
      END                                                                       MVTOSM  22
      FUNCTION MSIMPT(JREF,JOPCDT,IKYOP)                                        MSIMPT   2
C                                                                               MSIMPT   3
C              RETURN AA INDEX TO START OF KEYWORD VALUES IN THE                MSIMPT   4
C              4TH SECTION OF THE AA ARRAY                                      MSIMPT   5
C                                                                               MSIMPT   6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
C                                                                               MSIMPT  10
      IAVPT = IREFTB(2,JREF) + IOPCDT(17,JOPCDT) + 3*IOPCDT(16,JOPCDT)          MSIMPT  11
     1        + IKYOP                                                           MSIMPT  12
      MSIMPT = IAVPT                                                            MSIMPT  13
      RETURN                                                                    MSIMPT  14
      END                                                                       MSIMPT  15
      SUBROUTINE MOVLIB(IDAT,LEN,IBUFF)                                         MOVLIB   2
C                                                                               MOVLIB   3
C              MOVE LEN WORDS OF IDAT INTO THE USER                             MOVLIB   4
C              LIBRARY.  THE LIBRARY RECORD IS STORED IN IBUFF                  MOVLIB   5
C                                                                               MOVLIB   6
C              MOVLIB USES WORDS 21 - 25 OF COMMWK                              MOVLIB   7
C                                                                               MOVLIB   8
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
C                                                                               MOVLIB  12
      DIMENSION IDAT(LEN), IBUFF(1)                                             MOVLIB  13
C                                                                               MOVLIB  14
      EQUIVALENCE (IX,COMMWK(21)),(NLEFTB,COMMWK(22)),                          MOVLIB  15
     1            (NLEFTM,COMMWK(23)),(NMOVED,COMMWK(24)),                      MOVLIB  16
     2            (NN,COMMWK(25))                                               MOVLIB  17
C                                                                               MOVLIB  18
      NLEFTM = LEN                                                              MOVLIB  19
      NMOVED = 0                                                                MOVLIB  20
      NLEFTB = LREC - LASTW                                                     MOVLIB  21
   10 NN     = MIN0(NLEFTB,NLEFTM)                                              MOVLIB  22
      DO 20 I=1,NN                                                              MOVLIB  23
   20 IBUFF(LASTW+I) = IDAT(I+NMOVED)                                           MOVLIB  24
      LASTW  = LASTW + NN                                                       MOVLIB  25
      IF ((NLEFTB-NN) .GT. 0)  GO TO 100                                        MOVLIB  26
      NMOVED = NMOVED + NN                                                      MOVLIB  27
      NLEFTM = NLEFTM - NN                                                      MOVLIB  28
      CALL WRITEN(IUSLIB,IBUFF(1),LREC)                                         MOVLIB  29
      NREC   = NREC + 1                                                         MOVLIB  30
      LASTW  = 0                                                                MOVLIB  31
      NLEFTB = LREC                                                             MOVLIB  32
      CALL FILLN(0,IBUFF(1),LREC)                                               MOVLIB  33
      IF (NLEFTM .GT. 0)  GO TO 10                                              MOVLIB  34
  100 RETURN                                                                    MOVLIB  35
      END                                                                       MOVLIB  36
      SUBROUTINE MSG (M)                                                        MSG      2
      USE ERR_MOD                                                               -048   168
      USE MSGBOX                                                                -048   169
C                                                                               MSG      3
C              MSGDSC(1,M) == LEVEL*8 + UNDER                                   MSG      4
C                                                                               MSG      5
C              ERROR LEVEL                                                      MSG      6
C                                                                               MSG      7
C                  1 ERROR                                                      MSG      8
C                  2 WARNING                                                    MSG      9
C                  3 CAUTION                                                    MSG     10
C                  4 DEFAULT                                                    MSG     11
C                  5 INPUT                                                      MSG     12
C                  6 LIKE                                                       MSG     13
C                  7 FROM                                                       MSG     14
C                  8 NOTE                                                       MSG     15
C                                                                               MSG     16
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /IUNDER/  IUND, LEVEL, IUNDER(82)                                  /IUNDER/ 2
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON /PREFIX/ PREFIX(3,10)                                              FIX11    3
      DIMENSION ERRPX(3), WARPX(3), CAUPX(3), DEFPX(3), INPPX(3),               /PREFIX/ 3
     1      LIKPX(3), NOTPX(3), FROPX(3), LIBPX(3), UDFPX(3)                    FIX11    4
      EQUIVALENCE (ERRPX(1),PREFIX(1,1)), (WARPX(1),PREFIX(1,2)),               /PREFIX/ 5
     1            (CAUPX(1),PREFIX(1,3)), (DEFPX(1),PREFIX(1,4)),               /PREFIX/ 6
     2            (INPPX(1),PREFIX(1,5)), (LIKPX(1),PREFIX(1,6)),               /PREFIX/ 7
     3            (FROPX(1),PREFIX(1,7)), (NOTPX(1),PREFIX(1,8)),               FIX11    5
     4            (LIBPX(1),PREFIX(1,9)), (UDFPX(1),PREFIX(1,10))               FIX11    6
C                                                                               /PREFIX/ 9
      DIMENSION MSGDSC(11,120)                                                  METR1   11
      DIMENSION  MSG1(110), MSG2(110), MSG3(110), MSG4(110), MSG5(110),         ERR-01  16
     1           MSG6(110), MSG7(110), MSG8(110), MSG9(110),MSG10(110),         ERR-01  17
     2           MSG11(110), MSG12(110)                                         METR1   12
      EQUIVALENCE (MSGDSC(1,1 ),MSG1(1)), (MSGDSC(1,11),MSG2(1)),               MSG     26
     1            (MSGDSC(1,21),MSG3(1)), (MSGDSC(1,31),MSG4(1)),               MSG     27
     2            (MSGDSC(1,41),MSG5(1)), (MSGDSC(1,51),MSG6(1)),               MSG     28
     3            (MSGDSC(1,61),MSG7(1)), (MSGDSC(1,71),MSG8(1)),               MSG     29
     4            (MSGDSC(1,81),MSG9(1)), (MSGDSC(1,91),MSG10(1)),              METR1   13
     5            (MSGDSC(1,101),MSG11(1)),(MSGDSC(1,111),MSG12(1))             METR1   14
      COMMON /PDARGSL/ loc_args                                                 /PDARGL/ 2
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  -042L5b 59
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON /DFT_STR/ numDFT,idftStr(3,1024)                                   -042L5b 19
      character*40 msgstr, scrstr                                               -042L5b 66
      character*12 nmsgstr                                                      -042L5b 67
      character*17  dostr                                                       -042L5b 68
      character*132 namstr, scrstr2                                             -042L5b 69
C                                                                               -042L5b 70
C                                                                               -042L5b 73
C                                                                               -042L5b 74
C              MESSAGES 1 - 10                                                  MSG     33
C                                                                               MSG     34
      DATA MSG1/                                                                MSG     35
     1   11, 4HPARA,4HMETR,4HIC-I,4HNPUT,4H REQ,4HUIRE,4HS PR,4HEVIO,           MSG     36
     2       4HUS I,4HNPUT,                                                     MSG     37
     3   11, 4HNAME,4H NOT,4H ALL,4HOWED,4H WIT,4HH TH,4HIS C,                  MSG     38
     4       4HOMMA,4HND  ,4H    ,                                              MSG     39
     5   11, 4HUNKN,4HOWN ,4HCOMM,4HAND ,4H    ,4H    ,4H    ,3*1H ,            MSG     40
     6   11, 4HCOMP,4HUTE ,4HBEFO,4HRE M,4HATCH,4HING ,4HINPU,4HT   ,           MSG     41
     7       4H    ,4H    ,                                                     MSG     42
     8   11, 4HTHIS,4H COM,4HPUTE,4H COM,4HMAND,4H IS ,4HOUT ,4HOF O,           MSG     43
     9       4HRDER,4H    ,                                                     MSG     44
     1   11, 4HFOR ,4HMUST,4H BE ,4HFIRS,4HT KE,4HYWOR,4HD   ,3*1H ,            MSG     45
     2   11, 4HUNKN,4HOWN ,4HKEYW,4HORD ,4Hor P,4HREVI,4HOUS ,4H.. M,           MSG     46
     2       4HISSI,2HNG,                                                       MSG     47
     3   11, 4HILLE,4HGAL ,4HCODE,4HWORD,4H    ,4H    ,4H    ,3*1H ,            MSG     48
     4   11, 4HFOUN,4HD SY,4HMBOL,4H INS,4HTEAD,4H OF ,4HNUMB,                  MSG     49
     5       4HER  ,4H    ,4H    ,                                              MSG     50
     6   11, 4HSYMB,4HOL T,4HABLE,4H FUL,4HL   ,4H    ,4H    ,3*1H /            MSG     51
C                                                                               MSG     52
C              MESSAGE 11 - 20                                                  MSG     53
C                                                                               MSG     54
      DATA MSG2/                                                                MSG     55
     1   11, 4HMEMO,4HRY C,4HAPAC,4HITY ,4HEXCE,4HEDED,4H    ,3*1H ,            MSG     56
     2   31, 4HPREV,4HIOUS,4H VAL,4HUE I,4HN FO,4HRCE ,4H    ,3*1H ,            MSG     57
     3   11, 4HNOT ,4HIMPL,4HEMEN,4HTED ,4HYET ,4H    ,4H    ,3*1H ,            MSG     58
     4   11, 4HSYMB,4HOL P,4HREVI,4HOUSL,4HY UN,4HDEFI,4HNED ,3*1H ,            MSG     59
     5   20, 4HGEOM,4HETRY,4H DAT,4HA RE,4HPLAC,4HES L,4HOCAT,                  MSG     60
     6       4HION ,4HDATA,1H ,                                                 MSG     61
     6   21, 4HKEYW,4HORD ,4HLIBR,4HARY ,4HVALU,4HE BE,4HING ,                  DFTEX3 401
     6       4HREPL,4HACED,4H    ,                                              DFTEX3 402
     8   11, 4HKEYW,4HORD ,4HPREV,4HIOUS,4HLY G,4HIVEN,4H A V,                  MSG     63
     9       4HALUE,4H    ,4H    ,                                              MSG     64
     1   11, 4HMISS,4HING ,4HTERM,4HINAT,4HOR F,4HOR P,4HREV ,                  MSG     65
     2       4HCOMM,4HAND ,4H    ,                                              MSG     66
     3   11, 4HNAME,4H IS ,4HREQU,4HIRED,4H FOR,4H THI,4HS CO,                  MSG     67
     4       4HMMAN,4HD   ,4H    ,                                              MSG     68
     5   11, 4HFOUN,4HD NU,4HMBER,4H INS,4HTEAD,4H OF ,4HSYMB,                  MSG     69
     6       4HOL  ,4H    ,4H    /                                              MSG     70
C                                                                               MSG     71
C              MESSAGES 21 - 30                                                 MSG     72
C                                                                               MSG     73
      DATA MSG3/                                                                MSG     74
     1   11, 4HEXPE,4HCTED,4H A L,4HOAD ,4HRANG,4HE AS,4H NEX,4HT KE,           MSG     75
     2       4HYWOR,4HD   ,                                                     MSG     76
     3   11, 4HUNKN,4HOWN ,4HOPTI,4HON  ,4H    ,4H    ,4H    ,3*1H ,            MSG     77
     4   11, 4HNO E,4HQUIP,4HMENT,4H SPE,4HCIFI,4HED F,4HOR T,4HHIS ,           MSG     78
     5       4HNUMB,4HER  ,                                                     MSG     79
     6   10, 4HBAD ,4HEQUI,4HPMEN,4HT TY,4HPE -,4H DAT,4HA IG,4HNORE,           MSG     80
     7       4HD   ,4H    ,                                                     MSG     81
     8   20, 4HSIZE,4H NOT,4H GIV,4HEN, ,4HPEAK,4H DEM,4HAND ,4HSIZE,           MSG     82
     9       4H ASS,4HUMED,                                                     MSG     83
     1   30, 4HNO H,4HEATI,4HNG E,4HQUIP,4HMENT,4H HAS,4H BEE,4HN DE,           MSG     84
     2       4HFINE,4HD   ,                                                     MSG     85
     3   30, 4HNO C,4HOOLI,4HNG E,4HQUIP,4HMENT,4H HAS,4H BEE,4HN DE,           MSG     86
     4       4HFINE,4HD   ,                                                     MSG     87
     5   30, 4HNO C,4HOOLI,4HNG T,4HOWER,4H DEF,4HINED,4H, DE,4HFAUL,           MSG     88
     6       4HT US,4HED  ,                                                     MSG     89
     7   10, 4HSTRU,4HCTUR,4HE ca,4Hnnot,4H be ,4Hin i,4Hnter,4Hior ,           ERR-01  19
     8       4HWIND,4HOW  ,                                                     ERR-01  20
     9   10, 4HSWIT,4HCH-S,4HET-L,4HO an,4Hd/or,4H -HI,4H is ,4Hunde,           ERR-01  21
     1       4Hfine,4Hd   /                                                     ERR-01  22
C                                                                               MSG     94
C              MESSAGES 31 - 40                                                 MSG     95
C                                                                               MSG     96
      DATA MSG4/                                                                MSG     97
     1   30, 4HNO L,4HOAD-,4HMANA,4HGEME,4HNT M,4HAY C,4HAUSE,4H POO,           MSG     98
     2       4HR OP,4HRN  ,                                                     MSG     99
     3   81, 4HTHIS,4H ITE,4HM HA,4HS BE,4HEN F,4HETCH,4HED F,4HROM ,           MSG    100
     4       4HLIBR,4HARY ,                                                     MSG    101
     5   10, 4H    ,4H    ,4H    ,4H    ,4H    ,4H    ,4H    ,3*1H ,            MSG    102
     6   31, 4HSAVE,4HD FI,4HLES ,4HFROM,4H PRE,4HVIOU,4HS RU,4HN AS,           MSG    103
     7       4HSUME,4HD   ,                                                     MSG    104
     8   11, 4HMIXE,4HD PA,4HRAME,4HTER ,4HTYPE,4HS IN,4H LIS,4HT   ,           MSG    105
     9       4H    ,4H    ,                                                     MSG    106
     1   21, 4HDIAG,4HNOST,4HIC L,4HEVEL,4H IS ,4HABOV,4HE AB,4HORT ,           MSG    107
     2       4HLEVE,4HL   ,                                                     MSG    108
     3   11, 4HLIBR, 4HARY , 4HENTR, 4HY IS, 4H NOT, 4H COR, 4HRECT,            MSG    109
     4       4H TYP, 4HE   ,4H    ,                                             MSG    110
     5   11, 4HDATE, 4HS NO, 4HT IN, 4H SEQ, 4HUENC, 4HE   ,4*1H ,              MSG    111
     6   20, 10*4H    ,                                                         MSG    112
     7   20,4hRUN-,4hPERI,4hOD S,4hPANS,4h MOR,4hE TH,4hAN O,4hNE Y             MSG    113
     8     ,4hEAR.,4h     /                                                     MSG    114
C                                                                               MSG    115
C              MESSAGES 41 - 50                                                 MSG    116
C                                                                               MSG    117
      DATA MSG5/                                                                MSG    118
     1   11, 4HSET-,4HDEFA,4HULT ,4HNOT ,4HALLO,4HWED ,4HFOR ,4HTHIS,           MSG    119
     2       4H COM,4HMAND,                                                     MSG    120
     3   11, 4HMISP, 4HLACE, 4HD KE, 4HYWOR, 4HD   , 5*4H     ,                 MSG    121
     +   11, 4HVALU,4HES, ,4HTEMP,4H, OR,4H RAD,4HT RE,4HQUIR,4HED  ,           MSG    122
     +       1H ,1H ,                                                           MSG    123
     4   10, 4HSWIT,4HCH-S,4HET-L,4HO gr,4Heate,4Hr th,4Han S,4HWITC,           ERR-01  23
     4       4HH-SE,4HT-HI,                                                     ERR-01  24
     5   10, 4HSHAD,4HING-,4HCOEF,4H wit,4Hh GL,4HASS-,4HTYPE,4H-COD,           ERR-01  25
     5       4HE no,4Ht OK,                                                     ERR-01  26
     6   10, 4HOnly,4H one,4H BLI,4HND L,4HAYER,4H per,4H STR,4HUCTU,           ERR-01  27
     6       4HRE A,4HR   ,                                                     ERR-01  28
     7   10, 4HSTRU,4HCTUR,4HE re,4Hquir,4Hes o,4Hne g,4Hlass,4H lay,           ERR-01  29
     7       4Her  ,4H    ,                                                     ERR-01  30
     8   10, 4HDEFA,4HULT ,4HLIBR,4HARY ,4Hhas ,4Hno e,4Hntri,4Hes  ,           ERR-01  31
     8       4H    ,4H    ,                                                     ERR-01  32
     4   11, 4HILLE,4HGAL ,4HCOMM,4HAND ,4HIN P,4HARAM,4HETRI,                  MSG    125
     5       4HC RU,4HN   ,4H    ,                                              MSG    126
     6   81, 4HWILL,4H SKI,4HP TO,4H NEX,4HT TE,4HRMIN,4HATOR,3*1H /            MSG    127
C                                                                               MSG    128
C              MESSAGES 51 - 60                                                 MSG    129
C                                                                               MSG    130
      DATA MSG6/                                                                MSG    131
C            #51 is unused                                                      -034    50
     1   10, 4Hunus,4Hed  ,4H    ,4H    ,4H    ,4H    ,4H    ,                  -034    51
     2       4H    ,4H    ,4H    ,                                              -034    52
     3   11, 4HNOT ,4HENOU,4HGH D,4HATA ,4HFOR ,4HCURV,4HE-FI,                  MSG    134
     4       4HT TY,4HPE  ,4H    ,                                              MSG    135
     5   11, 4HPOIN,4HTS N,4HOT I,4HNDEP,4HENDE,4HNT -,4H FIT,                  MSG    136
     6       4H NOT,4H ALL,4HOWED,                                              MSG    137
     7   10, 4HTHER,4HMOCY,4HCLE ,4HREQU,4HIRES,4H A C,4HOMPR,4HESSI,           MSG    138
     8       4HON C,4HHLR ,                                                     MSG    139
     5   10, 4HA MA,4HTERI,4HAL p,4Hrope,4Hrty ,4His z,4Hero ,4Hor n,           ERR-01  33
     5       4Hegat,4Hive ,                                                     ERR-01  34
     6   10, 4HWALL,4H has,4H no ,4Hheat,4H cap,4Hacit,4Hy.  ,4HU-VA,           ERR-01  35
     6       4HLUE ,4Hused,                                                     ERR-01  36
     7   10, 4HLIBR,4HARY ,4Hdoes,4H not,4H beg,4Hin w,4Hith ,4HUNIT,           ERR-01  37
     7       4HS re,4Hcord,                                                     ERR-01  38
     8   10, 4HNum ,4Hof L,4HIBRA,4HRY e,4Hntri,4Hes e,4Hxcee,4Hds m,           ERR-01  39
     8       4Haxim,4Hum  ,                                                     ERR-01  40
     9   10, 4HLIBR,4HARY ,4HUNIT,4HS do,4H not,4H mat,4Hch I,4HNPUT,           ERR-01  41
     9       4H UNI,4HTS  ,                                                     ERR-01  42
     $   10, 4HMax ,4Hof 3,4H00 r,4Hecur,4Hsive,4H lib,4H fet,4Hchs ,           ERR-01  43
     $       4Hexce,4Heded/                                                     ERR-01  44
C                                                                               MSG    146
C              MESSAGES 61 - 70                                                 MSG    147
C                                                                               MSG    148
      DATA MSG7/                                                                MSG    149
     1   30, 4HLIGH,4HT-TO,4H-OTH,4HER s,4Hhoul,4Hd be,4H 0 i,4Hn th,           ERR-01  45
     1       4His S,4HPACE,                                                     ERR-01  46
     2   11, 4HSYNT,4HAX E,4HRROR,4H    ,4H    ,4H    ,4H    ,3*1H ,            MSG    151
     3   11, 4HMISS,4HING ,4HLEFT,4H PAR,4HENTH,4HESIS,4H    ,3*1H ,            MSG    152
     4   11, 4HUNBA,4HLANC,4HED P,4HAREN,4HTHES,4HIS  ,4H    ,3*1H ,            MSG    153
     5   11, 4HWRON,4HG NU,4HMBER,4H OF ,4HPARA,4HMETE,4HRS  ,3*1H ,            MSG    154
     6   11, 4HLIST,4H DID,4H NOT,4H END,4H WIT,4HH   ,4H)   ,3*1H ,            MSG    155
     7   11, 4HEMPT,4HY LI,4HST  ,4H    ,4H    ,4H    ,4H    ,3*1H ,            MSG    156
     8   11, 4HYEAR,4H NOT,4H SPE,4HCIFI,4HED  ,4H    ,4H    ,3*1H ,            MSG    157
     9   30, 4HINT-,4HWALL,4H-TYP,4HE is,4H cha,4Hnged,4H to ,4HADIA,           ERR-01  47
     9       4HBATI,4HC   ,                                                     ERR-01  48
     2   11, 4HERRO,4HR IN,4H NUM,4HERIC,4H INP,4HUT V,4HALUE,3*1H /            MSG    160
C                                                                               MSG    161
C              MESSAGES 71 - 80                                                 MSG    162
      DATA MSG8/                                                                MSG    163
     1   11, 4HEXPE,4HCTED,4H    ,4HTHRU,4H    ,4H    ,4H    ,3*1H ,            MSG    164
     2   30, 4HINT-,4HWALL,4H-TYP,4HE ha,4Hs be,4Hen c,4Hhang,4Hed t,           ERR-01  49
     2       4Ho AI,4HR   ,                                                     ERR-01  50
     3   11, 4HTYPE,4H    ,4HNOT ,4HFIRS,4HT KE,4HYWOR,4HD   ,3*1H ,            MSG    166
     4   11, 4HIMPR,4HOPER,4H COM,4HMAND,4H SEQ,4HUENC,4HE   ,3*1H ,            MSG    167
     5   31, 4HDATE,4HS NO,4HT IN,4H SEQ,4HUENC,4HE   ,4H    ,3*1H ,            MSG    168
     6   11, 4HINVA,4HLID ,4HMONT,4HH AB,4HBREV,4HIATI,4HON  ,3*1H ,            MSG    169
     7   10, 4HAIR ,4HWALL,4H can,4Hnot ,4Huse ,4HLAYE,4HR'd ,4HCONS,           ERR-01  51
     7       4HTRUC,4HTION,                                                     ERR-01  52
     9   11, 4HINSU,4HFFIC,4HIENT,4H DAT,4HA   ,4H    ,4H    ,3*1H ,            MSG    172
     1   31, 4HOPEN,4H-QUO,4HTE I,4HS NO,4HT AN,4H AST,4HERIS,                  MSG    173
     2       4HK   ,4H    ,4H    ,                                              MSG    174
     $   30, 4HU-VA,4HLUE ,4Htoo ,4Hsmal,4Hl fo,4Hr IN,4HT-WA,4HLL-T,           ERR-01  53
     $       4HYPE=,4HAIR /                                                     ERR-01  54
C                                                                               MSG    177
C              MESSAGES 81 - 90                                                 MSG    178
C                                                                               MSG    179
      DATA MSG9/                                                                MSG    180
     1   30, 4HNEXT,4H-TO ,4His n,4Hot u,4Hsed ,4Hfor ,4HADIA,4HBATI,           ERR-01  55
     1       4HC WA,4HLL  ,                                                     ERR-01  56
     2   11, 4HCANN,4HOT L,4HIKE ,4HSOME,4HTHIN,4HG TO,4H ITS,4HELF ,           MSG    182
     3       4H    ,4H    ,                                                     MSG    183
     4   11, 4HEXCE,4HEDED,4H LIM,4HIT O,4HF 20,4H CON,4HSTAN,4HTS  ,           MSG    184
     5       4H    ,4H    ,                                                     MSG    185
     6   11, 4HEXCE,4HEDED,4H STA,4HCK C,4HCAPA,4HCITY,4H    ,3*1H ,            MSG    186
     7   11, 4HUNRE,4HCOGN,4HIZAB,4HLE D,4HATA ,4H    ,4H    ,3*1H ,            MSG    187
     8   81, 4HWILL,4H SKI,4HP TO,4H NEX,4HT   ,4H)   ,4HOR  ,                  MSG    188
     9       4HTERM,4HINAT,4HOR  ,                                              MSG    189
     1   11, 4HCLOS,4HE-QU,4HOTE ,4HNOT ,4HFOUN,4HD BE,4HFORE,                  MSG    190
     2        4H END,4H OF ,4HCARD,                                             MSG    191
     3    11, 4HList,4H mus,4Ht be,4H enc,4Hlose,4Hd in,4H par,                 FIX11  152
     4        4Henth,4Heses,4H    ,                                             FIX11  153
     5   11, 4HWRON,4HG TY,4HPE O,4HF PA,4HRAME,4HTER ,4*1H ,                   MSG    194
     6   11, 4HILLE,4HGAL ,4HSYMB,4HOL  ,4H    ,4H    ,4H    ,3*1H /            MSG    195
C                                                                               MSG    196
C---- MESSAGES 91 - 100                                                         MSG    197
C--------- 100 :: ERROR : BOTH HEIGHT, WIDTH AND POLYGON ENTERED                MSG    198
C                                                                               MSG    199
      DATA MSG10/                                                               MSG    200
     1   10, 4HOUT-,4HSIDE,4H-HI ,4HNOT ,4HGREA,4HTER ,4HTHAN,                  MSG    201
     2       4H OUT,4H-SID,4HE-LO,                                              MSG    202
     3   11, 4HExpr,4Hessi,4Hons ,4Hnot ,4Hallo,4Hwed ,4Hin s,                  -034    53
     4       4Hub-c,4Homma,4Hnds ,                                              -034    54
     5   11, 4HINCO,4HRREC,4HT AM,4HOUNT,4H OF ,4HHOUR,4HLY D,                  MSG    205
     6       4HATA ,4H    ,4H    ,                                              MSG    206
     7   21, 4HHOUR,4H REF,4HEREN,4HCED ,4HTWIC,4HE   ,4H    ,3*1H ,            MSG    207
     8   11, 4HSTAR,4HTING,4H HOU,4HR GR,4HEATE,4HR TH,4HAN E,                  MSG    208
     9       4HNDIN,4HG HO,4HUR  ,                                              MSG    209
     1   21, 4HDAY ,4HREFE,4HRENC,4HED T,4HWICE,4H    ,4H    ,3*1H ,            MSG    210
     7   30, 4HU-VA,4HLE/A,4HDIAB,4HATIC,4H bad,4H for,4H WEI,4HGHTI,           ERR-01  57
     7       4HNG F,4HAC's,                                                     ERR-01  58
     4   11,4HINCO,4HNSIS,4HTENC,4HY IN,4H BDL,4HLIB ,4HUNIT,3*1H ,             MSG    213
     5   81,4HFOR ,4HLIB ,4HRUN ,4HOUTP,4HUT U,4HNIT ,4HIS M,4HEANI,            MSG    214
     6      4HNGLE,4HSS  ,                                                      MSG    215
     1   30,4HPOLY,4HGON ,4HDATA,4H WIL,4HL TA,4HKE P,4HRECE,4HDENC,            FIX10   11
     1      4HE   ,4H    /                                                      FIX10   12
C                                                                               MSG    218
C---- MESSAGES 101 - 110                                                        FIX11  154
C                                                                               MSG    220
       DATA  MSG11 /                                                            ERR-01  59
     1   10, 4HLess,4H tha,4Hn th,4Hree ,4HVERT,4HICES,4H spe,4Hcifi,           ERR-01  60
     1       4Hed  ,4H    ,                                                     ERR-01  61
     2   10, 4HVERT,4HICES,4H are,4H not,4H cou,4Hnter,4H-clo,4Hckwi,           ERR-01  62
     2       4Hse  ,4H    ,                                                     ERR-01  63
     3   10, 4HTwo ,4HVERT,4HICES,4H are,4H ide,4Hntic,4Hal  ,4H    ,           ERR-01  64
     3       4H    ,4H    ,                                                     ERR-01  65
     4   30, 4HNEXT,4H-TO ,4Hunus,4Hed i,4Hn IN,4HTERN,4HAL I,4HNTER,           ERR-01  66
     4       4HIOR ,4HWALL,                                                     ERR-01  67
     5   10, 4HINTE,4HRNAL,4H WAL,4HL ne,4Heds ,4HCONS,4HTRUC,4HTION,           ERR-01  68
     5       4H LAY,4HERS ,                                                     ERR-01  69
     6   10, 4HMULT,4Hlt1 ,4Hwill,4H mul,4Htipl,4Hy WI,4HNDOW,4HS/DO,           IcRink   2
     6       4HORS ,4Halso,                                                     ERR-01  71
     7   10, 4HTYPE,4H mus,4Ht ma,4Htch ,4HTYPE,4H in ,4Hlike,4Hd co,           FIX11  155
     7       4Hmman,4Hd   ,                                                     FIX11  156
     8   10, 4HTYPE,4H mus,4Ht be,4H spe,4Hcifi,4Hed f,4Hor t,4Hhis ,           FIX11  157
     8       4Hcomm,4Hand ,                                                     FIX11  158
     9   11, 4HExpr,4Hessi,4Hon n,4Hot a,4Hllow,4Hed f,4Hor t,4Hhis ,           DFTEXP 158
     9       4Hkeyw,4Hord ,                                                     DFTEXP 159
     $   11, 4HIlle,4Hgal ,4Hcomm,4Hand ,4Hin D,4HOE-2,4H DEF,4HAULT,           DFTEX2  29
     $       4H Lib,4Hrary/                                                     DFTEX2  30
C                                                                               METR1   15
C---- MESSAGES 111 - 120                                                        METR1   16
C                                                                               METR1   17
       DATA  MSG12 /                                                            METR1   18
     1   10, 4HKeyw,4H fil,4He un,4Hits ,4Hdo n,4Hot m,4Hatch,4H inp,           METR1   19
     1       4Hut u,4Hnits,                                                     METR1   20
     2   10, 4HG-Fu,4Hncti,4Hon l,4Hibra,4Hry L,4HTS_g,4Hfnc.,4Hbin ,           -048t    4
     2       4HErro,4Hr   ,                                                     -044c8   4
     3   10, 10*4H    ,                                                         METR1   22
     4   10, 10*4H    ,                                                         METR1   23
     5   10, 10*4H    ,                                                         METR1   24
     6   10, 10*4H    ,                                                         METR1   25
     7   10, 10*4H    ,                                                         METR1   26
     8   10, 10*4H    ,                                                         METR1   27
     9   10, 10*4H    ,                                                         METR1   28
     $   10, 10*4H    /                                                         METR1   29
C                                                                               MSG    229
      LEVEL  = MSGDSC(1,M)/10                                                   MSG    230
      MSGTOT(LEVEL) = MSGTOT(LEVEL) + 1                                         MSG    231
C              ALWAY PRINT SOME MESSAGES BUT DO NOT ABORT ON THEM               MSG    232
      IF(M .EQ. 36)  GOTO 10                                                    MSG    233
      IF (LEVEL.GT.MSGLVL) RETURN                                               MSG    234
C              IF FATAL, SET FLAG                                               MSG    235
      IF (LEVEL.LE.ABTLVL)  THEN                                                ERR-01  80
        IFATAL = IFATAL + 1                                                     ERR-01  81
C              Now place flag in 5th position of ref table (if exists)          DFTEX3 403
C               0 = old enrty, okay                                             DFTEX3 404
C               1 = old entry, with error                                       DFTEX3 405
C               2 = new entry                                                   DFTEX3 406
C               3 = new entry with error                                        DFTEX3 407
        IF(JREFcur .NE. 0)  THEN                                                DFTEX3 408
          I = IUNPKB(1,2,IREFTB(5,JREFcur))                                     DFTEX3 409
          IF(I .EQ. 0 .or. I .EQ. 2)  THEN                                      DFTEX3 410
            IREFTB(5,JREFcur) = IPACKB(1,2,I+1,IREFTB(5,JREFcur))               DFTEX3 411
          ENDIF                                                                 DFTEX3 412
        ENDIF                                                                   DFTEX3 413
      ENDIF                                                                     ERR-01  84
10    if ( ( NOECHO .ne. 0 ) .and. ( LEVEL  .gt. 3 ) )     return               MSG    237
C              GET UNDERLINE FLAG                                               MSG    238
   20 IUND   = MSGDSC(1,M) - LEVEL*10                                           MSG    239
      idum = mErr0( 1 )                                                         MSG    240
       call  LEEDER( MSGDSC(2,M), 10 )                                          MSG    241
      idum = mErr0( 3 )                                                         MSG    242
c                                                                               MSG    243
c---- give macro traceback                                                      MSG    244
c                                                                               MSG    245
      if ( LEVEL .lt. 4 )     call  mTrace                                      MSG    246
      IF((IPDFLG.ne.0).and.(LEVEL.LE.maxERR)) THEN                              -042L5b 75
       IF((Imsgflg.eq.0) .and. (LIBflg.ne.2)) THEN                              -042L5b 76
        dostr = 'DEFAULTING:  In  '                                             -042L5b 77
        IF(LIBflg .ne. 0) dostr = 'LIBRARY GET:  In '                           -042L5b 78
        IF(ISDflg .eq. 1) dostr = 'SET DEFAULT:  In '                           -042L5b 79
        namstr = ' '                                                            -042L5b 80
        if(JOPcur .ne. 0)  THEN                                                 -042L5b 81
          write (scrstr,9910) (IOPCDT(II,JOPcur),II=1,4)                        -042L5b 82
          namstr=char(13)//char(10)//dostr//scrstr(1:16)//char(32)              -042L5b 83
          if((ISDflg .eq. 0).and.(IOPCDT(11,JOPcur).ne. 0).and.                 -042L5b 84
     $       (JREFcur .ne. 0))  THEN                                            -042L5b 85
            JSYM = IREFTB(1,JREFcur)                                            -042L5b 86
            IF(JSYM .GT. 0)  THEN                                               -042L5b 87
              write (scrstr,9910) (ISYMTB(II,JSYM),II=1,8)                      -042L5b 88
            ELSE                                                                -042L5b 89
              write (scrstr,9912) (IOPCDT(II,JOPcur),II=1,4),                   -042L5b 90
     $                 (JREFcur-IOPCDT(14,JOPcur)+1)                            -042L5b 91
            ENDIF                                                               -042L5b 92
            scrstr2=namstr(1:36)//'named '//scrstr(1:32)                        -042L5b 93
     $                          //', the ERROR listed below was found.'         -042L5b 94
            namstr=scrstr2                                                      -042L5b 95
          endif                                                                 -042L5b 96
          if(JKWcur .ne. 0)  THEN                                               -042L5b 97
            JKW = IOPCDT(9,JOPcur) + JKWcur - 1                                 -042L5b 98
            IF(IOPCDT(24,JOPcur).lt.0)                                          -042L5b 99
     $        JKW = JKW + (JTYPcur-1)*IOPCDT(10,JOPcur)                         -042L5b100
            write (scrstr,9910) (KONTXT(II,JKW),II=1,4)                         -042L5b101
            ii = 36                                                             -042L5b102
            if((ISDflg .eq. 0).and.(JREFcur .ne. 0))  ii=75                     -042L5b103
            scrstr2=namstr(1:ii)//' the keyword '//scrstr(1:16)                 -042L5b104
     $                          //' has the ERROR listed below.'                -042L5b105
            namstr=scrstr2                                                      -042L5b106
          endif                                                                 -042L5b107
        else                                                                    -042L5b108
          L = (LSYMB/4) + 1                                                     -042L5b109
          write (scrstr,9930) (ISYMB(II),II=1,L)                                -042L5b110
 9930     FORMAT(21A4)                                                          -042L5b111
          namstr=char(13)//char(10)//'The last characters read were '           -042L5b112
     $           //char(39)//scrstr(1:LSYMB)//char(39)                          -042L5b113
        endif                                                                   -042L5b114
        if((namstr .ne. ' ').AND.(JOPcur .ne. 0))  THEN                         -042L5b115
          l = len(namstr) - 1                                                   -042L5b116
          ii=1                                                                  -042L5b117
  905       if((namstr(ii:ii+1) .eq. '  ').or.(namstr(ii:ii+1).eq.' ,'))        -042L5b118
     $        THEN                                                              -042L5b119
              namstr(ii:)=namstr(ii+1:)                                         -042L5b120
              l = l - 1                                                         -042L5b121
              ii=ii-1                                                           -042L5b122
            ENDIF                                                               -042L5b123
          ii=ii+1                                                               -042L5b124
          if(ii .lt. l)  goto 905                                               -042L5b125
        endif                                                                   -042L5b126
        write (msgstr,9910) (MSGDSC(II,M),II=2,11)                              -042L5b127
        write (nmsgstr,9920) M                                                  -042L5b128
 9910   FORMAT(10A4)                                                            -042L5b129
 9912   FORMAT(4A4,' number',I9)                                                -042L5b130
 9920   FORMAT(' (MSG1 #',I3,')')                                               -042L5b131
        IF (Imsgflg .eq. 0)  Iret=messageboxi( NULL,                            045a1    2
     $    'An ERROR caused the listed component to be marked bad. '             -042L5b133
     $    //nmsgstr//namstr//char(10)//char(13)                                 -042L5b134
     $    //char(13)//char(10)//msgstr//char(13)//char(10)                      -042L5b135
     $    //char(13)//char(10)//                                                -042L5b136
     $    'This must be corrected before a simulation is possible.'//           -042L5b137
     $    char(13)//char(10)//'Select CANCEL for no more messages'//            -042L5b138
     $    char(0),'DOE-2.2'//char(39)//'s BDL Server found an ERROR'            -042L5b139
     $    //char(0),MB_OKCANCEL + MB_ICONEXCLAMATION + MB_TASKMODAL )           -042L5b140
        IF(Iret .eq. IDCANCEL) Imsgflg = 1                                      -042L5b141
       ENDIF                                                                    -042L5b142
       IF((Imsgflg.ne.0).and.(pcallbackfuncERR.ne.0))  THEN                     -042L5b143
        IerrNum    = M                                                          -042L5b144
        IerrLine   = KRDNUM                                                     -042L5b145
        IerrCmd    = JOPcur                                                     -042L5b146
        IerrCmdTyp = JTYPcur                                                    -042L5b147
        IerrSym    = 0                                                          -042L5b148
        IerrKey    = 0                                                          -042L5b149
        IF(JOPcur .ne. 0)  THEN                                                 -042L5b150
          if((ISDflg .eq. 0).and.(IOPCDT(11,JOPcur).ne. 0).and.                 -042L5b151
     $       (JREFcur .ne. 0)) IerrSym = IREFTB(1,JREFcur)                      -042L5b152
          if(JKWcur .ne. 0)  THEN                                               -042L5b153
            IerrKey = IOPCDT(9,JOPcur) + JKWcur - IOPCDT(9,1)                   -042L5b154
            IF(IOPCDT(24,JOPcur).lt.0)                                          -042L5b155
     $         IerrKey = IerrKey + (JTYPcur-1)*IOPCDT(10,JOPcur)                -042L5b156
          Endif                                                                 -042L5b157
        ENDIF                                                                   -042L5b158
        CALL FILLN ( IBLANK,IerrTxt(11),246)                                    -042L5b159
        DO II=1,10                                                              -042L5b160
          IerrTxt(II)=MSGDSC(II+1,M)                                            -042L5b161
        ENDDO                                                                   -042L5b162
        Iret = performcallback1( pCallbackFuncERR,LEVEL )                       -042L5b163
        if( Iret .ne. 0 ) IwinReturn = 1                                        -042L5b164
       ENDIF                                                                    -042L5b165
      ENDIF                                                                     -042L5b166
      RETURN                                                                    MSG    247
      END                                                                       MSG    248
      SUBROUTINE MSG2 (M, I1, I2, I3, I4)                                       MSG2     2
C                                                                               MSG2     3
C                                                                               MSG2     4
C              MSGTBL(M) = LEVEL*1000 + UNDER*100 + NARROW*10 + LEADFLAG        MSG2     5
C                                                                               MSG2     6
      USE ERR_MOD                                                               -048   171
      USE MSGBOX                                                                -048   172
      CHARACTER*1024 OUTstr,OUTstr2                                             ERR-01  85
      INTEGER FMTSTR                                                            ERR-01  86
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /IUNDER/  IUND, LEVEL, IUNDER(82)                                  /IUNDER/ 2
      COMMON /IUNITS/ VKONV(300),DUMLOG(4),JUNITS(4,300,2),NUNITS,KUNITS        UNITS1   1
      INTEGER DUMLOG                                                            SUBTY1   1
      DIMENSION IUNITS(4,300)                                                   UNITS1   2
      EQUIVALENCE (IUNITS(1,1),JUNITS(1,1,1))                                   /IUNITS/ 4
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON /PREFIX/ PREFIX(3,10)                                              FIX11    3
      DIMENSION ERRPX(3), WARPX(3), CAUPX(3), DEFPX(3), INPPX(3),               /PREFIX/ 3
     1      LIKPX(3), NOTPX(3), FROPX(3), LIBPX(3), UDFPX(3)                    FIX11    4
      EQUIVALENCE (ERRPX(1),PREFIX(1,1)), (WARPX(1),PREFIX(1,2)),               /PREFIX/ 5
     1            (CAUPX(1),PREFIX(1,3)), (DEFPX(1),PREFIX(1,4)),               /PREFIX/ 6
     2            (INPPX(1),PREFIX(1,5)), (LIKPX(1),PREFIX(1,6)),               /PREFIX/ 7
     3            (FROPX(1),PREFIX(1,7)), (NOTPX(1),PREFIX(1,8)),               FIX11    5
     4            (LIBPX(1),PREFIX(1,9)), (UDFPX(1),PREFIX(1,10))               FIX11    6
C                                                                               /PREFIX/ 9
      COMMON /PDARGSL/ loc_args                                                 /PDARGL/ 2
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  -042L5b167
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON /DFT_STR/ numDFT,idftStr(3,1024)                                   -042L5b 19
      INTEGER   CONVERT4                                                        -042L5b174
      INTEGER*1 CONVERT1(4)                                                     -042L5b175
      EQUIVALENCE (CONVERT1,CONVERT4)                                           -042L5b176
      character*40  scrstr                                                      -042L5b177
      character*12  nmsgstr                                                     -042L5b178
      character*17  dostr                                                       -042L5b179
      character*132 namstr,scrstr2                                              -042L5b180
      DIMENSION   I1(8), I2(8), I3(8), I4(8), MSGTBL(180)                       -031     1
      DATA MSGTBL/                                                              MSG2    16
     1   4010,4000,4010,4000,4010,4000,4010,4000,5010,5000,                     MSG2    17
     2   5010,5000,5010,5000,5010,5000,1001,3101,1101,3101,                     MSG2    18
     3   1101,1001,1101,1011,1001,1001,8000,1101,1001,1101,                     FIX11  160
     4   6010,6010,6010,6010,6010,6010,6010,6010,7010,7010,                     MSG2    20
     5   7010,7010,7010,7010,7010,7010,2011,3011,8000,1001,                     FLOOR1   2
     6   8000,1001,1001,1001,1001,1001,2001,1001,3001,1001,                     DFTEX3 414
     7   1001,1001,2001,1001,2001,2001,2001,1001,1001,8001,                     ERR-01  91
     8   2001,1101,1101,1001,2001,1001,1001,1001,1001,1001,                     ERR-02   1
     9   1001,2101,1001,1001,1001,1001,1001,1101,2001,1001,                     FLOOR1   3
     9   1001,2001,2001,2001,2001,1001,1001,1001,1001,1001,                     ERR-01  93
     $   1001,1001,1001,1001,1001,1001,1001,1001,1001,1001,                     ERR-01  94
     1   1001,1001,1001,1001,1001,1001,1001,1001,1001,1001,                     ERR-01  95
     2   1001,1001,1001,1001,2001,1001,2001,1001,1001,1001,                     ERR-01  96
     3   2001,2001,2001,2001,1001,3001,1001,1001,1001,1001,                     ERR-01  97
     4   1001,1001,1001,1001,1001,2001,2001,1001,1001,1001,                     ERR-01  98
     5   1001,1001,1001,1001,1001,1001,1001,1001,1001,1001,                     FIX11  161
     6   9010,9000,9010,9000,9010,9000,9010,9000,10010,10000,                   FIX11  162
     7   10010,10000,10010,10000,10010,10000,1001,1001,2101,1001                NAMELG   1
     8   /                                                                      -031     3
C                                                                               MSG2    26
      MSGTBL(80) = 1001                                                         MSG2    27
C              IF USER DOES NOT WANT LIMIT CHECK RESET LEVEL OF MSG             MSG2    28
      IF(NOLIMS .EQ. 1)  MSGTBL(28) = 3101                                      MSG2    29
      IF(NOLIMS.EQ.0) MSGTBL(28) = 1101                                         MSG2    30
      LEVEL  = MSGTBL(M)/1000                                                   MSG2    31
      MSGTOT(LEVEL) = MSGTOT(LEVEL) + 1                                         MSG2    32
      IF (LEVEL.GT.MSGLVL) RETURN                                               MSG2    33
C              IF FATAL ERROR, SET FLAG                                         MSG2    34
      IF (LEVEL.LE.ABTLVL) THEN                                                 ERR-01 100
        IFATAL = IFATAL + 1                                                     ERR-01 101
C              Now place flag in 5th position of ref table (if exists)          DFTEX3 415
C               0 = old enrty, okay                                             DFTEX3 416
C               1 = old entry, with error                                       DFTEX3 417
C               2 = new entry                                                   DFTEX3 418
C               3 = new entry with error                                        DFTEX3 419
        IF(JREFcur .NE. 0)  THEN                                                DFTEX3 420
          I = IUNPKB(1,2,IREFTB(5,JREFcur))                                     DFTEX3 421
          IF(I .EQ. 0 .or. I .EQ. 2)  THEN                                      DFTEX3 422
            IREFTB(5,JREFcur) = IPACKB(1,2,I+1,IREFTB(5,JREFcur))               DFTEX3 423
          ENDIF                                                                 DFTEX3 424
        ENDIF                                                                   DFTEX3 425
      ENDIF                                                                     ERR-01 104
      DO II=1,1024                                                              ERR-01 105
        OUTstr(II:II) = char(32)                                                ERR-01 106
      ENDDO                                                                     ERR-01 107
C              IF ECHO WANTED                                                   MSG2    36
      if ( ( NOECHO .ne. 0 ) .and. ( LEVEL  .gt. 3 ) )     return               MSG2    37
      IUND  = MSGTBL(M)/100 - LEVEL*10                                          MSG2    38
      NARR  = MSGTBL(M)/10  - LEVEL*100  - IUND*10                              MSG2    39
      LEAD  = MSGTBL(M)     - LEVEL*1000 - IUND*100 - NARR*10                   MSG2    40
      M2     = M                                                                MSG2    41
      IF ((NARR.NE.0).AND.(NARROW.NE.0)) M2 = M2 + 1                            MSG2    42
      IF (LEAD.EQ.0) GO TO 100                                                  MSG2    43
      idum = mErr0( 1 )                                                         MSG2    44
       call  LEEDER( KCSP, 1 )                                                  MSG2    45
      idum = mErr0( 3 )                                                         MSG2    46
C                                                                               MSG2    47
  100 GO TO (101, 102, 103, 104, 105, 106, 107, 108, 101, 102,                  MSG2    48
     1      103, 104, 105, 106, 107, 108, 117, 118, 119, 120,                   MSG2    49
     2      121, 122, 123, 124, 108, 126, 127, 128, 129, 130,                   FIX14  110
     3      101, 102, 103, 104, 105, 106, 107, 108, 101, 102,                   MSG2    51
     4      103, 104, 105, 106, 107, 108, 147, 108, 149, 150,                   FIX14  111
     5      151, 152, 153, 154, 155, 156, 157, 158, 159, 160,                   MSG2    53
     6      161, 162, 163, 164, 165, 166, 167, 168, 169, 170,                   MSG2    54
     7      171, 172, 173, 174, 175, 176, 177, 178, 179, 180,                   FLOOR1   5
     8      181, 182, 183, 184, 185, 186, 187, 188, 189, 190,                   FLOOR1   6
     9      191,192,193,194,195,196,197,198,199,200,                            ERR-01 108
     $      201,202,203,204,205,206,207,208,209,210,                            ERR-01 109
     1      211,212,213,214,215,216,217,218,219,220,                            ERR-01 110
     2      221,222,223,224,225,226,227,228,229,230,                            ERR-01 111
     3      231,232,233,234,235,236,237,238,239,240,                            ERR-01 112
     4      241,242,243,244,245,246,247,248,249,250,                            ERR-01 113
     5      251,252,253,254,255,256,257,258,259,260,                            FIX11  164
     6      101,102,103,104,105,106,107,108,101,102,                            FIX11  165
     7      103,104,105,106,107,108,277,278,279,280                             -031     4
     8      ), M2                                                               -031     5
  101 WRITE(OUTstr,1001,ERR=99004)(PREFIX(I,LEVEL),I=1,3),(I1(I),I=1,8),        FIX11  167
     1                  (I2(I),I=1,4),                                          MSG2    58
     2      I3(1), (IUNITS(I,I4(1)),I=1,4)                                      MSG2    59
99004 CONTINUE                                                                  MSG2    60
 1001 FORMAT(3A4, 8A4,  6(2H- ),1X,4A4,2H =,F29.4,1X,4A4)                       FIX11  168
      GO TO 900                                                                 MSG2    62
  102 WRITE(OUTstr,1002,ERR=99005)(PREFIX(I,LEVEL),I=1,3),(I1(I),I=1,8),        FIX11  169
     1                  (I2(I),I=1,4),                                          MSG2    64
     2      I3(1), (IUNITS(I,I4(1)),I=1,4)                                      MSG2    65
99005 CONTINUE                                                                  MSG2    66
 1002 FORMAT(3A4, 8A4, 2H- ,1X,4A4,2H =,F29.4,1X,4A4)                           FIX11  170
      GO TO 900                                                                 MSG2    68
  103 WRITE(OUTstr,1003,ERR=99006)(PREFIX(I,LEVEL),I=1,3),(I2(I),I=1,4),        ERR-01 117
     1      I3(1), (IUNITS(I,I4(1)),I=1,4)                                      MSG2    70
99006 CONTINUE                                                                  MSG2    71
 1003 FORMAT(3A4, 44X     ,1X,4A4,2H =,F29.4,1X,4A4)                            FIX11  171
      GO TO 900                                                                 MSG2    73
  104 WRITE(OUTstr,1004,ERR=99007)(PREFIX(I,LEVEL),I=1,3),(I2(I),I=1,4),        ERR-01 118
     1      I3(1), (IUNITS(I,I4(1)),I=1,4)                                      MSG2    75
99007 CONTINUE                                                                  MSG2    76
 1004 FORMAT(3A4, 34X     ,1X,4A4,2H =,F29.4,1X,4A4)                            FIX11  172
      GO TO 900                                                                 MSG2    78
  105 WRITE(OUTstr,1005)(PREFIX(I,LEVEL),I=1,3),(I1(I),I=1,8),                  FIX11  173
     1      (I2(I),I=1,4), (I3(I),I=1,8)                                        FIX11  174
 1005 FORMAT(3A4, 8A4,  6(2H- ),1X, 4A4, 3H = ,8A4)                             FIX11  175
      GO TO 900                                                                 MSG2    82
  106 WRITE(OUTstr,1006)(PREFIX(I,LEVEL),I=1,3),(I1(I),I=1,8),                  FIX11  176
     1      (I2(I),I=1,4), (I3(I),I=1,8)                                        FIX11  177
 1006 FORMAT(3A4, 8A4, 6(2H- ),1X, 4A4, 3H = ,8A4)                              FIX14  112
      GO TO 900                                                                 MSG2    86
  107 WRITE(OUTstr,1007)(PREFIX(I,LEVEL),I=1,3),                                ERR-01 121
     1      (I2(I),I=1,4), (I3(I),I=1,8)                                        FIX11  179
 1007 FORMAT(3A4, 45X, 4A4, 3H = ,8A4)                                          FIX11  180
      GO TO 900                                                                 MSG2    90
  108 WRITE(OUTstr,1008)(PREFIX(I,LEVEL),I=1,3),                                ERR-01 122
     1      (I2(I),I=1,4), (I3(I),I=1,8)                                        FIX11  181
 1008 FORMAT(3A4, 45X, 4A4, 3H = ,8A4)                                          FIX14  113
      GO TO 900                                                                 MSG2    94
  117 WRITE(OUTstr,1017) ERRPX, (I1(I),I=1,8), I2(1)                            FIX14  114
 1017 FORMAT(3A4,8A4,' was referenced on line',I6,' but never defined.')        FIX14  115
      GO TO 900                                                                 MSG2    98
  118 WRITE(OUTstr,1018,ERR=99008) CAUPX, I1(1)                                 ERR-01 124
99008 CONTINUE                                                                  MSG2   100
 1018 FORMAT(3A4,31H VALUE GREATER THAN MAXIMUM OF  ,E13.4)                     MSG2   101
      GO TO 900                                                                 MSG2   102
  119 WRITE(OUTstr,1019) ERRPX, I1(1)                                           ERR-01 125
 1019 FORMAT(3A4, 25H EXCEEDED LIST MAXIMUM OF ,I4, 6H ITEMS )                  MSG2   104
      GO TO 900                                                                 MSG2   105
  120 WRITE(OUTstr,1020) CAUPX, I1(1)                                           ERR-01 126
 1020 FORMAT(3A4,20H LITERAL LONGER THAN ,I3,19H CHARACTERS. EXCESS ,           MSG2   107
     1   8H IGNORED )                                                           MSG2   108
      GO TO 900                                                                 MSG2   109
  121 WRITE(OUTstr,1021) ERRPX, (I2(i), i=1,8), I1(1)                           FIX14  116
 1021 FORMAT(3A4,'The name ',8a4,' was already used on line ',I5)               FIX14  117
      GO TO 900                                                                 MSG2   112
  122 WRITE(OUTstr,1022) ERRPX, (I1(I),I=1,4)                                   ERR-01 128
 1022 FORMAT(3A4,38HINPUT DATA MUST INCLUDE AT LEAST ONE   , 4A4,               MSG2   114
     1       8H COMMAND)                                                        MSG2   115
      GO TO 900                                                                 MSG2   116
  123 WRITE(OUTstr,1023) ERRPX, I1(1)                                           ERR-01 129
 1023 FORMAT(3A4,33HEXCEEDED MAXIMUM FOR THIS ITEM OF,I5)                       MSG2   118
      GO TO 900                                                                 MSG2   119
C              Required keyword ERROR (with and without leader)                 FIX14  118
  124 IF(I4(1) .eq. 1)  GOTO 106                                                FIX14  119
      GOTO 108                                                                  FIX14  120
  126 WRITE(OUTstr,1026) ERRPX, (I1(I),I=1,8)                                   -043a    2
 1026 FORMAT(3A4,'Insufficient data for ',8A4)                                  -043a    3
      GO TO 900                                                                 MSG2   122
  127 WRITE(IOUTPT,10271)                                                       FIX11  183
      WRITE(OUTstr,1027) NOTPX, (I1(I),I=1,8)                                   FIX11  184
 1027 FORMAT(3A4,8X,9HDATA FOR , 4X, 8A4)                                       FIX11  185
10271 FORMAT(1H )                                                               FIX11  186
      GO TO 900                                                                 MSG2   125
  128 IF(NOLIMS .EQ. 0) WRITE(OUTstr,1028,ERR=99012) ERRPX, I1(1), I2(1)        ERR-01 132
99012 CONTINUE                                                                  MSG2   127
      IF(NOLIMS .EQ. 1) WRITE(OUTstr,1028,ERR=99013) CAUPX, I1(1), I2(1)        ERR-01 133
99013 CONTINUE                                                                  MSG2   129
 1028 FORMAT(3A4,17HVALUE NOT BETWEEN ,F14.4, 4H AND ,F14.4)                    MSG2   130
      GO TO 900                                                                 MSG2   131
  129 WRITE(OUTstr,1029) ERRPX, (I1(I),I=1,8)                                   ERR-01 134
 1029 FORMAT(3A4,8A4,' not found in LIBRARY')                                   ERR-01 135
      GO TO 900                                                                 MSG2   135
  130 WRITE(OUTstr,1030) ERRPX, I1(1), (I2(I),I=1,4)                            ERR-01 136
 1030 FORMAT(3A4,29HSYMBOL WAS REFERENCED ON LINE ,I5,  8H AS A    ,4A4)        MSG2   137
      GO TO 900                                                                 MSG2   138
C              Unused keyword WARNING (with and without leader)                 FIX14  121
  147 IF(I4(1) .eq. 1)  GOTO 106                                                FIX14  122
      GOTO 108                                                                  FIX14  123
  149 WRITE(OUTstr,1049) NOTPX, (I1(I),I=1,4)                                   ERR-01 137
 1049 FORMAT(3A4, 3HNO  ,4A4,17H, DEFAULT ASSUMED )                             MSG2   140
      GO TO 900                                                                 MSG2   141
  150 WRITE(OUTstr,1050) ERRPX, (I1(I),I=1,4), (I2(I),I=1,4),                   ERR-01 138
     1                   (I3(I),I=1,4)                                          MSG2   143
 1050 FORMAT(3A4,'If ',4A4,' is ',4A4,', then ',4A4,                            ERR-01 139
     $           ' must be specified.')                                         ERR-01 140
      GO TO 900                                                                 MSG2   145
  151 WRITE(OUTstr,1051) NOTPX                                                  ERR-01 141
 1051 FORMAT(3A4,44HLOCATION UNDEFINED.  SHADING MAY BE IN ERROR )              MSG2   147
      GO TO 900                                                                 MSG2   148
  152 WRITE(OUTstr,1052) ERRPX, (I1(I),I=1,4)                                   ERR-01 142
 1052 FORMAT(3A4, 5HNO    ,4A4, 7H  INPUT )                                     MSG2   150
      GO TO 900                                                                 MSG2   151
  153 WRITE(OUTstr,1053) ERRPX, (I1(I),I=1,4)                                   ERR-01 143
 1053 FORMAT(3A4, 6HLIKED ,4A4, 14H NOT SAME TYPE )                             MSG2   153
      GO TO 900                                                                 MSG2   154
  154 WRITE(OUTstr,1054) ERRPX, (I1(I),I=1,4)                                   ERR-01 144
 1054 FORMAT(3A4, 4A4, 33H NOT LEGAL TYPE FOR VARIABLE-TYPE )                   MSG2   156
      GO TO 900                                                                 MSG2   157
  155 WRITE(OUTstr,1055) ERRPX, I1(1), I2(1), I3(1)                             ERR-01 145
 1055 FORMAT(3A4, 5HITEM , I2, 1H=, I3, 20H MAXIMUM ALLOWED IS , I3)            MSG2   159
      GO TO 900                                                                 MSG2   160
  156 WRITE(OUTstr,1056) ERRPX,(I1(I),I=1,4),(I2(I),I=1,2),(I3(I),I=1,4)        ERR-01 146
 1056 FORMAT(3A4,3HIF ,4A4,4H IS ,2A4,1H,,4A4,14H MUST BE INPUT)                MSG2   162
      GO TO 900                                                                 MSG2   163
  157 WRITE(OUTstr,1057) WARPX,(I1(I),I=1,4),(I2(I),I=1,2),(I3(I),I=1,4)        ERR-01 147
 1057 FORMAT(3A4,3HIF ,4A4,4H IS ,2A4,1H,,4A4,16H SHOULD BE INPUT)              MSG2   165
      GO TO 900                                                                 MSG2   166
  158 WRITE(OUTstr,1058) ERRPX,(I2(I),I=1,4),(I1(I),I=1,4)                      DFTEX4 160
 1058 FORMAT(3A4,'A PARENT ',4A4,                                               DFTEX4 161
     $           ' must be defined before you can define this ',4A4)            DFTEX4 162
      GO TO 900                                                                 MSG2   169
  159 WRITE(OUTstr,1059) CAUPX, (I1(I),I=1,4),(I2(I),I=1,4)                     ERR-01 149
 1059 FORMAT(3A4,4A4,' + ',4A4,' X AREA is used in hourly calculation.')        NEWEXP  21
      GO TO 900                                                                 MSG2   172
  160 WRITE(OUTstr,1060) ERRPX,(I1(I),I=1,4),(I2(I),I=1,2),(I3(I),I=1,4)        DFTEX3 428
 1060 FORMAT(3A4,'IF ',4A4,' IS ',2A4,', ',4A4,' CANNOT BE USED')               DFTEX3 429
      GO TO 900                                                                 MSG2   175
  161 WRITE(OUTstr,1061) ERRPX, (I1(I),I=1,4)                                   ERR-01 151
 1061 FORMAT(3A4,11HMISLOCATED ,4A4,8H COMMAND)                                 MSG2   177
      GO TO 900                                                                 MSG2   178
  162 WRITE(OUTstr,1062) ERRPX, (I1(I),I=1,4), I2(1), I3(1)                     ERR-01 152
 1062 FORMAT(3A4,10HNUMBER OF ,4A4,3H = ,I3,20H MAXIMUM ALLOWED IS ,            MSG2   180
     1       I3)                                                                MSG2   181
      GO TO 900                                                                 MSG2   182
  163 WRITE(OUTstr,1063) WARPX, (I1(I),I=1,8)                                   ERR-01 153
 1063 FORMAT(3A4                                                                ERR-01 154
     $,'Custom weighting factors cannot be calculated for '                     ERR-01 155
     $,'SPACE ',8A4                                                             ERR-01 156
     $,' since it has fewer than two opaque surfaces. '                         ERR-01 157
     $,'ASHRAE weighting factors with floor weight of 70 lb/ft2 '               ERR-01 158
     $,'(342 kg/m2) will be used for this space.' )                             ERR-01 159
      GO TO 900                                                                 MSG2   185
  164 WRITE(OUTstr,1064) ERRPX, (I1(I),I=1,8),(I2(I),I=1,4)                     ERR-01 160
 1064 FORMAT(3A4,' Destination for LIGHT HEAT from ',8A4                        ERR-01 161
     $,' is a ',4A4,' - That is not allowed.')                                  REFG     9
      GO TO 900                                                                 MSG2   189
  165 WRITE(OUTstr,1065) WARPX, (I1(I),I=1,8),I2(1),I3(1),I4(1)                 REFG    10
 1065 FORMAT(3A4,'SPACE ',8A4,' has ',I3,' delayed walls ,'                     ERR-01 164
     $,I3,' delayed floors and ',I3,' delayed ceilings. '                       ERR-01 165
     $,'There should be at least a delayed wall and floor, '                    ERR-01 166
     $,'a delayed wall and ceiling, or a delayed ceiling '                      ERR-01 167
     $,'and floor for custom weighting factors to be calculated. '              ERR-01 168
     $,'ASHRAE weighting factors with floor weight of 70 lb/ft2 '               ERR-01 169
     $,'(342 kg/m2) will be used for this space.' )                             ERR-01 170
      GO TO 900                                                                 MSG2   196
  166 WRITE(OUTstr,1066) WARPX, (I1(I),I=1,8)                                   ERR-01 171
 1066 FORMAT(3A4,'Custom weighting factors cannot be calculated for '           DFTEX3 430
     $,'SPACE ',8A4,' because it has furniture but no valid floor. '            ERR-01 173
     $,'ASHRAE weighting factors with floor weight of 70 lb/ft2 '               ERR-01 174
     $,'(342 kg/m2) will be used instead. '                                     ERR-01 175
     $,'If floor is an exterior wall, underground surface '                     ERR-01 176
     $,'or interior wall defined in this space be sure tilt = 180. '            ERR-01 177
     $,'If floor is an interior wall defined in an adjacent space '             ERR-01 178
     $,'be sure tilt = 0.')                                                     ERR-01 179
      GO TO 900                                                                 MSG2   202
  167 WRITE(OUTstr,1067) WARPX,(I1(I),I=1,8),I2(1)                              ERR-01 180
 1067 FORMAT(3A4,'Custom weighting factors cannot be calculated for '           ERR-01 181
     $,'space ',8A4                                                             ERR-01 182
     $,' because the of the sum of the solar fractions '                        ERR-01 183
     $,'for the SPACE (',F8.3,') exceeds 1.0 even though some of the '          REFG    11
     $,'solar fractions are zero. ASHRAE weighting factors with '               ERR-01 185
     $,'floor weight of 70 lb/ft2 (342 kg/m2) will be used '                    ERR-01 186
     $,'for this space.')                                                       ERR-01 187
      GO TO 900                                                                 MSG2   207
  168 WRITE(OUTstr,1068) ERRPX,(I1(I),I=1,4),(I2(I),I=1,4),(I3(I),I=1,4)        ERR-01 188
 1068 FORMAT(3A4,4A4,17H REFERENCED AS A ,4A4,4H IN ,4A4)                       MSG2   209
      GO TO 900                                                                 MSG2   210
  169 WRITE(OUTstr,1069) ERRPX, I1(1)                                           ERR-01 189
 1069 FORMAT(3A4,'There must be at least ',I1,' RUN-PERIODs',                   FIX8     3
     $       ' or DESIGN-DAYs defined')                                         FIX8     4
      GO TO 900                                                                 MSG2   213
  170 WRITE(OUTstr,1070) NOTPX, (I1(I),I=1,8)                                   FIX14  124
 1070 FORMAT(3A4,'SPACE',8A4,' has no exterior surfaces')                       FIX14  125
      GO TO 900                                                                 MSG2   216
  171 WRITE(OUTstr,1071) WARPX, (I1(I),I=1,8), I2(1)                            ERR-01 191
 1071 FORMAT(3A4,'In the custom weighting factor calculation for '              DFTEX3 431
     $,'space ',8A4,' the solar fractions sum to ',F8.3,'. '                    REFG    12
     $,'The solar fractions will be adjusted to sum to 1.0.')                   ERR-01 194
      GO TO 900                                                                 MSG2   223
  172 WRITE(OUTstr,1072) ERRPX, (I1(I),I=1,4), (I2(I),I=1,4)                    ERR-01 195
 1072 FORMAT(3A4,4A4,5H AND ,4A4,17H ARE INCOMPATIBLE)                          MSG2   225
      GO TO 900                                                                 MSG2   226
  173 WRITE(OUTstr,1073) ERRPX, (I1(I),I=1,2)                                   ERR-01 196
 1073 FORMAT(3A4,5HFILE ,2A4,17H EMPTY OR MISSING)                              MSG2   228
      GO TO 900                                                                 MSG2   229
  174 IF (I3(1) .EQ. 0)  WRITE(OUTstr,1074) ERRPX, (I1(I),I=1,8), I2(1)         -043a    4
      IF (I3(1) .EQ. 1)  WRITE(OUTstr,2074) ERRPX, I1(1)                        ERR-01 198
 1074 FORMAT(3A4,'EXTERIOR-WALL ',8A4,' defined on line',I7,                    -043a    5
     1           ' has a negative net area')                                    -043a    6
 2074 FORMAT(3A4,'EXTERIOR-WALL number',I7,' has a negative net area')          -043a    7
      GO TO 900                                                                 MSG2   235
  175 WRITE(OUTstr,1075) WARPX,(I1(I),I=1,4)                                    ERR-01 199
 1075 FORMAT(3A4,13HDEFAULTS FOR ,4A4,21H WILL ALSO BE CHANGED)                 MSG2   237
      GO TO 900                                                                 MSG2   238
  176 WRITE(OUTstr,1076) ERRPX, (I1(I),I=1,4), I2(1)                            ERR-01 200
 1076 FORMAT(3A4,'Duplicate name in library input. ',4A4,                       ERR-01 201
     $       ' already used on line ',I5)                                       ERR-01 202
      GO TO 900                                                                 MSG2   242
  177 WRITE(OUTstr,1077) ERRPX, (I1(I),I=1,8)                                   -043a    8
 1077 FORMAT(3A4,'Can not simulate LAYERS ',8A4,' as given. ',                  -043a    9
     $           'The wall is too thick or too dense.')                         ERR-01 205
      GOTO  900                                                                 MSG2   246
  178 WRITE(OUTstr,1078) ERRPX, (I1(I), I=1,7)                                  ERR-02   2
 1078 FORMAT( 3A4, 1X, 7A4, 23H MUST BOTH BE SPECIFIED )                        MSG2   248
      GO TO 900                                                                 MSG2   249
  179 WRITE(OUTstr,1079) ERRPX, (I1(I),I=1,8)                                   -043a   10
 1079 FORMAT(3A4,'Cannot simulate LAYERS ',8A4,' as given. '                    -043a   11
     1,'The wall is too thin or too light. '                                    ERR-01 209
     2,'THICKNESS and/or DENSITY*SPECIFIC HEAT is too small.'                   ERR-01 210
     4,' Use U-VALUE CONSTRUCTION.')                                            ERR-01 211
          GOTO  900                                                             MSG2   255
  180 WRITE(OUTstr,1080)  ERRPX                                                 ERR-01 212
1080  FORMAT( 3A4, 32HBAD POSITION OF FUNCTION COMMAND )                        MSG2   257
      GO TO 900                                                                 MSG2   258
  181 IF (I3(1).EQ.0) WRITE(OUTstr,1081) ERRPX,(I1(I),I=1,8),I2(1)              -043a   12
      IF (I3(1).EQ.1) WRITE(OUTstr,2081) ERRPX,I1(1)                            ERR-01 214
 1081 FORMAT (3A4,'INTERIOR-WALL ',8A4,'defined on line',I7,                    -043a   13
     1            ' has a negative net area')                                   -043a   14
 2081 FORMAT (3A4,'INTERIOR-WALL number',I5,' has a negative net area')         -043a   15
      GO TO 900                                                                 MSG2   264
  182 WRITE (OUTstr,1082) WARPX, (I1(I),I=1,8)                                  -043a   16
 1082 FORMAT(3A4, 8A4,' is not found. A default will be used.')                 -043a   17
      GO TO 900                                                                 MSG2   267
  183 WRITE(OUTstr,1083) ERRPX, (I1(I),I=1,4), (I2(I),I=1,4)                    ERR-01 216
 1083 FORMAT(3A4,3HIF ,4A4,28H IS ENTERED A CORRESPONDING ,                     MSG2   269
     $ 4A4,14H MUST BE INPUT)                                                   MSG2   270
      GO TO 900                                                                 MSG2   271
  184 WRITE(OUTstr,1083,ERR=99099) ERRPX,(I1(I),I=1,4),                         ERR-01 217
     1      I2(1),I3(1)                                                         MSG2   273
 1084 FORMAT(3A4,1X,4A4,8H VALUES ,2F6.2,                                       MSG2   274
     $  27H MUST BE IN ASCENDING ORDER)                                         MSG2   275
99099 CONTINUE                                                                  MSG2   276
      GO TO 900                                                                 MSG2   277
  185 WRITE(OUTstr,1085) ERRPX, (I1(I),I=1,4), (I2(I),I=1,4)                    ERR-01 218
 1085 FORMAT(3A4,1X,4A4,22H MUST BE GREATER THAN ,4A4)                          MSG2   279
      GO TO 900                                                                 MSG2   280
  186 WRITE(OUTstr,1086) ERRPX, (I1(I),I=1,8)                                   REFG    13
 1086 FORMAT(3A4,8A4,' is not a SYSTEM-TYPE that allows refrigerated ',         REFG    14
     $'casework.  Only SZRH, VAVS, RHFS, HP, PSZ, PVAVS, and PVVT ',            REFG    15
     $'SYSTEM-TYPEs are allowed to include this feature. ')                     REFG    16
      GO TO 900                                                                 MSG2   284
  187 WRITE(OUTstr,1087) ERRPX, (I1(I),I=1,8), (I2(I),I=1,8)                    -031     6
 1087 FORMAT(3A4,'TO ALLOW REFRIGERATION, ZONE ',8A4,                           -031     7
     $  ' MUST BE THE FIRST ZONE DEFINED IN SYSTEM ',8A4)                       -031     8
      GO TO 900                                                                 MSG2   288
  188 WRITE(OUTstr,1088) ERRPX, (I1(I),I=1,8)                                   -043a   18
 1088 FORMAT(3A4,8A4,' has no data due to previous error')                      -043a   19
      GO TO 900                                                                 MSG2   291
  189 WRITE(OUTstr,1089) WARPX                                                  -036     2
 1089 FORMAT(3A4,'Warning message #189 unused - notify DOE-2 support')          -036     3
      GO TO 900                                                                 FLOOR1   8
  190 WRITE(OUTstr,1090) ERRPX,(I1(I),I=1,4),(I2(I),I=1,8),(I3(I),I=1,4)        FIX14  129
 1090 FORMAT(3A4,4A4,' ',8A4,' has no ',4A4,' - one is required')               FIX14  130
      GO TO 900                                                                 FLOOR1  11
  191 WRITE(OUTstr,1091) ERRPX,(I1(I),I=1,4),(I2(I),I=1,8),                     FIX14  131
     1                         (I3(I),I=1,4)                                    ATTRF1   2
 1091 FORMAT(3A4,4A4,1X,8A4,' is not attached to any ',4A4)                     FIX14  132
      GOTO 900                                                                  HVAC17  81
  192 WRITE(OUTstr,1092) WARPX,I1(1),I2(1)                                      ERR-01 225
 1092 FORMAT(                                                                   ERR-01 226
     $ 3A4,'WINDOW is mispositioned on WALL or FRAME is too wide.'              ERR-01 227
     $,' WINDOW X value (',F10.2,') should be greater ',                        DFTEX2  31
     $ 'than FRAME WIDTH (',F10.2,').')                                         ERR-01 229
      GOTO 900                                                                  ERR-01 230
  193 WRITE(OUTstr,1093) WARPX, I1(1),I2(1)                                     ERR-01 231
 1093 FORMAT(                                                                   ERR-01 232
     $ 3A4,'WINDOW is mispositioned on WALL or FRAME is too wide.'              ERR-01 233
     $,' WINDOW Y value (',F10.2,') should be greater ',                        ERR-01 234
     $ 'than FRAME WIDTH (',F10.2,').')                                         ERR-01 235
      GOTO 900                                                                  ERR-01 236
  194 WRITE(OUTstr,1094) WARPX, I1(1),I2(1),I3(1),I4(1)                         ERR-01 237
 1094 FORMAT(                                                                   ERR-01 238
     $ 3A4,'WINDOW is too wide or is mispositioned horizontally.'               ERR-01 239
     $,' WINDOW X value (',F10.2,') + glass WIDTH (',F10.2,                     ERR-01 240
     $ ') + FRAME WIDTH (',F10.2,                                               ERR-01 241
     $ ') should be less than WALL WIDTH (',F10.2,').')                         ERR-01 242
      GOTO 900                                                                  ERR-01 243
  195 WRITE(OUTstr,1095) WARPX, I1(1),I2(1),I3(1),I4(1)                         ERR-01 244
 1095 FORMAT                                                                    ERR-01 245
     $ (3A4,'WINDOW is too high or is mispositioned vertically.'                ERR-01 246
     $ ,' WINDOW Y value (',F10.2,') + glass HEIGHT (',F10.2,                   ERR-01 247
     $ ') + FRAME WIDTH (',F10.2,                                               ERR-01 248
     $ ') should be less than WALL HEIGHT (',F10.2,').')                        ERR-01 249
      GOTO 900                                                                  ERR-01 250
  196 WRITE(OUTstr,1096) ERRPX, I1(1)                                           ERR-01 251
 1096 FORMAT(                                                                   ERR-01 252
     $  3A4,28HThis WINDOW has MULTIPLIER =,F7.2,2H. ,                          ERR-01 253
     $  18HUsing a MULTIPLIER,                                                  ERR-01 254
     $  40H not equal to 1.0 on a WINDOW in a SPACE,                            ERR-01 255
     $  21H with DAYLIGHTING=YES,                                               ERR-01 256
     $  37H will cause an inaccurate calculation,                               ERR-01 257
     $  41H of daylight illuminance from the WINDOW.,                           ERR-01 258
     $  54H Input the multiple WINDOWs separately or combine into,              ERR-01 259
     $  17H a single WINDOW. )                                                  ERR-01 260
      GOTO 900                                                                  ERR-01 261
  197 WRITE(OUTstr,1097) ERRPX, I1(1)                                           ERR-01 262
 1097 FORMAT(                                                                   ERR-01 263
     $  3A4,43HThe parent EXTERIOR-WALL of this WINDOW has,                     ERR-01 264
     $  13H MULTIPLIER =,F7.2,2H. ,                                             ERR-01 265
     $  41HThis will cause an inaccurate calculation,                           ERR-01 266
     $  41H of daylight illuminance from the WINDOW.,                           ERR-01 267
     $  40H EXTERIOR-WALLs with WINDOWs in a SPACE,                             ERR-01 268
     $  49H with DAYLIGHTING=YES should have MULTIPLIER = 1.,                   ERR-01 269
     $  54H Input WALLs spearately or combine into a single WALL.)              ERR-01 270
      GOTO 900                                                                  ERR-01 271
  198 write(OUTstr,1098) ERRPX                                                  ERR-01 272
 1098 format(3A4,'Switching control requires GLASS-TYPE from'                   ERR-01 273
     $       ,' WINDOW library (GLASS-TYPE-CODE=1000 or above).')               ERR-01 274
      GOTO 900                                                                  ERR-01 275
  199 write(OUTstr,1099) ERRPX                                                  ERR-01 276
 1099 format(3A4,'Switching control requires GLASS-TYPE-SW from'                ERR-01 277
     $,' WINDOW LIBRARY (GLASS-TYPE-CODE=1000 or above)')                       ERR-01 278
      GOTO 900                                                                  ERR-01 279
  200 write(OUTstr,1100) ERRPX                                                  ERR-01 280
 1100 format(3A4,'GLASS-TYPE and GLASS-TYPE-SW have different number',          ERR-01 281
     $' of PANES. Check the requested GLASS-TYPE-CODEs.')                       ERR-01 282
      GOTO 900                                                                  ERR-01 283
  201 write(outstr,1101) ERRPX, I1(1),I2(1)                                     ERR-01 284
 1101 format(3A4,'For SWITCH-CONTROL = DAYLIGHT-LEVEL, the visible ',           ERR-01 285
     $'transmittance',                                                          ERR-01 286
     $' for GLASS-TYPE-SW (',f5.3,') is greater than that for'                  ERR-01 287
     $' GLASS-TYPE (',f5.3,                                                     ERR-01 288
     $'). Check the requested GLASS-TYPE-CODEs.')                               ERR-01 289
      GOTO 900                                                                  ERR-01 290
  202 write(outstr,1102) ERRPX, I1(1),I2(1)                                     ERR-01 291
 1102 format(3A4,'The UNSWITCHED (',i5,') and SWITCHED (',i5,')'                ERR-01 292
     $,' GLASS-TYPE-CODEs for this WINDOW are not a legal pair'                 ERR-01 293
     $,' for ELECTROCHROMIC SWITCHing. Acceptable pairs are:'                   ERR-01 294
     $,' (1800,1801), (1802,1803), (2800,2801), (2802,2803),'                   ERR-01 295
     $,' (2804,2805), (2820,2821), (2822,2823), (2824,2825),'                   ERR-01 296
     $,' (2840,2841), (2842,2843), (2844,2845), (2860,2861),'                   ERR-01 297
     $,' (2862,2863), AND (2864,2865).'                                         ERR-01 298
     $,' Check the GLASS-TYPE-CODEs specified for GLASS-TYPE and'               ERR-01 299
     $,' GLASS-TYPE-SW.')                                                       ERR-01 300
      GOTO 900                                                                  ERR-01 301
  203 WRITE(OUTstr,1103) ERRPX, (I1(i),i=1,8)                                   -043a   20
 1103 FORMAT(3A4,'TROMBE WALL ',8A4,' has no WALL-PARAMETERS')                  ERR-01 303
      GOTO 900                                                                  ERR-01 304
  204 WRITE(OUTstr,1104) ERRPX, (I1(i),i=1,4),(I2(i),i=1,4)                     ERR-01 305
 1104 FORMAT(3A4,4A4,' + ',4A4,'> 1 . This makes no physical sense.')           ERR-01 306
      GOTO 900                                                                  ERR-01 307
  205 WRITE(OUTstr,1105) ERRPX,(I1(i),i=1,4),(I2(i),i=1,4),(I3(i),i=1,4)        ERR-01 308
 1105 FORMAT(3A4,4A4,' + ',4A4,' + ',4A4,' > 1.'                                ERR-01 309
     $,' The sum should be 1.0 or less.')                                       ERR-01 310
      GOTO 900                                                                  ERR-01 311
  206 WRITE(OUTstr,1106) ERRPX, I1(1), I2(1)                                    ERR-01 312
 1106 FORMAT(3A4,'SLAT-ANGLE-MIN must be less or equal SLAT-ANGLE-MAX.'         ERR-01 313
     $,' SLAT-ANGLE-MIN : ', F12.5                                              ERR-01 314
     $,' SLAT-ANGLE-MAX : ', F12.5)                                             ERR-01 315
      GOTO 900                                                                  ERR-01 316
  207 WRITE(OUTstr,1107) ERRPX, I1(1), I2(1)                                    ERR-01 317
 1107 FORMAT(3A4,                                                               ERR-01 318
     $'BLIND-COVER-MIN must be less or equal BLIND-COVER-MAX.'                  ERR-01 319
     $,' BLIND-COVER-MIN : ',F12.5                                              ERR-01 320
     $,' BLIND-COVER-MAX : ',F12.5)                                             ERR-01 321
      GOTO 900                                                                  ERR-01 322
  208 WRITE(OUTstr,1108) ERRPX, I1(1), I2(1), I3(1)                             ERR-01 323
 1108 FORMAT(3A4,'SLAT-ANGLE must be within the range of'                       ERR-01 324
     $,' SLAT-ANGLE-MIN and SLAT-ANGLE-MAX.'                                    ERR-01 325
     $,' SLAT-ANGLE-MIN : ', F12.5                                              ERR-01 326
     $,' SLAT-ANGLE     : ', F12.5                                              ERR-01 327
     $,' SLAT-ANGLE-MAX : ', F12.5)                                             ERR-01 328
      GOTO 900                                                                  ERR-01 329
  209 WRITE(OUTstr,1109) ERRPX, I1(1), I2(1), I3(1)                             ERR-01 330
 1109 FORMAT(3A4,'BLIND-COVER must be within the range of'                      ERR-01 331
     $,' BLIND-COVER-MIN and BLIND-COVER-MAX.'                                  ERR-01 332
     $,' BLIND-COVER-MIN : ', F12.5                                             ERR-01 333
     $,' BLIND-COVER     : ', F12.5                                             ERR-01 334
     $,' BLIND-COVER-MAX : ', F12.5)                                            ERR-01 335
      GOTO 900                                                                  ERR-01 336
  210 WRITE(OUTstr,1110) ERRPX, I1(1), I2(1), I3(1), I4(1)                      ERR-01 337
 1110 FORMAT(                                                                   ERR-01 338
     $3A4,'The specified minimum blind cover, ',F5.3,', cannot be less '        REFG    17
     $,'than the fraction of the window covered by the blind '                  REFG    18
     $,'when the blind is fully withdrawn, which is ',F5.3,' for the '          REFG    19
     $,'given slat thickness, ',F7.4,', and slat separation, ',F7.4,'. '        REFG    20
     $,'Check the values of slat thickness and separation, '                    ERR-01 343
     $,'or increase the minimum blind cover.')                                  ERR-01 344
      GOTO 900                                                                  ERR-01 345
  211 WRITE(OUTstr,1111) ERRPX, I1(1),(I2(I),I=1,4), (I3(I),I=1,8)              ERR-01 346
 1111 FORMAT(3A4,'Error in STRUCTURE, layer ',I2,':'                            ERR-01 347
     $,' Found   : ',4A4                                                        ERR-01 348
     $,' Expected: ',8A4)                                                       ERR-01 349
      GOTO 900                                                                  ERR-01 350
  212 write(OUTstr,1112) ERRPX, I1(1), (I2(I),I=1,4), I3(1), I4(1)              ERR-01 351
 1112 FORMAT(3A4,'Gases adjacent to blind',I1,' are not the same.'              ERR-01 352
     $,4A4,' GAP 1 : ',F11.6                                                    ERR-01 353
     $,    ' GAP 2 : ',F11.6)                                                   ERR-01 354
      GOTO 900                                                                  ERR-01 355
  213 WRITE(OUTstr,1113) ERRPX, (I1(I),I=1,4),(I2(I),I=1,8)                     ERR-01 356
 1113 FORMAT(3A4,'Error in STRUCTURE, last layer:'                              ERR-01 357
     $,' Found   : ',4A4                                                        ERR-01 358
     $,' Expected: ',8A4)                                                       ERR-01 359
      GOTO 900                                                                  ERR-01 360
  214 WRITE(OUTstr,1114) ERRPX, (I1(I),I=1,8),I2(1),I2(2),(I3(I),I=1,4)         FIX16    1
 1114 FORMAT(3A4,'Error in blind control:'                                      FIX16    2
     $,' Adjustment type ',8A4,' for ',A4,A1                                    FIX16    3
     $,' should be ',4A4)                                                       FIX16    4
      GOTO 900                                                                  ERR-01 365
  215 WRITE(OUTstr,1115) ERRPX, (I1(I),I=1,8),I2(1),I2(2),                      FIX16    5
     $                          (I3(I),I=1,8),(I4(I),I=1,8)                     FIX16    6
 1115 FORMAT(3A4,'Error in blind control:'                                      FIX16    7
     $,' Adjustment type ',8A4,' for ',A4,A1                                    FIX16    8
     $,' requires a schedule of type: ',8A4                                     FIX16    9
     $,' (Type found - ',8A4,')')                                               FIX16   10
      GOTO 900                                                                  ERR-01 372
  216 WRITE(OUTstr,1116) ERRPX, (I2(I),I=1,4), I1(1)                            DFTEX4 164
 1116 FORMAT(3A4,4A4,' position number ',I2,                                    DFTEX4 165
     $               ' is  incomplete or undefined')                            DFTEX4 166
      GOTO 900                                                                  ERR-01 375
  217 WRITE (OUTstr,1117) ERRPX, (I1(I),I=1,4), (I2(I),I=1,4),I3(1)             -043a   21
 1117 FORMAT(3A4,'Illegal entry ',4A4,' on line',I7,' in library ',4A4)         -043a   22
      GOTO 900                                                                  ERR-01 378
  218 WRITE(OUTstr,1118) ERRPX                                                  ERR-01 379
 1118 FORMAT(                                                                   ERR-01 380
     $3A4,'LTG-CALC-METHOD = LUMINAIRE-LAMP requires that',                     ERR-01 381
     $' LUMINAIRE-TYPE and LAMP-TYPE be specified.')                            ERR-01 382
      GOTO 900                                                                  ERR-01 383
  219 WRITE(OUTstr,1119) ERRPX                                                  ERR-01 384
 1119 FORMAT(                                                                   ERR-01 385
     $3A4,'LTG-CALC-METHOD = LUMENS-POWER requires that'                        ERR-01 386
     $,' COEF-OF-UTIL, TOT-POWER-INPUT, and TOT-LAMP-LUMENS'                    ERR-01 387
     $,' be specified.')                                                        ERR-01 388
      GOTO 900                                                                  ERR-01 389
  220 WRITE(OUTstr,1120) ERRPX                                                  ERR-01 390
 1120 FORMAT(3A4,                                                               ERR-01 391
     $'LUMINAIRE configuration in LIGHTING-SYSTEM does not match'               ERR-01 392
     $,' any of the configurations accepted by the selected'                    ERR-01 393
     $,' LUMINAIRE-TYPE. Choose a different LUMINAIRE configuration'            ERR-01 394
     $,' in LIGHTING-SYSTEM or a different LUMINAIRE-TYPE.')                    ERR-01 395
      GOTO 900                                                                  ERR-01 396
  221 WRITE(OUTstr,1121) ERRPX                                                  ERR-01 397
 1121 FORMAT(3A4,                                                               ERR-01 398
     $'Lamp size in selected LAMP-TYPE does not match '                         ERR-01 399
     $,'lamp size accepted by the specified LUMINAIRE-TYPE.'                    REFG    21
     $,' Choose matching LAMP-TYPE and LUMINAIRE-TYPE sizes.')                  REFG    22
      GOTO 900                                                                  ERR-01 402
  222 WRITE(OUTstr,1122) ERRPX                                                  ERR-01 403
 1122 FORMAT(3A4,                                                               ERR-01 404
     $'BALLAST-TYPE specified cannot be used with'                              ERR-01 405
     $,' the CATEGORY specified for LAMP-TYPE.'                                 REFG    23
     $,' For FULL-SIZE fluorescent lamps specify BALLAST-TYPE as'               ERR-01 407
     $,' MAGN-PRE-1990, MAGN-ENERGY-EFF, MAGN-HTR-CUT-RED,'                     ERR-01 408
     $,' MAGN-HTR-CUT-FUL, ELEC-RAP-START, ELEC-RAP-ST-RED'                     ERR-01 409
     $,' or ELECT-INS-START.'                                                   ERR-01 410
     $,' For COMPACT fluorescent LAMPs specify BALLAST-TYPE as'                 ERR-01 411
     $,' CFL-MAGNETIC or CFL-ELECTRONIC.'                                       ERR-01 412
     $,' For HID lamps specify BALLAST-TYPE as'                                 ERR-01 413
     $,' HID-MAGNETIC or HID-LO-LOSS-MAGN.')                                    ERR-01 414
      GOTO 900                                                                  ERR-01 415
  223 WRITE(OUTstr,1123) ERRPX, (I1(I),I=1,8), (I2(I),I=1,8)                    ERR-01 416
 1123 FORMAT(3A4,'TYPE for DAY-SCHEDULE ',8A4                                   ERR-01 417
     1' does not match TYPE for SCHEDULE ',8A4)                                 ERR-01 418
      GOTO 900                                                                  ERR-01 419
  224 WRITE(OUTstr,1124) ERRPX, (I1(I),I=1,4), (I2(I),I=1,4),                   ERR-01 420
     1                          (I3(I),I=1,4),(I4(I),I=1,4)                     DFTEXP 160
 1124 FORMAT(3A4, 'If ',4A4,' is ',4A4,' then ',4A4,' must be defined'          DFTEXP 161
     $,' for each ',4A4,'.')                                                    DFTEXP 162
      GOTO 900                                                                  ERR-01 424
  225 WRITE(OUTstr,1125) WARPX, (I1(I),I=1,4),I2(1)                             ERR-01 425
 1125 FORMAT(3A4,4A4,' has been changed to ',F6.4)                              ERR-01 426
      GOTO 900                                                                  ERR-01 427
  226 WRITE(OUTstr,1126) ERRPX                                                  DFTEX2  32
 1126 FORMAT(3A4,'Sum of LIGHT-TO-SPACE, LIGHT-TO-OTHER, and ',                 ERR-01 429
     $'LIGHT-TO-RETURN > 1.0')                                                  ERR-01 430
      GOTO 900                                                                  ERR-01 431
  227 WRITE(OUTstr,1127) WARPX, I1(1),I2(1),(I3(I),I=1,8),I4(1)                 ERR-01 432
 1127 FORMAT(                                                                   ERR-01 433
     $ 3A4,'Daylighting SET POINT #',I1,' (',F8.1,' FC) for SPACE ',8A4         ERR-01 434
     $ ,' will be reset to the electric ILLUMINANCE (',F8.1,' FC)'              ERR-01 435
     $ ,' of the SPACE LIGHTING-SYSTEM.')                                       ERR-01 436
      GOTO 900                                                                  ERR-01 437
  228 WRITE (OUTstr,1128) ERRPX, (I1(I),I=1,8),(I2(I),I=1,8)                    ERR-01 438
 1128 FORMAT(3A4,'The reference to ',8A4,' is inconsistent with its ',          -031     9
     $ 'definition: the reference expected a definition as TYPE = ',8A4)        -031    10
      GOTO 900                                                                  ERR-01 440
  229 WRITE (OUTstr,1129) ERRPX, (I1(I),I=1,8),(I2(I),I=1,8),                   ERR-01 441
     $                           (I3(I),I=1,8)                                  ERR-01 442
 1129 FORMAT(3A4,'The reference to ',8A4,' is inconsistent with its ',          -031    11
     $ 'definition: the reference expected a definition as TYPE = ',8A4,        -031    12
     $ ' or ',8A4)                                                              -031    13
      GOTO 900                                                                  ERR-01 444
  230 WRITE (OUTstr,1130) ERRPX, (I1(I),I=1,8),(I2(I),I=1,8),                   ERR-01 445
     $                           (I3(I),I=1,8),(I4(I),I=1,8)                    ERR-01 446
 1130 FORMAT(3A4,'The reference to ',8A4,' is inconsistent with its ',          -031    14
     $ 'definition: the reference expected a definition as TYPE = ',8A4,        -031    15
     $ ', ',8A4,', or ',8A4)                                                    -031    16
      GOTO 900                                                                  ERR-01 448
  231 WRITE(OUTstr,1131) WARPX, (I1(I),I=1,8),I2(1),I3(1)                       ERR-01 449
 1131 FORMAT(3A4,'The custom weighting factor calculation for'                  ERR-01 450
     $,' space ',8A4,', weighting factor type',I4                               ERR-01 451
     $,' failed in deconvolution, with determinant ',E15.5,'.'                  REFG    24
     $,' ASHRAE weighting factors with floor weight of 70 lb/ft2'               ERR-01 453
     $,' (342 kg/m2) will be used for this space.' )                            ERR-01 454
      GOTO 900                                                                  ERR-01 455
  232 WRITE(OUTstr,1132) WARPX, (I1(I),I=1,8)                                   ERR-01 456
 1132 FORMAT(3A4, 'The custom weighting factor calculation for'                 ERR-01 457
     $,' space ',8A4,' has resulted in a singular matrix'                       ERR-01 458
     $,' in subroutine WFMATG.'                                                 ERR-01 459
     $,' ASHRAE weighting factors with floor weight of 70 lb/ft2'               ERR-01 460
     $,' (342 kg/m2) will be used for this space.' )                            ERR-01 461
      GOTO 900                                                                  ERR-01 462
  233 WRITE(OUTstr,1133) WARPX, (I1(I),I=1,8)                                   ERR-01 463
 1133 FORMAT(3A4,'The custom weighting factor calculation for'                  ERR-01 464
     $,' space ',8A4,' failed in subroutine WFQOUT'                             ERR-01 465
     $,' during calculation of the air temperature weighting factors.'          REFG    25
     $,' ASHRAE weighting factors with floor weight of 70 lb/ft2'               ERR-01 467
     $,' (342 kg/m2) will be used for this space.' )                            ERR-01 468
      GOTO 900                                                                  ERR-01 469
  234 WRITE(OUTstr,1134) WARPX, (I1(I),I=1,8)                                   ERR-01 470
 1134 FORMAT(3A4,                                                               ERR-01 471
     $ 'Calculation of air temperature custom weighting factors'                ERR-01 472
     $,' failed for space ',8A4,' in subroutine WFQOUT.'                        ERR-01 473
     $,' ASHRAE weighting factors with floor weight of 70 lb/ft2'               ERR-01 474
     $,' (342 kg/m2) will be used for this space.' )                            ERR-01 475
      GOTO 900                                                                  ERR-01 476
  235 WRITE (OUTstr,1135) ERRPX                                                 ERR-01 477
 1135 FORMAT(3A4,'For metirc input, SUPPLY-HI-TEMP and SUPPLY-LO-TEMP'          ERR-01 478
     $,' or SUPPLY-HI-RATIO AND SUPPLY-LO-RATIO must be used.')                 ERR-01 479
      GOTO 900                                                                  ERR-01 480
  236 WRITE(OUTstr,1136) CAUPX, (I1(I),I=1,8)                                   ERR-01 481
 1136 FORMAT(3A4,'In SYSTEM ',8A4,' since PLENUM ZONES are defined'             FIX14  133
     $,' RETURN-AIR-PATH has been changed to PLENUM-ZONES.')                    ERR-01 483
      GOTO 900                                                                  ERR-01 484
  237 WRITE (OUTstr,1137) ERRPX, (I1(I),I=1,8)                                  ERR-01 485
 1137 FORMAT(3A4,'ZONE ',8A4,' has a TERMINAL-TYPE other than SVAV;'            -034    55
     $,' this is only allowed for a ZONE supplied by a PIU SYSTEM.')            -034    56
      GOTO 900                                                                  ERR-01 488
  238 WRITE (OUTstr,1138) ERRPX, (I1(I),I=1,8),(I2(I),I=1,8),                   -036     4
     $             (I3(I),I=1,8),(I3(I),I=1,8),(I4(I),I=1,8)                    -036     5
 1138 FORMAT(3A4,'PIU ZONE ',8A4,' in SYSTEM ',8A4,' has ',8A4,                 -036     6
     $ ' specified as its INDUCED-AIR-ZONE.  This is not allowed ',             -036     7
     $ 'because ',8A4,' has a TERMINAL-TYPE of ',8A4,' and only a non',         -036     8
     $ '-PIU ZONE can be used as the INDUCED-AIR-ZONE for a PIU ZONE.')         -036     9
      GOTO 900                                                                  ERR-01 492
  239 WRITE (OUTstr,1139) ERRPX, (I1(I),I=1,8),(I2(I),I=1,8),                   -036    10
     $             (I3(I),I=1,8),(I3(I),I=1,8),(I4(I),I=1,8)                    -036    11
 1139 FORMAT(3A4,'PIU ZONE ',8A4,' in SYSTEM ',8A4,' has ',8A4,                 -036    12
     $ ' specified as its INDUCED-AIR-ZONE.  This is not allowed',              -036    13
     $ ' because ',8A4,' is in SYSTEM ',8A4,' and the INDICED-AIR-ZONE',        -036    14
     $ ' must be in the same SYSTEM as the PIU ZONE supplied.')                 -036    15
      GOTO 900                                                                  ERR-01 496
  240 WRITE(OUTstr,1140) ERRPX, (I4(I),I=1,8), (I1(I),I=1,4),                   -044c3   1
     1                   (I2(I),I=1,4), (I3(I),I=1,4)                           -044c3   2
 1140 FORMAT(3A4,'In SYSTEM ',8A4,' ',4A4,' is ',4A4,', but no ',4A4,           -044c3   3
     $           ' have been specified to be served by this SYSTEM.')           -044c3   4
      GOTO 900                                                                  ERR-01 500
  241 WRITE(OUTstr,1141) ERRPX, (I1(I),I=1,8)                                   ERR-01 501
 1141 FORMAT(3A4,'ZONE ',8A4,', as a PLENUM, is not a legal ',                  ERR-01 502
     $'INDUCED-AIR-ZONE')                                                       ERR-01 503
      GOTO 900                                                                  ERR-01 504
  242 WRITE (OUTstr,1142) ERRPX, (I1(I),I=1,8),(I2(I),I=1,8)                    ERR-01 505
 1142 FORMAT(3A4,8A4,' is already referenced by ',8A4                           ERR-01 506
     $,' or one of its BLOCK-CHARGEs.')                                         ERR-01 507
      GOTO 900                                                                  ERR-01 508
  243 WRITE (OUTstr,1143)  ERRPX, (I1(I),I=1,8)                                 DFTEXP 163
 1143 FORMAT(3A4,8A4,' is defined, but is not referenced by any'                ERR-01 510
     $,' UTILITY-RATE.')                                                        ERR-01 511
      GOTO 900                                                                  ERR-01 512
  244 WRITE (OUTstr,1144) ERRPX, (I1(I),I=1,8), (I2(I),I=1,8)                   ERR-01 513
 1144 FORMAT(3A4,8A4,' is already referenced by ',8A4                           ERR-01 514
     $,' or one of its BLOCK-CHARGES.')                                         ERR-01 515
      GOTO 900                                                                  ERR-01 516
  245 WRITE (OUTstr,1145) ERRPX, (I1(I),I=1,8),(I2(I),I=1,8),                   ERR-01 517
     $                           (I3(I),I=1,8)                                  ERR-01 518
 1145 FORMAT(3A4,8A4,' is already referenced by ',8A4                           ERR-01 519
     $,' or one of its BLOCK-CHARGES.  It cannot also be'                       ERR-01 520
     $,' referenced by ',8A4)                                                   ERR-01 521
      GOTO 900                                                                  ERR-01 522
  246 WRITE (OUTstr,1146) WARPX, (I1(I),I=1,8)                                  ERR-01 523
 1146 FORMAT(2x,3A4,8A4,' is defined, but is not referenced by any'             ERR-01 524
     $,' UTILITY-RATE or BLOCK-CHARGE.')                                        ERR-01 525
      GOTO 900                                                                  ERR-01 526
  247 WRITE(OUTstr,1147) WARPX, (I1(I),I=1,4)                                   ERR-01 527
 1147 FORMAT(3A4,4A4,' is used but SCH-FLAG is not defined.'                    ERR-01 528
     $,' SCH-FLAG value of 1.0 assumed.')                                       ERR-01 529
      GOTO 900                                                                  ERR-01 530
  248 WRITE (OUTstr,1148) ERRPX, (I1(I),I=1,8)                                  ERR-01 531
 1148 FORMAT(3A4,'BLOCK-CHARGE ',8A4,' is TOU-SEASON-LINKed'                    ERR-01 532
     $,' to itself.')                                                           ERR-01 533
      GOTO 900                                                                  ERR-01 534
  249 WRITE(OUTstr,1149) ERRPX, (I1(I),I=1,8),(I2(I),I=1,8)                     ERR-01 535
 1149 FORMAT(3A4,'BLOCK-CHARGES ',8A4,' and ',8A4                               ERR-01 536
     $,' must both be TOU-SEASON-LINKed to one another.')                       ERR-01 537
      GOTO 900                                                                  ERR-01 538
  250 WRITE (OUTstr,1150)  ERRPX, (I1(I),I=1,8),(I2(I),I=1,8)                   ERR-01 539
 1150 FORMAT(3A4,'BLOCK-CHARGE ',8A4,' TOU-SEASON-LINK references '             ERR-01 540
     $,8A4,' which is not included in this UTILITY-RATE.')                      ERR-01 541
      GOTO 900                                                                  ERR-01 542
  251 WRITE (OUTstr,1151) ERRPX                                                 ERR-01 543
 1151 FORMAT(3A4,'When BLOCKS-ARE CUMULATIVE, each successive size'             ERR-01 544
     $,' entry must be at least as large as the previous entry.')               ERR-01 545
      GOTO 900                                                                  ERR-01 546
  252 WRITE (OUTstr,1152) ERRPX                                                 FIX11  187
 1152 FORMAT(3A4,'When BLOCKx-TYPE = KWH/KW-LIMITSUM, each successive'          ERR-01 548
     $,' entry in LIMITS-x must be at least as large as the previous',          ERR-01 549
     $' entry.')                                                                ERR-01 550
      GOTO 900                                                                  ERR-01 551
  253 WRITE (OUTstr,1153) ERRPX, I1(1)                                          FIX11  188
 1153 FORMAT(3A4,'Total list items for this command exceed maximum'             FIX11  189
     $,' of ',I4)                                                               FIX11  190
      GOTO 900                                                                  ERR-01 553
  254 WRITE (OUTstr,1154) ERRPX, (I1(I),I=1,4), (I2(I),I=1,8),                  FIX11  191
     1                    (I3(I),I=1,4), (I4(I),I=1,8)                          FIX11  192
 1154 FORMAT(3A4,'Cannot attach ',4A4,' ',8A4,'; it is already'                 FIX11  193
     $,' attached to ',4A4,' ',8A4)                                             FIX11  194
      GOTO 900                                                                  ERR-01 555
  255 WRITE (OUTstr,1155)  ERRPX, (I1(I),I=1,32)                                DFTEXP 164
 1155 FORMAT(3A4,32A4)                                                          FIX14  134
      GOTO 900                                                                  ERR-01 557
  256 IF(I3(1) .eq. 1)  THEN                                                    FIX14  135
        WRITE (OUTstr,1156)  ERRPX, (I2(I),I=1,4), (I4(I),I=1,8),               FIX14  136
     $                              (I1(I),I=1,32)                              FIX14  137
      ELSE                                                                      FIX14  138
        WRITE (OUTstr,9156)  ERRPX, I3(1), (I2(I),I=1,4), (I4(I),I=1,8),        FIX14  139
     $                              (I1(I),I=1,32)                              FIX14  140
      ENDIF                                                                     FIX14  141
 1156 FORMAT(3A4,4A4,' in ',8A4,' has ',32A4)                                   FIX14  142
 9156 FORMAT(3A4,'Value ',I2,' of ',4A4,' in ',8A4,' has ',32A4)                FIX14  143
      GOTO 900                                                                  ERR-01 559
  257 WRITE (OUTstr,1157)  ERRPX, (I1(I),I=1,4)                                 -043a   23
 1157 FORMAT(3A4,4A4,' cannot be given a user defined default')                 DFTEXP 176
      GOTO 900                                                                  ERR-01 561
  258 WRITE (OUTstr,1158)  ERRPX, I1(1)                                         DFTEXP 177
 1158 FORMAT(3A4,'Expression is too long. Maximum allowed length is',I5)        DFTEXP 178
      GOTO 900                                                                  ERR-01 563
  259 WRITE (OUTstr,1159)  ERRPX, I1(2)*4, I1(1)*4                              DFTEX3 432
 1159 FORMAT(3A4,' Memory request for ',I10,' bytes exceeded BDL total',        -048a   12
     $       ' storage capacity of ',I10,' bytes.  Re-run using a',             -048a   13
     $       ' version with higher BDL storage capacity.')                      DFTEX3 435
      GOTO 900                                                                  ERR-01 565
  260 WRITE (OUTstr,1160)  ERRPX, (I2(I),I=1,8),(I3(I),I=1,4),                  -031    17
     $                            (I4(I),I=1,8),(I1(I),I=1,4)                   -031    18
 1160 FORMAT(3A4,8A4,' must be attached to ',4A4,' ',8A4,                       -031    19
     $               ' to be specified as its ',4A4)                            -031    20
      GOTO 900                                                                  ERR-01 567
  277 WRITE (OUTstr,1177)  ERRPX, (I1(I),I=1,8),(I2(I),I=1,8)                   -031    21
 1177 FORMAT(3A4,'Because it is a SUNSPACE, ',8A4,                              -031    22
     $           ' cannot be the CONTROL-ZONE for SYSTEM ',8A4)                 -031    23
      GOTO 900                                                                  -031    24
  278 WRITE (OUTstr,1178)  ERRPX, (I1(I),I=1,8),(I2(I),I=1,4),                  -035     6
     $                            (I3(I),I=1,4),(I2(I),I=1,4),                  -035     7
     $                            (I3(I),I=1,4),(I4(I),I=1,4)                   -035     8
 1178 FORMAT(3A4,8A4,' cannot be specified as a ',4A4,                          -035     9
     $           ' due to incorrect ',4A4,'; valid ',4A4,                       -035    10
     $           ' must have a ',4A4,' of ',8A4)                                -035    11
      GOTO 900                                                                  -031    26
  279 WRITE (OUTstr,1179) WARPX, (I1(I),I=1,3), I2(1)                           NAMELG   2
 1179 FORMAT(3A4, 3A4 ' longer than ' I2 ' characters. Name will be ',          NAMELG   3
     1       'truncated.')                                                      NAMELG   4
      GOTO 900                                                                  -031    28
  280 CONTINUE                                                                  -031    29
      GOTO 900                                                                  -031    30
c                                                                               MSG2   294
c---- give macro traceback                                                      MSG2   295
c                                                                               MSG2   296
  900 OUTstr2 = OUTstr                                                          ERR-01 568
      IF((M.lt.17).or.(M.eq.24).or.(M.eq.25).or.(M.eq.27)                       ERR-01 569
     $    .or.(M.ge.31 .and. M.le.48).or.(M.ge.161 .and. M.le.176)) THEN        FIX11  195
        DO II=1,1024                                                            ERR-01 571
          IF(OUTstr(1024-II+1:1024-II+1) .ne. char(32))  GOTO 905               ERR-01 572
        ENDDO                                                                   ERR-01 573
        II = 1024                                                               ERR-01 574
  905   KK = 1024 - II+1                                                        ERR-01 575
      ELSE                                                                      ERR-01 576
        KK = FMTSTR( OUTstr, 1024, 80 )                                         ERR-01 577
      ENDIF                                                                     ERR-01 578
      WRITE(IOUTPT,9900) OUTstr(1:KK)                                           ERR-01 579
 9900 FORMAT(A)                                                                 ERR-01 580
      if ( LEVEL .lt. 4 )     call  mTrace                                      ERR-01 581
      IF((IPDFLG.ne.0).and.(LEVEL.LE.maxERR)) THEN                              -042L5b185
       IF((Imsgflg.eq.0) .and. (LIBflg.ne.2)) THEN                              -042L5b186
        dostr = 'DEFAULTING:  In  '                                             -042L5b187
        IF(LIBflg .ne. 0) dostr = 'LIBRARY GET:  In '                           -042L5b188
        IF(ISDflg .eq. 1) dostr = 'SET DEFAULT:  In '                           -042L5b189
        namstr = ' '                                                            -042L5b190
        if(JOPcur .ne. 0)  THEN                                                 -042L5b191
          write (scrstr,9910) (IOPCDT(II,JOPcur),II=1,4)                        -042L5b192
          namstr=char(13)//char(10)//dostr//scrstr(1:16)//char(32)              -042L5b193
          if((ISDflg .eq. 0).and.(IOPCDT(11,JOPcur).ne. 0).and.                 -042L5b194
     $       (JREFcur .ne. 0))  THEN                                            -042L5b195
            JSYM = IREFTB(1,JREFcur)                                            -042L5b196
            IF(JSYM .GT. 0)  THEN                                               -042L5b197
              write (scrstr,9910) (ISYMTB(II,JSYM),II=1,8)                      -042L5b198
            ELSE                                                                -042L5b199
              write (scrstr,9912) (IOPCDT(II,JOPcur),II=1,4),                   -042L5b200
     $                 (JREFcur-IOPCDT(14,JOPcur)+1)                            -042L5b201
            ENDIF                                                               -042L5b202
            scrstr2=namstr(1:36)//'named '//scrstr(1:32)                        -042L5b203
     $                          //', the ERROR listed below was found.'         -042L5b204
            namstr=scrstr2                                                      -042L5b205
          endif                                                                 -042L5b206
          if(JKWcur .ne. 0)  THEN                                               -042L5b207
            JKW = IOPCDT(9,JOPcur) + JKWcur - 1                                 -042L5b208
            IF(IOPCDT(24,JOPcur).lt.0)                                          -042L5b209
     $        JKW = JKW + (JTYPcur-1)*IOPCDT(10,JOPcur)                         -042L5b210
            write (scrstr,9910) (KONTXT(II,JKW),II=1,4)                         -042L5b211
            ii = 36                                                             -042L5b212
            if(JREFcur .ne. 0)  ii=75                                           -042L5b213
            scrstr2=namstr(1:ii)//' the keyword '//scrstr(1:16)                 -042L5b214
     $                          //' has the ERROR listed below.'                -042L5b215
            namstr=scrstr2                                                      -042L5b216
          endif                                                                 -042L5b217
        else                                                                    -042L5b218
          L = (LSYMB/4) + 1                                                     -042L5b219
          write (scrstr,9930) (ISYMB(II),II=1,L)                                -042L5b220
 9930     FORMAT(21A4)                                                          -042L5b221
          namstr=char(13)//char(10)//'The last characters read were '           -042L5b222
     $           //char(39)//scrstr(1:LSYMB)//char(39)                          -042L5b223
        endif                                                                   -042L5b224
        if((namstr .ne. ' ').AND.(JOPcur .ne. 0))  THEN                         -042L5b225
          l = len(namstr) - 1                                                   -042L5b226
          ii=1                                                                  -042L5b227
  907       if((namstr(ii:ii+1).eq.'  ').or.(namstr(ii:ii+1).eq.' ,'))          -042L5b228
     $        THEN                                                              -042L5b229
              namstr(ii:)=namstr(ii+1:)                                         -042L5b230
              l = l - 1                                                         -042L5b231
              ii=ii-1                                                           -042L5b232
            ENDIF                                                               -042L5b233
          ii=ii+1                                                               -042L5b234
          if(ii .lt. l)  goto 907                                               -042L5b235
        endif                                                                   -042L5b236
        KK = FMTSTR( OUTstr2, 1024, -80 )                                       -042L5b237
        write(nmsgstr,9920) M                                                   -042L5b238
 9910   FORMAT(10A4)                                                            -042L5b239
 9912   FORMAT(4A4,' number',I9)                                                -042L5b240
 9920   FORMAT(' (MSG2 #',I3,')')                                               -042L5b241
        IF (Imsgflg .eq. 0)  Iret=messageboxi( NULL,                            045a1    3
     $    'An ERROR caused the listed component to be marked bad. '             -042L5b243
     $    //nmsgstr//namstr//char(13)//char(10)                                 -042L5b244
     $    //char(13)//char(10)//OUTstr2(13:KK)//char(13)//char(10)              -042L5b245
     $    //char(13)//char(10)//                                                -042L5b246
     $    'This must be corrected before a simulation is possible.'//           -042L5b247
     $    char(13)//char(10)//'Select CANCEL for no more messages'//            -042L5b248
     $    char(0),'DOE-2.2'//char(39)//'s BDL Server found an ERROR'            -042L5b249
     $    //char(0),MB_OKCANCEL + MB_ICONEXCLAMATION + MB_TASKMODAL )           -042L5b250
        IF(Iret .eq. IDCANCEL) Imsgflg = 1                                      -042L5b251
       ENDIF                                                                    -042L5b252
       IF((Imsgflg.ne.0).and.(pcallbackfuncERR.ne.0))  THEN                     -042L5b253
        IerrNum    = 1000 + M                                                   -042L5b254
        IerrLine   = KRDNUM                                                     -042L5b255
        IerrCmd    = JOPcur                                                     -042L5b256
        IerrCmdTyp = JTYPcur                                                    -042L5b257
        IerrSym    = 0                                                          -042L5b258
        IerrKey    = 0                                                          -042L5b259
        IF(JOPcur .ne. 0)  THEN                                                 -042L5b260
          if((ISDflg .eq. 0).and.(IOPCDT(11,JOPcur).ne. 0).and.                 -042L5b261
     $       (JREFcur .ne. 0)) IerrSym = IREFTB(1,JREFcur)                      -042L5b262
          if(JKWcur .ne. 0)  THEN                                               -042L5b263
            IerrKey = IOPCDT(9,JOPcur) + JKWcur - IOPCDT(9,1)                   -042L5b264
            IF(IOPCDT(24,JOPcur).lt.0)                                          -042L5b265
     $         IerrKey = IerrKey + (JTYPcur-1)*IOPCDT(10,JOPcur)                -042L5b266
          Endif                                                                 -042L5b267
        ENDIF                                                                   -042L5b268
        CALL FILLN ( IBLANK,IerrTxt(1),256)                                     -042L5b269
        OUTstr2=OUTstr2(13:)                                                    -042L5b270
        KK = MIN(253,FMTSTR( OUTstr2, 1012, 0 )/4+1)                            -042L5b271
        DO II=1,KK                                                              -042L5b272
          DO JJ=1,4                                                             -042L5b273
            CONVERT1(JJ)=ICHAR(OUTstr2((II-1)*4+JJ:(II-1)*4+JJ))                -042L5b274
          ENDDO                                                                 -042L5b275
          IerrTxt(II)=CONVERT4                                                  -042L5b276
        ENDDO                                                                   -042L5b277
        Iret = performcallback1( pCallbackFuncERR,LEVEL )                       -042L5b278
        if( Iret .ne. 0 ) IwinReturn = 1                                        -042L5b279
       ENDIF                                                                    -042L5b280
      ENDIF                                                                     -042L5b281
      RETURN                                                                    -042L5b282
      END                                                                       MSG2   299
      SUBROUTINE MSGEXP(ICALL)                                                  MSGEXP   2
C                                                                               MSGEXP   3
C              Process Expression Errors found during expression                MSGEXP   4
C              parsing and evaluation by the expression module                  MSGEXP   5
C                                                                               MSGEXP   6
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               MSGEXP   8
      USE BDLSTRUCT                                                             -048   174
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
C                                                                               MSGEXP  13
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      character*32 errNAME                                                      FIX14  152
      DO Num=1,NumErr                                                           MSGEXP  14
        IF(ICALL .EQ. 1)  THEN                                                  MSGEXP  15
C              Parse error - just send message text                             MSGEXP  16
          CALL MSG2(155,ErrorInf(4,Num),Num,Num,Num)                            MSGEXP  17
        ELSE                                                                    MSGEXP  18
C              Evaluate error - send text and keyword/array position            MSGEXP  19
C                             - set correct                                     FIX14  153
      JOPcurs  = JOPcur                                                         FIX14  154
      JREFcurs = JREFcur                                                        FIX14  155
      JKWcurs  = JKWcur                                                         FIX14  156
      JREFcur  = ErrorInf(3,Num)                                                FIX14  157
      JTYPcurs = JTYPcur                                                        DFTEX4 167
      JTYPcur  = 1                                                              DFTEX4 168
      JJ = NOPCDT - 1                                                           FIX14  158
      DO II=1,JJ                                                                FIX14  159
        IF (IOPCDT(12,II).GT.0) THEN                                            FIX14  160
          IF( (JREFcur.GE.IOPCDT(14,II)).and.                                   FIX14  161
     $        (JREFcur.LT.IOPCDT(14,II+1)) ) THEN                               FIX14  162
            JOPcur = II                                                         FIX14  163
            JKWcur = ErrorInf(1,Num)-(IOPCDT(9,JOPcur)-IOPCDT(9,1))             FIX14  164
          ENDIF                                                                 FIX14  165
        ENDIF                                                                   FIX14  166
      ENDDO                                                                     FIX14  167
      JSYM = IREFTB(1,JREFcur)                                                  FIX14  168
      IF(JSYM .GT. 0)  THEN                                                     FIX14  169
        write (errNAME,1) (ISYMTB(II,JSYM),II=1,8)                              FIX14  170
    1   FORMAT(8A4)                                                             FIX14  171
      ELSE                                                                      FIX14  172
        write (errNAME,2) (IOPCDT(II,JOPcur),II=1,4),                           FIX14  173
     $                 (JREFcur-IOPCDT(14,JOPcur)+1)                            FIX14  174
    2   FORMAT(4A4,' number',I9)                                                FIX14  175
      ENDIF                                                                     FIX14  176
          CALL MSG2(156,ErrorInf(4,Num),                                        MSGEXP  20
     $                  KONTXT(1,ErrorInf(1,Num)+IOPCDT(9,1)-1),                MSGEXP  21
     $                  ErrorInf(2,Num),errNAME)                                FIX14  177
      JOPcur   = JOPcurs                                                        FIX14  178
      JREFcur  = JREFcurs                                                       FIX14  179
      JKWcur   = JKWcurs                                                        FIX14  180
      JTYPcur  = JTYPcurs                                                       DFTEX4 169
        ENDIF                                                                   MSGEXP  23
      ENDDO                                                                     MSGEXP  24
      RETURN                                                                    MSGEXP  25
      END                                                                       MSGEXP  26
      FUNCTION NOVAL(VAL)                                                       NOVAL    2
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION VAL(1)                                                          NOVAL    4
      NOVAL  = 1                                                                NOVAL    5
      DO 10 I=1,4                                                               NOVAL    6
      IF (ITYPLS(VAL(1)) .EQ. ITYPLS(UNDEF(I)))  NOVAL = 0                      NOVAL    7
   10 CONTINUE                                                                  NOVAL    8
      RETURN                                                                    NOVAL    9
      END                                                                       NOVAL   10
      FUNCTION NPAREF(JOPCDT,JOPPAR)                                            NPAREF   2
C                                                                               NPAREF   3
C              Get the command table index and and reference table index        NPAREF   4
C              of the current parent for a command                              NPAREF   5
C                                                                               NPAREF   6
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               NPAREF   8
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
C                                                                               NPAREF  10
      NPAREF = 0                                                                NPAREF  11
      JOPPAR = 1                                                                NPAREF  12
      DO I=1,NOPCDT                                                             NPAREF  13
        IF(IOPCDT(19,I) .eq. IOPCDT(20,JOPCDT))  THEN                           NPAREF  14
          NPAREF = IOPCDT(22,I)                                                 NPAREF  15
          JOPPAR = I                                                            NPAREF  16
          RETURN                                                                NPAREF  17
        ENDIF                                                                   NPAREF  18
      ENDDO                                                                     NPAREF  19
      RETURN                                                                    NPAREF  20
      END                                                                       NPAREF  21
      SUBROUTINE PACK4 (A1, NNB, NTOT)                                          PACK4    2
C                                                                               PACK4    3
C              PACK4 PACKS NNB NONBLANK CHARS IN A1 FORMAT INTO                 PACK4    4
C              THE ISYMB ARRAY IN A4 FORMAT.  ISYMB IS FILLED TO A TOTAL        PACK4    5
C              OF NTOT CHARS WITH BLANK FILL.                                   PACK4    6
C                                                                               PACK4    7
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      INTEGER A1, TEMP                                                          PACK4   10
      DIMENSION A1(1), TEMP(9)                                                  PACK4   11
      DIMENSION IUNAME(3), IMACNM(3), ILIT(3)                                   NAMELG   5
      DATA IUNAME /4HU-NA,4HME  ,4H    /                                        NAMELG   6
      DATA IMACNM /4HMACR,4HO-NA,4HME  /                                        NAMELG   7
      DATA ILIT   /4HLITE,4HRAL ,4H    /                                        NAMELG   8
C                                                                               NAMELG   9
      IF (NNB.GT.NTOT) THEN                                                     NAMELG  10
        IF (NTOT.EQ.32) THEN                                                    NAMELG  11
          CALL MSG2(179,IUNAME(1),32,IUNAME(1),IUNAME(1))                       NAMELG  12
        ELSE IF (NTOT.EQ.16) THEN                                               NAMELG  13
          CAll MSG2(179,IMACNM(1),16,IMACNM(1),IMACNM(1))                       NAMELG  14
        ELSE IF (NTOT.EQ.80) THEN                                               NAMELG  15
          CAll MSG2(179,ILIT(1),80,ILIT(1),ILIT(1))                             NAMELG  16
        END IF                                                                  NAMELG  17
      END IF                                                                    NAMELG  18
      NNB2   = MIN0(NNB,NTOT)                                                   NAMELG  19
      L2     = NNB2/4                                                           PACK4   28
      J2     = 1                                                                PACK4   29
      IF (NNB2.LT.4) GO TO 125                                                  PACK4   30
      DO 120 L = 1,L2                                                           PACK4   31
       CALL  A1A4 ( A1(J2), ISYMB(L), 1 )                                       PACK4   32
  120 J2     = J2 + 4                                                           PACK4   33
C                                                                               PACK4   34
C              BLANK FILL PARTIAL WORD                                          PACK4   35
C                                                                               PACK4   36
  125 IF (J2.GT.NNB2) GO TO 160                                                 PACK4   37
      DO 130 J = 1,3                                                            PACK4   38
  130 TEMP(J) = A1(J-1+J2)                                                      PACK4   39
      J1     = NNB2 + 1                                                         PACK4   40
      J2     = J2 + 3                                                           PACK4   41
      DO 140 J = J1,J2                                                          PACK4   42
  140 TEMP(J-L2*4) = HOLL(14)                                                   PACK4   43
       CALL  A1A4 ( TEMP, ISYMB(L2+1), 1 )                                      PACK4   44
C                                                                               PACK4   45
C              BLANK FILL FULL WORDS                                            PACK4   46
C                                                                               PACK4   47
  160 J1     = J2/4 + 1                                                         PACK4   48
      J2     = NTOT/4                                                           PACK4   49
      IF (J1.GT.J2) RETURN                                                      PACK4   50
      DO 170 J = J1,J2                                                          PACK4   51
  170 ISYMB(J) = HOLL(14)                                                       PACK4   52
      RETURN                                                                    PACK4   53
      END                                                                       PACK4   54
                                                                                PName    2
      Function PathName(FileName)                                               PName    3
                                                                                PName    4
c              Allows an environment variable to rename a file                  PName    5
c              and/or set its path. Used in .exe version where                  PName    6
c              batch processing files may set a path name to a                  PName    7
c              file via an environment variable.                                PName    8
                                                                                PName    9
c              FileName  Name of file, or name of environment                   PName   10
c                           variable replacing file name                        PName   11
c              PathName  Name of file, including pathname as                    PName   12
c                           set by an environment variable                      PName   13
                                                                                PName   14
      Character  PathName*256, FileName*256                                     PName   15
      Integer    FileLen, FileStatus                                            PName   16
                                                                                PName   17
                                                                                PName   18
c              Check if name defined via an environment variable.               PName   19
c              If so, get the name with the path                                PName   20
      Call Get_Environment_Variable (FileName, PathName,                        PName   21
     &                               FileLen, FileStatus, .True.)               PName   22
                                                                                PName   23
      SELECT CASE (FileStatus)                                                  PName   24
      CASE (0)  ! Environment variable legal                                    PName   25
c              if zero length, FileName has no path                             PName   26
        IF (FileLen .eq. 0)  PathName = FileName                                PName   27
                                                                                PName   28
      CASE (1)  ! Environment variable does not exist                           PName   29
        PathName = FileName                                                     PName   30
                                                                                PName   31
      CASE (-1) ! Path name too long                                            PName   32
        Write (*,9001) FileName, FileLen, PathName                              PName   33
        Read (*, *) Dummy                                                       PName   34
                                                                                PName   35
      CASE DEFAULT  ! Illegal                                                   PName   36
        Write (*,9002) FileName, FileStatus                                     PName   37
        Read (*, *) Dummy                                                       PName   38
      END SELECT                                                                PName   39
                                                                                PName   40
      Return                                                                    PName   41
                                                                                PName   42
 9001 Format(                                                                   PName   43
     & ' *** File name:', A /                                                   PName   44
     & '     File path too long:', I3,' characters; 256 maximum' /              PName   45
     & '    ', A /                                                              PName   46
     & ' (Press any key to continue)')                                          PName   47
 9002 Format(                                                                   PName   48
     & ' *** Illegal Pathname:', A  /                                           PName   49
     & '               Status:', A  /                                           PName   50
     & ' (Press any key to continue)')                                          PName   51
      End  ! PathName                                                           PName   52
      SUBROUTINE OPTLST(ILV,LSTEND,NV,NVMAX,IV,LEN)                             ALPHA2   1
C             ADD NV AND NVMAX TO START OF OPTIONAL LIST DATA                   ALPHA2   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
C                                                                               OPTLST   5
      DIMENSION ILV(LEN), IV(1)                                                 OPTLST   6
C                                                                               OPTLST   7
      IF (NV.EQ.0) RETURN                                                       OPTLST   8
      IF (LEN.EQ.0) RETURN                                                      OPTLST   9
      IX = LSTEND+1                                                             OPTLST  10
      IV(1) = -IX                                                               OPTLST  11
      DO I=1,NV                                                                 OPTLST  12
          ILV(IX+NV-I+2) = ILV(IX+NV-I)                                         ALPHA2   3
      END DO                                                                    OPTLST  14
      ILV(IX) = NV                                                              OPTLST  15
      ILV(IX+1) = NVMAX                                                         ALPHA2   4
      RETURN                                                                    OPTLST  16
      END                                                                       OPTLST  17
      SUBROUTINE OPLSAV(JOPCDT,JREF,KWD,IREFTB,IVAL,ISYMTB,IA,IFLAG)            FIX7    39
C              PROCESS OPTIONAL LIST KEYWORDS                                   OPLSAV   3
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /OPLIST/ VLIST(2000),LSTEND,LENVLS,LENMAX                          FIX7     2
      DIMENSION IVLIST(2000)                                                    FIX7     3
      EQUIVALENCE (IVLIST(1),VLIST(1))                                          /OPLIST/ 4
C                                                                               OPLSAV   7
      DIMENSION KWD(16,1),IREFTB(5,1),IVAL(1),ISYMTB(16,1),IA(1)                FIX6    61
C                                                                               OPLSAV   9
C              LOOP OVER KEYWORDS IN THIS COMAND (JOPCDT)                       OPLSAV  10
      NK = IOPCDT(10,JOPCDT)                                                    OPLSAV  11
      IF(NK.EQ.0) THEN                                                          DFTEXP 179
C              If in SET-DEFAULT ignore optional lists                          DFTEXP 180
        IF(ISDflg .NE. 0) THEN                                                  DFTEX2  33
          LSTEND = 0                                                            DFTEXP 182
          LENVLS = LENMAX                                                       DFTEXP 183
        ENDIF                                                                   DFTEXP 184
        RETURN                                                                  DFTEXP 185
      ENDIF                                                                     DFTEXP 186
      JKB = IOPCDT(9,JOPCDT)                                                    OPLSAV  13
      JKE = JKB + NK - 1                                                        OPLSAV  14
      DO 1000 JK=JKB,JKE                                                        OPLSAV  15
          JKWcur = JK - JKB + 1                                                 ERR-01 582
C              CHECK KEYWORD TYPE FOR NORMAL OPTIONAL LIST                      OPLSAV  16
          KTYPE = KWD(8,JK)                                                     OPLSAV  17
          IF (KTYPE.EQ.11 .OR. KTYPE.EQ.12 .OR. KTYPE.EQ.13 .OR.                OPLSAV  18
     1        KTYPE.EQ.15 .OR. KTYPE.EQ.16 .OR. KTYPE.EQ.18) THEN               OPLSAV  19
C              GET THE KEYWORD VALUE (A PTR INTO IVLIST)                        OPLSAV  20
              IVPTR2 = IREFTB(2,JREF) + IOPCDT(17,JOPCDT)                       DEF2    30
     1                + IOPCDT(16,JOPCDT) + KWD(12,JK)                          DEF2    31
              IVPTR = IVPTR2 + IOPCDT(16,JOPCDT)                                DEF2    32
              IV = IVAL(IVPTR)                                                  OPLSAV  22
              IF (NOVAL(IV).EQ.0) GO TO 1000                                    OPLSAV  23
C              CHECK FOR LIST ALREADY IN IA (FROM A LIKE, FOR INSTANCE)         OPLSAV  24
              IF (IV.GT.0) GO TO 1000                                           OPLSAV  25
              IV = -IV                                                          OPLSAV  26
C             GET SIZE OF LIST                                                  ALPHA2   5
              N = IVLIST(IV+1)                                                  ALPHA2   6
C              CHECK FOR SPACE IN AA ARRAY                                      OPLSAV  29
              CALL CKAA(IA(1),N+2)                                              ALPHA2   7
C              MOVE DATA FROM IVLIST TO IA                                      OPLSAV  31
              IA(IAX+1) = IVLIST(IV)                                            ALPHA2   8
              IA(IAX+2) = N                                                     ALPHA2   9
              CALL MOVEN(IVLIST(IV+2),IA(IAX+3),N)                              ALPHA2  10
C              RESET KEYWORD VALUE TO POINT AT THE DATA IN IA                   OPLSAV  34
              IVAL(IVPTR) = IAX + 1                                             OPLSAV  35
              IVAL(IVPTR2) = IAX + 1                                            DEF2    33
C              INCREMENT IAX                                                    OPLSAV  36
              IAX = IAX + N + 2                                                 ALPHA2  11
C              CHECK FOR OPTIONAL LIST (LIST OF CHILDREN)                       OPLSAV  38
          ELSE IF (KTYPE.EQ.20) THEN                                            OPLSAV  39
              IVPTR2 = IREFTB(2,JREF) + IOPCDT(17,JOPCDT)                       DEF2    34
     1                + IOPCDT(16,JOPCDT) + KWD(12,JK)                          DEF2    35
              IVPTR = IVPTR2 + IOPCDT(16,JOPCDT)                                DEF2    36
              IV = IVAL(IVPTR)                                                  OPLSAV  41
              IF (NOVAL(IV).EQ.0) GO TO 1000                                    OPLSAV  42
C              CHECK FOR LIST ALREADY IN IA (FROM A LIKE, FOR INSTANCE)         OPLSAV  43
              IF (IV.GT.0) GO TO 1000                                           OPLSAV  44
              IV = -IV                                                          OPLSAV  45
C              SYMBOL TYPE                                                      OPLSAV  46
              ISTYPE = KWD(10,JK)                                               OPLSAV  47
C              FIND CORRESPONDING COMMAND                                       OPLSAV  48
              JOPCH = JOPSRC(11,ISTYPE)                                         OPLSAV  49
C              LOOP OVER THE VALUES IN THE LIST                                 OPLSAV  50
              M = IVLIST(IV)                                                    ALPHA2  12
              DO I=1,M                                                          ALPHA2  13
                  JSYM = IVLIST(IV+I+1)                                         ALPHA2  14
C              CHECK IF DEFINED                                                 OPLSAV  54
                  IF (ISYMTB(10,JSYM).EQ.0) THEN                                SYMSIZ  60
C              IF NOT DEFINED, INCREMENT THE CHILD COMMAND                      OPLSAV  56
                      CALL INCRRF(ISYMTB(1,1),IREFTB(1,1),JOPCH,JSYM,           OPLSAV  57
     1                            JREFCH)                                       OPLSAV  58
                  ELSE                                                          OPLSAV  59
                      JREFCH = IOPCDT(14,JOPCH) + ISYMTB(12,JSYM) - 1           SYMSIZ  61
                  END IF                                                        OPLSAV  61
C              SET PARENT POINTER IN REFERENCE TABLE                            OPLSAV  62
                  CALL SETPRN(JREFCH,JOPCH,JOPCDT,1,IREFTB(1,1),                OPLSAV  63
     1                        ISYMTB(1,1))                                      OPLSAV  64
              END DO                                                            OPLSAV  65
C              FOR NOW, ZERO VALUE                                              OPLSAV  66
              IVAL(IVPTR) = 0                                                   OPLSAV  67
              IVAL(IVPTR2) = 0                                                  DEF2    37
          ELSE IF (KTYPE.EQ.10) THEN                                            FIX6    62
C              Handle "non-list child" keyword type                             FIX6    63
            IVPTR  = IREFTB(2,JREF) + IOPCDT(17,JOPCDT)                         FIX6    64
     $              + IOPCDT(16,JOPCDT)*2 + KWD(12,JK)                          FIX6    65
C              SET PARENT POINTER IN REFERENCE TABLE                            HVAC17  82
            IOPCDT(22,JOPCDT) = JREF                                            HVAC17  83
C              SYMBOL TYPE                                                      HVAC17  84
            ISTYPE = KWD(10,JK)                                                 HVAC17  85
C              FIND CORRESPONDING COMMAND                                       HVAC17  86
            JOPCH  = JOPSRC(11,ISTYPE)                                          HVAC17  87
            M      = KWD(9,JK)                                                  HVAC17  88
C              LOOP THROUGH LIST AND SET PARENT INDEX IN REF TABLE              HVAC17  89
            DO I=1,M                                                            HVAC17  90
              IF (NOVAL(IVAL(IVPTR+I-1)).EQ.0) GO TO 1000                       HVAC17  91
              JSYM   = IVAL(IVPTR+I-1)                                          HVAC17  92
              IF (ISYMTB(10,JSYM).EQ.0) THEN                                    HVAC17  93
C              IF NOT DEFINED, INCREMENT THE CHILD COMMAND                      HVAC17  94
                CALL INCRRF(ISYMTB,IREFTB,JOPCH,JSYM,JREFCH)                    HVAC17  95
              ELSE                                                              HVAC17  96
                JREFCH = IOPCDT(14,JOPCH) + ISYMTB(12,JSYM) - 1                 HVAC17  97
              END IF                                                            HVAC17  98
              CALL SETPRN(JREFCH,JOPCH,JOPCDT,1,IREFTB,ISYMTB)                  HVAC17  99
            ENDDO                                                               HVAC17 100
          END IF                                                                FIX6    80
 1000 CONTINUE                                                                  OPLSAV  69
C              If not in recursive lib fetch then re-initalize list area        FIX7    41
      IF(IFLAG .eq. 1)  THEN                                                    FIX7    42
        LSTEND = 0                                                              FIX7    43
        LENVLS = LENMAX                                                         FIX7    44
      ENDIF                                                                     FIX7    45
      RETURN                                                                    OPLSAV  72
      END                                                                       OPLSAV  73
      SUBROUTINE  PPINDP                                                        PPINDP   2
C              ---                                                              PPINDP   3
C              --- PUT POST PROCESSOR INDICATORS INTO IREPRT ARRAY              PPINDP   4
C              ---                                                              PPINDP   5
      COMMON  /PPBDL/   IPPFLG                                                  /PPBDL/  2
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
C              ---                                                              PPINDP   8
      IF( IPPFLG .EQ. 0 )  GOTO  490                                            PPINDP   9
      DO  440  I = 1 , 14                                                       PPINDP  10
      IF( IREPRT(I) .EQ. 1 )  IREPRT(I) = 3                                     PPINDP  11
      IF(  ( (IPPFLG.EQ.2) .OR. (IPPFLG.EQ.4) ) .AND.                           PPINDP  12
     1             ( IREPRT(I) .EQ. 0 )  )  IREPRT(I) = 2                       PPINDP  13
  440 CONTINUE                                                                  PPINDP  14
      DO  450  I = 16 , 30                                                      PPINDP  15
      IF( IREPRT(I) .EQ. 1 )  IREPRT(I) = 3                                     PPINDP  16
      IF(  ( (IPPFLG.EQ.3) .OR. (IPPFLG.EQ.4) ) .AND.                           PPINDP  17
     1             ( IREPRT(I) .EQ. 0 )  )  IREPRT(I) = 2                       PPINDP  18
  450 CONTINUE                                                                  PPINDP  19
  490 CONTINUE                                                                  PPINDP  20
      RETURN                                                                    PPINDP  21
      END                                                                       PPINDP  22
      SUBROUTINE PUTOP (IA, IOP, LVL, ISTK, NSTK, IEOC)                         PUTOP    2
C                                                                               PUTOP    3
C              PUTOP PUTS AN OP ON THE STACK AND POPS THE STACK TO              PUTOP    4
C              THE STRING IF NECESSARY                                          PUTOP    5
C                                                                               PUTOP    6
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      DIMENSION ISTK(3,20), IA(1), LVL(1)                                       PUTOP    8
C                                                                               PUTOP    9
      IEOC   = 0                                                                PUTOP   10
C              IF TIME TO POP STACK AND OP IS NOT (                             PUTOP   11
      IF ((LVL(1).LE.ISTK(2,NSTK)).AND.(LVL(1).NE.9)) GO TO 100                 PUTOP   12
      NSTK   = NSTK + 1                                                         PUTOP   13
      IF (NSTK.LE.20) GO TO 20                                                  PUTOP   14
      CALL FUNERR (68)                                                          PUTOP   15
      IEOC   = 1                                                                PUTOP   16
      CALL SKPEOC                                                               PUTOP   17
      GO TO 300                                                                 PUTOP   18
   20 ISTK(1,NSTK) = IOP                                                        PUTOP   19
      ISTK(2,NSTK) = LVL(1)                                                     PUTOP   20
      GO TO 300                                                                 PUTOP   21
C                                                                               PUTOP   22
C              POP STACK TIL ( OR LVL(1).GT.                                    PUTOP   23
C                                                                               PUTOP   24
  100 IF (IOP.EQ.10) GO TO 200                                                  PUTOP   25
  110 IF (LVL(1).GT.ISTK(2,NSTK)) GO TO 140                                     PUTOP   26
      IF (ISTK(1,NSTK).EQ.9) GO TO 140                                          PUTOP   27
      IF (ISTK(1,NSTK).EQ.13) GO TO 120                                         PUTOP   28
      CALL MOVEAA (IA, 1, 1)                                                    PUTOP   29
      CALL MOVEAA (IA, ISTK(1,NSTK), 1)                                         PUTOP   30
      NSTK   = NSTK - 1                                                         PUTOP   31
      GO TO 110                                                                 PUTOP   32
  120 CALL MOVEAA (IA, 3, 1)                                                    PUTOP   33
      CALL MOVEAA (IA, ISTK(3,NSTK), 3)                                         PUTOP   34
      NSTK   = NSTK-1                                                           PUTOP   35
      GO TO 110                                                                 PUTOP   36
  140 NSTK   = NSTK+1                                                           PUTOP   37
      ISTK(1,NSTK) = IOP                                                        PUTOP   38
      ISTK(2,NSTK) = LVL(1)                                                     PUTOP   39
      GO TO 300                                                                 PUTOP   40
C                                                                               PUTOP   41
C              POP TIL (                                                        PUTOP   42
C                                                                               PUTOP   43
  200 IPAR   = 1                                                                PUTOP   44
  210 IF (ISTK(1,NSTK).EQ.9) GO TO 240                                          PUTOP   45
      IF (ISTK(1,NSTK).EQ.13) GO TO 220                                         PUTOP   46
      IF (ISTK(1,NSTK).EQ.8) GO TO 230                                          PUTOP   47
      CALL MOVEAA (IA, 1, 1)                                                    PUTOP   48
      CALL MOVEAA (IA, ISTK(1,NSTK),1)                                          PUTOP   49
      NSTK   = NSTK - 1                                                         PUTOP   50
      GO TO 210                                                                 PUTOP   51
  220 CALL MOVEAA(IA, 3, 1)                                                     PUTOP   52
      CALL MOVEAA (IA, ISTK(3,NSTK), 3)                                         PUTOP   53
      NSTK   = NSTK - 1                                                         PUTOP   54
      GO TO 210                                                                 PUTOP   55
  230 IPAR   = IPAR + 1                                                         PUTOP   56
      NSTK   = NSTK - 1                                                         PUTOP   57
      GO TO 210                                                                 PUTOP   58
  240 IF (ISTK(3,NSTK).EQ.IPAR) GO TO 250                                       PUTOP   59
      CALL FUNERR (65)                                                          PUTOP   60
  250 NSTK   = NSTK - 1                                                         PUTOP   61
  300 CONTINUE                                                                  PUTOP   62
      RETURN                                                                    PUTOP   63
      END                                                                       PUTOP   64
      SUBROUTINE RBD(JREF,JOPCDT,IA,ISYMTB,KONTXT,IREFTB,LKDAT,NAMPTR,          DFTEX3 436
     $               LSDPTR,LKPTR,Iphase)                                       DFTEX3 437
C                                                                               RBIN     3
C                  THIS ROUTINE PROCESSES THE REPORT-BLOCK COMMAND              RBIN     4
C                                                                               RBIN     5
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               RBIN     9
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON  /HREP  / NVTLIM,IVTLIM(2,30),NRB,LRB,NHRP,LHRP,IRB,IHRP,          HVAC7    1
     $                 JRBOP,JHROP                                              HVAC7    2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /OPLIST/ VLIST(2000),LSTEND,LENVLS,LENMAX                          FIX7     2
      DIMENSION IVLIST(2000)                                                    FIX7     3
      EQUIVALENCE (IVLIST(1),VLIST(1))                                          /OPLIST/ 4
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      COMMON /PREFIX/ PREFIX(3,10)                                              FIX11    3
      DIMENSION ERRPX(3), WARPX(3), CAUPX(3), DEFPX(3), INPPX(3),               /PREFIX/ 3
     1      LIKPX(3), NOTPX(3), FROPX(3), LIBPX(3), UDFPX(3)                    FIX11    4
      EQUIVALENCE (ERRPX(1),PREFIX(1,1)), (WARPX(1),PREFIX(1,2)),               /PREFIX/ 5
     1            (CAUPX(1),PREFIX(1,3)), (DEFPX(1),PREFIX(1,4)),               /PREFIX/ 6
     2            (INPPX(1),PREFIX(1,5)), (LIKPX(1),PREFIX(1,6)),               /PREFIX/ 7
     3            (FROPX(1),PREFIX(1,7)), (NOTPX(1),PREFIX(1,8)),               FIX11    5
     4            (LIBPX(1),PREFIX(1,9)), (UDFPX(1),PREFIX(1,10))               FIX11    6
C                                                                               /PREFIX/ 9
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION IA(900000),ISYMTB(16,1),KONTXT(16,1),NAME(4),IREFTB(5,1)        FIX6    87
      DATA ISVVL/3/                                                             OPLST1 132
C              SET SOME POINTERS                                                RBIN    33
      NSAVE = IOPCDT(17,JOPCDT)                                                 OPLST1 133
C              IKW IS THE FIRST KEYWORD FOR COMMAND                             RBIN    34
      IKW    = IOPCDT(9,JOPCDT)                                                 RBIN    35
C              NKW IS THE NUMBER OF KEYWORDS FOR THIS COMMAND                   RBIN    36
      NKW    = IOPCDT(10,JOPCDT)                                                RBIN    37
C              LVAL IS THE LENGTH OF THE VALUE ARRAY                            RBIN    38
      LVAL   = IOPCDT(16,JOPCDT)                                                RBIN    39
C              IAVPT1 IS THE START OF THE VALUE BLOCK                           4XAA   118
      IAXS = IREFTB(2,JREF)                                                     DEF2    40
      IAVPT1 = IAXS + NSAVE                                                     DEF2    41
C              LTOT IS THE TOTAL SIZE OF THE VALUE BLOCK                        4XAA   120
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,JOPCDT)                                 4XAA   121
      IAVPTR = IAVPT1 + LVAL                                                    4XAA   126
C              CHECK V-T FOR LEGAL ENTRY                                        RBIN    57
      IVT = IA(IAVPTR+1)                                                        OPLST1 157
C              IF NOT DEFINED, SKIP                                             OPLST1 158
      IF (NOVAL(IVT).EQ.0) GO TO 1000                                           DFTEX4 170
C              PICK UP TYPE                                                     RBIN    62
      ITYPE = ISYMTB(9,IVT)                                                     SYMSIZ  62
C              LOOK IT UP IN TABLE                                              RBIN    64
      DO 120 I=1,NVTLIM                                                         RBIN    65
        IF((IVTLIM(1,I).NE.0).and.(ITYPE.EQ.IVTLIM(1,I)))  GOTO 130             BIGNA2   7
  120 CONTINUE                                                                  RBIN    67
C              NOT FOUND                                                        RBIN    68
C              GET SYMBOL DESCRIPTOR                                            RBIN    69
      CALL SYMDSC(ITYPE,NAME)                                                   COMB03  24
      CALL MSG2(54,NAME,DUM, DUM, DUM)                                          RBIN    71
      I      = NVTLIM                                                           RBIN    72
C              SET MAXVAL TO MAXIMUM V-L VALUE                                  RBIN    73
  130 MAXVAL = IVTLIM(2,I)                                                      RBIN    74
C              IF END-USE BLOCK, FILL IN DEFAULTS IF FLAG = 99 SPECIFIED        RBIN    75
      IVL = IA(IAVPTR+2)                                                        OPLST1 161
      IF (NOVAL(IVL).EQ.0) GO TO 1000                                           DFTEX4 171
C              CHECK THAT NUMBERS IN V-L DON'T EXCEED MAXVAL                    BIGNA2   8
      IF(IVL .LT. 0)  THEN                                                      BIGNA2   9
        LEN = IVLIST(IABS(IVL))                                                 BIGNA2  10
      ELSE                                                                      BIGNA2  11
        LEN = IA(IVL)                                                           BIGNA2  12
      ENDIF                                                                     BIGNA2  13
      DO I=1,LEN                                                                BIGNA2  14
        IF(IVL .LT. 0)  THEN                                                    BIGNA2  15
          IVLVAL = INT(VLIST(IABS(IVL)+I+1))                                    BIGNA2  16
        ELSE                                                                    BIGNA2  17
          IVLVAL = INT(TYPLS(IA(IVL+I+1)))                                      BIGNA2  18
        ENDIF                                                                   BIGNA2  19
          IF (IVLVAL.GT.MAXVAL)                                                 BIGNA2  20
     1        CALL MSG2(55,I,IVLVAL,MAXVAL,0)                                   BIGNA2  21
      ENDDO                                                                     BIGNA2  22
 1000 IF(Iphase .ne. 2)  THEN                                                   DFTEX3 438
        CALL LSDFIL(JOPCDT,ISYMTB,KONTXT(1,IKW),NKW,IA(IAVPT1+1),               DFTEX3 439
     $              IA(LKDAT+1),LSDPTR,ISYMTB(1,LKPTR),NAMPTR,LVAL)             DFTEX3 440
        IF(Iphase .eq. 1) RETURN                                                DFTEX3 441
      ENDIF                                                                     DFTEX3 442
      RETURN                                                                    RBIN   123
      END                                                                       RBIN   124
      SUBROUTINE RDDFTS                                                         RDDFTS   2
C                                                                               RDDFTS   3
C              READ DOE-2 BUILT-IN DEFAULTS from default library                RDDFTS   4
C                                                                               RDDFTS   5
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               RDDFTS   7
      USE ERR_MOD                                                               -048   175
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON /IUNITS/ VKONV(300),DUMLOG(4),JUNITS(4,300,2),NUNITS,KUNITS        UNITS1   1
      INTEGER DUMLOG                                                            SUBTY1   1
      DIMENSION IUNITS(4,300)                                                   UNITS1   2
      EQUIVALENCE (IUNITS(1,1),JUNITS(1,1,1))                                   /IUNITS/ 4
      COMMON /KEYLEN/  NCONTX,ICONTX,IDFT,NDFT,IEXP,NEXP,LKEYAA,KEYFLG          /KEYLEN/ 2
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON /PDARGSL/ loc_args                                                 /PDARGL/ 2
      COMMON /DFT_STR/ numDFT,idftStr(3,1024)                                   -042L5b 19
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON /KEYRD/ KEYREAD, SETUPF, fdfnm, wdfnm, iffnm, lffnm,               /KEYRD/  2
     $               kffnm, str2,                                               /KEYRD/  3
     $               ifdlength, iwdlength, iiflength, ilflength                 /KEYRD/  4
      CHARACTER*256 fdfnm, wdfnm, iffnm, lffnm, kffnm, str2                     /KEYRD/  5
      INTEGER SETUPF                                                            /KEYRD/  6
      Character PathName*256                                                    -048n   38
      NPreDef= NSYMTB                                                           DFTEX4 176
      LIBDFT = 31                                                               RDDFTS  22
      ISETDF = 0                                                                METR1   30
#ifdef _DLL                                                                  /* -048   177 */ 
      str2 = fdfnm(1:ifdLength)//'BDLDFT.DAT'                                   -048   178
#else                                                                        /* -048   179 */ 
c              check if file name or path modified via environment              -048n   39
      str2 = PathName('BDLDFT.DAT')                                             -048n   40
#endif                                                                       /* -048   180 */ 
      OPEN( LIBDFT, FILE=str2, FORM='FORMATTED',                                RDDFTS  24
     1              ACTION='READ',SHARE='DENYNONE',status='unknown' )           -037     5
      REWIND LIBDFT                                                             RDDFTS  26
      READ( LIBDFT,9001,END=9000) JREF                                          RDDFTS  27
      IOP    = 0                                                                RDDFTS  28
      JREF   = 0                                                                RDDFTS  29
      REWIND LIBDFT                                                             RDDFTS  30
C              INECHO=1 MEANS NO INPUT ECHO                                     RDDFTS  31
      NOECHS = NOECHO                                                           RDDFTS  32
      NOECHO = 1                                                                RDDFTS  33
C              MAKE THE INPUT FILE BE THE LIBRARY FILE                          RDDFTS  34
      INFILS = INFIL                                                            RDDFTS  35
      INFIL  = LIBDFT                                                           RDDFTS  36
C              SAVE THE PRESESNT STATE OF INPUT BUFFER                          RDDFTS  37
      K1S = KARDI1                                                              RDDFTS  38
      K2S = KARDI2                                                              RDDFTS  39
      KXS = KARDX                                                               RDDFTS  40
      KNMS = KRDNUM                                                             RDDFTS  41
      CALL MOVEN(KARD(1),KRDSAV(1),82)                                          RDDFTS  42
C              SET BUFFER STATE TO FORCE A READ                                 RDDFTS  43
      KARDI1 = 1                                                                RDDFTS  44
      KARDX = KARDI1                                                            RDDFTS  45
      KARDI2 = KARDI1                                                           RDDFTS  46
      KRDNUM = 0                                                                RDDFTS  47
      KARD(KARDX) = KCSP                                                        RDDFTS  48
      IEXP = IAX                                                                DFTEX4 177
C              SCAN IN THE LIBRARY DATA & SAVE IN INPUT ARRAY                   RDDFTS  49
  100 CALL COMMND(IA,ISYMTB,IOP,LEVEL,JREF,JOPCDT)                              RDDFTS  50
      IF( IEOF .NE. 0 )  GOTO  110                                              RDDFTS  51
      JOPcur = JOPCDT                                                           RDDFTS  52
      JREFcur= JREF                                                             RDDFTS  53
      JKWcur = 0                                                                RDDFTS  54
      JTYPcur= 1                                                                DFTEX4 178
      ISDflg = 0                                                                RDDFTS  55
C               IF IT WAS NOT RECOGNIZED, GET NEXT COMMAND                      RDDFTS  56
      IF (IOP .EQ. 0)  GO TO 100                                                RDDFTS  57
C               CHECK FOR LEGAL DEFAULT LIBRARY COMMAND                         RDDFTS  58
      IF ((IOP .NE. 18) .and. (IOP .NE. 20) .and. (IOP .NE. 21).and.            RDDFTS  59
     1    (IOP .NE. 31) .and. (IOP .NE. 32) .and. (IOP .NE. 28)) THEN           RDDFTS  60
        CALL MSG(110)                                                           RDDFTS  61
        CALL SKPEOC                                                             RDDFTS  62
        GO TO 100                                                               RDDFTS  63
      ENDIF                                                                     RDDFTS  64
      IF( IOP .EQ. 18)  THEN                                                    RDDFTS  65
        ISDflg = 2                                                              RDDFTS  66
        ISETDF = 1                                                              METR1   31
        CALL DFTIN(ISYMTB,KONTXT,IA)                                            RDDFTS  67
      ELSEIF( IOP .EQ. 20)  THEN                                                RDDFTS  68
        GO TO 110                                                               RDDFTS  69
      ELSEIF( IOP .EQ. 21)  THEN                                                RDDFTS  70
        CALL DEFINI                                                             RDDFTS  71
      ELSEIF( IOP .EQ. 28)  THEN                                                RDDFTS  72
        CALL LISTI                                                              RDDFTS  73
        LIBLST = 0                                                              RDDFTS  74
      ELSEIF( IOP .EQ. 31)  THEN                                                RDDFTS  75
        CALL HELP(IA,ISYMTB,KONTXT)                                             RDDFTS  76
      ELSEIF( IOP .EQ. 32)  THEN                                                RDDFTS  77
        CALL DEBUGI(IA)                                                         RDDFTS  78
C              If metric keyword file desired, and if BDLKEYm.NEW               METR1   32
C              being created, convert the fixed minima, maxima, and             METR1   33
C              defaults to metric                                               METR1   34
        IF (METIN.EQ.1 .AND. KUNITS.EQ.0 .AND. NEXP.EQ.0                        METR1   35
     +    .AND. IPDFLG.EQ.0 .AND. KEYFLG.EQ.1 .AND. ISETDF.EQ.0)                METR1   36
     +    CALL KEYVRT(0)                                                        METR1   37
      ENDIF                                                                     RDDFTS  79
      GO TO 100                                                                 RDDFTS  80
C              RESTORE INPUT BUFFER STATE                                       RDDFTS  81
  110 KARDI1 = K1S                                                              RDDFTS  82
      KARDI2 = K2S                                                              RDDFTS  83
      KARDX  = KXS                                                              RDDFTS  84
      KRDNUM = KNMS                                                             RDDFTS  85
      CALL MOVEN(KRDSAV(1),KARD(1),82)                                          RDDFTS  86
C              RESTORE ORIGINAL INPUT FILE                                      RDDFTS  87
      INFIL  = INFILS                                                           RDDFTS  88
C              RESTORE ECHO                                                     RDDFTS  89
      NOECHO = NOECHS                                                           RDDFTS  90
C              Set the number of pre-defined symbols                            DFTEX3 444
      NPreDef = NSYMTB                                                          DFTEX3 445
 9000 CLOSE ( LIBDFT )                                                          RDDFTS  91
      NEXP  = IAX                                                               DFTEX4 179
      LKEYAA= IAX                                                               DFTEX4 180
      IF((KEYFLG.EQ.0).OR.(IEXP .EQ. NEXP).OR.(IFATAL.NE.0))  RETURN            -044c    1
C                                                                               DFTEX4 182
C               WRITE new version of BDLKEY with expressions record             DFTEX4 183
C                                                                               DFTEX4 184
C               First change library flags back (now can't read input!)         DFTEX4 185
      DO I=1,NSYMTB                                                             DFTEX4 186
        IF(ISYMTB(13,I) .ne. 0) THEN                                            DFTEX4 187
          ISYMTB(12,I) = -777                                                   DFTEX4 188
          ISYMTB(13,I) = 0                                                      DFTEX4 189
          ISYMTB(15,I) = 0                                                      DFTEX4 190
        ENDIF                                                                   DFTEX4 191
      ENDDO                                                                     DFTEX4 192
C              If metric keyword file desired, set KUNITS to 1 (metric)         METR1   38
C              and write the metric keyword file BDLKEYm.NEW                    METR1   39
      IF (METIN.EQ.1) THEN                                                      METR1   40
        KUNITS = 1                                                              METR1   41
        str2 = 'BDLKEYm.NEW'                                                    METR1   42
C              Otherwise just write BDLKEY.NEW                                  METR1   43
      ELSE                                                                      METR1   44
        KUNITS = 0                                                              METR1   45
        str2 = 'BDLKEY.NEW'                                                     METR1   46
      END IF                                                                    METR1   47
#ifndef _DLL                                                                 /* -048n   41 */ 
c              check if file name or path modified via environment              -048n   42
      str2 = PathName(str2)                                                     -048n   43
#endif                                                                       /* -048n   44 */ 
      OPEN( LIBDFT, FILE=str2, FORM='UNFORMATTED',ERR=9010,                     PC22a    3
     1      RECL=550000,RECORDTYPE='variable', STATUS='NEW' )                   PC22a    4
      IF(METIN .EQ. 1)  THEN                                                    DFTEX4 196
        WRITE(LIBDFT) (VKONV(I),((JUNITS(J,I,K),J=1,4),K=1,2),I=1,300)          DFTEX4 197
      ELSE                                                                      DFTEX4 198
        WRITE(LIBDFT) (VKONV(I),(JUNITS(J,I,2),J=1,4),                          DFTEX4 199
     $                          (JUNITS(J,I,1),J=1,4),I=1,300)                  DFTEX4 200
      ENDIF                                                                     DFTEX4 201
      WRITE(LIBDFT) KUNITS,NSYMTB,MSYMTB,NCONTX,ICONTX,NOPCDT,                  DFTEX4 202
     1              IDFT, NDFT, IEXP, NEXP, LKEYAA                              DFTEX4 203
C               READ IN SYMBOL, CONTEXT, COMMAND, AND DEFAULT TABLES            DFTEX4 204
      WRITE(LIBDFT) ((ISYMTB(I,J), I=1,16), J=1,NSYMTB),                        DFTEX4 205
     1              ((KONTXT(I,J), I=1,16), J=ICONTX,NCONTX),                   DFTEX4 206
     2              ((IOPCDT(I,J), I=1,24), J=1,NOPCDT)                         DFTEX4 207
      WRITE(LIBDFT) (IA(I),I=IDFT,NDFT)                                         DFTEX4 208
      WRITE(LIBDFT) (IA(I),I=IEXP,NEXP)                                         DFTEX4 209
      CLOSE(LIBDFT)                                                             DFTEX4 210
C               Tell them how big it is!                                        DFTEX4 211
      IREC1 = (1+8)*300                                                         DFTEX4 212
      IREC2 = NSYMTB*16+(NCONTX-ICONTX+1)*16+NOPCDT*24                          DFTEX4 213
      IREC3 = NDFT-IDFT+1                                                       DFTEX4 214
      IREC4 = NEXP-IEXP+1                                                       DFTEX4 215
      ITOT  = 11+IREC1+IREC2+IREC3+IREC4                                        DFTEX4 216
      IF (METIN.EQ.0) THEN                                                      METR1   48
        WRITE(IOUTPT,9105)                                                      METR1   49
        WRITE(80,9105)                                                          METR1   50
        WRITE(IOUTPT,9100)    11,   11*4,   11*4+8,                             METR1   51
     $                    IREC1,IREC1*4,IREC1*4+8,                              METR1   52
     $                    IREC2,IREC2*4,IREC2*4+8,                              METR1   53
     $                    IREC3,IREC3*4,IREC3*4+8,                              METR1   54
     $                    IREC4,IREC4*4,IREC4*4+8,                              METR1   55
     $                    ITOT ,ITOT *4,ITOT *4+40                              METR1   56
      ELSE                                                                      METR1   57
        WRITE(IOUTPT,9106)                                                      METR1   58
        WRITE(80,9106)                                                          METR1   59
        WRITE(IOUTPT,9101)    11,   11*4,   11*4+8,                             METR1   60
     $                    IREC1,IREC1*4,IREC1*4+8,                              METR1   61
     $                    IREC2,IREC2*4,IREC2*4+8,                              METR1   62
     $                    IREC3,IREC3*4,IREC3*4+8,                              METR1   63
     $                    IREC4,IREC4*4,IREC4*4+8,                              METR1   64
     $                    ITOT ,ITOT *4,ITOT *4+40                              METR1   65
      END IF                                                                    METR1   66
C              Now re-initialize so that a run can be performed                 -042L5b284
 9005 CALL INITL                                                                -042L5b285
 9105 FORMAT(' *** Creating BDLKEY.NEW file with expressions record')           DFTEX4 226
 9100 FORMAT(10X,'BDLKEY.NEW has been created with default expressions'/        DFTEX4 227
     $/10X,'   Description of Rec',24x,'Words',4x,'Bytes',' File Bytes'/        DFTEX4 228
     $ 10x,'Record 0: Lengths                       ',3I10/                     DFTEX4 229
     $ 10x,'Record 1: Units Table                   ',3I10/                     DFTEX4 230
     $ 10x,'Record 2: Symbol/Keyword/Command Tables ',3I10/                     DFTEX4 231
     $ 10x,'Record 3: Default Tables                ',3I10/                     DFTEX4 232
     $ 10x,'Record 4: Default Expression Storage    ',3I10/                     DFTEX4 233
     $ 10x,'Total BDLKEY.NEW size (less exp rec mks)',3I10)                     DFTEX4 234
 9106 FORMAT(' *** Creating BDLKEYm.NEW file with expressions record')          METR1   67
 9101 FORMAT(10X,'BDLKEYm.NEW has been created with default expressions'/       METR1   68
     $/10X,'   Description of Rec',24x,'Words',4x,'Bytes',' File Bytes'/        METR1   69
     $ 10x,'Record 0: Lengths                       ',3I10/                     METR1   70
     $ 10x,'Record 1: Units Table                   ',3I10/                     METR1   71
     $ 10x,'Record 2: Symbol/Keyword/Command Tables ',3I10/                     METR1   72
     $ 10x,'Record 3: Default Tables                ',3I10/                     METR1   73
     $ 10x,'Record 4: Default Expression Storage    ',3I10/                     METR1   74
     $ 10x,'Total BDLKEY.NEW size (less exp rec mks)',3I10)                     METR1   75
      RETURN                                                                    DFTEX4 235
 9010 WRITE(IOUTPT,9110)                                                        DFTEX4 236
#ifdef _DLL                                                                  /* -048   181 */ 
      WRITE(    80,9110)                                                        -048   182
#else                                                                        /* -048   183 */ 
      WRITE(     *,9110)                                                        DFTEX4 237
#endif                                                                       /* -048   184 */ 
 9110 FORMAT(' *** ERROR *** Unable to OPEN file BDLKEY.NEW')                   DFTEX4 238
      GOTO 9005                                                                 -042L5b286
 9001 FORMAT(A4)                                                                RDDFTS  93
      END                                                                       RDDFTS  94
      SUBROUTINE REDEF(ARRAY,LEN)                                               REDEF    2
C                                                                               REDEF    3
C                            THIS ROUTINE LOOKS FOR -99999.                     REDEF    4
C                                                   -88888.                     REDEF    5
C                                                   -77777.                     REDEF    6
C                            IN THE INPUT ARRAY AND REPLACES                    REDEF    7
C                            ANY OCCURANCES WITH ZERO.                          REDEF    8
C                                                                               REDEF    9
C                            THIS IS DONE SO THAT THE SIMULATORS                REDEF   10
C                            DO NOT GET THE FLAG VALUES                         REDEF   11
C                                                                               REDEF   12
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION ARRAY(1)                                                        REDEF   14
      IF (LEN .LT. 1)  RETURN                                                   REDEF   15
      DO 10 I=1,LEN                                                             REDEF   16
      DO 10 J=1,3                                                               REDEF   17
      IF(ITYPLS(ARRAY(I)) .EQ. ITYPLS(UNDEF(J)))  ARRAY(I) = 0.0                REDEF   18
   10 CONTINUE                                                                  REDEF   19
      RETURN                                                                    REDEF   20
      END                                                                       REDEF   21
      SUBROUTINE  RPO(IA,IREFTB,KONTXT)                                         COMB03  25
C                                                                               RPO      3
C                   WRITE REPORT-BLOCK AND HOURLY-REPORT RECORDS TO STD FILE    RPO      4
C                                                                               RPO      5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /HREP  / NVTLIM,IVTLIM(2,30),NRB,LRB,NHRP,LHRP,IRB,IHRP,          HVAC7    1
     $                 JRBOP,JHROP                                              HVAC7    2
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      DIMENSION IA(16,1),KONTXT(16,1),IREFTB(5,1)                               FIX6    88
c                                                                               HR       1
c              Pick up number of each command                                   HR       2
      JRBOP  = 21                                                               HR       3
      JHROP  = 22                                                               HR       4
      NREPB  = IOPCDT(13,JRBOP)                                                 HR       5
      NHREP  = IOPCDT(13,JHROP)                                                 HR       6
c                                                                               HR       7
c              Report blocks                                                    HR       8
      IF (NREPB .EQ. 0)  THEN                                                   HR       9
c              No Report-Blocks so write blank record                           HR      10
        NRB = 0                                                                 HR      11
        LRB = 1                                                                 HR      12
        WRITE (ISTNDF) NRB,LRB                                                  HR      13
        WRITE (ISTNDF) NRB                                                      HR      14
      ELSE                                                                      HR      15
        IST = IAX + 1                            ! Start of record              HR      16
        LRB = NREPB * <+rb;Len>                  ! Length of record             HR      17
        NRB = NREPB                              ! Number of components         HR      18
c              Get reference table pointer and count up length of record        HR      19
        DO  I=1,NRB                                                             HR      20
          IRX    = IOPCDT(14,JRBOP) + I - 1                                     HR      21
          IAVPTR = IREFTB(2,IRX) + IOPCDT(17,JRBOP) + 2*IOPCDT(16,JRBOP)        HR      22
          IVL    = IA(IAVPTR+2,1)                                               HR      23
          LRB    = LRB + IA(IVL,1)               ! Increment record length      HR      24
        ENDDO                                                                   HR      25
c              save enough space for record                                     HR      26
        CALL CKAA(IA,LRB)                                                       HR      27
c                                                                               HR      28
c              Process each component                                           HR      29
        DO  NRP=1,NRB                                                           HR      30
          IRX    = IOPCDT(14,JRBOP) + NRP - 1    ! Name pointer                 HR      31
          ISP    = IREFTB(1,IRX)                                                HR      32
          IDP    = IREFTB(2,IRX)                 ! Data pointer                 HR      33
          IAVPTR = MVTOSM(IRX,JRBOP,0)                                          HR      34
c              move in name                                                     HR      35
          DO  II=1,8                                                            HR      36
            IA(IST+<+rb:NAME>,1) = IA(II,ISP)                                   HR      37
          ENDDO                                                                 HR      38
c              symbol table pointer for Variable-Type                           HR      39
          IVT = IA(IAVPTR+1,1)                                                  HR      40
c              length of list                                                   HR      41
          IVL = IA(IAVPTR+2,1)                                                  HR      42
          LEN = IA(IVL,1)                                                       HR      43
c              move in values                                                   HR      44
          IA(IST+<+rb;SymbolType>,1)    = IA(9,IVT)   ! Symbol type             HR      45
          IA(IST+<+rb:VARIABLE-TYPE>,1) = IA(12,IVT)  ! Component index         HR      46
          IA(IST+<+rb;NumItems>,1)      = LEN         ! Number in list          HR      47
c              move in list                                                     HR      48
          DO  KK=1,LEN                                                          HR      49
            IA(IST+<+rb:VARIABLE-LIST>,1) = INT(TYPLS(IA(IVL+KK+1,1)))          HR      50
          ENDDO                                                                 HR      51
c              save where it went in data array for future                      HR      52
          IA(IDP+2,1) = IST - IAX                                               HR      53
          IST         = IST + <+rb;Len> + LEN                                   HR      54
        ENDDO                                                                   HR      55
c                                                                               HR      56
c              Write report-block records                                       HR      57
        WRITE (ISTNDF) NRB,LRB                                                  HR      58
        CALL WRITEN(ISTNDF,IA(IAX+1,1),LRB)                                     HR      59
        IF(IREPRT(32) .EQ. 1)                                                   HR      60
     &    CALL DUMPIT(20HREPORT-BLOCKS       ,IA(IAX+1,1),LRB)                  HR      61
      ENDIF  ! NREPB                                                            HR      62
c                                                                               HR      63
c                                                                               HR      64
c              Hourly Reports                                                   HR      65
      IF (NHREP .EQ. 0  .OR.  NREPB .EQ. 0)  THEN                               HR      66
c              No Hourly-Report - write blank record                            HR      67
        NHRP = 0                                                                HR      68
        LHRP = 1                                                                HR      69
        WRITE (ISTNDF) NHRP,LHRP                                                HR      70
        WRITE (ISTNDF) NHRP                                                     HR      71
      ELSE                                                                      HR      72
c              start of record                                                  HR      73
        IST  = IAX + 1                           ! Start of record              HR      74
        LHRP = NHREP * <+hr;Len>                 ! Length of record             HR      75
        NHRP = NHREP                             ! Number of components         HR      76
c              Get reference table pointer and count up length of record        HR      77
        DO  I=1,NHRP                                                            HR      78
          IRX    = IOPCDT(14,JHROP) + I - 1                                     HR      79
          IAVPTR = IREFTB(2,IRX) + 2*IOPCDT(16,JHROP) + IOPCDT(17,JHROP)        HR      80
          IRBLST = IA(IAVPTR+39,1)                                              HR      81
          LRBLST = IA(IRBLST,1)                                                 HR      82
          LHRP   = LHRP + LRBLST                 ! Increment record length      HR      83
        ENDDO                                                                   HR      84
c              save enough space for record                                     HR      85
        CALL CKAA(IA,LHRP)                                                      HR      86
c                                                                               HR      87
c              Process each component                                           HR      88
        DO  NRP=1,NHRP                                                          HR      89
          LENREP = 0                                                            HR      90
          IRX    = IOPCDT(14,JHROP) + NRP - 1    ! Name pointer                 HR      91
          ISP    = IREFTB(1,IRX)                                                HR      92
          IDP    = IREFTB(2,IRX)                 ! Data pointer                 HR      93
          IAVPTR = MVTOSM(IRX,JHROP,0)                                          HR      94
c              move in name                                                     HR      95
          DO  II=1,8                                                            HR      96
            IA(IST+<+hr:NAME>,1) = IA(II,ISP)                                   HR      97
          ENDDO                                                                 HR      98
c              convert symbol table pointer to values                           HR      99
          CALL SYMFIL(IA,KONTXT(1,IOPCDT(9,JHROP)),                             HR     100
     &                IOPCDT(10,JHROP)-1,IA(IAVPTR+1,1))                        HR     101
c              convert divide numbers to scales                                 HR     102
          DO  I=2,13                                                            HR     103
            IF (NOVAL(IA(IAVPTR+I,1)) .NE. 0)                                   HR     104
     &        IA(IAVPTR+I,1) = ITYPLS(1.0/TYPLS(IA(IAVPTR+I,1)))                HR     105
          ENDDO                                                                 HR     106
c              move in data                                                     HR     107
          CALL MOVEN(IA(IAVPTR+1,1),IA(IST+<+hr:IOPTION>,1),                    HR     108
     &                                 <+hr:REPORT-SCH>-<+hr:IOPTION>+1)        HR     109
c              move in length of list                                           HR     110
          IRBLST             = IA(IAVPTR+39,1)                                  HR     111
          LEN                = IA(IRBLST,1)                                     HR     112
          IA(IST+<+hr;NumBlocks>,1) = LEN                                       HR     113
c              move in list of report-blocks                                    HR     114
          DO  JJ=1,LEN                                                          HR     115
            NR    = IA(IRBLST+JJ+1,1)                                           HR     116
            NR    = IA(12,NR)                                                   HR     117
c              Length of R-B                                                    HR     118
            IRXRB  = IOPCDT(14,JRBOP) + NR - 1                                  HR     119
            IRBDP  = IREFTB(2,IRXRB)                                            HR     120
            IRBVP  = MSIMPT(IRXRB,JRBOP,0)                                      HR     121
            IVL    = IA(IRBVP+2,1)                                              HR     122
            LENREP = LENREP + IA(IVL,1)                                         HR     123
c              save pointer to R-B not value                                    HR     124
            IA(IST+<+hr:REPORT-BLOCK>,1) = IA(IRBDP+2,1) + IRB - 1              HR     125
          ENDDO                                                                 HR     126
c              check for too many items                                         HR     127
          IF (LENREP .GT. 256)  CALL MSG2(62,IA(1,ISP),LENREP,256,DUM)          -048j    1
          IST = IST + <+hr;Len> + LEN                                           HR     129
        ENDDO                                                                   HR     130
c                                                                               HR     131
c              Write Hourly-Report records                                      HR     132
        WRITE (ISTNDF) NHRP,LHRP                                                HR     133
        CALL WRITEN(ISTNDF,IA(IAX+1,1),LHRP)                                    HR     134
        IF(IREPRT(32) .EQ. 1)                                                   HR     135
     &    CALL DUMPIT(20HHOURLY-REPORTS       ,IA(IAX+1,1),LHRP)                HR     136
      ENDIF  ! NHREP .eq. 0  .or.  NREPB .eq. 0                                 HR     137
c                                                                               HR     138
      RETURN                                                                    RPO    141
      END                                                                       RPO    142
      SUBROUTINE RUNMDY (M, ID, IY, PYMD, PY, IRET)                             RUNMDY   2
C                                                                               RUNMDY   3
C              RUNMDY INPUTS A MONTH,DAY,YEAR SEQUENCE OF                       RUNMDY   4
C              DATA FOR THE RUN-PERIOD COMMAND                                  RUNMDY   5
C                                                                               RUNMDY   6
C              RUNMDY USES   3 WORDS OF COMMWK (21-23)                          RUNMDY   7
C                                                                               RUNMDY   8
C              IRET                                                             RUNMDY   9
C              1 - NO ERROR, NO TERMINATOR                                      RUNMDY  10
C              2 - ERROR                                                        RUNMDY  11
C              3 - TERMINATED ON THRU                                           RUNMDY  12
C              4 - TERMINATED ON ..                                             RUNMDY  13
C              5 - NO DATA, TERMINATED ON ..                                    RUNMDY  14
C                                                                               RUNMDY  15
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      EQUIVALENCE                                                               RUNMDY  21
     1   (COMMWK(21),Y), (COMMWK(22),YMD)                                       RUNMDY  22
C                                                                               RUNMDY  23
C              DEFAULT = ERRORS                                                 RUNMDY  24
      IRET   = 2                                                                RUNMDY  25
C              INPUT MONTH                                                      RUNMDY  26
      CALL GETCS                                                                RUNMDY  27
      IF (ITERM.EQ.0) GO TO 80                                                  RUNMDY  28
C              NO DATA, ENDED ON ..                                             RUNMDY  29
      IRET   = 5                                                                RUNMDY  30
      RETURN                                                                    RUNMDY  31
C              PROCESS MONTH AND DAY                                            RUNMDY  32
   80 CALL MONDAY (M, ID, IERR)                                                 RUNMDY  33
C              IF ANY ERRORS                                                    RUNMDY  34
      IF (IERR.NE.0) RETURN                                                     RUNMDY  35
       call  GETCS                                                              RUNMDY  36
      IF (ISYMB(1).EQ.HOLL(14)) GO TO 190                                       RUNMDY  37
C              IF GOOD NUMBER                                                   RUNMDY  38
          if ( atof( ISYMB, LSYMB, 0, Y ) .ne. 0. )     goto  170               FIXJH1  14
C              BACKSPACE                                                        RUNMDY  40
               call  BKSPAC                                                     RUNMDY  41
      GO TO 190                                                                 RUNMDY  42
  170 IY     = Y                                                                RUNMDY  43
      IF ((Y.GT.1900).AND.(Y.LT.2100.)) GO TO 180                               Y2K      1
      CALL MSG2 (28, 1900.0, 2100.0, DUM, DUM)                                  Y2K      2
  180 PY     = Y                                                                RUNMDY  46
  190 Y      = PY                                                               RUNMDY  47
C              IF YEAR UNSPECIFIED                                              RUNMDY  48
      IF (Y.EQ.0) CALL MSG (68)                                                 RUNMDY  49
      YMD    = (Y*12.+M)*32.+ID                                                 RUNMDY  50
C              IF DATE OUT OF SEQ                                               RUNMDY  51
      IF (YMD.LT.PYMD) CALL MSG (75)                                            RUNMDY  52
      IRET   = 1                                                                RUNMDY  53
      PYMD   = YMD                                                              RUNMDY  54
C              GET NEXT CHARS                                                   RUNMDY  55
      CALL GETCS                                                                RUNMDY  56
C              IF THRU                                                          RUNMDY  57
      if ( ISYMU(1) .eq. HOLL(25) )     goto  220                               RUNMDY  58
C              IF ..                                                            RUNMDY  59
      IF (ITERM.NE.0) GO TO 230                                                 RUNMDY  60
      CALL BKSPAC                                                               RUNMDY  61
      RETURN                                                                    RUNMDY  62
  220 IRET   = 3                                                                RUNMDY  63
      RETURN                                                                    RUNMDY  64
  230 IRET   = 4                                                                RUNMDY  65
      RETURN                                                                    RUNMDY  66
      END                                                                       RUNMDY  67
      SUBROUTINE RUNPDI(JREF0,JOPCDT,AA,ISYMTB,KONTXT,IREFTB)                   ALPHA2  17
C                                                                               RUNPDI   3
C              RUNPDI INPUTS DATA FOR THE RUN-PERIOD COMMAND                    RUNPDI   4
C                                                                               RUNPDI   5
C              RUNPDI USES  10 WORDS OF COMMWK                                  RUNPDI   6
C                                                                               RUNPDI   7
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON  /IRUNPD/  NRUNPD,IRUNPD(6,15)                                     ALPHA    1
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      DIMENSION ITEMP(6)                                                        ALPHA   32
      EQUIVALENCE                                                               RUNPDI  12
     1   (COMMWK(1),I), (COMMWK(2),PYMD),                                       RUNPDI  13
     2   (COMMWK(3),IRET), (COMMWK(4),PY),                                      RUNPDI  14
     3   (COMMWK(5),ITEMP(1),I1),(COMMWK(6),I2),(COMMWK(7),I3),                 RUNPDI  15
     4   (COMMWK(8),I4),(COMMWK(9),I5),(COMMWK(10),I6)                          ALPHA   33
      DIMENSION AA(1),ISYMTB(16,1),KONTXT(16,1),IREFTB(5,1)                     FIX6    89
      DATA IHOLL1/4HFROM/                                                       RUNPDI  18
C                                                                               RUNPDI  19
      NRUNPD = 0                                                                RUNPDI  20
      PY     = 0                                                                RUNPDI  21
      PYMD   = 0                                                                RUNPDI  22
      NRPX = 0                                                                  ALPHA   35
      JREF = JREF0                                                              ALPHA   36
      NSAVE = IOPCDT(17,JOPCDT)                                                 4XAA   157
      LVAL = IOPCDT(16,JOPCDT)                                                  4XAA   158
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,JOPCDT)                                 4XAA   159
C                                                                               RUNPDI  23
C              STARTING DATE                                                    RUNPDI  24
C                                                                               RUNPDI  25
C              GET NEXT CHAR STRING                                             RUNPDI  26
   20 CALL GETCS                                                                RUNPDI  27
      NRPX = NRPX + 1                                                           ALPHA   37
      CALL CKAA(AA,LTOT)                                                        4XAA   160
      IAVPT1 = IAX + NSAVE                                                      4XAA   161
      IAVPTR = IAVPT1 + LVAL                                                    4XAA   162
C              IF NOT FROM,                                                     RUNPDI  28
      if ( ISYMU(1) .ne. IHOLL1 )      call  BKSPAC                             RUNPDI  29
C              INPUT STARTING DATA                                              RUNPDI  30
      CALL RUNMDY (I1, I2, I3, PYMD, PY, IRET)                                  RUNPDI  31
      GO TO (200, 800, 200, 700, 900), IRET                                     RUNPDI  32
C                                                                               RUNPDI  33
C              ENDING DATE                                                      RUNPDI  34
C                                                                               RUNPDI  35
  200 CALL RUNMDY (I4, I5, I6, PYMD, PY, IRET)                                  RUNPDI  36
      GO TO (300, 800, 210, 300, 700), IRET                                     RUNPDI  37
C              BACKSPACE OVER THRU                                              RUNPDI  38
  210 CALL BKSPAC                                                               RUNPDI  39
  300 IF (NRPX.GT.1) CALL INCRRF(ISYMTB,IREFTB,JOPCDT,0,JREF)                   ALPHA   39
      DO I=1,6                                                                  ALPHA   40
      AA(IAVPT1+I) = TYPLS(IPACKB(1,5,5,AA(IAVPT1+I)))                          TYP1    14
      AA(IAVPTR+I) = FLOAT(ITEMP(I))                                            4XAA   164
      AA(IAVPTR+LVAL+I) = FLOAT(ITEMP(I))                                       4XAA   165
      END DO                                                                    ALPHA   42
C              IF RUN PERIOD SPANS MORE TAHN 1 YEAR, GIVE WARNING               ALPHA   43
      IF (AA(IAVPTR+3).NE.AA(IAVPTR+6)) CALL MSG(40)                            4XAA   166
      IREFTB(2,JREF) = IAX                                                      ALPHA   45
      IAX = IAX + LTOT                                                          4XAA   167
C              IF .. NOT HIT                                                    RUNPDI  45
      IF ((IRET.EQ.1).OR.(IRET.EQ.3)) GO TO 20                                  RUNPDI  46
      RETURN                                                                    RUNPDI  47
  700 CALL MSG (78)                                                             RUNPDI  48
      RETURN                                                                    RUNPDI  49
  800 CALL SKPEOC                                                               RUNPDI  50
  900 RETURN                                                                    RUNPDI  51
      END                                                                       RUNPDI  52
      SUBROUTINE SCAN0(IA,KONTXT,NKWD,JKWD,VAL,IVTYPE,NFND)                     EXPR2   87
C                                                                               SCAN0    3
C                                                                               SCAN0    4
C              SCAN0 LOCATES A KEYWORD IN THE KEYWORD TABLE                     SCAN0    5
C              AND INPUTS DATA FOR IT                                           SCAN0    6
C                                                                               SCAN0    7
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /OPLIST/ VLIST(2000),LSTEND,LENVLS,LENMAX                          FIX7     2
      DIMENSION IVLIST(2000)                                                    FIX7     3
      EQUIVALENCE (IVLIST(1),VLIST(1))                                          /OPLIST/ 4
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION KONTXT(16,1),VAL(1),IA(1),IVTYPE(1)                             EXPR2   88
C                                                                               SCAN0   14
C              IF NOT ZERO LEN TBL                                              SCAN0   15
      IF (NKWD.NE.0) GO TO 30                                                   SCAN0   16
      JKWD   = 0                                                                SCAN0   17
      RETURN                                                                    SCAN0   18
C              SEARCH FOR KEYWORD                                               SCAN0   19
   30  call  TBLSCH( ISYMU, KONTXT, 16, NKWD, 1, JKWD )                         KEYSIZ  23
C              IF FOUND                                                         SCAN0   21
      IF (JKWD.NE.0)  THEN                                                      ERR-01 583
        JKWcur = JKWD                                                           ERR-01 584
        GO TO 90                                                                ERR-01 585
      ENDIF                                                                     ERR-01 586
C                                                                               SCAN0   23
C              CHECK FOR MISSING ..                                             SCAN0   24
C                                                                               SCAN0   25
C              SEARCH COMMAND TABLE                                             SCAN0   26
           call  TBLSCH( ISYMU, IOPCDT, 24, NOPCDT, 1, JOPCDT )                 OPLST1 193
C              IF NOT COMMAND, ASSUME IT WAS UNAME                              SCAN0   28
      IF (JOPCDT.EQ.0) RETURN                                                   EXPR2   89
C              MESSAGE                                                          SCAN0   30
      CALL MSG (18)                                                             SCAN0   31
               call  BKSPAC                                                     SCAN0   32
              ITERM = 1                                                         SCAN0   33
      RETURN                                                                    SCAN0   34
C                                                                               SCAN0   38
C              INPUT VALUE FOR KEYWORD                                          SCAN0   39
C                                                                               SCAN0   40
C              GET VALUE POINTER                                                SCAN0   41
   90 IVX = KONTXT(12,JKWD) - KONTXT(12,1) + 1                                  EXPR2   90
C              IF ALREADY INPUT                                                 SCAN0   43
C              Allow previous input's if not USER INPUT/EXPRESSION              DFTEX3 446
      IF (ITYPLS(VAL(IVX)).NE.ITYPLS(UNDEF(1)))  THEN                           DFTEX3 447
        I = IUNPKB(1,5,IVTYPE(IVX))                                             DFTEX3 448
        IF(I.eq.5 .OR. I.eq.6) THEN                                             DFTEX3 449
          CALL MSG(17)                                                          DFTEX3 450
        ELSE IF(I.eq.3 .OR. I.eq.4) THEN                                        DFTEX3 451
          CALL MSG(16)                                                          DFTEX3 452
        ENDIF                                                                   DFTEX3 453
      ENDIF                                                                     DFTEX3 454
C              GO TO CORRECT TYPE PROCESSING                                    SCAN0   45
      I       = KONTXT(8,JKWD)                                                  KEYSIZ  25
C              NUMERIC INPUT                                                    OPLST1 194
      IF (I.EQ.1 .OR. I.EQ.5 .OR. I.EQ.6) THEN                                  OPLST1 195
          CALL GETLV(KONTXT(1,1),JKWD,NKWD,0,0,VAL(IVX),IVTYPE(IVX),            FIX11  387
     1               NFND)                                                      FIX11  388
          RETURN                                                                OPLST1 197
C              SYMBOLIC INPUT                                                   OPLST1 198
      ELSE IF (I.EQ.2 .OR. I.EQ.3 .OR. I.EQ.8 .OR. I.EQ.10) THEN                FIX6    90
          CALL GETLS(IA(1),KONTXT(1,1),JKWD,NKWD,0,0,VAL(IVX),                  FIX11  389
     1               IVTYPE(IVX),NFND)                                          FIX11  390
          RETURN                                                                OPLST1 201
C              OPTIONAL LIST INPUT (SYMBOLIC)                                   OPLST1 202
      ELSE IF (I.EQ.20 .OR. I.EQ.12 .OR. I.EQ.13. OR. I.EQ.18) THEN             OPLST1 203
          IF(ISDflg .ne. 0)  THEN                                               DFTEX2  34
C              Default not allowed in OPTIONAL LIST keywords                    DFTEXP 188
            CALL MSG2(157,KONTXT(1,JKWD),I,I,I)                                 DFTEXP 189
          ENDIF                                                                 DFTEXP 190
          CALL GETLS(IA(1),KONTXT(1,1),JKWD,NKWD,1,0,IVLIST(LSTEND+1),          FIX11  391
     1               IVTYPE(IVX),NFND)                                          FIX11  392
          CALL OPTLST(IVLIST(1),LSTEND,NFND,NFND,VAL(IVX),LENVLS)               EXPR2   96
          LSTEND = LSTEND + NFND + 2                                            ALPHA2  23
          LENVLS = LENVLS - NFND - 2                                            ALPHA2  24
          RETURN                                                                OPLST1 208
C              OPTIONAL LIST INPUT (NUMERIC)                                    OPLST1 209
      ELSE IF (I.EQ.11 .OR. I.EQ.15 .OR. I.EQ.16) THEN                          OPLST1 210
          IF(ISDflg .ne. 0)  THEN                                               DFTEX2  35
C              Default not allowed in OPTIONAL LIST keywords                    DFTEXP 192
            CALL MSG2(157,KONTXT(1,JKWD),I,I,I)                                 DFTEXP 193
          ENDIF                                                                 DFTEXP 194
          CALL GETLV(KONTXT(1,1),JKWD,NKWD,1,0,VLIST(LSTEND+1),                 FIX11  393
     1               IVTYPE(IVX),NFND)                                          FIX11  394
          CALL OPTLST(IVLIST(1),LSTEND,NFND,NFND,VAL(IVX),LENVLS)               EXPR2   98
          LSTEND = LSTEND + NFND + 2                                            ALPHA2  26
          LENVLS = LENVLS - NFND - 2                                            ALPHA2  27
          RETURN                                                                OPLST1 215
C              LITERAL INPUT                                                    OPLST1 216
      ELSE IF (I.EQ.4) THEN                                                     OPLST1 217
          CALL GETLL(KONTXT(1,1),JKWD,NKWD,0,VAL(IVX),IVTYPE(IVX),NFND)         FIX11  395
          RETURN                                                                OPLST1 219
C              FUNCTION INPUT                                                   OPLST1 220
      ELSE IF (I.EQ.7) THEN                                                     OPLST1 221
          VAL(IVX) = 0.                                                         EXPR2  100
          IVTYPE(IVX) = IPACKB(1,5,5,IVTYPE(IVX))                               EXPR2  101
          CALL FUNC(IA)                                                         OPLST1 223
          RETURN                                                                OPLST1 224
      ELSE                                                                      OPLST1 225
          VAL(IVX) = 0.                                                         EXPR2  102
          IVTYPE(IVX) = IPACKB(1,5,0,IVTYPE(IVX))                               EXPR2  103
          RETURN                                                                OPLST1 227
      END IF                                                                    OPLST1 228
      END                                                                       SCAN0   57
      SUBROUTINE SCAN1(JOP,IA,KWD,NK,VAL,IVTYPE)                                EXPR2  104
C                                                                               SCAN1    3
C              SCAN1 INPUTS KEYWORDS AND VALUES FOR A COMMAND                   SCAN1    4
C                                                                               SCAN1    5
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION VAL(1),KWD(16,1),IA(1),IVTYPE(1)                                EXPR2  105
C                                                                               SCAN1   10
      NV = 0                                                                    4XAA   172
      IF(NK.EQ.0) GO TO 20                                                      SCAN1   11
      NV     = KWD(12,NK) + KWD(9,NK) - 1                                       SCAN1   13
C              GET NEXT STRING                                                  SCAN1   15
   20 CALL GETCS                                                                SCAN1   16
C              IF ..                                                            SCAN1   17
      IF (ITERM.NE.0) RETURN                                                    SCAN1   18
C              SEARCH FOR IT AND INPUT ITS VALUES                               SCAN1   19
      CALL SCAN0(IA(1),KWD(1,1),NK,JK,VAL(1),IVTYPE(1),NFND)                    EXPR2  106
      IF (JOP.GT.0 .AND. NFND.GE.1) THEN                                        4XAA   183
          IVX = KWD(12,JK) - KWD(12,1)                                          4XAA   184
          NVK = KWD(9,JK)                                                       4XAA   185
          DO I=1,NVK                                                            4XAA   186
              VAL(NV+IVX+I) = VAL(IVX+I)                                        EXPR2  107
          END DO                                                                4XAA   189
      END IF                                                                    4XAA   190
C              IF .. HIT                                                        SCAN1   21
      IF (ITERM.NE.0) RETURN                                                    SCAN1   22
C              IF INVALID KEYWORD                                               SCAN1   23
      IF (JK.NE.0) GO TO 20                                                     SCAN1   24
      CALL MSG (7)                                                              SCAN1   25
       call  SKPEOC                                                             SCAN1   26
      return                                                                    SCAN1   27
      END                                                                       SCAN1   28
      SUBROUTINE SCEDDI (IA,IREFTB,JREF,KOMMND)                                 REFTB1  54
C                                                                               SCEDDI   3
C              SCEDDI PROCESSES THE DAY-SCED COMMAND                            SCEDDI   4
C                                                                               SCEDDI   5
C              SCEDDI USES  70 WORDS OF COMMWK (91-160)                         SCEDDI   6
C                                                                               SCEDDI   7
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON /DEFSTP/ ISCHTP                                                    /DEFSTP/ 2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON /IUNITS/ VKONV(300),DUMLOG(4),JUNITS(4,300,2),NUNITS,KUNITS        UNITS1   1
      INTEGER DUMLOG                                                            SUBTY1   1
      DIMENSION IUNITS(4,300)                                                   UNITS1   2
      EQUIVALENCE (IUNITS(1,1),JUNITS(1,1,1))                                   /IUNITS/ 4
      COMMON /LABDUM/ LABDUM(4)                                                 /LABDUM/ 2
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION IVAL(24),ITEMP(27),VAL(24),TEMP(27),KWD(16,7),IA(16,1)          EXPR2  108
      DIMENSION IVALTY(24)                                                      EXPR2  109
      DIMENSION IREFTB(5,1)                                                     FIX6    91
      EQUIVALENCE                                                               SCEDDI  21
     1      (IVAL(1),VAL(1)), (TEMP(1),ITEMP(1)),                               ALPHA2  29
     2      (COMMWK(143),IRTPTR), (COMMWK(144),ITYPE1),(VAL(1),V),              SCEDDI  23
     3      (COMMWK(145),ITYPE2), (COMMWK(146),I1),                             SCEDDI  24
     4      (COMMWK(147),I2),                                                   SCEDDI  25
     5      (COMMWK(149),I), (COMMWK(150),IETOT),                               SCEDDI  26
     6      (COMMWK(151),JKWD), (COMMWK(152),JSYM),                             SCEDDI  27
     7      (COMMWK(153),JSCED), (COMMWK(154),JSYMLK),                          SCEDDI  28
     8      (COMMWK(155),LKPTR), (COMMWK(156),NREF),                            SCEDDI  29
     9      (COMMWK(157),NV), (COMMWK(158),NV2),                                SCEDDI  30
     1      (COMMWK(159),NHOURS), (COMMWK(160),IAPTR2)                          SCEDDI  31
      DIMENSION DUM1(2),DUM2(2),DUM3(2),DUM4(2),DUM5(2)                         SCEDDI  32
      EQUIVALENCE (KWD(10,2),DUM1(1)),(KWD(10,4),DUM2(1)),                      ALPHA2  30
     1      (KWD(10,5),DUM3(1)),(KWD(10,6),DUM4(1)),(KWD(10,7),DUM5(1))         ALPHA2  31
      INTEGER NAMEI(8)                                                          SUBTY1  36
      CHARACTER*32 NAMEC                                                        SUBTY1  37
      EQUIVALENCE (NAMEC,NAMEI(1))                                              SUBTY1  38
      DATA KWD/                                                                 SCEDDI  35
     + 4HTYPE,4H    ,4H    ,4H    ,4H    ,4H    ,0,2,1,142,0,1,4*0,             KEYSIZ  33
     1 4HSCAL,4HE   ,4H    ,4H    ,4H    ,4H    ,2,1,1,0,100,26,4*0,            KEYSIZ  34
     2 4HBIAS,4H    ,4H    ,4H    ,4H    ,4H    ,2,1,1,0, 0 ,27,4*0,            KEYSIZ  35
     3 4HHOUR,4HS   ,4H    ,4H    ,4H    ,4H    ,2,6,2,1,24,1,4*0,              KEYSIZ  36
     4 4HVALU,4HES  ,4H    ,4H    ,4H    ,4H    ,2,1,24,-1,100,1,4*0,           KEYSIZ  37
     5 4HTEMP,4HERAT,4HURES,4H    ,4HTEMP,4H    ,8,1,24,-1,100,1,4*0,           KEYSIZ  38
     6 4HRADI,4HATIO,4HNS  ,4H    ,4HRADT,4H    ,17,1,24,-1,100,1,4*0/          KEYSIZ  39
      IDTYPE = 0                                                                TYP1    16
      DUM1(1) = 0.                                                              SCEDDI  42
      DUM1(2) = 100.                                                            SCEDDI  43
      DUM2(1) = 1.                                                              SCEDDI  44
      DUM2(2) = 24.                                                             SCEDDI  45
      DUM3(1) = -1000.                                                          SCEDDI  46
      DUM3(2) = 1000.                                                           SCEDDI  47
      DUM4(1) = -50.                                                            SCEDDI  48
      DUM4(2) = 100.                                                            SCEDDI  49
      DUM5(1) = 0.                                                              SCEDDI  50
      DUM5(2) = 1200.                                                           SCEDDI  51
      JSPEC  = 0                                                                SCEDDI  52
      IVALFL = 0                                                                SCEDDI  53
      LVAL = IOPCDT(16,3)                                                       4XAA   191
      NSAVE = IOPCDT(17,3)                                                      4XAA   192
      IAVPT1 = IAX + NSAVE                                                      4XAA   193
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,3)                                      4XAA   194
      IKW = IOPCDT(9,3)                                                         SUBTY1  39
      IAVPTR = IAVPT1 + LVAL                                                    SUBTY1  40
      CALL CKAA(IA(1,1),LTOT)                                                   4XAA   195
C                                                                               SCEDDI  54
      IF (KOMMND.NE.0) THEN                                                     SUBTY1  41
C              IF A COMMAND, CHECK FOR U-NAME                                   SUBTY1  42
          CALL LBLCK                                                            SUBTY1  43
      ELSE                                                                      SUBTY1  44
C              IF NOT A COMMAND, DEFINE DUMMY U-NAME                            SUBTY1  45
C              AND CREATE AN INSTANCE OF D-SCH                                  SUBTY1  46
          CALL FILLN(DUMLOG(1),NAMEI(1),8)                                      SUBTY1  47
          NDSCH = IOPCDT(13,3) + 1                                              SUBTY1  48
          WRITE(NAMEC,1001) NDSCH                                               SUBTY1  49
 1001     FORMAT('Day Schedule',I4,16X)                                         FIX8     5
          CALL SYMDEF(IA,NAMEI,74,JSYM)                                         SUBTY1  51
          CALL INCRRF(IA,IA,3,JSYM,JREF)                                        SUBTY1  52
      END IF                                                                    SUBTY1  53
C              SAVE THE DATA INDEX                                              SUBTY1  54
      IREFTB(2,JREF) = IAX                                                      SUBTY1  55
C              FILL TEMP VALUE ARRAY WITH UNDEF                                 SUBTY1  56
      CALL FILLN (UNDEF, TEMP, 27)                                              SUBTY1  57
      CALL FILLN(0,IVAL,24)                                                     EXPR2  110
      CALL FILLN(0,IVALTY,24)                                                   EXPR2  111
C              INITIALIZE DATA ARRAY                                            TYP1    17
      CALL FILLN(0,IA(IAVPT1+1,1),LVAL)                                         TYP1    18
      CALL FILLN(UNDEF(1),IA(IAVPT1+LVAL+1,1),LVAL)                             TYP1    19
      CALL FILLN(0.,IA(IAVPT1+2*LVAL+1,1),LVAL)                                 TYP1    20
      CALL LIKINP(IA,74,JSYMLK,3,JREF,0,IERRF)                                  DFTEX3 455
      IF (IERRF .EQ. 1) THEN                                                    SCEDDI  68
          CALL SKPEOC                                                           SCEDDI  69
          RETURN                                                                SCEDDI  70
      END IF                                                                    SCEDDI  71
C              CHECK FOR AND INPUT TYPE                                         SUBTY1  62
      CALL GETCS                                                                SUBTY7   5
      IF (ISYMU(1).EQ.IHOLTY) THEN                                              SUBTY7   6
C              TYPE IS INPUT; GET ITS VALUE AND SET THE DEFAULT TYPE            SUBTY7   7
          CALL BKSPAC                                                           SUBTY7   8
          CALL TYPINP(JREF,3,IKW,IAVPT1,ITYPE,IERRF)                            SUBTY7   9
          IF (IERRF.GT.0) THEN                                                  SUBTY7  10
              CALL SKPEOC                                                       SUBTY7  11
              RETURN                                                            SUBTY7  12
          END IF                                                                SUBTY7  13
          ISCHTP = ITYPE                                                        SUBTY7  14
      ELSE                                                                      SUBTY7  15
C              TYPE NOT INPUT; GET VALUE FROM DEFAULT                           SUBTY7  16
          CALL BKSPAC                                                           SUBTY7  17
          IF (ISCHTP.GT.0) THEN                                                 SUBTY7  18
              IA(IAVPT1+1,1) = IPACKB(1,5,5,IA(IAVPT1+1,1))                     SUBTY7  19
              IA(IAVPTR+1,1) = ISCHTP                                           SUBTY7  20
              IA(IAVPTR+LVAL+1,1) = ISCHTP                                      SUBTY7  21
          ELSE                                                                  SUBTY7  22
              CALL MSG(108)                                                     SUBTY7  23
              CALL SKPEOC                                                       SUBTY7  24
              GO TO 300                                                         SUBTY7  25
          END IF                                                                SUBTY7  26
      END IF                                                                    SUBTY7  27
C              SAVE RESULT IN TEMP                                              SUBTY1  64
      ITEMP(1) = IA(IAVPTR+1,1)                                                 SUBTY1  65
C                                                                               SCEDDI  72
C              INPUT HOUR-LIST                                                  SCEDDI  73
C                                                                               SCEDDI  74
   20 CALL GETCS                                                                SCEDDI  75
C              IF ..                                                            SCEDDI  76
      IF (ITERM.NE.0) GO TO 200                                                 SCEDDI  77
C              IF (                                                             SCEDDI  78
      IF (ISYMB(1).EQ.HOLL(15)) GO TO 35                                        SCEDDI  79
C              IF HOUR-LIST                                                     SCEDDI  80
               call  TBLSCH( ISYMU, KWD(1,4), 16, 1, 1, J )                     KEYSIZ  40
      IF (J.NE.0) GO TO 40                                                      SCEDDI  82
C              SEARCH FOR SCALE & BIAS                                          SUBTY1  66
      CALL SCAN0(IA,KWD(1,2),2,J,TEMP(26),IA(IAVPT1+26,1),NFND)                 EXPR2  112
      IF(ITERM .NE. 0)  GOTO 200                                                SCEDDI  85
C              IF NOT FOUND AND INPUT                                           SCEDDI  86
      IF (J.EQ.0) CALL MSG (7)                                                  SCEDDI  87
      GO TO 20                                                                  SCEDDI  88
C              BACKSPACE OVER (                                                 SCEDDI  89
   35 CALL BKSPAC                                                               SCEDDI  90
C              SAVE CURRENT ERROR COUNT                                         SCEDDI  91
   40 IETOT  = MSGTOT(1)                                                        SCEDDI  92
C              INPUT HOUR LIST DATA                                             SCEDDI  93
      CALL GETLV (KWD(1,1),4,7,0,1,IVAL,IVALTY,NV)                              FIX11  396
C              IF EOC HIT                                                       SCEDDI  95
      IF (ITERM.NE.0) GO TO 950                                                 SCEDDI  96
      IF (MSGTOT(1).NE.IETOT) GO TO 900                                         SCEDDI  97
      I1     = VAL(1)                                                           SCEDDI  98
      I2     = VAL(NV)                                                          SCEDDI  99
      NHOURS = I2 - I1 + 1                                                      SCEDDI 100
      IF (NHOURS.GT.0) GO TO 50                                                 SCEDDI 101
      CALL MSG (95)                                                             SCEDDI 102
      GO TO 900                                                                 SCEDDI 103
   50 DO 60 I = I1,I2                                                           SCEDDI 104
      IF (ITYPLS(TEMP(I+1)).NE.ITYPLS(UNDEF(1))) GO TO 70                       FIXJH1  17
   60 CONTINUE                                                                  SCEDDI 106
      GO TO 75                                                                  SCEDDI 107
   70 CALL MSG (94)                                                             SCEDDI 108
C                                                                               SCEDDI 109
C              INPUT SCHEDULE-LIST                                              SCEDDI 110
C                                                                               SCEDDI 111
   75 CALL GETCS                                                                SCEDDI 112
C              IF ..                                                            SCEDDI 113
      IF (ITERM.NE.0) GO TO 800                                                 SCEDDI 114
C              IF (                                                             SCEDDI 115
      IF (ISYMB(1).EQ.HOLL(15)) THEN                                            SCEDDI 116
          GO TO 78                                                              SCEDDI 118
      END IF                                                                    SCEDDI 119
C              IF SCED-LIST                                                     SCEDDI 120
      call  TBLSCH( ISYMU, KWD(1,5), 16, 1, 1, J )                              SUBTY1  68
      IF (J.NE.0) THEN                                                          SCEDDI 122
          IVALFL=1                                                              SCEDDI 123
          GO TO 80                                                              SCEDDI 124
      END IF                                                                    SCEDDI 125
C              SEARCH FOR TEMPERATURES                                          SCEDDI 126
      call  TBLSCH( ISYMU, KWD(1,6), 16, 1,1,J)                                 SUBTY1  69
      IF(J.EQ.0) GO TO 76                                                       SCEDDI 128
      JSPEC  = 1                                                                SCEDDI 129
      IVALFL=1                                                                  SCEDDI 130
      IF(METIN.EQ.0) GO TO 80                                                   SCEDDI 131
      GO TO 80                                                                  SCEDDI 134
   76 CONTINUE                                                                  SCEDDI 135
C              SEARCH FOR RADIATIONS                                            SCEDDI 136
      call  TBLSCH( ISYMU, KWD(1,7), 16, 1,1,J)                                 SUBTY1  70
      IF(J.EQ.0) GO TO 71                                                       SCEDDI 138
      JSPEC  = 2                                                                SCEDDI 139
      IVALFL=1                                                                  SCEDDI 140
      IF(METIN.EQ.0) GO TO 80                                                   SCEDDI 141
      GO TO 80                                                                  SCEDDI 144
   71 CONTINUE                                                                  SCEDDI 145
C              UNKNOWN KWD                                                      SCEDDI 146
C              BACKSPACE AND CHECK FOR NUMBER                                   SCEDDI 147
      CALL BKSPAC                                                               SCEDDI 148
      IF (GETV(V) .EQ. 0.0)  GO TO 77                                           SCEDDI 149
      CALL BKSPAC                                                               SCEDDI 150
      GO TO 80                                                                  SCEDDI 151
   77 CALL MSG (7)                                                              SCEDDI 152
      GO TO 900                                                                 SCEDDI 153
   78 CALL BKSPAC                                                               SCEDDI 154
   80 IETOT  = MSGTOT(1)                                                        SCEDDI 155
C              INPUT SCED LIST DATA                                             SCEDDI 156
      JKWD = 5+JSPEC                                                            FIX11  397
      CALL GETLV(KWD(1,1),JKWD,7,0,1,IVAL,IVALTY,NV2)                           FIX11  398
C              IF EOC HIT                                                       SCEDDI 158
      IF (ITERM.NE.0) GO TO 950                                                 SCEDDI 159
      IF (IETOT.NE.MSGTOT(1)) GO TO 900                                         SCEDDI 160
      IF (NV2.EQ.NHOURS) GO TO 110                                              SCEDDI 161
      IF (NV2.EQ.1) GO TO 90                                                    SCEDDI 162
      CALL MSG (93)                                                             SCEDDI 163
      GO TO 900                                                                 SCEDDI 164
   90 DO 100 I = 2,NHOURS                                                       SCEDDI 165
      IVALTY(I) = IVALTY(1)                                                     EXPR2  115
  100 VAL(I) = VAL(1)                                                           SCEDDI 166
  110 DO 120 I = 1,NHOURS                                                       SCEDDI 167
      IA(IAVPT1+I1+I,1) = IVALTY(I)                                             EXPR2  116
  120 ITEMP(I+I1) = IVAL(I)                                                     ALPHA2  42
      IF (KOMMND.NE.0) GO TO 20                                                 SCEDDI 169
C              IF ANY DATA NOT SET YET, GET MORE                                SCEDDI 170
      DO 130 I = 1,24                                                           SCEDDI 171
      IF (ITYPLS(TEMP(I+1)).EQ.ITYPLS(UNDEF(1))) GO TO 20                       FIXJH1  18
  130 CONTINUE                                                                  SCEDDI 173
C              IF NO LIKE DATA INPUT                                            SCEDDI 174
  200 IF (JSYMLK.EQ.0) GO TO 220                                                SCEDDI 175
      JSCED  = IA(12,JSYMLK)                                                    FIXJH1  19
C              GET REF TBL PTR                                                  SCEDDI 177
      IRTPTR = IOPCDT(14,3)                                                     SCEDDI 178
C              GET PTR TO LIKE DATA                                             SCEDDI 179
      LKPTR = IREFTB(2,IRTPTR+JSCED-1)                                          REFTB1  57
C              REPLACE UNDEFINED DATA WITH LIKE DATA                            SCEDDI 181
      DO I=1,LVAL                                                               TYP1    21
          LKVPT = LKPTR + NSAVE + 2*LVAL                                        TYP1    22
          IF (ITYPLS(TEMP(I)).EQ.ITYPLS(UNDEF(1))) THEN                         TYP1    23
              ITEMP(I) = IA(LKVPT+I,1)                                          TYP1    24
              IA(IAVPT1+I,1) = IPACKB(1,5,9,IA(IAVPT1+I,1))                     TYP1    25
          END IF                                                                TYP1    26
      END DO                                                                    TYP1    27
C              CHECK FOR UNDEFINED HOURS                                        SCEDDI 184
  220 DO 230 I = 1,24                                                           SCEDDI 185
      IF (ITYPLS(TEMP(I+1)).EQ.ITYPLS(UNDEF(1))) GO TO 240                      FIXJH1  21
  230 CONTINUE                                                                  SCEDDI 187
      GO TO 250                                                                 SCEDDI 188
  240 CALL MSG (78)                                                             SCEDDI 189
C              SAVE USER INPUT DATA                                             4XAA   196
  250 CALL MOVEN(ITEMP(1),IA(IAVPTR+1,1),LVAL)                                  TYP1    28
C              SET DEFAULTS FOR TYPE, SCALE, AND OFFSET                         4XAA   200
      IF (ITYPLS(TEMP(1)).EQ.ITYPLS(UNDEF(1))) THEN                             TYP1    33
          IA(IAVPT1+1,1) = IPACKB(1,5,1,IA(IAVPT1+1,1))                         TYP1    34
          IF (JSPEC.EQ.1) THEN                                                  ALPHA2  48
              ITEMP(1) = 473                                                    SUBTY1  71
          ELSE IF (JSPEC.EQ.2) THEN                                             ALPHA2  50
              ITEMP(1) = 474                                                    SUBTY1  72
          ELSE                                                                  ALPHA2  52
              ITEMP(1) = 471                                                    SUBTY1  73
          END IF                                                                ALPHA2  54
      END IF                                                                    ALPHA2  55
      ITYPE = IUNPKB(1,5,IA(IAVPT1+26,1))                                       SUBTY7  28
      IF (ITYPLS(TEMP(26)).EQ.ITYPLS(UNDEF(1))) THEN                            FIXJH1  23
          IA(IAVPT1+26,1) = IPACKB(1,5,1,IA(IAVPT1+26,1))                       TYP1    35
      ELSE IF (ITYPE.EQ.5 .OR. ITYPE.EQ.6) THEN                                 SUBTY7  29
          CALL MSG2(47,KWD(1,2),KWD(1,2),IUNUSE(1),IUNUSE(1))                   SUBTY7  30
      END IF                                                                    ALPHA2  64
      TEMP(26) = UNDEF(2)                                                       SUBTY7  31
      ITYPE = IUNPKB(1,5,IA(IAVPT1+27,1))                                       SUBTY7  32
      IF (ITYPLS(TEMP(27)).EQ.ITYPLS(UNDEF(1))) THEN                            FIXJH1  24
          IA(IAVPT1+27,1) = IPACKB(1,5,1,IA(IAVPT1+27,1))                       TYP1    36
      ELSE IF (ITYPE.EQ.5 .OR. ITYPE.EQ.6) THEN                                 SUBTY7  33
          CALL MSG2(47,KWD(1,3),KWD(1,3),IUNUSE(1),IUNUSE(1))                   SUBTY7  34
      END IF                                                                    ALPHA2  71
      TEMP(27) = UNDEF(2)                                                       SUBTY7  35
  300 IAVPTR = IAVPT1 + 2*LVAL                                                  SUBTY7  36
      CALL MOVEN(TEMP(1),IA(IAVPTR+1,1),LVAL)                                   4XAA   205
      IAX = IAX + LTOT                                                          4XAA   206
      IF (KOMMND.EQ.0) THEN                                                     SUBTY7  37
          CALL PRNTVL(3,JREF)                                                   SUBTY7  38
C              JREF IS SYMBOL TABLE PTR FOR IMPLICIT COMMAND                    SUBTY7  39
          JREF = JSYM                                                           SUBTY7  40
      END IF                                                                    SUBTY7  41
      RETURN                                                                    SCEDDI 203
C              INSUFF DATA                                                      SCEDDI 204
  800 CALL MSG (78)                                                             SCEDDI 205
  900 CALL SKPEOC                                                               SCEDDI 206
  950 RETURN                                                                    SCEDDI 207
      END                                                                       SCEDDI 208
      SUBROUTINE SCEDO(NDSCED,LEND,NYSCED,LENY)                                 SUBTY3   1
C                                                                               SCEDO    3
C              SCEDO OUTPUTS SCHEDULES TO THE STANDARD FILE                     SCEDO    4
C                                                                               SCEDO    5
C              SCEDO  USES  19 WORDS OF COMMWK                                  SCEDO    6
C                                                                               SCEDO    7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      COMMON /RSCHED/ NDRS(200), NRS(100)                                       -083     1
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DATA I0, I1/0, 1/                                                         FIX4     1
      NDSCED = I0                                                               SCEDO   30
      NYSCED = I0                                                               SCEDO   31
      LEND   = I1                                                               SCEDO   32
      LENY   = I1                                                               SCEDO   33
C                                                                               SCEDO   34
C              IF FATAL ERRORS                                                  SCEDO   35
      IF (IFATAL.NE.0) RETURN                                                   SCEDO   36
C              SAVE CURRENT IA INDEX                                            SCEDO   37
      IAX0   = IAX                                                              SCEDO   38
C                                                                               SCEDO   39
C              DAY SCHEDULES                                                    SCEDO   40
C                                                                               SCEDO   41
C              GET NO. OF DAY SCEDULES                                          SCEDO   42
      NDSCED = IOPCDT(13,3)                                                     SCEDO   43
      IF (NDSCED.EQ.0) GO TO 400                                                SCEDO   44
      LEND   = NDSCED * 24                                                      SCEDO   45
      CALL CKAA (IA, LEND)                                                      SCEDO   46
      IST = IAX + 1                                                             SUBTY3   6
      IPT = IAX                                                                 SUBTY3   7
      NKW = IOPCDT(10,3)                                                        SUBTY3   8
      CALL FILLN(0.,AA(IST),LEND)                                               SUBTY3   9
      DO 100 IDSCED=1,NDSCED                                                    SUBTY3  10
          IRX = IOPCDT(14,3) + IDSCED - 1                                       SUBTY3  11
          IAVPTR = MVTOSM(IRX,3,0)                                              SUBTY3  12
          ITYPE = ITYPEF(IRX,3)                                                 SUBTY3  13
          IKW = IOPCDT(9,3) + (ITYPE-1)*NKW                                     SUBTY3  14
C              Check if ON/OFF/TEMP; if it is, do special metric conversion     FIX16a   1
          IF (ITYPE.EQ.6 .AND. METIN.EQ.1) THEN                                 FIX16a   2
              CALL SYMFIL(ISYMTB,KONTXT(1,IKW),1,IA(IAVPTR+1))                  FIX16a   3
              DO I=1,24                                                         FIX16a   4
                  IF (AA(IAVPTR+I+1).GT.1.0) THEN                               FIX16a   5
                      CALL KDIV(AA(IAVPTR+I+1),8,1,1)                           FIX16a   6
                  END IF                                                        FIX16a   7
              END DO                                                            FIX16a   8
          ELSE                                                                  FIX16a   9
              CALL SYMFIL(ISYMTB,KONTXT(1,IKW),NKW,IA(IAVPTR+1))                FIX16a  10
          END IF                                                                FIX16a  11
          IF (ITYPE.LE.10) THEN                                                 SUBTY3  16
              CALL MOVEN(AA(IAVPTR+2),AA(IPT+1),24)                             SUBTY3  17
          ELSE                                                                  SUBTY3  18
              CALL MOVEN(AA(IAVPTR+2),AA(IPT+1),10)                             SUBTY3  19
          END IF                                                                SUBTY3  20
          IPT = IPT + 24                                                        SUBTY3  21
  100 CONTINUE                                                                  SUBTY3  22
      WRITE (ISTNDF) NDSCED,LEND                                                SUBTY3  23
      CALL WRITEN(ISTNDF,IA(IST),LEND)                                          SUBTY3  24
      IF (IREPRT(32).EQ.1)                                                      SUBTY3  25
     1    CALL DUMPIT(20HDAY-SCHEDULE        ,IA(IST),LEND)                     SUBTY3  26
C                                                                               SCEDO  103
C              YEAR AND WEEK SCHEDULES                                          SCEDO  104
C                                                                               SCEDO  105
C              RESET IA X                                                       SCEDO  106
      IAX    = IAX0                                                             SCEDO  107
C              GET NO OF YR SCED                                                SCEDO  108
      NYSCED = IOPCDT(13,1)                                                     SCEDO  109
C              GET REF TBL PTR                                                  SCEDO  110
      IRX0 = IOPCDT(14,1)                                                       REFTB1  67
      IRXW0 = IOPCDT(14,2)                                                      REFTB1  68
C              COUNT UP WEEK-SCHEDULES                                          SCEDO  113
      LENY   = 0                                                                SCEDO  114
      DO 110 IYSCED=1,NYSCED                                                    SUBTY3  27
      IAPTR  = IREFTB(2,IRX0+IYSCED-1)                                          SUBTY3  28
      IAPTR = IAPTR + IOPCDT(17,1) + 2*IOPCDT(16,1)                             SUBTY3  29
      IWLSP = IA(IAPTR+5)                                                       SUBTY3  30
      NWSCED = IA(IWLSP)                                                        SUBTY3  31
  110 LENY = LENY + NWSCED                                                      SUBTY3  32
      LENY   = NYSCED*<+ys~Len> + LENY*<+ws~Len>                                -045d    1
      CALL CKAA(IA,LENY)                                                        SUBTY3  34
      IWSPTR = IAX0 + NYSCED*<+ys~Len>                                          -045d    2
      NWS    = 0                                                                SUBTY3  36
      DO 300 IYSCED = 1,NYSCED                                                  SUBTY3  37
      IAPTR = IREFTB(2,IRX0+IYSCED-1)                                           SUBTY3  38
      IAPTR = IAPTR + IOPCDT(17,1) + 2*IOPCDT(16,1)                             SUBTY3  39
      JSYM = IREFTB(1,IRX0+IYSCED-1)                                            SUBTY3  40
      IWLSP = IA(IAPTR+5)                                                       SUBTY3  41
      NWSCED = IA(IWLSP)                                                        SUBTY3  42
      DO 120 I = 1,8                                                            BIGNAM  16
  120 IA(IAX+I) = ISYMTB(I,JSYM)                                                BIGNAM  17
      IA(IAX+<+SCH-TYPE>+1) = ISYMTB(12,IA(IAPTR+1))                            -045d    3
      IF (NOVAL(IA(IAPTR+2)) .eq. 0) THEN                                       -045d    4
        IA(IAX+<+PHOTOCELL-CTRL>+1) = 0                                         -045d    5
      ELSE                                                                      -045d    6
        IA(IAX+<+PHOTOCELL-CTRL>+1) = ISYMTB(12,IA(IAPTR+2))                    -045d    7
      ENDIF                                                                     -045d    8
      IA(IAX+<+NUM-OF-WEEKS>+1) = NWSCED                                        -045d    9
      IA(IAX+<+FIRST-WEEK>+1)   = NDSCED*24 + NYSCED*<+ys~Len>                  -045d   10
     &                                      + NWS*<+ws~Len> + 1                 -045d   11
      IA(IAX+<+CURRENT-WEEK>+1) = 0                                             -045d   12
      IA(IAX+<+CURRENT-DAY>+1)  = 0                                             -045d   13
      NWS    = NWS + NWSCED                                                     SUBTY3  49
      IAX    = IAX + <+ys~Len>                                                  -045d   14
      DO 290 IWSCED = 1,NWSCED                                                  SUBTY3  51
C              GET SYMBOL TABLE POINTER OF W-S IN Y-S LIST                      SUBTY3  52
      JSYMW = IA(IWLSP+1+IWSCED)                                                SUBTY3  53
C              MOVE THE MONTH AND DAY INTO THE OUTPUT ARRAY                     SUBTY3  54
      IMLSP = IA(IAPTR+3)                                                       SUBTY3  55
      IA(IWSPTR+1) = INT(TYPLS(IA(IMLSP+1+IWSCED))+0.1)                         SUBTY3  56
      IDLSP = IA(IAPTR+4)                                                       SUBTY3  57
      IA(IWSPTR+2) = INT(TYPLS(IA(IDLSP+1+IWSCED))+0.1)                         SUBTY3  58
      IWSPTR = IWSPTR + 2                                                       SUBTY3  59
      IWREF  = ISYMTB(12,JSYMW)                                                 SUBTY3  60
C              GET IA PTR TO WEEK DATA                                          SUBTY3  61
      IAPTRW = IREFTB(2,IRXW0+IWREF-1)                                          SUBTY3  62
      IAPTRW = IAPTRW + IOPCDT(17,2) + 2*IOPCDT(16,2)                           DDAY1    8
      DO 280 IDSCED = 1,10                                                      DDAY1    9
      JSYMW  = IA(IAPTRW+IDSCED+1)                                              FIX11  399
      IDREF  = ISYMTB(12,JSYMW)                                                 SUBTY3  66
      ID     = IDSCED + 1                                                       SUBTY3  67
      IF (IDSCED .EQ. 7) ID = 1                                                 SUBTY3  68
      IF (IDSCED .EQ. 8) ID = 8                                                 SUBTY3  69
      IF (IDSCED.EQ.9) ID = 9                                                   DDAY1   10
      IF (IDSCED.EQ.10) ID = 10                                                 DDAY1   11
  280 IA(IWSPTR+ID) = (IDREF-1)*24                                              SUBTY3  70
      IWSPTR = IWSPTR + 10                                                      DDAY1   12
  290 CONTINUE                                                                  SUBTY3  72
  300 CONTINUE                                                                  SUBTY3  73
      IF ( LENY .LT. 1 )    LENY = 1                                            SUBTY3  74
      WRITE(ISTNDF) NYSCED, LENY                                                SUBTY3  75
      CALL WRITEN(ISTNDF,IA(IAX0+1),LENY)                                       SUBTY3  76
      IF (IREPRT(32) .EQ. 1)                                                    SUBTY3  77
     1  CALL DUMPIT(20HSCHEDULES            ,IA(IAX0+1),LENY)                   SUBTY3  78
      IAX    = IAX0                                                             SCEDO  157
      RETURN                                                                    SCEDO  158
C              OUTPUT EMPTY RECORDS                                             SCEDO  159
  400 DO 420 I = 1,2                                                            SCEDO  160
      WRITE(ISTNDF) I0, I1                                                      SCEDO  161
  420 WRITE(ISTNDF) I0                                                          SCEDO  162
      RETURN                                                                    SCEDO  163
      END                                                                       SCEDO  164
      SUBROUTINE SCEDWI (IA,IREFTB,JREF,KOMMND)                                 REFTB1  73
C                                                                               SCEDWI   3
C              SCEDWI INPUTS DATA FOR THE WEEK-SCHEDULE COMMAND                 SCEDWI   4
C                                                                               SCEDWI   5
C              SCEDWI USES  30 WORDS OF COMMWK (51-80)                          SCEDWI   6
C                                                                               SCEDWI   7
      COMMON /IUNITS/ VKONV(300),DUMLOG(4),JUNITS(4,300,2),NUNITS,KUNITS        UNITS1   1
      INTEGER DUMLOG                                                            SUBTY1   1
      DIMENSION IUNITS(4,300)                                                   UNITS1   2
      EQUIVALENCE (IUNITS(1,1),JUNITS(1,1,1))                                   /IUNITS/ 4
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON /DEFSTP/ ISCHTP                                                    /DEFSTP/ 2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /LABDUM/ LABDUM(4)                                                 /LABDUM/ 2
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION IDOW1(4),IDOW2(4),IDPTR(10),KWD(16,3),IVAL(10),IA(16,1),        SUBTY7  44
     1 DPTR(10),IREFTB(5,1),IVALTY(10)                                          EXPR2  118
      EQUIVALENCE (DPTR(1),IDPTR(1))                                            DDAY1   15
      INTEGER NAMEI(8)                                                          SUBTY1  78
      CHARACTER*32 NAMEC                                                        SUBTY1  79
      EQUIVALENCE (NAMEC,NAMEI(1))                                              SUBTY1  80
      DATA IDOW1/1,6,6,1/                                                       SCEDWI  30
      DATA IDOW2/5,7,8,8/                                                       SCEDWI  31
      DATA KWD /                                                                KEYSIZ  45
     + 4HTYPE,4H    ,4H    ,4H    ,4H    ,4H    ,0,2,1,142,0,1,4*0,             SUBTY7  45
     1 4HDAYS,4H    ,4H    ,4H    ,4H    ,4H    ,1,8,2, 0,1,1,4*0,              KEYSIZ  46
     2 4HDAY-,4HSCHE,4HDULE,4H    ,4HD-SC,4HH   ,1,3,1,74,0,1,4*0 /             KEYSIZ  47
C                                                                               SCEDWI  34
      NFND = 0                                                                  SUBTY7  46
      LVAL = IOPCDT(16,2)                                                       4XAA   211
      NSAVE = IOPCDT(17,2)                                                      4XAA   212
      IAVPT1 = IAX + NSAVE                                                      4XAA   213
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,2)                                      4XAA   214
      IAVPTR = IAVPT1 + LVAL                                                    SUBTY7  47
      IKW = IOPCDT(9,2)                                                         SUBTY7  48
      CALL CKAA(IA(1,1),LTOT)                                                   4XAA   215
      IAXS = IAX                                                                4XAA   216
      IAX = IAX + LTOT                                                          4XAA   217
      IF (KOMMND.NE.0) THEN                                                     DDAY1   16
C              IF COMMAND REQUIRE LABEL                                         DDAY1   17
          CALL LBLCK                                                            DDAY1   18
      ELSE                                                                      DDAY1   19
C              DEFINE DUMMY SYMBOL                                              DDAY1   20
          CALL FILLN(DUMLOG(1),NAMEI(1),8)                                      DDAY1   21
          NDSCH = IOPCDT(13,2) + 1                                              DDAY1   22
          WRITE(NAMEC,1001) NDSCH                                               DDAY1   23
 1001     FORMAT('Week Schedule',I3,16X)                                        FIX8     6
          CALL SYMDEF(IA,NAMEI,75,JSYM)                                         DDAY1   25
C              INCR REF TABLE                                                   DDAY1   26
          CALL INCRRF (IA,IA,2,JSYM,JREF2)                                      DDAY1   27
      END IF                                                                    DDAY1   28
C              CLEAR DAY PTRS                                                   DDAY1   29
      CALL FILLN(UNDEF(1),DPTR(1),10)                                           EXPR2  119
      CALL FILLN(0,IVAL(1),10)                                                  EXPR2  120
      CALL FILLN(0,IVALTY(1),10)                                                EXPR2  121
      CALL FILLN(0,IA(IAVPT1+1,1),10)                                           EXPR2  122
      CALL FILLN(UNDEF(1),IA(IAVPT1+LVAL+1,1),10)                               EXPR2  123
      CALL FILLN(0.,IA(IAVPT1+2*LVAL+1,1),10)                                   EXPR2  124
      CALL LIKINP(IA,75,JSYMLK,2,JREF,0,IERRF)                                  DFTEX3 462
      IF (IERRF .EQ. 1) THEN                                                    DDAY1   32
          CALL SKPEOC                                                           DDAY1   33
          RETURN                                                                DDAY1   34
      END IF                                                                    DDAY1   35
      IF (JSYMLK.GT.0 .AND. KOMMND.GT.0) IREFTB(3,JREF)  =                      DDAY1   36
     1    IOPCDT(14,2) + IA(12,JSYMLK) - 1                                      DDAY1   37
C              Check for and input TYPE                                         SUBTY7  49
      CALL GETCS                                                                SUBTY7  50
      IF (ISYMU(1).EQ.IHOLTY) THEN                                              SUBTY7  51
C              Type is input; get its value and set default type                SUBTY7  52
          CALL BKSPAC                                                           SUBTY7  53
          CALL TYPINP(JREF,2,IKW,IAVPT1,ITYPE,IERRF)                            SUBTY7  54
          IF (IERRF.GT.0) THEN                                                  SUBTY7  55
              CALL SKPEOC                                                       SUBTY7  56
              GO TO 355                                                         SUBTY7  57
          END IF                                                                SUBTY7  58
          ISCHTP = ITYPE                                                        SUBTY7  59
      ELSE                                                                      SUBTY7  60
C              TYPE not input; get value from default                           SUBTY7  61
          CALL BKSPAC                                                           SUBTY7  62
          IF (ISCHTP.GT.0) THEN                                                 SUBTY7  63
              IA(IAVPT1+1,1) = IPACKB(1,5,5,IA(IAVPT1+1,1))                     SUBTY7  64
              IA(IAVPTR+1,1) = ISCHTP                                           SUBTY7  65
              IA(IAVPTR+LVAL+1,1) = ISCHTP                                      SUBTY7  66
          ELSE                                                                  SUBTY7  67
              CALL MSG(108)                                                     SUBTY7  68
              CALL SKPEOC                                                       SUBTY7  69
              GO TO 355                                                         SUBTY7  70
          END IF                                                                SUBTY7  71
      END IF                                                                    SUBTY7  72
C                                                                               SCEDWI  50
C              INPUT DAY-LIST                                                   SCEDWI  51
C                                                                               SCEDWI  52
   20 CALL GETCS                                                                SCEDWI  53
C              IF (                                                             SCEDWI  54
      IF (ISYMB(1).EQ.HOLL(15)) GO TO 25                                        SCEDWI  55
C              IF DAY-LIST                                                      SCEDWI  56
      CALL TBLSCH( ISYMU, KWD(1,2), 16, 1, 1, J )                               SUBTY7  73
      IF (J.NE.0) GO TO 27                                                      SCEDWI  58
C              IF ..                                                            SCEDWI  59
      IF (ITERM.NE.0) GO TO 250                                                 SCEDWI  60
C              UNKNOWN KWD                                                      SCEDWI  61
      CALL MSG (7)                                                              SCEDWI  62
      GO TO 900                                                                 SCEDWI  63
C              GET NEXT STRING                                                  SCEDWI  64
C              BACKSPACE OVER (                                                 SCEDWI  65
   25 CALL BKSPAC                                                               SCEDWI  66
C              SAVE CURRENT ERROR COUNT                                         SCEDWI  67
   27 IETOT  = MSGTOT(1)                                                        SCEDWI  68
      CALL GETLS (IA,KWD(1,1),2,3,0,1,IVAL(1),IVALTY(1),NFND)                   SUBTY7  74
C              IF .. HIT                                                        SCEDWI  70
      IF (ITERM.NE.0) GO TO 950                                                 SCEDWI  71
      IF (IETOT.NE.MSGTOT(1)) GO TO 900                                         SCEDWI  72
C              FIND BEGINNING AND END OF LIST                                   SCEDWI  73
      I1     = IVAL(1)                                                          SCEDWI  74
      IF (I1.GT.8 .AND. I1.LT.13) I1 = IDOW1(I1-8)                              DDAY1   38
      IF (I1.GT.12) I1 = I1 - 4                                                 DDAY1   39
      I2     = IVAL(NFND)                                                       SCEDWI  76
C              CHECK THAT SEQ OF 2 NUMS IS LEGAL PAIR                           SCEDWI  77
      IF(NFND .LE. 1)  GOTO 30                                                  SCEDWI  78
      IF((IVAL(1).GT.8) .OR. (I2.GT.8))  CALL MSG(35)                           SCEDWI  79
   30 IF (I2.GT.8 .AND. I2.LT.13) I2 = IDOW2(I2-8)                              DDAY1   40
      IF (I2.GT.12) I2 = I2 - 4                                                 DDAY1   41
      DO 50 I=I1,I2                                                             SCEDWI  81
      IF (ITYPLS(DPTR(I)) .NE. ITYPLS(UNDEF(1)))  GO TO 60                      SCEDWI  82
   50 CONTINUE                                                                  SCEDWI  83
      GO TO 70                                                                  SCEDWI  84
   60 CALL MSG (96)                                                             SCEDWI  85
C                                                                               SCEDWI  86
C              INPUT DAY-SCHEDULE                                               SCEDWI  87
C                                                                               SCEDWI  88
   70 CALL GETCS                                                                SCEDWI  89
C              IF .. HIT                                                        SCEDWI  90
      IF (ITERM.NE.0) GO TO 340                                                 SCEDWI  91
C              CHECK FOR IMPLICIT DAY-SCHEDULE.  LOOK FOR EITHER AN             SUBTY7  75
C              OPENING PARENTHESIS OR 'TYPE'.                                   SUBTY7  76
      IF (ISYMB(1).EQ.HOLL(15) .OR. ISYMU(1).EQ.IHOLTY) GO TO 100               SUBTY7  77
C              CHECK FOR DAY-SCHEDULE KEYWORD                                   SUBTY7  78
      CALL TBLSCH( ISYMU, KWD(1,3), 16, 1, 1, J )                               SUBTY7  79
C              IF THERE, INPUT NEXT SYMBOL                                      SUBTY7  80
      IF (J.GT.0) CALL GETCS                                                    SUBTY7  81
C              CHECK FOR UNWANTED DELIMITER                                     SUBTY7  82
      IF (IDELIM.NE.0) THEN                                                     SUBTY7  83
          CALL MSG(90)                                                          SUBTY7  84
          GO TO 900                                                             SUBTY7  85
      END IF                                                                    SUBTY7  86
C              BACKSPACE AND INPUT VALUE                                        SUBTY7  87
      CALL BKSPAC                                                               SUBTY7  88
      CALL GETLS(IA,KWD(1,1),3,3,0,1,IVAL(1),IVALTY(1),NFND)                    SUBTY7  89
      GO TO 200                                                                 SCEDWI 103
C              BACKSPACE OVER (                                                 SCEDWI 104
  100 CALL BKSPAC                                                               SCEDWI 105
      CALL SCEDDI (IA,IA,JSYM2,0)                                               REFTB1  76
      IF (ITERM.NE.0) GO TO 355                                                 SUBTY7  90
      IVAL(1) = JSYM2                                                           EXPR2  136
      IVALTY(1) = IPACKB(1,5,5,IVALTY(1))                                       EXPR2  137
  200 DO I=I1,I2                                                                EXPR2  138
          IDPTR(I) = IVAL(1)                                                    EXPR2  139
          IA(IAVPT1+I+1,1) = IVALTY(1)                                          SUBTY7  91
      END  DO                                                                   EXPR2  141
      IF (KOMMND.NE.0) GO TO 20                                                 SCEDWI 110
      DO 230 I = 1,8                                                            SCEDWI 111
      IF (ITYPLS(DPTR(I)).EQ.ITYPLS(UNDEF(1))) GO TO 20                         SCEDWI 112
  230 CONTINUE                                                                  SCEDWI 113
C              SAVE USER INPUT DATA                                             4XAA   218
  250 DO I=1,LVAL-1                                                             SUBTY7  92
        IA(IAVPTR+I+1,1) = IDPTR(I)                                             SUBTY7  93
      END DO                                                                    4XAA   227
      IF (JSYMLK.EQ.0) GO TO 320                                                4XAA   228
      JSCED  = IA(12,JSYMLK)                                                    FIXJH1  25
C              GET LIKE DATA PTR                                                SCEDWI 116
      LKPTR = IREFTB(2,IOPCDT(14,2)+JSCED-1)                                    REFTB1  77
      DO 310 I = 1,LVAL-1                                                       SUBTY7  94
C              IF DATA NOT INPUT, USE LIKE DATA                                 SCEDWI 119
      IF (ITYPLS(DPTR(I)).EQ.ITYPLS(UNDEF(1))) THEN                             4XAA   229
          IDPTR(I) = IA(LKPTR+NSAVE+2*LVAL+I+1,1)                               SUBTY7  95
          IA(IAVPT1+I+1,1) = IPACKB(1,5,9,IA(IAVPT1+I+1,1))                     SUBTY7  96
      END IF                                                                    4XAA   232
  310 CONTINUE                                                                  4XAA   233
      GO TO 350                                                                 DDAY1   43
  320 DO 330 I = 1,8                                                            SCEDWI 121
      IF (ITYPLS(DPTR(I)).EQ.ITYPLS(UNDEF(1))) GO TO 340                        SCEDWI 122
  330 CONTINUE                                                                  SCEDWI 123
      GO TO 350                                                                 SCEDWI 124
  340 CALL MSG (78)                                                             SCEDWI 125
C              DEFAULT FILL DESIGN DAY DAY-SCEDS                                DDAY1   44
  350 IF (ITYPLS(DPTR(9)).EQ.ITYPLS(UNDEF(1))) THEN                             DDAY1   45
          DPTR(9)=DPTR(1)                                                       DDAY1   46
          IA(IAVPT1+10,1) = IPACKB(1,5,1,IA(IAVPT1+10,1))                       SUBTY7  97
      END IF                                                                    DDAY1   48
      IF (ITYPLS(DPTR(10)).EQ.ITYPLS(UNDEF(1))) THEN                            DDAY1   49
          DPTR(10)=DPTR(1)                                                      DDAY1   50
          IA(IAVPT1+11,1) = IPACKB(1,5,1,IA(IAVPT1+11,1))                       SUBTY7  98
      END IF                                                                    DDAY1   52
  355 IF (KOMMND.NE.0) GO TO 360                                                SUBTY7  99
C              JREF IS USED AS SYM TBL PTR IN SUBCOMMAND                        REFTB1  78
      JREF = JSYM                                                               REFTB1  79
C              SET PTR TO DATA IN IA                                            SCEDWI 130
      IREFTB(2,JREF2) = IAXS                                                    4XAA   234
      GO TO 370                                                                 SCEDWI 132
  360 IREFTB(2,JREF) = IAXS                                                     4XAA   235
  370 IAVPTR = IAVPT1 + 2*LVAL                                                  4XAA   236
      CALL MOVEN(IDPTR(1),IA(IAVPTR+2,1),LVAL-1)                                SUBTY7 100
      IF (KOMMND.EQ.0) CALL PRNTVL(2,JREF2)                                     SUBTY7 101
      RETURN                                                                    SCEDWI 135
  900 CALL SKPEOC                                                               SCEDWI 136
  950 RETURN                                                                    SCEDWI 137
      END                                                                       SCEDWI 138
      SUBROUTINE SCEDYI (IA,IREFTB,KONTXT,JREF,JOPCDT)                          ALPHA2  95
C                                                                               SCEDYI   3
C              SCEDYI INPUTS DATA FOR THE SCEDULE COMMAND                       SCEDYI   4
C                                                                               SCEDYI   5
C              SCEDYI USES 0 WORDS OF COMMWK                                    SCEDYI   6
C                                                                               SCEDYI   7
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON /DEFSTP/ ISCHTP                                                    /DEFSTP/ 2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION ITEMP1(54),ITEMP2(54),ITEMP3(54),IA(16,1),KWD(16,1),            KEYSIZ  50
     1          KONTXT(16,1),IREFTB(5,1),TEMP1(54),TEMP2(54),TEMP3(54)          FIX6    93
      EQUIVALENCE (ITEMP1(1),TEMP1(1)), (ITEMP2(1),TEMP2(1)),                   ALPHA2 100
     1            (ITEMP3(1),TEMP3(1))                                          ALPHA2 101
      DIMENSION IDUM(54)                                                        SUBTY7 104
      DATA MWEEKS /52/                                                          SCEDYI  14
      DATA KWD /                                                                KEYSIZ  52
     1 4HWEEK,4H-SCH,4HEDUL,4HE   ,4HW-SC,4HH   ,1,3,1,75,0,1,4*0 /             KEYSIZ  53
C                                                                               SCEDYI  16
      NFND = 0                                                                  SUBTY7 105
C              INIT LAST MONTH-DAY                                              SCEDYI  17
      LASTMD = 0                                                                SCEDYI  18
C              ZERO ARRAYS                                                      ALPHA2 102
      DO I=1,54                                                                 ALPHA2 103
          ITEMP1(I) = 0                                                         ALPHA2 104
          TEMP2(I) = 0.                                                         ALPHA2 105
          TEMP3(I) = 0.                                                         ALPHA2 106
          IDUM(I) = 0                                                           SUBTY7 106
      END DO                                                                    ALPHA2 107
      NVALS = IOPCDT(16,JOPCDT)                                                 ALPHA2 108
      IKW = IOPCDT(9,JOPCDT)                                                    ALPHA2 109
      NSAVE = IOPCDT(17,JOPCDT)                                                 4XAA   238
      IAVPT1 = IAX + NSAVE                                                      4XAA   239
      LTOT = NSAVE + 3*NVALS + IOPCDT(18,JOPCDT)                                4XAA   240
      IAVPTR = IAVPT1 + NVALS                                                   4XAA   241
      CALL CKAA(IA,LTOT)                                                        4XAA   242
      IAXS = IAX                                                                4XAA   243
      IAX = IAX + LTOT                                                          4XAA   244
      DO I=1,NVALS                                                              ALPHA2 111
      IA(IAVPT1+I,1) = 0                                                        4XAA   245
      IA(IAVPT1+NVALS+I,1) = ITYPLS(UNDEF(1))                                   4XAA   246
      IA(IAVPT1+2*NVALS+I,1) = ITYPLS(UNDEF(1))                                 4XAA   247
      END DO                                                                    ALPHA2 113
C              REQUIRE LABEL                                                    SCEDYI  19
      CALL LBLCK                                                                SCEDYI  20
      NWEEKS = 0                                                                SCEDYI  21
      IREFTB(2,JREF) = IAXS                                                     SUBTY1  86
      CALL TYPINP(JREF,JOPCDT,IKW,IAVPT1,ITYPE,IERRF)                           SUBTY1  87
C              SAVE TYPE FOR USE AS DEFAULT IN D-SCH                            SUBTY7 107
      ISCHTP = ITYPE                                                            SUBTY7 108
      IF (IERRF.GT.0) THEN                                                      SUBTY7 109
          CALL SKPEOC                                                           SUBTY1  89
          IF (IERRF.EQ.2) CALL MSG(108)                                         SUBTY7 110
          RETURN                                                                SUBTY1  90
      END IF                                                                    SUBTY1  91
   20 CALL GETCS                                                                SCEDYI  22
      IF (ITERM.NE.0) GO TO 200                                                 SCEDYI  23
          if ( ISYMU(1) .eq. HOLL(25) )     goto  30                            SCEDYI  24
C              LOOK FOR GROUP                                                   SUBTY1  92
      CALL SCAN0(IA,KONTXT(1,IKW+1),1,J,IA(IAVPTR+2,1),IA(IAVPT1+2,1),          EXPR2  142
     1           NFND)                                                          EXPR2  143
      IF (J.GT.0) IA(IAVPT1+2,1) = IPACKB(1,5,5,IA(IAVPT1+2,1))                 TYP1    40
      IF (ITERM.NE.0) GO TO 200                                                 ALPHA2 116
      IF (J.GT.0) GO TO 20                                                      ALPHA2 117
      CALL MSG (71)                                                             SCEDYI  25
      GO TO 800                                                                 SCEDYI  26
   30 CALL MEMCK (NWEEKS, MWEEKS)                                               SCEDYI  27
      CALL GETCS                                                                SCEDYI  28
C              PROCESS MONTH AND DAY                                            SCEDYI  29
      CALL MONDAY (M, ID, IERR)                                                 SCEDYI  30
C              IF FATAL ERRORS                                                  SCEDYI  31
      IF (IERR.GT.1) GO TO 800                                                  SCEDYI  32
C              CALC MONTH-DAY                                                   SCEDYI  33
      MD     = 32*M + ID                                                        SCEDYI  34
C              IF NOT GREATER THAN LAST MD                                      SCEDYI  35
      IF (LASTMD.GE.MD) CALL MSG (38)                                           SCEDYI  36
C              RESET LAST MD                                                    SCEDYI  37
      LASTMD = MD                                                               SCEDYI  38
      CALL GETCS                                                                SCEDYI  39
C              IF .. HIT                                                        SCEDYI  40
      IF (ITERM.NE.0) THEN                                                      SUBTY7 111
          CALL MSG(78)                                                          SUBTY7 112
          RETURN                                                                SUBTY7 113
      END IF                                                                    SUBTY7 114
C              Check for implicit week-schedule.  Look for a "("                SUBTY7 115
C              or "TYPE".                                                       SUBTY7 116
      IF (ISYMB(1).EQ.HOLL(15) .OR. ISYMU(1).EQ.IHOLTY) THEN                    SUBTY7 117
C              Backspace and process implicit week-schedule                     SUBTY7 118
          CALL BKSPAC                                                           SUBTY7 119
          CALL SCEDWI(IA,IA,JSYM2,0)                                            SUBTY7 120
          IF (ITERM.NE.0) RETURN                                                SUBTY7 121
          ITEMP3(NWEEKS+2) = JSYM2                                              SUBTY7 122
      ELSE                                                                      SUBTY7 123
C              Check for WEEK-SCHEDULE keyword                                  SUBTY7 124
          CALL TBLSCH(ISYMU,KWD,16,1,1,J)                                       SUBTY7 125
          IF (J.GT.0) CALL GETCS                                                SUBTY7 126
          IF (IDELIM.NE.0) THEN                                                 SUBTY7 127
              CALL MSG(90)                                                      SUBTY7 128
              GO TO 800                                                         SUBTY7 129
          END IF                                                                SUBTY7 130
          CALL BKSPAC                                                           SUBTY7 131
          CALL GETLS(IA,KWD(1,1),1,1,0,1,ITEMP3(NWEEKS+2),                      SUBTY7 132
     1               IDUM(NWEEKS+2),NFND)                                       SUBTY7 133
      END IF                                                                    SUBTY7 134
      TEMP1(NWEEKS+2) = FLOAT(M)                                                SUBTY7 135
      TEMP2(NWEEKS+2) = FLOAT(ID)                                               ALPHA2 119
      GO TO 20                                                                  SCEDYI  60
  200 IF (NWEEKS.LE.0) THEN                                                     SUBTY7 136
          CALL MSG(78)                                                          SUBTY7 137
          RETURN                                                                SUBTY7 138
      END IF                                                                    SUBTY7 139
      LL = NWEEKS + 2                                                           SUBTY7 140
      CALL CKAA(IA,3*LL+LTOT)                                                   4XAA   253
C              DEFAULT TYPE AND GROUP                                           ALPHA2 123
      LKDAT = IOPCDT(15,JOPCDT) + 3*IOPCDT(23,JOPCDT) - 1                       4XAA   254
      LKPTR = IREFTB(1,JREF)                                                    SUBTY1  95
      CALL LSDFIL(JOPCDT,IA(1,1),KONTXT(1,IKW),2,IA(IAVPT1+1,1),                SUBTY1  96
     1            IA(LKDAT+1,1),3,IA(1,LKPTR),0,NVALS)                          FIX7    48
C              SET LIST POINTERS                                                ALPHA2 127
      ILP1 = IAX + 1                                                            4XAA   256
      ILP2 = IAX + LL + 1                                                       4XAA   257
      ILP3 = IAX + 2*LL + 1                                                     4XAA   258
      IAVPT3 = IAVPT1 + 2*NVALS                                                 4XAA   259
      IA(IAVPT1+3,1) = IPACKB(1,5,5,IA(IAVPT1+3,1))                             TYP1    41
      IA(IAVPTR+3,1) = ILP1                                                     4XAA   261
      IA(IAVPT3+3,1) = ILP1                                                     4XAA   262
      IA(IAVPT1+4,1) = IPACKB(1,5,5,IA(IAVPT1+4,1))                             TYP1    42
      IA(IAVPTR+4,1) = ILP2                                                     4XAA   264
      IA(IAVPT3+4,1) = ILP2                                                     4XAA   265
      IA(IAVPT1+5,1) = IPACKB(1,5,5,IA(IAVPT1+5,1))                             TYP1    43
      IA(IAVPTR+5,1) = ILP3                                                     4XAA   267
      IA(IAVPT3+5,1) = ILP3                                                     4XAA   268
      ITEMP1(1) = NWEEKS                                                        ALPHA2 134
      ITEMP1(2) = NWEEKS                                                        ALPHA2 135
      ITEMP2(1) = NWEEKS                                                        ALPHA2 136
      ITEMP2(2) = NWEEKS                                                        ALPHA2 137
      ITEMP3(1) = NWEEKS                                                        ALPHA2 138
      ITEMP3(2) = NWEEKS                                                        ALPHA2 139
      CALL MOVEN(ITEMP1(1),IA(ILP1,1),LL)                                       ALPHA2 140
      CALL MOVEN(ITEMP2(1),IA(ILP2,1),LL)                                       ALPHA2 141
      CALL MOVEN(ITEMP3(1),IA(ILP3,1),LL)                                       ALPHA2 142
C              SET PTR TO SCED DATA                                             SCEDYI  65
      IAX = IAX + 3*LL                                                          4XAA   270
      RETURN                                                                    SCEDYI  68
  800 CALL SKPEOC                                                               SCEDYI  69
      RETURN                                                                    SCEDYI  70
      END                                                                       SCEDYI  71
      SUBROUTINE SETPRN(JREF,JOPCH,JOPPRN,ILSTFL,IREFTB,ISYMTB)                 ATTRF2   8
C                                                                               SETPRN   3
C              SET THE INDEX OF THE PARENT ELEMENT IN THE REFERENCE             SETPRN   4
C              TABLE OF THE CHILD ELEMENT.                                      SETPRN   5
C                                                                               SETPRN   6
C              INPUT                                                            SETPRN   7
C              -----                                                            SETPRN   8
C                                                                               SETPRN   9
C              JREF        - REFERENCE TABLE INDEX OF CHILD ELEMENT             SETPRN  10
C              JOPCH       - COMMAND TABLE INDEX OF CHILD ELEMENT               SETPRN  11
C              JOPPRN      - COMMAND TABLE INDEX OF PARENT ELEMENT              SETPRN  12
C              ILSTFL      - LIST FLAG: 1=CHILD INPUT VIA LIST;                 ATTRF2   9
C                                       0=NOT VIA LIST                          ATTRF2  10
C              IREFTB(5,N) - REFERENCE TABLE                                    FIX6    94
C              ISYMTB(16,N)- SYMBOL TABLE                                       SYMSIZ  73
C                                                                               ATTRF2  11
C              NOTE THAT IREFTB(4,JREF) POSITIVE INDICATES PREVIOUS             ATTRF2  12
C              CHILD INPUT VIA LIST; NEGATIVE INDICATES PREVIOUS CHILD          ATTRF2  13
C              INPUT VIA HIERARCHY                                              ATTRF2  14
C                                                                               ATTRF2  15
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
C                                                                               SETPRN  21
      DIMENSION IREFTB(5,1)                                                     FIX6    95
      DIMENSION ISYMTB(16,1)                                                    SYMSIZ  74
C                                                                               SETPRN  24
      IDUM = 0                                                                  SETPRN  25
      IF (JOPPRN.EQ.0) RETURN                                                   SETPRN  26
      JPRNRX = IOPCDT(22,JOPPRN)                                                ATTRF2  16
C              If no parent specified or parent already set to one              DFTEX4 239
C              specified there is nothing to do                                 DFTEX4 240
      IF((JPRNRX.EQ.0) .OR. (JPRNRX.EQ.IREFTB(4,JREF))) RETURN                  DFTEX4 241
C              SET THE PARENT REFERENCE TABLE INDEX IN THE CHILD                SETPRN  37
C              REFERENCE TABLE                                                  SETPRN  38
      IF (ILSTFL.EQ.1) THEN                                                     ATTRF2  18
          IF (IREFTB(4,JREF).LE.0) THEN                                         OPLST1 236
              IREFTB(4,JREF) = JPRNRX                                           OPLST1 237
          ELSE                                                                  OPLST1 238
C              ERROR - ALREADY ATTACHED                                         OPLST1 239
              GO TO 100                                                         OPLST1 240
          END IF                                                                OPLST1 241
      ELSE                                                                      OPLST1 242
          IF (IREFTB(4,JREF).EQ.0) THEN                                         OPLST1 243
              IREFTB(4,JREF) = -JPRNRX                                          OPLST1 244
          ELSE IF (IREFTB(4,JREF).LT.0) THEN                                    OPLST1 245
C              ERROR - ALREADY ATTACHED                                         OPLST1 246
              GO TO 100                                                         OPLST1 247
C              DO NOTHING IF ALREADY ATTACHED BY LIST INPUT                     OPLST1 248
          END IF                                                                OPLST1 249
      END IF                                                                    OPLST1 250
      RETURN                                                                    OPLST1 251
  100 JPRNRX = IABS(IREFTB(4,JREF))                                             OPLST1 252
      JSYMCH = IREFTB(1,JREF)                                                   OPLST1 253
      JSYMPR = IREFTB(1,JPRNRX)                                                 OPLST1 254
      JJ = NOPCDT - 1                                                           -035    12
      DO II=1,JJ                                                                -035    13
        IF (IOPCDT(12,II).GT.0) THEN                                            -035    14
          IF( (JPRNRX .GE. IOPCDT(14,II)).and.                                  -035    15
     $        (JPRNRX .LT. IOPCDT(14,II+1)) ) JOPpn = II                        -035    16
        ENDIF                                                                   -035    17
      ENDDO                                                                     -035    18
      CALL MSG2(154,IOPCDT(1,JOPCH),ISYMTB(1,JSYMCH),IOPCDT(1,JOPpn),           -035    19
     1              ISYMTB(1,JSYMPR))                                           FIX11  421
      RETURN                                                                    SETPRN  44
      END                                                                       SETPRN  45
      SUBROUTINE SKPEOC                                                         SKPEOC   2
C                                                                               SKPEOC   3
C              SKPEOC SKIPS TO END OF COMMAND                                   SKPEOC   4
C                                                                               SKPEOC   5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
C                                                                               SKPEOC   7
C              IF ALREADY AT END OF COMMAND                                     SKPEOC   8
      IF (ITERM.NE.0) RETURN                                                    SKPEOC   9
C              SKIPPING TO NEXT ..                                              SKPEOC  10
      CALL MSG (50)                                                             SKPEOC  11
   10 CALL GETCS                                                                SKPEOC  12
      IF (ITERM.EQ.0) GO TO 10                                                  SKPEOC  13
      RETURN                                                                    SKPEOC  14
      END                                                                       SKPEOC  15
      SUBROUTINE SUBSAV(JOP,KWD,NK,VAL,FILL,LVALF)                              FIX12    1
C                                                                               SUBSAV   3
C              Save a flag in the 6th bit of the data type if the value         FIX12    2
C              came from a subcommand.  These flags will be                     FIX12    3
C              used in PRNTVL for the comment printing of values                SUBSAV   6
C              from subcommands.                                                SUBSAV   7
C                                                                               SUBSAV   8
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION KWD(16,1),VAL(1),FILL(1)                                        SUBSAV  11
      LVAL = IOPCDT(16,JOP)                                                     SUBSAV  12
      JK = 0                                                                    SUBSAV  13
  100 JK = JK + 1                                                               SUBSAV  14
      IF (JK.GT.NK) RETURN                                                      SUBSAV  15
      NWDS = KWD(9,JK)                                                          SUBSAV  16
      IVPTR1 = KWD(12,JK) - 1                                                   SUBSAV  17
      IFPTR1 = KWD(12,JK) - KWD(12,1)                                           SUBSAV  18
      DO 500 IWD=1,NWDS                                                         SUBSAV  19
          IVPTR1 = IVPTR1 + 1                                                   SUBSAV  20
          IFPTR1 = IFPTR1 + 1                                                   SUBSAV  21
          IFPTR = IFPTR1 + 2*LVALF                                              SUBSAV  22
          IDTINP = IUNPKB(1,5,VAL(IVPTR1))                                      SUBSAV  24
          IFTYPE = IUNPKB(1,5,FILL(IFPTR1))                                     SUBSAV  25
          IF ((IDTINP.GE. 3 .AND. IDTINP.LE. 6) .OR.                            COMPLY  32
     $        (IDTINP.GE.11 .AND. IDTINP.LE.15)) GO TO 500                      COMPLY  33
          IF (IFTYPE.EQ.1 .OR. IFTYPE.EQ.2) GO TO 500                           SUBSAV  27
          IF (IFTYPE.EQ.7 .OR. IFTYPE.EQ.8) GO TO 500                           SUBSAV  28
          IF (ITYPLS(FILL(IFPTR)).EQ.ITYPLS(UNDEF(1))) GO TO 500                SUBSAV  29
          IF (ITYPLS(FILL(IFPTR)).EQ.ITYPLS(UNDEF(2))) GO TO 500                SUBSAV  30
          IF (ITYPLS(FILL(IFPTR)).EQ.ITYPLS(UNDEF(3))) GO TO 500                SUBSAV  31
          IF (ITYPLS(FILL(IFPTR)).EQ.ITYPLS(UNDEF(4))) GO TO 500                SUBSAV  32
          VAL(IVPTR1) = TYPLS(IPACKB(6,6,1,VAL(IVPTR1)))                        FIX12    4
  500 CONTINUE                                                                  SUBSAV  34
      GO TO 100                                                                 SUBSAV  35
      END                                                                       SUBSAV  36
      SUBROUTINE SYMCK (ISYMTB,IERR)                                            HVAC11   4
C                                                                               SYMCK    3
C              SYMCK CHECKS THE SYMBOL TABLE FOR                                SYMCK    4
C              REFERENCED BUT UNDEFINED SYMBOLS                                 SYMCK    5
C                                                                               SYMCK    6
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      DIMENSION ISYMTB(16,1)                                                    SYMSIZ  75
C                                                                               SYMCK   10
      IERR = 0                                                                  HVAC11   5
      JKWcur = 0                                                                HVAC28  49
      IF (NSYMTB.EQ.0) RETURN                                                   SYMCK   11
      DO 100 JSYM = 1,NSYMTB                                                    SYMCK   12
      IF ((ISYMTB(10,JSYM).NE.0) .OR. (ISYMTB(9,JSYM).GE.100)) GO TO 100        SYMSIZ  76
        JOPcur = 0                                                              HVAC28  50
        JREFcur= 0                                                              HVAC28  51
        DO I=1,NOPCDT                                                           HVAC28  52
          IF (IOPCDT(11,I).EQ.ISYMTB(9,JSYM)) THEN                              HVAC28  53
            JOPcur = I                                                          HVAC28  54
            JREFcur= IOPCDT(14,I)-1+ISYMTB(12,JSYM)                             HVAC28  55
            GOTO 50                                                             HVAC28  56
          ENDIF                                                                 HVAC28  57
        ENDDO                                                                   HVAC28  58
   50   CONTINUE                                                                HVAC28  59
        CALL MSG2 (17, ISYMTB(1,JSYM), ISYMTB(11,JSYM), DUM, DUM)               HVAC11   6
        IERR = 1                                                                HVAC11   7
  100 CONTINUE                                                                  SYMCK   15
      JOPcur = 0                                                                HVAC28  60
      JREFcur= 0                                                                HVAC28  61
      RETURN                                                                    SYMCK   16
      END                                                                       SYMCK   17
      SUBROUTINE SYMDEF (ISYMTB, ISYM, ISTYPE, JSYM)                            SYMDEF   2
C                                                                               SYMDEF   3
C              SYMDEF CAUSES A SYMBOL TO BE DEFINED, WHETHER OR                 SYMDEF   4
C              NOT IT WAS EVER REFERENCED BEFORE, SO LONG AS IT                 SYMDEF   5
C              WAS NEVER DEFINED                                                SYMDEF   6
C                                                                               SYMDEF   7
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      DIMENSION ISYM(1), DESC(4), ISYMTB(16,1)                                  SYMSIZ  78
C                                                                               SYMDEF  13
      JSYM = 0                                                                  CRV2    21
      CALL SYMSRU(ISYM,ISYMTB,NSYMTB,16,8,JS)                                   SYMSIZ  79
C              IF FOUND                                                         SYMDEF  15
      IF (JS.NE.0) GO TO 100                                                    SYMDEF  16
C                                                                               SYMDEF  17
C              PREVIOUSLY UNREFERENCED                                          SYMDEF  18
C                                                                               SYMDEF  19
      IF (NSYMTB.LT.MSYMTB) GO TO 40                                            SYMDEF  20
      CALL MSG (10)                                                             SYMDEF  21
      CALL ABT                                                                  SYMDEF  22
   40 NSYMTB = NSYMTB + 1                                                       SYMDEF  23
      DO I=1,8                                                                  SYMSIZ  80
          ISYMTB(I,NSYMTB) = ISYM(I)                                            SYMSIZ  81
      END DO                                                                    SYMSIZ  82
C              SET SYMBOL TYPE                                                  SYMDEF  26
      ISYMTB(9,NSYMTB) = ISTYPE                                                 SYMSIZ  83
C              SET LINE DEFND                                                   SYMDEF  28
      ISYMTB(10,NSYMTB) = MAX(1,KRDNUM)                                         FIX14  181
C              SET LINE LAST REF                                                SYMDEF  30
      ISYMTB(11,NSYMTB) = MAX(1,KRDNUM)                                         FIX14  182
C              CLEAR VALUE                                                      SYMDEF  32
      ISYMTB(12,NSYMTB) = 0                                                     SYMSIZ  86
      JSYM   = NSYMTB                                                           SYMDEF  34
      RETURN                                                                    SYMDEF  35
C                                                                               SYMDEF  36
C              PREVIOUSLY REFERENCED SYMBOLS                                    SYMDEF  37
C                                                                               SYMDEF  38
C              IF PREV DEFINED                                                  SYMDEF  39
  100 IF (ISYMTB(10,JS).NE.0) GO TO 120                                         SYMSIZ  87
C              IF PREV REF AS DIFF TYPE                                         SYMDEF  41
      IF (ISTYPE.NE.ISYMTB(9,JS)) GO TO 110                                     SYMSIZ  88
C              SET LINE DEFND                                                   SYMDEF  43
      ISYMTB(10,JS) = MAX(1,KRDNUM)                                             FIX14  183
C              SET LINE LAST REF                                                SYMDEF  45
      JSYM   = JS                                                               SYMDEF  49
      RETURN                                                                    SYMDEF  50
C              GET SYMBOL TYPE DESC                                             SYMDEF  51
  110 CALL SYMDSC (ISYMTB(9,JS), DESC)                                          SYMSIZ  91
      CALL MSG2 (30, ISYMTB(11,JS), DESC, DUM, DUM)                             SYMSIZ  92
      ISYMB(1) = NSYMTB                                                         SYMDEF  54
      GO TO 40                                                                  SYMDEF  55
  120 CALL MSG2 (21, ISYMTB(10,JS), ISYMTB(1,JS), DUM, DUM)                     SYMSIZ  93
C              MAKE DUMMY ENTRY                                                 SYMDEF  57
      ISYMB(1) = NSYMTB                                                         SYMDEF  58
      GO TO 40                                                                  SYMDEF  59
      END                                                                       SYMDEF  60
      SUBROUTINE SYMDSC (ISTYPE, DESC)                                          SYMDSC   2
C                                                                               SYMDSC   3
C              SYMDSC FINDS THE SYMBOL TYPE DESCRIPTION FOR                     SYMDSC   4
C              SYMBOL TYPE *ISTYPE*                                             SYMDSC   5
C                                                                               SYMDSC   6
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION DESC(4), CODWRD(4), ISTYPE(1)                                   SYMDSC   8
      DATA CODWRD/4HCODE, 4H-WOR, 4HD   , 4H    /                               SYMDSC   9
C                                                                               SYMDSC  10
      DO 100 I = 1,NOPCDT                                                       SYMDSC  11
      IF (IOPCDT(11,I).EQ.ISTYPE(1)) GO TO 110                                  SYMDSC  12
  100 CONTINUE                                                                  SYMDSC  13
      GO TO 200                                                                 SYMDSC  14
  110 CALL MOVEN (IOPCDT(1,I), DESC, 4)                                         SYMDSC  15
      RETURN                                                                    SYMDSC  16
  200 CALL MOVEN (CODWRD, DESC, 4)                                              SYMDSC  17
      RETURN                                                                    SYMDSC  18
      END                                                                       SYMDSC  19
      SUBROUTINE SYMENT (ISYMTB, ISYM, ISTYPE, ISUBTY, JSYM)                    SUBTY1  98
C                                                                               SYMENT   3
C              SYMENT ENTERS A SYMBOL IN THE SYMBOL                             SYMENT   4
C              TABLE AS A RESULT OF A REFERENCE WHICH                           SYMENT   5
C              DID NOT DEFINE THE SYMBOL                                        SYMENT   6
C                                                                               SYMENT   7
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      DIMENSION ISYM(1), ISYMTB(16,1)                                           SYMSIZ  94
C                                                                               SYMENT  11
      JSYM = 0                                                                  CRV2    22
      IF (NSYMTB.LT.MSYMTB) GO TO 10                                            SYMENT  12
      CALL MSG (10)                                                             SYMENT  13
      CALL ABT                                                                  SYMENT  14
   10 NSYMTB = NSYMTB + 1                                                       SYMENT  15
      DO I=1,8                                                                  SYMSIZ  95
          ISYMTB(I,NSYMTB) = ISYM(I)                                            SYMSIZ  96
      END DO                                                                    SYMSIZ  97
      ISYMTB(9,NSYMTB) = ISTYPE                                                 SYMSIZ  98
      ISYMTB(10,NSYMTB) = 0                                                     SYMSIZ  99
      ISYMTB(11,NSYMTB) = KRDNUM                                                SYMSIZ 100
      ISYMTB(12,NSYMTB) = 0                                                     SYMSIZ 101
      ISYMTB(14,NSYMTB) = ISUBTY                                                SUBTY1  99
      JSYM   = NSYMTB                                                           SYMENT  22
      RETURN                                                                    SYMENT  23
      END                                                                       SYMENT  24
      SUBROUTINE SYMFIL (ISYMTB, KWD, NK, IVAL)                                 SYMFIL   2
C                                                                               SYMFIL   3
C              SYMFIL REPLACES SYMBOL TABLE POINTERS IN THE VALUE               SYMFIL   4
C              ARRAY WITH THE VALUE OF THE SYMBOLS.                             SYMFIL   5
C                                                                               SYMFIL   6
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION KWD(16,1), IVAL(1), ISYMTB(16,1)                                KEYSIZ  55
C                                                                               SYMFIL  11
      IVPTRB = 0                                                                SYMFIL  12
      DO 100 JK = 1,NK                                                          SYMFIL  13
C              IF NOT A SYMBOL                                                  SYMFIL  14
      KTYPE  = KWD(8,JK)                                                        SYMFIL  15
      LEN    = KWD(9,JK)                                                        SYMFIL  16
      IVPTR  = KWD(12,JK)                                                       SYMFIL  17
      IF(IVPTRB.GE.IVPTR) GO TO 100                                             SYMFIL  18
      IVPTRB = IVPTR                                                            SYMFIL  19
      IF ((KTYPE.NE. 2).AND.(KTYPE.NE. 3).AND.(KTYPE.NE. 8).AND.                FIX6   102
     $    (KTYPE.NE.10))  GOTO 200                                              FIX6   103
      DO 60 I = 1,LEN                                                           SYMFIL  21
      JSYM   = IVAL(IVPTR-1+I)                                                  SYMFIL  22
      IF ((ITYPLS(JSYM) .EQ. ITYPLS(UNDEF(1))).OR.(NOVAL(JSYM) .EQ. 0)          SYMFIL  23
     1     .OR. (JSYM .LE. 0))   GO TO 60                                       SYMFIL  24
      IVAL(IVPTR-1+I) = ISYMTB(12,JSYM)                                         SYMSIZ 102
   60 CONTINUE                                                                  SYMFIL  26
      GOTO 100                                                                  SYMFIL  27
  200 IF (METIN.NE.1)  GOTO 100                                                 SYMFIL  28
      IF (KTYPE.EQ.4.OR.KTYPE.EQ.6)  GOTO 100                                   SYMFIL  29
C              REAL VALUES TO BE CONVERTED.                                     SYMFIL  30
      CALL KDIV(IVAL(IVPTR),KWD(7,JK),LEN,METKVT)                               SYMFIL  31
  100 CONTINUE                                                                  SYMFIL  32
      RETURN                                                                    SYMFIL  33
      END                                                                       SYMFIL  34
      SUBROUTINE SYMSRC(ISYM,ISYMTB,ISYMTP,LEN,NCOLS,LNAME,ISYMX)               SYMSIZ 103
C                                                                               SYMSRC   3
C              SEARCHES THE SYMBOL TABLE FOR A SYMBOL OF THE                    SYMSRC   4
C              CORRECT TYPE (USED FOR CODEWORDS SO THAT CODEWORDS FOR           SYMSIZ 104
C              DIFFERENT COMMANDS CAN BE THE SAME)                              SYMSIZ 105
C                                                                               SYMSRC   6
C              INPUT                                                            SYMSRC   7
C              -----                                                            SYMSRC   8
C              ISYM(LNAME)         - THE SYMBOL IN A4                           SYMSIZ 106
C              ISYMTB(NCOLS,LEN)   - THE SYMBOL TABLE                           SYMSIZ 107
C              ISYMTP         - THE SYMBOL TYPE                                 SYMSRC  11
C              LEN            - LENGTH OF SYMBOL TABLE                          SYMSRC  12
C              NCOLS               - WIDTH OF SYMBOL TABLE                      SYMSIZ 108
C              LNAME               - SIZE OF NAME                               SYMSIZ 109
C                                                                               SYMSRC  13
C              OUTPUT                                                           SYMSRC  14
C              ------                                                           SYMSRC  15
C              ISYMX          - POSITION OF SYMBOL IN SYMBOL TABLE;             SYMSRC  16
C                               =0 IF NOT FOUND                                 SYMSRC  17
C                                                                               SYMSRC  18
      INTEGER ISYMTB(NCOLS,LEN),ISYM(LNAME),ISYMTP,LEN,NCOLS,LNAME,             SYMSIZ 110
     1        ISYMX                                                             SYMSIZ 111
      INTEGER ICOLST                                                            SYMSIZ 112
C                                                                               SYMSRC  20
      ISYMX = 0                                                                 SYMSRC  21
      ICOLST = LNAME + 1                                                        SYMSIZ 113
      IF (LEN.EQ.0) RETURN                                                      SYMSRC  22
      DO I=1,LEN                                                                SYMSRC  23
C              MATCH SYMBOL TYPE                                                SYMSRC  24
          IF (ISYMTB(ICOLST,I).EQ.ISYMTP) THEN                                  SYMSIZ 114
C              MATCH SYMBOL                                                     SYMSRC  26
              IF (KOMPAR(ISYM(1),ISYMTB(1,I),LNAME).EQ.1) THEN                  SYMSIZ 115
C              SET INDEX AND RETURN                                             SYMSRC  28
                  ISYMX = I                                                     SYMSRC  29
                  RETURN                                                        SYMSRC  30
              END IF                                                            SYMSRC  31
          END IF                                                                SYMSRC  32
      END DO                                                                    SYMSRC  33
      RETURN                                                                    SYMSRC  34
      END                                                                       SYMSRC  35
      SUBROUTINE SYMSRU(ISYM,ISYMTB,LEN,NCOLS,LNAME,ISYMX)                      SYMSRU   2
C                                                                               SYMSRU   3
C              SEARCHES THE SYMBOL TABLE FOR A U-NAME                           SYMSRU   4
C                                                                               SYMSRU   5
C              INPUT                                                            SYMSRU   6
C              -----                                                            SYMSRU   7
C              ISYM(LNAME)         - THE SYMBOL IN A4                           SYMSRU   8
C              ISYMTB(NCOLS,LEN)   - THE SYMBOL TABLE                           SYMSRU   9
C              LEN                 - THE LENGTH OF THE SYMBOL TABLE             SYMSRU  10
C              NCOLS               - THE WIDTH OF THE SYMBOL TABLE              SYMSRU  11
C              LNAME               - SIZE OF THE U-NAME (ISYM)                  SYMSRU  12
C                                                                               SYMSRU  13
C              OUTPUT                                                           SYMSRU  14
C              ------                                                           SYMSRU  15
C              ISYMX               - POSITION OF SYMBOL IN SYMBOL TABLE         SYMSRU  16
C                                    (0 IF NOT FOUND)                           SYMSRU  17
C                                                                               SYMSRU  18
      INTEGER ISYM(LNAME),ISYMTB(NCOLS,LEN),LEN,NCOLS,LNAME,ISYMX               SYMSRU  19
      INTEGER LNM1                                                              SYMSRU  20
C                                                                               SYMSRU  21
      ISYMX = 0                                                                 SYMSRU  22
      LNM1 = LNAME - 1                                                          SYMSRU  23
      IF (LEN.LE.0) RETURN                                                      SYMSRU  24
      DO I=1,LEN                                                                SYMSRU  25
C              CHECK FIRST WORD FOR MATHCH                                      SYMSRU  26
          IF (ISYM(1).EQ.ISYMTB(1,I)) THEN                                      SYMSRU  27
              IF (KOMPAR(ISYM(2),ISYMTB(2,I),LNM1).EQ.1) THEN                   SYMSRU  28
                  ISYMX = I                                                     SYMSRU  29
                  RETURN                                                        SYMSRU  30
              END IF                                                            SYMSRU  31
          END IF                                                                SYMSRU  32
      END DO                                                                    SYMSRU  33
      RETURN                                                                    SYMSRU  34
      END                                                                       SYMSRU  35
      SUBROUTINE TBLSCH (ISYM, ITABLE, NROWS, LEN, IABBR, INDEX)                TBLSCH   2
C                                                                               TBLSCH   3
C              TBLSCH SEARCHES A TABLE FOR A SYMBOL                             TBLSCH   4
C              IABBR IS A FLAG; IABBR=0 MEANS THE SYMBOL IS 4A4                 LIB1    16
C              AND HAS NO ABBREVIATION; IABBR=1 MEANS THE SYMBOL IS             LIB1    17
C              4A4 AND HAS A 2A4 ABBREVIATION; IABBR=2 MEANS THE SYMBOL         LIB1    18
C              IS 8A4 AND HAS NO ABBREVIATION.                                  LIB1    19
C                                                                               TBLSCH   5
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      DIMENSION ITABLE(NROWS,1)                                                 TBLSCH   7
      DIMENSION ISYM(4)                                                         TBLSCH   8
C                                                                               TBLSCH   9
C              IF NO TABLE                                                      TBLSCH  10
      INDEX = 0                                                                 CRV2    23
      IF (LEN.EQ.0) GO TO 200                                                   TBLSCH  11
      INX1   = 1                                                                TBLSCH  12
      ISYMSZ = 3                                                                LIB1    20
      IF (IABBR.EQ.2) ISYMSZ = 7                                                LIB1    21
   20 DO 30 INX = INX1,LEN                                                      TBLSCH  13
      IF (ISYM(1).EQ.ITABLE(1,INX)) GO TO 40                                    TBLSCH  14
   30 CONTINUE                                                                  TBLSCH  15
C              TRY ABBR                                                         TBLSCH  16
      GO TO 100                                                                 TBLSCH  17
   40 IF (KOMPAR(ISYM(2),ITABLE(2,INX),ISYMSZ).NE.0) GO TO 50                   LIB1    22
      INX1   = INX + 1                                                          TBLSCH  19
      IF (INX1.GT.LEN) GO TO 100                                                TBLSCH  20
      GO TO 20                                                                  TBLSCH  21
   50 INDEX  = INX                                                              TBLSCH  22
      RETURN                                                                    TBLSCH  23
C                                                                               TBLSCH  24
C              LOOK FOR ABBR                                                    TBLSCH  25
C                                                                               TBLSCH  26
C              IF NO ABBRS                                                      TBLSCH  27
  100 IF((IABBR.EQ.0).or.(IABBR.EQ.2)) GO TO 200                                -032     1
C              IF SYMBOL TOO LONG TO BE ABBR                                    TBLSCH  29
      IF (ISYM(3).NE.HOLL(14)) GO TO 200                                        TBLSCH  30
      INX1   = 1                                                                TBLSCH  31
  120 DO 130 INX = INX1,LEN                                                     TBLSCH  32
      IF (ISYM(1).EQ.ITABLE(5,INX)) GO TO 140                                   TBLSCH  33
  130 CONTINUE                                                                  TBLSCH  34
      GO TO 200                                                                 TBLSCH  35
  140 IF (ISYM(2).NE.ITABLE(6,INX)) GO TO 150                                   TBLSCH  36
      INDEX  = INX                                                              TBLSCH  37
      RETURN                                                                    TBLSCH  38
  150 INX1   = INX + 1                                                          TBLSCH  39
      IF (INX1.LE.LEN) GO TO 120                                                TBLSCH  40
  200 INDEX  = 0                                                                TBLSCH  41
      RETURN                                                                    TBLSCH  42
      END                                                                       TBLSCH  43
      SUBROUTINE TITLEI                                                         TITLEI   2
C                                                                               TITLEI   3
C              TITLEI INPUTS DATA FOR THE TITLE COMMAND                         TITLEI   4
C                                                                               TITLEI   5
C              TITLEI USES   2 WORDS OF COMMWK                                  TITLEI   6
C                                                                               TITLEI   7
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON /ITITLE/ ITITLE(10,5),ITITLT(10,5)                                 FIX11    1
      DIMENSION KWD(2,5), KWD2(16)                                              KEYSIZ  56
      EQUIVALENCE                                                               TITLEI  12
     1      (COMMWK(1),L), (COMMWK(2),NFND)                                     TITLEI  13
      DATA KWD/                                                                 TITLEI  14
     1   4HLINE, 2H-1,                                                          TITLEI  15
     2   4HLINE, 2H-2,                                                          TITLEI  16
     3   4HLINE, 2H-3,                                                          TITLEI  17
     4   4HLINE, 2H-4,                                                          TITLEI  18
     5   4HLINE, 2H-5/                                                          TITLEI  19
      DATA KWD2 /                                                               KEYSIZ  57
     1 0,0,4H    ,4H    ,0,0,1,4,10,10,0,1,4*0 /                                KEYSIZ  58
C                                                                               TITLEI  21
  100 CALL GETCS                                                                TITLEI  22
      IF (ITERM.NE.0) RETURN                                                    TITLEI  23
      DO 110 L = 1,5                                                            TITLEI  24
          if ( KOMPAR( ISYMU, KWD(1,L), 2 ) .ne. 0 )     goto  120              TITLEI  25
  110 CONTINUE                                                                  TITLEI  26
      CALL MSG (7)                                                              TITLEI  27
      GO TO 100                                                                 TITLEI  28
  120 KWD2(1) = KWD(1,L)                                                        TITLEI  29
      KWD2(2) = KWD(2,L)                                                        TITLEI  30
      CALL GETLL (KWD2,1,1,0,ITITLE(1,L),ITITLT(1,L),NFND)                      FIX11  422
      GO TO 100                                                                 TITLEI  32
      END                                                                       TITLEI  33
      SUBROUTINE TYPINP(JREF,JOPCDT,IKW,IDP,ITYPE,IERRFL)                       TYPINP   2
C                                                                               TYPINP   3
C              INPUT THE TYPE KEYWORD FOR THOSE COMMANDS THAT REQUIRE           TYPINP   4
C              IT.  CHECK THAT THE TYPE IS COMPATIBLE WITH PREVIOUS             TYPINP   5
C              USE, IF ANY, OF THE COMMAND'S U-NAME.                            TYPINP   6
C                                                                               TYPINP   7
C              INPUT                                                            TYPINP   8
C              -----                                                            TYPINP   9
C                                                                               TYPINP  10
C              JREF   - REFERENCE TABLE INDEX OF THIS COMMAND INSTANCE          TYPINP  11
C              JOPCDT - COMMAND TABLE INDEX OF THIS COMMAND                     TYPINP  12
C              IKW    - INDEX TO START OF KEWORDS FOR THIS COMMAND IN           TYPINP  13
C                       THE KEYWORD TABLE                                       TYPINP  14
C              IDP    - AA INDEX TO THE DATA ARRAY FOR THIS COMMAND             TYPINP  15
C                       INSTANCE                                                TYPINP  16
C                                                                               TYPINP  17
C              OUTPUT                                                           TYPINP  18
C              ------                                                           TYPINP  19
C                                                                               TYPINP  20
C              ITYPE  - THE SYMBOL TABLE INDEX OF THE TYPE                      SUBTY3  79
C              IERRFL - ERROR FLAG                                              TYPINP  22
C                                                                               TYPINP  23
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /IUNITS/ VKONV(300),DUMLOG(4),JUNITS(4,300,2),NUNITS,KUNITS        UNITS1   1
      INTEGER DUMLOG                                                            SUBTY1   1
      DIMENSION IUNITS(4,300)                                                   UNITS1   2
      EQUIVALENCE (IUNITS(1,1),JUNITS(1,1,1))                                   /IUNITS/ 4
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
C                                                                               TYPINP  35
      ITYPE = 0                                                                 TYPINP  36
      IERRFL = 0                                                                TYPINP  37
      IF (JOPCDT.LE.0) RETURN                                                   TYPINP  38
      IF (JREF.LE.0) RETURN                                                     TYPINP  39
C              CHECK THAT COMMAND REQUIRES TYPE                                 TYPINP  40
      IF (IOPCDT(24,JOPCDT).EQ.0) RETURN                                        TYPINP  41
      LVAL = IOPCDT(16,JOPCDT)                                                  TYPINP  42
      LKRF = IREFTB(3,JREF)                                                     FIX11  423
C              LOOK FOR 'TYPE'                                                  TYPINP  43
      CALL GETCS                                                                TYPINP  44
      IF (ITYPLS(ISYMU(1)).NE.ITYPLS(IHOLTY)) THEN                              TYPINP  45
C              TYPE NOT THERE; BACKSPACE OVER SYMBOL READ                       TYPINP  46
          CALL BKSPAC                                                           TYPINP  47
C              CHECK TO SEE IF THIS COMMAND LIKE'D TO ANOTHER.                  TYPINP  48
          IF (LKRF.GT.0) THEN                                                   FIX11  424
              LKDAT=IREFTB(2,LKRF)+2*IOPCDT(16,JOPCDT)+IOPCDT(17,JOPCDT)        FIX11  425
              ITYPE = IA(LKDAT+1)                                               TYPINP  51
              IF(NOVAL(ITYPE) .EQ. 0)  THEN                                     DFTEX3 464
                IERRFL = 1                                                      DFTEX3 465
                GOTO 2000                                                       DFTEX3 466
              ENDIF                                                             DFTEX3 467
              IA(IDP+LVAL+1)  = ITYPE                                           DFTEX3 468
              IA(IDP+1)  = IPACKB(1,5,9,IA(IDP+1))                              DFTEX4 242
              IA(IDP+LVAL+LVAL+1) = ITYPE                                       DFTEX3 469
          ELSE IF(NOVAL(IA(IDP+LVAL+1)).eq.1)  THEN                             DFTEX3 470
              ITYPE = IA(IDP+LVAL+1)                                            DFTEX3 471
          ELSE                                                                  DFTEX3 472
              CALL MSG(73)                                                      DFTEX3 473
C              NO TYPE AND NO LIKE; ISSUE ERROR MESSAGE AND LEAVE               TYPINP  54
              IERRFL = 2                                                        SUBTY7 142
              GOTO 2000                                                         DFTEX3 474
          END IF                                                                TYPINP  59
      ELSE                                                                      TYPINP  60
C              TYPE FOUND; INPUT DATA                                           TYPINP  61
          IAVPTR = IDP + LVAL                                                   TYPINP  62
          CALL SCAN0(IA(1),KONTXT(1,IKW),1,JK,IA(IAVPTR+1),IA(IDP+1),           EXPR2  144
     1               NFND)                                                      EXPR2  145
          IF (NOVAL(IA(IAVPTR+1)).EQ.0 .OR. NFND.EQ.0) THEN                     TYPINP  64
              IERRFL = 1                                                        TYPINP  65
              GOTO 2000                                                         DFTEX3 475
          END IF                                                                TYPINP  67
          ITYPE = IA(IAVPTR+1)                                                  TYPINP  68
          IA(IAVPTR+LVAL+1) = ITYPE                                             TYPINP  70
C              CHECK FOR LIKE.  IF LIKED, CHECK THAT TYPES AGREE.               TYPINP  71
          IF (LKRF.GT.0) THEN                                                   FIX11  426
              LKDAT=IREFTB(2,LKRF)+2*IOPCDT(16,JOPCDT)+IOPCDT(17,JOPCDT)        FIX11  427
              ITYPEL = IA(LKDAT+1)                                              TYPINP  74
              IF (NOVAL(ITYPEL).NE.0 .AND. ITYPE.NE.ITYPEL) THEN                TYPINP  75
                  CALL MSG(107)                                                 FIX11  428
                  IERRFL = 1                                                    TYPINP  78
              END IF                                                            TYPINP  79
          END IF                                                                TYPINP  80
      END IF                                                                    TYPINP  81
C              CHECK IF THIS U-NAME HAS BEEN PREVIOUSLY REFERENCED.             TYPINP  82
C              IF IT HAS, CHECK THAT THE TYPE AGREES WITH THE REFERENCE         TYPINP  83
C              SUBTYPE.  IF IT HASN'T, STORE THE TYPE IN THE SYMBOL             TYPINP  84
C              TABLE FOR ERROR CHECKING WHEN THE COMMAND IS REFERENCED.         TYPINP  85
 1000 JSYM = IREFTB(1,JREF)                                                     TYPINP  86
      IF (JSYM.LE.0) RETURN                                                     TYPINP  87
      JSSUB = ISYMTB(14,JSYM)                                                   TYPINP  88
      IF (ITYPE.GT.0 .AND. JSSUB.GT.0 .AND.                                     SUBTY4   7
     1    KOMPR3(ITYPE,JSSUB,1024).EQ.0) THEN                                   SUBTY4   8
          CALL SUBTYPERR(ISYMTB(1,JSYM),JSSUB)                                  SUBTY4   9
      END IF                                                                    TYPINP  91
      ISYMTB(14,JSYM) = ITYPE                                                   TYPINP  93
      JTYPcur = ISYMTB(12,ITYPE)                                                DFTEX4 243
      RETURN                                                                    TYPINP  96
C              If not TYPE used Reference TYPE or fetch first legal type        DFTEX3 476
 2000 ITYPE = 0                                                                 DFTEX3 477
      JSYM  = IREFTB(1,JREF)                                                    DFTEX3 478
      IF (JSYM.GT.0) THEN                                                       DFTEX3 479
C              Object was previously referenced with TYPE/sbuTYPE, use that     DFTEX3 480
        JSSUB = ISYMTB(14,JSYM)                                                 DFTEX3 481
        CALL UNPAK3(JSSUB,1024,ITYPE,IT2,IT3)                                   DFTEX3 482
C               If user erferenced with single type keyword make it             DFTEX4 244
C               a user input value, else make it a default (for error)          DFTEX4 245
        IF(IT2.eq.0 .AND. IT3.eq.0) THEN                                        DFTEX4 246
          IDTYPE = 5                                                            DFTEX4 247
        ELSE                                                                    DFTEX4 248
          IDTYPE = 1                                                            DFTEX4 249
        ENDIF                                                                   DFTEX4 250
      ENDIF                                                                     DFTEX3 483
      IF(ITYPE .EQ. 0)  THEN                                                    DFTEX3 484
C              Find first legal TYPE in symbol table                            DFTEX3 485
        IS = KONTXT(10,IKW)                                                     DFTEX3 486
        DO I=1,NSYMTB                                                           DFTEX3 487
          IF(ISYMTB(9,I) .eq. IS)  GOTO 2050                                    DFTEX3 488
        ENDDO                                                                   DFTEX3 489
        I     = 1                                                               DFTEX3 490
 2050   ITYPE = I                                                               DFTEX3 491
        IDTYPE = 1                                                              DFTEX4 251
      END IF                                                                    DFTEX3 492
      ISYMTB(14,JSYM) = ITYPE                                                   DFTEX3 493
      IA(IDP+1)  = IPACKB(1,5,IDTYPE,IA(IDP+1))                                 DFTEX4 252
      IA(IDP+LVAL+1)  = ITYPE                                                   DFTEX3 494
      IA(IDP+LVAL+LVAL+1) = ITYPE                                               DFTEX3 495
      JTYPcur = ISYMTB(12,ITYPE)                                                DFTEX4 253
      RETURN                                                                    DFTEX3 496
      END                                                                       TYPINP  97
      FUNCTION TYPLS (X)                                                        TYPLS    2
C                                                                               TYPLS    3
C              TYPLS IS USED TO MOVE AN INTEGER TO A REAL VARIABLE              TYPLS    4
C              WITHOUT TYPE CONVERSION                                          TYPLS    5
C                                                                               TYPLS    6
      TYPLS  = X                                                                TYPLS    7
      RETURN                                                                    TYPLS    8
      END                                                                       TYPLS    9
      SUBROUTINE WRITEN(NFILE,ARRAY,NUMBER)                                     WRITEN   2
C                                                                               WRITEN   3
C              THIS ROUTINE SIMPLY WRITES A BINARY RECORD                       WRITEN   4
C                                                                               WRITEN   5
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION ARRAY(NUMBER)                                                   WRITEN   7
C              LOOK FOR UNDEFINED QUANTITIES AND ZERO THEM                      WRITEN   8
      DO 10 I=1,NUMBER                                                          WRITEN   9
      DO 10 J=1,3                                                               WRITEN  10
      IF (ITYPLS(ARRAY(I)) .EQ. ITYPLS(UNDEF(J)))  ARRAY(I) = 0.                WRITEN  11
   10 CONTINUE                                                                  WRITEN  12
      WRITE (NFILE) ARRAY                                                       WRITEN  13
      RETURN                                                                    WRITEN  14
      END                                                                       WRITEN  15
      SUBROUTINE SETFLS (I)                                                     SETFLS   2
      RETURN                                                                    SETFLS   3
      END                                                                       SETFLS   4
      SUBROUTINE READN(NFILE,ARRAY,NUMBER)                                      READN    2
C                                                                               READN    3
C              THIS ROUTINE READS A BINARY RECORD                               READN    4
C                                                                               READN    5
      DIMENSION ARRAY(NUMBER)                                                   READN    6
      READ (NFILE)  ARRAY                                                       READN    7
      RETURN                                                                    READN    8
      END                                                                       READN    9
#ifdef _DLL                                                                  /* -048   185 */ 
      SUBROUTINE LDL(ICALL)                                                     -048   186
#else                                                                        /* -048   187 */ 
      SUBROUTINE LDL                                                            -048   188
#endif                                                                       /* -048   189 */ 
C                                                                               LDL      3
C              LOADS DEFINITION LANGUAGE PRIMARY OVERLAY                        LDL      4
C                                                                               LDL      5
C                                                                               LDL      6
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               LDL      8
C                                                                               LDL      9
      COMMON /BLDLC/ SITPAR(77),BLDPAR(26)                                      -044e5   1
      COMMON  /BOX/    BOX(7,6),BOXDEF(7,6)                                     ALPHA   48
      COMMON  /BSVALX/ IBSGEO                                                   /BSVALX/ 2
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON  /CNVALX/ KWLAY,KWUV,KWWALP,KWRO,ILAYP,IUVP,IWALPP,IROP            SUBTY8   1
      COMMON/COUNT/ NOTH,NITH,NSURF,NINSRF                                      OPLST1 259
      COMMON  /CPNTRL/ ISPC, ISPCU, IEWC, IEWCU, IWIC, IWICU,                   /CPNTRL/ 2
     1                 IIWC, IIWCU, IUGC, IUGCU                                 /CPNTRL/ 3
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /DDAY/   DDAY(34), NDESDY                                         DDAY1   54
      COMMON /DRVALX/ IDRGEO,IDRSAP,IDRCNP,IDRSDP,IDRFRH,IDRFRW,IDRMUP          /DRVALX/ 2
      COMMON  /EWVALX/ IEWLCP, IEWGEO, IEWCNP, IEWSDP, IEWSAP, IEWTLP,          /EWVALX/ 2
     1                  IEWSFP,IEWCRP,IEWVRP                                    /EWVALX/ 3
      COMMON  /GEOD/   IGEOP, IAXGES                                            /GEOD/   2
      COMMON /GTVALX/ IGTCP,ISHCP,ICONP,IVTP,IGPCALC,IVTSWP,ISC1P,              -44d5    1
     1                ISC2P,ISS1P,ISS2P,IFTC,ISTC,IFABS,                        /GTVALX/ 3
     2                KWGTC,KWSHC,KWVT,KWSHSW,KWVTSW,KWSC1,KWSC2,               SUBTY8   3
     3                KWSS1,KWSS2,KWFTC,KWSTC,KWFABS,                           WLIB1    2
     4                IUCENTR,IHCOUT,IHROUT,IHIN,ITRANG,IABSANG,ITVANG,         WLIB1    3
     5                INLAYER,IRBVIS,IRBHEMI,ISHDCOF,IGPTHCK,IW3TIR,            WLIB1    4
     6                IEMBIR,IEMFIR,IGPCOND,IGPDCON,IGPVIS,IGPDVIS,             WLIB1    5
     7                IGPDENS,IGPDDEN,IGPPR,IGPDPR,ICOND                        WLIB1    6
      COMMON /HOLALT/ NHOLA(2),IHOLTY(2),IHOLDY(60,2),IHOLMN(60,2)              HOLID1   4
      COMMON /ISPLST/ ISPLST(9999),ISPLOC(9999)                                 -048a    8
      COMMON  /IWVALX/ IIWCNP, IIWGEO, IIWSAP, IIWARP, IIWTLP, IIWSFP,          /IWVALX/ 2
     1                  IIWLCP,IIWCRP,KWIWAR,IIWVRP                             /IWVALX/ 3
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LAYRD/  NLAYRS, ALAYRD(5,10), AFRI, AFRO                         /LAYRD/  2
      COMMON  /LBLOCK/ LSFBLK(20),N(20)                                         BLIND    2
      EQUIVALENCE (LWPARB,LSFBLK(4)),(LCB1,LSFBLK(5)),                          /LBLOCK/ 3
     1            (LCB2,LSFBLK(6)),(LCONSB,LSFBLK(6)),                          /LBLOCK/ 4
     2            (LGEOB,LSFBLK(9))                                             BLIND    3
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON  /LIBFLG/ MATFLG, LAYFLG, LSTFLG                                   /LIBFLG/ 2
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON  /LYVALX/ IIFRP, IMATST, ITHST, INRFP,                             /LYVALX/ 2
     1                 IUP, ICOMRP, NLAY                                        /LYVALX/ 3
      COMMON  /MATP/   NMAT, IMATB, LMATB                                       /MATP/   2
C                                                                               SUBTY8   4
      COMMON  /MESSG/  IU(2),INU(2),IM1(4),IM2(4),IM3(4),IHW(4),IDW(4)          DFTEX3 499
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /RED/   MRF, U, NRF, COMR, SRFX, SRFY, SRFZ, RFX(105),            /RED/    2
     1                RFY(105), RFZ(105)                                        /RED/    3
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
      COMMON  /SPVALX/ IHP, IAP, IVP, ISHPP, IWP, IDPTHP, ISCP, IPRCAP,         /SPVALX/ 2
     1                 IWFP, ILTP, IINFMP, INZHP, IPLP, IPSP, ILKWP,            /SPVALX/ 3
     2                 ITKWP, IEKWP, IPAP, ILWSFP, ITWSFP, IPOLSP,              GEO4     1
     3                 IEQWFP, KWH, KWA, KWV, KWSHP, KWW, KWDPTH,               /SPVALX/ 5
     4                 KWSC, KWLT, KWINFM, KWNZH, KWPL, KWPS,                   /SPVALX/ 6
     5                 KWLKW, KWTKW, KWEKW, KWPA, KWLWSF, KWTWSF,               /SPVALX/ 7
     6                 KWEWSF, IFURTP, IFURFP, IFURWP, IFLRWP, KWWF,            /SPVALX/ 8
     7                 KWFLRW,ILTSP,NINFKY,INFKYP(20),DEFINF(10,4),             LTSYS1   2
     8                 ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM,             DFTEXP 197
     9                 ISPLOCP,ISPDIS,NSPDIS                                    DFTEXP 198
      COMMON  /UGVALX/ IUGCNP, IUGGEO, IUGSAP, IUGARP, IUGTLP, IUGSFP,          /UGVALX/ 2
     1                  IUGLCP,IUGCRP,KWUGAR,IUGVRP                             /UGVALX/ 3
      COMMON /WIVALX/ IWIGEO,IGTP,IWSDP,IWICRP,IWIMUP,IWIFRH,IWIFRW,            /WIVALX/ 2
     .                IGTPSW                                                    /WIVALX/ 3
C                                                                               LDL     42
C                                                                               LDL     43
#ifdef _DLL                                                                  /* -048   190 */ 
      CALL LDL1 (ICALL)                                                         -048   191
#else                                                                        /* -048   192 */ 
       CALL LDL1                                                                LDL     46
#endif                                                                       /* -048   193 */ 
C              RETURN TO CONTROL (0,0) OVERLAY                                  LDL     50
      RETURN                                                                    LDL     51
      END                                                                       LDL     52
      BLOCK DATA  DATLDL                                                        DATLDL   2
      COMMON  /BOX/    BOX(7,6),BOXDEF(7,6)                                     ALPHA   48
      COMMON  /BSVALX/ IBSGEO                                                   /BSVALX/ 2
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON  /CNVALX/ KWLAY,KWUV,KWWALP,KWRO,ILAYP,IUVP,IWALPP,IROP            SUBTY8   1
      COMMON  /CPNTRL/ ISPC, ISPCU, IEWC, IEWCU, IWIC, IWICU,                   /CPNTRL/ 2
     1                 IIWC, IIWCU, IUGC, IUGCU                                 /CPNTRL/ 3
      COMMON /DRVALX/ IDRGEO,IDRSAP,IDRCNP,IDRSDP,IDRFRH,IDRFRW,IDRMUP          /DRVALX/ 2
      COMMON  /EWVALX/ IEWLCP, IEWGEO, IEWCNP, IEWSDP, IEWSAP, IEWTLP,          /EWVALX/ 2
     1                  IEWSFP,IEWCRP,IEWVRP                                    /EWVALX/ 3
      COMMON/GLASSP/GCOND,GCODE(6)                                              /GLASSP/ 2
      COMMON /GTVALX/ IGTCP,ISHCP,ICONP,IVTP,IGPCALC,IVTSWP,ISC1P,              -44d5    1
     1                ISC2P,ISS1P,ISS2P,IFTC,ISTC,IFABS,                        /GTVALX/ 3
     2                KWGTC,KWSHC,KWVT,KWSHSW,KWVTSW,KWSC1,KWSC2,               SUBTY8   3
     3                KWSS1,KWSS2,KWFTC,KWSTC,KWFABS,                           WLIB1    2
     4                IUCENTR,IHCOUT,IHROUT,IHIN,ITRANG,IABSANG,ITVANG,         WLIB1    3
     5                INLAYER,IRBVIS,IRBHEMI,ISHDCOF,IGPTHCK,IW3TIR,            WLIB1    4
     6                IEMBIR,IEMFIR,IGPCOND,IGPDCON,IGPVIS,IGPDVIS,             WLIB1    5
     7                IGPDENS,IGPDDEN,IGPPR,IGPDPR,ICOND                        WLIB1    6
      COMMON  /IWVALX/ IIWCNP, IIWGEO, IIWSAP, IIWARP, IIWTLP, IIWSFP,          /IWVALX/ 2
     1                  IIWLCP,IIWCRP,KWIWAR,IIWVRP                             /IWVALX/ 3
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LBLOCK/ LSFBLK(20),N(20)                                         BLIND    2
      EQUIVALENCE (LWPARB,LSFBLK(4)),(LCB1,LSFBLK(5)),                          /LBLOCK/ 3
     1            (LCB2,LSFBLK(6)),(LCONSB,LSFBLK(6)),                          /LBLOCK/ 4
     2            (LGEOB,LSFBLK(9))                                             BLIND    3
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON  /LYVALX/ IIFRP, IMATST, ITHST, INRFP,                             /LYVALX/ 2
     1                 IUP, ICOMRP, NLAY                                        /LYVALX/ 3
C                                                                               SUBTY8   4
      COMMON  /MESSG/  IU(2),INU(2),IM1(4),IM2(4),IM3(4),IHW(4),IDW(4)          DFTEX3 499
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
      COMMON  /SPVALX/ IHP, IAP, IVP, ISHPP, IWP, IDPTHP, ISCP, IPRCAP,         /SPVALX/ 2
     1                 IWFP, ILTP, IINFMP, INZHP, IPLP, IPSP, ILKWP,            /SPVALX/ 3
     2                 ITKWP, IEKWP, IPAP, ILWSFP, ITWSFP, IPOLSP,              GEO4     1
     3                 IEQWFP, KWH, KWA, KWV, KWSHP, KWW, KWDPTH,               /SPVALX/ 5
     4                 KWSC, KWLT, KWINFM, KWNZH, KWPL, KWPS,                   /SPVALX/ 6
     5                 KWLKW, KWTKW, KWEKW, KWPA, KWLWSF, KWTWSF,               /SPVALX/ 7
     6                 KWEWSF, IFURTP, IFURFP, IFURWP, IFLRWP, KWWF,            /SPVALX/ 8
     7                 KWFLRW,ILTSP,NINFKY,INFKYP(20),DEFINF(10,4),             LTSYS1   2
     8                 ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM,             DFTEXP 197
     9                 ISPLOCP,ISPDIS,NSPDIS                                    DFTEXP 198
      COMMON  /UGVALX/ IUGCNP, IUGGEO, IUGSAP, IUGARP, IUGTLP, IUGSFP,          /UGVALX/ 2
     1                  IUGLCP,IUGCRP,KWUGAR,IUGVRP                             /UGVALX/ 3
      COMMON /WIVALX/ IWIGEO,IGTP,IWSDP,IWICRP,IWIMUP,IWIFRH,IWIFRW,            /WIVALX/ 2
     .                IGTPSW                                                    /WIVALX/ 3
      COMMON /FLVALX/ IFLGEO,IFLSP,IFLPOL,IFLSHP,IFLH,IFLA,IFLV,                DFTEX3 497
     1                IFLWP,IFLDP,IFLSH                                         DFTEX3 498
      COMMON /LMVALX/                                                           /LMVALX/ 2
     1  ILUMTYP,ILMPTYP,ILMPNO,IBALTYP,ILTGCU,IRADFR,ILUMOUT,IPOWIN,            /LMVALX/ 3
     2  IRCR0,IRCR5,IRCR10,IMAXLMP,ICONFIG,IACCAT,IACCONF,                      /LMVALX/ 4
     3  ILMPCAT,ILMPLUM,ILMPPOW,ILMPDPR,ACF(9,6),PCF(9,6)                       /LMVALX/ 5
C              /BOX/                                                            LTSYS1   5
      DATA BOX/ 5*0., 180., 7*0., 180., 5*0., 270., 90.,                        DATLDL  24
     1          5*0., 90., 90., 5*0., 180., 90., 6*0., 90./                     DATLDL  25
C               Defaults for surface geometry depending on LOCATION/TYPE        FIX10   14
C               1 is TOP/CEILING                                                FIX10   15
C               2 is BOTTOM/FLOOR                                               FIX10   16
C               3 is LEFT                                                       FIX10   17
C               4 is RIGHT                                                      FIX10   18
C               5 is WALL/FRONT                                                 FIX10   19
C               6 is BACK                                                       FIX10   20
C       ITEMs are  X   Y   Z   H   W   AZ  TILT                                 FIX10   21
      DATA BOXDEF/                                                              FIX10   22
     1             0., 0., 0., 0., 0.,180.,  0.,                                FIX10   23
     2             0., 0., 0., 0., 0.,  0.,180.,                                FIX10   24
     3             0., 0., 0., 0., 0.,270., 90.,                                FIX10   25
     4             0., 0., 0., 0., 0., 90., 90.,                                FIX10   26
     5             0., 0., 0., 0., 0.,180., 90.,                                FIX10   27
     6             0., 0., 0., 0., 0.,  0., 90./                                FIX10   28
C              /JOPX/                                                           DATLDL  26
      DATA JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW, JOPUGW, IOPUGW,         DATLDL  27
     1     JOPSC, JOPMAT, JOPIW, JOPGT, JOPSH, JOPDS, JOPSCH, JOPSPR,           ALPHA   53
     2     JOPDD, JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                     DATLDL  29
     3     JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,JOPTIT,JOPGTC,          LTSYS1   6
     3     JOPLTGS,JOPLUMT,JOPLMPT,JOPWIL,JOPHOL,JOPPD                          -048b    4
     4     / 8, 12, 6, 19, 10, 12, 14, 16, 9, 20, 13, 7, 5, 3, 1, 4,            LIB1    23
     5       17,18,22,21,33,34,35,36,37,41,42,24,38,40,23,47,                   LTSYS1   8
     6       84,83,85,92,39,29 /                                                -048b    5
C              /SPVALX/                                                         DATLDL  33
      DATA IHP,   IAP,   IVP,   ISHPP, IWP,   IDPTHP,ISCP,  IPRCAP,             LTSYS1  10
     1     IWFP,  ILTP,  IINFMP,INZHP, IPLP,  IPSP,  ILKWP, ITKWP,              LTSYS1  11
     2     IEKWP, IPAP,  ILWSFP,ITWSFP,IEQWFP,                                  NEWEXP  22
     4            KWLKW, KWTKW, KWEKW,        KWLWSF,KWTWSF,KWEWSF,             NEWEXP  23
     5     IFURTP,IFURFP,IFURWP,IFLRWP,KWWF,  KWFLRW,ILTSP, IPOLSP              LTSYS1  15
     6     / 5,   6,     7,     10,    11,    12,    13,    16,                 LTSYS1  16
     7       17,  45,    52,    55,    56,    57,    58,    68,                 LTSYS1  17
     8       69,  87,    91,    96,    97,                                      NEWEXP  24
     9            37,    43,    44,           55,    56,    57,                 NEWEXP  25
     9       15,  16,    102,   14,    16,    13,    63,    186  /              LTSYS1  21
C              /SPVALX/, LUMINAIRE                                              LTSYS1  22
      DATA ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM                          DFTEXP 199
     1     /187,   192,   197,    202,  203,   208/                             LTSYS1  24
C              SPACE:LOCATION, *DISP-LIGHT-KW, and # DISP-*                     -046     1
      DATA ISPLOCP,ISPDIS,NSPDIS                                                COMPLY  34
     $     /311,   553,   6/                                                    -047hT   1
C              /EWVALX/                                                         DATLDL  44
      DATA IEWLCP, IEWGEO, IEWCNP, IEWSDP, IEWSAP, IEWTLP, IEWSFP,              DATLDL  45
     1     IEWCRP,IEWVRP                                                        DATLDL  46
     2     /20,12,1,10,8,19,9,6,12/                                             DATLDL  47
C              /LMVALX/, LIGHTING-SYSTEM                                        LTSYS1  25
      DATA ILUMTYP,ILMPTYP,IBALTYP,ILTGCU,IRADFR,ILUMOUT,IPOWIN                 LTSYS1  26
     1     /19,20,22,23,24,25,26/                                               LTSYS1  27
      DATA ICONFIG /27/                                                         LTSYS1  28
C              /LMVALX/, LUMINAIRE-TYPE                                         LTSYS1  29
      DATA IRCR0,IRCR5,IRCR10,IMAXLMP,IACCAT,IACCONF,ILMPNO                     LTSYS1  30
     1     /19,28,37,46,48,49,46/                                               LTSYS1  31
C              /LMVALX/, LAMP-TYPE                                              LTSYS1  32
      DATA ILMPCAT,ILMPLUM,ILMPPOW,ILMPDPR                                      LTSYS1  33
     1     /19,20,21,22/                                                        LTSYS1  34
C                                                                               LTSYS1  35
C              /LMVALX/, APPLICATION CORRECTION FACTOR BY BALLAST TYPE          LTSYS1  36
C              1=MAGN-PRE-1990    2=MAGN-ENERGY-EFF  3=MAGN-HTR-CUT-RED,        LTSYS1  37
C              4=MAGN-HTR-CUT-FUL 5=ELEC-RAP-START   6=ELEC-RAP-ST-RED,         LTSYS1  38
C              7=ELEC-INS-START   8=CF-STANDARD      9=CF-ELECTRONIC            LTSYS1  39
C              DERIVED FROM ADVANCED LIGHTING GUIDELINES: 1993,                 LTSYS1  40
C              P. 3.14-19                                                       LTSYS1  41
C                                                                               LTSYS1  42
      DATA ACF                                                                  LTSYS1  43
C              RECESS-STATIC                                                    LTSYS1  44
     1     / .88, .89, .79, .88, .85, .70, .91, .88, .87,                       LTSYS1  45
C              RECESS-VENTED                                                    LTSYS1  46
     2      1.03,1.01, .90,1.05, .95, .78,1.02, .89, .89,                       LTSYS1  47
C              SURFACE-CLOSED                                                   LTSYS1  48
     3       .92, .93, .82, .92, .88, .72, .94, .88, .88,                       LTSYS1  49
C              SURFACE-OPEN                                                     LTSYS1  50
     4       .92, .93, .82, .92, .88, .72, .94, .88, .88,                       LTSYS1  51
C              SUSPEND-CLOSED                                                   LTSYS1  52
     5       .92, .93, .82, .92, .88, .72, .94, .90, .90,                       LTSYS1  53
C              SUSPEND-OPEN                                                     LTSYS1  54
     6       .92, .93, .82, .92, .88, .72, .94, .90, .90 /                      LTSYS1  55
                                                                                LTSYS1  56
C              /LMVALX/, POWER CORRECTION FACTOR BY BALLAST TYPE                LTSYS1  57
                                                                                LTSYS1  58
      DATA PCF                                                                  LTSYS1  59
C              RECESS-STATIC                                                    LTSYS1  60
     1     /1.13,1.02, .80, .92, .87, .72, .89,1.23, .93,                       LTSYS1  61
C              RECESS-VENTED                                                    LTSYS1  62
     2      1.21,1.04, .85, .98, .94, .76, .96,1.26, .97,                       LTSYS1  63
C              SURFACE-CLOSED                                                   LTSYS1  64
     3      1.14, .97, .81, .93, .87, .71, .90,1.23, .92,                       LTSYS1  65
C              SURFACE-OPEN                                                     LTSYS1  66
     4      1.20,1.02, .85, .98, .93, .77, .97,1.26, .97,                       LTSYS1  67
C              SUSPEND-CLOSED                                                   LTSYS1  68
     5      1.14,1.03, .81, .93, .88, .73, .91,1.27,1.04,                       LTSYS1  69
C              SUSPEND-OPEN                                                     LTSYS1  70
     6      1.22,1.09, .86, .99, .93, .77, .98,1.27,1.04 /                      LTSYS1  71
C              /WIVALX/                                                         DATLDL  48
      DATA IWIGEO,IGTP,IWSDP,IWIFRH,IWIFRW,IWIMUP,IGTPSW                        DATLDL  49
     .                 /11,1,4,8,9,10,28/                                       DATLDL  50
C              /BSVALX/                                                         DATLDL  51
      DATA DTOR,PIOVR2,PIOVR4 /.0174532925,1.570796327,.785398164/              GEO1     9
      DATA IBSGEO /5/                                                           GEO1    10
C              /CNVALX/                                                         DATLDL  53
      DATA KWLAY,KWUV,KWWALP,KWRO / 6,5,4,3 /                                   SUBTY8   5
C              /GTVALX/                                                         DATLDL  55
      DATA IGTCP,ISHCP,ICONP,IVTP,IGPCALC,IVTSWP,ISC1P,                         -44d5    3
     1     ISC2P,ISS1P,ISS2P,IFTC,ISTC,  IFABS,                                 DATLDL  57
     2     KWGTC,KWSHC,KWVT,KWSHSW,KWVTSW,KWSC1,KWSC2,                          SUBTY8   7
     2     KWSS1,KWSS2,KWFTC,KWSTC,KWFABS                                       DATLDL  59
     3    /  2,    3,    4,    5,    7,     8,    9,                            SUBTY8   8
     4      10,   12,   13,   15,   16,    17,                                  DATLDL  61
     4       1,    2,    4,    6,    7,     8,    9,                            SUBTY8   9
     5      11,   12,   14,   15,   16         /                                DATLDL  63
      DATA IUCENTR,IHCOUT, IHROUT, IHIN,   ITRANG, IABSANG,ITVANG,              WLIB1   10
     1     INLAYER,IRBVIS, IRBHEMI,ISHDCOF,IGPTHCK,IW3TIR,                      WLIB1   11
     2     IEMBIR, IEMFIR, IGPCOND,IGPDCON,IGPVIS, IGPDVIS,                     WLIB1   12
     3     IGPDENS,IGPDDEN,IGPPR,  IGPDPR, ICOND                                WLIB1   13
     5    /  162, 159, 160, 161,  54,  76, 65,                                  WLIB1   14
     6        17, 132, 131, 133,  18, 134,                                      WLIB1   15
     7       144, 139,  22,  26,  30,  34,                                      WLIB1   16
     8        38,  42,  46,  50, 154           /                                WLIB1   17
C              /LYVALX/                                                         DATLDL  64
      DATA IIFRP, IMATST, ITHST, INRFP, IUP, ICOMRP                             DATLDL  65
     1     / 1, 1, 11, 2, 1, 3 /                                                DATLDL  66
C              /MAVALX/                                                         DATLDL  67
C              /UGVALX/                                                         DATLDL  69
      DATA IUGCNP, IUGGEO, IUGSAP, IUGARP, IUGTLP, IUGSFP ,IUGLCP,              DATLDL  70
     1     IUGCRP,KWUGAR,IUGVRP                                                 DATLDL  71
     2     /2,8,5,1,15,6,16,3,0,18/                                             DATLDL  72
C              /IWVALX/                                                         DATLDL  73
      DATA IIWCNP, IIWGEO, IIWSAP, IIWARP, IIWTLP, IIWSFP ,IIWLCP,              DATLDL  74
     1     IIWCRP, KWIWAR, IIWVRP /                                             DATLDL  75
     2     3,13,8,2,20,10,21,4,1,23/                                            DATLDL  76
C              /DRVALX/                                                         DATLDL  77
      DATA IDRGEO,IDRSAP,IDRCNP,IDRSDP,IDRMUP,IDRFRH,IDRFRW                     DATLDL  78
     1     / 9, 7, 1, 2, 8, 9, 10 /                                             DATLDL  79
C              /FLVALX/                                                         DFTEXP 203
      DATA IFLGEO,IFLSP,IFLPOL,IFLSHP,IFLH,IFLA,IFLV,IFLWP,IFLDP,IFLSH          DFTEX3 500
     1     / 1,   6,    7,     8,     9,   10,  11,  12,   13,   14/            DFTEX3 501
C                                                                               DATLDL  80
C                                                                               DATLDL  81
      DATA IZERO, IONE / 0, 1 /                                                 DATLDL  82
      DATA IBLANK /4H    ,4H    ,4H    ,4H    ,4H    ,4H    ,4H    ,            CWF1     4
     1             4H    /                                                      CWF1     5
C                                                                               DATLDL  84
      DATA LCONSF,LGT,LSHADE,LEW,LSPACE,LRBF,LHRF,LWF,LMTB,LFL,LWINLAY          HR     139
     $    / 14,<+mr;Len>,<+mh;Len>,<+mx;Len>,<+mz;Len>,                         -44d5    4
     &      <+rb;Len>,<+hr;Len>,35,7,17,57/                                     PV2      3
      DATA LIW,LUG,LWNDW,LDOOR                                                  BDL1     3
     1    / 67, 48, <+wi;Len>, <+md;Len> /                                      PV2      4
C                                                                               DATLDL  89
      DATA IU, INU /4H INP, 4HUT  , 4HNOT , 4HUSED /                            DATLDL  91
      DATA IM1 /4HAREA,4H    ,4H    ,4H    /                                    DFTEX3 502
      DATA IM2 /4HPOLY,4HGON ,4H    ,4H    /                                    DFTEX3 503
      DATA IM3 /4HLOCA,4HTION,4H    ,4H    /                                    DFTEX3 504
      DATA IHW /4HHEIG,4HHT A,4HND W,4HIDTH/                                    DFTEX3 505
      DATA IDW /4HWIDT,4HH AN,4HD DE,4HPTH /                                    DFTEX3 506
      DATA GCOND,GCODE/1.47,1.,.3905,.207,1.,.202,.159                          DATLDL  92
     1/                                                                         DATLDL  93
      END                                                                       DATLDL  94
#ifdef _DLL                                                                  /* -048   194 */ 
      SUBROUTINE LDL1 (ICALL)                                                   -048   195
#else                                                                        /* -048   196 */ 
      SUBROUTINE LDL1                                                           LDL1     2
#endif                                                                       /* -048   197 */ 
C                                                                               LDL1     3
C               LOADS DEFINITION LANGUAGE  PROCESSOR OVERLAY                    LDL1     4
C                                                                               LDL1     5
C                                                                               LDL1     6
      USE, INTRINSIC :: ISO_C_BINDING                                           -048   198
      USE BDLSTRUCT                                                             -048   199
      USE MSGBOX                                                                -048   200
      USE ERR_MOD                                                               -048   201
      COMMON /DEFSTP/ ISCHTP                                                    /DEFSTP/ 2
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /BSVALX/ IBSGEO                                                   /BSVALX/ 2
      COMMON /CLOCK / CLOCK(10)                                                 /CLOCK/  2
      INTEGER ICLOCK8                                                           PC       1
      EQUIVALENCE (ICLOCK8,CLOCK(8))                                            PC       2
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON/COUNT/ NOTH,NITH,NSURF,NINSRF                                      OPLST1 259
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON /DRVALX/ IDRGEO,IDRSAP,IDRCNP,IDRSDP,IDRFRH,IDRFRW,IDRMUP          /DRVALX/ 2
      COMMON  /EWVALX/ IEWLCP, IEWGEO, IEWCNP, IEWSDP, IEWSAP, IEWTLP,          /EWVALX/ 2
     1                  IEWSFP,IEWCRP,IEWVRP                                    /EWVALX/ 3
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /IWVALX/ IIWCNP, IIWGEO, IIWSAP, IIWARP, IIWTLP, IIWSFP,          /IWVALX/ 2
     1                  IIWLCP,IIWCRP,KWIWAR,IIWVRP                             /IWVALX/ 3
      COMMON /ISVS  / ISSVPS(7),IZSVPS(3)                                       -045a    3
      COMMON /JOPS  / JSOP,JZOP,JSROP,JCFOP,ISSOPS(7),IZSOPS(3)                 -048b    6
      COMMON /RSCHED/ NDRS(200), NRS(100)                                       HVAC     2
      COMMON  /SYSFNS/ JOPSFN,ISYSFN(4,120),ISYSFNT(4,120)                      EXPR2    3
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      COMMON /KEYLEN/  NCONTX,ICONTX,IDFT,NDFT,IEXP,NEXP,LKEYAA,KEYFLG          /KEYLEN/ 2
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
      COMMON  /SPVALX/ IHP, IAP, IVP, ISHPP, IWP, IDPTHP, ISCP, IPRCAP,         /SPVALX/ 2
     1                 IWFP, ILTP, IINFMP, INZHP, IPLP, IPSP, ILKWP,            /SPVALX/ 3
     2                 ITKWP, IEKWP, IPAP, ILWSFP, ITWSFP, IPOLSP,              GEO4     1
     3                 IEQWFP, KWH, KWA, KWV, KWSHP, KWW, KWDPTH,               /SPVALX/ 5
     4                 KWSC, KWLT, KWINFM, KWNZH, KWPL, KWPS,                   /SPVALX/ 6
     5                 KWLKW, KWTKW, KWEKW, KWPA, KWLWSF, KWTWSF,               /SPVALX/ 7
     6                 KWEWSF, IFURTP, IFURFP, IFURWP, IFLRWP, KWWF,            /SPVALX/ 8
     7                 KWFLRW,ILTSP,NINFKY,INFKYP(20),DEFINF(10,4),             LTSYS1   2
     8                 ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM,             DFTEXP 197
     9                 ISPLOCP,ISPDIS,NSPDIS                                    DFTEXP 198
      COMMON  /UGVALX/ IUGCNP, IUGGEO, IUGSAP, IUGARP, IUGTLP, IUGSFP,          /UGVALX/ 2
     1                  IUGLCP,IUGCRP,KWUGAR,IUGVRP                             /UGVALX/ 3
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON /WIVALX/ IWIGEO,IGTP,IWSDP,IWICRP,IWIMUP,IWIFRH,IWIFRW,            /WIVALX/ 2
     .                IGTPSW                                                    /WIVALX/ 3
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON /IUNITS/ VKONV(300),DUMLOG(4),JUNITS(4,300,2),NUNITS,KUNITS        UNITS1   1
      INTEGER DUMLOG                                                            SUBTY1   1
      DIMENSION IUNITS(4,300)                                                   UNITS1   2
      EQUIVALENCE (IUNITS(1,1),JUNITS(1,1,1))                                   /IUNITS/ 4
      COMMON /IPARAM/ NPARAM, MPARAM, IPARAM(17,6000)                           -048t    1
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      COMMON /MOD_STRUCT/                                                       /MODSTR/ 2
     $ iNumMods,OrigData,iModData(35000)                                        -048y    1
      integer iNumMods,iOrigData,iModData                                       DFTEXP   9
      integer mod_struct_vars(35002)                                            -048y    2
      equivalence (mod_struct_vars(1),iNumMods),(OrigData,iOrigData)            DFTEXP  11
      COMMON /EXP_DLList/ expDLList(1000000)                                    -042c    6
      integer expDLList                                                         NEWEXP   2
      COMMON /DFT_STR/ numDFT,idftStr(3,1024)                                   -042L5b 19
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
C                                                                               LDL1    31
C                                                                               LDL1    32
      IwinReturn = 0                                                            -042L5b290
      JOPWLS = JOPEW                                                            ATTRF1   6
      ITMFLG = 1                                                                DEF2    43
      ISCHTP = 0                                                                SUBTY7 144
#ifdef _DLL                                                                  /* -048   202 */ 
      CALL LDLKEY                                                               -048   203
#else                                                                        /* -048   204 */ 
C                                                                               LDL1    34
C                                                                               LDL1    35
C              INITIALIZE ZERO LEVEL STUFF                                      LDL1    36
      CALL INIT0(IA,0)                                                          LDL1    37
C               READ LENGTH RECORD FROM KEYWORD FILE                            LDL1    38
      READ (KEYFIL) KUNITS,NSYMTB,MSYMTB,NCONTX,ICONTX,NOPCDT,                  LDL1    39
     1              IDFT, NDFT, IEXP, NEXP, LKEYAA                              DFTEX4 255
C               MAKE ROOM FOR LEN WORDS IN IA                                   LDL1    41
      CALL CKAA(IA,LKEYAA+1000)                                                 DFTEX4 256
C               READ IN SYMBOL, CONTEXT, COMMAND, AND DEFAULT TABLES            LDL1    43
      READ (KEYFIL) ((ISYMTB(I,J), I=1,16), J=1,NSYMTB),                        SYMSIZ 116
     1              ((KONTXT(I,J), I=1,16), J=ICONTX,NCONTX),                   KEYSIZ  59
     2              ((IOPCDT(I,J), I=1,24), J=1,NOPCDT)                         DFTEX4 257
      READ (KEYFIL) (IA(I),I=IDFT,NDFT)                                         DFTEX4 258
      IF(IEXP .NE. 0)  THEN                                                     DFTEX4 259
C               READ IN DEFAULT EXPRESSION RECORD (if there)                    DFTEX4 260
        READ (KEYFIL) (IA(I),I=IEXP,NEXP)                                       DFTEX4 261
      ELSE                                                                      DFTEX4 262
        READ (KEYFIL)                                                           DFTEX4 263
      ENDIF                                                                     DFTEX4 264
      IF (IEXP.NE.0 .AND. METIN.NE.KUNITS) CALL MSG(111)                        METR1   76
C                                                                               LDL1    51
C               SET IAX TO CURRENT LAST WORD USED                               LDL1    52
      IAX    = LKEYAA                                                           DFTEX4 265
      KEYFLG = 0                                                                DFTEX4 266
C               INITIALIZE LDL STUFF                                            LDL1    54
      CALL INITL                                                                LDL1    55
      CALL INITS                                                                COMB01   4
      CALL INITP                                                                COMB05   4
      CALL INITE                                                                COMB04   1
      call filln(0,args.NoScrnMsg, 331)                                         -042L5b291
      call filln(0,expDLList          ,1000000)                                 -042c    8
      call filln(0,exp_struct_vars,1424)                                        -042L5b292
      call filln(0,mod_struct_vars,35002)                                       -048y    3
      call filln(0,idftStr(1,1),1024)                                           -042L5b294
      args.nDOE2ver          = 0 ! 0=std version 1=refrigeration version        -042L5b296
      args.kUnit             = kunits                                           -042L5b297
      args.nUnits            = nunits                                           -042L5b298
      args.nCommands         = nopcdt                                           -042L5b299
      args.commandPtr        = LOC(IOPCDT)                                      -042L5b300
      args.nSymbolPtr        = LOC(NSYMTB)                                      -042L5b301
      args.unitConvPtr       = LOC(VKONV)                                       -042L5b302
      args.unitsBlockPtr     = LOC(JUNITS)                                      -042L5b303
      args.unitsTypePtr      = LOC(METIN)                                       -042L5b304
      args.undefPtr          = LOC(UNDEF)                                       -042L5b305
      args.libIndexPtr       = LOC(NUSLIB)                                      -042L5b306
      args.parametersPtr     = LOC(NPARAM)                                      -042L5b307
      args.AA_ArrayPtr       = LOC(AA)                                          -042L5b308
      args.IaxPtr            = LOC(IAX)                                         -042L5b309
      args.nvtlimPTR         = LOC(NVTLIM)                                      -042L5b310
      args.ivtlimPTR         = LOC(IVTLIM)                                      -042L5b311
      args.LibLnkPTR         = LOC(LIBLNK)                                      -042L5b312
      args.nLibLkPTR         = LOC(NLIBLK)                                      -042L5b313
      args.expStructPtr      = LOC(exp_struct_vars(1))                          -042L5b314
      args.errStructPtr      = LOC(pcallbackfuncERR)                            -042L5b315
      args.modStructPtr      = LOC(mod_struct_vars(1))                          -042L5b316
      args.dftStructPtr      = LOC(numDFT)                                      -042L5b317
      args.expDepLstListPtr  = LOC(expDLList)                                   -042L5b318
      loc_args               = LOC( args )                                      -042L5b319
      call initbdlstruct(c_loc(args))                                           -048   205
      call initmodstruct(c_loc(mod_struct_vars))                                -048   206
      IF(IPDFLG .eq. 0)  NumNewRef = 0                                          FIX14  185
      CALL RDDFTS                                                               DFTEX2  37
#endif                                                                       /* -048   207 */ 
      IOP    = 0                                                                DFTEX2  38
      IOLDFL = 0                                                                DFTEX2  39
      JOPcur = 0                                                                ERR-01 587
      JREFcur= 0                                                                ERR-01 588
      JKWcur = 0                                                                ERR-01 589
      JTYPcur = 1                                                               DFTEX4 268
      LIBflg = 0                                                                ERR-01 593
      ISDflg = 0                                                                ERR-01 594
C              FOR NOW, PROCESS OPTIONAL LIST KEYWORDS HERE                     OPLST1 264
  100 IF (IOP.GT.0) THEN                                                        OPLST1 265
          JKWcur = 0                                                            ERR-01 595
          IF (IOLDFL.EQ.0) CALL DEFFIL(JREF,JOPCDT,IOP,0)                       DFTEX3 507
          JKWcur = 0                                                            ERR-01 597
          CALL OPLSAV(JOPCDT,JREF,KONTXT,IREFTB,IA,ISYMTB,IA,1)                 FIX7    49
          ISDflg = 0                                                            DFTEXP 209
          CALL PRNTVL(JOPCDT,JREF)                                              FIX11  429
          IOLDFL = 0                                                            DEF2    46
      END IF                                                                    OPLST1 268
      JOPcur  = 0                                                               -042L5b321
      JSYMcur = 0                                                               -042L5b322
      JTYPcur = 1                                                               -042L5b323
      JREFcur= 0                                                                FIX14  186
      JKWcur = 0                                                                FIX14  187
      ISCHTP = 0                                                                SUBTY7 145
      IF(IwinReturn .ne. 0) GOTO 3000                                           -042L5b324
C               GET NEXT COMMAND                                                OPLST1 269
      CALL COMMND(IA,ISYMTB,IOP,LEVEL,JREF,JOPCDT)                              OPLST1 270
      JOPcur = JOPCDT                                                           ERR-01 599
      JREFcur= JREF                                                             ERR-01 600
      IF(JOPCDT .eq. 16)  THEN                                                  ERR-01 605
        ISDflg = 1                                                              ERR-01 606
      ELSE                                                                      ERR-01 607
        ISDflg = 0                                                              ERR-01 608
      ENDIF                                                                     ERR-01 609
C               IF IT WAS NOT RECOGNIZED, GET NEXT COMMAND                      LDL1    59
      IF (IOP .EQ. 0)  GO TO 100                                                LDL1    60
      IF( JREF .ne. 0) JSYMcur = IREFTB(1,JREF)                                 -042L5b325
      if((JOPCDT .ne. 0) .AND. ( args.pCallbackFunc .ne. 0))  then              -042L5b326
        Iret = performcallback4( args.pCallbackFunc,                            -042L5b327
     $                              2, KRDNUM, JOPcur, JSYMcur )                -042L5b328
        if( Iret .ne. 0 ) IwinReturn = 2                                        -042L5b329
      endif                                                                     -042L5b330
C               CHECK FOR PARAMETRIC RUN                                        LDL1    61
      IF ((NPRUN .EQ. 1) .OR. (INFIL .EQ. INCOPY))  GO TO 110                   LDL1    62
C               CHECK FOR LEGAL PARAMETRIC RUN INPUT                            LDL1    63
      IF ((IOP .EQ. 21) .OR. (IOP .EQ. 20) .OR. (IOP .EQ. 4)                    LDL1    64
     1 .OR. (IOP .EQ. 31) .OR. (IOP .EQ. 32) .OR. (IOP .EQ. 28))                LDL1    65
     2 GO TO 110                                                                LDL1    66
      CALL MSG(49)                                                              LDL1    67
      CALL SKPEOC                                                               LDL1    68
      GO TO 100                                                                 LDL1    69
  110 CONTINUE                                                                  LDL1    70
C               PROCESS APPROPRIATE COMMAND                                     LDL1    71
      GO TO (1001, 1002, 1003, 1006, 1005, 1006, 1006, 1011, 1011,              DEF3     7
     1       1010, 1011, 1012, 1012, 1014, 1012, 1012, 1012, 1018,              DEF2    48
     2       1006, 1020, 1021, 1006, 1011, 1011, 1011, 1011, 1027,              DEF2    49
     3       1028, 1029, 1030, 1031, 1032, 1033, 1011, 1012, 1012, 1037,        DEF2    50
     4       1006, 1011, 1011, 1006, 1006, 1011, 1011, 1011, 1006, 1006,        HOLID1   8
     $       1006, 1006, 1050, 1011, 1052, 1053, 1054, 1011, 1056, 1057,        LTSYS1  73
     $       1006,1059,1060),IOP                                                HVAC7   11
 1001 CALL SCEDYI(IA,IA,IA,JREF,JOPCDT)                                         ALPHA2 145
      IOLDFL = 1                                                                DEF2    52
      GO TO 100                                                                 LDL1    78
 1002 CALL SCEDWI(IA,IA,JREF,1)                                                 REFTB1  91
      IOLDFL = 1                                                                DEF2    53
      GO TO 100                                                                 LDL1    80
 1003 CALL SCEDDI(IA,IA,JREF,1)                                                 REFTB1  92
      IOLDFL = 1                                                                DEF2    54
      GO TO 100                                                                 LDL1    82
 1005 CALL RUNPDI(JREF,JOPCDT,AA(1),ISYMTB(1,1),KONTXT(1,1),IREFTB(1,1))        ALPHA2 146
      IOLDFL = 1                                                                DEF2    55
      GO TO 100                                                                 LDL1    86
 1006 CALL GENINP(JREF,JOPCDT,0)                                                DEF2    56
      GO TO 100                                                                 LDL1    88
 1010 CALL SETPRN(JREF,JOPCDT,JOPFL,0,IREFTB(1,1),ISYMTB(1,1))                  OPLST1 272
      CALL GENINP(JREF,JOPCDT,1)                                                DEF2    57
      CALL GENSUB(JREF,JOPCDT,ISCP,JOPSC)                                       DEF2    58
      GO TO 100                                                                 LDL1   105
 1011 CALL GENINP(JREF,JOPCDT,1)                                                DEF2    59
      GO TO 100                                                                 LDL1   107
 1012 CALL SETPRN(JREF,JOPCDT,JOPSP,0,IREFTB(1,1),ISYMTB(1,1))                  OPLST1 274
      CALL GENINP(JREF,JOPCDT,0)                                                DEF2    60
      IF (JOPCDT.NE.JOPUGW) JOPWLS = JOPCDT                                     DEF2    61
      GO TO 100                                                                 LDL1   118
 1014 CALL SETPRN(JREF,JOPCDT,JOPWLS,0,IREFTB(1,1),ISYMTB(1,1))                 OPLST1 276
      CALL GENINP(JREF,JOPCDT,0)                                                DEF2    62
      GO TO 100                                                                 LDL1   121
 1018 CALL DFTIN(ISYMTB,KONTXT,IA)                                              LDL1   129
      GO TO 100                                                                 LDL1   130
 1020 CALL ECHO                                                                 LDL1   133
      CALL GETCS                                                                LDL1   134
      IF (ITERM .NE. 0)  GO TO 1120                                             LDL1   135
      CALL MSG(22)                                                              LDL1   136
      GO TO 1020                                                                LDL1   137
c--------- mPAR( ) handles PARAMETRIC INPUT file change                         EXPR2  175
1120  if ( mPAR( NPRUN ) .eq. 1 )     goto  100                                 EXPR2  176
      goto  3000                                                                LDL1   140
 1021 CALL DEFINI                                                               LDL1   141
      GO TO 100                                                                 LDL1   142
c              reset schedule                                                   HVAC     7
 1027 NRS(IOPCDT(13,JOPCDT)) = 1                                                HVAC     8
      GO TO 1001                                                                HVAC     9
 1028 CALL LISTI                                                                LDL1   161
      LIBLST = 0                                                                LDL1   163
      GO TO 100                                                                 LDL1   164
 1029 CALL ABORTI                                                               LDL1   165
      GO TO 100                                                                 LDL1   166
 1030 CALL COSTI(IA,JREF,JOPCDT)                                                REFTB1 110
      GO TO 100                                                                 LDL1   168
 1031 CALL HELP(IA,ISYMTB,KONTXT)                                               LDL1   169
      GO TO 100                                                                 LDL1   170
 1032 CALL DEBUGI(IA)                                                           LDL1   171
      GO TO 100                                                                 LDL1   172
 1033 CALL SETPRN(JREF,JOPCDT,JOPEW,0,IREFTB(1,1),ISYMTB(1,1))                  OPLST1 282
      CALL GENINP(JREF,JOPCDT,0)                                                DEF2    63
      GO TO 100                                                                 LDL1   174
 1037 CALL EXPARI(JREF,JOPCDT)                                                  REFTB1 113
      GO TO 100                                                                 LDL1   178
c              unused                                                           HVAC    10
 1048 GOTO 100                                                                  HVAC    11
c              unused                                                           HVAC    12
 1049 GOTO 100                                                                  HVAC    13
c              SYSTEM command                                                   HVAC    14
 1050 IF(IOPCDT(13,79).eq.0) CALL MAKEMM                                        DFTEX4 270
      CALL GENINP(JREF,JOPCDT,1)                                                DFTEX4 271
      DO I=1,7                                                                  COMB02  47
        IF(ISSOPS(I).ne.0)CALL GENSUB(JREF,JOPCDT,ISSVPS(I),ISSOPS(I))          COMB02  48
      ENDDO                                                                     COMB02  49
      GO TO 100                                                                 HVAC    16
c              unused                                                           DFTEX4 272
 1051 GOTO 100                                                                  DFTEX4 273
c              ZONE command                                                     HVAC    20
 1052 IF(IOPCDT(13,79).eq.0) CALL MAKEMM                                        DFTEX4 274
      CALL SETPRN(JREF,JOPCDT,JSOP,0,IREFTB(1,1),ISYMTB(1,1))                   DFTEX4 275
      CALL GENINP(JREF,JOPCDT,1)                                                COMB02  50
      DO I=1,3                                                                  COMB02  51
        IF(IZSOPS(I).ne.0)CALL GENSUB(JREF,JOPCDT,IZSVPS(I),IZSOPS(I))          COMB02  52
      ENDDO                                                                     COMB02  53
      GO TO 100                                                                 HVAC    22
c              system and economics REPORT                                      HVAC    23
 1053 CALL GENINP(JREF,JOPCDT,0)                                                HVAC    24
      GO TO 100                                                                 HVAC    25
c              day-reset command                                                HVAC    26
 1054 CALL DRSIN(JREF)                                                          HVAC    27
      IOLDFL = 1                                                                COMB01   7
      GOTO 100                                                                  HVAC    28
c              subr-functions command                                           HVAC    32
 1056 ikw  = IOPCDT( 9,JOPCDT)                                                  HVAC    33
      nkw  = IOPCDT(10,JOPCDT)                                                  HVAC    34
      if ( JOPSFN .ne. JOPCDT )     then                                        HVAC    35
          write ( IOUTPT, '('' SDL --- JOPSFN ='',i3,'' bad value,'',           HVAC    36
     1            ''  should be='',i3)' )  JOPSFN, JOPCDT                       HVAC    37
          stop                                                                  HVAC    38
      endif                                                                     HVAC    39
      CALL INIDAT(0,IA,KONTXT(1,IKW),NKW,ISYSFN(1,1),ISYSFNT(1,1))              EXPR2  177
      CALL  SCAN1(0,IA,KONTXT(1,IKW),NKW,ISYSFN(1,1),ISYSFNT(1,1))              EXPR2  178
c------ default fill : lsdptr = 3 ,   no name printed : namptr = 0              HVAC    42
      lkdat  = IOPCDT(15,JOPCDT) - 1                                            HVAC    43
      LVAL   = IOPCDT(16,JOPCDT)                                                FIX7    50
       CALL  LSDFIL( 0, ISYMTB, KONTXT(1,IKW), NKW, ISYSFN(1,1)                 HVAC    44
     1             , AA(lkdat+1), 3, IOPCDT(1,JOPCDT), 0, LVAL )                FIX7    51
      IOPCDT(14,JOPCDT) = 1                                                     HVAC    46
        GOTO  100                                                               HVAC    47
c              primary plant equipment/economics w/ U-names                     HVAC7   12
 1057 IF(((JOPCDT.LT.75).or.(JOPCDT.EQ.82)) .AND.                               DFTEX4 276
     $   (IOPCDT(13,79).eq.0)) CALL MAKEMM                                      DFTEX4 277
      CALL GENINP(JREF,JOPCDT,1)                                                DFTEX4 278
      GOTO 100                                                                  HVAC7   14
c              primary plant equipment/economics w/o U-names                    HVAC7   15
 1060 CALL GENINP(JREF,JOPCDT,0)                                                HVAC7   16
      GOTO 100                                                                  HVAC7   17
 1059 CALL GENINP(JREF,JOPWIL,1)                                                BLIND   16
      GO TO 100                                                                 BLIND   17
 3000 CONTINUE                                                                  LDL1   193
C              In interactive mode line numer = 1M for std file write and       -042L5b331
C              2M for other modes but left as KRNNUM for input file reads       -042L5b332
      KRDNUMsav = KRDNUM                                                        -042L5b333
      IF(IPDFLG .ne. 0) KRDNUM = 1000000                                        -042L5b334
      CALL FILLN( IBLANK,IerrLineTxt(1),25)                                     -042L5b335
      CALL CHKPRN(IREFTB,ISYMTB)                                                HVAC11   8
C               CHECK FOR REFERENCED BUT UNDEFINED SYMBOLS                      HVAC11   9
      CALL SYMCK(ISYMTB,IERR)                                                   HVAC11  10
C              CHECK THAT SCHEDULE AND DAY-SCHEDULE TYPES MATCH                 HVAC11  11
      IF(IERR .EQ. 0)  CALL SCHTYP                                              HVAC11  12
C              WRITE OUT SF RECORDS                                             LDL1   197
#ifdef _DLL                                                                  /* -048   208 */ 
C              Only write StndFile Rec's if this is a project open              -048   209
      IF( ICALL .eq. 0)  THEN                                                   -048   210
        CALL OUTFIL                                                             -048   211
        WRITE(ISTNDF) 0, 0                                                      -048   212
        CALL OUTFIS                                                             -048   213
        CALL OUTFIP                                                             -048   214
        WRITE(ISTNDF) 0, 0                                                      -048   215
        CALL OUTFIE                                                             -048   216
      ENDIF                                                                     -048   217
#else                                                                        /* -048   218 */ 
      CALL OUTFIL                                                               LDL1   198
      WRITE(ISTNDF) 0, 0                                                        COMB05   5
      CALL OUTFIS                                                               COMB03  30
      CALL OUTFIP                                                               COMB03  31
      WRITE(ISTNDF) 0, 0                                                        COMB05   6
      CALL OUTFIE                                                               COMB03  32
#endif                                                                       /* -048   219 */ 
      KRDNUM = KRDNUMsav                                                        -042L5b336
      RETURN                                                                    -042L5b337
      END                                                                       LDL1   200
      SUBROUTINE ATTD(JREF,JOPCDT,IMULP,IGEOB,IFRMH,IFRMW,LKDAT,NAMPTR,         DFTEX3 508
     $                LSDPTR,LKPTR,Iphase)                                      DFTEX3 509
C                                                                               ATTI     3
C                  THIS ROUTINE PROCESSES THE WINDOW COMMAND AND                ATTI     4
C                  THE DOOR COMMAND.                                            ATTI     5
C                                                                               ATTI     9
C              IAPTR POINTS TO THE REFERENCE TABLE IN BLANK COMMON              ATTI    10
C                                                                               ATTI    11
C              JOPCDT IS THE COMMAND INDEX                                      ATTI    12
C                                                                               ATTI    13
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               ATTI    15
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON/COUNT/ NOTH,NITH,NSURF,NINSRF                                      OPLST1 259
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON /DRVALX/ IDRGEO,IDRSAP,IDRCNP,IDRSDP,IDRFRH,IDRFRW,IDRMUP          /DRVALX/ 2
      COMMON  /EWVALX/ IEWLCP, IEWGEO, IEWCNP, IEWSDP, IEWSAP, IEWTLP,          /EWVALX/ 2
     1                  IEWSFP,IEWCRP,IEWVRP                                    /EWVALX/ 3
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LBLOCK/ LSFBLK(20),N(20)                                         BLIND    2
      EQUIVALENCE (LWPARB,LSFBLK(4)),(LCB1,LSFBLK(5)),                          /LBLOCK/ 3
     1            (LCB2,LSFBLK(6)),(LCONSB,LSFBLK(6)),                          /LBLOCK/ 4
     2            (LGEOB,LSFBLK(9))                                             BLIND    3
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON /WIVALX/ IWIGEO,IGTP,IWSDP,IWICRP,IWIMUP,IWIFRH,IWIFRW,            /WIVALX/ 2
     .                IGTPSW                                                    /WIVALX/ 3
C                                                                               ATTI    32
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
C              ---                                                              ATTI    41
      DIMENSION  JOH(7), JLF(7), JRF(7)                                         ATTI    42
      DATA   JOH  /4HOVER,4HHANG,4H-W  ,4HAND ,4H OVE,4HRHAN,4HG-D /            ATTI    43
     1      ,JLF  /4HLEFT,4H-FIN,4H-H  ,4HAND ,4H LEF,4HT-FI,4HN-D /            ATTI    44
     2      ,JRF  /4HRIGH,4HT-FI,4HN-H ,4HAND ,4HRIGH,4HT-FI,4HN-D /            ATTI    45
C              ---                                                              ATTI    46
      dimension igtec(28)                                                       ATTI    47
C              electrochromic glass-type-codes in Window Library                ATTI    48
      data igtec/1800,1801,1802,1803,2800,2801,2802,2803,2804,2805,             ATTI    49
     1           2820,2821,2822,2823,2824,2825,2840,2841,2842,2843,             ATTI    50
     2           2844,2845,2860,2861,2862,2863,2864,2865/                       ATTI    51
C                                                                               ATTI    52
C                                                                               ATTI    53
C              SET SOME POINTERS                                                ATTI    54
      NSAVE = IOPCDT(17,JOPCDT)                                                 OPLST1 285
C              IKW IS THE FIRST KEYWORD FOR COMMAND                             ATTI    55
      IKW    = IOPCDT(9,JOPCDT)                                                 ATTI    56
C              NKW IS THE NUMBER OF KEYWORDS FOR THIS COMMAND                   ATTI    57
      NKW    = IOPCDT(10,JOPCDT)                                                ATTI    58
C              LVAL IS THE LENGTH OF THE VALUE ARRAY                            ATTI    59
      LVAL   = IOPCDT(16,JOPCDT)                                                ATTI    60
C              IAVPT1 IS THE START OF THE VALUE BLOCK                           4XAA   273
      IAXS = IREFTB(2,JREF)                                                     DEF2    66
      JSYM = IREFTB(1,JREF)                                                     HVAC18   1
      IAVPT1 = IAXS + NSAVE                                                     DEF2    67
C              LTOT IS THE TOTAL SIZE OF THE VALUE BLOCK                        4XAA   275
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,JOPCDT)                                 4XAA   276
      IAVPTR = IAVPT1 + LVAL                                                    DEF2    68
      IF(Iphase .ne. 2)  THEN                                                   DFTEX3 510
        CALL LSDFIL(JOPCDT,ISYMTB,KONTXT(1,IKW),NKW,AA(IAVPT1+1),               DFTEX3 511
     $              AA(LKDAT+1),LSDPTR,ISYMTB(1,LKPTR),NAMPTR,LVAL)             DFTEX3 512
        IF(Iphase .eq. 1) RETURN                                                DFTEX3 513
      ENDIF                                                                     DFTEX3 514
      IAVPTR = IAVPT1 + 2*LVAL                                                  DEF2    73
C              GET PARENT WALL DATA                                             DFTEX3 515
      JREFW = IABS(IREFTB(4,JREF))                                              DFTEX3 516
      JOPWLS= 0                                                                 DFTEX3 517
      IDATW = 0                                                                 DFTEX3 518
      JSYMW = 0                                                                 DFTEX3 519
      IPOLY = 0                                                                 DFTEX3 520
      H1    = 0.                                                                DFTEX3 521
      W1    = 0.                                                                DFTEX3 522
C              GET THE DATA PTR AND COMMAND INDEX OF PARENT WALL                DFTEX3 523
      IF(JREFW.GT.0) THEN                                                       DFTEX3 524
        JSYMW = IREFTB(1,JREFW)                                                 DFTEX3 525
        IF(JSYMW .NE. 0)  THEN                                                  DFTEX3 526
c              if named wall use symbol type to find command                    DFTEX3 527
          JOPWLS = JOPSRC(11,ISYMTB(9,JSYMW))                                   DFTEX3 528
        ELSE                                                                    DFTEX3 529
c              if un-named wall search command table for ref. tbl. range        DFTEX3 530
          JJ = NOPCDT - 1                                                       DFTEX3 531
          DO II=1,JJ                                                            DFTEX3 532
            IF (IOPCDT(12,II).GT.0) THEN                                        DFTEX3 533
              IF( (JREFW.GE.IOPCDT(14,II)).and.                                 DFTEX3 534
     $            (JREFW.LT.IOPCDT(14,II+1)) ) JOPWLS = II                      DFTEX3 535
            ENDIF                                                               DFTEX3 536
          ENDDO                                                                 DFTEX3 537
        ENDIF                                                                   DFTEX3 538
        IDATW = IREFTB(2,JREFW)+IOPCDT(17,JOPWLS)+2*IOPCDT(16,JOPWLS)           DFTEX3 539
C              Fetch wall H, W or POLYGON (different in Ext/Int Walls)          DFTEX3 540
        IF (JOPWLS.EQ.JOPEW) THEN                                               DFTEX3 541
          I = 16                                                                DFTEX3 542
        ELSE                                                                    DFTEX3 543
          I = 17                                                                DFTEX3 544
        END IF                                                                  DFTEX3 545
        IF( NOVAL(AA(IDATW+I))   .NE. 0 ) H1    = AA(IDATW+I)                   DFTEX3 546
        IF( NOVAL(AA(IDATW+I+1)) .NE. 0 ) W1    = AA(IDATW+I+1)                 DFTEX3 547
        IF( NOVAL(AA(IDATW+I+5)) .NE. 0 ) IPOLY = IA(IDATW+I+5)                 -044d4   1
      END IF                                                                    DFTEX3 549
C              CHECK FOR WINDOWS THAT ARE MISPOSITIONED ON WALL                 ATTI    99
      IF (JOPWLS.GT.0 .AND. JOPCDT.EQ.JOPWIN) THEN                              FIX10  125
C              WINDOW X,Y,HEIGHT,WIDTH, FRAME WIDTH                             ATTI   106
      X2 = AA(IAVPTR+12)                                                        ATTI   107
      Y2 = AA(IAVPTR+13)                                                        ATTI   108
      H2 = AA(IAVPTR+14)                                                        ATTI   109
      W2 = AA(IAVPTR+15)                                                        ATTI   110
      FW2 =AA(IAVPTR+9)                                                         ATTI   111
      IF(IPOLY .EQ. 0) THEN                                                     -044d4   2
        IF((X2-FW2).LT.-.01) CALL MSG2(92,X2,FW2,II,II)                         -044d4   3
        IF((Y2-FW2).LT.-.01) CALL MSG2(93,Y2,FW2,II,II)                         -044d4   4
        IF(((X2+W2+FW2).GT.(W1+.01)) .AND. (W1.GT.0.))                          -044d4   5
     $    CALL MSG2(94,X2,W2,FW2,W1)                                            -044d4   6
        IF(((Y2+H2+FW2).GT.(H1+.01)) .AND. (H1.GT.0.))                          -044d4   7
     $    CALL MSG2(95,Y2,H2,FW2,H1)                                            -044d4   8
      ENDIF                                                                     -044d4   9
C                                                                               BLIND   18
C         CHECK ALL STRUCTURE RELATED KEYWORDS AND SUPPORT THEM                 BLIND   19
      CALL WINSTRD (IAVPTR,JSYM,JREF)                                           HVAC18   2
C                                                                               BLIND   21
C              ERROR IF STRUCTURE USED ON INTERIOR WINDOW                       BLIND2   1
      IF( (JOPWLS.EQ.JOPIW) .AND.                                               DFTEX3 550
     $    (NOVAL(AA(IAVPTR+64)).NE.0) ) CALL MSG(29)                            DFTEX3 551
C              MESSAGES FOR IMPROPER USE OF MULTIPLIERS FOR WINDOWS             ATTI   148
C              IN DAYLIT SPACES                                                 ATTI   149
      IF(JOPWLS.EQ.JOPEW) THEN                                                  ATTRF1  24
C              DAYLIGHTING FLAG FOR PARENT SPACE                                BLIND2   8
      JREFSP = IABS(IREFTB(4,JREFW))                                            BLIND2   9
      IDATWSP= IREFTB(2,JREFSP) + IOPCDT(17,JOPSP) + 2*IOPCDT(16,JOPSP)         BLIND2  10
      IDAY = ISYMTB(12,IA(IDATWSP+103))                                         BLIND2  11
C              WARNING IF WINDOW HAS MULTIPLIER NOT = 1 IN DAYLIT SPACE         BLIND2  19
      WM = AA(IAVPTR+10)                                                        BLIND2  20
        IF(MSGLVL.GE.2.AND.IDAY.EQ.1.AND.(WM.GT.1.1.OR.WM.LT.0.9)) THEN         BLIND2  21
        CALL MSG2(96,WM,II,II,II)                                               ERR-01 615
        ENDIF                                                                   ATTI   169
C               ERROR IF WALL HAS MULTIPLIER NOT = 1                            ATTI   170
C               WALL MULTIPLIER                                                 ATTI   171
        EWM = AA(IDATW+11)                                                      DFTEX3 552
        IF(IDAY.EQ.1.AND.(EWM.GT.1.1.OR.EWM.LT.0.9)) THEN                       BLIND2  22
        CALL MSG2(97,EWM,II,II,II)                                              ERR-01 616
        ENDIF                                                                   ATTI   184
C                                                                               ATTI   185
      ENDIF                                                                     ATTI   186
      ENDIF                                                                     ATTI   187
      IGEO   = IGEOB + IAVPTR                                                   ATTI   194
C               for interior windows, ignore frame                              ATTI   195
      if (jopwls.eq.jopiw) aa(iavptr+ifrmw) = 0.                                -042L4   1
      if(jopcdt.ne.jopwin) go to 9200                                           ATTI   237
C                                                                               ATTI   238
C              switching control error messages                                 ATTI   239
C                                                                               ATTI   240
C              iavptr+28=mwiprpsw,29=switch-control,30=switch-set-lo,           ATTI   241
C              31=switch-set-hi,32=switch-sch                                   ATTI   242
C              72=no-switch,73=dir-sol-inc,74=tot-sol-inc,75=dir-sol-tr,        ATTI   243
C              76=tot-sol-tr,77=tot-sol-hor,78=outside-temp,79=space-load,      ATTI   244
C              80=daylight-level                                                ATTI   245
C                                                                               ATTI   246
C              switching type                                                   ATTI   247
      iswtyp = ia(iavptr+29)                                                    ATTI   248
      if((iswtyp.eq.872).or.(NOVAL(iswtyp).eq.0)) go to 9200                    FIX16   11
      if(NOVAL(aa(iavptr+28)).eq.0) then                                        DFTEX3 553
        call msg2(50,'SWITCH-CONTROL  ','not NONE        ',                     -043a   24
     $               'GLASS-TYPE-SW   ',II)                                     -043a   25
        go to 9120                                                              ATTI   254
      endif                                                                     ATTI   255
C              get glass-type-codes for glass-type and glass-type-sw            ATTI   256
      igpx =   isymtb(12,ia(iavptr+1))                                          SYMSIZ 118
      igp = ireftb(2,iopcdt(14,jopgt)+igpx-1) + iopcdt(17,jopgt)                OPLST1 309
      igp = igp + 2*iopcdt(16,jopgt)                                            4XAA   289
      x = atof(isymtb(1,ia(igp+2)), 4, 0, gtc)                                  COMB01   9
      igpxsw = isymtb(12,ia(iavptr+28))                                         SYMSIZ 119
      igpsw = ireftb(2,iopcdt(14,jopgt)+igpxsw-1) + iopcdt(17,jopgt)            OPLST1 310
      igpsw = igpsw + 2*iopcdt(16,jopgt)                                        4XAA   290
      x = atof(isymtb(1,ia(igpsw+2)), 4, 0, gtcsw)                              COMB01  10
C              require both glass types to be from window-4 library             ATTI   263
      if(gtc.lt.12.) then                                                       ATTI   264
        call msg2(98,II,II,II,II)                                               ERR-01 617
      endif                                                                     ATTI   269
      if(gtcsw.lt.12.) then                                                     ATTI   270
        call msg2(99,II,II,II,II)                                               ERR-01 618
      endif                                                                     ATTI   275
C              require both glass types have same number of panes               ATTI   276
      if(gtc.lt.12.0.or.gtcsw.lt.12.0) go to 9120                               ATTI   277
      nlay =   ia(igp+19)                                                       ATTI   278
      nlaysw = ia(igpsw+19)                                                     ATTI   279
      if(nlay.ne.nlaysw) then                                                   ATTI   280
        call msg2(100,II,II,II,II)                                              ERR-01 619
      endif                                                                     ATTI   285
C              require tvis(switched) < tvis(unswitched) for                    ATTI   286
C              switch-control = daylight-level                                  ATTI   287
      if(iswtyp.eq.880) then                                                    COMB01  11
        tv   = aa(igp+129)                                                      ATTI   289
        tvsw = aa(igpsw+129)                                                    ATTI   290
        if(tvsw.gt.tv) then                                                     ATTI   291
          call msg2(101,tvsw,tv,II,II)                                          ERR-01 620
        endif                                                                   ATTI   299
      endif                                                                     ATTI   300
 9120 continue                                                                  ATTI   301
C              dir-sol-inc thru space-load control needs switch-set-lo          ATTI   302
C              and switch-set-hi                                                ATTI   303
      if(iswtyp.ge.873.and.iswtyp.le.879) then                                  COMB01  12
        if( (NOVAL(aa(iavptr+30)).eq.0) .or.                                    DFTEX3 554
     $      (NOVAL(aa(iavptr+31)).eq.0) ) then                                  DFTEX3 555
          call msg(30)                                                          ERR-01 621
        endif                                                                   ATTI   310
        if( (NOVAL(aa(iavptr+30)).ne.0) .and.                                   DFTEX3 556
     $      (NOVAL(aa(iavptr+31)).ne.0) ) then                                  DFTEX3 557
          if(aa(iavptr+30).gt.aa(iavptr+31)) call msg(44)                       DFTEX3 558
        endif                                                                   ATTI   317
      endif                                                                     ATTI   318
C              error message for illegal glass-type-code pair for               ATTI   319
C              electrochromic switching                                         ATTI   320
      igtc = int(gtc)                                                           ATTI   321
      igtcsw = int(gtcsw)                                                       ATTI   322
      do iec=1,28                                                               ATTI   323
      if(igtc.eq.igtec(iec).or.igtcsw.eq.igtec(iec)) then                       ATTI   324
        igtc1 = igtc/2                                                          ATTI   325
        if( (igtc-2*igtc1).ne.0.or.(igtcsw-igtc).ne.1 ) then                    ATTI   326
          call msg2(102,igtc,igtcsw,II,II)                                      ERR-01 623
      go to 9200                                                                ATTI   338
        endif                                                                   ATTI   339
      endif                                                                     ATTI   340
      enddo                                                                     ATTI   341
 9200 continue                                                                  ATTI   342
C                                                                               GEO1    11
C              OVERHANG AND FINS (ASSUMED TO BE RECTANGULAR)                    GEO1    12
C              ASSOCIATED WITH THIS WINDOW OR DOOR                              GEO1    13
C                                                                               GEO1    14
      I = IAVPTR + 3                                                            4XAA   291
      IF(JOPCDT.EQ.JOPDR) I = I - 18                                            ATTI   344
C              --- DEFAULT OH-ANGLE TO 90                                       ATTI   345
C==== IF( NOVAL(AA(I+34)) .EQ. 0 )  AA(I+34) = 90.                              DFTEX3 559
C              OVERHANG                                                         GEO1    15
C     IA(IAXS+3) = 0                                                            -037     6
      H = AA(I+32)                                                              GEO1    17
      W = AA(I+33)                                                              GEO1    18
      IF(NOVAL(H).NE.0 .or. NOVAL(W).NE.0) THEN                                 DFTEX3 560
C              ERROR IF PARTIALLY SPECIFIED                                     DFTEX3 561
        IF(NOVAL(H).EQ.0 .or. NOVAL(W).EQ.0) THEN                               DFTEX3 562
            CALL  MSG2 ( 78, JOH, JOH, JOH, JOH )                               DFTEX3 563
        ENDIF                                                                   DFTEX3 564
      ENDIF                                                                     DFTEX3 565
C              LEFT FIN                                                         GEO1    26
C     IA(IAXS+4) = 0                                                            -037     7
      H = AA(I+37)                                                              GEO1    28
      W = AA(I+38)                                                              GEO1    29
      IF(NOVAL(H).NE.0 .or. NOVAL(W).NE.0) THEN                                 DFTEX3 566
C              ERROR IF PARTIALLY SPECIFIED                                     DFTEX3 567
        IF(NOVAL(H).EQ.0 .or. NOVAL(W).EQ.0) THEN                               DFTEX3 568
            CALL  MSG2 ( 78, JLF, JLF, JLF, JLF )                               DFTEX3 569
        ENDIF                                                                   DFTEX3 570
      ENDIF                                                                     DFTEX3 571
C              RIGHT FIN                                                        GEO1    37
C     IA(IAXS+5) = 0                                                            -037     8
      H = AA(I+41)                                                              GEO1    39
      W = AA(I+42)                                                              GEO1    40
      IF(NOVAL(H).NE.0 .or. NOVAL(W).NE.0) THEN                                 DFTEX3 572
C              ERROR IF PARTIALLY SPECIFIED                                     DFTEX3 573
        IF(NOVAL(H).EQ.0 .or. NOVAL(W).EQ.0) THEN                               DFTEX3 574
            CALL  MSG2 ( 78, JRF, JRF, JRF, JRF )                               DFTEX3 575
        ENDIF                                                                   DFTEX3 576
      ENDIF                                                                     DFTEX3 577
      RETURN                                                                    ATTI   357
      END                                                                       ATTI   358
      SUBROUTINE ATTO(JOPAT)                                                    ATTO     2
C                                                                               ATTO     3
C               WRITE WINDOW AND DOOR BLOCKS TO STANDARD FILE                   ATTO     4
C                                                                               ATTO     5
C               ATTO USES 17 WORDS OF COMMWK                                    ATTO     6
C                                                                               ATTO     7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON/COUNT/ NOTH,NITH,NSURF,NINSRF                                      OPLST1 259
      COMMON /DRVALX/ IDRGEO,IDRSAP,IDRCNP,IDRSDP,IDRFRH,IDRFRW,IDRMUP          /DRVALX/ 2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LBLOCK/ LSFBLK(20),N(20)                                         BLIND    2
      EQUIVALENCE (LWPARB,LSFBLK(4)),(LCB1,LSFBLK(5)),                          /LBLOCK/ 3
     1            (LCB2,LSFBLK(6)),(LCONSB,LSFBLK(6)),                          /LBLOCK/ 4
     2            (LGEOB,LSFBLK(9))                                             BLIND    3
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
      COMMON /WIVALX/ IWIGEO,IGTP,IWSDP,IWICRP,IWIMUP,IWIFRH,IWIFRW,            /WIVALX/ 2
     .                IGTPSW                                                    /WIVALX/ 3
C                                                                               ATTO    25
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      EQUIVALENCE (IKW,COMMWK(1)),(NKW,COMMWK(2)),                              ATTO    27
     1            (IDP,COMMWK(3)),(IAVPTR,COMMWK(4)),                           ATTO    28
     2            (NAMPTR,COMMWK(5)),(LBLK,COMMWK(6)),                          ATTO    29
     3            (IKYOP,COMMWK(7)),(LATT,COMMWK(8)),                           ATTO    30
     4            (ISCP,COMMWK(9)),(ISHDVP,COMMWK(10)),                         ATTO    31
     5            (IAPTR,COMMWK(11)),(JOPSUB,COMMWK(13)),                       ATTO    32
     6            (LVAL,COMMWK(12)),(NATT,COMMWK(14)),                          ATTO    33
     7            (IST,COMMWK(15)),(IPT,COMMWK(16)),                            ATTO    34
     8            (IPRP,COMMWK(17))                                             ATTO    35
      DIMENSION MWIB_SCH(4)                                                     BLIND   22
      DATA MWISTC,      MWIB_SCH                                                BLIND   23
     2    /    63,   73,74,77,78 /                                              BLIND   24
C                                                                               ATTO    36
      LBLK = 1                                                                  ATTRF1  26
C              IF WINDOW                                                        ATTRF1  27
      IF (JOPAT.EQ.JOPWIN) THEN                                                 ATTRF1  28
          IKYOP = 13                                                            BIGNAM  25
          LATT = LWNDW                                                          ATTRF1  30
          IPROPP = IGTP                                                         ATTRF1  31
          ISHDVP = IWSDP                                                        ATTRF1  32
          JOPPRP = JOPGT                                                        ATTRF1  33
          IPRPSF = 1                                                            ATTRF1  34
          IWLATD = 4                                                            ATTRF1  35
          IMULP = IWIMUP                                                        ATTRF1  36
          NWIN = IOPCDT(13,JOPWIN)                                              ATTRF1  37
C              IF DOOR                                                          ATTRF1  38
      ELSE                                                                      ATTRF1  39
          IKYOP = 14                                                            BIGNAM  26
          LATT = LDOOR                                                          ATTRF1  41
          IPROPP = IDRCNP                                                       ATTRF1  42
          ISHDVP = IDRSDP                                                       ATTRF1  43
          JOPPRP = JOPCNS                                                       ATTRF1  44
          IPRPSF = 4                                                            ATTRF1  45
          IWLATD = 7                                                            ATTRF1  46
          IMULP = IDRMUP                                                        ATTRF1  47
          NDOOR = IOPCDT(13,JOPDR)                                              ATTRF1  48
      END IF                                                                    ATTRF1  49
      NATT = IOPCDT(13,JOPAT)                                                   ATTRF1  50
      IF (NATT.EQ.0) GO TO 1000                                                 ATTRF1  51
      IF (IOPCDT(13,JOPEW)+IOPCDT(13,JOPIW).EQ.0) GO TO 1000                    ATTRF1  52
      LBLK = NATT*LATT                                                          ATTRF1  53
      NKW = IOPCDT(10,JOPAT)                                                    ATTRF1  54
      IKW = IOPCDT(9,JOPAT)                                                     ATTRF1  55
      LVAL = IOPCDT(16,JOPAT)                                                   ATTRF1  56
C              SAVE SPACE FOR THE OUTPUT BUFFER                                 ATTRF1  57
      CALL CKAA(IA,LBLK)                                                        ATTRF1  58
C                IST IS WHERE THE OUTPUT BUFFER STARTS                          ATTRF1  59
      IST = IAX + 1                                                             ATTRF1  60
C              IPT IS WHERE THE NEXT WINDOW BLOCK GOES IN THE BUFFER            ATTRF1  61
      IPT = IAX                                                                 ATTRF1  62
C              FILL THE BUFFER WITH ZEROES                                      ATTRF1  63
      CALL FILLN(0.,AA(IST),LBLK)                                               ATTRF1  64
C              INITIALIZE THE STANDARD FILE POINTER                             ATTRF1  65
      ISFPTR = 1                                                                ATTRF1  66
C              LOOP OVER BOTH TYPES OF WALL (E-W & I-W)                         ATTRF1  67
      DO 900 IWLTYP = 1,2                                                       ATTRF1  68
        JOPWL = JOPEW                                                           ATTRF1  69
        IF (IWLTYP.EQ.2) THEN                                                   ATTRF1  70
C              IF ATTACHMENT IS A DOOR AND WALL IS I-W, SKIP                    ATTRF1  71
            IF (JOPAT.EQ.JOPDR)  GO TO 900                                      ATTRF1  72
            JOPWL = JOPIW                                                       ATTRF1  73
        END IF                                                                  ATTRF1  74
        NWALL = IOPCDT(13,JOPWL)                                                ATTRF1  75
        IF (NWALL.EQ.0) GO TO 900                                               ATTRF1  76
C              LOOP OVER ALL WALLS OF EACH TYPE                                 ATTRF1  77
        DO 800 IWALL=1,NWALL                                                    ATTRF1  78
          IRXWL = IOPCDT(14,JOPWL) + IWALL - 1                                  ATTRF1  79
          IDPWL = IREFTB(2,IRXWL)                                               ATTRF1  80
          NWLATT = 0                                                            ATTRF1  81
          ATTAR = 0.                                                            ATTRF1  82
C              SAVE WINDOW OR DOOR SF POINTER IN WALL DATA ARRAY                ATTRF1  83
          IA(IDPWL+IWLATD+1) = ISFPTR                                           ATTRF1  84
C              LOOP OVER ATTACHMENTS                                            ATTRF1  85
          DO 700 IATT = 1,NATT                                                  ATTRF1  86
            IRX = IOPCDT(14,JOPAT) + IATT - 1                                   ATTRF1  87
C              FIND ALL THE ATTACHMENTS ON WALL "IRXWL"                         ATTRF1  88
            IF (IREFTB(4,IRX).NE.IRXWL) GO TO 700                               ATTRF1  89
C              NOW ASSEMBLE ALL DATA FOR THESE ATTACHMENTS                      ATTRF1  90
C                                                                               ATTRF1  91
C              PICK UP THE NAME AND DATA POINTERS                               ATTRF1  92
            NAMPTR = IREFTB(1,IRX)                                              ATTRF1  93
            IDP = IREFTB(2,IRX)                                                 ATTRF1  94
C              MOVE IN THE NAME                                                 ATTRF1  95
            IF (NAMPTR.GT.0)  CALL MOVEN(ISYMTB(1,NAMPTR),IA(IPT+1),8)          BIGNAM  27
            IF (NAMPTR.EQ.0) CALL MOVEN(IBLANK(1),IA(IPT+1),8)                  BIGNAM  28
C              STORE THE GEOMETRY POINTER                                       ATTRF1  98
            IA(IPT+<+MWIGEOM>+1) = IA(IDP+8)                                    PV2      5
C              STORE PTR TO SETBACK SHADES AND NUMBER OF SETBACK SHADES         GEO1    55
            IA(IPT+<+MWISHADE>+1) = IA(IDP+7)                                   PV2      6
            IF(IA(IDP+7).NE.0) IA(IPT+<+NWISHADE>+1) = 3                        PV2      7
            IAVPTR = MVTOSM(IRX,JOPAT,0)                                        OUT1    12
C              CONVERT SYMBOL TABLE POINTERS TO VALUES                          ATTRF1 101
            CALL SYMFIL(ISYMTB,KONTXT(1,IKW),NKW,IA(IAVPTR+1))                  ATTRF1 102
C              CHANGE PROPERTY NUMBER TO STANDARD FILE POINTER                  ATTRF1 103
            IRXP = IOPCDT(14,JOPPRP) + IA(IAVPTR+IPROPP) - 1                    ATTRF1 104
            IPRP = IREFTB(2,IRXP)                                               ATTRF1 105
            IA(IAVPTR+IPROPP) = IA(IPRP+IPRPSF)                                 ATTRF1 106
C              IF WINDOW                                                        ATTRF1 107
            IF (JOPAT.EQ.JOPWIN) THEN                                           ATTRF1 108
C              STORE POSITION OF SWITCHED GLASS TYPE                            ATTRF1 109
                IF(NOVAL(AA(IAVPTR+IGTPSW)).EQ.0)  THEN                         DFTEX4 279
                    IA(IAVPTR+IGTPSW) = 0                                       ATTRF1 111
                ELSE                                                            ATTRF1 112
                    IRXSW = IOPCDT(14,JOPPRP) + IA(IAVPTR+IGTPSW) - 1           ATTRF1 113
                    IPRPSW = IREFTB(2,IRXSW)                                    ATTRF1 114
                    IA(IAVPTR+IGTPSW) = IA(IPRPSW+1)                            ATTRF1 115
                END IF                                                          ATTRF1 116
C              AREA INCLUDING FRAME                                             ATTRF1 117
                AREA = (AA(IAVPTR+IWIGEO+3)+AA(IAVPTR+IWIFRW)) *                ATTRF1 118
     1                 (AA(IAVPTR+IWIGEO+4)+AA(IAVPTR+IWIFRW))                  ATTRF1 119
C              STORE AREA WITHOUT FRAME                                         ATTRF1 120
                AA(IPT+<+WIAREA>+1) = AA(IAVPTR+IWIGEO+3)                       PV2      8
     &                                            * AA(IAVPTR+IWIGEO+4)         PV2      9
C              PERIMETER                                                        GEO1    58
                AA(IPT+<+WIPERM>+1)=2.*(AA(IAVPTR+IWIGEO+3)                     PV2     10
     &                                            + AA(IAVPTR+IWIGEO+4))        PV2     11
                IF(NOVAL(AA(IAVPTR+MWISTC+1)).NE.0) THEN                        DFTEX4 280
C              IF STRUCTURE IS DEFINED, CHANGE WL-NUMBERS TO SF POINTERS        BLIND   26
                   DO IS=1,9                                                    BLIND   27
                      iadr   = IAVPTR+MWISTC+IS                                 BLIND   28
                      IF(NOVAL(AA(iadr)).EQ.0) THEN                             DFTEX4 281
                        IA(iadr) = 0                                            BLIND   30
                      ELSE                                                      BLIND   31
                        ivalue   = ia(iadr)                                     BLIND   32
                        irx      = iopcdt(14,JOPWIL)+ivalue-1                   BLIND   33
                        iptr     = ireftb(2,irx)                                BLIND   34
                        IA(iadr) =IA(iptr+1)                                    BLIND   35
                      ENDIF                                                     BLIND   36
                   END DO                                                       BLIND   37
                   DO ISCH = 1, 4                                               BLIND5   3
                      iadr    = IAVPTR+MWIB_SCH(ISCH)                           BLIND5   4
                      IF(NOVAL(AA(iadr)).EQ.0) IA(iadr) = 0                     DFTEX4 282
                   END DO                                                       BLIND5   6
                END IF                                                          BLIND   50
C              IF DOOR                                                          ATTRF1 122
            ELSE                                                                ATTRF1 123
                IA(IPT+<+MDRSOLFRAC>+1) = NINSRF*24 + 1                         PV2     12
                NINSRF = NINSRF + 1                                             ATTRF1 125
                AREA = AA(IAVPTR+IDRGEO+3)*AA(IAVPTR+IDRGEO+4)                  ATTRF1 126
                AA(IPT+<+DRAREA>+1) = AREA                                      PV2     13
C              PERIMETER                                                        GEO1    60
                AA(IPT+<+DRPERM>+1)=2.*(AA(IAVPTR+IDRGEO+3)                     PV2     14
     &                                            + AA(IAVPTR+IDRGEO+4))        PV2     15
            END IF                                                              ATTRF1 128
            NSURF = NSURF + 1                                                   ATTRF1 129
C              INTEGER NO. OF SHADE DIVISIONS                                   ATTRF1 130
            IA(IAVPTR+ISHDVP) = INT(AA(IAVPTR+ISHDVP))                          ATTRF1 131
C              MOVE DATA INTO OUTPUT BUFFER                                     ATTRF1 132
            IF (JOPAT.EQ.JOPWIN) THEN                                           COMPLY  36
              CALL MOVEN(AA(IAVPTR+1),AA(IPT+IKYOP),LVAL-(13+0+8+5+2+5))        -047hT   2
              IA(IPT+<+DAYLIGHT-GROUP>+1) = AA(IPT+<+DAYLIGHT-GROUP>+1)         -44d5    5
            ELSE                                                                COMPLY  38
              CALL MOVEN(AA(IAVPTR+1),AA(IPT+IKYOP),LVAL-1)                     -047fT   3
            ENDIF                                                               COMPLY  40
C              TOTAL WINDOW OR DOOR AREA ON WALL                                ATTRF1 134
            ATTAR = ATTAR + AREA*AA(IAVPTR+IMULP)                               ATTRF1 135
C              NUMBER OF WINDOWS OR DOORS ON WALL                               ATTRF1 136
            NWLATT = NWLATT + 1                                                 ATTRF1 137
C              INCREMENT OUTPUT DATA BUFFER POINTER                             ATTRF1 138
            IPT = IPT + LATT                                                    ATTRF1 139
C              STANDARD FILE POINTER OF WINDOW OR DOOR                          ATTRF1 140
            ISFPTR = IPT + 1 - IAX                                              ATTRF1 141
  700     CONTINUE                                                              ATTRF1 142
C              SAVE WINDOW OR DOOR NUMBER AND AREA IN THE                       ATTRF1 143
C              WALL DATA ARRAY                                                  ATTRF1 144
          IA(IDPWL+IWLATD) = NWLATT                                             ATTRF1 145
          IF (NWLATT.EQ.0) IA(IDPWL+IWLATD+1)=0                                 ATTRF1 146
          AA(IDPWL+IWLATD+2) = ATTAR                                            ATTRF1 147
  800   CONTINUE                                                                ATTRF1 148
  900 CONTINUE                                                                  ATTRF1 149
C                WRITE THE STANDARD FILE                                        ATTO   121
      WRITE (ISTNDF) NATT,LBLK                                                  ATTO   122
      CALL WRITEN(ISTNDF,IA(IST),LBLK)                                          ATTO   123
      IF (IREPRT(32) .EQ. 1 .AND. JOPAT .EQ. JOPWIN)                            ATTO   124
     1   CALL DUMPIT(20HWINDOWS             ,IA(IST),LBLK)                      ATTO   125
      IF (IREPRT(32) .EQ. 1 .AND. JOPAT .EQ. JOPDR)                             ATTO   126
     1   CALL DUMPIT(20HDOORS               ,IA(IST),LBLK)                      ATTO   127
      GO TO 2000                                                                ATTO   128
 1000 WRITE (ISTNDF) IZERO,IONE                                                 ATTO   129
      WRITE (ISTNDF) IZERO                                                      ATTO   130
 2000 CONTINUE                                                                  ATTO   131
C              SET EW SF POINTER                                                ATTO   132
      IF (JOPAT .EQ. JOPWIN)  IDRB = IWINB + LBLK                               ATTO   133
      IF (JOPAT .EQ. JOPDR)   IEWB = IDRB + LBLK                                ATTO   134
      RETURN                                                                    ATTO   135
      END                                                                       ATTO   136
      SUBROUTINE BOXER(IAVPTR)                                                  BOXER    2
C                                                                               BOXER    3
C               FILL THE BOX ARRAY WHEN SHAPE = BOX IS USED IN THE              BOXER    4
C               SPACE COMMAND.                                                  BOXER    5
C                                                                               BOXER    6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /BOX/    BOX(7,6),BOXDEF(7,6)                                     ALPHA   48
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON  /SPVALX/ IHP, IAP, IVP, ISHPP, IWP, IDPTHP, ISCP, IPRCAP,         /SPVALX/ 2
     1                 IWFP, ILTP, IINFMP, INZHP, IPLP, IPSP, ILKWP,            /SPVALX/ 3
     2                 ITKWP, IEKWP, IPAP, ILWSFP, ITWSFP, IPOLSP,              GEO4     1
     3                 IEQWFP, KWH, KWA, KWV, KWSHP, KWW, KWDPTH,               /SPVALX/ 5
     4                 KWSC, KWLT, KWINFM, KWNZH, KWPL, KWPS,                   /SPVALX/ 6
     5                 KWLKW, KWTKW, KWEKW, KWPA, KWLWSF, KWTWSF,               /SPVALX/ 7
     6                 KWEWSF, IFURTP, IFURFP, IFURWP, IFLRWP, KWWF,            /SPVALX/ 8
     7                 KWFLRW,ILTSP,NINFKY,INFKYP(20),DEFINF(10,4),             LTSYS1   2
     8                 ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM,             DFTEXP 197
     9                 ISPLOCP,ISPDIS,NSPDIS                                    DFTEXP 198
C                                                                               BOXER   11
      DIMENSION BX(42)                                                          BOXER   12
      EQUIVALENCE (BX(1),BOX(1,1))                                              BOXER   13
C                                                                               BOXER   14
      EQUIVALENCE (W,COMMWK(30)),(D,COMMWK(31)),                                BOXER   15
     1            (H,COMMWK(32))                                                BOXER   16
C                                                                               BOXER   17
      W      = AA(IAVPTR+IWP)                                                   BOXER   18
      D      = AA(IAVPTR+IDPTHP)                                                BOXER   19
      H      = AA(IAVPTR+IHP)                                                   BOXER   20
C               TOP                                                             BOXER   22
      BX(3)  = H                                                                BOXER   23
      BX(4)  = D                                                                BOXER   24
      BX(5)  = W                                                                BOXER   25
C               BOTTOM                                                          BOXER   26
      BX(8)  = W                                                                BOXER   27
      BX(11) = D                                                                BOXER   28
      BX(12) = W                                                                BOXER   29
C               LEFT                                                            BOXER   30
      BX(16) = D                                                                BOXER   31
      BX(18) = H                                                                BOXER   32
      BX(19) = D                                                                BOXER   33
C               RIGHT                                                           BOXER   34
      BX(22) = W                                                                BOXER   35
      BX(25) = H                                                                BOXER   36
      BX(26) = D                                                                BOXER   37
C               FRONT                                                           BOXER   38
      BX(32) = H                                                                BOXER   39
      BX(33) = W                                                                BOXER   40
C               BACK                                                            BOXER   41
      BX(36) = W                                                                BOXER   42
      BX(37) = D                                                                BOXER   43
      BX(39) = H                                                                BOXER   44
      BX(40) = W                                                                BOXER   45
      RETURN                                                                    BOXER   46
      END                                                                       BOXER   47
      SUBROUTINE CONSTD(JREF,JOPCDT,LKDAT,NAMPTR,LSDPTR,LKPTR,Iphase)           DFTEX3 578
C                                                                               CONSTI   3
C                  THIS ROUTINE PROCESSES THE CONSTRUCTION COMMAND              CONSTI   4
C                                                                               CONSTI   5
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               CONSTI   9
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /CNVALX/ KWLAY,KWUV,KWWALP,KWRO,ILAYP,IUVP,IWALPP,IROP            SUBTY8   1
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LBLOCK/ LSFBLK(20),N(20)                                         BLIND    2
      EQUIVALENCE (LWPARB,LSFBLK(4)),(LCB1,LSFBLK(5)),                          /LBLOCK/ 3
     1            (LCB2,LSFBLK(6)),(LCONSB,LSFBLK(6)),                          /LBLOCK/ 4
     2            (LGEOB,LSFBLK(9))                                             BLIND    3
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON  /LYVALX/ IIFRP, IMATST, ITHST, INRFP,                             /LYVALX/ 2
     1                 IUP, ICOMRP, NLAY                                        /LYVALX/ 3
      COMMON  /MESSG/  IU(2),INU(2),IM1(4),IM2(4),IM3(4),IHW(4),IDW(4)          DFTEX3 499
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
C                                                                               CONSTI  29
C              SET SOME POINTERS                                                CONSTI  40
      NSAVE = IOPCDT(17,JOPCDT)                                                 OPLST1 313
C              IKW IS THE FIRST KEYWORD FOR COMMAND                             CONSTI  41
      IKW    = IOPCDT(9,JOPCDT)                                                 CONSTI  42
C              NKW IS THE NUMBER OF KEYWORDS FOR THIS COMMAND                   CONSTI  43
      NKW    = IOPCDT(10,JOPCDT)                                                CONSTI  44
C              LVAL IS THE LENGTH OF THE VALUE ARRAY                            CONSTI  45
      LVAL   = IOPCDT(16,JOPCDT)                                                CONSTI  46
C              IAVPT1 IS THE START OF THE VALUE BLOCK                           4XAA   294
      IAXS = IREFTB(2,JREF)                                                     DEF2    75
      IAVPT1 = IAXS + NSAVE                                                     DEF2    76
C              LTOT IS THE TOTAL LENGTH OF THE VALUE BLOCK                      4XAA   296
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,JOPCDT)                                 4XAA   297
      IF(Iphase .ne. 2)  THEN                                                   DFTEX3 579
        CALL LSDFIL(JOPCDT,ISYMTB,KONTXT(1,IKW),NKW,AA(IAVPT1+1),               DFTEX3 580
     $              AA(LKDAT+1),LSDPTR,ISYMTB(1,LKPTR),NAMPTR,LVAL)             DFTEX3 581
        IF(Iphase .eq. 1) RETURN                                                DFTEX3 582
      ENDIF                                                                     DFTEX3 583
      IAVPTR = IAVPT1 + 2*LVAL                                                  DEF2    79
      IRF    = IA(IAVPTR+ILAYP)                                                 CONSTI  85
C              CALCULATE POINTER TO RF DATA                                     CONSTI  95
C              If TYPE=LAYERS and LAYERS is specified then fill                 NEWEXP  31
C              save area with resp. fact. ptrs and place calc's                 NEWEXP  32
C              U-val into U-VALUE keyword                                       NEWEXP  33
      IF (NOVAL(IA(IAVPTR+1)).EQ.0) GO TO 1400                                  NEWEX2   3
      IF( (ISYMTB(12,IA(IAVPTR+1)).eq.2) .or.                                   NEWEXP  34
     $    (NOVAL(IRF).EQ.0) ) GO TO 1400                                        NEWEXP  35
      IRF2   = ISYMTB(12,IRF)                                                   SYMSIZ 120
C              RES FACTS FOUND FROM SYMBOL TABLE.  GET POINTER                  CONSTI  99
C              FROM REF TABLE AND SAVE                                          CONSTI 100
      IRFX   = IOPCDT(14,JOPLAY) + IRF2 - 1                                     DFTEX4 283
      IRF2   = IREFTB(2,IRFX)                                                   DFTEX4 284
      IRF2   = IA(IRF2+1)                                                       DFTEX4 285
C              IF NO LAYERS DATA, ISSUE ERROR AND STOP                          CONSTI 103
      LAYERR = IUNPKB(1,2,IREFTB(5,IRFX))                                       DFTEX4 286
      IF((IRF2.eq.0) .or. (LAYERR.eq.1 .or. LAYERR.eq.3)) THEN                  DFTEX4 287
          CALL MSG2(88,ISYMTB(1,IRF),DUM,DUM,DUM)                               CONSTI 105
          IF(IRF2 .eq. 0) GOTO 1400                                             DFTEX4 288
C              Place LAYER calc'd U-value into construction data                DFTEX4 289
      END IF                                                                    CONSTI 107
C              GET NUMBER OF RESPONSE FACTORS OF FIRST SET                      CONSTI 108
      NRF    = IA(IRF2+INRFP)                                                   CONSTI 109
      IF (NRF .EQ. 0)  GO TO 1350                                               CONSTI 110
C              SET POINTER TO WHERE INSIDE FILM RESISTANCE IS                   CONSTI 111
C              STORED (1 IN FRONT OF SECOND SET OF DATA)                        CONSTI 112
      IRF3   = IRF2 + 3*NRF + 7                                                 CONSTI 113
C              GET INSIDE FILM RESISTANCE                                       CONSTI 114
      RESI   = AA(IRF3)                                                         CONSTI 115
C              GET NO. OF RFS OF SECOND SET OF RF DATA.  SET LENGTH             CONSTI 119
C              OF SECOND SET OF RF DATA.                                        CONSTI 120
      NRF2 = IA(IRF3+INRFP)                                                     CONSTI 121
C              FOR LIBRARY-INPUT, SET NRF TO NO. OF RFS IN 2ND SET              CONSTI 123
      IF (LDSTYP .EQ. 3)  NRF = NRF2                                            CONSTI 124
      GO TO 2000                                                                CONSTI 125
C             ALL RESISTANCE LAYERS COMMAND                                     CONSTI 179
 1350 RESI   = AA(IRF2+7)                                                       DFTEX4 290
      IRF2   = 0                                                                DFTEX4 291
      GO TO 2000                                                                CONSTI 186
C              NO RESPONSE FACTORS                                              CONSTI 187
 1400 IRF2   = 0                                                                CONSTI 188
      NRF    = 0                                                                CONSTI 192
      RESI   = 0.                                                               CONSTI 193
 2000 CONTINUE                                                                  DEF2    93
C              SAVE LRF, IRF2, NRF, AND RESI                                    CONSTI 197
      IA(IAXS+1) = IRF2                                                         CONSTI 198
      IA(IAXS+2) = NRF                                                          CONSTI 199
      AA(IAXS+3) = RESI                                                         CONSTI 200
C              Place calc'd uvalue into U-VALUE (val 3,2,1) as usr data         DFTEX4 292
      IF(NOVAL(IRF).eq.0)  RETURN                                               DFTEX4 293
      IF (NOVAL(IA(IAVPTR+1)).EQ.0) RETURN                                      NEWEX2   4
      AA(IAVPTR+IUVP)      = AA(IRF2+IUP)                                       DFTEX4 294
      AA(IAVPTR-LVAL+IUVP) = AA(IRF2+IUP)                                       DFTEX4 295
      IA(IAVPT1+IUVP)      = IPACKB(1,5,1,AA(IAVPT1+IUVP))                      DFTEX4 296
      RETURN                                                                    CONSTI 203
      END                                                                       CONSTI 204
      SUBROUTINE CONSTO                                                         CONSTO   2
C                                                                               CONSTO   3
C               OUTPUT THE CONSTRUCTION BLOCK                                   CONSTO   4
C                                                                               CONSTO   5
C               CONSTO USES 12 WORDS OF COMMWK                                  CONSTO   6
C                                                                               CONSTO   7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON  /CNVALX/ KWLAY,KWUV,KWWALP,KWRO,ILAYP,IUVP,IWALPP,IROP            SUBTY8   1
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LBLOCK/ LSFBLK(20),N(20)                                         BLIND    2
      EQUIVALENCE (LWPARB,LSFBLK(4)),(LCB1,LSFBLK(5)),                          /LBLOCK/ 3
     1            (LCB2,LSFBLK(6)),(LCONSB,LSFBLK(6)),                          /LBLOCK/ 4
     2            (LGEOB,LSFBLK(9))                                             BLIND    3
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON  /LYVALX/ IIFRP, IMATST, ITHST, INRFP,                             /LYVALX/ 2
     1                 IUP, ICOMRP, NLAY                                        /LYVALX/ 3
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
C                                                                               CONSTO  25
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      EQUIVALENCE (IKW,COMMWK(1)),(NKW,COMMWK(2)),                              CONSTO  26
     1            (IDP,COMMWK(3)),(IAVPTR,COMMWK(4)),                           CONSTO  27
     2            (NAMPTR,COMMWK(5)),(LBLK,COMMWK(6)),                          CONSTO  28
     3            (IST,COMMWK(7)),(IPT,COMMWK(8)),                              CONSTO  29
     4            (IRF,COMMWK(9)),(NSTOR,COMMWK(10)),                           CONSTO  30
     5            (IAPTR,COMMWK(11)),(IWP,COMMWK(12))                           CONSTO  31
C                                                                               CONSTO  32
      DATA IKYOP /10/                                                           BIGNAM  37
C                                                                               CONSTO  34
C               OBTAIN SOME QUANTITIES FROM THE COMMAND TABLE                   CONSTO  35
      LCB1 = 0                                                                  DEF2    94
      LCB2 = 0                                                                  DEF2    95
      NCONS  = IOPCDT(13,JOPCNS)                                                CONSTO  39
      IF (NCONS .EQ. 0)  GO TO 1000                                             CONSTO  40
      NKW    = IOPCDT(10,JOPCNS)                                                CONSTO  41
      IKW    = IOPCDT(9,JOPCNS)                                                 CONSTO  42
      LVAL = IOPCDT(16,JOPCNS)                                                  4XAA   306
C              LOOP OVER CONSTRUCTIONS.  WRITE OUT A CONSTRUCTION               CONSTO  45
C              STANDARD FILE BLOCK CONTAINING THE RESPONSE FACTORS              CONSTO  46
C              WITH AN INSIDE FILM RESISTANCE.                                  REFTB1 156
C              SET POINTER TO START OF OUTPUT BLOCK                             CONSTO  52
      IST = IAX + 1                                                             CONSTO  53
C              INITIALIZE POINTER THAT POINTS TO CONSTRUCTION DATA              CONSTO  54
C              IN OUTPUT BLOCK                                                  CONSTO  55
      IPT = IAX                                                                 CONSTO  56
      DO 100 ICONS=1,NCONS                                                      CONSTO  59
C              GET POINTER TO NAME IN SYMBOL TABLE                              CONSTO  60
      IRX = IOPCDT(14,JOPCNS) + ICONS - 1                                       REFTB1 157
      NAMPTR = IREFTB(1,IRX)                                                    REFTB1 158
C              GET POINTER TO CONSTRUCTION INPUT DATA                           CONSTO  62
      IDP = IREFTB(2,IRX)                                                       REFTB1 159
      IRF = IA(IDP+1)                                                           DEF2    96
      LEN = LCONSF                                                              DEF2    97
      NRF = 0                                                                   DEF2    98
      IF (IRF.GT.0) THEN                                                        DEF2    99
          NRF = IA(IRF+INRFP)                                                   DEF2   100
          LEN = 3*NRF + LCONSF + 4                                              DEF2   101
      END IF                                                                    DEF2   102
      LCB1 = LCB1 + LEN                                                         DEF2   103
      CALL CKAA(IA,LCB1)                                                        DEF2   104
      CALL FILLN(0,IA(IPT+1),LEN)                                               DEF2   105
C              MOVE NAME INTO OUTPUT BUFFER                                     CONSTO  64
      IF (NAMPTR .GT. 0)  CALL MOVEN(ISYMTB(1,NAMPTR),IA(IPT+1),8)              BIGNAM  38
C              SET VALUE POINTER                                                CONSTO  66
      IAVPTR = MVTOSM(IRX,JOPCNS,0)                                             OUT1    13
C              CONVERT SYMBOL TABLE POINTERS TO VALUES                          CONSTO  68
      CALL SYMFIL(ISYMTB,KONTXT(1,IKW),NKW,IA(IAVPTR+1))                        CONSTO  69
C              STORE POINTER TO WALL-PARAMETERS                                 CONSTO  70
      IWP    = 0                                                                CONSTO  71
      IF (NOVAL(AA(IAVPTR+IWALPP)).EQ.0) GO TO 30                               COMB03  34
      IRXWP  = IOPCDT(14,JOPWP) + IA(IAVPTR+IWALPP) - 1                         REFTB1 160
      IWP    = IREFTB(2,IRXWP)                                                  REFTB1 161
      IWP    = IA(IWP+4)                                                        REFTB1 162
   30 IA(IAVPTR+IWALPP) = IWP                                                   CONSTO  75
C              INTEGER THE ROUGHNESS                                            CONSTO  76
      IA(IAVPTR+IROP) = INT(AA(IAVPTR+IROP))                                    CONSTO  77
C              MOVE CONSTRUCTION VALUE ARRAY TO OUTPUT BUFFER                   CONSTO  78
      CALL MOVEN(AA(IAVPTR+2),AA(IPT+IKYOP),4+0)                                COMPLY  41
C              GET POINTER TO RESPONSE FACTORS                                  CONSTO  80
      IA(IPT+9) = LEN                                                           BIGNAM  39
      IF (IRF.EQ.0) GO TO 50                                                    DEF2   107
      NSTOR  = IA(IPT+9) - 8                                                    BIGNAM  40
C              CONVERTS THE RESPONSE FACTORS                                    CONSTO  88
      CALL MOVEN(AA(IRF+1),AA(IPT+13),NSTOR)                                    BIGNAM  41
      IF (METIN .EQ. 1)  CALL KDIV(AA(IPT+13),6,1,METIN)                        BIGNAM  42
      IF (METIN .EQ. 1)  CALL KDIV(AA(IPT+16),6,NSTOR-3,METIN)                  BIGNAM  43
   50 CONTINUE                                                                  CONSTO  92
C              SAVE STANDARD FILE POSITION OF CONSTRUCTION IN THE               CONSTO  93
C              CONSTRUCTION VALUE ARRAY                                         CONSTO  94
      IA(IDP+4) = IPT + 1 - IAX                                                 CONSTO  95
C              INCREMENT OUTPUT AND REF. TABLE POINTERS AND CONTINUE            CONSTO  96
      IPT = IPT + IA(IPT+9)                                                     BIGNAM  44
  100 CONTINUE                                                                  CONSTO  99
C              WRITE OUT THE FIRST CONSTRUCTION SF BLOCK                        CONSTO 100
      WRITE (ISTNDF) NCONS,LCB1                                                 CONSTO 101
      CALL WRITEN(ISTNDF,IA(IST),LCB1)                                          CONSTO 102
      IF (IREPRT(32) .EQ. 1)                                                    CONSTO 103
     1 CALL DUMPIT(20HCONSTRUCTION W IFR  ,IA(IST),LCB1)                        CONSTO 104
      ICB2 = ICB1 + LCB1                                                        DEF2   108
      IST = IAX + 1                                                             CONSTO 112
      IPT = IAX                                                                 CONSTO 113
      DO 400 ICONS=1,NCONS                                                      CONSTO 116
      IRX = IOPCDT(14,JOPCNS) + ICONS - 1                                       REFTB1 163
      NAMPTR = IREFTB(1,IRX)                                                    REFTB1 164
      IDP = IREFTB(2,IRX)                                                       REFTB1 165
      IRF = IA(IDP+1)                                                           DEF2   109
      LEN = LCONSF                                                              DEF2   110
      NRF = 0                                                                   DEF2   111
      IF (IRF.GT.0) THEN                                                        DEF2   112
          NRF1 = IA(IRF+INRFP)                                                  DEF2   113
          IRF = IRF + 3*NRF1 + 7                                                DEF2   114
          NRF = IA(IRF+INRFP)                                                   DEF2   115
          LEN = 3*NRF + LCONSF + 4                                              DEF2   116
      END IF                                                                    DEF2   117
      LCB2 = LCB2 + LEN                                                         DEF2   118
      CALL CKAA(IA,LCB2)                                                        DEF2   119
      CALL FILLN(0,IA(IPT+1),LEN)                                               DEF2   120
      IF (NAMPTR .GT. 0)  CALL MOVEN(ISYMTB(1,NAMPTR),IA(IPT+1),8)              BIGNAM  45
      IAVPTR = MSIMPT(IRX,JOPCNS,0)                                             OUT1    14
      CALL MOVEN(AA(IAVPTR+2),AA(IPT+IKYOP),4)                                  SUBTY8  12
      IA(IPT+9) = LEN                                                           BIGNAM  46
      IF (IRF.EQ.0) GO TO 350                                                   DEF2   123
      NSTOR  = IA(IPT+9) - 8                                                    BIGNAM  47
C              CONVERTS THE RESPONSE FACTORS                                    CONSTO 139
      CALL MOVEN (AA(IRF+1),AA(IPT+13),NSTOR)                                   BIGNAM  48
      IF (METIN.EQ.1)  CALL KDIV(AA(IPT+13),6,1,METIN)                          BIGNAM  49
      IF (METIN.EQ.1)  CALL KDIV(AA(IPT+16),6,NSTOR-3,METIN)                    BIGNAM  50
  350 CONTINUE                                                                  CONSTO 143
      IA(IDP+5) = IPT + 1 - IAX                                                 CONSTO 144
      IPT = IPT + IA(IPT+9)                                                     BIGNAM  51
  400 CONTINUE                                                                  CONSTO 147
C              WRITE OUT SECOND CONSTRUCTION SF BLOCK                           CONSTO 148
      WRITE (ISTNDF) NCONS, LCB2                                                CONSTO 149
      CALL WRITEN(ISTNDF,IA(IST),LCB2)                                          CONSTO 150
      IF (IREPRT(32) .EQ. 1)                                                    CONSTO 151
     1 CALL DUMPIT(20HCONSTRUCTION WO IFR ,AA(IST),LCB2)                        CONSTO 152
      GO TO 2000                                                                CONSTO 153
 1000 WRITE (ISTNDF) IZERO,IONE                                                 CONSTO 154
      WRITE(ISTNDF) IZERO                                                       CONSTO 155
      WRITE (ISTNDF) IZERO,IONE                                                 CONSTO 156
      WRITE (ISTNDF) IZERO                                                      CONSTO 157
      ICB2 = ICB1 + 1                                                           DEF2   124
      LCB1 = 1                                                                  DEF2   125
      LCB2 = 1                                                                  DEF2   126
 2000 CONTINUE                                                                  CONSTO 158
C              SET GLASS TYPE BLOCK SF POINTER                                  CONSTO 159
      IGTB = ICB1 + LCB1 + LCB2                                                 DEF2   127
      RETURN                                                                    CONSTO 161
      END                                                                       CONSTO 162
      SUBROUTINE DEFFIL(JREF,JOPCDT,IOP,Iphase)                                 DFTEX3 584
C                                                                               DEFFIL   3
C              DO DEFAULT OR LIKE FILL FOR A COMMAND                            DEFFIL   4
C                                                                               DEFFIL   5
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /JOPS  / JSOP,JZOP,JSROP,JCFOP,ISSOPS(7),IZSOPS(3)                 -048b    7
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
      COMMON /DRVALX/ IDRGEO,IDRSAP,IDRCNP,IDRSDP,IDRFRH,IDRFRW,IDRMUP          /DRVALX/ 2
      COMMON  /EWVALX/ IEWLCP, IEWGEO, IEWCNP, IEWSDP, IEWSAP, IEWTLP,          /EWVALX/ 2
     1                  IEWSFP,IEWCRP,IEWVRP                                    /EWVALX/ 3
      COMMON  /IWVALX/ IIWCNP, IIWGEO, IIWSAP, IIWARP, IIWTLP, IIWSFP,          /IWVALX/ 2
     1                  IIWLCP,IIWCRP,KWIWAR,IIWVRP                             /IWVALX/ 3
      COMMON  /UGVALX/ IUGCNP, IUGGEO, IUGSAP, IUGARP, IUGTLP, IUGSFP,          /UGVALX/ 2
     1                  IUGLCP,IUGCRP,KWUGAR,IUGVRP                             /UGVALX/ 3
      COMMON /WIVALX/ IWIGEO,IGTP,IWSDP,IWICRP,IWIMUP,IWIFRH,IWIFRW,            /WIVALX/ 2
     .                IGTPSW                                                    /WIVALX/ 3
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
C                                                                               DEFFIL  19
      IF (JSYMLX.GT.0) CALL LIBREF                                              LIB2     2
      IADIMVsav = IADIMV                                                        NEWEXP  36
      CALL GENDFP(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR)                        DEFFIL  20
      IF (JOPCDT.EQ.JOPSP) THEN                                                 DFTEX3 585
          CALL SPACED(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)             DFTEX3 586
      ELSE IF (JOPCDT.EQ.JOPEW) THEN                                            DFTEX3 589
          CALL WALLD(JREF,JOPCDT,IOP,IEWGEO,IEWLCP,IEWTLP,                      DFTEX3 590
     1        IEWCRP,0,IEWVRP,IEWSAP,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)          DFTEX3 591
      ELSE IF (JOPCDT.EQ.JOPUGW) THEN                                           DFTEX3 592
          CALL WALLD(JREF,JOPCDT,IOP,IUGGEO,IUGLCP,IUGTLP,IUGCRP,IUGARP,        DFTEX3 593
     1        IUGVRP,IUGSAP,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)                   DFTEX3 594
      ELSE IF (JOPCDT.EQ.JOPIW) THEN                                            DFTEX3 595
          CALL WALLD(JREF,JOPCDT,IOP,IIWGEO,IIWLCP,IIWTLP,IIWCRP,IIWARP,        DFTEX3 596
     1        IIWVRP,IIWSAP,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)                   DFTEX3 597
      ELSE IF (JOPCDT.EQ.JOPWIN) THEN                                           DFTEX3 598
          CALL ATTD(JREF,JOPCDT,IWIMUP,IWIGEO,IWIFRH,IWIFRW,LKDAT,              DFTEX3 599
     1        NAMFLG,LSDFLG,LKPTR,Iphase)                                       DFTEX3 600
      ELSE IF (JOPCDT.EQ.JOPDR) THEN                                            DFTEX3 601
          CALL ATTD(JREF,JOPCDT,IDRMUP,IDRGEO,IDRFRH,IDRFRW,LKDAT,              DFTEX3 602
     1        NAMFLG,LSDFLG,LKPTR,Iphase)                                       DFTEX3 603
      ELSE IF (JOPCDT.EQ.JOPSPR .OR. JOPCDT.EQ.JOPSH. OR.                       DFTEX3 604
     1        JOPCDT.EQ.JOPDD .OR. JOPCDT.EQ.JOPFSH .OR. JOPCDT.EQ.JOPBP        DFTEX3 605
     2        .OR. JOPCDT.EQ.JOPRP .OR. JOPCDT.EQ.JOPWF .OR.                    DFTEX3 606
     3        JOPCDT.EQ.JOPSCH .OR. JOPCDT.EQ.JOPDS .OR. JOPCDT.EQ.2            DFTEX4 298
     4        .OR. JOPCDT.EQ.JOPFL .OR. JOPCDT.EQ.JOPTIT                        DFTEX3 608
     5        .OR. JOPCDT.EQ.JOPLUMT .OR. JOPCDT.EQ.JOPLMPT                     -048b    8
     6        .OR. JOPCDT.EQ.JOPPD) THEN                                        -048b    9
          CALL GENCMD(JREF,JOPCDT,0,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)           DFTEX3 610
      ELSE IF (JOPCDT.EQ.JOPSC) THEN                                            DFTEX3 611
          CALL GENCMD(JREF,JOPCDT,1,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)           DFTEX3 612
      ELSE IF (JOPCDT.EQ.JOPGT) THEN                                            DFTEX3 613
          CALL GENCMD(JREF,JOPCDT,0,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)           DFTEX3 614
      ELSE IF (JOPCDT.EQ.JOPWIL) THEN                                           DFTEX3 615
          CALL WINLAYD(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)            DFTEX3 616
      ELSE IF (JOPCDT.EQ.JOPCNS) THEN                                           DFTEX3 617
          CALL CONSTD(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)             DFTEX3 618
      ELSE IF (JOPCDT.EQ.JOPMAT) THEN                                           DFTEX3 619
          CALL GENCMD(JREF,JOPCDT,0,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)           DFTEX3 620
      ELSEIF(JOPCDT.EQ.JOPLR.or.JOPCDT.eq.59.or.JOPCDT.eq.81                    DFTEX3 621
     $                                      .or.JOPCDT.eq.88) THEN              DFTEX3 622
          CALL LSPERD(JREF,JOPCDT,IA,ISYMTB,KONTXT,IREFTB,LKDAT,                DFTEX3 623
     1                NAMFLG,LSDFLG,LKPTR,Iphase)                               DFTEX3 624
      ELSE IF (JOPCDT.EQ.JOPRB) THEN                                            DFTEX3 625
          CALL RBD(JREF,JOPCDT,IA,ISYMTB,KONTXT,IREFTB,LKDAT,                   DFTEX3 626
     1             NAMFLG,LSDFLG,LKPTR,Iphase)                                  DFTEX3 627
      ELSE IF (JOPCDT.EQ.JOPHR) THEN                                            DFTEX3 628
          CALL HRD(JREF,JOPCDT,IA,ISYMTB,KONTXT,IREFTB,LKDAT,                   DFTEX3 629
     1             NAMFLG,LSDFLG,LKPTR,Iphase)                                  DFTEX3 630
      ELSE IF (JOPCDT.EQ.JOPLAY) THEN                                           DFTEX3 631
          CALL LAYERD(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)             DFTEX3 632
      ELSE IF (JOPCDT.EQ.JOPPOL) THEN                                           DFTEX3 633
          CALL POLYD(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)              DFTEX3 634
      ELSE IF (JOPCDT.EQ.JOPLTGS) THEN                                          DFTEX3 635
          CALL LTGSD(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)              DFTEX3 636
      ELSE IF(JOPCDT .EQ. JSOP) THEN                                            DFTEX3 637
        CALL SYSTIN(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)               DFTEX3 638
      ELSE IF(JOPCDT .EQ. JZOP) THEN                                            DFTEX3 639
        CALL ZONEIN(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)               DFTEX3 640
      ELSE IF (JOPCDT.EQ.JCFOP) THEN                                            DFTEX3 641
          CALL CFD(JREF,JOPCDT,IA,ISYMTB,KONTXT,IREFTB,LKDAT,                   DFTEX3 642
     1             NAMFLG,LSDFLG,LKPTR,Iphase)                                  DFTEX3 643
                                                                                DFTEX3 644
      ELSE IF((JOPCDT.ge.63 .and. JOPCDT.le.80) .OR. JOPCDT.EQ.82)  THEN        DFTEX3 647
        CALL GENCMD(JREF,JOPCDT,0,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)             DFTEX3 648
c                                                                               DFTEX3 649
c              ECONOMICS commands                                               DFTEX3 650
c              COMPONENT-COST, BASELINE, RATCHET                                DFTEX3 651
      ELSE IF(JOPCDT.eq.86 .or. JOPCDT.eq.87)  THEN                             DFTEX3 652
        CALL GENCMD(JREF,JOPCDT,0,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)             DFTEX3 653
c              UTILITY-RATE, BLOCK-CHARGE, RATCHET                              DFTEX3 654
      ELSE IF(JOPCDT.eq.89 .or. JOPCDT.eq.90 .or. JOPCDT.eq.91)  THEN           DFTEX3 655
        CALL URIN(JREF,JOPCDT,0,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)               DFTEX3 656
c              COMPLIANCE, COMPLIANCE-DHW, G-FUNCTIONS and PERFORMANCE-DATA     -045     1
c               === plus any command number above these                         -045     2
      ELSE IF(JOPCDT.ge.93 )  THEN                                              -045     3
        CALL GENCMD(JREF,JOPCDT,0,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)             bug     15
      END IF                                                                    DFTEX3 657
C             Re-initialize the scratch default/like data space                 FIX7    54
 5000 IF(LSDFLG .EQ. 1)  THEN                                                   FIX7    55
        NUM = 3                                                                 FIX7    56
      ELSE                                                                      FIX7    57
        NUM = 2                                                                 FIX7    58
      ENDIF                                                                     FIX7    59
      CALL FILLN(0, IA(IADIMV+1), (IADIMVsav-IADIMV))                           NEWEXP  37
      IADIMV = IADIMVsav                                                        NEWEXP  38
      IF (JSYMLX.GT.0) CALL LIBREF                                              FIX7    61
      RETURN                                                                    DEFFIL 101
      END                                                                       DEFFIL 102
      SUBROUTINE EXPARI(JREF,JOPCDT)                                            REFTB1 169
C                                                                               EXPARI   3
C              THIS SUBROUTINE PROCESSES THE EXTRA PARAMETER                    EXPARI   4
C              COMMANDS.  AT THIS TIME, THERE IS ONLY ONE,                      EXPARI   5
C              WALL-PARAMETERS.                                                 EXPARI   6
C                                                                               EXPARI   7
C              EXPARI USES  7 WORDS OF COMMWK                                   EXPARI   8
C                                                                               EXPARI   9
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               EXPARI  11
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /FOR/    IFOR                                                     /FOR/    2
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LBLOCK/ LSFBLK(20),N(20)                                         BLIND    2
      EQUIVALENCE (LWPARB,LSFBLK(4)),(LCB1,LSFBLK(5)),                          /LBLOCK/ 3
     1            (LCB2,LSFBLK(6)),(LCONSB,LSFBLK(6)),                          /LBLOCK/ 4
     2            (LGEOB,LSFBLK(9))                                             BLIND    3
      COMMON  /MESSG/  IU(2),INU(2),IM1(4),IM2(4),IM3(4),IHW(4),IDW(4)          DFTEX3 499
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
C                                                                               EXPARI  28
      DIMENSION IEPTAB(6,3)                                                     4XAA   309
C                                                                               EXPARI  30
      EQUIVALENCE (IKW,COMMWK(1)), (IEPX,COMMWK(2)),                            EXPARI  31
     1            (LKPTR,COMMWK(3)), (LSDPTR,COMMWK(4)),                        EXPARI  32
     2            (NAMPTR,COMMWK(5)), (LKDAT,COMMWK(6)),                        EXPARI  33
     3            (IAVPTR,COMMWK(7))                                            EXPARI  34
C                                                                               EXPARI  35
C              IEPTAB CONTAINS THE ALLOWED VALUES OF THE -FOR-                  EXPARI  36
C              KEYWORD.  THESE WILL BE NAMES OR ABBREVS OF                      EXPARI  37
C              COMMANDS THAT NEED THE EXTRA PARAMETERS.                         EXPARI  38
C                                                                               EXPARI  39
      DATA IEPTAB / 4HTROM,4HBE-W,4HALL-,4HNV  ,4HT-W-,4HNV   ,                 EXPARI  40
     1              4HTROM,4HBE-W,4HALL-,4HV   ,4HT-W-,4HV   ,                  EXPARI  41
     2              4HINTE,4HRIOR,4H-WAL,4HL   ,4HI-W ,4H     /                 EXPARI  42
C                                                                               EXPARI  43
C              -FOR- KEYWORD.                                                   EXPARI  67
C                                                                               EXPARI  68
      DATA NFORVL/3/                                                            EXPARI  69
C                                                                               EXPARI  70
C              CHECK FOR REQUIRED U-NAME                                        EXPARI  71
      CALL LBLCK                                                                EXPARI  72
C              FIND FOR                                                         EXPARI  73
      CALL GETCS                                                                EXPARI  74
      IF (ITERM .EQ. 0)  GO TO 40                                               EXPARI  75
   20 CALL MSG(78)                                                              EXPARI  76
      RETURN                                                                    EXPARI  77
40    if ( ISYMU(1) .eq. IFOR )     goto  80                                    EXPARI  78
C              FIRST WORD NOT FOR                                               EXPARI  79
      CALL BKSPAC                                                               -044c4   1
      GO TO 200                                                                 4XAA   310
C               GET VALUE OF FOR                                                EXPARI  83
   80 CALL GETCS                                                                EXPARI  84
      IF (ITERM .NE. 0) GO TO 20                                                EXPARI  85
C               SEARCH IEPTAB FOR THE VALUE OR ITS ABBREV                       EXPARI  86
      DO 100 I=1,NFORVL                                                         EXPARI  87
          if ( ( KOMPAR( ISYMU, IEPTAB(1,I), 4 ) .ne. 0 ) .or.                  EXPARI  88
     1         ( KOMPAR( ISYMU, IEPTAB(5,I), 2 ) .ne. 0 ) )    goto  200        EXPARI  89
  100 CONTINUE                                                                  EXPARI  90
C              BAD VALUE                                                        EXPARI  91
      CALL MSG(3)                                                               EXPARI  92
  200 CONTINUE                                                                  4XAA   313
      NSAVE = IOPCDT(17,JOPCDT)                                                 OPLST1 319
C              IKW POINTS TO THE FIRST KEYWORD                                  EXPARI  95
      IKW = IOPCDT(9,JOPCDT)                                                    4XAA   314
C              NKW IS THE NUMBER OF KEYWORDS FOR THIS COMMAND                   4XAA   315
      NKW = IOPCDT(10,JOPCDT)                                                   4XAA   316
C              LVAL IS THE NUMBER OF KEYWORD VALUES                             4XAA   318
      LVAL = IOPCDT(16,JOPCDT)                                                  4XAA   319
C              LTOT IS THE TOTAL SIZE OF THE VALUE BLOCK                        4XAA   320
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,JOPCDT)                                 4XAA   321
      IAVPT1 = IAX + NSAVE                                                      EXPR2  182
      IAVPTR = IAVPT1 + LVAL                                                    EXPR2  183
C              CHECK FOR SPACE FOR THE VALUE ARRAY PLUS EXTRA STUFF             EXPARI 101
      CALL CKAA(IA,LTOT)                                                        4XAA   322
      CALL INIDAT(JOPCDT,IA,KONTXT(1,IKW),NKW,AA(IAVPTR+1),IA(IAVPT1+1))        EXPR2  184
C              MOVE KEYWORD VALUES TO THE VALUE ARRAY                           EXPARI 103
      CALL SCAN1(JOPCDT,IA,KONTXT(1,IKW),NKW,AA(IAVPTR+1),IA(IAVPT1+1))         EXPR2  185
C              DO THE DEFAULT FILL.  NO LIKE IS ALLOWED.                        EXPARI 107
      LKPTR  = 0                                                                EXPARI 108
      LSDPTR = 3                                                                EXPARI 109
      NAMPTR = 0                                                                EXPARI 110
      LKDAT = IOPCDT(15,JOPCDT) + 3*IOPCDT(23,JOPCDT)  - 1                      4XAA   325
      CALL LSDFIL(JOPCDT,ISYMTB,KONTXT(1,IKW),NKW,AA(IAVPT1+1),                 EXPR2  186
     1            AA(LKDAT+1),LSDPTR,ISYMTB(1,LKPTR),NAMPTR,LVAL)               FIX7    62
C              SAVE POINTER TO DATA IN REFERENCE TABLE                          EXPARI 114
      IREFTB(2,JREF) = IAX                                                      REFTB1 171
C              SAVE SIZE OF VALUE ARRAY, KEYWORD POINTER, AND                   EXPARI 116
C              NUMBER OF KEYWORDS.                                              EXPARI 117
      IA(IAX+1) = LVAL                                                          4XAA   327
      IA(IAX+2) = IKW                                                           4XAA   328
      IA(IAX+3) = NKW                                                           4XAA   329
C              INCREMENT WORD COUNT                                             EXPARI 121
      IAX = IAX + LTOT                                                          4XAA   330
C              INCREMENT SF BLOCK SIZE                                          EXPARI 123
            LWPARB = LWPARB + LVAL + 5                                          4XAA   331
      RETURN                                                                    EXPARI 125
      END                                                                       EXPARI 126
      SUBROUTINE EXPARO                                                         EXPARO   2
C                                                                               EXPARO   3
C              OUTPUT THE WALL-PARAMETERS BLOCK                                 EXPARO   4
C                                                                               EXPARO   5
C              EXPARO USES  9 WORDS OF COMMWK                                   EXPARO   6
C                                                                               EXPARO   7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON  /CNVALX/ KWLAY,KWUV,KWWALP,KWRO,ILAYP,IUVP,IWALPP,IROP            SUBTY8   1
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LBLOCK/ LSFBLK(20),N(20)                                         BLIND    2
      EQUIVALENCE (LWPARB,LSFBLK(4)),(LCB1,LSFBLK(5)),                          /LBLOCK/ 3
     1            (LCB2,LSFBLK(6)),(LCONSB,LSFBLK(6)),                          /LBLOCK/ 4
     2            (LGEOB,LSFBLK(9))                                             BLIND    3
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
C                                                                               EXPARO  23
      EQUIVALENCE (IKW,COMMWK(1)),    (NKW,COMMWK(2)),                          EXPARO  24
     1            (LVAL,COMMWK(3)),   (IAPTR,COMMWK(4)),                        EXPARO  25
     2            (NAMPTR,COMMWK(5)), (IDP,COMMWK(6)),                          EXPARO  26
     3            (IAVPTR,COMMWK(7)), (IPT,COMMWK(8))                           EXPARO  27
C                                                                               EXPARO  28
      LBLK   = 1                                                                EXPARO  29
C              GET NO. OF TIMES COMMAND WAS USED                                EXPARO  30
      NWPAR  = IOPCDT(13,JOPWP)                                                 EXPARO  31
C              IF NOT USED, GET OUT                                             EXPARO  32
      IF (NWPAR .EQ. 0)  GO TO 1000                                             EXPARO  33
      LBLK   = LWPARB                                                           EXPARO  34
C              GET OUTPUT BUFFER SPACE                                          EXPARO  37
      CALL CKAA(IA,LBLK)                                                        EXPARO  38
C              OUTPUT BUFFER STARTS AT IST                                      EXPARO  39
      IST    = IAX + 1                                                          EXPARO  40
C              IPT POINTS TO WHERE DATA GOES IN THE OUTPUT BUFFER               EXPARO  41
      IPT    = IAX                                                              EXPARO  42
C              ZERO THE OUTPUT BUFFER                                           EXPARO  43
      CALL FILLN(0.,AA(IST),LBLK)                                               EXPARO  44
      DO 100 IWP = 1,NWPAR                                                      EXPARO  45
C              PICK UP NAME AND DATA POINTERS                                   EXPARO  46
      IRX = IOPCDT(14,JOPWP) + IWP - 1                                          REFTB1 173
      NAMPTR = IREFTB(1,IRX)                                                    REFTB1 174
      IDP = IREFTB(2,IRX)                                                       REFTB1 175
      IKW    = IA(IDP+2)                                                        EXPARO  49
      NKW    = IA(IDP+3)                                                        EXPARO  50
C              MOVE NAME INTO OUTPUT BUFFER                                     EXPARO  51
      IF (NAMPTR .GT. 0)  CALL MOVEN(ISYMTB(1,NAMPTR),IA(IPT+1),4)              EXPARO  52
C              SAVE LENGTH                                                      EXPARO  53
      LVAL   = IA(IDP+1)                                                        EXPARO  54
      IA(IPT+5) = LVAL + 5                                                      EXPARO  55
      IAVPTR = MVTOSM(IRX,JOPWP,0)                                              -048x    1
C              CHANGE SYMBOL TABLE POINTERS TO VALUES                           EXPARO  57
      CALL SYMFIL(ISYMTB,KONTXT(1,IKW),NKW,IA(IAVPTR+1))                        EXPARO  58
C              MOVE DATA TO OUTPUT BUFFER                                       EXPARO  59
      CALL MOVEN(AA(IAVPTR+1),AA(IPT+6),LVAL)                                   EXPARO  60
C              SAVE SF POSITION                                                 REFTB1 176
      IA(IDP+4) = IPT + 1 - IAX                                                 REFTB1 177
      IPT    = IPT + LVAL + 5                                                   EXPARO  63
  100 CONTINUE                                                                  EXPARO  65
C              WRITE OUT STANDARD FILE BLOCK                                    EXPARO  66
      WRITE (ISTNDF) NWPAR,LBLK                                                 EXPARO  67
      CALL WRITEN(ISTNDF,IA(IST),LBLK)                                          EXPARO  68
      IF (IREPRT(32) .EQ. 1)                                                    EXPARO  69
     1 CALL DUMPIT(20HWALL-PARAMETERS      ,IA(IST),LBLK)                       EXPARO  70
      GO TO 2000                                                                EXPARO  71
 1000 WRITE (ISTNDF) IZERO,IONE                                                 EXPARO  72
      WRITE (ISTNDF) IZERO                                                      EXPARO  73
 2000 CONTINUE                                                                  EXPARO  74
C              SET CONSTRUCTION BLOCK SF POINTER                                EXPARO  75
      ICB1   = IWPB + LBLK                                                      EXPARO  76
      RETURN                                                                    EXPARO  77
      END                                                                       EXPARO  78
      SUBROUTINE EXTWO                                                          EXTWO    2
C                                                                               EXTWO    3
C               WRITE EXTERIOR WALL BLOCK TO STANDARD FILE                      EXTWO    4
C                                                                               EXTWO    5
C              EXTWO USES 26 WORDS OF COMMWK                                    EXTWO    6
C                                                                               EXTWO    7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON  /CNVALX/ KWLAY,KWUV,KWWALP,KWRO,ILAYP,IUVP,IWALPP,IROP            SUBTY8   1
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON/COUNT/ NOTH,NITH,NSURF,NINSRF                                      OPLST1 259
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /EWVALX/ IEWLCP, IEWGEO, IEWCNP, IEWSDP, IEWSAP, IEWTLP,          /EWVALX/ 2
     1                  IEWSFP,IEWCRP,IEWVRP                                    /EWVALX/ 3
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LBLOCK/ LSFBLK(20),N(20)                                         BLIND    2
      EQUIVALENCE (LWPARB,LSFBLK(4)),(LCB1,LSFBLK(5)),                          /LBLOCK/ 3
     1            (LCB2,LSFBLK(6)),(LCONSB,LSFBLK(6)),                          /LBLOCK/ 4
     2            (LGEOB,LSFBLK(9))                                             BLIND    3
      COMMON /JOPP  / JPMOP,JCLOP,JCHOP,JBLOP,JDWOP,JCTOP,JFCOP,JEGOP,          /JOPP1/  2
     $                JTSOP,JHREOP,JLMOP,JPROP                                  /JOPP1/  3
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
C                                                                               EXTWO   27
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      EQUIVALENCE (IKW,COMMWK(1)),(NKW,COMMWK(2)),                              EXTWO   29
     1            (IDP,COMMWK(3)),(IAVPTR,COMMWK(4)),                           EXTWO   30
     2            (NAMPTR,COMMWK(5)),(IEWWI,COMMWK(6)),                         EXTWO   31
     3            (IEWWIN,COMMWK(7)),(IEWDR,COMMWK(8)),                         EXTWO   32
     4            (IEWDRN,COMMWK(9)),(LBLK,COMMWK(10)),                         EXTWO   33
     5            (IAPTR,COMMWK(11)),                                           EXTWO   34
     6            (IAPTRW,COMMWK(12)),(NW,COMMWK(13)),                          EXTWO   35
     7            (IAPTRD,COMMWK(14)),(ND,COMMWK(15)),                          EXTWO   36
     8            (LVAL,COMMWK(16)),(IST,COMMWK(17)),                           EXTWO   37
     9            (IPT,COMMWK(18)),(IDPN,COMMWK(19)),                           EXTWO   38
     1            (IAT,COMMWK(20)),(ICNT,COMMWK(21)),                           EXTWO   39
     2            (ICONSP,COMMWK(22)),(ATAR,COMMWK(23)),                        EXTWO   40
     3            (AREA,COMMWK(24)),(NRF,COMMWK(25)),                           EXTWO   41
     4            (ICNSVP,COMMWK(26))                                           EXTWO   42
C                                                                               EXTWO   43
      IKYOP = 22                                                                BIGNAM  52
      LBLK = 1                                                                  ATTRF1 151
      NEW = IOPCDT(13,JOPEW)                                                    ATTRF1 152
      IF (NEW.EQ.0) GO TO 1000                                                  ATTRF1 153
      NSP = IOPCDT(13,JOPSP)                                                    ATTRF1 154
      IF (NSP.EQ.0) GO TO 1000                                                  ATTRF1 155
      LBLK = NEW*LEW                                                            ATTRF1 156
      NKW = IOPCDT(10,JOPEW)                                                    ATTRF1 157
      IKW = IOPCDT(9,JOPEW)                                                     ATTRF1 158
      LVAL = IOPCDT(16,JOPEW)                                                   ATTRF1 159
C              SAVE SPACE FOR OUTPUT RECORD                                     ATTRF1 160
      CALL CKAA(IA,LBLK)                                                        ATTRF1 161
C              IST IS WHERE THE OUTPUT BUFFER STARTS                            ATTRF1 162
      IST = IAX + 1                                                             ATTRF1 163
C              IPT IS WHERE THE NEXT EW BLOCK GOES IN THE BUFFER                ATTRF1 164
      IPT = IAX                                                                 ATTRF1 165
C              FILL THE OUTPUT STORAGE AREA WITH ZEROES                         ATTRF1 166
      CALL FILLN(0.,AA(IST),LBLK)                                               ATTRF1 167
      ISFPTR = 1                                                                ATTRF1 168
      GndRef = 0.20                                                             PV2     17
C              LOOP OVER SPACES                                                 ATTRF1 169
      DO 200 ISP = 1,NSP                                                        ATTRF1 170
        IRXSP = IOPCDT(14,JOPSP) + ISP - 1                                      ATTRF1 171
        IDPSP = IREFTB(2,IRXSP)                                                 ATTRF1 172
        IAVPSP = IDPSP + IOPCDT(17,JOPSP) + 2*IOPCDT(16,JOPSP)                  GEO1    62
        IRXFL = IREFTB(4,IRXSP)                                                 GEO1    63
        IAVPFL = IREFTB(2,IRXFL) + IOPCDT(17,JOPFL) + 2*IOPCDT(16,JOPFL)        GEO1    64
        NSPEW = 0                                                               ATTRF1 173
C              SAVE EW SF PTR IN SPACE DATA                                     ATTRF1 174
        IA(IDPSP+3) = ISFPTR                                                    GEO4    12
C              LOOP OVER EXTERIOR WALLS                                         ATTRF1 176
        DO 100 IEW=1,NEW                                                        ATTRF1 177
          IRX = IOPCDT(14,JOPEW) + IEW - 1                                      ATTRF1 178
          JOPcur  = JOPEW                                                       FIX14  195
          JREFcur = IRX                                                         FIX14  196
C              FIND ALL EW'S IN SPACE "IRXSP"                                   ATTRF1 179
          IF (IREFTB(4,IRX).NE.IRXSP) GO TO 100                                 ATTRF1 180
C              ASSEMBLE SF DATA FOR ALL WALLS IN THIS SPACE                     ATTRF1 181
C                                                                               ATTRF1 182
C              PICK UP THE NAME AND DATA POINTER                                ATTRF1 183
          NAMPTR = IREFTB(1,IRX)                                                ATTRF1 184
          IDP = IREFTB(2,IRX)                                                   ATTRF1 185
C              MOVE IN THE NAME                                                 ATTRF1 186
          IF (NAMPTR.GT.0)  CALL MOVEN(ISYMTB(1,NAMPTR),IA(IPT+1),8)            BIGNAM  53
          IF (NAMPTR.EQ.0) CALL MOVEN(IBLANK(1),IA(IPT+1),8)                    BIGNAM  54
C              STORE GEOMETRY POINTER                                           ATTRF1 189
          IA(IPT+<+MXGEOM>+1)  = IA(IDP+12)                                     PV2     18
C              PTR TO ATTACHED SHADES (FINS AND OVERHANGS) AND NUMBER           GEO1    65
          IA(IPT+<+MXSHAD>+1)  = IA(IDP+11)                                     PV2     19
          IA(IPT+<+NXSHAD>+1)  = IA(IDP+10)                                     PV2     20
C              STORE FLOOR FLAG                                                 ATTRF1 191
          IA(IPT+<+IEWTYPE>+1) = IA(IDP+3)                                      PV2     21
C              STORE NO. OF WINDOWS AND DOORS                                   ATTRF1 193
          IA(IPT+<+NWIN>+1)    = IA(IDP+4)                                      PV2     22
          IA(IPT+<+NDOOR>+1)   = IA(IDP+7)                                      PV2     23
C              STORE SF PTRS FOR WINDOW AND DOOR                                ATTRF1 196
          IF (IA(IPT+<+NWIN>+1)  .GT. 0) IA(IPT+<+MXWIN>+1)  = IA(IDP+5)        PV2     24
          IF (IA(IPT+<+NDOOR>+1) .GT. 0) IA(IPT+<+MXDOOR>+1) = IA(IDP+8)        PV2     25
C              CONVERT SYMBOL TABLE POINTERS TO VALUES                          ATTRF1 199
          IAVPTR = MVTOSM(IRX,JOPEW,0)                                          OUT1    16
          CALL SYMFIL(ISYMTB,KONTXT(1,IKW),NKW,IA(IAVPTR+1))                    ATTRF1 201
C              GET POINTER TO CONSTRUCTION INPUT DATA                           ATTRF1 202
          IRXCN = IOPCDT(14,JOPCNS) + IA(IAVPTR+IEWCNP) - 1                     ATTRF1 203
          ICONSP = IREFTB(2,IRXCN)                                              ATTRF1 204
C              CHANGE CONSTRUCTION NO. TO SF POINTER (WO IFR)                   ATTRF1 205
          IA(IAVPTR+IEWCNP) = IA(ICONSP+5)                                      ATTRF1 206
C              SET POINTERS TO OUTSIDE TEMP HISTORY                             ATTRF1 207
          IA(IPT+<+MEWOTH>+1)  = NOTH + 1                                       PV2     26
C              INCREMENT COUNTERS                                               ATTRF1 209
          NRF    = IA(ICONSP+2)                                                 ATTRF1 210
          NOTH   = NOTH + NRF                                                   ATTRF1 211
          NINSRF = NINSRF + 1                                                   ATTRF1 212
          NSURF  = NSURF + 1                                                    ATTRF1 213
C              INTEGER NO. OF SHADE DIVISIONS                                   ATTRF1 214
          IA(IAVPTR+IEWSDP) = INT(AA(IAVPTR+IEWSDP))                            ATTRF1 215
C              MOVE DATA INTO OUTPUT BUFFER                                     ATTRF1 216
          CALL MOVEN(AA(IAVPTR+1),AA(IPT+IKYOP),LVAL-(8+3))                     -047hT   3
c              Save representative ground-reflectance for dummy EWs             PV2     27
          GndRef = AA(IPT+<+GNDREF>+1)                                          PV2     28
          Ngn    = IOPCDT(13,JEGOP)                                             PV2     29
C              SAVE CONSTRUCTION SF POINTER (WITH IFR)                          ATTRF1 218
          IA(IPT+<+MXPROPRL>+1) = IA(ICONSP+4)                                  PV2     30
C              CK IF POLYGON                                                    ATTRF1 220
          IPOLYF = IEWGEO + 9                                                   ATTRF1 221
          IF ( NOVAL(AA(IAVPTR+IPOLYF)) .EQ. 0 )  THEN                          FIX8     7
C              PERIMETER AND GROSS AREA IF RECTANGLE                            GEO1    68
              AA(IPT+<+XSPERM>+1) = 2.*(AA(IAVPTR+IEWGEO+4)                     PV2     31
     &                                            + AA(IAVPTR+IEWGEO+5))        PV2     32
              AA(IPT+<+XGSARE>+1) = AA(IAVPTR+IEWGEO+4)                         PV2     33
     &                                            * AA(IAVPTR+IEWGEO+5)         PV2     34
          ELSE                                                                  ATTRF1 226
C              GROSS AREA AND PERIMETER IF POLYGON                              GEO1    70
              IRXPOL = IOPCDT(14,JOPPOL) + IA(IAVPTR+IPOLYF) - 1                FIX10  128
              IDATX = IREFTB(2,IRXPOL)                                          ATTRF1 229
              IAVPOL = IDATX + IOPCDT(17,JOPPOL) + 2*IOPCDT(16,JOPPOL)          DEF2   128
              CALL POLYICK(IA(IDATX+1),AA(IAVPOL+1),AREA,PERIM,1,IERRFL)        DEF2   129
              AA(IPT+<+XSPERM>+1) = PERIM                                       PV2     35
              AA(IPT+<+XGSARE>+1) = AREA                                        PV2     36
              IF (METIN.EQ.1) CALL KDIV(AA(IPT+<+XSPERM>+1),15,1,METIN)         -42a     1
              IF (METIN.EQ.1) CALL KDIV(AA(IPT+<+XGSARE>+1),9,1,METIN)          -42a     2
          END IF                                                                ATTRF1 232
C             WALL AZIMUTH AND TILT IN BLDG C.S. (RADIANS)                      GEO1    73
          WAZM = AMOD( ( AA(IAVPTR+18)+AA(IAVPSP+4)+AA(IAVPFL+5) )*DTOR,        GEO1    74
     1              6.2831853 )                                                 GEO1    75
          WTILT = AA(IAVPTR+19)*DTOR                                            GEO1    76
          AA(IPT+<+SXSAZM>+1) = SIN(WAZM)                                       PV2     37
          AA(IPT+<+CXSAZM>+1) = COS(WAZM)                                       PV2     38
          AA(IPT+<+SXSTLT>+1) = SIN(WTILT)                                      PV2     39
          AA(IPT+<+XSAZM>+1)  = WAZM                                            PV2     40
          AA(IPT+<+XSTLT>+1)  = WTILT                                           PV2     41
          AA(IPT+<+CXSTLT>+1) = COS(WTILT)                                      PV2     42
C                 WALL AZIMUTH IN SITE C.S.                                     GEO1    83
          IRBP = IOPCDT(14,JOPBP)                                               GEO1    84
          IAVPBP = IREFTB(2,IRBP)+IOPCDT(17,JOPBP)+2*IOPCDT(16,JOPBP)           GEO1    85
          BAZM = AA(IAVPBP+1)*DTOR                                              GEO1    86
          AA(IPT+<+XSANGL>+1) = AMOD( BAZM+WAZM, 6.2831853 )                    PV2     43
C              IF NOT TROMBE WALL                                               ATTRF1 233
          IF (IA(IDP+3) .GE. 3)  GO TO 90                                       ATTRF1 234
C              CALCULATE NET AREA                                               ATTRF1 235
          ATAR = AA(IDP+6) + AA(IDP+9)                                          ATTRF1 236
          AREA   = AA(IPT+<+XGSARE>+1) - ATAR                                   PV2     44
          IF ((AREA .LT. 1.0E-6) .AND. (NAMPTR .GT. 0))                         ATTRF1 238
     1        CALL MSG2(74,IA(IPT+1),ISYMTB(10,NAMPTR),0,DUM)                   SYMSIZ 121
          IF ((AREA .LT. 1.0E-6) .AND. (NAMPTR .LE. 0))                         ATTRF1 240
     1        CALL MSG2(74,IEW,DUM,1,DUM)                                       ATTRF1 241
          AA(IPT+<+XSAREA>+1) = AMAX1(0.001,AREA)                               PV2     45
          GO TO 95                                                              ATTRF1 243
C              TROMBE WALL.  CHECK THAT WALL-PARAMETERS WAS USED.               ATTRF1 244
   90     ICNSVP = ICONSP + IOPCDT(17,JOPCNS) + 2*IOPCDT(16,JOPCNS)             4XAA   334
          IF (IA(ICNSVP+IWALPP) .GT. 0)  GO TO 93                               ATTRF1 246
          IF (NAMPTR.GT.0)                                                      ERR-01 627
     $      CALL MSG2(103,ISYMTB(1,NAMPTR),II,II,II)                            -043a   26
          IF (NAMPTR.LE.0)                                                      ERR-01 629
     $      CALL MSG2(103,'(an unamed EXTERIOR-WALL)       ',II,II)             ERR-01 630
C              MAKE NET AREA EQUAL GROSS AREA                                   ATTRF1 253
   93     AA(IPT+<+XSAREA>+1) = AA(IPT+<+XGSARE>+1)                             PV2     46
C              PUT I-F-R IN WALL DATA BLOCK                                     ATTRF1 255
   95     AA(IPT+<+EW-IFR>+1) = AA(ICONSP+3)                                    PV2     47
C              CONVERTS  I-F-R                                                  ATTRF1 257
          IF (METIN.EQ.1)  CALL KDIV(AA(IPT+<+EW-IFR>+1),32,1,METIN)            PV2     48
c              Turn on shading report for any walls having an                   PV2     49
c              attached PV array                                                PV2     50
          DO  Neq=1,Ngn                                                         PV2     51
            IRXgn = IOPCDT(14,JEGOP) + Neq-1     ! generator ref index          PV2     52
            IDPgn = IREFTB(2,IRXgn)              ! data pointer                 PV2     53
            INgn  = IREFTB(1,IRXgn)              ! generator symbol             PV2     54
c              skip if deleted                                                  PV2     55
            IF (IDPgn .EQ. 0  .OR.  INgn .EQ. 0)  CYCLE                         PV2     56
            IDPgn3 = IDPgn + IOPCDT(17,JEGOP) + 2*IOPCDT(16,JEGOP)              PV2     57
c              check if PV array mounted on exterior wall or roof               PV2     58
            IEWgn  = IA(IDPgn3 + (<+gn:EXTERIOR-WALL>-<+gn:TYPE>) + 1)          PV2     59
            IF (IEWgn .EQ. NAMPTR)  THEN                                        PV2     60
c                 turn on shading report                                        PV2     61
              IA(IPT+<+mx:SHADE-REPORT>+1) = 1                                  PV2     62
c                 move in the name of PV array                                  PV2     63
              II = 1                                                            PV2     64
              CALL MOVEN(ISYMTB(1,INgn),IA(IPT+<+mx;PV-ARRAY>+1),8)             PV2     65
              EXIT                                                              PV2     66
            ENDIF                                                               PV2     67
          ENDDO                                                                 PV2     68
C              NUMBER OF EW'S IN SPACE                                          ATTRF1 259
          NSPEW = NSPEW + 1                                                     ATTRF1 260
C              INCREMENT SF BUFFER POINTER                                      ATTRF1 261
          IPT    = IPT + LEW                                                    ATTRF1 262
C              STANDARD FILE POINTER TO EW'S IN SPACE                           ATTRF1 263
          ISFPTR = IPT + 1 - IAX                                                ATTRF1 264
  100   CONTINUE                                                                ATTRF1 265
C              SAVE THE NO. OF EW'S IN THE SPACE DATA                           ATTRF1 266
        IA(IDPSP+2) = NSPEW                                                     GEO4    13
        IF (NSPEW.EQ.0) IA(IDPSP+3)=0                                           GEO4    14
  200 CONTINUE                                                                  ATTRF1 269
c                                                                               PV2     69
c              Create dummy exterior walls for use by building shades           PV2     70
c              requesting a shading report                                      PV2     71
      NEWshade = 0                                                              -042L2   1
      NGShade  = IOPCDT(13,JOPSH) + IOPCDT(13,JOPFSH)                           -047i    1
      IF (NGShade .GT. 0)  THEN                                                 PV2     73
        DO  IShadeType=1,2                       ! building and fixed           PV2     74
          IF (IShadeType .EQ. 1)  THEN                                          PV2     75
            JOPSHX = JOPSH                       ! building                     PV2     76
          ELSE                                                                  PV2     77
            JOPSHX = JOPFSH                      ! fixed                        PV2     78
          ENDIF                                                                 PV2     79
          IRXsh0 = IOPCDT(14,JOPSHX)             ! ref index - base             PV2     80
          Nshade = IOPCDT(13,JOPSHX)             ! number of shades             PV2     81
          DO  IShade=1,NShade                                                   PV2     82
            IRXsh  = IRXsh0 + IShade - 1         ! shade ref index              PV2     83
            IDPsh  = IREFTB(2,IRXsh)             ! shade data ptr               PV2     84
            IDPsh4 = IDPsh + IOPCDT(17,JOPSHX)+IOPCDT(16,JOPSHX)*3              PV2     85
c              skip if no shading report                                        PV2     86
            IF (IA(IDPsh4+19) .EQ. 0)  CYCLE                                    PV2     87
c              create a dummy EW and populate w/ shade data                     PV2     88
            NEWshade = NEWshade + 1              ! number of dummys             PV2     89
            LBLK     = LBLK + LEW                ! SF buffer length             PV2     90
            CALL CKAA(IA, LBLK)                                                 PV2     91
            CALL FILLN(0., IA(IPT+1), LEW)                                      PV2     92
c              move in the name of the shade                                    PV2     93
            INshade = IREFTB(1,IRXsh)                                           PV2     94
            IF (INshade .GT. 0)  THEN                                           PV2     95
              CALL MOVEN(ISYMTB(1,INshade),IA(IPT+1),8)                         PV2     96
            ELSE                                                                PV2     97
              CALL MOVEN(IBLANK(1),IA(IPT+1),8)                                 PV2     98
            ENDIF                                                               PV2     99
c              shade geometry, shade divisions, area, form factor               PV2    100
            IA(IPT+<+MXGEOM>+1)  = IA(IDPsh+2)                                  PV2    101
            IA(IPT+<+NXSXDIV>+1) = 20                                           PV2    102
            AA(IPT+<+XGSARE>+1)  = AA(IDPsh4+9)*AA(IDPsh4+10)                   PV2    103
            AA(IPT+<+XSAREA>+1)  = AA(IPT+<+XGSARE>+1)                          PV2    104
            AA(IPT+<+EWSKYFF>+1) = UNFILD                                       PV2    105
            AA(IPT+<+EWGNDFF>+1) = UNFILD                                       PV2    106
c              ground reflectance - use last specified                          PV2    107
            AA(IPT+<+GNDREF>+1)  = GndRef                                       PV2    108
c              wall azimuth and tilt in Bldg C.S. (radians)                     PV2    109
            WAZM                 = AMOD(AA(IDPsh4+11)*DTOR, 6.2831853)          PV2    110
            WTILT                = AA(IDPsh4+12) * DTOR                         PV2    111
            AA(IPT+<+XSAZM>+1)   = WAZM                                         PV2    112
            AA(IPT+<+SXSAZM>+1)  = SIN(WAZM)                                    PV2    113
            AA(IPT+<+CXSAZM>+1)  = COS(WAZM)                                    PV2    114
            AA(IPT+<+XSTLT>+1)   = WTILT                                        PV2    115
            AA(IPT+<+SXSTLT>+1)  = SIN(WTILT)                                   PV2    116
            AA(IPT+<+CXSTLT>+1)  = COS(WTILT)                                   PV2    117
            IA(IPT+<+mx:SHADE-REPORT>+1) = 1                                    PV2    118
c              move in the name of the pv array (shading flag > 1)              PV2    119
            IF (IA(IDPsh4+19) .GT. 1)  THEN                                     PV2    120
              II = 1                                                            PV2    121
              CALL MOVEN(ISYMTB(1,IA(IDPsh4+19)),                               PV2    122
     &                   IA(IPT+<+mx;PV-ARRAY>+1),8)                            PV2    123
              IA(IDPsh4+19) = 1                                                 PV2    124
            ENDIF                                                               PV2    125
c              increment SF buffer pointer                                      PV2    126
            IPT = IPT + LEW                                                     PV2    127
          ENDDO  ! IShade                                                       PV2    128
        ENDDO    ! IShadeType                                                   PV2    129
      ENDIF      ! NGShade .gt. 0                                               PV2    130
c                 Write out standard file                                       PV2    131
 1000 WRITE (ISTNDF) NEW+NEWshade,LBLK                                          PV2    132
      CALL WRITEN(ISTNDF,IA(IST),LBLK)                                          PV2    133
      IF (IREPRT(32) .EQ. 1)                                                    PV2    134
     &  CALL DUMPIT(20HEXTERIOR-WALL       ,IA(IST),LBLK)                       PV2    135
C              SET UNDERGROUND SURFACE BLOCK STANDARD FILE POINTER              EXTWO  191
      IUGB   = IEWB + LBLK                                                      EXTWO  192
      JOPcur  = 0                                                               FIX14  197
      JREFcur = 0                                                               FIX14  198
      RETURN                                                                    EXTWO  193
      END                                                                       EXTWO  194
      SUBROUTINE FLOORO                                                         FLOORO   2
C                                                                               FLOORO   3
C              WRITE FLOOR BLOCK TO STANDARD FILE                               FLOORO   4
C                                                                               FLOORO   5
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISPLST/ ISPLST(9999),ISPLOC(9999)                                 -048a    8
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
      COMMON  /SPVALX/ IHP, IAP, IVP, ISHPP, IWP, IDPTHP, ISCP, IPRCAP,         /SPVALX/ 2
     1                 IWFP, ILTP, IINFMP, INZHP, IPLP, IPSP, ILKWP,            /SPVALX/ 3
     2                 ITKWP, IEKWP, IPAP, ILWSFP, ITWSFP, IPOLSP,              GEO4     1
     3                 IEQWFP, KWH, KWA, KWV, KWSHP, KWW, KWDPTH,               /SPVALX/ 5
     4                 KWSC, KWLT, KWINFM, KWNZH, KWPL, KWPS,                   /SPVALX/ 6
     5                 KWLKW, KWTKW, KWEKW, KWPA, KWLWSF, KWTWSF,               /SPVALX/ 7
     6                 KWEWSF, IFURTP, IFURFP, IFURWP, IFLRWP, KWWF,            /SPVALX/ 8
     7                 KWFLRW,ILTSP,NINFKY,INFKYP(20),DEFINF(10,4),             LTSYS1   2
     8                 ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM,             DFTEXP 197
     9                 ISPLOCP,ISPDIS,NSPDIS                                    DFTEXP 198
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
C                                                                               FLOORO  23
      COMMON /FLVALX/ IFLGEO,IFLSP,IFLPOL,IFLSHP,IFLH,IFLA,IFLV,                DFTEX3 497
     1                IFLWP,IFLDP,IFLSH                                         DFTEX3 498
      DIMENSION LABEL(8)                                                        FIX8     8
      DATA LABEL /4HDefa,4Hult ,4HFloo,4Hr   ,                                  FIX8     9
     $            4H    ,4H    ,4H    ,4H    /                                  FIX8    10
      IF (NFL.GT.0) GO TO 100                                                   GEO3    13
C              CREATE A DEFAULT FLOOR                                           GEO3    14
      NSAVE = IOPCDT(17,JOPFL)                                                  GEO3    15
      IOPCDT(13,JOPFL) = 1                                                      GEO3    16
      CALL SYMDEF( ISYMTB,  LABEL, 1, JSYM )                                    GEO3    17
      NSP1 = IOPCDT(13,JOPSP)                                                   GEO3    18
      JREF = IOPCDT(14,JOPFL)                                                   GEO3    19
      ISYMTB(12,JSYM) = 1                                                       GEO3    20
      IREFTB(1,JREF) = JSYM                                                     GEO3    21
      IREFTB(2,JREF) = 0                                                        DFTEX3 659
      IREFTB(2,JREF) = 0                                                        DFTEX3 660
      IREFTB(5,JREF) = IPACKB(1,2,2,IREFTB(5,JREF))                             DFTEX3 661
      NumNewRef      = NumNewRef + 1                                            DFTEX3 662
      LVAL = IOPCDT(16,JOPFL)                                                   GEO3    23
      IAVPT1 = IAX + NSAVE                                                      GEO3    24
      IAVPT2 = IAVPT1 + LVAL                                                    GEO3    25
      IAVPTR = IAVPT2 + LVAL                                                    GEO3    26
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,JOPFL)                                  GEO3    27
      CALL CKAA(IA,LTOT)                                                        GEO3    28
      CALL FILLN(IUNDE,IA(IAVPT2+1),LVAL)                                       GEO3    29
      CALL FILLN(IUNDE,IA(IAVPTR+1),LVAL)                                       GEO3    30
      CALL FILLN(0,IA(IAVPT1+1),LVAL)                                           GEO3    31
      IA(IAVPT1+IFLSP) = 1                                                      GEO3    32
      IA(IAVPTR+IFLSP) = 0                                                      GEO3    33
C              ATTACH ALL SPACES TO THE DEFAULT FLOOR                           GEO3    34
      DO I=1,NSP1                                                               GEO3    35
        JREFSP = IOPCDT(14,JOPSP) + I - 1                                       GEO3    36
        IREFTB(4,JREFSP) = JREF                                                 GEO3    37
      END DO                                                                    GEO3    38
      IKW = IOPCDT(9,JOPFL)                                                     GEO3    39
      NKW = IOPCDT(10,JOPFL)                                                    GEO3    40
      NAMPTR = 1                                                                GEO3    41
      LKDAT = IOPCDT(15,JOPFL) + 3*IOPCDT(23,JOPFL) - 1                         GEO3    42
      CALL LSDFIL(JOPFL,ISYMTB,KONTXT(1,IKW),NKW,AA(IAVPT1+1),                  GEO3    43
     1            AA(LKDAT+1),3,ISYMTB(1,JSYM),NAMPTR,LVAL)                     FIX7    63
      IAX = IAX + LTOT                                                          GEO3    45
      NFL = 1                                                                   GEO3    46
      RETURN                                                                    GEO3    47
  100 IKYOP = 11                                                                BIGNAM  81
      LEN    = 1                                                                FLOORO  26
C               OBTAIN SOME QUANTITIES FROM THE COMMAND TABLE                   FLOORO  27
      NKW    = IOPCDT(10,JOPFL)                                                 FLOORO  29
      IKW    = IOPCDT(9,JOPFL)                                                  FLOORO  30
      LVAL   = IOPCDT(16,JOPFL)                                                 FLOORO  32
C               SAVE SPACE FOR OUTPUT RECORD BUFFER                             FLOORO  33
      LEN    = NFL*LFL                                                          FLOORO  34
      CALL CKAA(IA,LEN)                                                         FLOORO  35
      IAXS   = IAX + LEN                                                        FLOORO  36
C               IST IS WHERE THE OUTPUT BUFFER STARTS                           FLOORO  37
      IST    = IAX + 1                                                          FLOORO  38
C               IPT IS WHERE THE NEXT FLOOR GOES                                FLOORO  39
      IPT    = IAX                                                              FLOORO  40
C               FILL OUTPUT BUFFER WITH ZEROES                                  FLOORO  41
      CALL FILLN(0.,AA(IST),LEN)                                                FLOORO  42
C               COUNTER OF TOTAL SPACES FOR PREVIOUS FLOORS                     FLOORO  43
      DO 500 IFL=1,NFL                                                          FLOORO  45
C               PICK UP NAME AND DATA POINTERS                                  FLOORO  46
      IRX = IOPCDT(14,JOPFL) + IFL - 1                                          FLOORO  47
      NAMPTR = IREFTB(1,IRX)                                                    FLOORO  48
      IDP = IREFTB(2,IRX)                                                       FLOORO  49
      IAVPTR = MVTOSM(IRX,JOPFL,0)                                              OUT1    17
C               MOVE IN NAME                                                    FLOORO  51
      IF (NAMPTR.GT.0) CALL MOVEN(ISYMTB(1,NAMPTR),IA(IPT+1),8)                 BIGNAM  82
C              SET THE NO. OF SPACES ON THIS FLOOR                              ATTRF1 274
      IA(IPT+9) = IA(IDP+2)                                                     BIGNAM  83
C              SET THE SF PTR TO SPACES ON FLOOR                                ATTRF1 276
      IA(IPT+10) = IA(IDP+3)                                                    BIGNAM  84
C              ERROR IF FLOOR HAS NO SPACES                                     ATTRF1 278
C              throw ERROR is FLOOR has not SPACEs                              FIX14  199
      IF (IA(IPT+9).EQ.0) CALL MSG2(90,IOPCDT(1,JOPFL),IA(IPT+1),               FIX14  200
     $                                 IOPCDT(1,JOPSP),DUM)                     FIX14  201
C               CONVERT SYMBOL TABLE POINTERS TO VALUES                         FLOORO  87
      CALL SYMFIL(ISYMTB,KONTXT(1,IKW),NKW,IA(IAVPTR+1))                        FLOORO  88
C               MOVE DATA INTO OUTPUT BUFFER (not compliance keywords)          -044b2   1
      CALL MOVEN(AA(IAVPTR+1),AA(IPT+IKYOP),LVAL-19)                            -047fT   4
      IPT    = IPT + LFL                                                        FLOORO  91
  500 CONTINUE                                                                  FLOORO  93
C               WRITE OUT STANDARD FILE                                         FLOORO  94
      WRITE (ISTNDF) NFL, LEN                                                   FLOORO  95
      CALL WRITEN(ISTNDF,IA(IST),LEN)                                           FLOORO  96
      IF (IREPRT(32) .EQ. 1)                                                    FLOORO  97
     1 CALL DUMPIT(20HFLOOR               ,IA(IST),LEN)                         FLOORO  98
C              SET INTERIOR WALL SF POINTER                                     ATTRF1 280
      IIWB = IFLB + LEN                                                         ATTRF1 281
      RETURN                                                                    FLOORO 105
      END                                                                       FLOORO 106
      SUBROUTINE GENCMD(JREF,JOPCDT,ISCFLG,LKDAT,NAMPTR,LSDPTR,LKPTR,           DFTEX3 663
     $                Iphase)                                                   DFTEX3 664
C                                                                               GENCOM   3
C               PROCESS GENERAL INPUT COMMAND                                   GENCOM   4
C                                                                               GENCOM   5
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
      COMMON /JOPP  / JPMOP,JCLOP,JCHOP,JBLOP,JDWOP,JCTOP,JFCOP,JEGOP,          /JOPP1/  2
     $                JTSOP,JHREOP,JLMOP,JPROP                                  /JOPP1/  3
C                                                                               GENCOM  22
C               SET SOME POINTERS                                               GENCOM  25
      NSAVE = IOPCDT(17,JOPCDT)                                                 OPLST1 337
C               IKW IS THE FIRST KEYWORD FOR THE COMMAND                        GENCOM  26
      IKW    = IOPCDT(9,JOPCDT)                                                 GENCOM  27
C               NKW IS THE NUMBER OF KEYWORDS FOR THIS COMMAND                  GENCOM  28
      NKW    = IOPCDT(10,JOPCDT)                                                GENCOM  29
C               LVAL IS THE LENGTH OF THE VALUE ARRAY                           GENCOM  30
      LVAL   = IOPCDT(16,JOPCDT)                                                GENCOM  31
C              IAVPT1 IS THE START OF THE VALUE BLOCK                           4XAA   349
      IF (IOPCDT(11,JOPCDT).GT.0) THEN                                          DEF2   131
          IAXS = IREFTB(2,JREF)                                                 DEF2   132
      ELSE                                                                      DEF2   133
          IAXS = IOPCDT(14,JOPCDT)                                              DEF2   134
      END IF                                                                    DEF2   135
      IAVPT1 = IAXS + NSAVE                                                     DEF2   136
C              LTOT IS THE TOTAL SIZE OF THE VALUE BLOCK                        4XAA   351
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,JOPCDT)                                 4XAA   352
C              IF TYPE DEPENDENT KEYWORDS, SELECT THE RIGHT SET                 SUBTY5   2
      IF (IOPCDT(24,JOPCDT).LT.0) THEN                                          SUBTY5   3
          ITYPEF= IUNPKB(1,5,IA(IAVPT1+1))                                      DFTEX4 300
          ITYPE = IUNDE                                                         DFTEX4 301
C              First look in local object's user input (val or exp val)         DFTEX4 302
          IF((ITYPEF.eq.3).or.(ITYPEF.eq.5).or.(ITYPE.EQ.11).or.                COMPLY  44
     $       (ITYPE.EQ.13).or.(ITYPE.EQ.15)) THEN                               COMPLY  45
            ITYPE = IA(IAVPT1+LVAL+1)                                           DFTEX4 304
          ELSE IF((ITYPEF.eq.4).or.(ITYPEF.eq.6).or.                            COMPLY  46
     $            (ITYPE.EQ.12).or.(ITYPE.EQ.14)) THEN                          COMPLY  47
            ITYPE = IA(IAVPT1+2*LVAL+1)                                         DFTEX4 306
          ELSE IF(LSDPTR .eq. 1) THEN                                           DFTEX4 307
C              LIKE data                                                        DFTEX4 308
            ITYPE = IA(LKDAT+1)                                                 DFTEX4 309
          ELSE IF(LSDPTR .eq. 3) THEN                                           DFTEX4 310
C              DEFAULT (DOE-2 or User) data                                     DFTEX4 311
            ITYPED = IUNPKB(1,5,IA(LKDAT+1-LVAL))                               DFTEX4 312
            IF((ITYPED.eq.1).OR.(ITYPED.eq.7)) THEN                             DFTEX4 313
     $        ITYPE=IA(LKDAT+1)                                                 DFTEX4 314
            IF((ITYPED.eq.2).OR.(ITYPED.eq.8)) THEN                             DFTEX4 315
     $        ITYPE=IA(IAVPT1+2*LVAL+1)                                         DFTEX4 316
          ENDIF                                                                 DFTEX4 317
          IF (NOVAL(ITYPE).EQ.0) THEN                                           DFTEX4 318
              ITYPE = 1                                                         SUBTY5   6
          ELSE                                                                  SUBTY5   7
              ITYPE = ISYMTB(12,ITYPE)                                          SUBTY5   8
          END IF                                                                SUBTY5   9
          IKW = IKW + (ITYPE-1)*NKW                                             SUBTY5  10
      END IF                                                                    SUBTY5  11
      IF (ISCFLG .eq. 0)  THEN                                                  FIX7    64
        LVALF = LVAL                                                            FIX7    65
      ELSE                                                                      FIX7    66
        LVALF = IOPCDT(23,JOPCDT)                                               FIX7    67
      END IF                                                                    FIX7    68
      IF (ISCFLG.EQ.0) THEN                                                     DEF2   137
      IF(Iphase .ne. 2)  THEN                                                   DFTEX3 665
        CALL LSDFIL(JOPCDT,ISYMTB,KONTXT(1,IKW),NKW,AA(IAVPT1+1),               DFTEX3 666
     $              AA(LKDAT+1),LSDPTR,ISYMTB(1,LKPTR),NAMPTR,LVALF)            DFTEX3 667
        IF(Iphase .eq. 1) RETURN                                                DFTEX3 668
      ENDIF                                                                     DFTEX3 669
C               Special ERROR message checks                                    -035    20
C               (move to expression based erros later when available)           -035    21
C                                                                               -035    22
      IF (JOPCDT .eq. JCLOP)  THEN                                              -041N    3
C               CIRCULATION-LOOP command                                        -041N    4
C               Check that SECONDARY loops are served by PRIMARY                -041N    5
        iDP3      = IAVPT1 + 2*LVAL                ! 3rd value array            -041N    6
        iType     = 1                              ! Type index                 -041N    7
        iSubType  = <+lp:SUBTYPE>-<+lp:TYPE> + 1   ! SUBTYPE index              -041N    8
        iPrimLoop = <+lp:PRIMARY>-<+lp:TYPE> + 1   ! PRIMARY-LOOP index         -041N    9
C                                                                               -041N   10
C               Are SUBTYPE and PRIMARY-LOOP specified?                         -041N   11
        IF (NOVAL(IA(iDP3+iSubType))  .ne. 0  .and.                             -041N   12
     &      NOVAL(IA(iDP3+iPrimLoop)) .ne. 0)  THEN                             -041N   13
C               Is SUBTYPE SECONDARY?                                           -041N   14
          IF (ISYMTB(12,IA(iDP3+iSubType)) .eq. 2) THEN                         -041N   15
            CALL PTRS(JOPCDT,ISYMTB(12,IA(iDP3+iPrimLoop)),                     -041N   16
     &                IRX,IDP,IAVP)                                             -041N   17
C               Is PRIMARY-LOOP a PRIMARY?                                      -041N   18
            IF (NOVAL(IA(IAVP+iSubType)) .ne. 0)  THEN                          -041N   19
              IF (ISYMTB(12,IA(IAVP+iSubType)) .ne. 1)                          -041N   20
     &          CALL MSG2( 178,ISYMTB(1,IA(iDP3+iPrimLoop)),                    -041N   21
     &               KONTXT(1,IKW+iPrimLoop-1),KONTXT(1,IKW+iSubType-1),        -041N   22
     &               ISYMTB(1,IA(iDP3+iSubType)-1) )                            -041N   23
            ENDIF                                                               -041N   24
C              Does PRIMARY-LOOP TYPE match that of SECONDARY?                  -041N   25
            IF (NOVAL(IA(IAVP+iType)) .ne. 0)  THEN                             -041N   26
              IF (ISYMTB(12,IA(IAVP+iType)) .ne.                                -041N   27
     &            ISYMTB(12,IA(iDP3+iType)))                                    -041N   28
     &          CALL MSG2( 178,ISYMTB(1,IA(iDP3+iPrimLoop)),                    -041N   29
     &               KONTXT(1,IKW+iPrimLoop-1),KONTXT(1,IKW+iType-1),           -041N   30
     &               ISYMTB(1,IA(iDP3+iType)) )                                 -041N   31
            ENDIF                                                               -041N   32
          ENDIF                                                                 -041N   33
        ENDIF                                                                   -041N   34
      ELSEIF (JOPCDT .eq. JEGOP)  THEN                                          -041N   35
C               ELEC-GENERATOR command                                          -041N   36
C               A PV-Module can be referenced by only one inverter              -041N   37
        iDP3      = IAVPT1 + 2*LVAL                 ! 3rd value array           -041N   38
        iType     = 1                               ! TYPE index                -041N   39
        iPVmodule = <+gn:PV-MODULE>-<+lp:TYPE> + 1  ! PV-MODULE index           -041N   40
C                                                                               -041N   41
        IF (ISYMTB(12,IA(iDP3+iType)) .eq. 4  .and.                             -041N   42
     &      NOVAL(IA(iDP3+iPVmodule)) .ne. 0)  THEN                             -041N   43
          Ngn = IOPCDT(13,JEGOP)                                                -041N   44
          DO  Neq=1,Ngn                                                         -041N   45
            IRXgn = IOPCDT(14,JEGOP) + Neq-1     ! generator ref index          -041N   46
            IDPgn = IREFTB(2,IRXgn)              ! data pointer                 -041N   47
            INgn  = IREFTB(1,IRXgn)              ! generator symbol             -041N   48
c              skip if deleted or this generator                                -041N   49
            IF (INgn .eq. 0  .or.  IDPgn .eq. 0  .or.                           -041N   50
     &                             IRXgn .eq. JREF)  Cycle                      -041N   51
            IDPgn3 = IDPgn + NSAVE + 2*LVAL                                     -041N   52
            IF (IA(iDP3+iPVmodule) .eq. IA(iDPgn3+iPVmodule))  THEN             -041N   53
              CALL MSG2(154,IOPCDT(1,69),ISYMTB(1,IA(iDP3+iPVmodule)),          -041N   54
     $                 IOPCDT(1,JOPCDT),ISYMTB(1,IREFTB(1,IRXgn)))              -041N   55
              AA(iDP3+iPVmodule) = REQD                                         -041N   56
              Exit                                                              -041N   57
            ENDIF                                                               -041N   58
          ENDDO                                                                 -041N   59
        ENDIF                                                                   -041N   60
c              PERFORMANCE-DATA                                                 -045     4
      ELSEIF (JOPCDT .eq. 96)  THEN                                             -045     5
      ENDIF                                                                     -041N   61
C                                                                               -041N   62
      END IF                                                                    DEF2   140
      RETURN                                                                    GENCOM  80
      END                                                                       GENCOM  81
      SUBROUTINE GENDFP(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR)                  GENDFP   2
C                                                                               GENDFP   3
C              SET THE POINTER TO THE LIKE OR DEFAULT DATA                      GENDFP   4
C                                                                               GENDFP   5
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
C                                                                               GENDFP  12
C              GET LOCATION OF LIKE OR DEFAULT DATA                             GENDFP  13
      IF(JREF .ne. 0)  THEN                                                     COMB03  36
        JREFLK = IREFTB(3,JREF)                                                 COMB03  37
      ELSE                                                                      COMB03  38
        JREFLK = 0                                                              COMB03  39
      ENDIF                                                                     COMB03  40
      LVAL  = IOPCDT(16,JOPCDT)                                                 COMB03  41
      NSAVE = IOPCDT(17,JOPCDT)                                                 COMB03  42
      JTYPcur = 1                                                               DFTEX4 319
      IF (JREFLK.EQ.0) THEN                                                     GENDFP  17
C              DEFAULT                                                          GENDFP  18
          LSDFLG = 3                                                            GENDFP  19
          NAMFLG = 0                                                            GENDFP  20
          IF(JREF .ne. 0)  THEN                                                 COMB03  43
            LKPTR = IREFTB(1,JREF)                                              COMB03  44
          ELSE                                                                  COMB03  45
            LKPTR = 0                                                           COMB03  46
          ENDIF                                                                 COMB03  47
C              Check for TYPE command                                           COMB02  68
          IF(IOPCDT(24,JOPCDT).eq.0 .OR. IOPCDT(24,JOPCDT).eq.1) THEN           SUBTY1 102
C              If not TYPE command just pick up 2nd 2X default array            COMB02  70
            LKDAT = IOPCDT(15,JOPCDT) + 3*IOPCDT(23,JOPCDT) - 1                 COMB02  71
          ELSE                                                                  COMB02  72
C              If TYPE command then pick up TYPE keyword sombol value           COMB02  73
            IAVPT1 = IREFTB(2,JREF)+NSAVE                                       DFTEX4 320
            ITYPEF = IUNPKB(1,5,IA(IAVPT1+1))                                   DFTEX4 321
            ITYPE  = IUNDE                                                      DFTEX4 322
C              First look in local object's user input (val or exp val)         DFTEX4 323
            IF((ITYPEF.eq. 3).or.(ITYPEF.eq. 5).or.                             COMPLY  48
     $         (ITYPEF.eq. 9).or.(ITYPEF.eq.11).or.                             COMPLY  49
     $         (ITYPEF.eq.13).or.(ITYPEF.eq.15)) THEN                           COMPLY  50
              ITYPE = IA(IAVPT1+LVAL+1)                                         COMPLY  51
            ELSE IF((ITYPEF.eq. 2).or.(ITYPEF.eq. 4).or.                        COMPLY  52
     $              (ITYPEF.eq. 6).OR.(ITYPEF.eq. 8).or.                        COMPLY  53
     $              (ITYPEF.eq.10).OR.(ITYPEF.eq.12).or.                        COMPLY  54
     $              (ITYPEF.eq.14)) THEN                                        COMPLY  55
              ITYPE = IA(IAVPT1+2*LVAL+1)                                       COMPLY  56
            ENDIF                                                               COMPLY  57
            IF(NOVAL(ITYPE) .eq. 0) THEN                                        DFTEX4 330
              ITYPE = 1                                                         COMB02  76
            ELSE                                                                COMB02  77
              ITYPE = ISYMTB(12,ITYPE)                                          COMB02  78
            ENDIF                                                               COMB02  79
            JTYPcur = ITYPE                                                     DFTEX4 331
C              then skip ITYPE number of 2X pairs and then the first            COMB02  80
C              2X of the pair for this TYPE                                     COMB02  81
            LKDAT = IOPCDT(15,JOPCDT) - 1                                       COMB02  82
     $              + (4*(ITYPE-1)+3)*IOPCDT(23,JOPCDT)                         COMB02  83
          ENDIF                                                                 COMB02  84
      ELSE                                                                      GENDFP  23
          LSDFLG = 1                                                            GENDFP  24
          NAMFLG = 1                                                            GENDFP  25
          LKPTR = IREFTB(1,JREFLK)                                              GENDFP  26
          LKDAT = IREFTB(2,JREFLK) + NSAVE + 2*LVAL                             GENDFP  27
      END IF                                                                    GENDFP  28
C              Make copy of 3 or 2X like/default array so that both type and    FIX7    70
C              data are available and can be modified prior to LSDFIL           FIX7    71
C              ====== this temporary data will be over-written by the           FIX7    72
C              ====== next action that causes use of IAX based data             FIX7    73
C              ====== so such action cannot be taken prior to LSDFIL call!      FIX7    74
      IF(LSDFLG .EQ. 1)  THEN                                                   FIX7    75
        NUM = 3                                                                 FIX7    76
      ELSE                                                                      FIX7    77
        NUM = 2                                                                 FIX7    78
      ENDIF                                                                     FIX7    79
      IF(IAX .LT. IADIMV-LVAL*NUM) THEN                                         NEWEXP  39
        IADIMV= IADIMV - LVAL*NUM                                               NEWEXP  40
        CALL MOVEN(AA(LKDAT+1-LVAL*(NUM-1)),AA(IADIMV+1),LVAL*NUM)              NEWEXP  41
        LKDAT = IADIMV + LVAL*(NUM-1)                                           NEWEXP  42
      ELSE                                                                      NEWEXP  43
        CALL MSG2(159,IAX+LVAL*NUM,IAXMAX,IAXMAX,IAXMAX)                        NEWEXP  44
        CALL ABT                                                                NEWEXP  45
      ENDIF                                                                     NEWEXP  46
      RETURN                                                                    GENDFP  32
      END                                                                       GENDFP  33
      SUBROUTINE GENINP(JREF,JOPCDT,NAMREQ)                                     GENINP   2
C                                                                               GENINP   3
C              READ IN ALL THE USER SPECIFIED VALUES FOR A COMMAND              GENINP   4
C              FROM A BDL INPUT FILE AND STORE THEM IN THE                      GENINP   5
C              COMMAND'S VALUE BLOCK IN AA.                                     GENINP   6
C                                                                               GENINP   7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
C                                                                               GENINP  14
C              CHECK FOR REQUIRED NAME                                          GENINP  15
      IF (NAMREQ.EQ.1) CALL LBLCK                                               GENINP  16
C              SET SOME POINTERS                                                GENINP  17
C              NSAVE IS THE NUMBER OF ITEMS BEFORE THE VALUE ARRAY              GENINP  18
      NSAVE = IOPCDT(17,JOPCDT)                                                 GENINP  19
C              IKW IS THE FIRST KEYWORD FOR COMMAND                             GENINP  20
      IKW    = IOPCDT(9,JOPCDT)                                                 GENINP  21
C              NKW IS THE NUMBER OF KEYWORDS FOR THIS COMMAND                   GENINP  22
      NKW    = IOPCDT(10,JOPCDT)                                                GENINP  23
C              LVAL IS THE NUMBER OF VALUES FOR THIS COMMAND                    GENINP  24
      LVAL   = IOPCDT(16,JOPCDT)                                                GENINP  25
C              LTOT IS THE TOTAL SIZE OF THE VALUE BLOCK                        GENINP  28
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,JOPCDT)                                 GENINP  29
C              IF THERE IS NOT YET DATA SPACE, CREATE IT                        LIB2     3
      IF (IOPCDT(11,JOPCDT).GT.0) THEN                                          LIB2     4
C              COMMAND HAS REFERENCE TABLE                                      LIB2     5
          IF (IREFTB(2,JREF).LE.0) THEN                                         LIB2     6
              CALL CKAA(IA,LTOT)                                                LIB2     7
              CALL FILLN(0,IA(IAX+1),LTOT)                                      COMB03  48
              IREFTB(2,JREF) = IAX                                              LIB2     8
              IAX = IAX + LTOT                                                  LIB2     9
          END IF                                                                LIB2    10
          IDP = IREFTB(2,JREF)                                                  LIB2    11
      ELSE                                                                      LIB2    12
C              COMMAND DOESN'T HAVE REFERENCE TABLE                             LIB2    13
          IF (IOPCDT(14,JOPCDT).LE.0) THEN                                      LIB2    14
              CALL CKAA(IA,LTOT)                                                LIB2    15
              CALL FILLN(0,IA(IAX+1),LTOT)                                      COMB03  49
              IOPCDT(14,JOPCDT) = IAX                                           LIB2    16
              IAX = IAX + LTOT                                                  LIB2    17
          END IF                                                                LIB2    18
          IDP = IOPCDT(14,JOPCDT)                                               LIB2    19
      END IF                                                                    LIB2    20
C              IAVPT1 IS THE START OF THE VALUE BLOCK                           LIB2    21
      IAVPT1 = IDP + NSAVE                                                      LIB2    22
      IAVPTR = IAVPT1 + LVAL                                                    EXPR2  187
C              INITIALIZE THE DATA ARRAY                                        DFTEX3 670
      CALL INIDAT(JOPCDT,IA,KONTXT(1,IKW),NKW,AA(IAVPTR+1),IA(IAVPT1+1))        DFTEX3 671
C              CHECK TO SEE IF LIKE IS USED                                     GENINP  30
      CALL LIKINP(ISYMTB,IOPCDT(11,JOPCDT),LKPTR,JOPCDT,JREF,1,IERRF)           DFTEX3 672
C              IF LIKE, SAVE LIKE'D REFERENCE TABLE INDEX                       GENINP  37
      IF (LKPTR.GT.0) IREFTB(3,JREF) = IOPCDT(14,JOPCDT) +                      GENINP  38
     1    ISYMTB(12,LKPTR) - 1                                                  GENINP  39
C              CHECK FOR AND INPUT TYPE                                         SUBTY1 105
      CALL TYPINP(JREF,JOPCDT,IKW,IAVPT1,ITYPE,IERRF)                           SUBTY1 106
C              IF THERE ARE TYPE DEPENDENT KEYWORDS, SET IKW TO THE             SUBTY3  80
C              CORRECT SET OF KEYWORDS                                          SUBTY3  81
      IF (IOPCDT(24,JOPCDT).LT.0 .AND. ITYPE.GT.0) THEN                         SUBTY3  82
          ITYPE = ISYMTB(12,ITYPE)                                              SUBTY3  83
          IKW = IKW + (ITYPE-1)*NKW                                             SUBTY3  84
      END IF                                                                    SUBTY3  85
C              GO GET ALL THE KEYWORD VALUES                                    GENINP  42
      CALL SCAN1(JOPCDT,IA,KONTXT(1,IKW),NKW,AA(IAVPTR+1),IA(IAVPT1+1))         EXPR2  189
C              ZERO THE SAVE AREA                                               GENINP  46
      CALL FILLN(0,IA(IDP+1),NSAVE)                                             LIB2    23
                                                                                -048e    5
c              Set SHAPE for BUILDING-SHADE or FIXED-SHADE if not               -048e    6
c              specified                                                        -048e    7
      IF (JOPCDT .eq. JOPSH  .or.  JOPCDT .eq. JOPFSH) THEN                     -048e    8
        iSHAPE = IA(IAVPTR+21)      ! symbol index of SHAPE                     -048e    9
        IF (NOVAL(iSHAPE) .eq. 0) THEN                                          -048e   10
c              SHAPE not defined; default to POLYGON if spec'd                  -048e   11
          iPOLYGON = IA(IAVPTR+20)   ! symbol index of polygon                  -048e   12
          HEIGHT   = AA(IAVPTR+9)    ! height if rectangle                      -048e   13
          WIDTH    = AA(IAVPTR+10)   ! width if rectangle                       -048e   14
          IAVPT3   = IAVPTR + LVAL   ! 3rd data array                           -048e   15
          IF (NOVAL(iPOLYGON) .ne. 0  .and.                                     -048e   16
     &        NOVAL(HEIGHT) .eq. 0  .and.  NOVAL(WIDTH) .eq. 0) THEN            -048e   17
c              Polygon spec'd, but not height or width; set to POLYGON          -048e   18
            IA(IAVPT1+21) = 5        ! user specified input                     -048e   19
            IA(IAVPTR+21) = 750      ! polygon symbol index                     -048e   20
            IA(IAVPT3+21) = 750                                                 -048e   21
          ELSEIF (NOVAL(iPOLYGON) .eq. 0  .and.                                 -048e   22
     &           (NOVAL(HEIGHT) .eq. 1  .or.  NOVAL(WIDTH) .eq. 1)) THEN        -048e   23
c              Polygon not spec'd, but height and/or width are; set             -048e   24
c              to RECTANGLE                                                     -048e   25
            IA(IAVPT1+21) = 5        ! user specified input                     -048e   26
            IA(IAVPTR+21) = 749      ! rectangle symbol index                   -048e   27
            IA(IAVPT3+21) = 749                                                 -048e   28
          ELSE                                                                  -048e   29
c              Either both polygon and height/width spec'd, or neither          -048e   30
c              is specified; let default to REQD                                -048e   31
          ENDIF                                                                 -048e   32
        ENDIF                                                                   -048e   33
      ENDIF                                                                     -048e   34
      RETURN                                                                    GENINP  56
      END                                                                       GENINP  57
      SUBROUTINE GENLIB(JREF,JOPCDT)                                            GENLIB   2
C                                                                               GENLIB   3
C              READ IN ALL THE SPECIFIED VALUES FOR AN ENTRY                    GENLIB   4
C              FROM THE LIBRARY FILE AND STORE THEM IN THE                      GENLIB   5
C              OBJECT'S VALUE BLOCK IN AA.                                      GENLIB   6
C                                                                               GENLIB   7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
C              SET SOME POINTERS                                                GENLIB  15
C              NSAVE IS THE NUMBER OF ITEMS BEFORE THE VALUE ARRAY              GENLIB  16
      NSAVE = IOPCDT(17,JOPCDT)                                                 GENLIB  17
C              IKW IS THE FIRST KEYWORD FOR COMMAND                             GENLIB  18
      IKW    = IOPCDT(9,JOPCDT)                                                 GENLIB  19
C              NKW IS THE NUMBER OF KEYWORDS FOR THIS COMMAND                   GENLIB  20
      NKW    = IOPCDT(10,JOPCDT)                                                GENLIB  21
C              LVAL IS THE NUMBER OF VALUES FOR THIS COMMAND                    GENLIB  22
      LVAL   = IOPCDT(16,JOPCDT)                                                GENLIB  23
C              LTOT IS THE TOTAL SIZE OF THE VALUE BLOCK                        GENLIB  24
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,JOPCDT)                                 GENLIB  25
C              IF THERE IS NOT YET DATA SPACE, CREATE IT                        GENLIB  26
      IF (IOPCDT(11,JOPCDT).GT.0) THEN                                          GENLIB  27
C              COMMAND HAS REFERENCE TABLE                                      GENLIB  28
          IF (IREFTB(2,JREF).LE.0) THEN                                         GENLIB  29
              CALL CKAA(IA,LTOT)                                                GENLIB  30
              CALL FILLN(0,IA(IAX+1),LTOT)                                      GENLIB  31
              IREFTB(2,JREF) = IAX                                              GENLIB  32
              IAX = IAX + LTOT                                                  GENLIB  33
          END IF                                                                GENLIB  34
          IDP = IREFTB(2,JREF)                                                  GENLIB  35
      ELSE                                                                      GENLIB  36
C              COMMAND DOESN'T HAVE REFERENCE TABLE                             GENLIB  37
          IF (IOPCDT(14,JOPCDT).LE.0) THEN                                      GENLIB  38
              CALL CKAA(IA,LTOT)                                                GENLIB  39
              CALL FILLN(0,IA(IAX+1),LTOT)                                      GENLIB  40
              IOPCDT(14,JOPCDT) = IAX                                           GENLIB  41
              IAX = IAX + LTOT                                                  GENLIB  42
          END IF                                                                GENLIB  43
          IDP = IOPCDT(14,JOPCDT)                                               GENLIB  44
      END IF                                                                    GENLIB  45
C              IAVPT1 IS THE START OF THE VALUE BLOCK                           GENLIB  46
      IAVPT1 = IDP + NSAVE                                                      GENLIB  47
      IAVPTR = IAVPT1 + LVAL                                                    GENLIB  48
C              INITIALIZE THE DATA ARRAY                                        GENLIB  49
      CALL INIDAT(JOPCDT,IA,KONTXT(1,IKW),NKW,AA(IAVPTR+1),IA(IAVPT1+1))        GENLIB  50
C              CHECK FOR AND INPUT TYPE                                         GENLIB  51
      CALL TYPINP(JREF,JOPCDT,IKW,IAVPT1,ITYPE,IERRF)                           GENLIB  52
C              IF THERE ARE TYPE DEPENDENT KEYWORDS, SET IKW TO THE             GENLIB  58
C              CORRECT SET OF KEYWORDS                                          GENLIB  59
      IF (IOPCDT(24,JOPCDT).LT.0 .AND. ITYPE.GT.0) THEN                         GENLIB  60
          ITYPE = ISYMTB(12,ITYPE)                                              GENLIB  61
          IKW = IKW + (ITYPE-1)*NKW                                             GENLIB  62
      END IF                                                                    GENLIB  63
C              GO GET ALL THE KEYWORD VALUES                                    GENLIB  64
      CALL SCAN1(JOPCDT,IA,KONTXT(1,IKW),NKW,AA(IAVPTR+1),IA(IAVPT1+1))         GENLIB  65
C              ZERO THE SAVE AREA                                               GENLIB  66
      CALL FILLN(0,IA(IDP+1),NSAVE)                                             GENLIB  67
      RETURN                                                                    GENLIB  68
      END                                                                       GENLIB  69
      SUBROUTINE GENSUB(JREF,JOPCDT,ISCP,JOPSC)                                 GENSUB   2
C                                                                               GENSUB   3
C              DO A SUBCOMMAND FILL FOR A COMMAND                               GENSUB   4
C                                                                               GENSUB   5
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
C                                                                               GENSUB  12
C              ISCP IS POSITION OF SUB-C IN VAL ARRAY                           GENSUB  13
C              JOPSC IS THE SUB-C POSITION IN IOPCDT                            GENSUB  14
C                                                                               GENSUB  15
C              START OF THIS COMMANDS DATA BLOCK                                GENSUB  16
      IAVPT1 = IREFTB(2,JREF) + IOPCDT(17,JOPCDT)                               GENSUB  17
C              START OF INPUT VALUES                                            GENSUB  18
      IAVPTR = IAVPT1 + IOPCDT(16,JOPCDT)                                       GENSUB  19
C              GET SYMBOL TABLE INDEX OF SUBCOMMAND                             GENSUB  20
      NAMPTR = IA(IAVPTR+ISCP)                                                  GENSUB  21
C              SET SUB-COMMAND REFERENCING KEYWORD VALUE ARRAY TO               FIX7    83
C              INITIALIZATION VALUES AS THE DATA BECOMES LOCAL NOW              FIX7    84
      IA(IAVPT1+ISCP) = 0                                                       FIX7    85
C     IA(IAVPTR+ISCP) = ITYPLS(UNDEF(1))                                        FIX7    86
      IA(IAVPTR+ISCP+IOPCDT(16,JOPCDT)) = ITYPLS(UNDEF(1))                      FIX7    87
      IF (ITYPLS(NAMPTR) .EQ. ITYPLS(UNDEF(1))) RETURN                          GENSUB  22
C              GET FIRST AND NUMBER OF KEYS FOR SUB-C                           GENSUB  23
      ISIKW  = IOPCDT(9,JOPSC)                                                  GENSUB  24
      ISNKW  = IOPCDT(10,JOPSC)                                                 GENSUB  25
C              NUMBER OF SUBCOMMAND VALUES                                      GENSUB  26
      LSVAL = IOPCDT(16,JOPSC)                                                  GENSUB  27
C              PICK UP STARTING POS OF SUB-COMMAND DATA                         GENSUB  28
      ISDAT1 = ISDPTR(AA,AA,NAMPTR,JOPSC)                                       FIX11  435
      IF (ISDAT1.EQ.0) RETURN                                                   FIX11  436
      ISDAT = ISDAT1 + IOPCDT(17,JOPSC) + 2*LSVAL                               FIX11  437
      CALL SUBSAV(JOPCDT,KONTXT(1,ISIKW),ISNKW,AA(IAVPT1+1),                    FIX12    5
     1            AA(ISDAT1+1),LSVAL)                                           FIX12    6
C              GO FILL THE VALUE ARRAY                                          GENSUB  32
      CALL LSDFIL(JOPCDT,ISYMTB,KONTXT(1,ISIKW),ISNKW,AA(IAVPT1+1),             GENSUB  33
     1            AA(ISDAT+1),2,ISYMTB(1,NAMPTR),1,LSVAL)                       FIX7    88
      RETURN                                                                    GENSUB  35
      END                                                                       GENSUB  36
      SUBROUTINE GEOSP(JREF,JOPCDT)                                             GEOSP    2
C                                                                               GEOSP    3
C              CREATE THE GEOMETRY DATA IN THE BUILDING COORD                   GEOSP    4
C              SYSTEM FOR ALL THE WALLS, WINDOWS AND DOORS OF                   GEOSP    5
C              A SPACE                                                          GEOSP    6
C                                                                               GEOSP    7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON  /SPVALX/ IHP, IAP, IVP, ISHPP, IWP, IDPTHP, ISCP, IPRCAP,         /SPVALX/ 2
     1                 IWFP, ILTP, IINFMP, INZHP, IPLP, IPSP, ILKWP,            /SPVALX/ 3
     2                 ITKWP, IEKWP, IPAP, ILWSFP, ITWSFP, IPOLSP,              GEO4     1
     3                 IEQWFP, KWH, KWA, KWV, KWSHP, KWW, KWDPTH,               /SPVALX/ 5
     4                 KWSC, KWLT, KWINFM, KWNZH, KWPL, KWPS,                   /SPVALX/ 6
     5                 KWLKW, KWTKW, KWEKW, KWPA, KWLWSF, KWTWSF,               /SPVALX/ 7
     6                 KWEWSF, IFURTP, IFURFP, IFURWP, IFLRWP, KWWF,            /SPVALX/ 8
     7                 KWFLRW,ILTSP,NINFKY,INFKYP(20),DEFINF(10,4),             LTSYS1   2
     8                 ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM,             DFTEXP 197
     9                 ISPLOCP,ISPDIS,NSPDIS                                    DFTEXP 198
C                                                                               GEOSP   13
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON /ZWALOC/ XF0,YF0,ZF0,AF0,SAF,CAF,XZ0,YZ0,ZZ0,AZ0,SAZ,CAZ,          /ZWALOC/ 2
     1                XW0,YW0,ZW0,AW0,TW0,SAW,CAW,STW,CTW,XW,YW                 /ZWALOC/ 3
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      IDP = IREFTB(2,JREF)                                                      GEO4    18
      IAVPTR = IDP + IOPCDT(17,JOPCDT) + 2*IOPCDT(16,JOPCDT)                    GEO4    19
      IGDP = IA(IDP+1)                                                          GEO4    20
      W = AA(IAVPTR+IWP)                                                        GEO4    21
      D = AA(IAVPTR+IDPTHP)                                                     GEO4    22
      IPOLSX = IA(IAVPTR+IPOLSP)                                                GEO4    23
      IF (NOVAL(IPOLSX).EQ.1) THEN                                              GEO4    24
          IPOLX = ISYMTB(12,IPOLSX)                                             GEO4    25
          IPOLRX = IOPCDT(14,JOPPOL) + IPOLX - 1                                FIX9    17
          IPOLDP = IREFTB(2,IPOLRX)                                             GEO4    27
          IAVPOL = IPOLDP + IOPCDT(17,JOPPOL) + 2*IOPCDT(16,JOPPOL)             DEF2   141
          CALL GEOSTR(IA(IPOLDP+1),0,0,IAVPOL+1,IGDP)                           DEF2   142
      ELSE IF (NOVAL(W).EQ.1 .AND. NOVAL(D).EQ.1) THEN                          GEO4    29
          CALL GEOSTR(2,D,W,0,IGDP)                                             GEO4    30
      END IF                                                                    GEO4    31
      IA(IDP+1) = IGDP                                                          GEO4    32
      IF (IGDP.GT.0) CALL GEOPR(JOPCDT,JREF)                                    GEO4    33
C                                                                               GEO4    34
C              EXTERIOR WALLS                                                   GEOSP   14
      NEW = IOPCDT(13,JOPEW)                                                    GEOSP   15
      IF (NEW.GT.0) THEN                                                        GEOSP   16
          DO IEW=1,NEW                                                          GEOSP   17
              IEWRX = IOPCDT(14,JOPEW) + IEW - 1                                GEOSP   18
              IF (IREFTB(4,IEWRX).EQ.JREF) THEN                                 GEOSP   19
                  CALL GEOWL(IEWRX,JOPEW)                                       GEOSP   20
              END IF                                                            GEOSP   21
          END DO                                                                GEOSP   22
      END IF                                                                    GEOSP   23
C              INTERIOR WALLS                                                   GEOSP   24
      NIW = IOPCDT(13,JOPIW)                                                    GEOSP   25
      IF (NIW.GT.0) THEN                                                        GEOSP   26
          DO IIW=1,NIW                                                          GEOSP   27
              IIWRX = IOPCDT(14,JOPIW) + IIW - 1                                GEOSP   28
              IF (IREFTB(4,IIWRX).EQ.JREF) THEN                                 GEOSP   29
                  CALL GEOWL(IIWRX,JOPIW)                                       GEOSP   30
              END IF                                                            GEOSP   31
          END DO                                                                GEOSP   32
      END IF                                                                    GEOSP   33
C              UNDERGROUND WALLS                                                GEOSP   34
      NUG = IOPCDT(13,JOPUGW)                                                   GEOSP   35
      IF (NUG.GT.0) THEN                                                        GEOSP   36
          DO IUG=1,NUG                                                          GEOSP   37
              IUGRX = IOPCDT(14,JOPUGW) + IUG - 1                               GEOSP   38
              IF (IREFTB(4,IUGRX).EQ.JREF) THEN                                 GEOSP   39
                  CALL GEOWL(IUGRX,JOPUGW)                                      GEOSP   40
              END IF                                                            GEOSP   41
          END DO                                                                GEOSP   42
      END IF                                                                    GEOSP   43
C                                                                               GEO6     6
C              TRANSFORM DAYLTG REF POINTS AND VIEW AZIMUTH FROM SPACE C.S.     GEO6     7
C              TO BLDG C.S.; STORE IN AA, WITH PTRS IN SPACE NSAVE AREA         GEO6     8
C                                                                               GEO6     9
      IF(ISYMTB(12,IA(IAVPTR+103)).NE.1) GO TO 390                              LTSYS1  79
      IF(NOVAL(AA(IAVPTR+104)) .EQ. 0 .OR.                                      NEWEXP  47
     1   NOVAL(AA(IAVPTR+105)) .EQ. 0 .OR.                                      NEWEXP  48
     2   NOVAL(AA(IAVPTR+106)) .EQ. 0) GO TO 390                                NEWEXP  49
C              REF TABLE INDEX OF PARENT FLOOR                                  GEO6    14
      IRXFL = IREFTB(4,JREF)                                                    GEO6    15
C              SPACE POSITION VARIABLES IN FLOOR COORD SYS FOR /ZWALOC/         GEO6    16
      XZ0 = AA(IAVPTR+1)                                                        GEO6    17
      YZ0 = AA(IAVPTR+2)                                                        GEO6    18
      ZZ0 = AA(IAVPTR+3)                                                        GEO6    19
      AZ0 = AA(IAVPTR+4)*DTOR                                                   GEO6    20
      SAZ = SIN(AZ0)                                                            GEO6    21
      CAZ = COS(AZ0)                                                            GEO6    22
C              FLOOR POSITION VARIABLES IN BLDG COORD SYS FOR /ZWALOC/          GEO6    23
      IAVPFL = IREFTB(2,IRXFL) + IOPCDT(17,JOPFL) +                             GEO6    24
     1            2*IOPCDT(16,JOPFL)                                            GEO6    25
      XF0 = AA(IAVPFL+2)                                                        GEO6    26
      YF0 = AA(IAVPFL+3)                                                        GEO6    27
      ZF0 = AA(IAVPFL+4)                                                        GEO6    28
      AF0 = AA(IAVPFL+5)*DTOR                                                   GEO6    29
      SAF = SIN(AF0)                                                            GEO6    30
      CAF = COS(AF0)                                                            GEO6    31
C              FIRST DAYLTG REFERENCE POINT                                     GEO6    32
C              IA(IDP+9) STORES THE AA INDEX OF THE TRANSFORMED DATA            GEO6    33
      IRFPT = IA(IDP+9)                                                         GEO6    34
      IF (IRFPT.LE.0) THEN                                                      GEO6    35
          CALL CKAA(AA,4)                                                       GEO6    36
          IRFPT = IAX                                                           GEO6    37
          IA(IDP+9) = IRFPT                                                     GEO6    38
          IAX = IAX + 4                                                         GEO6    39
      END IF                                                                    GEO6    40
      CALL MOVEN(AA(IAVPTR+104),AA(IRFPT+1),3)                                  LTSYS1  83
      CALL LOCBCS(AA(IRFPT+1),1,3,0.)                                           LTSYS1  84
C              VIEW AZIMUTH                                                     LTSYS1  85
      IF(NOVAL(AA(IAVPTR+116)) .NE. 0) THEN                                     NEWEXP  50
C              FLOOR AZIM + SPACE AZIM + VIEW AZIM                              LTSYS1  87
          AA(IRFPT+4) = AF0 + (AA(IAVPTR+116) + AA(IAVPTR+4))*DTOR              LTSYS1  88
      ELSE                                                                      GEO6    47
C              VIEW AZIM NOT INPUT. SET PARALLEL TO FIRST EXTERIOR              GEO6    48
C              WINDOW IN THIS SPACE                                             GEO6    49
         NEW = IOPCDT(13,JOPEW)                                                 GEO6    50
         DO IEW = 1,NEW                                                         GEO6    51
            CALL PTRS(JOPEW,IEW,IRXEW,IDPEW,IAVPEW)                             GEO6    52
            IF(IREFTB(4,IRXEW).EQ.JREF) THEN                                    GEO6    53
               NWIN = IOPCDT(13,JOPWIN)                                         GEO6    54
               DO IWIN = 1,NWIN                                                 GEO6    55
                  CALL PTRS(JOPWIN,IWIN,IRXWIN,IDPWIN,IAVPWIN)                  GEO6    56
                  IF(IREFTB(4,IRXWIN).EQ.IRXEW) THEN                            GEO6    57
C             WALL AZIM + SPACE AZIM + PI/2 + FLOOR AZIM                        GEO6    58
                     AA(IRFPT+4) = (AA(IAVPEW+18) +                             GEO6    59
     1                  AA(IAVPTR+4))*DTOR + PIOVR2 + AF0                       GEO6    60
                     GO TO 350                                                  GEO6    61
                  ENDIF                                                         GEO6    62
               ENDDO                                                            GEO6    63
            ENDIF                                                               GEO6    64
         ENDDO                                                                  GEO6    65
         AA(IRFPT+4) = 0.                                                       GEO6    66
  350    CONTINUE                                                               GEO6    67
      ENDIF                                                                     GEO6    68
C              SECOND REFERENCE POINT                                           GEO6    69
C              IA(IDP+10) STORES THE AA INDEX TO THE TRANSFORMED DATA           GEO6    70
      IF(NOVAL(AA(IAVPTR+107)) .EQ. 0 .OR.                                      NEWEXP  51
     1   NOVAL(AA(IAVPTR+108)) .EQ. 0 .OR.                                      NEWEXP  52
     2   NOVAL(AA(IAVPTR+109)) .EQ. 0) GO TO 390                                NEWEXP  53
      VWAZ = AA(IRFPT+4)                                                        GEO6    74
      IRFPT = IA(IDP+10)                                                        GEO6    75
      IF (IRFPT.LE.0) THEN                                                      GEO6    76
          CALL CKAA(AA,4)                                                       GEO6    77
          IRFPT = IAX                                                           GEO6    78
          IA(IDP+10) = IRFPT                                                    GEO6    79
          IAX = IAX + 4                                                         GEO6    80
      END IF                                                                    GEO6    81
      CALL MOVEN(AA(IAVPTR+107),AA(IRFPT+1),3)                                  LTSYS1  92
      CALL LOCBCS(AA(IRFPT+1),1,3,0.)                                           GEO6    83
C              VIEW AZIMUTH2                                                    -44d5    6
      IF(NOVAL(AA(IAVPTR+215)) .NE. 0) THEN                                     -44d5    7
C              Transform to BCS -> FLOOR AZIM + SPACE AZIM + VIEW AZIM          -44d5    8
        AA(IRFPT+4) = AF0 + (AA(IAVPTR+215) + AA(IAVPTR+4))*DTOR                -44d5    9
      ELSE                                                                      -44d5   10
C              USE VIEW AZIMUTH From 1st system as the default                  -44d5   11
        AA(IRFPT+4) = VWAZ                                                      -44d5   12
      ENDIF                                                                     -44d5   13
  390 CONTINUE                                                                  GEO6    86
      RETURN                                                                    GEOSP   44
      END                                                                       GEOSP   45
      SUBROUTINE GEOSHD(JREF,JOPCDT)                                            GEOSHD   2
C                                                                               GEOSHD   3
C              CREATE GEOMETRY DATA IN THE BUILDING COORD                       GEOSHD   4
C              SYSTEM FOR BUILDING AND FIXED SHADES                             GEOSHD   5
C                                                                               GEOSHD   6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /BSVALX/ IBSGEO                                                   /BSVALX/ 2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
C                                                                               GEOSHD  13
      IDP = IREFTB(2,JREF)                                                      GEOSHD  14
      IAVPTR = IDP + IOPCDT(17,JOPCDT) + 2*IOPCDT(16,JOPCDT)                    GEOSHD  15
      IGDP = IA(IDP+1)                                                          GEOSHD  16
      IGEOS = IBSGEO                                                            GEOSHD  17
      H = AA(IAVPTR+IGEOS+4)                                                    GEOSHD  18
      W = AA(IAVPTR+IGEOS+5)                                                    GEOSHD  19
C                                                                               -048   220
      ! Pointer to the polygon                                                  -048   221
      iSHAPE = ISYMTB(12,IA(IAVPTR+21))                                         -048   222
      IF (iSHAPE .eq. 2) THEN  ! polygon symbol value                           -048   223
        IPOLSX = IA(IAVPTR+20)                                                  -048   224
        IPOLRX = IOPCDT(14,JOPPOL) + ISYMTB(12,IPOLSX) - 1                      -048   225
        IPOLDP = IREFTB(2, IPOLRX)                                              -048   226
        IAVPOL = IPOLDP + IOPCDT(17,JOPPOL) + 2*IOPCDT(16,JOPPOL)               -048   227
        CALL GEOSTR(IA(IPOLDP+1),0,0,IAVPOL+1,IGDP)                             -048   228
      ELSE IF(NOVAL(H).EQ.1 .AND. NOVAL(W).EQ.1) THEN                           -048   229
        CALL GEOSTR(2,H,W,0,IGDP)                                               -048   230
      ENDIF                                                                     -048   231
C                                                                               -048   232
      IA(IDP+1) = IGDP                                                          GEOSHD  21
      CALL GEOPR(JOPCDT,JREF)                                                   GEOSHD  22
      RETURN                                                                    GEOSHD  23
      END                                                                       GEOSHD  24
      SUBROUTINE GEOFLR(JREF,JOPCDT)                                            GEOFLR   2
C                                                                               GEOFLR   3
C              CREATE GEOMETRY DATA IN BUILDING COORDS FOR                      GEOFLR   4
C              ALL THE WALLS, WINDOWS, AND DOORS ON A FLOOR.                    GEOFLR   5
C                                                                               GEOFLR   6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON /FLVALX/ IFLGEO,IFLSP,IFLPOL,IFLSHP,IFLH,IFLA,IFLV,                DFTEX3 497
     1                IFLWP,IFLDP,IFLSH                                         DFTEX3 498
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
C                                                                               GEOFLR  12
      IDP = IREFTB(2,JREF)                                                      GEO4    36
      IAVPTR = IDP + IOPCDT(17,JOPCDT) + 2*IOPCDT(16,JOPCDT)                    GEO4    37
      IGDP = IA(IDP+1)                                                          GEO4    38
      IPOLSX = IA(IAVPTR+IFLPOL)                                                GEO4    39
      W = AA(IAVPTR+IFLWP)                                                      DFTEX3 673
      D = AA(IAVPTR+IFLDP)                                                      DFTEX3 674
      IF (NOVAL(IPOLSX).EQ.1) THEN                                              GEO4    40
          IPOLX = ISYMTB(12,IPOLSX)                                             GEO4    41
          IPOLRX = IOPCDT(14,40) + IPOLX - 1                                    GEO4    42
          IPOLDP = IREFTB(2,IPOLRX)                                             GEO4    43
          IAVPOL = IPOLDP + IOPCDT(17,JOPPOL) + 2*IOPCDT(16,JOPPOL)             DEF2   143
          CALL GEOSTR(IA(IPOLDP+1),0,0,IAVPOL+1,IGDP)                           DEF2   144
      ELSE IF (NOVAL(W).EQ.1 .AND. NOVAL(D).EQ.1) THEN                          DFTEX3 675
          CALL GEOSTR(2,D,W,0,IGDP)                                             DFTEX3 676
      END IF                                                                    GEO4    45
      IA(IDP+1) = IGDP                                                          GEO4    46
      IF (IGDP.GT.0) CALL GEOPR(JOPCDT,JREF)                                    GEO4    47
C                                                                               GEO4    48
      NSP = IOPCDT(13,JOPSP)                                                    GEOFLR  13
      IF (NSP.GT.0) THEN                                                        GEOFLR  14
          DO ISP=1,NSP                                                          GEOFLR  15
              ISPRX = IOPCDT(14,JOPSP) + ISP - 1                                GEOFLR  16
              IF (IREFTB(4,ISPRX).EQ.JREF) THEN                                 GEOFLR  17
                  CALL GEOSP(ISPRX,JOPSP)                                       GEOFLR  18
              END IF                                                            GEOFLR  19
          END DO                                                                GEOFLR  20
      END IF                                                                    GEOFLR  21
      RETURN                                                                    GEOFLR  22
      END                                                                       GEOFLR  23
      SUBROUTINE GEOATT(JREF,JOPCDT)                                            GEOATT   2
C                                                                               GEOATT   3
C              CREATE GEOMETRY DATA IN BUILDING COORDINATE SYSTEM               GEOATT   4
C              FOR AN ATTACHMENT AND ITS FINS, OVERHANG, AND SETBACK            GEOATT   5
C                                                                               GEOATT   6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON /DRVALX/ IDRGEO,IDRSAP,IDRCNP,IDRSDP,IDRFRH,IDRFRW,IDRMUP          /DRVALX/ 2
      COMMON /WIVALX/ IWIGEO,IGTP,IWSDP,IWICRP,IWIMUP,IWIFRH,IWIFRW,            /WIVALX/ 2
     .                IGTPSW                                                    /WIVALX/ 3
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
C                                                                               GEOATT  14
      IDP = IREFTB(2,JREF)                                                      GEOATT  15
      IAVPTR = IDP + IOPCDT(17,JOPCDT) + 2*IOPCDT(16,JOPCDT)                    GEOATT  16
C              POINTER TO GEOMETRY                                              GEOATT  17
      IGDP = IA(IDP+1)                                                          GEOATT  18
      IF (JOPCDT.EQ.JOPWIN) THEN                                                GEOATT  19
          IGEOS = IWIGEO                                                        GEOATT  20
          IOVFS = 32                                                            GEOATT  21
          SB = AA(IAVPTR+16)                                                    GEOATT  22
      ELSE                                                                      GEOATT  23
          IGEOS = IDRGEO                                                        GEOATT  24
          IOVFS = 14                                                            GEOATT  25
          SB = AA(IAVPTR+14)                                                    GEOATT  26
      END IF                                                                    GEOATT  27
      H = AA(IAVPTR+IGEOS+3)                                                    GEOATT  28
      W = AA(IAVPTR+IGEOS+4)                                                    GEOATT  29
      CALL GEOSTR(2,H,W,0,IGDP)                                                 GEOATT  30
      IA(IDP+1) = IGDP                                                          GEOATT  31
C              GEOMETRY BLOCK FOR DISPLAY WITHOUT SETBACK                       GEO5     1
      IGDP = IA(IDP+2)                                                          GEO5     2
      IF(SB.GT.0.) THEN                                                         GEO5     3
          CALL GEOSTR(2,H,W,0,IGDP)                                             GEO5     4
          IA(IDP+2) = IGDP                                                      GEO5     5
      ENDIF                                                                     GEO5     6
C              OVERHANG                                                         GEOATT  32
      IGDP = IA(IDP+3)                                                          GEOATT  33
      H1 = AA(IAVPTR+IOVFS+4)                                                   GEOATT  34
      W1 = AA(IAVPTR+IOVFS+3)                                                   GEOATT  35
      IF (H1.GT.0. .AND. W1.GT.0.) THEN                                         GEOATT  36
          CALL GEOSTR(2,H1,W1,0,IGDP)                                           GEOATT  37
          IA(IDP+3) = IGDP                                                      GEOATT  38
      END IF                                                                    GEOATT  39
C              LEFT FIN                                                         GEOATT  40
      IGDP = IA(IDP+4)                                                          GEOATT  41
      H1 = AA(IAVPTR+IOVFS+8)                                                   GEOATT  42
      W1 = AA(IAVPTR+IOVFS+9)                                                   GEOATT  43
      IF (H1.GT.0. .AND. W1.GT.0.) THEN                                         GEOATT  44
          CALL GEOSTR(2,H1,W1,0,IGDP)                                           GEOATT  45
          IA(IDP+4) = IGDP                                                      GEOATT  46
      END IF                                                                    GEOATT  47
C              RIGHT FIN                                                        GEOATT  48
      IGDP = IA(IDP+5)                                                          GEOATT  49
      H1 = AA(IAVPTR+IOVFS+12)                                                  GEOATT  50
      W1 = AA(IAVPTR+IOVFS+13)                                                  GEOATT  51
      IF (H1.GT.0. .AND. W1.GT.0.) THEN                                         GEOATT  52
          CALL GEOSTR(2,H1,W1,0,IGDP)                                           GEOATT  53
          IA(IDP+5) = IGDP                                                      GEOATT  54
      END IF                                                                    GEOATT  55
C              SETBACK                                                          GEOATT  56
      IF (SB.GT.0.) THEN                                                        GEOATT  57
          IGDP = IA(IDP+6)                                                      GEOATT  58
          IGDPS = IGDP                                                          GEOATT  59
          CALL GEOSTR(2,H,SB,0,IGDP)                                            GEOATT  60
          IA(IDP+6) = IGDP                                                      GEOATT  61
          IGDP = IGDPS                                                          GEOATT  62
          IF (IGDPS.GT.0) IGDP = IGDPS + 13                                     GEOATT  63
          CALL GEOSTR(2,SB,W,0,IGDP)                                            GEOATT  64
          IGDP = IGDPS                                                          GEOATT  65
          IF (IGDPS.GT.0) IGDP = IGDPS + 26                                     GEOATT  66
          CALL GEOSTR(2,H,SB,0,IGDP)                                            GEOATT  67
      END IF                                                                    GEOATT  68
      CALL GEOPR(JOPCDT,JREF)                                                   GEOATT  69
      RETURN                                                                    GEOATT  70
      END                                                                       GEOATT  71
      SUBROUTINE GEOALL                                                         GEOALL   2
C                                                                               GEOALL   3
C              CREATE ALL GEOMETRY DATA IN BUILD COORDS                         GEOALL   4
C                                                                               GEOALL   5
C              CALLING SEQUENCE:                                                GEO5     7
C                                                                               GEO5     8
C              OUTFIL                                                           GEO5     9
C                GEOALL                                                         GEO5    10
C                  GEOFLR: floor geometry                                       GEO5    11
C                    GEOSTR: store vertices in self coord system                GEO5    12
C                    GEOPR                                                      GEO5    13
C                      LOCBCS: transform vertices to bldg coord system          GEO5    14
C                    GEOSP: space geometry                                      GEO5    15
C                      GEOSTR                                                   GEO5    16
C                      GEOPR                                                    GEO5    17
C                        LOCBCS                                                 GEO5    18
C                      GEOWL: wall geometry                                     GEO5    19
C                        GEOSTR                                                 GEO5    20
C                        GEOPR                                                  GEO5    21
C                          LOCBCS                                               GEO5    22
C                        GEOATT: window, door, fin/oh, setback geom             GEO5    23
C                          GEOSTR                                               GEO5    24
C                          GEOPR                                                GEO5    25
C                            LOCBCS                                             GEO5    26
C                  GEOSHD: global shade geometry                                GEO5    27
C                    GEOSTR                                                     GEO5    28
C                    GEOPR                                                      GEO5    29
C                      LOCBCS                                                   GEO5    30
C                GEOO: move geometry to standard file                           GEO5    31
C                                                                               GEO5    32
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LBLOCK/ LSFBLK(20),N(20)                                         BLIND    2
      EQUIVALENCE (LWPARB,LSFBLK(4)),(LCB1,LSFBLK(5)),                          /LBLOCK/ 3
     1            (LCB2,LSFBLK(6)),(LCONSB,LSFBLK(6)),                          /LBLOCK/ 4
     2            (LGEOB,LSFBLK(9))                                             BLIND    3
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
C                                                                               GEOALL  12
      LGEOB = 0                                                                 GEOALL  13
      NGEO = 0                                                                  GEOALL  14
C              FLOORS                                                           GEOALL  15
      NFL = IOPCDT(13,JOPFL)                                                    GEOALL  16
      IF (NFL.GT.0) THEN                                                        GEOALL  17
          DO IFL=1,NFL                                                          GEOALL  18
              IFLRX = IOPCDT(14,JOPFL) + IFL - 1                                GEOALL  19
              CALL GEOFLR(IFLRX,JOPFL)                                          GEOALL  20
          END DO                                                                GEOALL  21
      END IF                                                                    GEOALL  22
C              BUILDING SHADES                                                  GEOALL  23
      NBS = IOPCDT(13,JOPSH)                                                    GEOALL  24
      IF (NBS.GT.0) THEN                                                        GEOALL  25
          DO IBS=1,NBS                                                          GEOALL  26
              IBSRX = IOPCDT(14,JOPSH) + IBS - 1                                GEOALL  27
              CALL GEOSHD(IBSRX,JOPSH)                                          GEOALL  28
          END DO                                                                GEOALL  29
      END IF                                                                    GEOALL  30
      NFS = IOPCDT(13,JOPFSH)                                                   GEOALL  31
      IF (NFS.GT.0) THEN                                                        GEOALL  32
          DO IFS=1,NFS                                                          GEOALL  33
              IFSRX = IOPCDT(14,JOPFSH) + IFS - 1                               GEOALL  34
               CALL GEOSHD(IFSRX,JOPFSH)                                        GEOALL  35
          END DO                                                                GEOALL  36
      END IF                                                                    GEOALL  37
      RETURN                                                                    GEOALL  38
      END                                                                       GEOALL  39
      SUBROUTINE GEOO                                                           GEOO     2
C                                                                               GEOO     3
C               WRITE GEOMETRY BLOCK TO STANDARD FILE                           GEOO     4
C                                                                               GEOO     5
C               GEOO USES 4 WORDS OF COMMWK                                     GEOO     6
C                                                                               GEOO     7
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /GEOD/   IGEOP, IAXGES                                            /GEOD/   2
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /LBLOCK/ LSFBLK(20),N(20)                                         BLIND    2
      EQUIVALENCE (LWPARB,LSFBLK(4)),(LCB1,LSFBLK(5)),                          /LBLOCK/ 3
     1            (LCB2,LSFBLK(6)),(LCONSB,LSFBLK(6)),                          /LBLOCK/ 4
     2            (LGEOB,LSFBLK(9))                                             BLIND    3
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
C                                                                               GEOO    18
      EQUIVALENCE (LEN,COMMWK(1)),(LGEO,COMMWK(2)),                             GEOO    19
     1            (IST,COMMWK(3)),(IPT,COMMWK(4))                               GEOO    20
C                                                                               GEOO    21
      LEN = 1                                                                   GEO1    92
      IF (NGEO.EQ.0) GO TO 1000                                                 GEO1    93
      LEN = LGEOB                                                               GEO1    94
      CALL CKAA(IA,LEN)                                                         GEO1    95
C               IST IS WHERE THE OUTPUT RECORD BUFFER STARTS                    GEOO    27
      IST    = IAX + 1                                                          GEOO    28
C               IPT IS WHERE THE NEXT GEO GOES                                  GEOO    29
      IPT    = IAX                                                              GEOO    30
C               ZERO GEOMETRY BLOCK                                             GEOO    31
      CALL FILLN(0.,AA(IST),LEN)                                                GEOO    32
C--------------EXTERIOR WALLS                                                   GEO1    96
      NEW1 = IOPCDT(13,JOPEW)                                                   GEO1    97
      IF(NEW1.NE.0) THEN                                                        GEO1    98
          DO I=1,NEW1                                                           GEO1    99
              IRX = IOPCDT(14,JOPEW) + I -1                                     GEO1   100
              IDP = IREFTB(2,IRX)                                               GEO1   101
              IGP = IA(IDP+1)                                                   GEO1   102
              IF(IGP .GT. 0)  THEN                                              FIX10  129
                NV = IA(IGP+1)                                                  FIX10  130
                LGEO = 3*NV + 1                                                 FIX10  131
                CALL MOVEN(AA(IGP+1),AA(IPT+1),LGEO)                            FIX10  132
                IF (METIN.EQ.1) CALL KDIV(AA(IPT+2),15,LGEO-1,1)                FIX10  133
                IA(IDP+12) = IPT - IAX + 1                                      FIX10  134
                IPT = IPT + LGEO                                                FIX10  135
              ENDIF                                                             FIX10  136
          END DO                                                                GEO1   109
      END IF                                                                    GEO1   110
C--------------INTERIOR WALLS                                                   GEO1   111
      NIW1 = IOPCDT(13,JOPIW)                                                   GEO1   112
      IF(NIW1.NE.0) THEN                                                        GEO1   113
          DO I=1,NIW1                                                           GEO1   114
              IRX = IOPCDT(14,JOPIW) + I -1                                     GEO1   115
              IDP = IREFTB(2,IRX)                                               GEO1   116
              IGP = IA(IDP+1)                                                   GEO1   117
              IF(IGP .GT. 0)  THEN                                              FIX10  137
                NV = IA(IGP+1)                                                  FIX10  138
                LGEO = 3*NV + 1                                                 FIX10  139
                CALL MOVEN(AA(IGP+1),AA(IPT+1),LGEO)                            FIX10  140
                IF (METIN.EQ.1) CALL KDIV(AA(IPT+2),15,LGEO-1,1)                FIX10  141
                IA(IDP+7) = IPT - IAX + 1                                       FIX10  142
                IPT = IPT + LGEO                                                FIX10  143
              ENDIF                                                             FIX10  144
          END DO                                                                GEO1   124
      END IF                                                                    GEO1   125
C--------------UNDERGROUND WALLS                                                GEO1   126
      NUG1 = IOPCDT(13,JOPUGW)                                                  GEO1   127
      IF(NUG1.NE.0) THEN                                                        GEO1   128
          DO I=1,NUG1                                                           GEO1   129
              IRX = IOPCDT(14,JOPUGW) + I -1                                    GEO1   130
              IDP = IREFTB(2,IRX)                                               GEO1   131
              IGP = IA(IDP+1)                                                   GEO1   132
              IF(IGP .GT. 0)  THEN                                              FIX10  145
                NV = IA(IGP+1)                                                  FIX10  146
                LGEO = 3*NV + 1                                                 FIX10  147
                CALL MOVEN(AA(IGP+1),AA(IPT+1),LGEO)                            FIX10  148
                IF (METIN.EQ.1) CALL KDIV(AA(IPT+2),15,LGEO-1,1)                FIX10  149
                IA(IDP+4) = IPT - IAX + 1                                       FIX10  150
                IPT = IPT + LGEO                                                FIX10  151
              ENDIF                                                             FIX10  152
          END DO                                                                GEO1   139
      END IF                                                                    GEO1   140
C--------------WINDOWS                                                          GEO1   141
      NWIN1 = IOPCDT(13,JOPWIN)                                                 GEO1   142
      IF(NWIN1.NE.0) THEN                                                       GEO1   143
          DO I=1,NWIN1                                                          GEO1   144
              IRX = IOPCDT(14,JOPWIN) + I -1                                    GEO1   145
              IDP = IREFTB(2,IRX)                                               GEO1   146
              IGP = IA(IDP+1)                                                   GEO1   147
              IF(IGP .GT. 0)  THEN                                              FIX10  153
                NV = IA(IGP+1)                                                  FIX10  154
                LGEO = 3*NV + 1                                                 FIX10  155
                CALL MOVEN(AA(IGP+1),AA(IPT+1),LGEO)                            FIX10  156
                IF (METIN.EQ.1) CALL KDIV(AA(IPT+2),15,LGEO-1,1)                FIX10  157
                IA(IDP+8) = IPT - IAX + 1                                       FIX10  158
                IPT = IPT + LGEO                                                FIX10  159
              ENDIF                                                             FIX10  160
C--------------FINS & OVERHANGS                                                 GEO1   154
              DO K=1,3                                                          GEO1   155
                  IGP = IA(IDP+K+2)                                             GEO1   156
                  IF (IGP.GT.0) THEN                                            GEO1   157
                      NV = IA(IGP+1)                                            GEO1   158
                      LGEO = 3*NV + 1                                           GEO1   159
                      CALL MOVEN(AA(IGP+1),AA(IPT+1),LGEO)                      GEO1   160
                      IF (METIN.EQ.1) CALL KDIV(AA(IPT+2),15,LGEO-1,1)          GEO1   161
                      IA(IDP+K+8) = IPT - IAX + 1                               OUT1    23
                      IPT = IPT + LGEO                                          GEO1   163
                  END IF                                                        GEO1   164
              END DO                                                            GEO1   165
C--------------SETBACKS                                                         GEO1   166
              IGP0 = IA(IDP+6)                                                  STBGEO   1
              IF (IGP0.GT.0) THEN                                               STBGEO   2
                  IA(IDP+12) = IPT - IAX + 1                                    OUT1    24
                  DO K=1,3                                                      GEO1   170
                      IGP = IGP0 + (K-1)*13                                     STBGEO   3
                      LGEO = 13                                                 GEO1   172
                      CALL MOVEN(AA(IGP+1),AA(IPT+1),LGEO)                      GEO1   173
                      IF (METIN.EQ.1) CALL KDIV(AA(IPT+2),15,LGEO-1,1)          GEO1   174
                      IPT = IPT + LGEO                                          GEO1   175
                  END DO                                                        GEO1   176
              END IF                                                            GEO1   177
          END DO                                                                GEO1   178
      END IF                                                                    GEO1   179
C--------------DOORS                                                            GEO1   180
      NDOOR1 = IOPCDT(13,JOPDR)                                                 GEO1   181
      IF(NDOOR1.NE.0) THEN                                                      GEO1   182
          DO I=1,NDOOR1                                                         GEO1   183
              IRX = IOPCDT(14,JOPDR) + I -1                                     GEO1   184
              IDP = IREFTB(2,IRX)                                               GEO1   185
              IGP = IA(IDP+1)                                                   GEO1   186
              NV = IA(IGP+1)                                                    GEO1   187
              LGEO = 3*NV + 1                                                   GEO1   188
              CALL MOVEN(AA(IGP+1),AA(IPT+1),LGEO)                              GEO1   189
              IF (METIN.EQ.1) CALL KDIV(AA(IPT+2),15,LGEO-1,1)                  GEO1   190
              IA(IDP+8) = IPT - IAX + 1                                         OUT1    25
              IPT = IPT + LGEO                                                  GEO1   192
C--------------FINS & OVERHANGS                                                 GEO1   193
              DO K=1,3                                                          GEO1   194
                  IGP = IA(IDP+K+2)                                             GEO1   195
                  IF (IGP.GT.0) THEN                                            GEO1   196
                      NV = IA(IGP+1)                                            GEO1   197
                      LGEO = 3*NV + 1                                           GEO1   198
                      CALL MOVEN(AA(IGP+1),AA(IPT+1),LGEO)                      GEO1   199
                      IF (METIN.EQ.1) CALL KDIV(AA(IPT+2),15,LGEO-1,1)          GEO1   200
                      IA(IDP+K+8) = IPT - IAX + 1                               OUT1    26
                      IPT = IPT + LGEO                                          GEO1   202
                  END IF                                                        GEO1   203
              END DO                                                            GEO1   204
C--------------SETBACKS                                                         GEO1   205
              IGP0 = IA(IDP+6)                                                  STBGEO   4
              IF (IGP0.GT.0) THEN                                               STBGEO   5
                  IA(IDP+12) = IPT - IAX + 1                                    OUT1    27
                  DO K=1,3                                                      GEO1   209
                      IGP = IGP0 + (K-1)*13                                     STBGEO   6
                      LGEO = 13                                                 GEO1   211
                      CALL MOVEN(AA(IGP+1),AA(IPT+1),LGEO)                      GEO1   212
                      IF (METIN.EQ.1) CALL KDIV(AA(IPT+2),15,LGEO-1,1)          GEO1   213
                      IPT = IPT + LGEO                                          GEO1   214
                  END DO                                                        GEO1   215
              END IF                                                            GEO1   216
          END DO                                                                GEO1   217
      END IF                                                                    GEO1   218
C--------------GLOBAL SHADES                                                    GEO1   219
      NGSHD1 = IOPCDT(13,JOPSH)                                                 GEO1   220
      IF(NGSHD1.NE.0) THEN                                                      GEO1   221
          DO I=1,NGSHD1                                                         GEO1   222
              IRX = IOPCDT(14,JOPSH) + I -1                                     GEO1   223
              IDP = IREFTB(2,IRX)                                               GEO1   224
              IGP = IA(IDP+1)                                                   GEO1   225
              NV = IA(IGP+1)                                                    GEO1   226
              LGEO = 3*NV + 1                                                   GEO1   227
              CALL MOVEN(AA(IGP+1),AA(IPT+1),LGEO)                              GEO1   228
              IF (METIN.EQ.1) CALL KDIV(AA(IPT+2),15,LGEO-1,1)                  GEO1   229
              IA(IDP+2) = IPT - IAX + 1                                         OUT1    28
              IPT = IPT + LGEO                                                  GEO1   231
          END DO                                                                GEO1   232
      END IF                                                                    GEO1   233
C--------------FIXED SHADES                                                     GEO1   234
      NFSHD1 = IOPCDT(13,JOPFSH)                                                GEO1   235
      IF(NFSHD1.NE.0) THEN                                                      GEO1   236
          DO I=1,NFSHD1                                                         GEO1   237
              IRX = IOPCDT(14,JOPFSH) + I -1                                    GEO1   238
              IDP = IREFTB(2,IRX)                                               GEO1   239
              IGP = IA(IDP+1)                                                   GEO1   240
              NV = IA(IGP+1)                                                    GEO1   241
              LGEO = 3*NV + 1                                                   GEO1   242
              CALL MOVEN(AA(IGP+1),AA(IPT+1),LGEO)                              GEO1   243
              IF (METIN.EQ.1) CALL KDIV(AA(IPT+2),15,LGEO-1,1)                  GEO1   244
              IA(IDP+2) = IPT - IAX + 1                                         OUT1    29
              IPT = IPT + LGEO                                                  GEO1   246
          END DO                                                                GEO1   247
      END IF                                                                    GEO1   248
C                WRITE STANDARD FILE                                            GEOO    55
      WRITE (ISTNDF) NGEO,LEN                                                   GEOO    56
      CALL WRITEN(ISTNDF,IA(IST),LEN)                                           GEOO    57
      IF (IREPRT(32) .EQ. 1)                                                    GEOO    58
     1 CALL DUMPIT(20HGEOMETRY            ,IA(IST),LEN)                         GEOO    59
      GO TO 2000                                                                GEOO    60
 1000 WRITE (ISTNDF) IZERO, IONE                                                GEOO    61
      WRITE (ISTNDF) IZERO                                                      GEOO    62
 2000 CONTINUE                                                                  GEOO    63
C              SET SHADE BLOCK STANDARD FILE POINTER                            GEOO    64
      ISHADB = IGEOB + LEN                                                      GEOO    65
      RETURN                                                                    GEOO    66
      END                                                                       GEOO    67
      SUBROUTINE GEOPR(JOPCDT,JREF)                                             GEOPR    2
C                                                                               GEOPR    3
C              TRANSFORMS WALL, WINDOW, OVERHANG/FIN, SETBACK SHADE             GEOPR    4
C              AND GLOBAL SHADE GEOMETRY TO BUILDING COORDINATE SYSTEM          GEOPR    5
C                                                                               GEOPR    6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /LBLOCK/ LSFBLK(20),N(20)                                         BLIND    2
      EQUIVALENCE (LWPARB,LSFBLK(4)),(LCB1,LSFBLK(5)),                          /LBLOCK/ 3
     1            (LCB2,LSFBLK(6)),(LCONSB,LSFBLK(6)),                          /LBLOCK/ 4
     2            (LGEOB,LSFBLK(9))                                             BLIND    3
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON /ZWALOC/ XF0,YF0,ZF0,AF0,SAF,CAF,XZ0,YZ0,ZZ0,AZ0,SAZ,CAZ,          /ZWALOC/ 2
     1                XW0,YW0,ZW0,AW0,TW0,SAW,CAW,STW,CTW,XW,YW                 /ZWALOC/ 3
C                                                                               GEOPR   18
C              DATA PTR                                                         GEOPR   19
      IDP = IREFTB(2,JREF)                                                      GEOPR   20
      IF(IA(IDP+1) .le. 0)  RETURN                                              DFTEX4 332
C===============================FLOOR===================================        GEO4    49
      IF (JOPCDT.NE.JOPFL) GO TO 300                                            GEO4    50
C              GEOMETRY POINTER                                                 GEO4    51
      IGEO = IA(IDP+1)                                                          GEO4    52
      NV = IA(IGEO+1)                                                           GEO4    53
      LGEO = 3*NV + 1                                                           GEO4    54
C              FLOOR POSITION VARIABLES IN BLDG COORD SYS FOR /ZWALOC/          GEO4    55
      IAVPTR = IREFTB(2,JREF) + IOPCDT(17,JOPCDT) + 2*IOPCDT(16,JOPCDT)         GEO4    56
      XF0 = AA(IAVPTR+2)                                                        GEO4    57
      YF0 = AA(IAVPTR+3)                                                        GEO4    58
      ZF0 = AA(IAVPTR+4)                                                        GEO4    59
      AF0 = AA(IAVPTR+5)*DTOR                                                   GEO4    60
      SAF = SIN(AF0)                                                            GEO4    61
      CAF = COS(AF0)                                                            GEO4    62
C              TRANSFORM FLOOR TO BLDG COORD SYS AND STORE                      GEO4    63
      CALL LOCBCS(AA(IGEO+2),NV,4,0.)                                           GEO4    64
  300 CONTINUE                                                                  GEO4    65
C=============================SPACE=====================================        GEO4    66
      IF (JOPCDT.NE.JOPSP) GO TO 400                                            GEO4    67
C              REF TABLE INDEX OF PARENT FLOOR                                  GEO4    68
      IRXFL = IREFTB(4,JREF)                                                    GEO4    69
C              GEOMETRY POINTER                                                 GEO4    70
      IGEO = IA(IDP+1)                                                          GEO4    71
      NV = IA(IGEO+1)                                                           GEO4    72
      LGEO = 3*NV + 1                                                           GEO4    73
C              SPACE POSITION VARIABLES IN FLOOR COORD SYS FOR /ZWALOC/         GEO4    74
      IAVPTR = IDP + IOPCDT(17,JOPCDT) + 2*IOPCDT(16,JOPCDT)                    GEO4    75
      XZ0 = AA(IAVPTR+1)                                                        GEO4    76
      YZ0 = AA(IAVPTR+2)                                                        GEO4    77
      ZZ0 = AA(IAVPTR+3)                                                        GEO4    78
      AZ0 = AA(IAVPTR+4)*DTOR                                                   GEO4    79
      SAZ = SIN(AZ0)                                                            GEO4    80
      CAZ = COS(AZ0)                                                            GEO4    81
C              FLOOR POSITION VARIABLES IN BLDG COORD SYS FOR /ZWALOC/          GEO4    82
      IAVPTR = IREFTB(2,IRXFL) + IOPCDT(17,JOPFL) + 2*IOPCDT(16,JOPFL)          GEO4    83
      XF0 = AA(IAVPTR+2)                                                        GEO4    84
      YF0 = AA(IAVPTR+3)                                                        GEO4    85
      ZF0 = AA(IAVPTR+4)                                                        GEO4    86
      AF0 = AA(IAVPTR+5)*DTOR                                                   GEO4    87
      SAF = SIN(AF0)                                                            GEO4    88
      CAF = COS(AF0)                                                            GEO4    89
C              TRANSFORM SPACE FLOOR PLAN TO BLDG COORD SYS AND STORE           GEO4    90
      CALL LOCBCS(AA(IGEO+2),NV,3,0.)                                           GEO4    91
  400 CONTINUE                                                                  GEO4    92
C==============WALL (EXTERIOR, INTERIOR OR UNDERGROUND)===============          GEOPR   21
      IF(JOPCDT.NE.JOPEW.AND.JOPCDT.NE.JOPIW.AND.JOPCDT.NE.JOPUGW)              GEOPR   22
     1 GO TO 500                                                                GEOPR   23
C              REF TABLE INDEX OF PARENT SPACE                                  GEOPR   24
      IRXSP = IREFTB(4,JREF)                                                    GEOPR   25
C              REF TABLE INDEX OF PARENT FLOOR                                  GEOPR   26
      IRXFL = IREFTB(4,IRXSP)                                                   GEOPR   27
C              GEOMETRY PTR                                                     GEOPR   28
      IGEO = IA(IDP+1)                                                          GEOPR   29
C              NUMBER OF VERTICES                                               GEOPR   30
      NV = IA(IGEO+1)                                                           GEOPR   31
      LGEO = 1 + 3*NV                                                           GEOPR   32
C              TRANSFORM TO BUILDING COORD SYS                                  GEOPR   33
C              WALL POSITION VARIABLES IN SPACE COORD SYS FOR /ZWALOC/          GEOPR   34
      IAVPTR = IDP + IOPCDT(17,JOPCDT) + 2*IOPCDT(16,JOPCDT)                    GEOPR   35
      IPTR = IAVPTR + 12                                                        GEOPR   36
      IF(JOPCDT.EQ.JOPIW) IPTR = IAVPTR + 13                                    GEOPR   37
      IF(JOPCDT.EQ.JOPUGW) IPTR = IAVPTR + 8                                    GEOPR   38
      XW0 = AA(IPTR+1)                                                          GEOPR   39
      YW0 = AA(IPTR+2)                                                          GEOPR   40
      ZW0 = AA(IPTR+3)                                                          GEOPR   41
      AW0 = AA(IPTR+6)*DTOR                                                     GEOPR   42
      TW0 = AA(IPTR+7)*DTOR                                                     GEOPR   43
      SAW = SIN(AW0)                                                            GEOPR   44
      CAW = COS(AW0)                                                            GEOPR   45
      STW = SIN(TW0)                                                            GEOPR   46
      CTW = COS(TW0)                                                            GEOPR   47
C              SPACE POSITION VARIABLES IN FLOOR COORD SYS FOR /ZWALOC/         GEOPR   48
      IAVPTR = IREFTB(2,IRXSP) + IOPCDT(17,JOPSP) + 2*IOPCDT(16,JOPSP)          GEOPR   49
      XZ0 = AA(IAVPTR+1)                                                        GEOPR   50
      YZ0 = AA(IAVPTR+2)                                                        GEOPR   51
      ZZ0 = AA(IAVPTR+3)                                                        GEOPR   52
      AZ0 = AA(IAVPTR+4)*DTOR                                                   GEOPR   53
      SAZ = SIN(AZ0)                                                            GEOPR   54
      CAZ = COS(AZ0)                                                            GEOPR   55
C              FLOOR POSITION VARIABLES IN BLDG COORD SYS FOR /ZWALOC/          GEOPR   56
      IAVPTR = IREFTB(2,IRXFL) + IOPCDT(17,JOPFL) + 2*IOPCDT(16,JOPFL)          GEOPR   57
      XF0 = AA(IAVPTR+2)                                                        GEOPR   58
      YF0 = AA(IAVPTR+3)                                                        GEOPR   59
      ZF0 = AA(IAVPTR+4)                                                        GEOPR   60
      AF0 = AA(IAVPTR+5)*DTOR                                                   GEOPR   61
      SAF = SIN(AF0)                                                            GEOPR   62
      CAF = COS(AF0)                                                            GEOPR   63
C              TRANSFORM WALL VERTICES TO BLDG COORD SYS AND STORE              GEOPR   64
      CALL LOCBCS(AA(IGEO+2),NV,2,0.)                                           GEOPR   65
      LGEOB = LGEOB + LGEO                                                      GEOPR   66
      NGEO = NGEO + 1                                                           GEOPR   67
  500 CONTINUE                                                                  GEOPR   68
C==============WINDOW OR DOOR=========================================          GEOPR   69
      IF(JOPCDT.NE.JOPWIN.AND.JOPCDT.NE.JOPDR) GO TO 1000                       GEOPR   70
C              REF TABLE INDEX OF PARENT WALL, SPACE AND FLOOR                  GEOPR   71
      IRXWL = IREFTB(4,JREF)                                                    GEOPR   72
      IRXSP = IREFTB(4,IRXWL)                                                   GEOPR   73
      IRXFL = IREFTB(4,IRXSP)                                                   GEOPR   74
C                                                                               GEOPR   75
C              WINDOW AND DOOR NSAVE AREA FOR REFERENCE                         GEOPR   76
C              IDP+1: PTR TO WINDOW/DOOR GEOMETRY                               GEOPR   77
C              IDP+2: PTR TO WINDOW/DOOR GEOMETRY WITHOUT SETBACK               GEO5    33
C              IDP+3: PTR TO OVERHANG GEOMETRY                                  GEOPR   79
C              IDP+4: PTR TO LEFT FIN GEOMETRY                                  GEOPR   80
C              IDP+5: PTR TO RIGHT FIN GEOMETRY                                 GEOPR   81
C              IDP+6: PTR TO SETBACK SHADE GEOMETRY                             GEOPR   82
C              IDP+7: PTR TO SETBACK SHADES                                     GEOPR   83
C                                                                               GEOPR   84
C              GEOMETRY PTR AND NUMBER OF VERTICES                              GEOPR   85
      IGEO = IA(IDP+1)                                                          GEOPR   86
      NV = IA(IGEO+1)                                                           GEOPR   87
      LGEO = 1 + 3*NV                                                           GEOPR   88
C              POSITION OF WINDOW/DOOR ORIGIN IN WALL C.S. FOR /ZWALOC/,        GEOPR   89
C              HEIGHT AND WIDTH FOR POSITIONING FIN/OVERHANG AND                GEOPR   90
C              SETBACK SHADES, SETBACK, AND FRAME WIDTH (FOR WINDOWS)           GEOPR   91
      IAVPTR = IDP + IOPCDT(17,JOPCDT) + 2*IOPCDT(16,JOPCDT)                    GEOPR   92
      IPTR = IAVPTR + 11                                                        GEOPR   93
      IF(JOPCDT.EQ.JOPDR) IPTR = IAVPTR + 9                                     GEOPR   94
      XW = AA(IPTR+1)                                                           GEOPR   95
      YW = AA(IPTR+2)                                                           GEOPR   96
      H = AA(IPTR+3)                                                            GEOPR   97
      W = AA(IPTR+4)                                                            GEOPR   98
      SB = AA(IAVPTR+16)                                                        GEOPR   99
      IF(JOPCDT.EQ.JOPDR) SB = AA(IAVPTR+14)                                    GEOPR  100
      FW = 0.                                                                   GEOPR  101
      IF(JOPCDT.EQ.JOPWIN) FW = AA(IAVPTR+9)                                    GEOPR  102
C              WALL POSITION VARIABLES IN SPACE C.S. FOR /ZWALOC/               GEOPR  103
      JSYMW = IREFTB(1,IRXWL)                                                   GEOPR  104
      JOPWLS = JOPSRC(11,ISYMTB(9,JSYMW))                                       GEOPR  105
C              KLUDGE TO SET JOPWLS WHEN WALL WASN'T NAMED                      FIX3     2
      IF (JOPWLS.EQ.0) THEN                                                     FIX3     3
          JOPWLS = JOPIW                                                        FIX3     4
          IF (IREFTB(4,JREF).LT.IOPCDT(14,JOPIW)) JOPWLS = JOPEW                FIX3     5
      END IF                                                                    FIX3     6
      IAVPTR = IREFTB(2,IRXWL) + IOPCDT(17,JOPWLS) + 2*IOPCDT(16,JOPWLS)        GEOPR  106
      IPTR = IAVPTR + 12                                                        GEOPR  107
      IF(JOPWLS.EQ.JOPIW) IPTR = IAVPTR + 13                                    GEOPR  108
      XW0 = AA(IPTR+1)                                                          GEOPR  109
      YW0 = AA(IPTR+2)                                                          GEOPR  110
      ZW0 = AA(IPTR+3)                                                          GEOPR  111
      AW0 = AA(IPTR+6)*DTOR                                                     GEOPR  112
      TW0 = AA(IPTR+7)*DTOR                                                     GEOPR  113
      SAW = SIN(AW0)                                                            GEOPR  114
      CAW = COS(AW0)                                                            GEOPR  115
      STW = SIN(TW0)                                                            GEOPR  116
      CTW = COS(TW0)                                                            GEOPR  117
C              SPACE POSITION VARIABLES IN FLOOR C.S. FOR /ZWALOC/              GEOPR  118
      IAVPTR = IREFTB(2,IRXSP) + IOPCDT(17,JOPSP) + 2*IOPCDT(16,JOPSP)          GEOPR  119
      XZ0 = AA(IAVPTR+1)                                                        GEOPR  120
      YZ0 = AA(IAVPTR+2)                                                        GEOPR  121
      ZZ0 = AA(IAVPTR+3)                                                        GEOPR  122
      AZ0 = AA(IAVPTR+4)*DTOR                                                   GEOPR  123
      SAZ = SIN(AZ0)                                                            GEOPR  124
      CAZ = COS(AZ0)                                                            GEOPR  125
C              FLOOR POSITION VARIABLES IN BLDG C.S. FOR /ZWALOC/               GEOPR  126
      IAVPTR = IREFTB(2,IRXFL) + IOPCDT(17,JOPFL) + 2*IOPCDT(16,JOPFL)          GEOPR  127
      XF0 = AA(IAVPTR+2)                                                        GEOPR  128
      YF0 = AA(IAVPTR+3)                                                        GEOPR  129
      ZF0 = AA(IAVPTR+4)                                                        GEOPR  130
      AF0 = AA(IAVPTR+5)*DTOR                                                   GEOPR  131
      SAF = SIN(AF0)                                                            GEOPR  132
      CAF = COS(AF0)                                                            GEOPR  133
C              TRANSFORM WINDOW/DOOR VERTICES TO BLDG C.S. AND STORE            GEOPR  134
      CALL LOCBCS(AA(IGEO+2),NV,1,SB)                                           GEOPR  135
      LGEOB = LGEOB + LGEO                                                      GEOPR  136
      NGEO = NGEO + 1                                                           GEOPR  137
C              IF SETBACK, TRANSFORM WITHOUT SETBACK FOR 3-D DISPLAY            GEO5    34
      IGEO = IA(IDP+2)                                                          GEO5    35
      IF(IGEO.NE.0) CALL LOCBCS(AA(IGEO+2),NV,1,0.)                             GEO5    36
C==============OVERHANG ON WINDOW OR DOOR==========================             GEOPR  138
      IGEOF = IA(IDP+3)                                                         GEOPR  139
      IF(IGEOF.EQ.0) GO TO 1100                                                 GEO4    93
      NV = IA(IGEOF+1)                                                          GEOPR  141
      LGEO = 1 + 3*NV                                                           GEOPR  142
      IAVPTR = IDP + IOPCDT(17,JOPCDT) + 2*IOPCDT(16,JOPCDT)                    GEOPR  143
      IPTR = IAVPTR + 32                                                        GEOPR  144
      IF(JOPCDT.EQ.JOPDR) IPTR = IAVPTR + 14                                    GEOPR  145
C              CONVERT OVERHANG VERTICES TO WINDOW/DOOR C.S.                    GEOPR  146
      OHA = AA(IPTR+1)                                                          GEOPR  147
      OHB = AA(IPTR+2)                                                          GEOPR  148
      OHW = AA(IPTR+3)                                                          GEOPR  149
      OHD = AA(IPTR+4)                                                          GEOPR  150
      OHANG = AA(IPTR+5)*DTOR                                                   GEOPR  151
      AA(IGEOF+2) = -OHA                                                        GEOPR  152
      AA(IGEOF+3) = H + OHB - OHD*COS(OHANG)                                    GEOPR  153
      AA(IGEOF+4) = OHD*SIN(OHANG)                                              GEOPR  154
      AA(IGEOF+5) = -OHA                                                        GEOPR  155
      AA(IGEOF+6) = H + OHB                                                     GEOPR  156
      AA(IGEOF+7) = 0.                                                          GEOPR  157
      AA(IGEOF+8) = OHW - OHA                                                   GEOPR  158
      AA(IGEOF+9) = H + OHB                                                     GEOPR  159
      AA(IGEOF+10)= 0.                                                          GEOPR  160
      AA(IGEOF+11)= OHW - OHA                                                   GEOPR  161
      AA(IGEOF+12)= AA(IGEOF+3)                                                 GEOPR  162
      AA(IGEOF+13)= AA(IGEOF+4)                                                 GEOPR  163
C              TRANSFORM OVERHANG VERTICES TO BLDG C.S. AND STORE               GEOPR  164
      CALL LOCBCS(AA(IGEOF+2),NV,1,0.)                                          GEOPR  165
      LGEOB = LGEOB + LGEO                                                      GEOPR  166
      NGEO = NGEO + 1                                                           GEOPR  167
 1100 CONTINUE                                                                  GEO4    94
C==============LEFT FIN ON WINDOW OR DOOR=======================                GEOPR  169
      IGEOF = IA(IDP+4)                                                         GEOPR  170
      IF(IGEOF.EQ.0) GO TO 1200                                                 GEO4    95
      NV = IA(IGEOF+1)                                                          GEOPR  172
      LGEO = 1 + 3*NV                                                           GEOPR  173
C              CONVERT TO WINDOW/DOOR C.S.                                      GEOPR  174
      IAVPTR = IDP + IOPCDT(17,JOPCDT) + 2*IOPCDT(16,JOPCDT)                    GEOPR  175
      IPTR = IAVPTR + 37                                                        GEOPR  176
      IF(JOPCDT.EQ.JOPDR) IPTR = IAVPTR + 19                                    GEOPR  177
      FLA = AA(IPTR+1)                                                          GEOPR  178
      FLB = AA(IPTR+2)                                                          GEOPR  179
      FLH = AA(IPTR+3)                                                          GEOPR  180
      FLD = AA(IPTR+4)                                                          GEOPR  181
      AA(IGEOF+2) = -FLA                                                        GEOPR  182
      AA(IGEOF+3) = H - FLB                                                     GEOPR  183
      AA(IGEOF+4) = 0.                                                          GEOPR  184
      AA(IGEOF+5) = -FLA                                                        GEOPR  185
      AA(IGEOF+6) = H - FLB - FLH                                               GEOPR  186
      AA(IGEOF+7) = 0.                                                          GEOPR  187
      AA(IGEOF+8) = -FLA                                                        GEOPR  188
      AA(IGEOF+9) = H - FLB -FLH                                                GEOPR  189
      AA(IGEOF+10)= FLD                                                         GEOPR  190
      AA(IGEOF+11)= -FLA                                                        GEOPR  191
      AA(IGEOF+12)= H - FLB                                                     GEOPR  192
      AA(IGEOF+13)= FLD                                                         GEOPR  193
C              TRANSFORM OVERHANG VERTICES TO BLDG C.S. AND STORE               GEOPR  194
      CALL LOCBCS(AA(IGEOF+2),NV,1,0.)                                          GEOPR  195
      LGEOB = LGEOB + LGEO                                                      GEOPR  196
      NGEO = NGEO + 1                                                           GEOPR  197
 1200 CONTINUE                                                                  GEO4    96
C==============LEFT FIN ON WINDOW OR DOOR=======================                GEOPR  199
      IGEOF = IA(IDP+5)                                                         GEOPR  200
      IF(IGEOF.EQ.0) GO TO 1300                                                 GEO4    97
      NV = IA(IGEOF+1)                                                          GEOPR  202
      LGEO = 1 + 3*NV                                                           GEOPR  203
C              CONVERT TO WINDOW/DOOR C.S.                                      GEOPR  204
      IAVPTR = IDP + IOPCDT(17,JOPCDT) + 2*IOPCDT(16,JOPCDT)                    GEOPR  205
      IPTR = IAVPTR + 41                                                        GEOPR  206
      IF(JOPCDT.EQ.JOPDR) IPTR = IAVPTR + 23                                    GEOPR  207
      FRA = AA(IPTR+1)                                                          GEOPR  208
      FRB = AA(IPTR+2)                                                          GEOPR  209
      FRH = AA(IPTR+3)                                                          GEOPR  210
      FRD = AA(IPTR+4)                                                          GEOPR  211
      AA(IGEOF+2) = W + FRA                                                     GEOPR  212
      AA(IGEOF+3) = H - FRB                                                     GEOPR  213
      AA(IGEOF+4) = FRD                                                         GEOPR  214
      AA(IGEOF+5) = W + FRA                                                     GEOPR  215
      AA(IGEOF+6) = H - FRB - FRH                                               GEOPR  216
      AA(IGEOF+7) = FRD                                                         GEOPR  217
      AA(IGEOF+8) = W + FRA                                                     GEOPR  218
      AA(IGEOF+9) = H - FRB - FRH                                               GEOPR  219
      AA(IGEOF+10)= 0.                                                          GEOPR  220
      AA(IGEOF+11)= W + FRA                                                     GEOPR  221
      AA(IGEOF+12)= H - FRB                                                     GEOPR  222
      AA(IGEOF+13)= 0.                                                          GEOPR  223
C              TRANSFORM OVERHANG VERTICES TO BLDG C.S. AND STORE               GEOPR  224
      CALL LOCBCS(AA(IGEOF+2),NV,1,0.)                                          GEOPR  225
      LGEOB = LGEOB + LGEO                                                      GEOPR  226
      NGEO = NGEO + 1                                                           GEOPR  227
 1300 CONTINUE                                                                  GEO4    98
C==============WINDOW AND DOOR SETBACK SHADES====================               GEOPR  229
C              SHADES PROJECT OUT BY SB FROM PLANE OF WINDOW/DOOR               GEOPR  230
      IF(SB.LE.0.0) GO TO 1000                                                  GEOPR  231
      LGEO = 1 + 3*NV                                                           GEOPR  232
C              THE THREE SETBACK SURFACES ARE STORED AS LEFT, TOP, RIGHT        GEOPR  233
C              PTR TO SETBACK SHADE GEOMETRY                                    GEOPR  234
      IGEOF = IA(IDP+6)                                                         GEOPR  235
      NV = 4                                                                    GEOPR  236
      LGEO = 13                                                                 GEOPR  237
C==============LEFT SETBACK SHADE================================               GEOPR  238
C              CONVERT TO WINDOW/DOOR C.S.                                      GEOPR  239
      AA(IGEOF+2) = -FW                                                         GEOPR  240
      AA(IGEOF+3) = H + FW                                                      GEOPR  241
      AA(IGEOF+4) = 0.                                                          GEOPR  242
      AA(IGEOF+5) = -FW                                                         GEOPR  243
      AA(IGEOF+6) = -FW                                                         GEOPR  244
      AA(IGEOF+7) = 0.                                                          GEOPR  245
      AA(IGEOF+8) = -FW                                                         GEOPR  246
      AA(IGEOF+9) = -FW                                                         GEOPR  247
      AA(IGEOF+10)= SB                                                          GEOPR  248
      AA(IGEOF+11)= -FW                                                         GEOPR  249
      AA(IGEOF+12)= H + FW                                                      GEOPR  250
      AA(IGEOF+13)= SB                                                          GEOPR  251
C              TRANSFORM LEFT SETBACK VERTICES TO BLDG C.S. AND STORE           GEOPR  252
      CALL LOCBCS(AA(IGEOF+2),NV,1,SB)                                          GEOPR  253
      LGEOB = LGEOB + LGEO                                                      GEOPR  254
      NGEO = NGEO + 1                                                           GEOPR  255
C==============TOP SETBACK SHADE================================                GEOPR  256
      IGEOF = IGEOF + LGEO                                                      GEOPR  257
C              CONVERT TO WINDOW/DOOR C.S.                                      GEOPR  258
      AA(IGEOF+2) = W + FW                                                      GEOPR  259
      AA(IGEOF+3) = H + FW                                                      GEOPR  260
      AA(IGEOF+4) = 0.                                                          GEOPR  261
      AA(IGEOF+5) = -FW                                                         GEOPR  262
      AA(IGEOF+6) = H + FW                                                      GEOPR  263
      AA(IGEOF+7) = 0.                                                          GEOPR  264
      AA(IGEOF+8) = -FW                                                         GEOPR  265
      AA(IGEOF+9) = H + FW                                                      GEOPR  266
      AA(IGEOF+10)= SB                                                          GEOPR  267
      AA(IGEOF+11)= W + FW                                                      GEOPR  268
      AA(IGEOF+12)= H + FW                                                      GEOPR  269
      AA(IGEOF+13)= SB                                                          GEOPR  270
C              TRANSFORM TOP SETBACK VERTICES TO BLDG C.S. AND STORE            GEOPR  271
      CALL LOCBCS(AA(IGEOF+2),NV,1,SB)                                          GEOPR  272
      LGEOB = LGEOB + LGEO                                                      GEOPR  273
      NGEO = NGEO + 1                                                           GEOPR  274
C==============RIGHT SETBACK SHADE================================              GEOPR  275
      IGEOF = IGEOF + LGEO                                                      GEOPR  276
C              CONVERT TO WINDOW/DOOR C.S.                                      GEOPR  277
      AA(IGEOF+2) = W + FW                                                      GEOPR  278
      AA(IGEOF+3) = H + FW                                                      GEOPR  279
      AA(IGEOF+4) = 0.                                                          GEOPR  280
      AA(IGEOF+5) = W + FW                                                      GEOPR  281
      AA(IGEOF+6) = -FW                                                         GEOPR  282
      AA(IGEOF+7) = 0.                                                          GEOPR  283
      AA(IGEOF+8) = W + FW                                                      GEOPR  284
      AA(IGEOF+9) = -FW                                                         GEOPR  285
      AA(IGEOF+10)= SB                                                          GEOPR  286
      AA(IGEOF+11)= W + FW                                                      GEOPR  287
      AA(IGEOF+12)= H + FW                                                      GEOPR  288
      AA(IGEOF+13)= SB                                                          GEOPR  289
C              TRANSFORM RIGHT SETBACK VERTICES TO BLDG C.S. AND STORE          GEOPR  290
      CALL LOCBCS(AA(IGEOF+2),NV,1,SB)                                          GEOPR  291
      LGEOB = LGEOB + LGEO                                                      GEOPR  292
      NGEO = NGEO + 1                                                           GEOPR  293
 1000 CONTINUE                                                                  GEOPR  294
C==============GLOBAL SHADES (BUILDING-SHADES AND FIXED-SHADES====              GEOPR  295
C              GEOPR IS CALLED FOR BOTH BUILDING-SHADES                         GEOPR  296
C              AND FIXED-SHADES WITH JOPCDT = JOPSH.                            GEOPR  297
C              TYPE IS DETERMINED BY IA(IDP+4), SET IN LDL1                     GEOPR  298
      IF(JOPCDT.NE.JOPSH .AND. JOPCDT.NE.JOPFSH) GO TO 1500                     GEOPR  299
      IGEO = IA(IDP+1)                                                          GEO4    99
      NV = IA(IGEO+1)                                                           GEO4   100
      LGEO = 1 + 3*NV                                                           GEO4   101
      IAVPTR = IDP + IOPCDT(17,JOPCDT) + 2*IOPCDT(16,JOPCDT)                    -048   233
      XS0 = AA(IAVPTR+6)                                                        -048   234
      YS0 = AA(IAVPTR+7)                                                        -048   235
      ZS0 = AA(IAVPTR+8)                                                        -048   236
      A = AA(IAVPTR+11)*DTOR                                                    -048   237
      T = AA(IAVPTR+12)*DTOR                                                    -048   238
C              VERTICES ARE ORIGINALLY IN BLDG C.S. FOR BUILDING-SHADE,         -048   239
C              IN SITE C.S. FOR FIXED-SHADE                                     -048   240
      CALL LOCSHD(AA(IGEO+2),NV,XS0,YS0,ZS0,A,T)                                -048   241
C               FOR FIXED SHADE, CONVERT TO BLDG C.S.                           GEOPR  330
      IF(JOPCDT.EQ.JOPFSH) THEN                                                 GEOPR  331
C               GET BUILDING AZIMUTH AND X,Y COORDINATES OF                     GEOPR  332
C               ORIGIN OF OF BLDG C.S. IN SITE C.S.                             GEOPR  333
          IRB = IOPCDT(14,JOPBP)                                                GEOPR  334
          IAVPTR = IREFTB(2,IRB) + IOPCDT(17,JOPBP) + 2*IOPCDT(16,JOPBP)        GEOPR  335
          BAZIM = AA(IAVPTR+1)*DTOR                                             GEOPR  336
          CBAZIM = COS(BAZIM)                                                   GEOPR  337
          SBAZIM = SIN(BAZIM)                                                   GEOPR  338
          BXORG = AA(IAVPTR+8)                                                  GEOPR  339
          BYORG = AA(IAVPTR+9)                                                  GEOPR  340
C               LOOP OVER VERTICES OF THE SHADE                                 GEOPR  341
          DO I = 1,NV                                                           -048   242
              IND = IGEO + 3*I - 1                                              GEO4   114
              X0 = AA(IND)                                                      GEOPR  344
              Y0 = AA(IND+1)                                                    GEOPR  345
              AA(IND)  = (X0-BXORG)*CBAZIM - (Y0-BYORG)*SBAZIM                  GEOPR  346
              AA(IND+1)= (X0-BXORG)*SBAZIM + (Y0-BYORG)*CBAZIM                  GEOPR  347
          END DO                                                                GEOPR  348
      END IF                                                                    GEOPR  349
      LGEOB = LGEOB + LGEO                                                      GEOPR  350
      NGEO = NGEO + 1                                                           GEOPR  351
 1500 CONTINUE                                                                  GEOPR  352
      RETURN                                                                    GEOPR  353
      END                                                                       GEOPR  354
      SUBROUTINE GEOSTR(NNV,H,W,IPOLY,IGDP)                                     GEO1   249
C                                                                               GEO1   250
C               STORES GEOMETRY DATA AS VERTICES                                GEO1   251
C               IN SELF COORDINATE SYSTEM                                       GEO1   252
C                                                                               GEO1   253
C               NNV = ORIGINAL NUMBER OF VERTICES (2 FOR RECTANGLE, ACTUAL      GEO1   254
C                     NUMBER FOR POLYGONS)                                      GEO1   255
C               H,W   = HEIGHT,WIDTH IF RECTANGLE                               GEO1   256
C               IPOLY = LOCATION IN AA OF START OF POLYGON VERTICES             GEO1   257
C               IGDP  = LOCATION IN AA OF GEOMETRY DATA, OR ZERO                GEO1   258
C                                                                               GEO1   259
C                                                                               GEOSTR   7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON  /GEOD/   IGEOP, IAXGES                                            /GEOD/   2
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /LBLOCK/ LSFBLK(20),N(20)                                         BLIND    2
      EQUIVALENCE (LWPARB,LSFBLK(4)),(LCB1,LSFBLK(5)),                          /LBLOCK/ 3
     1            (LCB2,LSFBLK(6)),(LCONSB,LSFBLK(6)),                          /LBLOCK/ 4
     2            (LGEOB,LSFBLK(9))                                             BLIND    3
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
C                                                                               GEOSTR  14
C               GEOMETRY BLOCK FOR RECTANGLE IS 4,X1,Y1,Z1,...,X4,Y4,Z4         GEO1   260
C               GEOMETRY BLOCK FOR POLYGON IS NV,X1,Y1,Z1,...,XNV,YNV,ZNV       GEO1   261
C               CHECK NUMBER OF VERTICES                                        GEO1   262
C                                                                               GEO1   263
      IF (NNV.EQ.2) THEN                                                        DFTEX4 333
          IF(NOVAL(H).eq.0 .OR. NOVAL(W).eq.0) RETURN                           DFTEX4 334
          LEN = 13                                                              DFTEX4 335
      ELSE                                                                      DFTEX4 336
          IF(NNV.lt.3  .OR.  NNV.gt.120)  RETURN                                -042c   10
          LEN = 3*NNV + 1                                                       DFTEX4 338
      END IF                                                                    DFTEX4 339
      IF (IGDP.EQ.0) THEN                                                       GEO1   269
          CALL CKAA(IA,LEN)                                                     GEO1   270
          IGDP = IAX                                                            GEO1   271
          IAX = IAX + LEN                                                       GEO1   272
      ELSE                                                                      GEO1   273
          NVOLD = IA(IGDP+1)                                                    GEO1   274
          LENOLD = 3*NVOLD + 1                                                  GEO1   275
          IF (LENOLD.LT.LEN) THEN                                               GEO1   276
              CALL CKAA(IA,LEN)                                                 GEO1   277
              IGDP = IAX                                                        GEO1   278
              IAX = IAX + LEN                                                   GEO1   279
          END IF                                                                GEO1   280
      END IF                                                                    GEO1   281
      IF (NNV.NE.2)  GO TO 2000                                                 GEO1   282
C                RECTANGLE                                                      GEO1   283
C                                                                               GEO1   284
C                RECTANGLE VERTICES IN SELF COORDINATE SYSTEM                   GEO1   285
C                                                                               GEO1   286
C               1*-----------*4                                                 GEO1   287
C                |           |                                                  GEO1   288
C               H|           |                                                  GEO1   289
C                |     W     |                                                  GEO1   290
C               2*-----------*3                                                 GEO1   291
C                                                                               GEO1   292
      IA(IGDP+1) = 4                                                            GEO1   293
      AA(IGDP+2) = 0.                                                           GEO1   294
      AA(IGDP+3) = H                                                            GEO1   295
      AA(IGDP+4) = 0.                                                           GEO1   296
      AA(IGDP+5) = 0.                                                           GEO1   297
      AA(IGDP+6) = 0.                                                           GEO1   298
      AA(IGDP+7) = 0.                                                           GEO1   299
      AA(IGDP+8) = W                                                            GEO1   300
      AA(IGDP+9) = 0.                                                           GEO1   301
      AA(IGDP+10)= 0.                                                           GEO1   302
      AA(IGDP+11)= W                                                            GEO1   303
      AA(IGDP+12)= H                                                            GEO1   304
      AA(IGDP+13)= 0.                                                           GEO1   305
      GO TO 9000                                                                GEO1   306
 2000 IF(NNV.LT.3) GO TO 9000                                                   GEO1   307
C              POLYGON (VERTICES ARE ALREADY IN SELF COORD SYS)                 GEO1   308
      IA(IGDP+1) = NNV                                                          GEO1   309
      CALL MOVEN(AA(IPOLY),AA(IGDP+2),LEN-1)                                    GEO1   310
      CALL REDEF(AA(IGDP+2),LEN-1)                                              DEF2   145
9000  CONTINUE                                                                  GEOSTR  52
      RETURN                                                                    GEOSTR  53
      END                                                                       GEOSTR  54
      SUBROUTINE GEOWL(JREF,JOPCDT)                                             GEOWL    2
C                                                                               GEOWL    3
C              CREATE GEOMETRY DATA IN BUILDING COORDINATE SYSTEM               GEOWL    4
C              FOR A WALL AND ALL ITS ATTACHMENTS                               GEOWL    5
C                                                                               GEOWL    6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /IWVALX/ IIWCNP, IIWGEO, IIWSAP, IIWARP, IIWTLP, IIWSFP,          /IWVALX/ 2
     1                  IIWLCP,IIWCRP,KWIWAR,IIWVRP                             /IWVALX/ 3
      COMMON  /UGVALX/ IUGCNP, IUGGEO, IUGSAP, IUGARP, IUGTLP, IUGSFP,          /UGVALX/ 2
     1                  IUGLCP,IUGCRP,KWUGAR,IUGVRP                             /UGVALX/ 3
      COMMON  /EWVALX/ IEWLCP, IEWGEO, IEWCNP, IEWSDP, IEWSAP, IEWTLP,          /EWVALX/ 2
     1                  IEWSFP,IEWCRP,IEWVRP                                    /EWVALX/ 3
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
C                                                                               GEOWL   16
      IDP = IREFTB(2,JREF)                                                      GEOWL   17
      IAVPTR = IDP + IOPCDT(17,JOPCDT) + 2*IOPCDT(16,JOPCDT)                    GEOWL   18
      IGDP = IA(IDP+1)                                                          GEOWL   19
      IF (JOPCDT.EQ.JOPEW) THEN                                                 GEOWL   20
          IGEOS = IEWGEO                                                        GEOWL   21
          IARP = 0                                                              FIX10  161
      ELSE IF (JOPCDT.EQ.JOPIW) THEN                                            GEOWL   22
          IGEOS = IIWGEO                                                        GEOWL   23
          IARP = 2                                                              FIX10  162
      ELSE                                                                      GEOWL   24
          IGEOS = IUGGEO                                                        GEOWL   25
          IARP = 1                                                              FIX10  163
      END IF                                                                    GEOWL   26
      H = AA(IAVPTR+IGEOS+4)                                                    GEOWL   27
      W = AA(IAVPTR+IGEOS+5)                                                    GEOWL   28
      IPOLY = IGEOS + 9                                                         GEOWL   29
      IPOLSX = IA(IAVPTR+IPOLY)                                                 GEOWL   30
C             If a polygon use it, else use height and width                    FIX8    32
      IF(NOVAL(IPOLSX).NE.0) THEN                                               FIX8    33
          IPOLX = ISYMTB(12,IPOLSX)                                             GEOWL   32
          IPOLRX = IOPCDT(14,40) + IPOLX - 1                                    GEOWL   33
          IPOLDP = IREFTB(2,IPOLRX)                                             GEOWL   34
          IAVPOL = IPOLDP + IOPCDT(17,JOPPOL) + 2*IOPCDT(16,JOPPOL)             DEF2   146
          CALL GEOSTR(IA(IPOLDP+1),0,0,IAVPOL+1,IGDP)                           DEF2   147
      ELSEIF((NOVAL(H).ne.0).and.(NOVAL(W).ne.0))  THEN                         FIX8    41
          CALL GEOSTR(2,H,W,0,IGDP)                                             GEOWL   37
C=======  IF(IARP .gt. 0) AA(IAVPTR+IARP) = H*W  <= done by expressions!        DFTEX3 677
      END IF                                                                    GEOWL   38
      IA(IDP+1) = IGDP                                                          GEOWL   39
      IF (IGDP.GT.0) THEN                                                       FIX8    43
          CALL GEOPR(JOPCDT,JREF)                                               FIX8    44
      ELSE                                                                      FIX8    45
C ======= GO TO 1000  (we shall continue on to attachments for now)             FIX8    46
      END IF                                                                    FIX8    47
      IF (JOPCDT.EQ.JOPUGW) GO TO 1000                                          GEOWL   41
C              WINDOWS ON WALL                                                  GEOWL   42
      NWIN = IOPCDT(13,JOPWIN)                                                  GEOWL   43
      IF (NWIN.EQ.0) GO TO 200                                                  GEOWL   44
      DO IWIN=1,NWIN                                                            GEOWL   45
          IWNRX = IOPCDT(14,JOPWIN) + IWIN - 1                                  GEOWL   46
          IF (IREFTB(4,IWNRX).EQ.JREF) THEN                                     GEOWL   47
              CALL GEOATT(IWNRX,JOPWIN)                                         GEOWL   48
          END IF                                                                GEOWL   49
      END DO                                                                    GEOWL   50
  200 NDR = IOPCDT(13,JOPDR)                                                    GEOWL   51
      IF (NDR.EQ.0) GO TO 1000                                                  GEOWL   52
      DO IDR=1,NDR                                                              GEOWL   53
          IDRRX = IOPCDT(14,JOPDR) + IDR - 1                                    GEOWL   54
          IF (IREFTB(4,IDRRX).EQ.JREF) THEN                                     GEOWL   55
              CALL GEOATT(IDRRX,JOPDR)                                          GEOWL   56
          END IF                                                                GEOWL   57
      END DO                                                                    GEOWL   58
 1000 CONTINUE                                                                  GEOWL   59
      RETURN                                                                    GEOWL   60
      END                                                                       GEOWL   61
      SUBROUTINE GLTYPO                                                         GLTYPO   2
cDEC$ NOOPTIMIZE                                                                -048   243
C                                                                               GLTYPO   3
C               THIS SUBROUTINE WRITES THE GLASS PROPERTIES TO THE              GLTYPO   4
C               STANDARD FILE                                                   GLTYPO   5
C                                                                               GLTYPO   6
C               GLTYPO USES 17 WORDS OF COMMWK                                  GLTYPO   7
C                                                                               GLTYPO   8
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /GTVALX/ IGTCP,ISHCP,ICONP,IVTP,IGPCALC,IVTSWP,ISC1P,              -44d5    1
     1                ISC2P,ISS1P,ISS2P,IFTC,ISTC,IFABS,                        /GTVALX/ 3
     2                KWGTC,KWSHC,KWVT,KWSHSW,KWVTSW,KWSC1,KWSC2,               SUBTY8   3
     3                KWSS1,KWSS2,KWFTC,KWSTC,KWFABS,                           WLIB1    2
     4                IUCENTR,IHCOUT,IHROUT,IHIN,ITRANG,IABSANG,ITVANG,         WLIB1    3
     5                INLAYER,IRBVIS,IRBHEMI,ISHDCOF,IGPTHCK,IW3TIR,            WLIB1    4
     6                IEMBIR,IEMFIR,IGPCOND,IGPDCON,IGPVIS,IGPDVIS,             WLIB1    5
     7                IGPDENS,IGPDDEN,IGPPR,IGPDPR,ICOND                        WLIB1    6
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
C                                                                               GLTYPO  23
      DIMENSION  GLSC1(15)                                                      WLIB1   22
      DIMENSION  SPCOF(3,5)                                                     WLIB1   23
C              SPACER COEFFICIENTS, FROM E.U.FINLAYSON, D.K.ARASTEH,            WLIB1   24
C              C.HUIZENGA,M.D.RUBIN AND M.S.REILLY, "WINDOW 4.0:                WLIB1   25
C              DOCUMENTATION AND CALCULATION PROCEDURES," LBL-33943,            WLIB1   26
C              JULY 1993                                                        WLIB1   27
      DATA SPCOF/2.33,-0.01, 0.138,                                             WLIB1   28
     1           1.03, 0.76, 0.0085,                                            WLIB1   29
     2           0.82, 0.80, 0.0022,                                            WLIB1   30
     3           0.35, 0.83, 0.018,                                             WLIB1   31
     4           0.00, 1.00, 0.00   /                                           WLIB1   32
C                                                                               GLTYPO  34
      EQUIVALENCE (IKW,COMMWK(1)),(NKW,COMMWK(2)),                              GLTYPO  35
     1            (IDP,COMMWK(3)),(NAMPTR,COMMWK(5)),                           GLTYPO  36
     2            (IST,COMMWK(6)),(IPT,COMMWK(7)),                              GLTYPO  37
     3            (IT,COMMWK(8)),(IP,COMMWK(9)),                                GLTYPO  38
     4            (ITARP,COMMWK(10)),                                           GLTYPO  39
     5            (IAPTR,COMMWK(11)),(LEN,COMMWK(13)),                          GLTYPO  40
     6            (LVAL,COMMWK(17))                                             GLTYPO  41
      common /w4lib/ name(4), idwin, x0(10), ydat(10), nlayer,                  /W4LIB/  2
     1               gpthck(6), gpcond(6), gpdcon(6),                           /W4LIB/  3
     2               gpvis(6), gpdvis(6), gpdens(6),                            /W4LIB/  4
     3               gpdden(6), gppr(6), gpdpr(6), thck(6),                     /W4LIB/  5
     4               trang(10), trfit1, trfit2, trhemi,                         /W4LIB/  6
     5               absang(6,10), absft1(6), absft2(6),                        /W4LIB/  7
     6               abshem(6), w3tir(6), emfir(6),                             /W4LIB/  8
     7               embir(6), cond(6), iframe, uframe, hcout, hrout,           /W4LIB/  9
     8               hin, ucentr, ucbare, ispacr, shdcof, tvang(10),            /W4LIB/ 10
     9               tvfit1, tvfit2, tvhemi, spcoef(3), rbhemi, rbvis           /W4LIB/ 11
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
C                                                                               GLTYPO  42
C              cos 0, 10deg, 20deg, ... ,90deg                                  SUBTY8  15
      data x0/1.0,.984808,.939693,.866025,.776044,.642788,.5,                   SUBTY8  16
     1        .342020,.173648,0./                                               SUBTY8  17
C              1/8" CLEAR SINGLE PANE REFERENCE GLASS TRANSMISSION              WLIB1   36
C              AND ABSORPTION COEFFICIENTS FOR CALCULATION WHEN SHADING         WLIB1   37
C              COEFFICIENT IS SPECIFIED                                         WLIB1   38
C                                                                               WLIB1   39
      DATA  GLSC1/ -.01325 , 3.08716 , -3.68232 , 1.48683 , .077366 ,           WLIB1   40
     1             -.02718 , -.002691,  0.040548, 0.79901 , .05435  ,           WLIB1   41
     2             5*0. /                                                       WLIB1   42
C                                                                               GLTYPO 163
C              glass trans and abs vs cos of angle of incidence                 WLIB1   43
      fit4(x,c1,c2) = x*(2. - x + (1. - x)*(1. - x)*(c1 + c2*(2. + x)))         WLIB1   44
C               OBTAIN SOME QUANTITIES FROM THE COMMAND TABLE                   GLTYPO 164
      LEN    = 1                                                                GLTYPO 165
      NGT    = IOPCDT(13,JOPGT)                                                 GLTYPO 166
      IF (NGT .EQ. 0)  GO TO 1000                                               GLTYPO 167
      NKW    = IOPCDT(10,JOPGT)                                                 GLTYPO 168
      IKW    = IOPCDT(9,JOPGT)                                                  GLTYPO 169
      LVAL   = IOPCDT(16,JOPGT)                                                 GLTYPO 171
      LTOT = IOPCDT(17,JOPGT) + 3*LVAL + IOPCDT(18,JOPGT)                       4XAA   380
C                SAVE SPACE FOR THE OUTPUT BUFFER                               GLTYPO 172
      LEN    = NGT*LGT                                                          GLTYPO 173
      CALL CKAA(IA,LEN)                                                         GLTYPO 174
C                IST IS WHERE THE OUTPUT BUFFER STARTS                          GLTYPO 175
      IST    = IAX + 1                                                          GLTYPO 176
C                IPT IS WHERE THE NEXT GT GOES                                  GLTYPO 177
      IPT    = IAX                                                              GLTYPO 178
C              FILL OUTPUT BUFFER WITH ZEROES                                   GLTYPO 179
      CALL FILLN(0.,AA(IST),LEN)                                                GLTYPO 180
      DO 100 IGT=1,NGT                                                          GLTYPO 181
C                PICK UP NAME AND DATA POINTERS                                 GLTYPO 182
      IRX = IOPCDT(14,JOPGT) + IGT - 1                                          REFTB1 224
      NAMPTR = IREFTB(1,IRX)                                                    REFTB1 225
      IDP = IREFTB(2,IRX)                                                       REFTB1 226
C                MOVE IN NAME                                                   GLTYPO 185
      IF (NAMPTR .GT. 0)  CALL MOVEN(ISYMTB(1,NAMPTR),IA(IPT+1),8)              BIGNAM  86
      IAVPTR = MVTOSM(IRX,JOPGT,0)                                              OUT1    30
C                CONVERT SYMBOL TABLE POINTERS TO VALUES                        GLTYPO 187
      CALL SYMFIL(ISYMTB,KONTXT(1,IKW),NKW,IA(IAVPTR+1))                        REFTB1 228
C              if shading-coeff specified, set gtc to -1                        WLIB1   45
      IF (NOVAL(IA(IAVPTR+ISHCP)).NE.0)                                         SUBTY8  18
     1    ia(iavptr+igtcp) = -1                                                 WLIB1   47
C              number of non-window-lib keywords excluding PICTURE and          WLIB1   48
C              DRAWING and all compliance or BDL-only keywords                  -042e    2
      lvalo = 18                                                                WLIB1   50
C              output buffer pointer for window library values                  WLIB1   51
C              (lvalo + 8 (name) + 15 (ref glass coeffs))                       BIGNAM  87
      igp = ipt + lvalo + 23                                                    BIGNAM  88
C                                                                               WLIB1   54
C              window libary values                                             WLIB1   55
C                                                                               WLIB1   56
      IF (NOVAL(IA(IAVPTR+ISHCP)).NE.0) GO TO 300                               SUBTY8  19
C                                                                               WLIB1   58
      call ptrs(jopgtc,ia(iavptr+igtcp),irxgtc,idpgtc,iavpgtc)                  WLIB1   59
C              center-of-glass u-value minus films for cwf calc                 WLIB1   60
      ucentr = aa(iavpgtc+iucentr)                                              WLIB1   61
      hcout  = aa(iavpgtc+ihcout)                                               WLIB1   62
      hrout  = aa(iavpgtc+ihrout)                                               WLIB1   63
      hin    = aa(iavpgtc+ihin)                                                 WLIB1   64
      ucbare = 1./(1./ucentr - 1./(hcout+hrout) - 1./hin)                       WLIB1   65
      ucbare = amax1(0.001,ucbare)                                              WLIB1   66
C              number of solid layers (panes)                                   WLIB1   67
      nlayer = int(aa(iavpgtc+inlayer))                                         WLIB1   68
C                                                                               WLIB1   69
C              for window library, set gtc to no. of layers                     WLIB1   70
C              (0 for unglazed aperture, otherwise 1-5)                         WLIB1   71
C                                                                               WLIB1   72
      ia(iavptr+igtcp) = nlayer                                                 WLIB1   73
C                                                                               WLIB1   74
C              fit of solar trans vs incidence angle in 10deg steps             WLIB1   75
C              to get solar transmittance coeffs                                WLIB1   76
C                                                                               WLIB1   77
      do jj=1,10                                                                WLIB1   78
        trang(jj) = aa(iavpgtc + itrang + jj - 1)                               WLIB1   79
        ydat(jj) = trang(jj)/(trang(1) + 1.e-6)                                 WLIB1   80
        ii = jj                                                                 -44d5   14
        AA(IPT+<+TRvals>+1) = trang(jj)                                         -048j    2
      enddo                                                                     WLIB1   81
      call qikft4(10,x0,ydat,trfit1,trfit2)                                     WLIB1   82
      if(msglvl.gt.4.and.noecho.ne.1) then                                      WLIB1   83
          write (ioutpt,'(/,8x,''Glass-type = '',8a4,/)')                       -043a   27
     1        (isymtb(ii,namptr),ii=1,8)                                        -043a   28
          write (ioutpt,'(/,8x,''Glass-type = '',8a4,/)')                       SUBTY8  20
     1        (isymtb(ii,namptr),ii=1,8)                                        SUBTY8  21
          write(ioutpt,'(/,8x,''Solar transmittance fit: '',                    WLIB1   84
     .          2x,''c1='',f10.4,2x,''c2='',f10.4,/,                            WLIB1   85
     .          8x,''angle    input      fit    pct diff'')')                   WLIB1   86
     .          trfit1, trfit2                                                  WLIB1   87
          do jj=1,10                                                            WLIB1   88
              y4 = fit4(x0(jj),trfit1,trfit2)                                   WLIB1   89
              diff = 0.                                                         WLIB1   90
              if (ydat(jj) .gt.0.) diff = (y4 - ydat(jj))/ydat(jj)              WLIB1   91
              write(ioutpt,'(10x,i2,2f10.3,f8.1)') 10*(jj-1),                   WLIB1   92
     .         ydat(jj)*trang(1), y4*trang(1), 100.*diff                        WLIB1   93
          enddo                                                                 WLIB1   94
      endif                                                                     WLIB1   95
C                                                                               WLIB1   96
C              fit to get solar absorptance coeffs for each layer               WLIB1   97
C              (skip unglazed opening, nlayer=0)                                WLIB1   98
C                                                                               WLIB1   99
      if(nlayer.eq.0) go to 299                                                 WLIB1  100
      do kk=1,nlayer                                                            WLIB1  101
         do jj=1,10                                                             WLIB1  102
           absang(kk,jj) = aa(iavpgtc + iabsang + (kk-1)*11 + jj - 1)           WLIB1  103
           ydat(jj) = absang(kk,jj)/(absang(kk,1) + 1.e-6)                      WLIB1  104
           AA(IPT+<+ABSvals>+1 + 10*(kk-1)) = absang(kk,jj)                     -048j    3
         enddo                                                                  WLIB1  105
         call qikft4(10,x0,ydat,absft1(kk),absft2(kk))                          WLIB1  106
         if(msglvl.gt.4.and.noecho.ne.1) then                                   WLIB1  107
              write(ioutpt,'(/,8x,''Solar absorptance fit: layer'',             WLIB1  108
     .          i2,2x,''c1='',f10.4,2x,''c2='',f10.4,/,                         WLIB1  109
     .          8x,''angle    input      fit    pct diff'')')                   WLIB1  110
     .          kk,absft1(kk),absft2(kk)                                        WLIB1  111
              do jj=1,10                                                        WLIB1  112
                y4 = fit4(x0(jj),absft1(kk),absft2(kk))                         WLIB1  113
                diff = 0.                                                       WLIB1  114
                if (ydat(jj).gt.0.) diff = (y4-ydat(jj))/ydat(jj)               WLIB1  115
                write(ioutpt,'(10x,i2,2f10.3,f8.1)') 10*(jj-1),                 WLIB1  116
     .           ydat(jj)*absang(kk,1), y4*absang(kk,1),                        WLIB1  117
     .           100.*diff                                                      WLIB1  118
              enddo                                                             WLIB1  119
         endif                                                                  WLIB1  120
      enddo                                                                     WLIB1  121
C                                                                               WLIB1  122
C             fit to get visible transmittance coefficients                     WLIB1  123
C                                                                               WLIB1  124
      do jj=1,10                                                                WLIB1  125
        tvang(jj) = aa(iavpgtc + itvang + jj -1)                                WLIB1  126
        ydat(jj) = tvang(jj)/(tvang(1) + 1.e-6)                                 WLIB1  127
        ii = jj                                                                 -44d5   17
        AA(IPT+<+TVvals>+1) = tvang(jj)                                         -048j    4
      enddo                                                                     WLIB1  128
      call qikft4(10,x0,ydat,tvfit1,tvfit2)                                     WLIB1  129
      if(msglvl.gt.4.and.noecho.ne.1) then                                      WLIB1  130
           write(ioutpt,'(/,8x,''Visible transmittance fit: '',                 WLIB1  131
     .          2x,''c1='',f10.4,2x,''c2='',f10.4,/,                            WLIB1  132
     .          8x,''angle    input      fit    pct diff'')')                   WLIB1  133
     .           tvfit1, tvfit2                                                 WLIB1  134
           do jj=1,10                                                           WLIB1  135
              y4 = fit4(x0(jj),tvfit1,tvfit2)                                   WLIB1  136
              diff = 0.                                                         WLIB1  137
              if (ydat(jj) .gt.0.) diff = (y4 - ydat(jj))/ydat(jj)              WLIB1  138
              write(ioutpt,'(10x,i2,2f10.3,f8.1)') 10*(jj-1),                   WLIB1  139
     .         ydat(jj)*tvang(1), y4*tvang(1), 100.*diff                        WLIB1  140
           enddo                                                                WLIB1  141
          write(ioutpt,'(/)')                                                   WLIB1  142
      endif                                                                     WLIB1  143
  299 continue                                                                  WLIB1  144
C                                                                               WLIB1  145
C              transfer window library values to output buffer                  WLIB1  146
C                                                                               WLIB1  147
      ia(igp+1) = nlayer                                                        WLIB1  148
      aa(igp+2) = aa(iavpgtc + irbvis)                                          WLIB1  149
      aa(igp+3) = aa(iavpgtc + irbhemi)                                         WLIB1  150
      aa(igp+4) = ucbare                                                        WLIB1  151
      aa(igp+5) = ucentr                                                        WLIB1  152
      aa(igp+6) = aa(iavpgtc + ishdcof)                                         WLIB1  153
C              layer values                                                     WLIB1  154
      do ii=1,nlayer                                                            WLIB1  155
         aa(igp+10+ii)  = aa(iavpgtc + iw3tir + ii - 1)                         WLIB1  156
         aa(igp+15+ii)  = aa(iavpgtc + iembir + ii - 1)                         WLIB1  157
         aa(igp+20+ii)  = aa(iavpgtc + iemfir + ii - 1)                         WLIB1  158
         aa(igp+57+ii)  = aa(iavpgtc + icond  + ii - 1)                         WLIB1  159
         aa(igp+62+ii)  = absft1(ii)                                            WLIB1  160
         aa(igp+67+ii)  = absft2(ii)                                            WLIB1  161
         aa(igp+72+ii)  = aa(iavpgtc + iabsang + 11*(ii-1) + 10)                WLIB1  162
         aa(igp+77+ii)  = aa(iavpgtc + iabsang + 11*(ii-1))                     WLIB1  163
      enddo                                                                     WLIB1  164
C              gap values                                                       WLIB1  165
      do ii = 1,nlayer-1                                                        WLIB1  166
         aa(igp+6 +ii) = aa(iavpgtc + igpthck + ii - 1)                         WLIB1  167
         aa(igp+25+ii) = aa(iavpgtc + igpcond + ii - 1)                         WLIB1  168
         aa(igp+29+ii) = aa(iavpgtc + igpdcon + ii - 1)                         WLIB1  169
         aa(igp+33+ii) = aa(iavpgtc + igpvis  + ii - 1)                         WLIB1  170
         aa(igp+37+ii) = aa(iavpgtc + igpdvis + ii - 1)                         WLIB1  171
         aa(igp+41+ii) = aa(iavpgtc + igpdens + ii - 1)                         WLIB1  172
         aa(igp+45+ii) = aa(iavpgtc + igpdden + ii - 1)                         WLIB1  173
         aa(igp+49+ii) = aa(iavpgtc + igppr   + ii - 1)                         WLIB1  174
         aa(igp+53+ii) = aa(iavpgtc + igpdpr  + ii - 1)                         WLIB1  175
      enddo                                                                     WLIB1  176
C               trhemi                                                          WLIB1  177
      aa(igp+83) = aa(iavpgtc + itrang + 10)                                    WLIB1  178
C               tsol, normal incidence                                          WLIB1  179
      aa(igp+84) = trang(1)                                                     WLIB1  180
C               tvis, normal incidence                                          WLIB1  181
      aa(igp+85) = tvang(1)                                                     WLIB1  182
C               transmission fit coeffsn                                        WLIB1  183
      aa(igp+86) = trfit1                                                       WLIB1  184
      aa(igp+87) = trfit2                                                       WLIB1  185
      aa(igp+88) = tvfit1                                                       WLIB1  186
      aa(igp+89) = tvfit2                                                       WLIB1  187
C              tvhemi                                                           WLIB1  188
      aa(igp+90) = aa(iavpgtc + itvang + 10)                                    WLIB1  189
C              next location is unused                                          WLIB1  190
      aa(igp+91) = 0.                                                           WLIB1  191
C                                                                               WLIB1  192
  300 CONTINUE                                                                  WLIB1  193
C              override visible transmittance with window library value         WLIB1  194
      IF (NOVAL(IA(IAVPTR+ISHCP)).EQ.0)                                         SUBTY8  22
     1   AA(IAVPTR+IVTP) = TVANG(1)                                             FIXJH3   1
C                IF S-C NOT SET,  SET TO 1.0                                    WLIB1  197
      IF (NOVAL(IA(IAVPTR+ISHCP)).EQ.0)                                         SUBTY8  23
     1   AA(IAVPTR+ISHCP) = 1.0                                                 WLIB1  199
C              move keyword values (except those from window library)           WLIB1  200
C              into output buffer                                               WLIB1  201
      CALL MOVEN(AA(IAVPTR+1),AA(IPT+9),LVALO)                                  -047hT   4
C              number of panes is unused                                        SUBTY8  24
      IA(IPT+9) = 0                                                             SUBTY8  25
C              output buffer pointer for tar coefficients                       WLIB1  203
      itarp = ipt + 1 + 8 + lvalo                                               BIGNAM  90
C              move in tar coefficients for reference glass                     WLIB1  205
      CALL MOVEN(GLSC1(1),AA(ITARP),15)                                         WLIB1  206
C                SAVE STANDARD FILE POSITION                                    REFTB1 248
      IA(IDP+1) = IPT + 1 - IAX                                                 REFTB1 249
      IPT    = IPT + LGT                                                        REFTB1 250
  100 CONTINUE                                                                  GLTYPO 230
C                WRITE OUT THE STANDARD FILE                                    GLTYPO 231
      WRITE (ISTNDF) NGT, LEN                                                   GLTYPO 232
      CALL WRITEN(ISTNDF,IA(IST),LEN)                                           GLTYPO 233
      IF (IREPRT(32) .EQ. 1)                                                    GLTYPO 234
     1 CALL DUMPIT(20HGLASS-TYPE          ,IA(IST),LEN)                         GLTYPO 235
      GO TO 2000                                                                GLTYPO 236
 1000 WRITE (ISTNDF) IZERO, IONE                                                GLTYPO 237
      WRITE (ISTNDF) IZERO                                                      GLTYPO 238
 2000 CONTINUE                                                                  GLTYPO 239
C              SET THE GEOMETRY BLOCK SF POINTER                                GLTYPO 240
      IWLB  = IGTB + LEN                                                        BLIND   53
      RETURN                                                                    GLTYPO 242
      END                                                                       GLTYPO 243
      SUBROUTINE WINLAYD(JREF,JOPCDT,LKDAT,NAMPTR,LSDPTR,LKPTR,Iphase)          DFTEX3 678
C                                                                               WILAYD   3
C         Checks, if in the new data-block of a window-layer                    WILAYD   4
C         any false data is found (e.g. Trans+Refl > 1)                         WILAYD   5
C                                                                               WILAYD   6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      INTEGER IBLD_T(6), IBLD_R(6), IGLT_T(4), IGLT_R(4)                        BLIND5   7
C         List of transmittances (IT) and reflectances (IR) to be checked       BLIND5   8
      DATA IBLD_T/  9,  9, 18, 18, 21, 21 /                                     BLIND5   9
      DATA IBLD_R/ 10, 11, 19, 20, 22, 23 /                                     BLIND5  10
      DATA IGLT_T/ 3, 3, 21, 21 /                                               WILAYD  18
      DATA IGLT_R/ 4, 5, 22, 23 /                                               WILAYD  19
      DATA IWLTYPE,IANGMIN,IANGMAX,ICOVMIN,ICOVMAX,IANG,ICOV                    WILAYD  20
     1     /     1,     25,     26,     27,     28,  40,  41 /                  BLIND5  11
      DATA ISEP,ITHICK /30, 31/                                                 BLIND5  12
c                                                                               WILAYD  22
C              SET SOME POINTERS                                                WILAYD  23
      NSAVE  = IOPCDT(17,JOPCDT)                                                WILAYD  24
C              IKW IS THE FIRST KEYWORD FOR COMMAND                             WILAYD  25
      IKW    = IOPCDT(9,JOPCDT)                                                 WILAYD  26
C              NKW IS THE NUMBER OF KEYWORDS FOR THIS COMMAND                   WILAYD  27
      NKW    = IOPCDT(10,JOPCDT)                                                WILAYD  28
C              LVAL IS THE LENGTH OF THE VALUE ARRAY                            WILAYD  29
      LVAL   = IOPCDT(16,JOPCDT)                                                WILAYD  30
C              IAVPT1 IS THE START OF THE VALUE BLOCK                           WILAYD  31
      IAXS = IREFTB(2,JREF)                                                     WILAYD  32
      IAVPT1 = IAXS + NSAVE                                                     WILAYD  33
C              LTOT IS THE TOTAL SIZE OF THE VALUE BLOCK                        WILAYD  34
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,JOPCDT)                                 WILAYD  35
      IFLAG  = 0                                                                WILAYD  36
C              SET SOME DEFAULTS; IAVPTR POINTS TO USER INPUT;                  WILAYD  37
      IAVPTR = IAVPT1 + LVAL                                                    WILAYD  38
 1000 IF(Iphase .ne. 2)  THEN                                                   DFTEX3 679
        CALL LSDFIL(JOPCDT,ISYMTB,KONTXT(1,IKW),NKW,AA(IAVPT1+1),               DFTEX3 680
     $              AA(LKDAT+1),LSDPTR,ISYMTB(1,LKPTR),NAMPTR,LVAL)             DFTEX3 681
        IF(Iphase .eq. 1) RETURN                                                DFTEX3 682
      ENDIF                                                                     DFTEX3 683
      IAVPTR = IAVPT1 + 2*LVAL                                                  WILAYD  41
C+1                                                                             WILAYD  42
C         get pointer of first keyword in keywordtable                          WILAYD  43
      KEYPTR=IOPCDT(9,JOPCDT)+2                                                 WILAYD  44
C         check both reflectances for each transmittance                        WILAYD  45
      IF (IA(IAVPTR+IWLTYPE).EQ.1055) THEN                                      WILAYD  46
c         for BLINDS                                                            WILAYD  47
         DO ICHK=1,6                                                            BLIND5  13
C         Check if absorptance is positive, if not : error                      WILAYD  49
            ABS=1.-AA(IAVPTR+IBLD_T(ICHK))-AA(IAVPTR+IBLD_R(ICHK))              WILAYD  50
            IF (ABS.LT.0.) THEN                                                 WILAYD  51
C         call errormessage                                                     WILAYD  52
C         write errortext including the keywordnames with wrong values          ERR-01 632
               CALL MSG2(104,KONTXT(1,KEYPTR+IBLD_T(ICHK)-3),                   ERR-01 633
     $                       KONTXT(1,KEYPTR+IBLD_R(ICHK)-3),II,II)             ERR-01 634
               END IF                                                           WILAYD  58
         END DO                                                                 WILAYD  59
            ABS=1.-AA(IAVPTR+3)-AA(IAVPTR+6)-AA(IAVPTR+7)                       BLIND5  14
            IF (ABS.LT.0.) THEN                                                 BLIND5  15
               CALL MSG2(105,KONTXT(1,KEYPTR+3-3),                              ERR-01 635
     $                       KONTXT(1,KEYPTR+6-3),                              ERR-01 636
     $                       KONTXT(1,KEYPTR+7-3),II)                           ERR-01 637
               END IF                                                           BLIND5  21
            ABS=1.-AA(IAVPTR+3)-AA(IAVPTR+6)-AA(IAVPTR+8)                       BLIND5  22
            IF (ABS.LT.0.) THEN                                                 BLIND5  23
               CALL MSG2(105,KONTXT(1,KEYPTR+3-3),                              ERR-01 638
     $                       KONTXT(1,KEYPTR+6-3),                              ERR-01 639
     $                       KONTXT(1,KEYPTR+8-3),II)                           ERR-01 640
               END IF                                                           BLIND5  29
            ABS=1.-AA(IAVPTR+12)-AA(IAVPTR+15)-AA(IAVPTR+16)                    BLIND5  30
            IF (ABS.LT.0.) THEN                                                 BLIND5  31
               CALL MSG2(105,KONTXT(1,KEYPTR+12-3),                             ERR-01 641
     $                       KONTXT(1,KEYPTR+15-3),                             ERR-01 642
     $                       KONTXT(1,KEYPTR+16-3),II)                          ERR-01 643
               END IF                                                           BLIND5  37
            ABS=1.-AA(IAVPTR+12)-AA(IAVPTR+15)-AA(IAVPTR+17)                    BLIND5  38
            IF (ABS.LT.0.) THEN                                                 BLIND5  39
               CALL MSG2(105,KONTXT(1,KEYPTR+12-3),                             ERR-01 644
     $                       KONTXT(1,KEYPTR+15-3),                             ERR-01 645
     $                       KONTXT(1,KEYPTR+17-3),II)                          ERR-01 646
               END IF                                                           BLIND5  45
      END IF                                                                    WILAYD  60
      IF (IA(IAVPTR+IWLTYPE).EQ.1056) THEN                                      WILAYD  61
c         for GLASS-LAYERS                                                      WILAYD  62
         DO ICHK=1,4                                                            WILAYD  63
C         Check if absorptance is positive, if not : error                      WILAYD  64
            ABS=1.-AA(IAVPTR+IGLT_T(ICHK))-AA(IAVPTR+IGLT_R(ICHK))              WILAYD  65
            IF (ABS.LT.0.) THEN                                                 WILAYD  66
C         call errormessage                                                     WILAYD  67
C         write error text including the keywordnames with wrong values         ERR-01 647
               CALL MSG2(104,KONTXT(1,KEYPTR+IGLT_T(ICHK)-3),                   ERR-01 648
     $                       KONTXT(1,KEYPTR+IGLT_R(ICHK)-3),II,II)             ERR-01 649
               END IF                                                           WILAYD  73
         END DO                                                                 WILAYD  74
      END IF                                                                    WILAYD  75
C         for BLIND check properties                                            WILAYD  76
      IF (IA(IAVPTR+IWLTYPE).EQ.1055) THEN                                      WILAYD  77
C         SLAT-ANGLE-MIN MUST BE .LE. ANGLE-MAX                                 WILAYD  78
         IF (AA(IAVPTR+IANGMIN).GT.AA(IAVPTR+IANGMAX)) THEN                     WILAYD  79
            CALL MSG2(106,AA(IAVPTR+IANGMIN),AA(IAVPTR+IANGMAX),II,II)          ERR-01 650
         END IF                                                                 WILAYD  82
C         SLAT-COVER-MIN MUST BE .LE. COVER-MAX                                 WILAYD  83
         IF (AA(IAVPTR+ICOVMIN).GT.AA(IAVPTR+ICOVMAX)) THEN                     WILAYD  84
            CALL MSG2(107,AA(IAVPTR+ICOVMIN), AA(IAVPTR+ICOVMAX),II,II)         ERR-01 651
         END IF                                                                 WILAYD  87
C         SLAT-ANGLE MUST BE BETWEEN ANGLE-MIN AND ANGLE-MAX                    WILAYD  88
         IF ((AA(IAVPTR+IANG).LT.AA(IAVPTR+IANGMIN)).OR.                        WILAYD  89
     1       (AA(IAVPTR+IANG).GT.AA(IAVPTR+IANGMAX))) THEN                      WILAYD  90
            CALL MSG2(108,AA(IAVPTR+IANGMIN),AA(IAVPTR+IANG),                   ERR-01 652
     $                    AA(IAVPTR+IANGMAX),II)                                ERR-01 653
         ENDIF                                                                  WILAYD  94
C         SLAT-COVER MUST BE BETWEEN COVER-MIN AND COVER-MAX                    WILAYD  95
         IF ((AA(IAVPTR+ICOV).LT.AA(IAVPTR+ICOVMIN)).OR.                        WILAYD  96
     1       (AA(IAVPTR+ICOV).GT.AA(IAVPTR+ICOVMAX))) THEN                      WILAYD  97
            CALL MSG2(109,AA(IAVPTR+ICOVMIN),AA(IAVPTR+ICOV),                   ERR-01 654
     $                    AA(IAVPTR+ICOVMAX),II)                                ERR-01 655
         ENDIF                                                                  WILAYD 101
C            COVER-MIN MUST BE GREATER THAN COVER WHEN BLIND IS                 BLIND5  46
C            FULLY WITHDRAWN                                                    BLIND5  47
         CWITHDR = AA(IAVPTR+ITHICK)/(AA(IAVPTR+ITHICK)+AA(IAVPTR+ISEP))        BLIND5  48
         IF (AA(IAVPTR+ICOVMIN).LT.CWITHDR) THEN                                BLIND5  49
            CALL MSG2(110,AA(IAVPTR+ICOVMIN),CWITHDR,                           ERR-01 656
     $                    AA(IAVPTR+ITHICK),AA(IAVPTR+ISEP))                    ERR-01 657
         ENDIF                                                                  BLIND5  53
      END IF                                                                    WILAYD 107
      GOTO 9999                                                                 WILAYD 108
 9999 END                                                                       WILAYD 131
      SUBROUTINE WILAYO                                                         WILAYO   2
C                                                                               WILAYO   3
C         collects all WINDOW-LAYERs and writes them to                         WILAYO   4
C         the SF.                                                               WILAYO   5
C                                                                               WILAYO   6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /LBLOCK/ LSFBLK(20),N(20)                                         BLIND    2
      EQUIVALENCE (LWPARB,LSFBLK(4)),(LCB1,LSFBLK(5)),                          /LBLOCK/ 3
     1            (LCB2,LSFBLK(6)),(LCONSB,LSFBLK(6)),                          /LBLOCK/ 4
     2            (LGEOB,LSFBLK(9))                                             BLIND    3
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
C                                                                               WILAYO  21
C                IKYOP POINTS TO WHERE THE KEYWORD VALUES ARE TO BE             WILAYO  22
C                STORED IN THE OUTPUT BUFFER                                    WILAYO  23
C                                                                               WILAYO  24
C                OBTAIN SOME QUANTITIES FROM THE COMMAND TABLE                  WILAYO  25
      NSAVE  = IOPCDT(17,JOPWIL)                                                WILAYO  26
      LEN    = 1                                                                WILAYO  27
      NWL    = IOPCDT(13,JOPWIL)                                                WILAYO  28
      IF (NWL .EQ. 0)  GO TO 1000                                               WILAYO  29
      NKW    = IOPCDT(10,JOPWIL)                                                WILAYO  30
      IKW    = IOPCDT(9,JOPWIL)                                                 WILAYO  31
      LVAL   = IOPCDT(16,JOPWIL)                                                WILAYO  32
      LTOT   = IOPCDT(17,JOPWIL) + 3*LVAL + IOPCDT(18,JOPWIL)                   WILAYO  33
C                SAVE SPACE FOR THE OUTPUT BUFFER                               WILAYO  34
      LEN    = NWL*LWINLAY                                                      WILAYO  35
      CALL CKAA(IA,LEN)                                                         WILAYO  36
C                IST IS WHERE THE OUTPUT BUFFER STARTS                          WILAYO  37
      IST    = IAX + 1                                                          WILAYO  38
C                IPT IS WHERE THE NEXT GT GOES                                  WILAYO  39
      IPT    = IAX                                                              WILAYO  40
C              FILL OUTPUT BUFFER WITH ZEROES                                   WILAYO  41
      CALL FILLN(0.,AA(IST),LEN)                                                WILAYO  42
      DO IWL=1,NWL                                                              WILAYO  43
C                PICK UP NAME AND DATA POINTERS                                 WILAYO  44
         IRX = IOPCDT(14,JOPWIL) + IWL - 1                                      WILAYO  45
         NAMPTR = IREFTB(1,IRX)                                                 WILAYO  46
         IDP = IREFTB(2,IRX)                                                    WILAYO  47
C                MOVE IN NAME                                                   WILAYO  48
         IF (NAMPTR .GT. 0)  CALL MOVEN(ISYMTB(1,NAMPTR),IA(IPT+1),8)           BIGNAM  91
         IAVPTR = MVTOSM(IRX,JOPWIL,0)                                          WILAYO  50
C                CONVERT SYMBOL TABLE POINTERS TO VALUES                        WILAYO  51
         CALL SYMFIL(ISYMTB,KONTXT(1,IKW),NKW,IA(IAVPTR+1))                     WILAYO  52
C                MOVE DATA INTO OUTPUT BUFFER                                   WILAYO  53
         CALL MOVEN(AA(IAVPTR+1),AA(IPT+9),LVAL)                                BIGNA2  26
C                SAVE STANDARD FILE POSITION                                    WILAYO  55
         IA(IDP+1) = IPT + 1 - IAX                                              WILAYO  56
         IPT    = IPT + LWINLAY                                                 WILAYO  57
      END DO                                                                    WILAYO  58
C                WRITE THE STANDARD FILE                                        WILAYO  59
      WRITE (ISTNDF) NWL,LEN                                                    WILAYO  60
      CALL WRITEN(ISTNDF,IA(IST),LEN)                                           WILAYO  61
      IF (IREPRT(32) .EQ. 1)                                                    WILAYO  62
     1   CALL DUMPIT(20HWINDOW-LAYERS       ,IA(IST),LEN)                       WILAYO  63
      GO TO 2000                                                                WILAYO  64
 1000 WRITE (ISTNDF) IZERO,IONE                                                 WILAYO  65
      WRITE (ISTNDF) IZERO                                                      WILAYO  66
 2000 CONTINUE                                                                  WILAYO  67
C              SET GEO-BLOCK SF POINTER                                         WILAYO  68
      IGEOB=IWLB+LEN                                                            WILAYO  69
      RETURN                                                                    WILAYO  70
      END                                                                       WILAYO  71
      SUBROUTINE WINSTRD (IAVPTR,JSYM,JREF)                                     WINSTRD  2
C                                                                               WINSTRD  3
C         CHECK STRUCTURE AND BLIND SCHEDULES                                   WINSTRD  4
C         CREATE GLASS-TYPE-CODE FOR STRUCTURED WINDOW                          WINSTRD  5
C                                                                               WINSTRD  6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /IUNITS/ VKONV(300),DUMLOG(4),JUNITS(4,300,2),NUNITS,KUNITS        UNITS1   1
      INTEGER DUMLOG                                                            SUBTY1   1
      DIMENSION IUNITS(4,300)                                                   UNITS1   2
      EQUIVALENCE (IUNITS(1,1),JUNITS(1,1,1))                                   /IUNITS/ 4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
c        data for creating the GLASS-TYPE-CODE                                  WINSTRD 18
      DIMENSION IGTCNAM(8), IGTDSC(16)                                          WINSTRD 19
      COMMON /WINSTR/  IGTCNUMB                                                 /WINSTR/ 2
      CHARACTER*32 GTCNAM                                                       FIX8    48
      CHARACTER*64 GTDSC                                                        WINSTRD 21
      EQUIVALENCE (GTCNAM,IGTCNAM(1))                                           WINSTRD 22
      EQUIVALENCE (GTDSC, IGTDSC (1))                                           WINSTRD 23
      DATA  IGTCNL, IGTCCO  / 2, 3 /                                            WINSTRD 24
      DATA  IGTGTC , IGTSHCC, IGTGLC , IGTVIST, IGTOUTE, IGTFRC,                WINSTRD 25
     1      IGTSPTY, IGTFRA , IGTCONV, IGTPIC , IGTDRW                          WINSTRD 26
     2     /      2,       3,       4,       5,      14,     15,                WINSTRD 27
     3           16,      17,      18,      19,      20 /                       WINSTRD 28
c        data for the layer-check                                               WINSTRD 29
      REAL OLD(31:38),AIR(31:38)                                                WINSTRD 30
      DIMENSION IBLEX (5)                                                       WINSTRD 31
      DATA IBLEX / 0,0,0,0,0 /                                                  WINSTRD 32
      DATA MWISTC1, IWIGT /     64,     1 /                                     WINSTRD 33
      DATA  IWLTYPE, IWLCOND, IWLDCOND, IWLVIS, IWLDVIS, IWLDENS,               WINSTRD 34
     1     IWLDDENS,   IWLPR,   IWLDPR                                          WINSTRD 35
     2    /       1,      32,       33,     34,      35,      36,               WINSTRD 36
     3           37,      38,       39   /                                      WINSTRD 37
c        data for storing in GLASS-TYPE-CODE                                    WINSTRD 38
      DATA IGTNL , IGTGTH, IGTGC , IGTGDC , IGTGV  , IGTGDV, IGTGD ,            WINSTRD 39
     1     IGTGDD,  IGTGP, IGTGDP, IGTTSOL, IGTTVIS, IGTAB1, IGTAB2,            WINSTRD 40
     2     IGTAB3, IGTAB4, IGTAB5, IGTHRBS, IGTHRBV, IGTSHC, IGTPTI,            WINSTRD 41
     3     IGTPEF, IGTPEB, IGTPTH, IGTPC  , IGTFC  , IGTUC , IGTDES             WINSTRD 42
     4    /    17,     18,     22,      26,      30,     34,     38,            WINSTRD 43
     5         42,     46,     50,      54,      65,     76,     87,            -043a   29
     6         98,    109,    120,     131,     132,    133,    134,            WINSTRD 45
     7        139,    144,    149,     154,     159,    162,      1 /           WINSTRD 46
      DATA  IWLTH, IWLTIR,  IWLEF,   IWLEB                                      WINSTRD 47
     1   /     31,     21,     22,      23 /                                    WINSTRD 48
      DIMENSION TF(100)                                                         WINSTRD 49
c        data for schedule-check                                                WINSTRD 50
      DIMENSION  MWIADJ (2),  MWISCH (2), MWITRI (2)    ,MWIAPL (2),            WINSTRD 51
     1          NONESYM (2), MSCHSYM (2), MSCTYSYM (2,4)                        WINSTRD 52
      CHARACTER*5 ADJUSTXT (2)                                                  WINSTRD 53
      DATA  MWIADJ, MWISCH, MWITRI, MWIAPL                                      WINSTRD 54
     1    /  75,79,  73,77,  74,78,  76,80 /                                    WINSTRD 55
      DATA  NONESYM, MSCHSYM  / 1061, 1064, 1066, 1067 /                        WINSTRD 56
      DATA  ISCTYPE / 0 /                                                       WINSTRD 57
      DATA  MSCTYSYM /   0,   0, 894, 894,                                      WINSTRD 58
     1                 474, 474, 473, 473 /                                     WINSTRD 59
      DATA  ADJUSTXT / 'SLATS', 'BLIND' /                                       WINSTRD 60
      DATA IStartGT, IEndGT /1275,1314/                                         DFTEX4 341
C                                                                               WINSTRD 61
C              WIN-SPEC-METHOD                                                  BLIND2  23
         IF(NOVAL(IA(IAVPTR+8)) .NE. 0)  THEN                                   DFTEX4 342
           METHSPEC = ISYMTB(12,IA(IAVPTR+8))                                   DFTEX4 343
         ELSE                                                                   DFTEX4 344
           IA(IAVPTR+8) = IREQD                                                 -048s    1
           RETURN                                                               DFTEX4 346
         ENDIF                                                                  DFTEX4 347
C         error if WIN-SPEC-METHOD = GLASS-TYPE-INPUT and no GLASS-TYPE         BLIND2  25
      IF((NOVAL(AA(IAVPTR+IWIGT)).eq.0) .AND. (METHSPEC.eq.0)) THEN             DFTEX3 684
         CALL MSG2(50,'WIN-SPEC-METHOD ','GLASS-TYPE-INPUT',                    ERR-01 658
     $                'GLASS-TYPE      ',II)                                    ERR-01 659
         RETURN                                                                 DFTEX4 348
      ENDIF                                                                     BLIND2  33
C         error if WIN-SPEC-METHOD = STRUCTURE-INPUT and no STRUCTURE           BLIND2  34
      IF((NOVAL(AA(IAVPTR+MWISTC1)).eq.0) .AND. (METHSPEC.eq.1)) THEN           DFTEX3 685
         CALL MSG2(50,'WIN-SPEC-METHOD ','WINDOW-LAYERS   ',                    HVAC18   4
     $                'WINDOW-LAYERS   ',II)                                    HVAC18   5
         RETURN                                                                 DFTEX4 349
      ENDIF                                                                     BLIND2  42
c                                                                               WINSTRD 74
C         if WIN-SPEC-METHOD = GLASS-TYPE-INPUT remove any WINDOW-LAYERS        HVAC28  63
C         specified and return                                                  HVAC28  64
      IF (METHSPEC .NE. 1) THEN                                                 HVAC28  65
        DO II=1,9                                                               HVAC28  66
          IF(NOVAL(AA(IAVPTR+MWISTC1-1+II)).NE.0)  THEN                         HVAC28  67
            AA(IAVPTR+MWISTC1-1+II                    ) = UNDEF(2)              HVAC28  68
            AA(IAVPTR+MWISTC1-1+II-  IOPCDT(16,JOPWIN)) = UNDEF(1)              HVAC28  69
            IA(IAVPTR+MWISTC1-1+II-2*IOPCDT(16,JOPWIN)) =                       HVAC28  70
     $        IPACKB(1,5,1,IA(IAVPTR+MWISTC1+II-1-2*IOPCDT(16,JOPWIN)))         HVAC28  71
          ENDIF                                                                 HVAC28  72
        ENDDO                                                                   HVAC28  73
        RETURN                                                                  HVAC28  74
      ENDIF                                                                     HVAC28  75
C                                                                               WINSTRD 76
C           CREATING A GLASS-TYPE FOR THE WINDOW,                               WINSTRD 77
C           STORING STRUCTURE INFORMATION                                       WINSTRD 78
C                                                                               WINSTRD 79
      IAVPTR_SAV=IAVPTR                                                         WINSTRD 80
      JSYM_SAV=JSYM                                                             WINSTRD 81
      JREF_SAV=JREF                                                             WINSTRD 82
      NSAVEGTC=IOPCDT(17,JOPGTC)                                                WINSTRD 84
      LVALGTC =IOPCDT(16,JOPGTC)                                                WINSTRD 85
      LTOTGTC =NSAVEGTC + 3*LVALGTC + IOPCDT(18,JOPGTC)                         WINSTRD 86
      NSAVEGT =IOPCDT(17,JOPGT)                                                 WINSTRD 87
      LVALGT  =IOPCDT(16,JOPGT)                                                 WINSTRD 88
      LTOTGT  =NSAVEGT + 3*LVALGT + IOPCDT(18,JOPGT)                            WINSTRD 89
C              Check if a GLASS-TYPE was already made for this window           HVAC18   7
C              if it was, reuse it (and its G-T-C) using current data           HVAC18   8
      DO JSYM1=IStartGT,IEndGT                                                  DFTEX4 351
        IF((ISYMTB( 9,JSYM1) .EQ. 54) .and.                                     HVAC18  10
     $     (ISYMTB(10,JSYM1) .EQ. -JSYM_SAV).and.                               DFTEX4 352
     $     (ISYMTB(11,JSYM1) .EQ.  JSYM_SAV))  THEN                             DFTEX4 353
          JREF = IOPCDT(14,JOPGT) + ISYMTB(12,JSYM1) - 1                        HVAC18  13
          IAX_GT=IREFTB(2,JREF)+IOPCDT(17,JOPGT)+2*IOPCDT(16,JOPGT)             HVAC18  14
          IA(IAVPTR_SAV+IWIGT)=JSYM1                                            HVAC18  15
          JSYM_GTC = IA(IAX_GT+IGTGTC)                                          HVAC18  16
          CALL FILLN(0,AA(IREFTB(2,JREF)+1),LTOTGT)                             DFTEX4 354
          CALL FILLN(3,AA(IREFTB(2,JREF)+NSAVEGT+1),LVALGT)                     DFTEX4 355
          CALL FILLN(UNDEF(1),AA(IREFTB(2,JREF)+NSAVEGT+LVALGT+1),              DFTEX4 356
     $               LVALGT)                                                    DFTEX4 357
          CALL FILLN(UNDEF(3),AA(IREFTB(2,JREF)+NSAVEGT+2*LVALGT+1),            DFTEX4 358
     $               LVALGT)                                                    DFTEX4 359
          JREF = IOPCDT(14,JOPGTC) + ISYMTB(12,JSYM_GTC) - 1                    HVAC18  18
          CALL FILLN(0,AA(IREFTB(2,JREF)+1),LTOTGTC)                            DFTEX4 360
          CALL FILLN(3,AA(IREFTB(2,JREF)+NSAVEGTC+1),LVALGTC)                   DFTEX4 361
          CALL FILLN(UNDEF(1),AA(IREFTB(2,JREF)+NSAVEGTC+LVALGTC+1),            DFTEX4 362
     $               LVALGTC)                                                   DFTEX4 363
          CALL FILLN(UNDEF(3),AA(IREFTB(2,JREF)+NSAVEGTC+2*LVALGTC+1),          DFTEX4 364
     $               LVALGTC)                                                   DFTEX4 365
          IAX_GTC=IREFTB(2,JREF)+IOPCDT(17,JOPGTC)+2*IOPCDT(16,JOPGTC)          HVAC18  20
          IA(IAX_GT+IGTGTC ) = JSYM_GTC                                         HVAC18  21
          igtptr = IAX_GTC                                                      HVAC18  22
          IAVPTR=IAVPTR_SAV                                                     HVAC18  23
          JSYM=JSYM_SAV                                                         HVAC18  24
          JREF=JREF_SAV                                                         HVAC18  25
          GOTO 1111                                                             HVAC18  26
        ENDIF                                                                   HVAC18  27
      ENDDO                                                                     HVAC18  28
c           CRAETE GLASS-TYPE                                                   WINSTRD 90
      JOPCDX = JOPGT                                                            WINSTRD 91
      CALL CKAA(IAX,LVALGT)                                                     WINSTRD 92
      JSYM=0                                                                    WINSTRD 93
C           DEFINE SYMBOL                                                       WINSTRD 94
C              Check that we can do all nexessary definitions                   DFTEX4 366
      IF(IGTCNUMB.EQ.40) THEN                                                   DFTEX4 367
         CALL MSG2(62,'WINDOWS w/LAYERS',40,40,II)                              DFTEX4 368
         IA(IAVPTR+8) = 971                                                     DFTEX4 369
         RETURN                                                                 DFTEX4 370
      ENDIF                                                                     DFTEX4 371
      IF(NSYMTB .GT. MSYMTB-3) THEN                                             DFTEX4 372
         CALL MSG2(62,'Total # of Names',NSYMTB,MSYMTB,II)                      DFTEX4 373
         IA(IAVPTR+8) = 971                                                     DFTEX4 374
         RETURN                                                                 DFTEX4 375
      ENDIF                                                                     DFTEX4 376
      IF(IOPCDT(13,JOPGTC).GE.IOPCDT(12,JOPGTC)) THEN                           DFTEX4 377
         CALL MSG2(62,IOPCDT(1,JOPGTC),IOPCDT(13,JOPGTC),                       DFTEX4 378
     $                IOPCDT(12,JOPGTC),II)                                     DFTEX4 379
         IA(IAVPTR+8) = 971                                                     DFTEX4 380
         RETURN                                                                 DFTEX4 381
      ENDIF                                                                     DFTEX4 382
      IF(IOPCDT(13,JOPGT).GE.IOPCDT(12,JOPGT)) THEN                             DFTEX4 383
         CALL MSG2(62,IOPCDT(1,JOPGT),IOPCDT(13,JOPGT),                         DFTEX4 384
     $                IOPCDT(12,JOPGT),II)                                      DFTEX4 385
         IA(IAVPTR+8) = 971                                                     DFTEX4 386
         RETURN                                                                 DFTEX4 387
      ENDIF                                                                     DFTEX4 388
      IGTCNUMB = IGTCNUMB + 1                                                   DFTEX4 389
      JSYM = IStartGT + IGTcNUMB - 1                                            DFTEX4 390
C           INCREASE REFERENCE TABLE                                            WINSTRD 99
      IF (ISYMTB(12,JSYM).EQ.0) THEN                                            WINSTRD100
          CALL INCRRF(IA(1),IA(1),JOPCDX,JSYM,JREF)                             WINSTRD101
      ELSE                                                                      WINSTRD102
          JREF = IOPCDT(14,JOPCDX) + ISYMTB(12,JSYM) - 1                        WINSTRD103
      END IF                                                                    WINSTRD104
C           EMPTY RECORD                                                        WINSTRD105
      CALL FILLN(0,AA(IAX+1),LTOTGT)                                            DFTEX4 391
      CALL FILLN(3,AA(IAX+NSAVEGT+1),LVALGT)                                    DFTEX4 392
      CALL FILLN(UNDEF(1),AA(IAX+NSAVEGT+LVALGT+1),LVALGT)                      DFTEX4 393
      CALL FILLN(UNDEF(3),AA(IAX+NSAVEGT+2*LVALGT+1),LVALGT)                    DFTEX4 394
C           ENTRY IN COMMAND TABLE                                              WINSTRD107
      IOPCDT(22,JOPCDX) = JREF                                                  WINSTRD108
C           WRITE POINTER TO REF. TABLE                                         WINSTRD109
      IREFTB(1,JREF) = JSYM                                                     WINSTRD110
      IREFTB(2,JREF) = IAX                                                      WINSTRD111
      IREFTB(3,JREF) = 0                                                        WINSTRD112
      IREFTB(4,JREF) = 0                                                        WINSTRD113
      IF(IUNPKB(1,2,IREFTB(5,JREF)) .LE. 1)  THEN                               DFTEX3 686
        IREFTB(5,JREF) = IPACKB(1,2,0,IREFTB(5,JREF))                           DFTEX3 687
      ELSE                                                                      DFTEX3 688
        IREFTB(5,JREF) = IPACKB(1,2,2,IREFTB(5,JREF))                           DFTEX3 689
      ENDIF                                                                     DFTEX3 690
C           END OF ALL DATA                                                     WINSTRD114
      IAX=IAX+LTOTGTC                                                           WINSTRD115
C           WRITE SYMBOL-TABLE                                                  WINSTRD116
      ISYMTB( 9,JSYM)=IOPCDT(11,JOPCDX)                                         WINSTRD117
C              Save WINDOW info in G-T symbol table entry (for ident later)     HVAC18  29
      ISYMTB(10,JSYM)=-JSYM_SAV                                                 DFTEX4 395
      ISYMTB(11,JSYM)= JSYM_SAV                                                 DFTEX4 396
      ISYMTB(12,JSYM)=IOPCDT(13,JOPCDX)                                         WINSTRD120
C           STORE THE GT NUMBER AS <IGTYP> OF WINDOW                            WINSTRD121
      IA(IAVPTR_SAV+IWIGT)=JSYM                                                 WINSTRD122
c*********************************                                              WINSTRD123
C     WRITE(IOUTPT,'(12X,A20,2i10)')   '--->symbol       : ', jsym,jref         WINSTRD124
C***********************************                                            WINSTRD125
C           GET POINTER TO G-T DATA-ARRAY AND STORE DATA                        WINSTRD126
      IAX_GT=IREFTB(2,JREF)+IOPCDT(17,JOPGT)                                    WINSTRD127
      IAX_GT=IAX_GT + 2*IOPCDT(16,JOPGT)                                        WINSTRD128
C                                                                               WINSTRD131
C           CREATE GLASS-TYPE-CODE                                              WINSTRD132
C                                                                               WINSTRD133
C                                                                               WINSTRD134
C           MAKE SURE THERE IS ENOUGH SPACE FOR VALUE ARRAY                     WINSTRD135
      JOPCDX = JOPGTC                                                           WINSTRD136
      CALL CKAA(IAX,LVALGTC)                                                    WINSTRD137
      JSYM=0                                                                    WINSTRD138
C           DEFINE SYMBOL                                                       WINSTRD139
      JSYM = IStartGT + IGTcNUMB - 1 + (IEndGT-IStartGT+1)                      DFTEX4 397
C           INCREASE REFERENCE TABLE                                            WINSTRD144
      IF (ISYMTB(12,JSYM).EQ.0) THEN                                            WINSTRD145
          CALL INCRRF(IA(1),IA(1),JOPCDX,JSYM,JREF)                             WINSTRD146
      ELSE                                                                      WINSTRD147
          JREF = IOPCDT(14,JOPCDX) + ISYMTB(12,JSYM) - 1                        WINSTRD148
      END IF                                                                    WINSTRD149
C           EMPTY RECORD                                                        WINSTRD150
      CALL FILLN(0,AA(IAX+1),LTOTGTC)                                           DFTEX4 398
      CALL FILLN(3,AA(IAX+NSAVEGTC+1),LVALGTC)                                  DFTEX4 399
      CALL FILLN(UNDEF(1),AA(IAX+NSAVEGTC+LVALGTC+1),LVALGTC)                   DFTEX4 400
      CALL FILLN(UNDEF(3),AA(IAX+NSAVEGTC+2*LVALGTC+1),LVALGTC)                 DFTEX4 401
C           ENTRY IN COMMAND TABLE                                              WINSTRD152
      IOPCDT(22,JOPCDX) = JREF                                                  WINSTRD153
C           WRITE POINTER TO REF. TABLE                                         WINSTRD154
      IREFTB(1,JREF) = JSYM                                                     WINSTRD155
      IREFTB(2,JREF) = IAX                                                      WINSTRD156
      IREFTB(3,JREF) = 0                                                        WINSTRD157
      IREFTB(4,JREF) = 0                                                        WINSTRD158
      IF(IUNPKB(1,2,IREFTB(5,JREF)) .LE. 1)  THEN                               DFTEX3 691
        IREFTB(5,JREF) = IPACKB(1,2,0,IREFTB(5,JREF))                           DFTEX3 692
      ELSE                                                                      DFTEX3 693
        IREFTB(5,JREF) = IPACKB(1,2,2,IREFTB(5,JREF))                           DFTEX3 694
      ENDIF                                                                     DFTEX3 695
C           END OF ALL DATA                                                     WINSTRD159
      IAX=IAX+LTOTGTC                                                           WINSTRD160
C           WRITE SYMBOL-TABLE                                                  WINSTRD161
      ISYMTB( 9,JSYM)=IOPCDT(11,JOPCDX)                                         WINSTRD162
C              Save WINDOW info in G-T symbol table entry (for ident later)     HVAC18  32
      ISYMTB(10,JSYM)=-JSYM_SAV                                                 DFTEX4 402
      ISYMTB(11,JSYM)= JSYM_SAV                                                 DFTEX4 403
      ISYMTB(12,JSYM)=IOPCDT(13,JOPCDX)                                         WINSTRD165
      IA(IAX_GT+IGTGTC ) = JSYM_GTC                                             HVAC18  35
c*********************************                                              WINSTRD168
C     WRITE(IOUTPT,'(12X,A20,I10)')   '--->symbol          : ', jsym            WINSTRD169
C***********************************                                            WINSTRD170
      JSYM_GTC=JSYM                                                             WINSTRD171
C           restore the old pointer IAVPTR                                      WINSTRD172
      IAVPTR=IAVPTR_SAV                                                         WINSTRD173
      JSYM=JSYM_SAV                                                             WINSTRD174
      JREF=JREF_SAV                                                             WINSTRD175
C           get the pointer to the GLASS-TYPE-CODE                              WINSTRD176
      ivalue = isymtb(12,JSYM_GTC)                                              HVAC18  36
      igp    = ireftb(2,iopcdt(14,JOPCDX)+ivalue-1)+iopcdt(17,JOPCDX)           WINSTRD178
      igtptr = igp + 2*iopcdt(16,JOPCDX)                                        WINSTRD179
 1111 CONTINUE                                                                  HVAC18  37
C                                                                               WINSTRD180
C           CHECK STRUCTURE DATA :                                              WINSTRD181
C           PROPTER ORDER AND PROPERTIES                                        WINSTRD182
C                                                                               WINSTRD183
C           GET UNIT-SYSYEM-CONVERSION FACTOR                                   WINSTRD184
      DO ITF=1,100                                                              WINSTRD185
         IF  (METIN.EQ.0) THEN                                                  WINSTRD186
            TF(ITF)=VKONV(ITF)                                                  WINSTRD187
         ELSE                                                                   WINSTRD188
            TF(ITF)=1.                                                          WINSTRD189
         END IF                                                                 WINSTRD190
      END DO                                                                    WINSTRD191
c           GET KEYWORD-TABLE-POINTER                                           WINSTRD192
      KEYPTR=IOPCDT(9,JOPWIL)-1                                                 WINSTRD193
C         Max rel. difference between two gas properties to be accepted equal   WINSTRD194
      ZLIM=0.02                                                                 BLIND5  63
C         OUT/INSIDE GAS IS CONSIDERED TO BE AIR (metric)                       WINSTRD196
      air(IWLCOND)  = 0.02410                                                   WINSTRD197
      air(IWLDCOND) =     7.6                                                   WINSTRD198
      air(IWLVIS)   =    1.73                                                   WINSTRD199
      air(IWLDVIS)  =    10.0                                                   WINSTRD200
      air(IWLDENS)  =    1.29                                                   WINSTRD201
      air(IWLDDENS) = -0.0044                                                   WINSTRD202
      air(IWLPR)    =    0.72                                                   WINSTRD203
      air(IWLDPR)   =  0.0018                                                   WINSTRD204
C              Initialize estimation of Tvis/Tsol for structure                 -043a   30
      Tvi    = 1.0                                                              -043a   31
      Tso    = 1.0                                                              -043a   32
C         CONVERSION IF ENGLISH INPUT                                           WINSTRD205
      IF (METIN.EQ.0) THEN                                                      WINSTRD206
         DO IPR=IWLCOND,IWLDPR                                                  WINSTRD207
            air(ipr)=air(ipr)/VKONV(KONTXT(7,KEYPTR+ipr))                       WINSTRD208
         END DO                                                                 WINSTRD209
      END IF                                                                    WINSTRD210
c         USE AIR AS OUTSIDE GAS                                                WINSTRD211
      DO IPR=IWLCOND,IWLDPR                                                     WINSTRD212
         OLD(IPR)=AIR(IPR)                                                      WINSTRD213
      END DO                                                                    WINSTRD214
C         FIRST LAYER MUST BE GLASS,GLAZING OR SHADE                            WINSTRD215
      IEXPLAY=1                                                                 WINSTRD216
C         No soid layer                                                         WINSTRD217
      ISOLID=0                                                                  WINSTRD218
C        BLIND-GAP COMPARISON                                                   BLIND1   6
      ICOMP = 0                                                                 BLIND1   7
C         No air layer                                                          WINSTRD219
      IAIR=0                                                                    WINSTRD220
C         No of BLIND-LAYERS                                                    WINSTRD221
      IBLIND=0                                                                  WINSTRD222
C         NO GLASS-LAYER                                                        WINSTRD223
      IGLASS=0                                                                  WINSTRD224
C         BLIND LAYER ALLOWED !                                                 WINSTRD225
      IBLALL=1                                                                  WINSTRD226
c                                                                               WINSTRD227
      DO 9011 ISTR=1,9                                                          WINSTRD228
         IF(NOVAL(AA(IAVPTR+MWISTC1-1+ISTR)).EQ.0) THEN                         DFTEX4 404
           IF(ISTR .LT. 9) THEN                                                 DFTEX4 405
             IOK = 1                                                            DFTEX4 406
             II = ISTR+1                                                        DFTEX4 407
             DO JJ=II,9                                                         DFTEX4 408
               IF(NOVAL(AA(IAVPTR+MWISTC1-1+JJ)).NE.0) IOK=0                    DFTEX4 409
             ENDDO                                                              DFTEX4 410
             IF(IOK .EQ. 0) CALL MSG2(116,ISTR,'WINDOW-LAYER    ',              DFTEX4 411
     $                                    ISTR,ISTR)                            DFTEX4 412
           ENDIF                                                                DFTEX4 413
           GO TO 9011                                                           DFTEX4 414
         ENDIF                                                                  DFTEX4 415
C         GET WINDOW-LAYER-TYPE (IWLTYPE), POINTER TO WL FROM SYMBOLTABLE       WINSTRD230
         iwlx  = isymtb(12,ia(iavptr+MWISTC1-1+ISTR))                           WINSTRD231
         iwlaa = ireftb(2,iopcdt(14,JOPWIL)+iwlx-1) + iopcdt(17,JOPWIL)         WINSTRD232
         iwlaa = iwlaa + 2*iopcdt(16,JOPWIL)                                    WINSTRD233
c+1                                                                             WINSTRD234
         ITYPE =IA(IWLAA+IWLTYPE)                                               WINSTRD235
C         IEXPLAY > 0 IF GLASS, GLAZING OR SHADE IS EXPECTED                    WINSTRD236
         IF (IEXPLAY.LE.0) GOTO 5000                                            WINSTRD237
            IF ((ITYPE.EQ.1055).OR.(ITYPE.EQ.1056).OR.                          WINSTRD238
     1          (ITYPE.EQ.1058)) THEN                                           BLIND1   8
C         LAYER CORRECT, EXPECT NOW GAP                                         WINSTRD240
               AA(igtptr+IGTPTI+isolid) =                                       WINSTRD241
     1             AA(iwlaa+IWLTIR )*TF(KONTXT(7,KEYPTR+IWLTIR ))               WINSTRD242
               AA(igtptr+IGTPEF+isolid) =                                       WINSTRD243
     1             AA(iwlaa+IWLEF  )*TF(KONTXT(7,KEYPTR+IWLEF  ))               WINSTRD244
               AA(igtptr+IGTPEB+isolid) =                                       WINSTRD245
     1             AA(iwlaa+IWLEB  )*TF(KONTXT(7,KEYPTR+IWLEB  ))               WINSTRD246
               AA(igtptr+IGTPTH+isolid) =                                       WINSTRD247
     1             AA(iwlaa+IWLTH  )*TF(KONTXT(7,KEYPTR+IWLTH  ))               WINSTRD248
     2            *1000.                                                        WINSTRD249
               AA(igtptr+IGTPC +isolid) =                                       WINSTRD250
     1             AA(iwlaa+IWLCOND)*TF(KONTXT(7,KEYPTR+IWLCOND))               WINSTRD251
     2           /(AA(iwlaa+IWLTH  )*TF(KONTXT(7,KEYPTR+IWLTH  )))              WINSTRD252
               ISOLID = ISOLID + 1                                              WINSTRD253
               IEXPLAY=-1                                                       WINSTRD254
            END IF                                                              WINSTRD255
c         LAYER IS BLIND :                                                      WINSTRD256
            IF (ITYPE.EQ.1055) THEN                                             WINSTRD257
               IF (IBLIND.NE.0) THEN                                            BLIND5  64
                  CALL MSG(46)                                                  ERR-01 663
                  GO TO 9050                                                    BLIND5  67
               END IF                                                           BLIND5  68
               ICOMP=1                                                          WINSTRD262
               IBLALL=0                                                         WINSTRD263
               IBLIND=IBLIND+1                                                  WINSTRD264
               IBLEX(ISOLID)=1                                                  WINSTRD265
            END IF                                                              WINSTRD266
C         LAYER IS GLASS-LAYER :                                                WINSTRD267
            IF (ITYPE.EQ.1056) THEN                                             WINSTRD268
               IGLASS=IGLASS+1                                                  WINSTRD269
C              Custom WF calc needs the backside ABS of glass layers            -043a   33
C              but that is not known yet (until LOADS) so as an approx          -043a   34
C              use the glass layer beam-to-beam Tsol+Rsol to estimate           -043a   35
C              the hemispherical ABS                                            -043a   36
            AA(igtptr+IGTAB1+IGLASS*11-1) =                                     -043a   37
     $                         1.0-(AA(iwlaa+3)+AA(iwlaa+4))                    -043a   38
C              also save very rough approx of normal Tvis and Tsol for reports  -043a   39
            Tvi = Tvi*AA(iwlaa+12)                                              -043a   40
            Tso = Tso*AA(iwlaa+3)                                               -043a   41
            IBLEX(ISOLID) = 0                                                   -043a   42
               IBLALL=0                                                         WINSTRD270
            END IF                                                              WINSTRD271
C         GLAZING :                                                             WINSTRD272
            IF (ITYPE.EQ.1058) THEN                                             WINSTRD273
               CALL MSG2(72,'GLASS-TYPE      ','WINDOW STRUCTURE',II,II)        ERR-01 664
               GO TO 9050                                                       BLIND3   2
            END IF                                                              WINSTRD276
C         GAP :                                                                 WINSTRD277
            IF (ITYPE.EQ.1057) THEN                                             WINSTRD278
               CALL MSG2(111,ISTR,ISYMTB(1,ITYPE),                              ERR-01 665
     $                       'BLIND or GLASS-LAYER            ',II)             ERR-01 666
               GO TO 9050                                                       BLIND3   5
            ENDIF                                                               WINSTRD282
         GOTO 5010                                                              WINSTRD283
 5000    CONTINUE                                                               WINSTRD284
C         IEXPLAY < 0 IF GAP IS EXPECTED                                        WINSTRD285
C         LAYER INCORRECT, ERROR & MESSAGE                                      WINSTRD286
            IF (ITYPE.NE.1057) THEN                                             WINSTRD287
               CALL MSG2(111,ISTR,ISYMTB(1,ITYPE),                              ERR-01 667
     $                       'GAP                             ',II)             ERR-01 668
               GO TO 9050                                                       BLIND3   6
            ENDIF                                                               WINSTRD291
C         GAP :                                                                 WINSTRD292
            IF (ITYPE.EQ.1057) THEN                                             WINSTRD293
C         LAYER CORRECT, EXPECT NOW SOLID LAYER                                 WINSTRD294
               IEXPLAY=1                                                        WINSTRD295
               AA(igtptr+IGTGTH+iair) =                                         WINSTRD296
     1             AA(iwlaa+IWLTH   )*VKONV(KONTXT(7,KEYPTR+IWLTH   ))          WINSTRD297
     2            *1000.                                                        WINSTRD298
               AA(igtptr+IGTGC +iair) =                                         WINSTRD299
     1             AA(iwlaa+IWLCOND )*VKONV(KONTXT(7,KEYPTR+IWLCOND ))          WINSTRD300
               AA(igtptr+IGTGDC+iair) =                                         WINSTRD301
     1             AA(iwlaa+IWLDCOND)*VKONV(KONTXT(7,KEYPTR+IWLDCOND))          WINSTRD302
               AA(igtptr+IGTGV +iair) =                                         WINSTRD303
     1             AA(iwlaa+IWLVIS  )*VKONV(KONTXT(7,KEYPTR+IWLVIS  ))          WINSTRD304
               AA(igtptr+IGTGDV+iair) =                                         WINSTRD305
     1             AA(iwlaa+IWLDVIS )*VKONV(KONTXT(7,KEYPTR+IWLDVIS ))          WINSTRD306
               AA(igtptr+IGTGD +iair) =                                         WINSTRD307
     1             AA(iwlaa+IWLDENS )*VKONV(KONTXT(7,KEYPTR+IWLDENS ))          WINSTRD308
               AA(igtptr+IGTGDD+iair) =                                         WINSTRD309
     1             AA(iwlaa+IWLDDENS)*VKONV(KONTXT(7,KEYPTR+IWLDDENS))          WINSTRD310
               AA(igtptr+IGTGP +iair) =                                         WINSTRD311
     1             AA(iwlaa+IWLPR   )*VKONV(KONTXT(7,KEYPTR+IWLPR   ))          WINSTRD312
               AA(igtptr+IGTGDP+iair) =                                         WINSTRD313
     1             AA(iwlaa+IWLDPR  )*VKONV(KONTXT(7,KEYPTR+IWLDPR  ))          WINSTRD314
               IAIR=IAIR+1                                                      WINSTRD315
      IBLALL = 0                                                                BLIND1  12
      IF(IBLEX(ISOLID).EQ.0) IBLALL = 1                                         BLIND1  13
C         COMPARE GAPS ADJACENT TO BLIND ?                                      WINSTRD316
               IF (ICOMP.NE.1) GOTO 5005                                        WINSTRD317
                  DO IPR=IWLCOND,IWLDPR                                         WINSTRD318
                     IF (ABS(AA(IWLAA+IPR)-old(IPR)).GT.(0.5*ZLIM*              WINSTRD319
     1                   (ABS(old(IPR))+ABS(AA(IWLAA+IPR))))) THEN              WINSTRD320
                        CALL MSG2(112,Iblind,KONTXT(1,KEYPTR+IPR),              ERR-01 669
     $                                OLD(IPR),AA(IWLAA+IPR))                   ERR-01 670
                            GO TO 9050                                          BLIND3   7
                     END IF                                                     WINSTRD325
                  END DO                                                        WINSTRD326
 5005          CONTINUE                                                         WINSTRD327
C                 COMPARISON NOW OFF                                            WINSTRD328
               ICOMP=0                                                          WINSTRD329
C                 STORE OLD VALUES                                              WINSTRD330
               DO IPR=IWLCOND,IWLDPR                                            WINSTRD331
                  old(IPR)=AA(IWLAA+IPR)                                        WINSTRD332
               END DO                                                           WINSTRD333
            END IF                                                              WINSTRD334
 5010    CONTINUE                                                               WINSTRD335
 9011 CONTINUE                                                                  WINSTRD336
c             LAST LAYER MUST BE SOLID                                          WINSTRD337
 9012 IF (IEXPLAY.GT.0) THEN                                                    WINSTRD338
         CALL MSG2(113,ISYMTB(1,ITYPE),                                         ERR-01 671
     $                 'BLIND or GLASS-LAYER            ',II,II)                ERR-01 672
                           GO TO 9050                                           BLIND3   9
      ENDIF                                                                     WINSTRD342
C           LAST LAYER WAS BLIND : COMPARE TO INSIDE AIR                        WINSTRD343
      IF (ICOMP.EQ.1) THEN                                                      WINSTRD344
         DO IPR=IWLCOND,IWLDPR                                                  WINSTRD345
            IF (ABS(air(IPR)-old(IPR)).GT.(0.5*ZLIM*                            WINSTRD346
     1          (ABS(old(IPR))+ABS(air(IPR))))) THEN                            WINSTRD347
               CALL MSG2(112,iblind,KONTXT(1,KEYPTR+IPR),                       ERR-01 673
     $                       OLD(IPR),AIR(IPR))                                 ERR-01 674
                    GO TO 9050                                                  BLIND3  10
            END IF                                                              WINSTRD352
         END DO                                                                 WINSTRD353
      END IF                                                                    WINSTRD354
C           NO GLASS-LAYER :                                                    WINSTRD355
      IF (IGLASS.EQ.0) THEN                                                     WINSTRD356
         CALL MSG(47)                                                           ERR-01 675
         GO TO 9050                                                             BLIND3  11
      END IF                                                                    WINSTRD359
C          WRITE GLAZING INFORMATION TO GLASS-TYPE-CODE                         WINSTRD360
      CALL WLCOND (IAVPTR,WLUVAL,Tso,sc)                                        -043a   43
      ucentr = 1.0/(1.0/WLUVAL + 1.0/(25.47+3.33) + 1.0/8.3)                    -044b    3
      AA(igtptr+IGTUC  ) = ucentr                                               -043a   45
      AA(igtptr+IGTTVIS   ) = Tvi                                               -043a   46
      AA(igtptr+IGTTVIS+10) = Tvi                                               -043a   47
      AA(igtptr+IGTTSOL   ) = Tso                                               -043a   48
      AA(igtptr+IGTTSOL+10) = Tso                                               -043a   49
      AA(igtptr+IGTNL  ) = REAL(isolid)                                         WINSTRD363
      AA(igtptr+IGTSHC ) =  sc                                                  -043a   50
      AA(igtptr+IGTFC  ) = 25.47                                                -044b    4
      AA(igtptr+IGTFC+1) =  3.33                                                -044b    5
      AA(igtptr+IGTFC+2) =  8.3                                                 -044b    6
      GTDSC=                                                                    DFTEX4 416
     $'Layer-by-layer glazing. Properties calc hourly.'                         DFTEX4 417
      DO ISC=1, 16                                                              WINSTRD369
         IA(igtptr+IGTDES+ISC-1)=IGTDSC(ISC)                                    WINSTRD370
      END DO                                                                    WINSTRD371
C          FILL DATA IN GLASS-TYPE                                              WINSTRD372
      IA(IAX_GT+IGTGTC ) = JSYM_GTC                                             WINSTRD373
      AA(IAX_GT+IGTSHCC) = UNDEF(3)                                             WINSTRD374
      AA(IAX_GT+IGTGLC ) = ucentr                                               -043a   51
      AA(IAX_GT+IGTVIST) = Tvi                                                  -043a   52
      AA(IAX_GT+IGTOUTE) = AA(igtptr+IGTPEF)                                    WINSTRD377
      AA(IAX_GT+IGTFRC ) = 0.434                                                WINSTRD378
      IA(IAX_GT+IGTSPTY) = 905                                                  BLIND1  14
      AA(IAX_GT+IGTFRA ) = 0.7                                                  WINSTRD380
      AA(IAX_GT+IGTCONV) = 0.1                                                  WINSTRD381
      AA(IAX_GT+IGTPIC ) = UNDEF(3)                                             WINSTRD382
      AA(IAX_GT+IGTDRW ) = UNDEF(3)                                             WINSTRD383
C                                                                               WINSTRD384
C          check adjustment-types and schedules                                 WINSTRD385
C          2 adjust-types * 2 schedules                                         WINSTRD386
C                                                                               WINSTRD387
      DO IADJ=1,2                                                               WINSTRD388
         IADJptr=IAVPTR+MWIADJ(IADJ)                                            WINSTRD389
         ISCHptr=IAVPTR+MWISCH(IADJ)                                            WINSTRD390
         ITRIptr=IAVPTR+MWITRI(IADJ)                                            WINSTRD391
         NADJ=ISYMTB(12,IA(IADJptr))                                            WINSTRD395
c          do only care, if adjustment-type is not NONE                         WINSTRD396
         IF (IA(IADJptr).EQ.NONESYM(IADJ)) GOTO 8899                            WINSTRD397
c          only schedule, no adjustment-schedule                                WINSTRD404
            IF (IA(IADJptr).EQ.MSCHSYM(IADJ)) THEN                              WINSTRD405
               IF (NOVAL(IA(ISCHptr)).NE.0) GOTO 8810                           DFTEX3 697
                  CALL MSG2(114,ISYMTB(1,IA(IADJptr)),                          ERR-01 676
     $                          ADJUSTXT(IADJ),IOPCDT(1,1),II)                  ERR-01 677
               GOTO 8819                                                        WINSTRD410
 8810             ivalue= isymtb(12,ia(ISCHptr))                                WINSTRD411
                  iscptr= ireftb(2,iopcdt(14,jopsch)+ivalue-1)                  WINSTRD412
     1                    + iopcdt(17,jopsch)                                   WINSTRD413
                  iscaa = iscptr + 2*iopcdt(16,jopsch)+1                        WINSTRD414
                  ISCTY = IA(iscaa+ISCTYPE)                                     WINSTRD415
               IF (ISCTY.EQ.MSCTYSYM(IADJ,NADJ)) GOTO 8819                      WINSTRD416
                  CALL MSG(115,ISYMTB(1,IA(IADJptr)),ADJUSTXT(IADJ),            ERR-01 678
     $                         ISYMTB(1,MSCTYSYM(IADJ,NADJ)),                   ERR-01 679
     $                         ISYMTB(1,ISCTY))                                 ERR-01 680
 8819          CONTINUE                                                         WINSTRD422
C          only adjust-schedule, no schedule                                    WINSTRD423
            ELSE                                                                WINSTRD424
               IF (NOVAL(IA(ITRIptr)).NE.0) GOTO 8820                           DFTEX3 698
                  CALL MSG2(115,ISYMTB(1,IA(IADJptr)),ADJUSTXT(IADJ),           FIX16   14
     $                         ISYMTB(1,MSCTYSYM(IADJ,NADJ)),                   FIX16   15
     $                         'no SCHEDULE has been specified  ')              FIX16   16
               GOTO 8829                                                        WINSTRD430
 8820             ivalue= isymtb(12,ia(ITRIptr))                                WINSTRD431
                  iscaa = ireftb(2,iopcdt(14,jopsch)+ivalue-1)                  WINSTRD432
     1                    + iopcdt(17,jopsch)                                   WINSTRD433
                  iscaa = iscaa + 2*iopcdt(16,jopsch)+1                         WINSTRD434
                  ISCTY = IA(iscaa+ISCTYPE)                                     WINSTRD435
               IF (ISCTY.EQ.MSCTYSYM(IADJ,NADJ)) GOTO 8829                      WINSTRD436
                  CALL MSG2(115,ISYMTB(1,IA(IADJptr)),ADJUSTXT(IADJ),           ERR-01 683
     2                         ISYMTB(1,MSCTYSYM(IADJ,NADJ)),                   ERR-01 684
     3                         ISYMTB(1,ISCTY))                                 ERR-01 685
 8829          continue                                                         WINSTRD442
            END IF                                                              WINSTRD443
 8899    CONTINUE                                                               WINSTRD444
      END DO                                                                    WINSTRD445
C           Set TYPE for GLASS-TYPE, Copy data into 2nd value array             DFTEX4 418
C           (as library data so as to prevent user changes)                     DFTEX4 419
 9050 IA(IAX_GT+1) = 977                                                        DFTEX4 420
      DO I=1,LVALGT                                                             DFTEX4 421
        IF(NOVAL(AA(IAX_GT+I)).ne.0) AA(IAX_GT-LVALGT+I)=AA(IAX_GT+I)           DFTEX4 422
      ENDDO                                                                     DFTEX4 423
      DO I=1,LVALGTC                                                            DFTEX4 424
        IF(NOVAL(AA(igtptr+I)).ne.0) AA(igtptr-LVALGTC+I)=AA(igtptr+I)          DFTEX4 425
      ENDDO                                                                     DFTEX4 426
      RETURN                                                                    DFTEX4 427
      END                                                                       FIX10  167
      SUBROUTINE WLCOND (IAVPTR,WLUVAL,tso,sc)                                  -043a   53
C                                                                               WLCOND   3
C        calculates the conductance                                             WLCOND   4
C        of the structure of a WINDOW M (no filmresistances)                    WLCOND   5
C        (in METR. system)                                                      WLCOND   6
C                                                                               WLCOND   7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IUNITS/ VKONV(300),DUMLOG(4),JUNITS(4,300,2),NUNITS,KUNITS        UNITS1   1
      INTEGER DUMLOG                                                            SUBTY1   1
      DIMENSION IUNITS(4,300)                                                   UNITS1   2
      EQUIVALENCE (IUNITS(1,1),JUNITS(1,1,1))                                   /IUNITS/ 4
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION MWLAY(9),HC(4),HR(4),HL(5),TEMP(9),TF(100)                      -043a   54
      dimension abs(5),rgap(5),sn(5),GLSC1(15)                                  -043a   55
c                                                                               WLCOND  19
      DATA MWISTC1 / 64 /                                                       WLCOND  20
      DATA  IWLTYPE, IWLCOND, IWLDCOND, IWLVIS, IWLDVIS, IWLDENS,               WLCOND  21
     1     IWLDDENS,   IWLPR,   IWLDPR                                          WLCOND  22
     2    /       0,      31,       32,     33,      34,      35,               WLCOND  23
     3           36,      37,       38   /                                      WLCOND  24
      DATA  IWLTH, IWLTIR,  IWLEF,   IWLEB                                      WLCOND  25
     1   /     30,     20,     21,      22 /                                    WLCOND  26
C              1/8" CLEAR SINGLE PANE REFERENCE GLASS TRANSMISSION              -043a   56
C              AND ABSORPTION COEFFICIENTS FOR CALCULATION WHEN SHADING         -043a   57
C              COEFFICIENT IS SPECIFIED                                         -043a   58
C                                                                               -043a   59
      DATA  GLSC1/ -.01325 , 3.08716 , -3.68232 , 1.48683 , .077366 ,           -043a   60
     1             -.02718 , -.002691,  0.040548, 0.79901 , .05435  ,           -043a   61
     2             5*0. /                                                       -043a   62
C           PARAMETERS                                                          WLCOND  29
      SIGMA=5.67E-8                                                             WLCOND  30
      G=9.81                                                                    WLCOND  31
      TEMPI=293.                                                                WLCOND  32
      TEMPO=255.2                                                               WLCOND  33
C           SET POINTERS AND RESET                                              WLCOND  34
      N=0                                                                       WLCOND  35
      KEYPTR=IOPCDT(9,JOPWIL)                                                   WLCOND  36
c           GET SYSTEM-TRANSFORMATION FACTORS                                   WLCOND  37
      DO ITF=1,100                                                              WLCOND  38
       IF (METIN.EQ.1) THEN                                                     WLCOND  39
          TF(ITF)=1.                                                            WLCOND  40
       ELSE                                                                     WLCOND  41
          TF(ITF)=VKONV(ITF)                                                    WLCOND  42
       END IF                                                                   WLCOND  43
      END DO                                                                    WLCOND  44
C           GET ARRAY OF ALL PIONTERS TO W-L IN STRUCTURE (NON = 0)             WLCOND  45
      DO ISTR=1,9                                                               WLCOND  46
         MWLAY(ISTR)=IA(IAVPTR+MWISTC1+ISTR-1)                                  WLCOND  47
         IF (NOVAL(MWLAY(ISTR)).NE.0) THEN                                      DFTEX3 699
            iwlx  = isymtb(12,ia(iavptr+MWISTC1-1+ISTR))                        WLCOND  49
            iwlaa = ireftb(2,iopcdt(14,JOPWIL)+iwlx-1)+iopcdt(17,JOPWIL)        WLCOND  50
            MWLAY(ISTR) = iwlaa + 2*iopcdt(16,JOPWIL)+1                         WLCOND  51
            N=N+1                                                               WLCOND  52
         ENDIF                                                                  WLCOND  53
      END DO                                                                    WLCOND  54
C           NUMBER OF GAPS AND LAYERS (proper order is checked in ATTI)         WLCOND  55
      NGAP=INT(N/2)                                                             WLCOND  56
      NLAY=NGAP+1                                                               WLCOND  57
      IF (NGAP.GT.0) THEN                                                       WLCOND  58
C           AVERAGE TEMPERATUREDIFF. FROM LAYER TO LAYER                        WLCOND  59
c           (THE TEMPERATURE WITHIN ONE LAYER IS ASSUMED TO BE CONSTANT)        WLCOND  60
         DTEMP=(TEMPI-TEMPO)/NGAP                                               WLCOND  61
C           TEMPERATURES OF THE LAYERS ANG GAPS                                 WLCOND  62
         DO 150 ILAY=1,NLAY+NGAP                                                WLCOND  63
  150       TEMP(ILAY)=TEMPO+DTEMP/2*(ILAY-1)                                   WLCOND  64
      ELSE                                                                      WLCOND  65
C           IF NO GAPS, THE TEMPERATURE CHANGES WITHIN THE LAYER                WLCOND  66
         TEMP(1)=0.5*(TEMPI+TEMPO)                                              WLCOND  67
      ENDIF                                                                     WLCOND  68
C           GET LAYER-CONDUCTANCES and estimated Absorptance                    -043a   63
      DO IL=1,NLAY                                                              WLCOND  70
        HL(IL)=  AA(MWLAY(IL*2-1)+IWLCOND)*TF(KONTXT(7,KEYPTR+IWLCOND))         WLCOND  71
     1         /(AA(MWLAY(IL*2-1)+IWLTH  )*TF(KONTXT(7,KEYPTR+IWLTH  )))        WLCOND  72
        abs(IL)=  1.0-(AA(MWLAY(IL*2-1)+2)+AA(MWLAY(IL*2-1)+3))                 -043a   64
      END DO                                                                    WLCOND  73
C           GET GAP-CONDUCTANCES                                                WLCOND  74
      DO IG=1,NGAP                                                              WLCOND  75
         IGLAY=2*IG                                                             WLCOND  76
C           RADIATIVE                                                           WLCOND  77
         EEFF=1./(                                                              WLCOND  78
     1          1./(AA(MWLAY(IGLAY-1)+IWLEB)*TF(KONTXT(7,KEYPTR+IWLEB)))        WLCOND  79
     2         +1./(AA(MWLAY(IGLAY+1)+IWLEF)*TF(KONTXT(7,KEYPTR+IWLEF)))        WLCOND  80
     3         -1.)                                                             WLCOND  81
         HR(IG)=EEFF*SIGMA*0.5*((TEMP(IGLAY-1)+TEMP(IGLAY+1))**3)               WLCOND  82
C           CONVECTIVE                                                          WLCOND  83
         TDIFF=TEMP(IGLAY)-273.                                                 WLCOND  84
C           GAS-PROPERTIES                                                      WLCOND  85
         CO= AA(MWLAY(IGLAY)+IWLCOND )*TF(KONTXT(7,KEYPTR+IWLCOND ))            WLCOND  86
     1      +AA(MWLAY(IGLAY)+IWLDCOND)*TF(KONTXT(7,KEYPTR+IWLDCOND))            WLCOND  87
     2      *TDIFF*1.E-5                                                        WLCOND  88
         VI= AA(MWLAY(IGLAY)+IWLVIS )*TF(KONTXT(7,KEYPTR+IWLVIS ))*1.E-5        WLCOND  89
     1      +AA(MWLAY(IGLAY)+IWLDVIS)*TF(KONTXT(7,KEYPTR+IWLDVIS))*1.E-7        WLCOND  90
     2      *TDIFF                                                              WLCOND  91
         DE= AA(MWLAY(IGLAY)+IWLDENS )*TF(KONTXT(7,KEYPTR+IWLDENS ))            WLCOND  92
     1      +AA(MWLAY(IGLAY)+IWLDDENS)*TF(KONTXT(7,KEYPTR+IWLDDENS))            WLCOND  93
     2      *TDIFF                                                              WLCOND  94
         PR= AA(MWLAY(IGLAY)+IWLPR   )*TF(KONTXT(7,KEYPTR+IWLPR   ))            WLCOND  95
     1      +AA(MWLAY(IGLAY)+IWLDPR  )*TF(KONTXT(7,KEYPTR+IWLDPR  ))            BLIND1  16
     2      *TDIFF                                                              WLCOND  97
         TH= AA(MWLAY(IGLAY)+IWLTH   )*TF(KONTXT(7,KEYPTR+IWLTH   ))            WLCOND  98
C           GRASHOFFNUMBER                                                      WLCOND  99
         GR=G * DE**2 * TH**3 * DTEMP / (TEMP(IGLAY) * VI**2)                   WLCOND 100
C           RAYLEIGHNUMBER                                                      WLCOND 101
         RA=GR * PR                                                             WLCOND 102
C           NUSSELTNUMBER                                                       WLCOND 103
         NU=(1.+(0.0303*(RA**0.402))**11)**0.091                                WLCOND 104
         HC(IG)=NU * CO / TH                                                    WLCOND 105
      END DO                                                                    WLCOND 106
C           SUMMING LAYER-CONDUCTANCES                                          WLCOND 107
      H_REZ=0.                                                                  WLCOND 108
      DO 1100 IL=1,NLAY                                                         WLCOND 109
 1100    H_REZ=H_REZ+1./HL(IL)                                                  WLCOND 110
C           ADDING THE GAP-CONDUCTANCES                                         WLCOND 111
      DO 1200 IG=1,NGAP                                                         WLCOND 112
         rgap(IG) = 1./(HR(IG)+HC(IG))                                          -043a   65
 1200    H_REZ    = H_REZ + rgap(IG)                                            -043a   66
C           STACKCONDUCTANCE WITHOUT FILMRESISTANCES                            WLCOND 114
      IF (H_REZ.EQ.0.) THEN H_REZ=1.E-40                                        WLCOND 115
      WLUVAL=1./H_REZ                                                           WLCOND 116
C                                                                               -043a   67
C   estimate the shading coefficient                                            -043a   68
C   if WINDOW-LAYERS specified glass - use for reports only                     -043a   69
C                                                                               -043a   70
C evaluate inward flowing fraction of absorbed radiation                        -043a   71
C                                                                               -043a   72
      rtot  = H_REZ + (1.0/(25.47+3.21)) + 1.0/7.56                             -043a   73
      fracR = (1.0/(25.47+3.21))/rtot                                           -043a   74
      fracA = fracR*abs(1)                                                      -043a   75
      if (ngap.gt.0) then                                                       -047i    2
        do i=1,ngap                                                             -047i    3
          fracR = fracR + rgap(i)/rtot                                          -043a   78
          fracA = fracA + fracR*abs(i+1)                                        -043a   79
        enddo                                                                   -043a   80
      endif                                                                     -043a   81
C                                                                               -043a   82
C add inward fraction to directly transmitted fraction                          -043a   83
      sc     = tso + fracA                                                      -043a   84
C calc reference glass SHGC                                                     -043a   85
      Tsoref = GLSC1(1) + GLSC1(2) + GLSC1(3) + GLSC1(4)                        -043a   86
      absref = GLSC1(5) + GLSC1(6) + GLSC1(7)/(1.0 + GLSC1(8))                  -043a   87
      Rtoref = 1.0/300.0  + (1.0/(25.47+3.21)) + 1.0/7.56                       -043a   88
      scref  = ((1.0/(25.47+3.21))/Rtoref)*absref + Tsoref                      -043a   89
C SC for this glass if ratio of this glass to ref glass SHGC                    -043a   90
      sc     = sc/scref                                                         -043a   91
C**********************************************                                 WLCOND 117
 2000 format(12x,'---) uvalue (------- nlay : ',I2,'  ngap : ',I2,              IcRink   3
     1       '    wcon : ',F10.7)                                               WLCOND 119
C***********************************                                            WLCOND 120
      END                                                                       WLCOND 121
      subroutine qikft4(ndata,x,y,coef1,coef2)                                  QIKFIT   2
C                                                                               QIKFIT   3
C    finds the two undetermined coeffs in the constrained quartic form          QIKFIT   4
C    y = x*(2 - x + (1 - x)^2*(coef1 + coef2*(2+x)))                            QIKFIT   5
C    which automatically satisfies the constraints y(0)=0, y(1)=1, y'(1)=0      QIKFIT   6
C                                                                               QIKFIT   7
      dimension x(1), y(1)                                                      QIKFIT   8
                                                                                QIKFIT   9
      p1 = 0.                                                                   QIKFIT  10
      p2 = 0.                                                                   QIKFIT  11
      p3 = 0.                                                                   QIKFIT  12
      p4 = 0.                                                                   QIKFIT  13
      p5 = 0.                                                                   QIKFIT  14
      p6 = 0.                                                                   QIKFIT  15
      do 10 i = 1, ndata                                                        QIKFIT  16
        d0 = (2. - x(i))*x(i)                                                   QIKFIT  17
        d1 = x(i)*(1. - x(i))*(1. - x(i))                                       QIKFIT  18
          d2 = 2. + x(i)                                                        QIKFIT  19
        p1 = p1 + (y(i) - d0)*d1                                                QIKFIT  20
        p2 = p2 + d1*d1                                                         QIKFIT  21
        p3 = p3 + d1*d1*d2                                                      QIKFIT  22
        p4 = p4 + (y(i) - d0)*d1*d2                                             QIKFIT  23
        p5 = p5 + d1*d1*d2                                                      QIKFIT  24
        p6 = p6 + d1*d1*d2*d2                                                   QIKFIT  25
10    continue                                                                  QIKFIT  26
      coef1 = (p1*p6 - p3*p4)/(p2*p6 - p3*p5)                                   QIKFIT  27
      coef2 = (p1*p5 - p2*p4)/(p3*p5 - p2*p6)                                   QIKFIT  28
      return                                                                    QIKFIT  29
      end                                                                       QIKFIT  30
      SUBROUTINE INITL                                                          INITL    2
C                                                                               INITL    3
C               INITIALIZATION FOR LDL                                          INITL    4
C                                                                               INITL    5
C               INITL USES 6 WORDS OF COMMWK                                    INITL    6
C                                                                               INITL    7
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               INITL    9
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON  /CNVALX/ KWLAY,KWUV,KWWALP,KWRO,ILAYP,IUVP,IWALPP,IROP            SUBTY8   1
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON/COUNT/ NOTH,NITH,NSURF,NINSRF                                      OPLST1 259
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON /DRVALX/ IDRGEO,IDRSAP,IDRCNP,IDRSDP,IDRFRH,IDRFRW,IDRMUP          /DRVALX/ 2
      COMMON  /EWVALX/ IEWLCP, IEWGEO, IEWCNP, IEWSDP, IEWSAP, IEWTLP,          /EWVALX/ 2
     1                  IEWSFP,IEWCRP,IEWVRP                                    /EWVALX/ 3
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /GEOD/   IGEOP, IAXGES                                            /GEOD/   2
      COMMON /HOLALT/ NHOLA(2),IHOLTY(2),IHOLDY(60,2),IHOLMN(60,2)              HOLID1   4
      COMMON  /HREP  / NVTLIM,IVTLIM(2,30),NRB,LRB,NHRP,LHRP,IRB,IHRP,          HVAC7    1
     $                 JRBOP,JHROP                                              HVAC7    2
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON  /IWVALX/ IIWCNP, IIWGEO, IIWSAP, IIWARP, IIWTLP, IIWSFP,          /IWVALX/ 2
     1                  IIWLCP,IIWCRP,KWIWAR,IIWVRP                             /IWVALX/ 3
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LBLOCK/ LSFBLK(20),N(20)                                         BLIND    2
      EQUIVALENCE (LWPARB,LSFBLK(4)),(LCB1,LSFBLK(5)),                          /LBLOCK/ 3
     1            (LCB2,LSFBLK(6)),(LCONSB,LSFBLK(6)),                          /LBLOCK/ 4
     2            (LGEOB,LSFBLK(9))                                             BLIND    3
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      COMMON  /LYVALX/ IIFRP, IMATST, ITHST, INRFP,                             /LYVALX/ 2
     1                 IUP, ICOMRP, NLAY                                        /LYVALX/ 3
      COMMON  /MATP/   NMAT, IMATB, LMATB                                       /MATP/   2
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      COMMON  /SPVALX/ IHP, IAP, IVP, ISHPP, IWP, IDPTHP, ISCP, IPRCAP,         /SPVALX/ 2
     1                 IWFP, ILTP, IINFMP, INZHP, IPLP, IPSP, ILKWP,            /SPVALX/ 3
     2                 ITKWP, IEKWP, IPAP, ILWSFP, ITWSFP, IPOLSP,              GEO4     1
     3                 IEQWFP, KWH, KWA, KWV, KWSHP, KWW, KWDPTH,               /SPVALX/ 5
     4                 KWSC, KWLT, KWINFM, KWNZH, KWPL, KWPS,                   /SPVALX/ 6
     5                 KWLKW, KWTKW, KWEKW, KWPA, KWLWSF, KWTWSF,               /SPVALX/ 7
     6                 KWEWSF, IFURTP, IFURFP, IFURWP, IFLRWP, KWWF,            /SPVALX/ 8
     7                 KWFLRW,ILTSP,NINFKY,INFKYP(20),DEFINF(10,4),             LTSYS1   2
     8                 ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM,             DFTEXP 197
     9                 ISPLOCP,ISPDIS,NSPDIS                                    DFTEXP 198
      COMMON  /UGVALX/ IUGCNP, IUGGEO, IUGSAP, IUGARP, IUGTLP, IUGSFP,          /UGVALX/ 2
     1                  IUGLCP,IUGCRP,KWUGAR,IUGVRP                             /UGVALX/ 3
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON /WINSTR/  IGTCNUMB                                                 /WINSTR/ 2
C                                                                               INITL   36
      EQUIVALENCE (IDF,COMMWK(1)),(IEWDF,COMMWK(2)),                            INITL   37
     1            (IIWDF,COMMWK(3)),(IUGDF,COMMWK(4)),                          INITL   38
     2            (NN,COMMWK(5)),(ISPDF,COMMWK(6))                              INITL   39
C                                                                               INITL   43
C                                                                               INITL   45
      IERRFL = 0                                                                LIB1    52
C                INITIALIZE USER REPORT VARIABLES                               INITL   46
C                7 POSSIBLE TYPES                                               INITL   47
      NVTLIM = 7                                                                INITL   48
C                GLOBAL ITEMS                                                   INITL   49
      IVTLIM(1,1) = 114                                                         BIGNA2  27
      IVTLIM(2,1) = 59                                                          BIGNA2  28
C                BUILDING ITEMS                                                 INITL   52
      IVTLIM(1,2) = 153                                                         BIGNA2  29
      IVTLIM(2,2) = 45                                                          INITL   54
C                WALL ITEMS                                                     INITL   55
      IVTLIM(1,3) = 20                                                          INITL   56
      IVTLIM(2,3) = 19                                                          INITL   57
      IF (LDSTYP .EQ. 2)  IVTLIM(2,3) = 31                                      INITL   58
C                WINDOW ITEMS                                                   INITL   59
      IVTLIM(1,4) = 50                                                          INITL   60
      IVTLIM(2,4) = 31                                                          -44d5   19
      IF (LDSTYP .EQ. 2)  IVTLIM(2,4) = 23                                      INITL   62
C                SPACE ITEMS                                                    INITL   63
      IVTLIM(1,5) = 70                                                          INITL   64
      IVTLIM(2,5) = 58                                                          INITL   65
      IF (LDSTYP .EQ. 2)  IVTLIM(2,5) = 43                                      INITL   66
C                DOOR ITEMS                                                     INITL   67
      IVTLIM(1,6) = 55                                                          INITL   68
      IVTLIM(2,6) = 6                                                           INITL   69
      IF (LDSTYP .EQ. 2)  IVTLIM(2,6) = 12                                      INITL   70
C                ** block 7 unused **                                           HVAC9    3
C===  IVTLIM(1,7) = 150    LOADS end use removed                                BIGNA2  31
C===  IVTLIM(2,7) = 99                                                          BIGNA2  32
      IVTLIM(1,7) = 0                                                           BIGNA2  33
      IVTLIM(2,7) = 0                                                           BIGNA2  34
C                ZERO SF POINTERS                                               INITL   80
      CALL ZeroBlock(LENGTH, xPTRSL)                                            PV2    136
C              SET 4TH POSITION OF VALUE ARRAY SIZE TO BE NUMBER OF             OUT1    31
C              KEYWORD VALUES                                                   OUT1    32
      DO I=1,NOPCDT                                                             OUT1    33
          IF (IOPCDT(18,I) .EQ. 0)  IOPCDT(18,I) = IOPCDT(16,I)                 HVAC7   26
      END DO                                                                    OUT1    35
C                ZERO MISCELLANEOUS STUFF                                       INITL   84
      IGEOP  = 0                                                                INITL   85
      IAXGES = 0                                                                INITL   86
      LCB1 = 0                                                                  INITL   87
      LCB2 = 0                                                                  INITL   88
      LGEOB  = 0                                                                INITL   89
      LWPARB = 0                                                                INITL   90
      LREC   = 1500                                                             INITL   91
      LMATB  = 0                                                                INITL   92
      LIBUFB = 0                                                                INITL   93
      NOTH   = 0                                                                INITL   94
      NITH   = 0                                                                INITL   95
      NSURF  = 0                                                                INITL   96
      NINSRF = 0                                                                INITL   97
      IGTCNUMB=0                                                                DFTEX4 429
      IKW = IOPCDT(9,JOPCNS)                                                    SUBTY8  27
      ILAYP = KONTXT(12,IKW+KWLAY-1)                                            SUBTY8  28
      IUVP = KONTXT(12,IKW+KWUV-1)                                              SUBTY8  29
      IWALPP = KONTXT(12,IKW+KWWALP-1)                                          SUBTY8  30
      IROP = KONTXT(12,IKW+KWRO-1)                                              SUBTY8  31
C              INITIALIZE the DOE-2 default and USER libraries                  COMB05   8
C              The default library is always used to find DOE-2 defaults        COMB05   9
C              PowerDOE call -> user library index comes from interface         COMB05  10
      REWIND IUSLIB                                                             INITL  106
C              ZERO THE LIBRARY INDEX                                           INITL  117
      DO 100 I=1,30000                                                          -48p     5
      DO 100 J=1,10                                                             LIB1    53
C==pd IF( IPDFLG .EQ. 0 )  LUSIDX(J,I) = 0                                      -042L5b338
                           LUSIDX(J,I) = 0                                      -042L5b339
  100 LIBIDX(J,I) = 0                                                           INITL  120
      ILINEX = 0                                                                LIB1    54
      JSYMLX = 0                                                                CRV2    30
      NLIB = 0                                                                  CRV2    31
C==pd IF( IPDFLG .EQ. 0 ) THEN                                                  -042L5b340
        NUSLIB = 0                                                              -042L5b341
C==pd ENDIF                                                                     -042L5b342
      IULINX = 0                                                                LIB3    37
      IUX = 0                                                                   LIB3    38
      ILX = 0                                                                   LIB3    39
      IFFLAG = 0                                                                LIB3    40
C              SYMBOL TABLE <--> LIBRARY linkage table                          DFTEX3 700
C              LIBLNK(10,n)  1-8 = library name                                 DFTEX3 701
C                              9 = from 0=DOE-2 lib, 1=usr lib                  DFTEX3 702
C                             10 = symbol table index of object (m of below)    DFTEX3 703
C              ISTMTB(15,m)      = index to LIBLNK of lib fetched, or 0         DFTEX3 704
      CALL FILLN(0,LIBLNK,300000)                                               -48p     6
      NLIBLK = 0                                                                DFTEX3 706
      MLIBLK = 30000                                                            -48p     7
      CALL LIBINI(LIBFIL,LIBIDX(1,1),30000,NLIB)                                -48p     8
      CALL LIBINI(IUSLIB,LUSIDX(1,1),30000,NUSLIB)                              -48p     9
      IF (NLIB.EQ.0) THEN                                                       LIB3    43
          IERRFL = 1                                                            LIB3    44
          CALL MSG(48)                                                          ERR-01 686
          GO TO 9000                                                            LIB3    47
      END IF                                                                    LIB3    48
  600 DO I=1,NSYMTB                                                             CRV2    32
          IF (ISYMTB(12,I).EQ.-777) THEN                                        CRV2    33
C==pd         IF( IPDFLG .EQ. 0 ) THEN                                          -042L5b345
                CALL TBLSCH(ISYMTB(1,I),LUSIDX,10,NUSLIB,2,IUX)                 -042L5b346
C==pd         ELSE                                                              -042L5b347
C==pd           IUX = 0                                                         -042L5b348
C==pd         ENDIF                                                             -042L5b349
              IF(IUX.EQ.0) CALL TBLSCH(ISYMTB(1,I),LIBIDX,10,NLIB,2,ILX)        LIB3    50
              IF (IUX.GT.0) THEN                                                LIB3    51
                  IFFLAG = 1                                                    LIB3    52
                  ISYMTB(13,I) = IPACK2(IFFLAG,IUX,1048576)                     LIB3    53
                  ISYMTB(12,I) = 0                                              LIB3    54
                  IF(NLIBLK .lt. MLIBLK) THEN                                   DFTEX3 708
                    NLIBLK = NLIBLK + 1                                         DFTEX3 709
                    ISYMTB(15,I) = NLIBLK                                       DFTEX3 710
                    LIBLNK(10,NLIBLK) = I                                       DFTEX3 711
                    LIBLNK( 9,NLIBLK) = 1                                       DFTEX3 712
                    CALL MOVEN(ISYMTB(1,I),LIBLNK(1,NLIBLK),8)                  DFTEX3 713
                  ELSE                                                          DFTEX3 714
                    IERRFL = 2                                                  DFTEX3 715
                    CALL MSG(58)                                                DFTEX3 716
                    GOTO 9000                                                   DFTEX3 717
                  ENDIF                                                         DFTEX3 718
              ELSE IF (ILX.GT.0) THEN                                           LIB3    55
                  IFFLAG = 0                                                    LIB3    56
                  ISYMTB(13,I) = IPACK2(IFFLAG,ILX,1048576)                     LIB3    57
                  ISYMTB(12,I) = 0                                              LIB3    58
                  IF(NLIBLK .lt. MLIBLK) THEN                                   DFTEX3 719
                    NLIBLK = NLIBLK + 1                                         DFTEX3 720
                    ISYMTB(15,I) = NLIBLK                                       DFTEX3 721
                    LIBLNK(10,NLIBLK) = I                                       DFTEX3 722
                    LIBLNK( 9,NLIBLK) = 0                                       DFTEX3 723
                    CALL MOVEN(ISYMTB(1,I),LIBLNK(1,NLIBLK),8)                  DFTEX3 724
                  ELSE                                                          DFTEX3 725
                    IERRFL = 2                                                  DFTEX3 726
                    CALL MSG(58)                                                DFTEX3 727
                    GOTO 9000                                                   DFTEX3 728
                  ENDIF                                                         DFTEX3 729
              ELSE                                                              CRV2    38
                  IERRFL = 1                                                    CRV2    39
                  CALL MSG2(29,ISYMTB(1,I),II,II,II)                            ERR-01 687
              END IF                                                            CRV2    42
          END IF                                                                CRV2    43
      END DO                                                                    CRV2    44
 9000 CONTINUE                                                                  INITL  165
      IF (IERRFL.GT.0) CALL ABT                                                 LIB1   110
      RETURN                                                                    INITL  166
      END                                                                       INITL  179
      FUNCTION IPACK2(I1,I2,MULT)                                               IPACK2   2
      IPACK2 = I1*MULT + I2                                                     IPACK2   3
      RETURN                                                                    IPACK2   4
      END                                                                       IPACK2   5
      SUBROUTINE UNPAK2(II,MULT,I1,I2)                                          UNPAK2   2
      I1 = II/MULT                                                              UNPAK2   3
      I2 = II - I1*MULT                                                         UNPAK2   4
      RETURN                                                                    UNPAK2   5
      END                                                                       UNPAK2   6
      FUNCTION IPACK3(I1,I2,I3,MULT)                                            IPACK3   2
      IPACK3 = 0                                                                IPACK3   3
      IF (MULT.LE.0 .OR. I1.LT.0 .OR. I2.LT.0 .OR. I3.LT.0) RETURN              IPACK3   4
      IPACK3 = I1*MULT*MULT + I2*MULT + I3                                      IPACK3   5
      RETURN                                                                    IPACK3   6
      END                                                                       IPACK3   7
      SUBROUTINE UNPAK3(II,MULT,I1,I2,I3)                                       UNPAK3   2
      I1 = 0                                                                    UNPAK3   3
      I2 = 0                                                                    UNPAK3   4
      I3 = 0                                                                    UNPAK3   5
      IF (MULT.LE.0) RETURN                                                     UNPAK3   6
      IF (II.LE.0) RETURN                                                       UNPAK3   7
      MULT2 = MULT*MULT                                                         UNPAK3   8
      I1 = II/MULT2                                                             UNPAK3   9
      I21 = II - I1*MULT2                                                       UNPAK3  10
      I2 = I21/MULT                                                             UNPAK3  11
      I3 = I21 - I2*MULT                                                        UNPAK3  12
      RETURN                                                                    UNPAK3  13
      END                                                                       UNPAK3  14
      FUNCTION IPACKB(IBIT1,IBIT2,INPNUM,NUM)                                   IPACKB   2
C                                                                               IPACKB   3
C              PACK INPNUM INTO BITS IBIT1 THROUGH IBIT2                        IPACKB   4
C              OF NUM                                                           IPACKB   5
C                                                                               IPACKB   6
      IPACKB = 0                                                                IPACKB   7
      ILOW = 0                                                                  IPACKB   8
      IHIGH = 0                                                                 IPACKB   9
      IF (NUM.EQ.0) THEN                                                        IPACKB  10
          IPACKB = INPNUM*2**(IBIT1-1)                                          IPACKB  11
      ELSE                                                                      IPACKB  12
          IF (IBIT1.GT.1) ILOW = IUNPKB(1,IBIT1-1,NUM)                          IPACKB  13
          IF (IBIT2.LT.32) IHIGH = IUNPKB(IBIT2+1,32,NUM)                       IPACKB  14
          IPACKB = ILOW + INPNUM*2**(IBIT1-1) + IHIGH*2**IBIT2                  IPACKB  15
      END IF                                                                    IPACKB  16
      RETURN                                                                    IPACKB  17
      END                                                                       IPACKB  18
      FUNCTION IUNPKB(IBIT1,IBIT2,NUM)                                          IUNPKB   2
C                                                                               IUNPKB   3
C              UNPACK BITS IBIT1 THROUGH IBIT2 FROM NUM AND                     IUNPKB   4
C              RETURN AS A DECIMAL INTEGER                                      IUNPKB   5
C                                                                               IUNPKB   6
      IUNPKB = 0                                                                IUNPKB   7
      II = 0                                                                    IUNPKB   8
      IF (IBIT2.LT.32) THEN                                                     IUNPKB   9
          II = NUM/2**IBIT2                                                     IUNPKB  10
          IJ = NUM - II*2**IBIT2                                                IUNPKB  11
      ELSE                                                                      IUNPKB  12
          IJ = NUM                                                              IUNPKB  13
      END IF                                                                    IUNPKB  14
      IUNPKB = IJ/2**(IBIT1-1)                                                  IUNPKB  15
      RETURN                                                                    IUNPKB  16
      END                                                                       IUNPKB  17
      FUNCTION KOMPR3(M3,N3,MULT)                                               KOMPR3   2
      DIMENSION M(3),N(3)                                                       KOMPR3   3
      KOMPR3 = 0                                                                KOMPR3   4
      CALL UNPAK3(M3,MULT,M(1),M(2),M(3))                                       KOMPR3   5
      CALL UNPAK3(N3,MULT,N(1),N(2),N(3))                                       KOMPR3   6
      DO I=1,3                                                                  KOMPR3   7
          DO J=1,3                                                              KOMPR3   8
              IF (N(J).GT.0 .AND. M(I).GT.0 .AND. N(J).EQ.M(I)) THEN            KOMPR3   9
                  KOMPR3=1                                                      KOMPR3  10
                  GO TO 1000                                                    KOMPR3  11
              END IF                                                            KOMPR3  12
          END DO                                                                KOMPR3  13
      END DO                                                                    KOMPR3  14
 1000 CONTINUE                                                                  KOMPR3  15
      RETURN                                                                    KOMPR3  16
      END                                                                       KOMPR3  17
      SUBROUTINE IWO                                                            IWO      2
C                                                                               IWO      3
C               WRITE INTERIOR WALL BLOCK TO STANDARD FILE                      IWO      4
C                                                                               IWO      5
C              IWO USES 14 WORDS OF COMMWK                                      IWO      6
C                                                                               IWO      7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON/COUNT/ NOTH,NITH,NSURF,NINSRF                                      OPLST1 259
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /HREP  / NVTLIM,IVTLIM(2,30),NRB,LRB,NHRP,LHRP,IRB,IHRP,          HVAC7    1
     $                 JRBOP,JHROP                                              HVAC7    2
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /IWVALX/ IIWCNP, IIWGEO, IIWSAP, IIWARP, IIWTLP, IIWSFP,          /IWVALX/ 2
     1                  IIWLCP,IIWCRP,KWIWAR,IIWVRP                             /IWVALX/ 3
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LBLOCK/ LSFBLK(20),N(20)                                         BLIND    2
      EQUIVALENCE (LWPARB,LSFBLK(4)),(LCB1,LSFBLK(5)),                          /LBLOCK/ 3
     1            (LCB2,LSFBLK(6)),(LCONSB,LSFBLK(6)),                          /LBLOCK/ 4
     2            (LGEOB,LSFBLK(9))                                             BLIND    3
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
C                                                                               IWO     26
      COMMON /ISPLST/ ISPLST(9999),ISPLOC(9999)                                 -048a    8
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      EQUIVALENCE (IKW,COMMWK(1)),(NKW,COMMWK(2)),                              IWO     28
     1            (IDP,COMMWK(3)),(IAVPTR,COMMWK(4)),                           IWO     29
     2            (NAMPTR,COMMWK(5)),(LVAL,COMMWK(6)),                          IWO     30
     3            (IST,COMMWK(7)),(IPT,COMMWK(8)),                              IWO     31
     4            (ICONSP,COMMWK(9)),(IAPTR,COMMWK(11)),                        IWO     32
     5            (LEN,COMMWK(12)),(ICNST,COMMWK(13)),                          IWO     33
     6            (NRF,COMMWK(14))                                              IWO     34
C                                                                               IWO     35
      IKYOP = 16                                                                BIGNAM  93
      LEN = 1                                                                   ATTRF1 283
      NIW = IOPCDT(13,JOPIW)                                                    ATTRF1 284
      IF (NIW.EQ.0) GO TO 1000                                                  ATTRF1 285
      NKW = IOPCDT(10,JOPIW)                                                    ATTRF1 286
      IKW = IOPCDT(9,JOPIW)                                                     ATTRF1 287
      LVAL = IOPCDT(16,JOPIW)                                                   ATTRF1 288
C              SAVE SPACE FOR OUTPUT BUFFER                                     ATTRF1 289
      LEN = NIW*LIW                                                             ATTRF1 290
      CALL CKAA(IA,LEN)                                                         ATTRF1 291
C              IST IS WHERE THE OUTPUT BUFFER STARTS                            ATTRF1 292
      IST = IAX + 1                                                             ATTRF1 293
C              IPT IS WHERE THE NEXT IW GOES IN THE OUTPUT BUFFER               ATTRF1 294
      IPT = IAX                                                                 ATTRF1 295
C              FILL OUTPUT BUFFER WITH ZEROES                                   ATTRF1 296
      CALL FILLN(0.,AA(IST),LEN)                                                ATTRF1 297
      DO 100 IIW=1,NIW                                                          ATTRF1 298
C              PICK UP THE NAME AND DATA POINTERS                               ATTRF1 299
      IRX = IOPCDT(14,JOPIW) + IIW - 1                                          ATTRF1 300
      NAMPTR = IREFTB(1,IRX)                                                    ATTRF1 301
      IDP = IREFTB(2,IRX)                                                       ATTRF1 302
      JOPcur  = JOPIW                                                           FIX14  212
      JREFcur = IRX                                                             FIX14  213
C              DATA PTRS FOR PARENT SPACE AND FLOOR                             GEO1   312
      IRXSP = IREFTB(4,IRX)                                                     GEO1   313
      IAVPSP = IREFTB(2,IRXSP) + IOPCDT(17,JOPSP) + 2*IOPCDT(16,JOPSP)          GEO1   314
      IRXFL = IREFTB(4,IRXSP)                                                   GEO1   315
      IAVPFL = IREFTB(2,IRXFL) + IOPCDT(17,JOPFL) + 2*IOPCDT(16,JOPFL)          GEO1   316
C              MOVE IN THE NAME                                                 ATTRF1 303
      IF (NAMPTR .GT. 0)  CALL MOVEN(ISYMTB(1,NAMPTR),IA(IPT+1),8)              BIGNAM  94
      IF (NAMPTR .EQ. 0) CALL MOVEN(IBLANK(1),IA(IPT+1),8)                      BIGNAM  95
C              STORE GEOMETRY POINTER                                           ATTRF1 306
      IA(IPT+10) = IA(IDP+7)                                                    BIGNAM  96
C              STORE FLOOR FLAG                                                 ATTRF1 308
      IA(IPT+14) = IA(IDP+3)                                                    BIGNAM  97
C              STORE IN SPACE NUMBER                                            ATTRF1 310
      IRXISP = IREFTB(4,IRX)                                                    ATTRF1 311
      ISTPTR = IREFTB(1,IRXISP)                                                 ATTRF1 312
C              IN-SPACE NUMBER (OCCURRENCE NO. ON SF)                           LTSYS3   3
      IA(IPT+15) = ISPLOC(ISYMTB(12,ISTPTR))                                    BIGNAM  98
C              NEXT-TO SPACE NUMBER (OCCURRENCE NO. ON SF)                      LTSYS3   5
      IAVPIW = IDP + IOPCDT(17,JOPIW) + 2*IOPCDT(16,JOPIW)                      LTSYS3   6
c              if NEXT-TO specified pick up SPACE STNDF number                  HVAC11  24
      IF( NOVAL(IA(IAVPIW+1)) .NE. 0)  THEN                                     HVAC11  25
        IA(IPT+16) = ISPLOC( ISYMTB(12,IA(IAVPIW+1)) )                          BIGNA2  35
      ELSE                                                                      HVAC11  27
        IA(IPT+16) = 0                                                          BIGNA2  36
      ENDIF                                                                     HVAC11  29
C              CHANGE CONSTRUCTION NO. TO SF POINTER (NO IFR)                   ATTRF1 314
      IAVPTR = MSIMPT(IRX,JOPIW,0)                                              OUT1    37
      IRXCNS = IOPCDT(14,JOPCNS) + IA(IAVPTR+IIWCNP) - 1                        ATTRF1 316
      ICONSP = IREFTB(2,IRXCNS)                                                 ATTRF1 317
      IA(IAVPTR+IIWCNP) = IA(ICONSP+5)                                          ATTRF1 318
C              INCREMENT COUNTERS                                               ATTRF1 319
      NINSRF = NINSRF + 2                                                       ATTRF1 320
      NSURF  = NSURF + 2                                                        ATTRF1 321
C                MOVE THE DATA INTO THE OUTPUT BUFFER                           ATTRF1 322
      CALL MOVEN(AA(IAVPTR+2),AA(IPT+IKYOP+1),LVAL-(1+2+2))                     -047hT   5
C              SAVE CONSTRUCTION SF POINTER (WITH IFR)                          ATTRF1 324
      IA(IPT+67) = IA(ICONSP+4)                                                 BIGNAM 100
C              CK IF POLYGON                                                    ATTRF1 326
      IPOLYF = IIWGEO + 9                                                       ATTRF1 327
      IF (NOVAL(AA(IPT+17)).EQ.0) THEN                                          BIGNAM 101
      IF ( NOVAL(AA(IAVPTR+IPOLYF)) .EQ. 0 )  THEN                              FIX8    51
C              GROSS AREA IF RECTANGLE                                          ATTRF1 330
          AA(IPT+17) = AA(IAVPTR+IIWGEO+4)*AA(IAVPTR+IIWGEO+5)                  BIGNAM 102
      ELSE                                                                      ATTRF1 334
C              IF POLYGON INPUT CALCULATE GROSS AREA                            ATTRF1 335
          IRXPOL = IOPCDT(14,40) + IA(IAVPTR+IPOLYF) - 1                        ATTRF1 336
          IDATX = IREFTB(2,IRXPOL)                                              ATTRF1 337
          IAVPOL = IDATX + IOPCDT(17,JOPPOL) + 2*IOPCDT(16,JOPPOL)              DEF2   155
          CALL POLYICK(IA(IDATX+1),AA(IAVPOL+1),AREA,PERIM,1,IERRFL)            DEF2   156
          AA(IPT+17) = AREA                                                     BIGNAM 103
          IF (METIN.EQ.1) CALL KDIV(AA(IPT+17),9,1,METIN)                       FIX15   60
      END IF                                                                    ATTRF1 340
      END IF                                                                    FIX3    13
C              WALL AZIMUTH AND TILT IN BLDG C.S. (RADIANS)                     GEO1   318
      WAZM = AMOD( ( AA(IAVPTR+19)+AA(IAVPSP+4)+AA(IAVPFL+5) )*DTOR,            GEO1   319
     1               6.2831853 )                                                GEO1   320
      WTILT = AA(IAVPTR+20)*DTOR                                                GEO1   321
      AA(IPT+61) = SIN(WAZM)                                                    BIGNAM 104
      AA(IPT+62) = COS(WAZM)                                                    BIGNAM 105
      AA(IPT+63) = SIN(WTILT)                                                   BIGNAM 106
      AA(IPT+64) = COS(WTILT)                                                   BIGNAM 107
      AA(IPT+65) = WAZM                                                         BIGNAM 108
      AA(IPT+66) = WTILT                                                        BIGNAM 109
C              STORE NUMBER OF WINDOWS AND WINDOW SF POINTER                    ATTRF1 341
      IA(IPT+52) = IA(IDP+4)                                                    BIGNAM 110
      IA(IPT+51) = IA(IDP+5)                                                    BIGNAM 111
C            CALC AND STORE NET AREA OF I-W                                     ATTRF1 344
      ATAR = AA(IDP+6)                                                          ATTRF1 345
C            NET AREA OF I-W AFTER SUBTRACTING WINDOW AREA                      ATTRF1 346
      AREA = AA(IPT+17) - ATAR                                                  BIGNAM 112
C            MESSAGE IF NEGATIVE NET AREA                                       ATTRF1 348
      IF ( (AREA.LT.1.0E-6).AND.NAMPTR.GT.0 )                                   ATTRF1 349
     .  CALL MSG2 (81,IA(IPT+1),ISYMTB(10,NAMPTR),0,DUM)                        SYMSIZ 123
      IF ((AREA.LT.1.0E-6).AND.NAMPTR.LE.0)                                     ATTRF1 351
     .  CALL MSG2 (81,IIW,DUM,1,DUM)                                            ATTRF1 352
      AA(IPT+55) = AMAX1(0.001,AREA)                                            BIGNAM 113
C              SAVE I-F-R                                                       ATTRF1 354
      AA(IPT+19) = AA(ICONSP+3)                                                 BIGNAM 114
      IF (METIN.EQ.1)  CALL KDIV(AA(IPT+19),32,1,1)                             BIGNAM 115
      IPT    = IPT + LIW                                                        ATTRF1 357
  100 CONTINUE                                                                  ATTRF1 358
C                WRITE OUT THE STANDARD FILE                                    IWO    130
      WRITE (ISTNDF)  NIW, LEN                                                  IWO    131
      CALL WRITEN(ISTNDF,IA(IST),LEN)                                           IWO    132
      IF (IREPRT(32) .EQ. 1)                                                    IWO    133
     1 CALL DUMPIT(20HINTERIOR-WALL       ,IA(IST),LEN)                         IWO    134
      GO TO 2000                                                                IWO    135
 1000 WRITE (ISTNDF)  IZERO,IONE                                                IWO    136
      WRITE (ISTNDF) IZERO                                                      IWO    137
 2000 CONTINUE                                                                  IWO    138
C              SET REPORT BLOCK SF POINTER                                      IWO    139
      IRB = IIWB + LEN                                                          IWO    140
      JOPcur  = 0                                                               FIX14  214
      JREFcur = 0                                                               FIX14  215
      RETURN                                                                    IWO    141
      END                                                                       IWO    142
      SUBROUTINE LAYERD(JREF,JOPCDT,LKDAT,NAMPTR,LSDPTR,LKPTR,Iphase)           DFTEX3 730
C                                                                               LAYERI   3
C               PROCESS LAYER COMMAND                                           LAYERI   4
C                                                                               LAYERI   5
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LAYRD/  NLAYRS, ALAYRD(5,10), AFRI, AFRO                         /LAYRD/  2
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON  /LYVALX/ IIFRP, IMATST, ITHST, INRFP,                             /LYVALX/ 2
     1                 IUP, ICOMRP, NLAY                                        /LYVALX/ 3
      COMMON  /RED/   MRF, U, NRF, COMR, SRFX, SRFY, SRFZ, RFX(105),            /RED/    2
     1                RFY(105), RFZ(105)                                        /RED/    3
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
C                                                                               LAYERI  25
      DIMENSION ICONN(6), IRFX(40), IRFY(40), IRFZ(40)                          LAYERI  26
C                                                                               LAYERI  28
      LOGICAL  ALLRES                                                           LAYERI  29
C                                                                               LAYERI  30
      EQUIVALENCE (ICONN(1),U),(IRFX(1),RFX(1)),(IRFY(1),RFY(1)),               LAYERI  31
     1            (IRFZ(1),RFZ(1))                                              LAYERI  32
C                                                                               LAYERI  44
      ALLRES = .TRUE.                                                           LAYERI  45
      IAXRF = 0                                                                 FIX11  440
      IAXSAV = 0                                                                FIX11  441
      LEN    = 0                                                                DFTEX4 430
      DO 10 I=1,6                                                               LAYERI  46
   10 ICONN(I) = 0                                                              LAYERI  47
      NSAVE = IOPCDT(17,JOPCDT)                                                 DEF2   158
C              IAVPT1 IS THE START OF THE VALUE BLOCK                           DEF2   159
      IAXS = IREFTB(2,JREF)                                                     DEF2   160
      IAVPT1 = IAXS + NSAVE                                                     DEF2   161
C               SET SOME POINTERS                                               LAYERI  50
C               IKW IS THE FIRST KEYWORD FOR THE COMMAND                        LAYERI  51
      IKW    = IOPCDT(9,JOPCDT)                                                 LAYERI  52
C               NKW IS THE NUMBER OF KEYWORDS FOR THIS COMMAND                  LAYERI  53
      NKW    = IOPCDT(10,JOPCDT)                                                LAYERI  54
C               LVAL IS THE LENGTH OF THE VALUE ARRAY                           LAYERI  55
      LVAL   = IOPCDT(16,JOPCDT)                                                LAYERI  56
      IF(Iphase .ne. 2)  THEN                                                   DFTEX3 731
        CALL LSDFIL(JOPCDT,ISYMTB,KONTXT(1,IKW),NKW,AA(IAVPT1+1),               DFTEX3 732
     $              AA(LKDAT+1),LSDPTR,ISYMTB(1,LKPTR),NAMPTR,LVAL)             DFTEX3 733
        IF(Iphase .eq. 1) RETURN                                                DFTEX3 734
      ENDIF                                                                     DFTEX3 735
      IAVPTR = IAVPT1 + 2*LVAL                                                  DEF2   164
C               FILL INPUT ARRAY FOR RESFAC                                     LAYERI  83
C               OVERWRITE THICKNESS IF REQUIRED                                 LAYERI  84
      CALL FILLN(REQD,ALAYRD,50)                                                LAYERI  85
      AFRI = AA(IAVPTR+IIFRP)                                                   DEF2   165
C              LOOP OVER LAYERS                                                 LAYERI  88
      DO 100 I=1,10                                                             LAYERI  89
C              CHECK FOR MATERIAL                                               LAYERI  90
      I3 = IA(IAVPTR+IMATST+I)                                                  DEF2   166
      IF (NOVAL(I3) .EQ. 0)  GOTO 100                                           DFTEX3 736
      I4     = ISYMTB(12,I3)                                                    SYMSIZ 124
C              FOUND IN SYMBOL TABLE.  GET POINTER TO DATA                      LAYERI  97
      IMAT = IOPCDT(14,JOPMAT) + I4 - 1                                         REFTB1 279
      IMAT = IREFTB(2,IMAT) + 2*IOPCDT(16,JOPMAT) + IOPCDT(17,JOPMAT)           4XAA   393
      CALL MOVEN(AA(IMAT+2),ALAYRD(1,I),5)                                      SUBTY8  32
C              CHECK FOR THICKNESS.  OVERWRITE MATERIAL THICKNESS               LAYERI 115
C              IF THERE                                                         LAYERI 116
      IF (NOVAL(AA(IAVPTR+ITHST+I)).NE.0) ALAYRD(1,I)=AA(IAVPTR+ITHST+I)        DFTEX3 737
  100 CONTINUE                                                                  LAYERI 118
C                CHECK FOR VACANT LAYERS                                        LAYERI 119
      DO 420 I=1,10                                                             LAYERI 120
      IF((NOVAL(ALAYRD(1,I)).EQ.0).and.((NOVAL(ALAYRD(5,I)).EQ.0)))             DFTEX3 738
     $  GOTO 440                                                                DFTEX3 739
  420 CONTINUE                                                                  LAYERI 122
      I = 10                                                                    DFTEX4 431
      GO TO 470                                                                 LAYERI 123
  440 CONTINUE                                                                  LAYERI 124
      DO 460 II=I,10                                                            LAYERI 125
      IF((NOVAL(ALAYRD(1,II)).NE.0).or.((NOVAL(ALAYRD(5,II)).NE.0)))            DFTEX3 740
     $  GOTO 1001                                                               DFTEX3 741
  460 CONTINUE                                                                  LAYERI 127
      I      = I - 1                                                            LAYERI 128
  470 CONTINUE                                                                  LAYERI 129
      NLAYRS = I                                                                LAYERI 130
C                CHECK FOR ERRORS AND PRINT MATERIAL TABLE                      LAYERI 131
      IEFLG  = 0                                                                LAYERI 132
      IF (MSGLVL .GT. 4)  WRITE(IOUTPT,2000)                                    LAYERI 133
      DO 560 J=1,NLAYRS                                                         LAYERI 134
      IF (ALAYRD(5,J) .LE. 0.0)  GO TO 520                                      LAYERI 135
      DO 510 I=1,4                                                              LAYERI 136
      ALAYRD(I,J) = 0.0                                                         LAYERI 137
  510 CONTINUE                                                                  LAYERI 138
      GO TO 540                                                                 LAYERI 139
  520 ALAYRD(5,J) = 0.0                                                         LAYERI 140
      ALLRES = .FALSE.                                                          LAYERI 141
      DO 530 I=1,4                                                              LAYERI 142
      IF (ALAYRD(I,J) .LE. 0.0)  IEFLG = I                                      LAYERI 143
  530 CONTINUE                                                                  LAYERI 144
  540 IF (MSGLVL .GT. 4)  WRITE(IOUTPT,2001) J, (ALAYRD(I,J),I=1,5)             LAYERI 145
  560 CONTINUE                                                                  LAYERI 146
      J      = NLAYRS + 1                                                       LAYERI 147
      IF (MSGLVL .GT. 4) WRITE(IOUTPT,2001,ERR=99012)                           LAYERI 148
     .                                        J, IZERO, IZERO, IZERO,           LAYERI 149
     1 IZERO, AFRI                                                              LAYERI 150
99012 CONTINUE                                                                  LAYERI 151
      IF (MSGLVL .GT. 4)  WRITE(IOUTPT,2002)                                    LAYERI 152
      IF (IEFLG .NE. 0)  GO TO 1002                                             LAYERI 153
      IAXSAV = IAX                                                              DEF2   169
      IAXRF = IAX                                                               FIX11  442
      IF (ALLRES)  GO TO 700                                                    LAYERI 157
C                CALCULATE RESPONSE FACTORS                                     LAYERI 158
      CALL RESFAC(ISYMTB(1,IREFTB(1,JREF)))                                     REFTB1 284
C                PRINT AND STORE RESPONSE FACTORS                               LAYERI 160
      CALL MOVEAA(IA,ICONN,6)                                                   LAYERI 161
      CALL CKAA(IA,3*NRF)                                                       LAYERI 162
      DO 580 I=1,NRF                                                            LAYERI 163
      AA(IAX+3*I-2) = RFX(I)                                                    LAYERI 164
      AA(IAX+3*I-1) = RFY(I)                                                    LAYERI 165
      AA(IAX+3*I) = RFZ(I)                                                      LAYERI 166
  580 CONTINUE                                                                  LAYERI 167
      IAX    = IAX + 3*NRF                                                      LAYERI 168
      LEN = 3*NRF + 7                                                           DEF2   170
      CALL MOVEAA(AA,AFRI,1)                                                    LAYERI 169
      IF (MSGLVL.GT.4 .AND. NOECHO.NE.1)  CALL RFWRIT(1,IAXRF)                  FIX11  443
C              ALSO CALCULATE RESPONSE FACTORS                                  LAYERI 171
C              WITHOUT I-F-R, AND STORE THEM AFTER FIRST SET                    LAYERI 172
      IF(AFRI.NE.0.) NLAYRS = NLAYRS - 1                                        LAYERI 175
      AFRI   = 0.                                                               LAYERI 176
      IAXRF = IAX                                                               FIX11  444
      CALL RESFAC(ISYMTB(1,IREFTB(1,JREF)))                                     REFTB1 285
      CALL MOVEAA(IA,ICONN,6)                                                   LAYERI 178
      CALL CKAA(IA,3*NRF)                                                       LAYERI 179
      DO 590 I=1,NRF                                                            LAYERI 180
      AA(IAX+3*I-2) = RFX(I)                                                    LAYERI 181
      AA(IAX+3*I-1) = RFY(I)                                                    LAYERI 182
      AA(IAX+3*I) = RFZ(I)                                                      LAYERI 183
  590 CONTINUE                                                                  LAYERI 184
      IAX    = IAX + 3*NRF                                                      LAYERI 185
      LEN = LEN + 3*NRF + 6                                                     DEF2   171
      IF (MSGLVL.GT.4 .AND. NOECHO.NE.1)  CALL RFWRIT(1,IAXRF)                  FIX11  445
      GO TO 1100                                                                LAYERI 187
C              RESISTANCE ONLY LAYERS                                           LAYERI 188
  700 CALL MSG(56)                                                              ERR-01 688
      RBARE = 0.                                                                LAYERI 191
      DO 710 J=1,NLAYRS                                                         LAYERI 192
  710 RBARE = RBARE + ALAYRD(5,J)                                               LAYERI 193
      U = RBARE + AFRI                                                          LAYERI 194
      U = 1./AMAX1(U,.000001)                                                   LAYERI 195
      CALL MOVEAA(IA,ICONN,6)                                                   LAYERI 196
      CALL MOVEAA(AA,AFRI,1)                                                    LAYERI 197
      U = 1./AMAX1(RBARE,.000001)                                               LAYERI 198
      CALL MOVEAA(IA,ICONN,6)                                                   LAYERI 199
      LEN = 13                                                                  DEF2   172
      GO TO 1100                                                                LAYERI 200
C                ERROR --- VACANT LAYERS                                        LAYERI 201
 1001 CALL MSG2(116,II,'MATERIAL Layer  ',II,II)                                DFTEX4 432
      GO TO 1100                                                                LAYERI 204
C                ERROR --- NEGATIVE OR ZERO PHYSICAL PROPERTIES                 LAYERI 205
 1002 CALL MSG(55)                                                              ERR-01 690
C              CHECK IF SPACE ALREADY RESERVED FOR RESP. FAC.'S                 DEF2   173
 1100 IF (IA(IAXS+1).GT.0) THEN                                                 DEF2   174
C              SEE IF SPACE AVAILABLE IS BIG ENOUGH                             DEF2   175
          IF (IA(IAXS+2).GE.LEN) THEN                                           DEF2   176
              IF(IAXSAV .gt. 0)  THEN                                           DFTEX4 433
                IAXRF = IA(IAXS+1)                                              DFTEX4 434
                CALL MOVEN(AA(IAXSAV+1),AA(IAXRF+1),LEN)                        DFTEX4 435
                IAX = IAXSAV                                                    DFTEX4 436
              ENDIF                                                             DFTEX4 437
          ELSE                                                                  DEF2   180
C              IF NOT BIG ENOUGH, LEAVE IT WHERE IT IS                          DEF2   181
              IA(IAXS+1) = IAXSAV                                               DEF2   182
              IA(IAXS+2) = LEN                                                  DEF2   183
          END IF                                                                DEF2   184
      ELSE                                                                      DEF2   185
          IA(IAXS+1) = IAXSAV                                                   DEF2   186
          IA(IAXS+2) = LEN                                                      DEF2   187
      END IF                                                                    DEF2   188
      RETURN                                                                    DEF2   189
 2000 FORMAT(1H0,12X,5HLAYER,4X,9HTHICKNESS,6X,12HCONDUCTIVITY ,                LAYERI 209
     1 8X,7HDENSITY,7X,13HSPECIFIC HEAT,6X,10HRESISTANCE /)                     LAYERI 210
 2001 FORMAT(15X,I2,1X,5(4X,F9.4,4X))                                           LAYERI 211
 2002 FORMAT(1H0)                                                               LAYERI 212
      END                                                                       LAYERI 217
      SUBROUTINE LAYO                                                           LAYO     2
C                                                                               LAYO     3
C              SAVE LAYERS ON CONSTRUCTION STANDARD FILE BLOCK                  LAYO     4
C              IN THE CASE OF LIBRARY-INPUT                                     LAYO     5
C                                                                               LAYO     6
C              LAYO USES 9 WORDS OF COMMWK                                      LAYO     7
C                                                                               LAYO     8
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON  /CNVALX/ KWLAY,KWUV,KWWALP,KWRO,ILAYP,IUVP,IWALPP,IROP            SUBTY8   1
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LBLOCK/ LSFBLK(20),N(20)                                         BLIND    2
      EQUIVALENCE (LWPARB,LSFBLK(4)),(LCB1,LSFBLK(5)),                          /LBLOCK/ 3
     1            (LCB2,LSFBLK(6)),(LCONSB,LSFBLK(6)),                          /LBLOCK/ 4
     2            (LGEOB,LSFBLK(9))                                             BLIND    3
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON  /LYVALX/ IIFRP, IMATST, ITHST, INRFP,                             /LYVALX/ 2
     1                 IUP, ICOMRP, NLAY                                        /LYVALX/ 3
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
C                                                                               LAYO    24
      EQUIVALENCE (LBLK,COMMWK(1)),(IAPTR,COMMWK(2)),                           LAYO    25
     1            (IST,COMMWK(3)),(IPT,COMMWK(4)),                              LAYO    26
     2            (NAMPTR,COMMWK(5)),(IDP,COMMWK(6)),                           LAYO    27
     3            (LEN,COMMWK(7)),(NSTOR,COMMWK(8))                             LAYO    28
C                                                                               LAYO    29
      LBLK   = 1                                                                LAYO    30
      IST    = IAX + 1                                                          LAYO    32
      IPT    = IAX                                                              LAYO    33
      LBLK   = 0                                                                LAYO    34
      DO 100 IL=1,NLAY                                                          LAYO    35
      IRX = IOPCDT(14,JOPLAY) + IL - 1                                          REFTB1 287
      NAMPTR = IREFTB(1,IRX)                                                    REFTB1 288
      IDP = IREFTB(2,IRX)                                                       REFTB1 289
      IDP = IA(IDP+1)                                                           DEF2   190
      NRF1   = IA(IDP+2)                                                        LAYO    38
      IP2    = IDP + 3*NRF1 + 7                                                 LAYO    39
      NRF2   = IA(IP2+2)                                                        LAYO    40
      LEN    = LCONSF + 10 + 3*NRF1 + 3*NRF2                                    LAYO    41
      CALL CKAA(IA,LEN)                                                         LAYO    42
      IAX    = IAX + LEN                                                        LAYO    43
      CALL FILLN(0.,AA(IPT+1),LEN)                                              LAYO    44
      CALL MOVEN(ISYMTB(1,NAMPTR),IA(IPT+1),4)                                  LAYO    45
      NSTOR  = LEN - 7                                                          LAYO    46
      IA(IPT+5) = LEN                                                           LAYO    47
      CALL MOVEN(AA(IDP+1),AA(IPT+8),NSTOR)                                     LAYO    48
      IPT    = IPT + LEN                                                        LAYO    49
      LBLK   = LBLK + LEN                                                       LAYO    51
  100 CONTINUE                                                                  LAYO    52
      IAX    = IST - 1                                                          LAYO    53
      WRITE (ISTNDF) NLAY, LBLK                                                 LAYO    54
      CALL WRITEN(ISTNDF,IA(IST),LBLK)                                          LAYO    55
      WRITE (ISTNDF) IZERO,IONE                                                 LAYO    56
      WRITE (ISTNDF) IZERO                                                      LAYO    57
      IF (IREPRT(32) .EQ. 1)                                                    LAYO    58
     1 CALL DUMPIT(20HLAYERS               ,IA(IST),LBLK)                       LAYO    59
      RETURN                                                                    LAYO    60
      END                                                                       LAYO    61
      SUBROUTINE LIBDEF(JREF,JOPCDT,IOP,Iphase)                                 DFTEX3 742
C                                                                               LIBDEF   3
C              DO DEFAULT FILL AFTER LIBRARY INPUT                              LIBDEF   4
C                                                                               LIBDEF   5
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON /JOPS  / JSOP,JZOP,JSROP,JCFOP,ISSOPS(7),IZSOPS(3)                 -048b   10
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
      COMMON /DRVALX/ IDRGEO,IDRSAP,IDRCNP,IDRSDP,IDRFRH,IDRFRW,IDRMUP          /DRVALX/ 2
      COMMON  /EWVALX/ IEWLCP, IEWGEO, IEWCNP, IEWSDP, IEWSAP, IEWTLP,          /EWVALX/ 2
     1                  IEWSFP,IEWCRP,IEWVRP                                    /EWVALX/ 3
      COMMON  /IWVALX/ IIWCNP, IIWGEO, IIWSAP, IIWARP, IIWTLP, IIWSFP,          /IWVALX/ 2
     1                  IIWLCP,IIWCRP,KWIWAR,IIWVRP                             /IWVALX/ 3
      COMMON  /UGVALX/ IUGCNP, IUGGEO, IUGSAP, IUGARP, IUGTLP, IUGSFP,          /UGVALX/ 2
     1                  IUGLCP,IUGCRP,KWUGAR,IUGVRP                             /UGVALX/ 3
      COMMON /WIVALX/ IWIGEO,IGTP,IWSDP,IWICRP,IWIMUP,IWIFRH,IWIFRW,            /WIVALX/ 2
     .                IGTPSW                                                    /WIVALX/ 3
C                                                                               LIBDEF   7
      IADIMVsav = IADIMV                                                        NEWEXP  54
      CALL GENDFP(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR)                        LIBDEF   8
      IF (JOPCDT.EQ.JOPGT) THEN                                                 DFTEX3 743
          CALL GENCMD(JREF,JOPCDT,0,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)           DFTEX3 744
      ELSE IF (JOPCDT.EQ.JOPCNS) THEN                                           DFTEX3 745
          CALL CONSTD(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)             DFTEX3 746
      ELSE IF (JOPCDT.EQ.JOPLAY) THEN                                           DFTEX3 747
          CALL LAYERD(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)             DFTEX3 748
      ELSE IF (JOPCDT.EQ.JOPMAT) THEN                                           DFTEX3 749
          CALL GENCMD(JREF,JOPCDT,0,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)           DFTEX3 750
      ELSE IF (JOPCDT.EQ.JOPSP) THEN                                            DFTEX3 751
          CALL SPACED(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)             DFTEX3 752
      ELSE IF (JOPCDT.EQ.JOPEW) THEN                                            DFTEX3 753
          CALL WALLD(JREF,JOPCDT,IOP,IEWGEO,IEWLCP,IEWTLP,                      DFTEX3 754
     1        IEWCRP,0,IEWVRP,IEWSAP,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)          DFTEX3 755
      ELSE IF (JOPCDT.EQ.JOPUGW) THEN                                           DFTEX3 756
          CALL WALLD(JREF,JOPCDT,IOP,IUGGEO,IUGLCP,IUGTLP,IUGCRP,IUGARP,        DFTEX3 757
     1        IUGVRP,IUGSAP,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)                   DFTEX3 758
      ELSE IF (JOPCDT.EQ.JOPIW) THEN                                            DFTEX3 759
          CALL WALLD(JREF,JOPCDT,IOP,IIWGEO,IIWLCP,IIWTLP,IIWCRP,IIWARP,        DFTEX3 760
     1        IIWVRP,IIWSAP,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)                   DFTEX3 761
      ELSE IF (JOPCDT.EQ.JOPWIN) THEN                                           DFTEX3 762
          CALL ATTD(JREF,JOPCDT,IWIMUP,IWIGEO,IWIFRH,IWIFRW,LKDAT,              DFTEX3 763
     1        NAMFLG,LSDFLG,LKPTR,Iphase)                                       DFTEX3 764
      ELSE IF (JOPCDT.EQ.JOPDR) THEN                                            DFTEX3 765
          CALL ATTD(JREF,JOPCDT,IDRMUP,IDRGEO,IDRFRH,IDRFRW,LKDAT,              DFTEX3 766
     1        NAMFLG,LSDFLG,LKPTR,Iphase)                                       DFTEX3 767
      ELSE IF (JOPCDT.EQ.JOPRB) THEN                                            DFTEX3 768
          CALL RBD(JREF,JOPCDT,IA,ISYMTB,KONTXT,IREFTB,LKDAT,                   DFTEX3 769
     1             NAMFLG,LSDFLG,LKPTR,Iphase)                                  DFTEX3 770
      ELSE IF (JOPCDT.EQ.JOPHR) THEN                                            DFTEX3 771
          CALL HRD(JREF,JOPCDT,IA,ISYMTB,KONTXT,IREFTB,LKDAT,                   DFTEX3 772
     1             NAMFLG,LSDFLG,LKPTR,Iphase)                                  DFTEX3 773
      ELSE IF (JOPCDT.EQ.JOPPOL) THEN                                           DFTEX3 774
          CALL POLYD(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)              DFTEX3 775
      ELSE IF(JOPCDT .EQ. JSOP) THEN                                            DFTEX3 776
        CALL SYSTIN(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)               DFTEX3 777
      ELSE IF(JOPCDT .EQ. JZOP) THEN                                            DFTEX3 778
        CALL ZONEIN(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)               DFTEX3 779
      ELSE IF (JOPCDT.EQ.JCFOP) THEN                                            DFTEX3 780
          CALL CFD(JREF,JOPCDT,IA,ISYMTB,KONTXT,IREFTB,LKDAT,                   DFTEX3 781
     1             NAMFLG,LSDFLG,LKPTR,Iphase)                                  DFTEX3 782
C     ELSE IF(JOPCDT .EQ. JSROP) THEN                                           DFTEX3 783
                                                                                DFTEX3 784
      ELSE IF(JOPCDT.eq.JOPWIL) THEN                                            DFTEX3 787
        CALL WINLAYD(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)              DFTEX3 788
      ELSE IF(JOPCDT.eq.JOPLTGS) THEN                                           DFTEX3 789
        CALL LTGSD(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)                DFTEX3 790
      ELSE IF(JOPCDT.ge.89 .and. JOPCDT.le.91) THEN                             DFTEX3 793
        CALL URIN(JREF,JOPCDT,0,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)               DFTEX3 794
      ELSE                                                                      DFTEX3 795
          CALL GENCMD(JREF,JOPCDT,0,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)           DFTEX3 796
      END IF                                                                    DFTEX3 797
      IF(LSDFLG .EQ. 1)  THEN                                                   FIX7   100
        NUM = 3                                                                 FIX7   101
      ELSE                                                                      FIX7   102
        NUM = 2                                                                 FIX7   103
      ENDIF                                                                     FIX7   104
      CALL FILLN(0, IA(IADIMV+1), (IADIMVsav-IADIMV))                           NEWEXP  55
      IADIMV = IADIMVsav                                                        NEWEXP  56
      RETURN                                                                    FIX7   106
      END                                                                       LIBDEF  21
      FUNCTION LIBGET(JREF,JOPCDT,IOP,INFILE,INECHO)                            LIBGET   2
C                                                                               LIBGET   3
C              GET DATA FOR A COMMAND FROM LIBRARY                              LIBGET   4
C                                                                               LIBGET   5
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      INTEGER ISYMBs(20)                                                        DFTEX3 799
C              INECHO=1 MEANS NO INPUT ECHO                                     LIBGET  13
      NOECHS = NOECHO                                                           LIBGET  14
      NOECHO = INECHO                                                           LIBGET  15
C              MAKE THE INPUT FILE BE THE LIBRARY FILE                          LIBGET  16
      INFILS = INFIL                                                            LIBGET  17
      INFIL = INFILE                                                            LIBGET  18
C              SAVE THE PRESESNT STATE OF INPUT BUFFER                          LIBGET  19
      K1S = KARDI1                                                              LIBGET  20
      K2S = KARDI2                                                              LIBGET  21
      KXS = KARDX                                                               LIBGET  22
      KNMS = KRDNUM                                                             LIBGET  23
      CALL MOVEN(KARD(1),KRDSAV(1),82)                                          LIBGET  24
      CALL MOVEN(ISYMB,ISYMBs,20)                                               DFTEX3 800
C              SET BUFFER STATE TO FORCE A READ                                 LIBGET  25
      KARDI1 = 1                                                                LIBGET  26
      KARDX = KARDI1                                                            LIBGET  27
      KARDI2 = KARDI1                                                           LIBGET  28
      KRDNUM = 0                                                                LIBGET  29
      KARD(KARDX) = KCSP                                                        LIBGET  30
C              SCAN IN THE LIBRARY DATA & SAVE IN INPUT ARRAY                   LIBGET  31
      CALL GENLIB(JREF,JOPCDT)                                                  DFTEX3 801
      LIBGET = KRDNUM                                                           LIBGET  33
C              RESTORE INPUT BUFFER STATE                                       LIBGET  34
      KARDI1 = K1S                                                              LIBGET  35
      KARDI2 = K2S                                                              LIBGET  36
      KARDX = KXS                                                               LIBGET  37
      KRDNUM = KNMS                                                             LIBGET  38
      CALL MOVEN(KRDSAV(1),KARD(1),82)                                          LIBGET  39
      CALL MOVEN(ISYMBs,ISYMB,20)                                               DFTEX3 802
C              RESTORE ORIGINAL INPUT FILE                                      LIBGET  40
      INFIL = INFILS                                                            LIBGET  41
C              RESTORE ECHO                                                     LIBGET  42
      NOECHO = NOECHS                                                           LIBGET  43
      RETURN                                                                    LIBGET  44
      END                                                                       LIBGET  45
      SUBROUTINE LIBINI(LBFILE,INDEX,NINDEX,NITEMS)                             LIBINI   2
C                                                                               LIBINI   3
C              FILL LIBRARY INDEX                                               LIBINI   4
C                                                                               LIBINI   5
C              LBFILE IS THE UNIT NUMBER OF THE LIBRARY FILE                    LIBINI   6
C              INDEX IS THE INDEX ARRAY                                         LIBINI   7
C              NINDEX IS THE LENGTH OF THE INDEX                                LIBINI   8
C              NITEMS IS THE NUMBER OF ITEMS STORED IN THE INDEX                LIBINI   9
C                                                                               LIBINI  10
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
C                                                                               LIBINI  15
      DIMENSION INDEX(10,NINDEX)                                                LIBINI  16
C                                                                               LIBINI  17
      INTEGER IUNLIB(2),IUNMET(2),IUNENG(2)                                     LIBINI  18
      INTEGER LIBENT(3),LELNAM(8),LCOMNM(4),LENTRY(3)                           LIBINI  19
      INTEGER INMLIB(4)                                                         LIB4    12
      DATA IUNMET /4HMETR,4HIC  /                                               LIBINI  21
      DATA IUNENG /4HENGL,4HISH /                                               LIBINI  22
      DATA LENTRY /4HLIBR,4HARY-,4HENTR/                                        LIBINI  23
C                                                                               LIBINI  24
      CALL FILLN(IBLANK(1),LELNAM,8)                                            LIBINI  25
      CALL FILLN(IBLANK(1),LIBENT,3)                                            LIBINI  26
      CALL FILLN(IBLANK(1),LCOMNM,4)                                            LIBINI  27
      CALL FILLN(IBLANK(1),IUNLIB,2)                                            LIBINI  28
      CALL FILLN(IBLANK(1),INMLIB,4)                                            LIB4    13
      NITEMS = 0                                                                LIBINI  30
      NLINE = 2                                                                 LIBINI  31
      METLIB = 0                                                                LIBINI  32
      IERRFL = 0                                                                LIBINI  33
      REWIND LBFILE                                                             LIBINI  34
C              GET LIBRARY HEADER                                               LIBINI  35
      READ (LBFILE,1003,END=1000) (INMLIB(I),I=1,4)                             LIB4    14
C              GET LIBRARY UNITS                                                LIBINI  37
      READ(LBFILE,1001,END=1000) IUNLIB(1),IUNLIB(2)                            LIBINI  38
      IF (KOMPAR(IUNLIB,IUNENG,1).EQ.1) THEN                                    LIBINI  39
          METLIB = 0                                                            LIBINI  40
      ELSE IF (KOMPAR(IUNLIB,IUNMET,1).EQ.1) THEN                               LIBINI  41
          METLIB = 1                                                            LIBINI  42
      ELSE                                                                      LIBINI  43
          METLIB = 2                                                            LIBINI  44
      END IF                                                                    LIBINI  45
      IF (METLIB.EQ.2) THEN                                                     LIBINI  46
          IERRFL = 1                                                            LIBINI  47
          CALL MSG(57)                                                          ERR-01 691
          WRITE (IOUTPT,'(9H BAD LIB=,4A4)') (INMLIB(I),I=1,4)                  ERR-01 692
          GO TO 1000                                                            LIBINI  50
      END IF                                                                    LIBINI  51
      IF (METLIB.NE.METIN) THEN                                                 LIBINI  52
          IERRFL = 1                                                            LIBINI  53
          CALL MSG(59)                                                          ERR-01 693
          WRITE (IOUTPT,'(9H BAD LIB=,4A4)') (INMLIB(I),I=1,4)                  ERR-01 694
          GO TO 1000                                                            LIBINI  56
      END IF                                                                    LIBINI  57
  100 READ(LBFILE,1002,END=1000) LIBENT,LELNAM,LCOMNM                           LIBINI  58
      NLINE = NLINE + 1                                                         LIBINI  59
      IF (KOMPAR(LIBENT,LENTRY,3).EQ.1) THEN                                    LIBINI  60
          NITEMS = NITEMS + 1                                                   LIBINI  61
          IF (NITEMS.GT.NINDEX) THEN                                            LIBINI  62
                IERRFL = 1                                                      LIBINI  63
                CALL MSG(58)                                                    ERR-01 695
                WRITE (IOUTPT,'(9H BAD LIB=,4A4,5H MAX=,I6)')                   ERR-01 696
     $                (INMLIB(I),I=1,4),NINDEX                                  ERR-01 697
                GO TO 1000                                                      LIBINI  66
          END IF                                                                LIBINI  67
          CALL MOVEN(LELNAM,INDEX(1,NITEMS),8)                                  LIBINI  68
          CALL TBLSCH(LCOMNM,IOPCDT,24,NOPCDT,1,JOP)                            LIBINI  69
          IF (JOP.GT.0) THEN                                                    LIBINI  70
              INDEX(9,NITEMS) = IOPCDT(11,JOP)                                  LIBINI  71
              INDEX(10,NITEMS) = NLINE                                          LIBINI  72
          ELSE                                                                  LIBINI  73
              IERRFL = 1                                                        LIBINI  74
              CALL MSG2(117,LCOMNM(1),INMLIB(1),NLINE,II)                       -043a   92
          END IF                                                                LIBINI  77
       END IF                                                                   LIBINI  78
       GO TO 100                                                                LIBINI  79
 1000 IF (IERRFL.GT.0) CALL ABT                                                 LIBINI  80
      REWIND LBFILE                                                             LIBINI  81
 1001 FORMAT(7X,2A4)                                                            LIBINI  82
 1002 FORMAT(1X,3A4,2X,8A4,4A4)                                                 LIBINI  83
 1003 FORMAT(14X,4A4)                                                           LIB4    19
      RETURN                                                                    LIBINI  89
      END                                                                       LIBINI  90
      SUBROUTINE LIBPRC(JREFLB,JOPLIB,IFFLAG,ILX,INECHO,LIBENT)                 DFTEX4 440
C                                                                               LIBPRC   3
C              FETCH A COMMAND'S DATA FROM THE LIBRARY, THEN PROCESS            LIB2    25
C              ALL THE LIBRARY REFERENCES IN THE COMMAND'S DATA                 LIB2    26
C              WE ASSUME THAT THE COMMAND INSTANCE ALREADY EXISTS               FIX3    15
C              ILX IS THE LIBRARY INDEX POSITION                                FIX3    16
C              INECHO IS THE ECHO FLAG: 1 MEANS NO ECHO                         FIX3    17
C                                                                               LIBPRC   5
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /ISVS  / ISSVPS(7),IZSVPS(3)                                       -045a    4
      COMMON /JOPS  / JSOP,JZOP,JSROP,JCFOP,ISSOPS(7),IZSOPS(3)                 -048b   11
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /SPVALX/ IHP, IAP, IVP, ISHPP, IWP, IDPTHP, ISCP, IPRCAP,         /SPVALX/ 2
     1                 IWFP, ILTP, IINFMP, INZHP, IPLP, IPSP, ILKWP,            /SPVALX/ 3
     2                 ITKWP, IEKWP, IPAP, ILWSFP, ITWSFP, IPOLSP,              GEO4     1
     3                 IEQWFP, KWH, KWA, KWV, KWSHP, KWW, KWDPTH,               /SPVALX/ 5
     4                 KWSC, KWLT, KWINFM, KWNZH, KWPL, KWPS,                   /SPVALX/ 6
     5                 KWLKW, KWTKW, KWEKW, KWPA, KWLWSF, KWTWSF,               /SPVALX/ 7
     6                 KWEWSF, IFURTP, IFURFP, IFURWP, IFLRWP, KWWF,            /SPVALX/ 8
     7                 KWFLRW,ILTSP,NINFKY,INFKYP(20),DEFINF(10,4),             LTSYS1   2
     8                 ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM,             DFTEXP 197
     9                 ISPLOCP,ISPDIS,NSPDIS                                    DFTEXP 198
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
C                                                                               LIBPRC  14
      DIMENSION IDEFSQ(300)                                                     FIX7   107
C                                                                               LIBPRC  16
      CALL FILLN(0,IDEFSQ(1),300)                                               FIX7   108
      IDEFX =0                                                                  LIBPRC  20
      IS13 = 0                                                                  LIB3    61
      ILXN = 0                                                                  LIB3    62
      IFFLGN = 0                                                                LIB3    63
      LINSRD = 0                                                                LIB3    64
      IDTYPE = 0                                                                TYP1    45
C              Save away error flags for later resoration                       ERR-02   3
      JOPcurs  = JOPcur                                                         ERR-02   4
      JREFcurs = JREFcur                                                        ERR-02   5
      JTYPcurs = JTYPcur                                                        DFTEX4 441
      JTYPcur  = 1                                                              DFTEX4 442
      JKWcurs  = JKWcur                                                         DFTEX4 443
      LIBflgs  = LIBflg                                                         ERR-02   6
      ISDflgs  = ISDFLG                                                         ERR-02   7
C              Set error flags to current command                               ERR-02   8
      JOPcur   = JOPLIB                                                         ERR-02   9
      JREFcur  = JREFLB                                                         ERR-02  10
      IF(LIBflg .ne. 2)  LIBflg   = 1                                           DFTEX4 444
      ISDflg   = 0                                                              ERR-02  12
      JSYM = IREFTB(1,JREFLB)                                                   LIB2    27
C              Set the BDL input line number this library entry was defined on  -047c    2
C              to the current BDL input line number                             -047c    3
      IF(ISYMTB(10,JSYM) .LE. 0) ISYMTB(10,JSYM) = MAX(1,KRDNUM)                -047c    4
      IOPLIB = IOPCDT(7,JOPLIB)                                                 LIB2    28
C              SAVE ORIGINAL SYMBOL TABLE INDEX AND SYMBOL TABLE SIZE           LIB2    29
      JSYMS = JSYM                                                              LIB2    30
      NSYMTS = NSYMTB                                                           LIB2    31
C              GO GET THE DATA                                                  LIB2    32
C              SET CORRECT LIB FILE POSITION                                    LIB2    33
      CALL LIBPOS(IFFLAG,ILX)                                                   LIB3    65
C              GET THE DATA FROM THE LIBRARY                                    LIB2    35
      IF (IFFLAG.EQ.1) THEN                                                     LIB3    66
          LINSRD = LIBGET(JREFLB,JOPLIB,IOPLIB,IUSLIB,INECHO)                   LIB3    67
          IULINX = LUSIDX(10,ILX) + LINSRD - 1                                  FIX6   108
      ELSE                                                                      LIB3    69
          LINSRD = LIBGET(JREFLB,JOPLIB,IOPLIB,LIBFIL,INECHO)                   LIB3    70
          ILINEX = LIBIDX(10,ILX) + LINSRD - 1                                  FIX6   109
      END IF                                                                    LIB3    72
      JKWcur   = 0                                                              ERR-02  13
C              SET THE DATA TYPE TO INDICATE LIBRARY INPUT                      LIB2    38
      LVAL = IOPCDT(16,JOPLIB)                                                  LIB2    39
      ITPTR = IREFTB(2,JREFLB) + IOPCDT(17,JOPLIB)                              LIB2    40
      DO I=1,LVAL                                                               LIB2    41
          IDTYPE = IUNPKB(1,5,IA(ITPTR+I))                                      TYP1    46
          IF (IDTYPE.EQ.5) IA(ITPTR+I) = IPACKB(1,5,3,IA(ITPTR+I))              TYP1    47
          IF (IDTYPE.EQ.6) IA(ITPTR+I) = IPACKB(1,5,4,IA(ITPTR+I))              FIX7   109
      END DO                                                                    LIB2    43
      GO TO 200                                                                 LIB2    44
C              LOOP OVER SYMBOL TABLE LOOKING FOR LIB. REF'S                    LIB2    45
  100 IF (ISYMTB(13,JSYM).LT.0) THEN                                            CRV2    50
          IS13 = -ISYMTB(13,JSYM)                                               LIB3    73
          CALL UNPAK2(IS13,1048576,IFFLGN,ILXN)                                 LIB3    74
          ISYMTB(13,JSYM) = 0                                                   CRV2    52
C              Set the BDL input line number this library entry was defined on  -047c    5
          IF(ISYMTB(10,JSYM) .LE. 0) ISYMTB(10,JSYM) = MAX(1,KRDNUM)            -047c    6
C              to the current BDL input line number                             -047c    7
C              GET COMMAND TABLE INDEX                                          LIBPRC  24
          JOPLIB = JOPSRC(11,ISYMTB(9,JSYM))                                    LIBPRC  25
          IOPLIB = IOPCDT(7,JOPLIB)                                             LIBPRC  26
C              Set error flag to current command                                ERR-02  14
          JOPcur   = JOPLIB                                                     ERR-02  15
          JREFcur  = 0                                                          ERR-02  16
C              CREATE THE COMMAND INSTANCE                                      LIBPRC  27
          CALL INCRRF(ISYMTB,IREFTB,JOPLIB,JSYM,JREFLB)                         LIBPRC  28
C              Set error flag to current command occurance                      ERR-02  17
          JREFcur  = JREFLB                                                     ERR-02  18
C           set the parent ref. tbl. index for this object                      LIBJH1  64
          JPR = 0                                                               -037     9
          IF( JOPLIB .eq. JOPSCH+1 )  JPR = JOPSCH                              -037    10
          IF( JOPLIB .eq. JOPSCH+2 )  JPR = JOPSCH + 1                          -037    11
          IF( JOPLIB .eq. JOPSP )  JPR = JOPFL                                  -037    12
          IF( JOPLIB .eq. JOPEW .or. JOPLIB .eq. JOPUGW .or.                    -037    13
     $        JOPLIB .eq. JOPIW .or. JOPLIB .eq. JOPTWV .or.                    -037    14
     $        JOPLIB .eq. JOPTW  )  JPR = JOPSP                                 -037    15
          IF( JOPLIB .eq. JOPWIN .or. JOPLIB .eq. JOPDR )  JPR = JOPEW          -037    16
          IF( JPR .ne. 0 )  CALL SETPRN(JREFLB,JOPLIB,JPR,0,IA,IA)              -037    17
C            set the current parent for this type of object                     -037    18
          IF( JPR .ne. 0 .or. JOPLIB .eq. JOPFL .or.                            -037    19
     $        JOPLIB .eq. JOPSCH) IOPCDT(22,JOPLIB) = JREFLB                    -037    20
C              SET CORRECT LIB FILE POSITION                                    LIBPRC  29
          CALL LIBPOS(IFFLGN,ILXN)                                              LIB3    75
C              GET THE DATA FROM THE LIBRARY                                    LIBPRC  42
          IF (IFFLGN.EQ.1) THEN                                                 LIB3    76
              LINSRD = LIBGET(JREFLB,JOPLIB,IOPLIB,IUSLIB,INECHO)               LIB3    77
              IULINX = LUSIDX(10,ILXN) + LINSRD - 1                             FIX6   110
          ELSE                                                                  LIB3    79
              LINSRD = LIBGET(JREFLB,JOPLIB,IOPLIB,LIBFIL,INECHO)               LIB3    80
              ILINEX = LIBIDX(10,ILXN) + LINSRD - 1                             FIX6   111
          END IF                                                                LIB3    82
          JKWcur   = 0                                                          ERR-02  19
C              SET THE DATA TYPE TO INDICATE LIBRARY INPUT                      LIBPRC  45
          LVAL = IOPCDT(16,JOPLIB)                                              LIBPRC  46
          ITPTR = IREFTB(2,JREFLB) + IOPCDT(17,JOPLIB)                          LIBPRC  47
          DO I=1,LVAL                                                           LIBPRC  48
              IDTYPE = IUNPKB(1,5,IA(ITPTR+I))                                  TYP1    48
              IF (IDTYPE.EQ.5) IA(ITPTR+I) = IPACKB(1,5,3,IA(ITPTR+I))          TYP1    49
              IF (IDTYPE.EQ.6) IA(ITPTR+I) = IPACKB(1,5,4,IA(ITPTR+I))          FIX7   110
          END DO                                                                LIBPRC  50
      END IF                                                                    LIBPRC  51
  200 IDEFX = IDEFX + 1                                                         LIB2    48
      IF (IDEFX.GT.300) THEN                                                    FIX7   111
          CALL MSG(60)                                                          ERR-01 699
C              Restore error flags                                              ERR-02  20
          JOPcur   = JOPcurs                                                    -037    21
          JREFcur  = JREFcurs                                                   -037    22
          JTYPcur  = JTYPcurs                                                   -037    23
          JKWcur   = JKWcurs                                                    -037    24
          LIBflg   = LIBflgs                                                    -037    25
          ISDflg   = ISDflgs                                                    -037    26
          RETURN                                                                LIBPRC  58
      END IF                                                                    LIBPRC  59
C              SAVE THE LIB. REF INDEX FOR LATER DEFAULT FILLING                LIB2    49
      IDEFSQ(IDEFX) = JREFLB                                                    LIBPRC  60
C              INCREMENT THE SYMBOL TABLE POINTER.  IF WE HAVE JUST             LIB2    50
C              PROCESSED THE ORIGINAL COMMAND'S DATA, GO TO THE ORIGINAL        LIB2    51
C              END OF THE SYMBOL TABLE AND START LOOKING FOR NEW LIBRARY        LIB2    52
C              REFERENCES.  OTHERWISE, KEEP LOOKING.                            LIB2    53
      IF (JSYM.EQ.JSYMS) THEN                                                   LIB2    54
          JSYM = NSYMTS + 1                                                     LIB2    55
      ELSE                                                                      LIB2    56
          JSYM = JSYM + 1                                                       LIB2    57
      END IF                                                                    LIB2    58
      IF (JSYM.LE.NSYMTB) GO TO 100                                             LIBPRC  61
C              DO DEFAULT FILL FOR COMMAND INPUT FROM LIB.                      LIBPRC  63
      DO I=1,IDEFX                                                              LIBPRC  64
          JREFDF = IDEFSQ(IDEFX-I+1)                                            LIBPRC  65
          JSYMDF = IREFTB(1,JREFDF)                                             LIBPRC  66
          JOPDF = 0                                                             DFTEX4 447
          IF(JSYMDF.NE.0) THEN                                                  DFTEX4 448
            IF((ISYMTB(9,JSYMDF).LT.99).and.(ISYMTB(9,JSYMDF).GT.0))THEN        DFTEX4 449
              JOPDF = JOPSRC(11,ISYMTB(9,JSYMDF))                               DFTEX4 450
            ENDIF                                                               DFTEX4 451
          ENDIF                                                                 DFTEX4 452
          IF(JOPDF .EQ. 0)  THEN                                                DFTEX4 453
            II = NOPCDT-1                                                       DFTEX4 454
            DO JJ=1,II                                                          DFTEX4 455
              IF((JREFDF.GE.IOPCDT(14,JJ)) .and.                                DFTEX4 456
     $           (JREFDF.LT.IOPCDT(14,JJ+1))) JOPDF=JJ                          DFTEX4 457
            ENDDO                                                               DFTEX4 458
  300       CONTINUE                                                            DFTEX4 459
          ENDIF                                                                 DFTEX4 460
          IOPDF = IOPCDT(7,JOPDF)                                               LIBPRC  68
C            process any sub-command references                                 FIX6   112
          IF( JOPDF .eq. JOPSP )  THEN                                          DFTEX4 461
            CALL GENSUB(JREFDF,JOPDF,ISPC,JOPSC)                                FIX6   114
          ELSEIF( JOPDF .eq. JSOP )  THEN                                       DFTEX4 462
            DO II=1,7                                                           FIX6   116
              IF(ISSOPS(II).ne.0)                                               FIX6   117
     $          CALL GENSUB(JREFDF,JOPDF,ISSVPS(II),ISSOPS(II))                 FIX6   118
            ENDDO                                                               FIX6   119
          ELSEIF( JOPDF .eq. JZOP )  THEN                                       DFTEX4 463
            DO II=1,3                                                           FIX6   121
              IF(IZSOPS(II).ne.0)                                               FIX6   122
     $          CALL GENSUB(JREFDF,JOPDF,IZSVPS(II),IZSOPS(II))                 FIX6   123
            ENDDO                                                               FIX6   124
          ENDIF                                                                 FIX6   125
C              Set error flags to current command                               ERR-02  25
          JOPcur   = JOPDF                                                      -037    27
          JREFcur  = JREFDF                                                     -037    28
          CALL LIBDEF(JREFDF,JOPDF,IOPDF,0)                                     DFTEX3 803
          JKWcur   = 0                                                          ERR-02  28
          CALL OPLSAV(JOPDF,JREFDF,IA,IA,IA,IA,IA,0)                            FIX7   113
C                  If not first one or not LIBRARY-ENRTY do echo                DFTEX4 464
C                  and required keyword check                                   DFTEX4 465
          IF((I.ne.IDEFX ).or.(LIBENT.eq.0)) CALL PRNTVL(JOPDF,JREFDF)          DFTEX4 466
          JKWcur   = 0                                                          ERR-02  29
      END DO                                                                    LIBPRC  70
C              Restore error flags                                              ERR-02  30
      JOPcur   = JOPcurs                                                        ERR-02  31
      JREFcur  = JREFcurs                                                       ERR-02  32
      JTYPcur  = JTYPcurs                                                       DFTEX4 467
      JKWcur   = JKWcurs                                                        DFTEX4 468
      LIBflg   = LIBflgs                                                        ERR-02  33
      ISDflg   = ISDflgs                                                        ERR-02  34
      RETURN                                                                    LIBPRC  71
      END                                                                       LIBPRC  72
      SUBROUTINE LIBPOS(IFFLAG,ILX)                                             LIB3    83
C                                                                               LIBPOS   3
C              POSITION THE LIBRARY FILE TO THE CORRECT LINE                    LIBPOS   4
C                                                                               LIBPOS   5
C              IFFLAG INDICATES WHICH LIBRARY FILE TO USE                       LIB3    84
C                  = 1: USE IUSLIB; = 0: USE LIBFIL                             LIB3    85
C              ILX IS THE LIBRARY INDEX INDEX                                   LIBPOS   6
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
C                                                                               LIBPOS   9
      IF (IFFLAG.EQ.1) THEN                                                     LIB3    86
          NLINE = LUSIDX(10,ILX) - 1                                            FIX6   126
          LBFILE = IUSLIB                                                       LIB3    88
          IF (NLINE.GE.IULINX) THEN                                             FIX6   127
              ISX = IULINX + 1                                                  LIB3    90
          ELSE                                                                  LIB3    91
              ISX = 1                                                           LIB3    92
              IULINX = 0                                                        LIB3    93
              REWIND IUSLIB                                                     LIB3    94
          END IF                                                                LIB3    95
      ELSE                                                                      LIB3    96
          NLINE = LIBIDX(10,ILX) - 1                                            FIX6   128
          LBFILE = LIBFIL                                                       LIB3    98
          IF (NLINE.GE.ILINEX) THEN                                             FIX6   129
              ISX = ILINEX + 1                                                  LIB3   100
          ELSE                                                                  LIB3   101
              ISX = 1                                                           LIB3   102
              ILINEX = 0                                                        LIB3   103
              REWIND LIBFIL                                                     LIB3   104
          END IF                                                                LIB3   105
      END IF                                                                    LIB3   106
      DO I=ISX,NLINE                                                            LIBPOS  18
          READ(LBFILE,1001) IDUM                                                LIB3   107
      END DO                                                                    LIBPOS  20
 1001 FORMAT(A1)                                                                LIBPOS  21
      RETURN                                                                    LIBPOS  22
      END                                                                       LIBPOS  23
      SUBROUTINE LIBREF                                                         LIBREF   2
C                                                                               LIBREF   3
C              PROCESS ALL THE LIBRARY REF'S IN THE PREVIOUS COMMAND            LIBREF   4
C                                                                               LIBREF   5
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
C                                                                               LIBREF  13
      ILX = 0                                                                   LIB3   108
      IFFLAG = 0                                                                LIB3   109
      IS13 = 0                                                                  LIB3   110
  100 NSYM = NSYMTB                                                             CRV2    53
      JSYMLS = JSYMLX                                                           CRV2    54
      JSYMLX = 0                                                                HVAC11  30
C             LOOP OVER THE SYMBOL TABLE LOOKING FOR LIBRARY REFERENCES         LIBREF  15
C                                                                               LIBREF  16
C             JSYMLX IS SET WHEN THE LIBRARY INDEX WAS SEARCHED FOR THE         LIBREF  17
C             FIRST TIME IN THE LAST COMMAND                                    LIBREF  18
C                                                                               LIBREF  19
      DO JSYM=JSYMLS,NSYM                                                       CRV2    55
          IF (ISYMTB(13,JSYM).LT.0) THEN                                        CRV2    56
              IS13 = -ISYMTB(13,JSYM)                                           LIB3   111
              CALL UNPAK2(IS13,1048576,IFFLAG,ILX)                              LIB3   112
              ISYMTB(13,JSYM) = 0                                               CRV2    58
              JOPLIB = JOPSRC(11,ISYMTB(9,JSYM))                                LIBREF  23
              IOPLIB = IOPCDT(7,JOPLIB)                                         LIBREF  24
              CALL INCRRF(ISYMTB,IREFTB,JOPLIB,JSYM,JREFLB)                     LIBREF  25
C           set the parent ref. tbl. index for this object                      LIBJH1  81
              JPR = 0                                                           -037    29
              IF( JOPLIB .eq. JOPSCH+1 )  JPR = JOPSCH                          -037    30
              IF( JOPLIB .eq. JOPSCH+2 )  JPR = JOPSCH + 1                      -037    31
              IF( JOPLIB .eq. JOPSP )  JPR = JOPFL                              -037    32
              IF( JOPLIB .eq. JOPEW .or. JOPLIB .eq. JOPUGW .or.                -037    33
     $            JOPLIB .eq. JOPIW .or. JOPLIB .eq. JOPTWV .or.                -037    34
     $            JOPLIB .eq. JOPTW  )  JPR = JOPSP                             -037    35
              IF( JOPLIB .eq. JOPWIN .or. JOPLIB .eq. JOPDR )  JPR=JOPEW        -037    36
              IF( JPR .ne. 0 )  CALL SETPRN(JREFLB,JOPLIB,JPR,0,IA,IA)          -037    37
C            set the current parent for this type of object                     -037    38
              IF( JPR .ne. 0 .or. JOPLIB .eq. JOPFL .or.                        -037    39
     $            JOPLIB .eq. JOPSCH) IOPCDT(22,JOPLIB) = JREFLB                -037    40
              CALL LIBPRC(JREFLB,JOPLIB,IFFLAG,ILX,0,0)                         DFTEX4 469
          END IF                                                                LIBREF  27
      END DO                                                                    LIBREF  28
C              Keep fetching until no new library references                    HVAC11  31
      IF(JSYMLX.NE.0) GO TO 100                                                 HVAC11  32
      RETURN                                                                    LIBREF  30
      END                                                                       LIBREF  31
      SUBROUTINE LOCBCS(XYZ,N,K,SB)                                             LOCBCS   2
C                                                                               LOCBCS   3
C              CALLED BY GEOPR.                                                 LOCBCS   4
C              TRANSFORMS N VERTICES OF A SURFACE TO THE BUILDING COORD         LOCBCS   5
C              SYS. IF K=1, TRANSFORMS FIRST TO WALL C.S., THEN TO              LOCBCS   6
C              SPACE C.S., THEN TO FLOOR C.S., THEN TO BLDG C.S.                LOCBCS   7
C              AND STORES IN STANDARD FILE GEOMETRY BLOCK.                      LOCBCS   9
C              IF K=2, DOES SAME BUT SKIP TRANSFORM TO WALL C.S.                LOCBCS  10
C              THE WALL C.S. IS ASSUMED TO BE ATTACHED TO THE OUTSIDE           LOCBCS  11
C              SURFACE OF THE WALL; SB IS SETBACK OF WINDOW OR DOOR             LOCBCS  12
C              FROM OUTSIDE WALL SURFACE (USED ONLY ONLY IN TRANSFORMING        LOCBCS  13
C              WINDOWS/DOORS AND ASSOCIATED SETBACK SHADES).                    LOCBCS  14
C              K=3 DOES ONLY TRANS. TO FLOOR & BCS                              GEO4   115
C              K=4 DOES ONLY TRANS. TO BCS                                      GEO4   116
C                                                                               LOCBCS  19
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /ZWALOC/ XF0,YF0,ZF0,AF0,SAF,CAF,XZ0,YZ0,ZZ0,AZ0,SAZ,CAZ,          /ZWALOC/ 2
     1                XW0,YW0,ZW0,AW0,TW0,SAW,CAW,STW,CTW,XW,YW                 /ZWALOC/ 3
      DIMENSION XYZ(3,N)                                                        LOCBCS  24
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
C                                                                               LOCBCS  25
C               If invalid data don't do transformation                         FIX8    53
      IRETFLG = 0                                                               FIX8    54
      DO I=1,N                                                                  FIX8    55
        IF( (NOVAL(XYZ(1,I)).EQ.0) .or. (NOVAL(XYZ(2,I)).EQ.0) )  THEN          FIX8    56
          IRETFLG = 1                                                           FIX8    57
          XYZ(1,I) = UNDEF(1)                                                   FIX8    58
        ENDIF                                                                   FIX8    59
      ENDDO                                                                     FIX8    60
      IF(IRETFLG .NE. 0)  RETURN                                                FIX8    61
C                                                                               FIX8    62
      IF(K.EQ.1) THEN                                                           LOCBCS  26
C              TRANSFORM TO WALL C.S.                                           LOCBCS  27
          DO I=1,N                                                              LOCBCS  28
              XYZ(1,I) = XYZ(1,I) + XW                                          LOCBCS  29
              XYZ(2,I) = XYZ(2,I) + YW                                          LOCBCS  30
              XYZ(3,I) = XYZ(3,I) - SB                                          LOCBCS  31
          ENDDO                                                                 LOCBCS  32
      ENDIF                                                                     LOCBCS  33
C              TRANSFORM TO SPACE C.S.                                          LOCBCS  34
      IF (K.EQ.1 .OR. K.EQ.2) THEN                                              GEO4   117
          DO I= 1,N                                                             GEO4   118
              X = XYZ(1,I)                                                      GEO4   119
              Y = XYZ(2,I)                                                      GEO4   120
              Z = XYZ(3,I)                                                      GEO4   121
              XYZ(1,I) = XW0 - X*CAW - Y*CTW*SAW + Z*STW*SAW                    GEO4   122
              XYZ(2,I) = YW0 + X*SAW - Y*CTW*CAW + Z*STW*CAW                    GEO4   123
              XYZ(3,I) = ZW0         + Y*STW     + Z*CTW                        GEO4   124
          ENDDO                                                                 GEO4   125
      END IF                                                                    GEO4   126
C              TRANSFORM TO FLOOR C.S.                                          LOCBCS  43
      IF (K.EQ.1 .OR. K.EQ.2 .OR. K.EQ.3) THEN                                  GEO4   127
          DO I= 1,N                                                             GEO4   128
              X = XYZ(1,I)                                                      GEO4   129
              Y = XYZ(2,I)                                                      GEO4   130
              XYZ(1,I) = XZ0 + X*CAZ + Y*SAZ                                    GEO4   131
              XYZ(2,I) = YZ0 - X*SAZ + Y*CAZ                                    GEO4   132
              XYZ(3,I) = ZZ0 + XYZ(3,I)                                         GEO4   133
          ENDDO                                                                 GEO4   134
      END IF                                                                    GEO4   135
C              TRANSFORM TO BLDG C.S.                                           LOCBCS  51
      DO I= 1,N                                                                 LOCBCS  52
          X = XYZ(1,I)                                                          LOCBCS  53
          Y = XYZ(2,I)                                                          LOCBCS  54
          XYZ(1,I) = XF0 + X*CAF + Y*SAF                                        LOCBCS  55
          XYZ(2,I) = YF0 - X*SAF + Y*CAF                                        LOCBCS  56
          XYZ(3,I) = ZF0 + XYZ(3,I)                                             LOCBCS  57
C***                                                                            LOCBCS  58
C      WRITE(IOUTPT,999) K,I,(XYZ(JJJ,I),JJJ=1,3)                               LOCBCS  59
C  999 FORMAT(' LOCBCS: K,VX NO.,X,Y,Z=', 2I3,3F10.2)                           LOCBCS  60
C***                                                                            LOCBCS  61
      ENDDO                                                                     LOCBCS  62
C***                                                                            LOCBCS  63
C      WRITE(IOUTPT,998)                                                        LOCBCS  64
C  998 FORMAT(/)                                                                LOCBCS  65
C***                                                                            LOCBCS  66
      RETURN                                                                    LOCBCS  67
      END                                                                       LOCBCS  68
      SUBROUTINE LOCSHD(XYZ,N,X0,Y0,Z0,A,T)                                     LOCSHD   2
C                                                                               LOCSHD   3
C         CALLED BY GEOPR.                                                      LOCSHD   4
C         TRANSFORMS N VERTICES OF A SHADE SURFACE TO THE BUILDING COORD        LOCSHD   5
C                                                                               LOCSHD   6
C         INPUT                                                                 LOCSHD   7
C         ------                                                                LOCSHD   8
C         XYZ       - THE COORDINATES IN LOCAL C.S.                             LOCSHD   9
C         N         - THE NUM OF VERTICES                                       LOCSHD  10
C         XO,YO,ZO  - THE COORDINATES OF THE LOWER LEFT-HAND CORNER OF SURFACE  LOCSHD  11
C         A         - THE AZIMUTH IN BLDG C.S. (RADIANS)                        LOCSHD  12
C         T         - THE TILT IN BLDG C.S. (RADIANS)                           LOCSHD  13
C                                                                               LOCSHD  14
C         OUTPUT                                                                LOCSHD  15
C         -------                                                               LOCSHD  16
C         XYZ       - THE COORDINATES IN BLDG C.S.                              LOCSHD  17
C                                                                               LOCSHD  18
      DIMENSION XYZ(3,N)                                                        LOCSHD  19
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
C               If invalid data don't do transformation                         LOCSHD  21
      IRETFLG = 0                                                               LOCSHD  22
      DO I = 1, N                                                               LOCSHD  23
        IF( (NOVAL(XYZ(1,I)).EQ.0) .or. (NOVAL(XYZ(2,I)).EQ.0) )  THEN          LOCSHD  24
          IRETFLG = 1                                                           LOCSHD  25
          XYZ(1,I) = UNDEF(1)                                                   LOCSHD  26
        ENDIF                                                                   LOCSHD  27
      ENDDO                                                                     LOCSHD  28
      IF(IRETFLG .NE. 0)  RETURN                                                LOCSHD  29
C                                                                               LOCSHD  30
      SA = SIN(A)                                                               LOCSHD  31
      CA = COS(A)                                                               LOCSHD  32
      ST = SIN(T)                                                               LOCSHD  33
      CT = COS(T)                                                               LOCSHD  34
C                                                                               LOCSHD  35
      DO I = 1,N                                                                LOCSHD  36
          X = XYZ(1,I)                                                          LOCSHD  37
          Y = XYZ(2,I)                                                          LOCSHD  38
          Z = XYZ(3,I)                                                          LOCSHD  39
          XYZ(1,I) = X0 - X*CA - Y*CT*SA  + Z*ST*SA                             LOCSHD  40
          XYZ(2,I) = Y0 + X*SA - Y*CT*CA  + Z*ST*CA                             LOCSHD  41
          XYZ(3,I) = Z0        + Y*ST     + Z*CT                                LOCSHD  42
      ENDDO                                                                     LOCSHD  43
      END                                                                       LOCSHD  44
      SUBROUTINE LTGSD(JREF,JOPCDT,LKDAT,NAMPTR,LSDPTR,LKPTR,Iphase)            DFTEX3 804
C                                                                               LTGSD    3
C              PROCESS LIGHTING-SYSTEM COMMAND                                  LTGSD    4
C                                                                               LTGSD    5
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON /LMVALX/                                                           /LMVALX/ 2
     1  ILUMTYP,ILMPTYP,ILMPNO,IBALTYP,ILTGCU,IRADFR,ILUMOUT,IPOWIN,            /LMVALX/ 3
     2  IRCR0,IRCR5,IRCR10,IMAXLMP,ICONFIG,IACCAT,IACCONF,                      /LMVALX/ 4
     3  ILMPCAT,ILMPLUM,ILMPPOW,ILMPDPR,ACF(9,6),PCF(9,6)                       /LMVALX/ 5
C                                                                               LTGSD   15
C               SET SOME POINTERS                                               LTGSD   16
      NSAVE = IOPCDT(17,JOPCDT)                                                 LTGSD   17
C               IKW IS THE FIRST KEYWORD FOR THE COMMAND                        LTGSD   18
      IKW    = IOPCDT(9,JOPCDT)                                                 LTGSD   19
C               NKW IS THE NUMBER OF KEYWORDS FOR THIS COMMAND                  LTGSD   20
      NKW    = IOPCDT(10,JOPCDT)                                                LTGSD   21
C               LVAL IS THE LENGTH OF THE VALUE ARRAY                           LTGSD   22
      LVAL   = IOPCDT(16,JOPCDT)                                                LTGSD   23
C              IAVPT1 IS THE START OF THE VALUE BLOCK                           LTGSD   24
      IAXS = IREFTB(2,JREF)                                                     FIX10  170
C              PTR TO KEYWORD TYPES                                             FIX10  171
      IAVPT1 = IAXS + NSAVE                                                     FIX10  172
C              LTOT IS THE TOTAL SIZE OF THE VALUE BLOCK                        FIX10  173
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,JOPCDT)                                 FIX10  174
      IF(Iphase .ne. 2)  THEN                                                   DFTEX3 805
        CALL LSDFIL(JOPCDT,ISYMTB,KONTXT(1,IKW),NKW,AA(IAVPT1+1),               DFTEX3 806
     $              AA(LKDAT+1),LSDPTR,ISYMTB(1,LKPTR),NAMPTR,LVAL)             DFTEX3 807
        IF(Iphase .eq. 1) RETURN                                                DFTEX3 808
      ENDIF                                                                     DFTEX3 809
C              PTR TO USER INPUT AFTER DEFAULT FILL                             LTGSD   38
      IAVPTR = IAVPT1 + 2*LVAL                                                  LTGSD   39
C              CONSISTENCY CHECKS                                               LTGSD   40
      IERRLUM = 0                                                               LTGSD   41
C              LIGHTING CALCULATION METHOD                                      LTSYS6   1
      IF(NOVAL(IA(IAVPTR+21)).ne.0) THEN                                        DFTEX4 470
        ILTCMETH = ISYMTB(12,IA(IAVPTR+21))                                     DFTEX4 471
      ELSE                                                                      DFTEX4 472
        AA(IAVPTR+21) = REQD                                                    DFTEX4 473
        GOTO 200                                                                DFTEX4 474
      ENDIF                                                                     DFTEX4 475
C              GROUP1 KEYWORDS                                                  LTGSD   42
      ALUMTYP = AA(IAVPTR+ILUMTYP)                                              LTGSD   43
      ALMPTYP = AA(IAVPTR+ILMPTYP)                                              LTGSD   44
C              GROUP2 KEYWORDS                                                  LTGSD   45
      ACU     = AA(IAVPTR+23)                                                   LTGSD   46
      ATOTLUM = AA(IAVPTR+25)                                                   LTGSD   47
      ATOTPOW = AA(IAVPTR+26)                                                   LTGSD   48
C              LTG-CALC-METHOD = LUMINAIRE-LAMP REQUIRES                        LTSYS6   4
C              LUMINAIRE-TYPE AND LAMP-TYPE                                     LTSYS6   5
      IF((ILTCMETH.EQ.0) .AND.                                                  DFTEX3 810
     $   (NOVAL(ALUMTYP).EQ.0 .OR. NOVAL(ALMPTYP).EQ.0)) THEN                   DFTEX3 811
         IERRLUM = IERRLUM + 1                                                  LTSYS6   9
         CALL MSG2(118,II,II,II,II)                                             ERR-01 700
      ENDIF                                                                     LTSYS6  15
C              LTG-CALC-METHOD = LUMENS-POWER REQUIRES                          LTSYS6  16
C              COEF-OF-UTIL, TOT-POWER-INPUT AND TOT-LAMP-LUMENS                LTSYS6  17
      IF((ILTCMETH.EQ.1) .AND. (NOVAL(ACU).EQ.0 .OR.                            DFTEX3 812
     $    NOVAL(ATOTLUM).EQ.0 .OR. NOVAL(ATOTPOW).EQ.0)) THEN                   DFTEX3 813
         IERRLUM = IERRLUM + 1                                                  LTSYS6  22
         CALL MSG2(119,II,II,II,II)                                             ERR-01 701
      ENDIF                                                                     LTSYS6  29
      IF(IERRLUM.GT.0) GO TO 200                                                LTGSD  109
C               LTG-CALC-METHOD = LUMINAIRE-LAMP REQUIRES THAT                  LTSYS6  30
C               LUMINAIRE-CONFIG AGREE WITH LUMINAIRE-TYPE/ACCEPT-CONFIG        LTSYS6  31
C               AND LAMP-TYPE/SIZE AGREE WITH LUMINAIRE-TYPE/                   LTSYS6  32
C               ACCEPT-LAMP-SIZE                                                LTSYS6  33
      IF(ILTCMETH.EQ.0) THEN                                                    LTSYS6  34
C               LUMINAIRE TYPE DATA FOR LIGHTING SYSTEM                         LTGSD  116
         NLUMTY = ISYMTB(12,IA(IAVPTR+ILUMTYP))                                 LTGSD  117
         CALL PTRS(JOPLUMT,NLUMTY,IRXLUMT,IDPLUMT,IAVPLUMT)                     LTGSD  118
C               LAMP TYPE DATA FOR LIGHTING SYSTEM                              LTGSD  119
         NLMPTY = ISYMTB(12,IA(IAVPTR+ILMPTYP))                                 LTGSD  120
         CALL PTRS(JOPLMPT,NLMPTY,IRXLMPT,IDPLMPT,IAVPLMPT)                     LTGSD  121
         LCONFIG = ISYMTB(12,IA(IAVPTR+27))                                     LTGSD  122
         DO ICONF = 1,3                                                         LTGSD  123
            IF(NOVAL(AA(IAVPLUMT+48+ICONF)).EQ.0) GOTO 92                       DFTEX3 814
            LACCEPT = ISYMTB(12,IA(IAVPLUMT+48+ICONF))                          LTGSD  125
            IF(LCONFIG.EQ.LACCEPT) GO TO 100                                    LTGSD  126
         ENDDO                                                                  LTGSD  127
   92    CALL MSG2(120,II,II,II,II)                                             ERR-01 702
  100    CONTINUE                                                               LTGSD  135
         LAMPSIZE = ISYMTB(12,IA(IAVPLMPT+23))                                  LTGSD  136
         LAMPACC  = ISYMTB(12,IA(IAVPLUMT+48))                                  LTGSD  137
         IF(LAMPSIZE.NE.LAMPACC) THEN                                           LTGSD  138
            CALL MSG2(121,II,II,II,II)                                          ERR-01 703
         ENDIF                                                                  LTGSD  145
C             REQUIRE THAT BALLAST TYPE AND LAMP CATEGORY BE CONSISTENT         LTGSD  146
         LAMCAT = ISYMTB(12,IA(IAVPLMPT+19))                                    LTGSD  147
         IBLTY  = 0                                                             LTGSD  148
         IF(NOVAL(AA(IAVPTR+22)).NE.0)                                          DFTEX3 815
     1        IBLTY = ISYMTB(12,IA(IAVPTR+22))                                  LTGSD  150
         IF( (LAMCAT.EQ.1.AND.(IBLTY.LT.1.OR.IBLTY.GT.7)) .OR.                  LTGSD  151
     1       (LAMCAT.EQ.2.AND.(IBLTY.LT.8.OR.IBLTY.GT.9)) .OR.                  LTGSD  152
     2       ((LAMCAT.EQ.5.OR.LAMCAT.EQ.6).AND.                                 LTGSD  153
     3        (IBLTY.LT.10.OR.IBLTY.GT.11))) THEN                               LTGSD  154
            CALL MSG2(122,II,II,II,II)                                          ERR-01 704
         ENDIF                                                                  LTGSD  168
      ENDIF                                                                     LTGSD  169
  200 CONTINUE                                                                  LTGSD  170
      RETURN                                                                    LTGSD  171
      END                                                                       LTGSD  172
      SUBROUTINE OUTFIL                                                         OUTFIL   2
C                                                                               OUTFIL   3
C               WRITE STANDARD FILE                                             OUTFIL   4
C                                                                               OUTFIL   5
C               OUTFIL USES WORDS 31 - 41 OF COMMWK                             OUTFIL   6
C                                                                               OUTFIL   7
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               OUTFIL   9
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /BLDLC/ SITPAR(77),BLDPAR(26)                                      -044e5   1
      COMMON /CLOCK / CLOCK(10)                                                 /CLOCK/  2
      INTEGER ICLOCK8                                                           PC       1
      EQUIVALENCE (ICLOCK8,CLOCK(8))                                            PC       2
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON/COUNT/ NOTH,NITH,NSURF,NINSRF                                      OPLST1 259
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /DDAY/   DDAY(34), NDESDY                                         DDAY1   54
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /HOLALT/ NHOLA(2),IHOLTY(2),IHOLDY(60,2),IHOLMN(60,2)              HOLID1   4
      DIMENSION IHOLS(244)                                                      HOLID1   9
      EQUIVALENCE (IHOLS(1),NHOLA)                                              OUTFIL  21
      COMMON  /HREP  / NVTLIM,IVTLIM(2,30),NRB,LRB,NHRP,LHRP,IRB,IHRP,          HVAC7    1
     $                 JRBOP,JHROP                                              HVAC7    2
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON  /IRUNPD/  NRUNPD,IRUNPD(6,15)                                     ALPHA    1
      COMMON /ISPLST/ ISPLST(9999),ISPLOC(9999)                                 -048a    8
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /ITITLE/ ITITLE(10,5),ITITLT(10,5)                                 FIX11    1
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LBLOCK/ LSFBLK(20),N(20)                                         BLIND    2
      EQUIVALENCE (LWPARB,LSFBLK(4)),(LCB1,LSFBLK(5)),                          /LBLOCK/ 3
     1            (LCB2,LSFBLK(6)),(LCONSB,LSFBLK(6)),                          /LBLOCK/ 4
     2            (LGEOB,LSFBLK(9))                                             BLIND    3
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON  /LIBFLG/ MATFLG, LAYFLG, LSTFLG                                   /LIBFLG/ 2
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON  /LYVALX/ IIFRP, IMATST, ITHST, INRFP,                             /LYVALX/ 2
     1                 IUP, ICOMRP, NLAY                                        /LYVALX/ 3
      COMMON  /MATP/   NMAT, IMATB, LMATB                                       /MATP/   2
      COMMON /MDATA / IDIM(12), ISDOM(12), MONDSC(12)                           /MDATA/  2
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
C                                                                               OUTFIL  40
      EQUIVALENCE (IRB,IRBB)                                                    OUTFIL  41
C                                                                               OUTFIL  42
      EQUIVALENCE (IAPTR,COMMWK(31)),(IAXS,COMMWK(32)),                         OUTFIL  43
     1            (IDP,COMMWK(33)),(IKW,COMMWK(34)),                            OUTFIL  44
     2            (IPT,COMMWK(35)),(IREQ,COMMWK(36)),                           OUTFIL  45
     3            (IST,COMMWK(37)),(LEN,COMMWK(38)),                            OUTFIL  46
     4            (NAMPTR,COMMWK(39)),(NKW,COMMWK(40)),                         OUTFIL  47
     5            (IDPPP,COMMWK(41))                                            OUTFIL  48
C                                                                               OUTFIL  49
C                                                                               OUTFIL  50
      NITH = 0                                                                  ALPHA4   3
      NOTH = 0                                                                  ALPHA4   4
      NSURF = 0                                                                 ALPHA4   5
      NINSRF = 0                                                                ALPHA4   6
C              CHECK FOR REPORTS                                                OUTFIL  53
      IF (IOPCDT(13,JOPLR) .NE. 0)  GO TO 10                                    OUTFIL  54
      JOPcur = JOPLR                                                            -044c3   5
C              BACKSPACE AND CALL LSPERI                                        OUTFIL  55
      CALL MSG2(49,IOPCDT(1,JOPLR),DUM,DUM,DUM)                                 OUTFIL  56
      CALL BKSPAC                                                               OUTFIL  57
      CALL GENINP(IOPCDT(14,JOPLR),JOPLR,0)                                     DEF2   195
      CALL DEFFIL(IOPCDT(14,JOPLR),JOPLR,0,0)                                   DFTEX3 816
      IOPCDT(13,JOPLR) = 1                                                      COMB05  21
   10 CONTINUE                                                                  OUTFIL  59
C              DEFAULT BUILD-PARAMETERS                                         ALPHA   67
      IF (IOPCDT(13,JOPBP).EQ.0) THEN                                           ALPHA   68
      JOPcur = JOPBP                                                            -044c3   6
          CALL MSG2(49,IOPCDT(1,JOPBP),DUM,DUM,DUM)                             ALPHA   69
          CALL BKSPAC                                                           ALPHA   70
          IRX = IOPCDT(14,JOPBP)                                                ALPHA   71
          CALL GENINP(IRX,JOPBP,0)                                              DEF2   197
          CALL DEFFIL(IRX,JOPBP,0,0)                                            DFTEX3 817
          IOPCDT(13,JOPBP) = 1                                                  FIXJH3   2
      END IF                                                                    ALPHA   73
C              CHECK FOR SITE-PARAMETERS                                        DFTEX3 818
      IF (IOPCDT(13,JOPSPR) .EQ. 0)  THEN                                       -038a    1
      JOPcur = JOPSPR                                                           -044c3   7
        CALL MSG2(49,IOPCDT(1,JOPSPR),DUM,DUM,DUM)                              DFTEX3 820
        CALL BKSPAC                                                             DFTEX3 821
        CALL GENINP(IOPCDT(14,JOPSPR),JOPSPR,0)                                 DFTEX3 822
        CALL DEFFIL(IOPCDT(14,JOPSPR),JOPSPR,0,0)                               DFTEX3 823
        IOPCDT(13,JOPSPR) = 1                                                   DFTEX3 824
      ENDIF                                                                     DFTEX3 825
C              DEFAULT PROJECT-DATA                                             -048b   12
      IF (IOPCDT(13,JOPPD).EQ.0) THEN                                           -048b   13
        JOPcur = JOPPD                                                          -048b   14
        CALL MSG2(49,IOPCDT(1,JOPPD),DUM,DUM,DUM)                               -048b   15
        CALL BKSPAC                                                             -048b   16
        IRX = IOPCDT(14,JOPPD)                                                  -048b   17
        CALL GENINP(IRX,JOPPD,0)                                                -048b   18
        CALL DEFFIL(IRX,JOPPD,0,0)                                              -048b   19
        IOPCDT(13,JOPPD) = 1                                                    -048b   20
      ENDIF                                                                     -048b   21
      IF((LDSTYP.ne.3) .and. (IOPCDT(13,JOPSP).EQ.0))  THEN                     DFTEX3 826
        CALL MSG2(22,IOPCDT(1,JOPSP),DUM,DUM,DUM)                               DFTEX3 827
        RETURN                                                                  DFTEX3 828
      ENDIF                                                                     DFTEX3 829
C              MOVE LOADS-REPORT DATA TO OUTPUT ARRAY                           ALPHA   74
      IRX = IOPCDT(14,JOPLR)                                                    ALPHA   75
      IDP = IREFTB(2,IRX)                                                       ALPHA   76
      LVAL = IOPCDT(16,JOPLR)                                                   ALPHA   77
      ISDP = IDP + IOPCDT(17,JOPLR) + 3*LVAL                                    4XAA   419
      CALL MOVEN(IA(ISDP+1),IREPRT(1),LVAL)                                     4XAA   420
C              ---                                                              OUTFIL  60
C              --- IF POST-PROC REQUESTED FLAG THE IREPRT() ARRAY               OUTFIL  61
C              ---                                                              OUTFIL  62
      CALL  PPINDP                                                              OUTFIL  63
C              IF NO FLOOR, CALL FLOORO TO CREATE ONE                           DFTEX3 830
      NFL = IOPCDT(13,JOPFL)                                                    DFTEX3 831
      JOPcur = JOPFL                                                            -044c3   8
      IF (NFL.EQ.0) CALL FLOORO                                                 DFTEX3 832
      CALL GEOALL                                                               DFTEX3 833
C              CALCULATE WEIGHTING FACTORS IF NO INPUT ERRORS                   HOLID1  10
      IF(IFATAL.EQ.0) CALL WFALL(IPDFLG)                                        FIX14  217
C              MOVE TITLE TO ITITLE                                             DEF3    12
      IF (IOPCDT(13,JOPTIT).GT.0) THEN                                          DEF3    13
          IDP = IREFTB(2,IOPCDT(14,JOPTIT))                                     HVAC28  81
          LVAL = IOPCDT(16,JOPTIT)                                              DEF3    15
          IAVPT1 = IDP + IOPCDT(17,JOPTIT)                                      DEF3    16
          IAVPTR = IAVPT1 + 2*LVAL                                              DEF3    17
          DO J=1,5                                                              DEF3    18
          DO I=1,10                                                             DEF3    19
               IVP = (J-1)*10 + I                                               DEF3    20
               ITYP = IUNPKB(1,5,IA(IAVPT1+IVP))                                HVAC28  82
               IF((ITYP.GE.5).and.(ITYP.LE.8))                                  HVAC28  83
     $           ITITLE(I,J)=IA(IAVPTR+IVP)                                     HVAC28  84
          END DO                                                                DEF3    22
          END DO                                                                DEF3    23
      END IF                                                                    DEF3    24
C              RUN PERIOD                                                       ALPHA   79
      NRUNPD = IOPCDT(13,JOPRP)                                                 ALPHA   80
      NDESDY = IOPCDT(13,JOPDD)                                                 ALPHA   81
      LVAL = IOPCDT(16,JOPRP)                                                   ALPHA   82
      CALL FILLN(0,IRUNPD,LVAL*IOPCDT(12,JOPRP))                                ALPHA   83
      IF(NRUNPD+NDESDY.GT.0) THEN                                               DFTEX4 476
          DO IRP=1,NRUNPD                                                       ALPHA   85
              IRX = IOPCDT(14,JOPRP) + IRP - 1                                  ALPHA   86
              IDP = IREFTB(2,IRX) + IOPCDT(17,JOPRP) + 2*LVAL                   4XAA   421
              IRP2 = IRP+NDESDY                                                 DDAY1   67
              DO I=1,LVAL                                                       ALPHA2 151
                  IRUNPD(I,IRP2) = INT(AA(IDP+I)+0.1)                           DDAY1   68
              END DO                                                            ALPHA2 153
          END DO                                                                ALPHA   90
      ELSE                                                                      ALPHA   92
          IF (LDSTYP.NE.3) CALL MSG2(69,1,DUM,DUM,DUM)                          FIX8    63
      END IF                                                                    ALPHA   94
C               DONT WRITE SF IF ANY FATAL ERRORS                               OUTFIL  85
   15 IF (IFATAL .GT. 0)  GO TO 2000                                            OUTFIL  86
      REWIND ISTNDF                                                             ALPHA4   7
      MATFLG = 0                                                                OUTFIL  89
      LAYFLG = 0                                                                OUTFIL  90
      LSTFLG = 0                                                                OUTFIL  91
      NSP    = IOPCDT(13,JOPSP)                                                 OUTFIL  92
      NMAT   = IOPCDT(13,JOPMAT)                                                OUTFIL  93
      NLAY   = IOPCDT(13,JOPLAY)                                                OUTFIL  94
      IF (LSTFLG .EQ. 1)  GO TO 2000                                            OUTFIL  98
      IF ((LDSTYP .EQ. 3) .AND. (NLAY .EQ. 0) .AND. (NMAT .NE. 0))              OUTFIL  99
     1 MATFLG = 1                                                               OUTFIL 100
      IF ((LDSTYP .EQ. 3) .AND. (NLAY .GT. 0) .AND. (NSP .EQ. 0))               OUTFIL 101
     1 LAYFLG = 1                                                               OUTFIL 102
C               WRITE SCHEDULES TO SF                                           OUTFIL 103
      CALL SCEDO(NVECT,ISCB,NSCHED,LENSCH)                                      SUBTY3  86
C               SAVE NUMBER OF DAY-SCHEDULES AND SCHEDULES.  SET                OUTFIL 105
C               POINTER FOR WEIGHTING FACTOR BLOCK AND SCHEDULES                OUTFIL 106
      ISCB   = ISCB + 1                                                         OUTFIL 107
      IWFB   = ISCB + LENSCH                                                    OUTFIL 108
C              CALCULATE CUSTOM WEIGHTING FACTORS. WRITE ALL                    CWF1     6
C              WEIGHTING FACTORS (ASHRAE AND CUSTOM) TO SF                      CWF1     7
      CALL WFO                                                                  OUTFIL 110
C              WRITE WALL-PARAMETERS BLOCK TO STANDARD FILE                     OUTFIL 111
      CALL EXPARO                                                               OUTFIL 112
C               WRITE CONSTRUCTION RECORDS TO SF                                OUTFIL 113
      IF (LAYFLG .EQ. 0)  CALL CONSTO                                           OUTFIL 114
      IF (LAYFLG .EQ. 1)  CALL LAYO                                             OUTFIL 115
C               WRITE GLASS PROPERTY RECORDS TO SF                              OUTFIL 116
      CALL GLTYPO                                                               OUTFIL 117
C               WRITE WINDOW-LAYER RECORDS TO SF                                BLIND   54
      CALL WILAYO                                                               BLIND   55
C               WRITE GEOMETRY RECORDS TO SF                                    OUTFIL 118
      CALL GEOO                                                                 OUTFIL 119
C              WRITE SHADE RECORDS TO SF                                        GEO1   328
      CALL SHADO                                                                GEO1   329
C               WRITE ATTACHMENT RECORDS TO SF                                  OUTFIL 122
      CALL ATTO(JOPWIN)                                                         OUTFIL 123
      CALL ATTO(JOPDR)                                                          OUTFIL 124
C               WRITE EXTERIOR WALL RECORDS TO SF                               OUTFIL 125
      CALL EXTWO                                                                OUTFIL 126
C               WRITE UNDERGROUND SURFACE RECORDS TO SF                         OUTFIL 127
      CALL UGO                                                                  OUTFIL 128
C               WRITE SPACE RECORDS TO STANDARD FILE                            OUTFIL 129
      CALL SPACEO                                                               OUTFIL 130
C              WRITE FLOOR RECORDS TO SF                                        ATTRF1 359
      CALL FLOORO                                                               ATTRF1 360
C               WRITE INTERIOR WALL RECORDS TO SF                               OUTFIL 131
      CALL IWO                                                                  OUTFIL 132
C               WRITE USER REPORT RECORDS TO SF                                 OUTFIL 133
      CALL RPO(IA,IA,KONTXT)                                                    COMB03  55
C               SAVE POSITION OF HOURLY REPORT DATA                             OUTFIL 135
      IHRP   = IRB + LRB                                                        OUTFIL 136
C               WRITE CURVE-FIT RECORDS TO SF                                   -045a    5
      Icv = IHRP + LHRP                                                         -045a    6
      CALL CFOUT                                                                -045a    7
      LENGTH = Icv + Max(1, Ncv*Lcv)                                            -045a    8
      IF (IFATAL .GT. 0)  GO TO 2000                                            OUTFIL 138
C              SITE-PARAMETERS                                                  ALPHA   97
      LVAL = IOPCDT(16,JOPSPR)                                                  ALPHA   98
      Lsp  = LVAL - 25  ! excluding compliance keywords                         -047fT   6
      CALL FILLN(0.,SITPAR,Lsp)                                                 -044e5   3
      IF (IOPCDT(13,JOPSPR).GT.0) THEN                                          ALPHA  100
          IRX = IOPCDT(14,JOPSPR)                                               ALPHA  101
          IDP = MVTOSM(IRX,JOPSPR,0)                                            OUT1    38
          NKW = IOPCDT(10,JOPSPR)                                               ALPHA  103
          IKW = IOPCDT(9,JOPSPR)                                                ALPHA  104
          CALL SYMFIL(ISYMTB,KONTXT(1,IKW),NKW,IA(IDP+1))                       ALPHA  105
C              INTEGER TIME-ZONE                                                ALPHA  106
          IF (ITYPLS(AA(IDP+3)).NE.ITYPLS(UNDEF(4)))                            ALPHA  107
     $        IA(IDP+3) = INT(AA(IDP+3))                                        ALPHA  108
          CALL MOVEN(AA(IDP+1),SITPAR(1),Lsp)                                   -044e5   4
          CALL REDEF(SITPAR(1),Lsp)                                             -044e5   5
      END IF                                                                    ALPHA  111
C              BUILD-PARAMETERS                                                 ALPHA  112
      LVAL = IOPCDT(16,JOPBP)                                                   ALPHA  113
      CALL FILLN(0.,BLDPAR,LVAL)                                                ALPHA  114
      IF (IOPCDT(13,JOPBP).GT.0) THEN                                           ALPHA  115
          IRX = IOPCDT(14,JOPBP)                                                ALPHA  116
          IDP = MVTOSM(IRX,JOPBP,0)                                             OUT1    39
          NKW = IOPCDT(10,JOPBP)                                                ALPHA  118
          IKW = IOPCDT(9,JOPBP)                                                 ALPHA  119
          CALL SYMFIL(ISYMTB,KONTXT(1,IKW),NKW,IA(IDP+1))                       ALPHA  120
C              INTEGER HEAT-PEAK-PERIOD AND COOL-PEAK-PERIOD                    ALPHA  121
          DO I=1,4                                                              ALPHA  122
              IA(IDP+I+3) = INT(AA(IDP+I+3))                                    ALPHA  123
          END DO                                                                ALPHA  124
          CALL MOVEN(AA(IDP+1),BLDPAR(1),LVAL)                                  ALPHA  125
          CALL REDEF(BLDPAR(1),LVAL)                                            ALPHA  126
      END IF                                                                    ALPHA  127
C              HOLIDAYS                                                         HOLID1  12
      NHL = IOPCDT(13,JOPHOL)                                                   HOLID1  13
      CALL FILLN(0,IHOLDY,120)                                                  HOLID1  14
      CALL FILLN(0,IHOLMN,120)                                                  HOLID1  15
      CALL FILLN(0,NHOLA,2)                                                     HOLID1  16
      CALL FILLN(0,IHOLTY,2)                                                    HOLID1  17
      DO IHL=1,NHL                                                              HOLID1  18
          IRX = IOPCDT(14,JOPHOL) + IHL - 1                                     HOLID1  19
          IDP = MVTOSM(IRX,JOPHOL,0)                                            HOLID1  20
          NKW = IOPCDT(10,JOPHOL)                                               HOLID1  21
          IKW = IOPCDT(9,JOPHOL)                                                HOLID1  22
          CALL SYMFIL(ISYMTB,KONTXT(1,IKW),NKW,IA(IDP+1))                       HOLID1  23
          IHOLTY(IHL) = IA(IDP+1)                                               HOLID1  24
          IF (IHOLTY(IHL).EQ.3) THEN                                            HOLID1  25
              IMNLSP = IA(IDP+2)                                                HOLID1  26
              IDYLSP = IA(IDP+3)                                                HOLID1  27
              NMN = IA(IMNLSP)                                                  HOLID1  28
              DO I=1,NMN                                                        HOLID1  29
                  IHOLMN(I,IHL) = INT(AA(IMNLSP+1+I)+0.1)                       HOLID1  30
                  IHOLDY(I,IHL) = INT(AA(IDYLSP+1+I)+0.1)                       HOLID1  31
              END DO                                                            HOLID1  32
              NHOLA(IHL) = NMN                                                  HOLID1  33
          END IF                                                                HOLID1  34
      END DO                                                                    HOLID1  35
C              COLLECT DESIGN-DAY DATA                                          OUTFIL 155
   18 CALL FILLN(0.,DDAY(1),34)                                                 DDAY1   69
      IF (NDESDY .EQ. 0)  GO TO 100                                             OUTFIL 157
      IKW = IOPCDT(9,JOPDD)                                                     DDAY1   70
      NKW = IOPCDT(10,JOPDD)                                                    DDAY1   71
      IDDH = 0                                                                  -034    58
      IDDC = 0                                                                  -034    59
      DO IDD=1,NDESDY                                                           DDAY1   72
          IRX = IOPCDT(14,JOPDD) + IDD - 1                                      DDAY1   73
          IDP = MVTOSM(IRX,JOPDD,0)                                             DDAY1   74
          CALL SYMFIL(ISYMTB,KONTXT(1,IKW),NKW,IA(IDP+1))                       DDAY1   75
          CALL REDEF(AA(IDP+1),17)                                              DDAY1   76
          IF(IA(IDP+1).EQ.1) THEN                                               -034    60
            IDDH = IDDH + 1                                                     -034    61
          ELSE                                                                  -034    62
            IDDC = IDDC + 1                                                     -034    63
          ENDIF                                                                 -034    64
          IDX0 = (IDD-1)*17                                                     -034    65
          I1 = INT(AA(IDP+10))                                                  -034    66
          I2 = INT(AA(IDP+11))                                                  -034    67
          IF(I2 .gt. IDIM(I1) )  THEN                                           -034    68
            I2 =  IDIM(I1)                                                      -034    69
          ENDIF                                                                 -034    70
          I3 = I1                                                               -034    71
          I4 = I2 + INT(AA(IDP+15)) - 1                                         -034    72
          DO I=1,12                                                             -034    73
            IF(I4 .gt. IDIM(I3))  THEN                                          -034    74
              I3 = I3 + 1                                                       -034    75
              I4 = I4 - IDIM(I3-1)                                              -034    76
              IF(I3 .gt. 12) THEN                                               -034    77
                I3 = 12                                                         -034    78
                I4 = 31                                                         -034    79
              ENDIF                                                             -034    80
            ENDIF                                                               -034    81
          ENDDO                                                                 -034    82
          IRUNPD(1,IDD) = I1                                                    -034    83
          IRUNPD(2,IDD) = I2                                                    -034    84
          IRUNPD(3,IDD) = IRUNPD(3,NDESDY+1)                                    -034    85
          IRUNPD(4,IDD) = I3                                                    -034    86
          IRUNPD(5,IDD) = I4                                                    -034    87
          IRUNPD(6,IDD) = IRUNPD(3,IDD)                                         -034    88
          CALL MOVEN(AA(IDP+1),DDAY(IDX0+1),17)                                 DDAY1   94
      END DO                                                                    DDAY1   95
C              Make sure HEATING DESIGN-DAYs are first                          -034    97
      IF(IDDH.gt.0 .AND. ITYPLS(DDAY(1)).ne.1) THEN                             -034    98
        DO II=1,6                                                               -034    99
          J            = IRUNPD(II,1)                                           -034   100
          IRUNPD(II,1) = IRUNPD(II,2)                                           -034   101
          IRUNPD(II,2) = J                                                      -034   102
        ENDDO                                                                   -034   103
        DO II=1,17                                                              -034   104
          X           = DDAY(II)                                                -034   105
          DDAY(II)    = DDAY(17+II)                                             -034   106
          DDAY(17+II) = X                                                       -034   107
        ENDDO                                                                   -034   108
      ENDIF                                                                     -034   109
      NRUNPD = NRUNPD + NDESDY                                                  DDAY1   96
  100 CONTINUE                                                                  OUTFIL 173
C                                                                               CWF1    14
C                WRITE LAST RECORD OF STANDARD FILE                             OUTFIL 174
      WRITE (ISTNDF) LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,NGEO,              OUTFIL 175
     1               NGSHAD,NEWshade,NWIN,NDOOR,NEW,NUG,NSP,NIWP,NIW,           PV2    137
     2               NFL,NWL,NRB,NHRP,NDESDY,                                   PV2    138
     3               ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,                       BLIND   58
     4               ISHADB,IWINB,IDRB,IEWB,IUGB,ISPB,IIWPB,IIWB,IFLB,          BLIND   59
     5               IWLB,IRB,IHRP,                                             BLIND   60
     6               LWF,LCONSF,LGT,LSHADE,LWNDW,LDOOR,LEW,LUG,                 BLIND   61
     6               LSPACE,LIW,LFL,LRBF,LHRF,LWINLAY,                          BIGNA2  38
     7               CLOCK,                                                     OUTFIL 182
     8               ITITLE,                                                    OUTFIL 183
     9               IREPRT,                                                    OUTFIL 184
     1               SITPAR,BLDPAR,                                             ALPHA  128
     2               DDAY,                                                      OUTFIL 186
     4               NRUNPD, IRUNPD, LDSTYP, NOTH, NITH, LMTB,                  OUTFIL 187
     5               NHOLA,IHOLTY,IHOLDY,IHOLMN,NSHTOT,                         HOLID1  36
     6               (ISPLST(I),I=1,NSP),(ISPLOC(I),I=1,NSP),                   -045a    9
     7               Icv,Ncv,Lcv                                                -045a   10
C              ---      PRINT OUT LAST RECORD FOR DEBUG                         OUTFIL 189
      IF (IREPRT(32) .NE. 1)  GO TO 2000                                        OUT1    41
      WRITE(IOUTPT,1) NDESDY,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,NWL,NGEO,         -41f    19
     1                NGSHAD,NWIN,NDOOR,NEW,NUG,NSP,NIWP,NIW,NFL,NRB,           -41f    20
     2                NHRP,LENGTH                                               -41f    21
      write(IOUTPT,2) ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IWLB,IGEOB,                 BLIND   66
     1                ISHADB,IWINB, IDRB, IEWB,                                 BLIND   67
     2                IUGB,ISPB,IIWPB,IIWB,IFLB,IRB,IHRP                        BLIND   68
      write(IOUTPT,4) LWF,LGT,LWINLAY,LSHADE,LWNDW,LDOOR,LEW,LUG,LSPACE,        BLIND   69
     1                LIW,LFL,LRBF,LHRF,LDSTYP,NOTH,NITH,LMTB,NSHTOT            BLIND   70
      write(IOUTPT,5) Icv,Ncv,Lcv                                               -045a   11
      CALL DUMPIT(20HISPLST               ,ISPLST(1),NSP)                       CWF3     3
      CALL DUMPIT(20HISPLOC               ,ISPLOC(1),NSP)                       -41f    22
      CALL DUMPIT(20HLOADS-REPORT        ,IREPRT,37)                            OUTFIL 198
      CALL DUMPIT(20HSITE-PARAMETERS     ,SITPAR,71)                            ALPHA  129
      CALL DUMPIT(20HBUILD-PARAMETERS    ,BLDPAR,26)                            ALPHA  130
      CALL DUMPIT(20HDESIGN-DAY          ,DDAY(1),34)                           DDAY1   97
      CALL DUMPIT(20HHOLIDAYS            ,IHOLS(1),244)                         HOLID1  38
      WRITE(IOUTPT,3,ERR=99013) (CLOCK(I),I=1,7),ICLOCK8                        PC     241
99013 CONTINUE                                                                  OUTFIL 203
      CALL DUMPIT(20HRUN-PERIOD          ,IRUNPD,NRUNPD*6)                      OUTFIL 204
    1 FORMAT(///                                                                BLIND   71
     1' NDESDY=',I5,' NVECT= ',I5,' NSCHED=',I5,' NWF=   ',I5,                  -41f    23
     1' NWPAR= ',I5,' NCONS= ',I5,' NGT=   ',I5,' NWL=   ',I5/                  BLIND   73
     2' NGEO=  ',I5,' NGSHAD=',I5,' NWIN=  ',I5,' NDOOR= ',I5,                  BLIND   74
     2' NEW=   ',I5,' NUG=   ',I5,' NSP=   ',I5,' NIWP=  ',I5/                  BLIND   75
     3' NIW=   ',I5,' NFL=   ',I5,' NRB=   ',I5,' NHRP=  ',I5,                  BLIND   76
     3' LENGTH=',I8)                                                            -41f    24
    2 FORMAT(                                                                   BLIND   78
     4' ISCB=  ',I7,' IWFB=  ',I7,' IWPB=  ',I7,' ICB1=  ',I7/                  -41f    25
     4' ICB2=  ',I7,' IGTB=  ',I7,' IWLB=  ',I7,' IGEOB= ',I7/                  -41f    26
     5' ISHADB=',I7,' IWINB= ',I7,' IDRB=  ',I7,' IEWB=  ',I7/                  -41f    27
     5' IUGB=  ',I7,' ISPB=  ',I7,' IIWPB= ',I7,' IIWB=  ',I7/                  -41f    28
     6' IFLB=  ',I7,' IRB=   ',I7,' IHRP=  ',I7)                                -41f    29
    4 FORMAT(                                                                   BLIND   84
     7' LWF=   ',I5,' LGT=   ',I5,' LWINL= ',I5,' LSHADE=',I5,                  BLIND   85
     7' LWNDW= ',I5,' LDOOR= ',I5,' LEW=   ',I5,' LUG=   ',I5/                  BLIND   86
     8' LSPACE=',I5,' LIW=   ',I5,' LFL=   ',I5,' LRBF=  ',I5,                  BLIND   87
     8' LHRF=  ',I5,' LDSTYP=',I5,' NOTH=  ',I5,' NITH=  ',I5/                  BLIND   88
     9' LMTB=  ',I5,' NSHTOT=',I5)                                              BLIND   89
    3 FORMAT(//10X,7A4,4H RUN,I2)                                               OUTFIL 223
    5 FORMAT(//'Icv,Ncv,Lcv:',3I10)                                             -045a   12
 2000 CONTINUE                                                                  OUTFIL 252
      RETURN                                                                    OUTFIL 253
      END                                                                       OUTFIL 254
      SUBROUTINE POLIN3(X1A,X2A,X3A,YA,X1,X2,X3,Z,DZ)                           POLIN3   2
C                                                                               POLIN3   3
C              3-D POLYNOMIAL INTERPOLATION.                                    POLIN3   4
C              (ADAPTED FROM NUMERICAL RECIPES,                                 POLIN3   5
C              CAMBRIDGE UNIV. PRESS, 1985, P. 97)                              POLIN3   6
C                                                                               POLIN3   7
C              X1A,X2A,X3A = ARRAYS OF INDEPENDENT VARIABLES                    POLIN3   8
C              YA = ARRAY OF FUNCTION VALUES AT GRID POINTS DEFINED             POLIN3   9
C                   BY X1A,X2A,X3A                                              POLIN3  10
C              X1,X2,X3 = INDEPENDENT VARIABLES                                 POLIN3  11
C              Z = INTERPOLATED FUNCTION AT (X1,X2,X3)                          POLIN3  12
C              DZ = ACCURACY INDICATOR                                          POLIN3  13
C                                                                               POLIN3  14
      DIMENSION X1A(3),X2A(3),X3A(3),YA(3,3,3),YNTMP(3),YMTMP(3),               POLIN3  15
     1          YLTMP(3)                                                        POLIN3  16
C                                                                               POLIN3  17
      DO L = 1,3                                                                POLIN3  18
         DO J = 1,3                                                             POLIN3  19
            DO K = 1,3                                                          POLIN3  20
               YNTMP(K) = YA(J,K,L)                                             POLIN3  21
            ENDDO                                                               POLIN3  22
            CALL POLINT(X2A,YNTMP,X2,YMTMP(J),DY)                               POLIN3  23
         ENDDO                                                                  POLIN3  24
         CALL POLINT(X1A,YMTMP,X1,YLTMP(L),DY)                                  POLIN3  25
      ENDDO                                                                     POLIN3  26
      CALL POLINT(X3A,YLTMP,X3,Z,DZ)                                            POLIN3  27
      RETURN                                                                    POLIN3  28
      END                                                                       POLIN3  29
      SUBROUTINE POLINT(XA,YA,X,Y,DY)                                           POLINT   2
C                                                                               POLINT   3
C              1-D POLYNOMIAL INTERPOLATION. (FROM NUMERICAL                    POLINT   4
C              RECIPES, CAMBRIDGE UNIV. PRESS, 1985, P. 82)                     POLINT   5
C                                                                               POLINT   6
C              XA = ARRAY OF INDEPENDENT VARIABLES                              POLINT   7
C              YA = ARRAY OF FUNCTION VALUES AT POINTS DEFINED BY XA            POLINT   8
C              X = INDEPENDENT VARIABLE                                         POLINT   9
C              Y = INTERPOLATED FUNCTION AT X                                   POLINT  10
C              DY = ERROR ESTIMATE                                              POLINT  11
C                                                                               POLINT  12
      DIMENSION XA(3),YA(3),C(3),D(3)                                           POLINT  13
      NS = 1                                                                    POLINT  14
      DIF = ABS(X-XA(1))                                                        POLINT  15
      DO 11 I=1,3                                                               POLINT  16
         DIFT = ABS(X-XA(I))                                                    POLINT  17
         IF(DIFT.LT.DIF) THEN                                                   POLINT  18
            NS = I                                                              POLINT  19
            DIF = DIFT                                                          POLINT  20
         ENDIF                                                                  POLINT  21
         C(I) = YA(I)                                                           POLINT  22
         D(I) = YA(I)                                                           POLINT  23
   11 CONTINUE                                                                  POLINT  24
      Y = YA(NS)                                                                POLINT  25
      NS = NS-1                                                                 POLINT  26
      DO 13 M=1,2                                                               POLINT  27
      DO 12 I=1,3-M                                                             POLINT  28
         HO = XA(I) - X                                                         POLINT  29
         HP = XA(I+M) - X                                                       POLINT  30
         W  = C(I+1) - D(I)                                                     POLINT  31
         DEN = HO - HP                                                          POLINT  32
         DEN = W/DEN                                                            POLINT  33
         D(I) = HP*DEN                                                          POLINT  34
         C(I) = HO*DEN                                                          POLINT  35
   12 CONTINUE                                                                  POLINT  36
      IF((2*NS).LT.(3-M)) THEN                                                  POLINT  37
         DY = C(NS+1)                                                           POLINT  38
      ELSE                                                                      POLINT  39
         DY = D(NS)                                                             POLINT  40
         NS = NS - 1                                                            POLINT  41
      ENDIF                                                                     POLINT  42
      Y = Y + DY                                                                POLINT  43
   13 CONTINUE                                                                  POLINT  44
      RETURN                                                                    POLINT  45
      END                                                                       POLINT  46
      SUBROUTINE PTRS(JOP,I,IRX,IDP,IAVP)                                       PTRS     2
C                                                                               PTRS     3
C              CALCULATES REF TABLE PTR (IRX), DATA POINTER (IDP)               PTRS     4
C              AND VALUE POINTER (IAVP) FOR OCCURRENCE I OF COMMAND JOP         PTRS     5
C                                                                               PTRS     6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
C                                                                               PTRS    10
      IRX =  IOPCDT(14,JOP) + I - 1                                             PTRS    11
      IDP =  IREFTB(2,IRX)                                                      PTRS    12
      IAVP = IDP + IOPCDT(17,JOP) + 2*IOPCDT(16,JOP)                            PTRS    13
      RETURN                                                                    PTRS    14
      END                                                                       PTRS    15
      SUBROUTINE POLYD(JREF,JOPCDT,LKDAT,NAMPTR,LSDPTR,LKPTR,Iphase)            DFTEX3 834
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
C                                                                               POLYI    9
      NSAVE = IOPCDT(17,JOPCDT)                                                 OPLST1 352
      IKW    = IOPCDT(9 ,JOPCDT)                                                POLYI   10
      NKW    = IOPCDT(10,JOPCDT)                                                POLYI   11
      LVAL   = IOPCDT(16,JOPCDT)                                                POLYI   12
      IAXS = IREFTB(2,JREF)                                                     DEF2   201
      IAVPT1 = IAXS + NSAVE                                                     DEF2   202
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,JOPCDT)                                 DEF2   203
      IF(Iphase .ne. 2)  THEN                                                   DFTEX3 835
        CALL LSDFIL(JOPCDT,ISYMTB,KONTXT(1,IKW),NKW,AA(IAVPT1+1),               DFTEX3 836
     $              AA(LKDAT+1),LSDPTR,ISYMTB(1,LKPTR),NAMPTR,LVAL)             DFTEX3 837
        IF(Iphase .eq. 1) RETURN                                                DFTEX3 838
      ENDIF                                                                     DFTEX3 839
      IAVPTR = IAVPT1 + 2*LVAL                                                  DEF2   206
      NVERT = 0                                                                 DEF2   207
      DO I=1,NKW                                                                DEF2   208
          IK = IKW + I -1                                                       DEF2   209
          IVP = KONTXT(12,IK)                                                   DEF2   210
          IF (NOVAL(AA(IAVPTR+IVP)).EQ.0) GO TO 100                             DEF2   211
          NVERT = I                                                             DEF2   212
      END DO                                                                    DEF2   213
  100 IA(IAXS+1) = NVERT                                                        DEF2   214
      IF ( NVERT .GE. 3 )    GOTO  610                                          POLYI   34
C--------- ERROR : LESS THAN THREE VERTICES INPUT                               POLYI   35
          GOTO  801                                                             POLYI   36
610   CONTINUE                                                                  POLYI   37
C                                                                               POLYI   38
C---- MAKE SURE POINTS ARE CCW                                                  POLYI   39
C                                                                               POLYI   40
      CALL POLYICK(IA(IAXS+1),AA(IAVPTR+1),AREA,PERIM,0,IERRFL)                 DEF2   215
      IF ( AREA .GT. 0 )     GOTO  620                                          POLYI   42
C--------- ERROR : VERTICES ARE NOT COUNTER-CLOCKWISE                           POLYI   43
          GOTO  802                                                             POLYI   44
620   IF ( IERRFL .EQ. 0 )   GOTO  630                                          POLYI   45
C--------- ERROR : TWO VERTICES IDENTICAL                                       POLYI   46
          GOTO  803                                                             POLYI   47
630   CONTINUE                                                                  POLYI   48
      RETURN                                                                    POLYI   49
C                                                                               POLYI   50
C--------- ERROR : LESS THAN THREE VERTICES INPUT                               POLYI   51
801   CONTINUE                                                                  POLYI   52
       CALL  MSG( 101 )                                                         POLYI   53
      GOTO  610                                                                 POLYI   54
C--------- ERROR : VERTICES ARE NOT COUNTER-CLOCKWISE                           POLYI   55
802   CONTINUE                                                                  POLYI   56
       CALL  MSG( 102 )                                                         POLYI   57
      GOTO  620                                                                 POLYI   58
C--------- ERROR : TWO VERTICES IDENTICAL                                       POLYI   59
803   CONTINUE                                                                  POLYI   60
       CALL  MSG( 103 )                                                         POLYI   61
      GOTO  630                                                                 POLYI   62
      END                                                                       POLYI   63
      SUBROUTINE  POLYICK ( NVERT, XYZ, AREA, PERIM, KPERIM, IERRFL )           GEO1   335
C                                                                               GEO1   336
C---- CALCULATE POLYGON AREA AND PERIMETER (IF KPERIM = 1)                      GEO1   337
C                                                                               POLYI   67
      REAL  XYZ(3,NVERT)                                                        POLYI   68
C                                                                               POLYI   69
C---- COMPUTE AREA , ASSUME VERTICES ARE ORDERED CCW                            POLYI   70
C                                                                               POLYI   71
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      ZCOMP  = 0.0                                                              POLYI   72
      PERIM = 0.0                                                               GEO1   338
      AREA  = 0.0                                                               FIX8    65
      IERR  = 0                                                                 FIX8    66
C              Check for invalid points and return with error if any            FIX8    67
      DO I=1,NVERT                                                              FIX8    68
        IF( (NOVAL(XYZ(1,I)).EQ.0) .or. (NOVAL(XYZ(2,I)).EQ.0) )  THEN          FIX8    69
          IERR = 1                                                              FIX8    70
          XYZ(1,I) = UNDEF(1)                                                   FIX8    71
        ENDIF                                                                   FIX8    72
      ENDDO                                                                     FIX8    73
      IF(IERR .NE. 0)  RETURN                                                   FIX8    74
      X0     = XYZ(1,NVERT)                                                     POLYI   73
      Y0     = XYZ(2,NVERT)                                                     POLYI   74
      IERRFL = 0                                                                ALPHA  133
      DO  200  I = 1 , NVERT                                                    POLYI   76
      IF(KPERIM.EQ.1.AND.I.NE.NVERT) PERIM = PERIM +                            GEO1   339
     1   SQRT( (XYZ(1,I+1)-XYZ(1,I))**2 + (XYZ(2,I+1)-XYZ(2,I))**2 )            GEO1   340
C                                                                               POLYI   77
          DO 300 J = 1 , NVERT                                                  POLYI   78
          IF (J.EQ.I) GO TO 300                                                 POLYI   79
C---- SET ERROR FLAG IF TWO VERTICES IDENTICAL                                  POLYI   80
          IF ( XYZ(1,I).EQ.XYZ(1,J).AND.XYZ(2,I).EQ.XYZ(2,J) )                  POLYI   81
     1     IERRFL = 1                                                           POLYI   82
  300     CONTINUE                                                              POLYI   83
      X1    = XYZ(1,I)                                                          POLYI   84
      Y1    = XYZ(2,I)                                                          POLYI   85
      ZCOMP = ZCOMP + X0*Y1 - X1*Y0                                             POLYI   86
      X0    = X1                                                                POLYI   87
      Y0    = Y1                                                                POLYI   88
  200 CONTINUE                                                                  POLYI   89
      IF(KPERIM.EQ.1) PERIM = PERIM +                                           GEO1   341
     1   SQRT( (XYZ(1,NVERT)-XYZ(1,1))**2 +                                     GEO1   342
     2         (XYZ(2,NVERT)-XYZ(2,1))**2 )                                     GEO1   343
      AREA = 0.5*ZCOMP                                                          POLYI   90
C                                                                               POLYI   91
9000  CONTINUE                                                                  POLYI   92
      RETURN                                                                    POLYI   93
      END                                                                       POLYI   94
      SUBROUTINE RFWRIT(ILIBF,IRF)                                              RFWRIT   2
C                                                                               RFWRIT   3
C               PRINT RESPONSE FACTORS                                          RFWRIT   4
C                                                                               RFWRIT   5
C               RFWRIT USES WORDS 51 AND 52 OF COMMWK                           RFWRIT   6
C                                                                               RFWRIT   7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LYVALX/ IIFRP, IMATST, ITHST, INRFP,                             /LYVALX/ 2
     1                 IUP, ICOMRP, NLAY                                        /LYVALX/ 3
      COMMON  /RED/   MRF, U, NRF, COMR, SRFX, SRFY, SRFZ, RFX(105),            /RED/    2
     1                RFY(105), RFZ(105)                                        /RED/    3
C                                                                               RFWRIT  14
      EQUIVALENCE (IX,COMMWK(51)),(M,COMMWK(52))                                RFWRIT  15
C                                                                               RFWRIT  16
C                                                                               RFWRIT  17
      IF (ILIBF .EQ. 0 .OR. ILIBF .EQ. 2)  WRITE(IOUTPT,9005)                   RFWRIT  18
      IF (ILIBF .EQ. 1)  WRITE(IOUTPT,9006)                                     RFWRIT  19
      WRITE(IOUTPT,9007)                                                        RFWRIT  20
      NRF    = IA(IRF+INRFP)                                                    RFWRIT  21
      IX     = IRF + 6                                                          RFWRIT  22
      DO 200 I=1,NRF                                                            RFWRIT  23
      M      = I - 1                                                            RFWRIT  24
      WRITE(IOUTPT,9008) M, AA(IX+3*I-2), AA(IX+3*I-1), AA(IX+3*I)              RFWRIT  25
  200 CONTINUE                                                                  RFWRIT  26
      IF (ILIBF .LE. 1) WRITE(IOUTPT,9009) AA(IRF+ICOMRP), AA(IRF+IUP)          RFWRIT  27
      IF (ILIBF .EQ. 2)  WRITE(IOUTPT,9010) AA(IRF+ICOMRP), AA(IRF+IUP),        RFWRIT  28
     1                               AA(IRF+3*NRF+7)                            RFWRIT  29
 9005 FORMAT(/15X,31H  RESPONSE FACTORS FROM LIBRARY )                          RFWRIT  30
 9006 FORMAT(/15X,36H  RESPONSE FACTORS CALCULATED BY LDL )                     RFWRIT  31
 9007 FORMAT(1H ,9X,4HHOUR,11X,1HX,14X,1HY,14X,1HZ)                             RFWRIT  32
 9008 FORMAT(1H ,9X,I3,3X,3(1X,F14.10))                                         RFWRIT  33
 9009 FORMAT(/1H ,15X,15HCOMMON RATIO = ,F15.10,15X,                            RFWRIT  34
     1       10HU-VALUE = ,F15.10/)                                             RFWRIT  35
 9010 FORMAT(//1H ,15X,15HCOMMON RATIO = ,F15.10,15X,10HU-VALUE = ,             RFWRIT  36
     1       F15.10/1H ,5X,25HINSIDE FILM RESISTANCE = ,F7.2/)                  RFWRIT  37
      RETURN                                                                    RFWRIT  38
      END                                                                       RFWRIT  39
      SUBROUTINE SCHTYP                                                         SCHTYP   2
C                                                                               SCHTYP   3
C              CHECK THAT SCHEDULES' TYPES MATCH THEIR D-SCH TYPES              SCHTYP   4
C                                                                               SCHTYP   5
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
C                                                                               SCHTYP  11
C              LOOP OVER ALL SCHEDULES                                          SCHTYP  12
      JKWcur = 0                                                                -044c3   9
      NS = IOPCDT(13,1)                                                         SCHTYP  13
      IF (NS.EQ.0) GO TO 3000                                                   FIX4     2
      LVS = IOPCDT(16,1)                                                        SCHTYP  14
      LVWS = IOPCDT(16,2)                                                       SCHTYP  15
      LVDS = IOPCDT(16,3)                                                       SCHTYP  16
      DO 1000 IS=1,NS                                                           FIX4     3
          ITYPDS = 0                                                            SCHTYP  18
          IRXS = IOPCDT(14,1) + IS - 1                                          SCHTYP  19
          IVXS = IREFTB(2,IRXS) + IOPCDT(17,1) + 2*LVS                          SCHTYP  20
          ISXS = IREFTB(1,IRXS)                                                 SCHTYP  21
          JOPcur  = 1                                                           FIX14  233
          JREFcur = IRXS                                                        FIX14  234
C              THE TYPE IS                                                      SCHTYP  22
          ITYPE = IA(IVXS+1)                                                    SCHTYP  23
          IF (NOVAL(ITYPE).EQ.0 .OR. ITYPLS(ITYPE).EQ.0) GO TO 1000             FIX4     4
C              LOOP OVER ALL WEEK SCHEDULES IN THIS SCHEDULE                    SCHTYP  24
          IWSLX = IA(IVXS+5)                                                    SCHTYP  25
          IF (NOVAL(IWSLX).EQ.0) GO TO 1000                                     FIX11  447
          NWS = IA(IWSLX)                                                       SCHTYP  26
          IF (NWS.EQ.0) GO TO 1000                                              FIX4     5
          DO 500 IWS=1,NWS                                                      FIX4     6
              ISXWS = IA(IWSLX+1+IWS)                                           SCHTYP  28
              IF (NOVAL(ISXWS).EQ.0 .OR. ITYPLS(ISXWS).EQ.0) GO TO 500          FIX4     7
              IWSNUM = ISYMTB(12,ISXWS)                                         SCHTYP  29
              IRXWS = IOPCDT(14,2) + IWSNUM - 1                                 SCHTYP  30
              IVXWS = IREFTB(2,IRXWS) + IOPCDT(17,2) + 2*LVWS                   SCHTYP  31
C              LOOP OVER ALL THE DAY-SCHEDULES IN THIS WEEK SCHEDULE            SCHTYP  32
              DO 100 IDS=1,8                                                    FIX4     8
                  ISXDS = IA(IVXWS+IDS+1)                                       FIX11  448
                  IF (NOVAL(ISXDS).EQ.0.OR.ITYPLS(ISXDS).EQ.0) GO TO 100        FIX4     9
                  IDSNUM = ISYMTB(12,ISXDS)                                     SCHTYP  35
                  IRXDS = IOPCDT(14,3) + IDSNUM - 1                             SCHTYP  36
                  IVXDS = IREFTB(2,IRXDS) + IOPCDT(17,3) + 2*LVDS               SCHTYP  37
C              CHECK THAT THE TYPES ARE EQUAL                                   SCHTYP  38
                  ITYPED = IA(IVXDS+1)                                          SCHTYP  39
                  IF (ITYPLS(ITYPE).NE.ITYPLS(ITYPED) .AND.                     FIX4    10
     1                ITYPLS(ITYPED).NE.ITYPLS(ITYPDS)) THEN                    FIX4    11
                      CALL MSG2(123,ISYMTB(1,ISXDS),ISYMTB(1,ISXS),             ERR-01 705
     $                              II,II)                                      ERR-01 706
                  END IF                                                        SCHTYP  44
                  ITYPDS = ITYPED                                               SCHTYP  45
  100         CONTINUE                                                          FIX4    12
  500     CONTINUE                                                              FIX4    13
 1000 CONTINUE                                                                  FIX4    14
      JOPcur  = 0                                                               FIX14  235
      JREFcur = 0                                                               FIX14  236
 3000 RETURN                                                                    FIX4    15
      END                                                                       SCHTYP  52
      SUBROUTINE SPACECU(ICALL,IAVPSP,ISP,IRXSP,IAVPLTG,ILS,CU)                 FIX4    16
C                                                                               SPACECU  3
C              CALLED BY SPACELTG.                                              SPACECU  4
C              CALCULATES COEFFICIENT OF UTILIZATION , CU, FOR A                SPACECU  5
C              LUMINAIRE BY INTERPOLATION ON A TABLE OF CU VALUES               SPACECU  6
C              FOR THE LUMINAIRE. THE INTERPOLATION USES CALCULATED             SPACECU  7
C              VALUES OF THE SPACE'S CEILING CAVITY REFLECTANCE, WALL           SPACECU  8
C              REFLECTANCE AND ROOM CAVITY RATIO.                               SPACECU  9
C                                                                               SPACECU 10
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /SPVALX/ IHP, IAP, IVP, ISHPP, IWP, IDPTHP, ISCP, IPRCAP,         /SPVALX/ 2
     1                 IWFP, ILTP, IINFMP, INZHP, IPLP, IPSP, ILKWP,            /SPVALX/ 3
     2                 ITKWP, IEKWP, IPAP, ILWSFP, ITWSFP, IPOLSP,              GEO4     1
     3                 IEQWFP, KWH, KWA, KWV, KWSHP, KWW, KWDPTH,               /SPVALX/ 5
     4                 KWSC, KWLT, KWINFM, KWNZH, KWPL, KWPS,                   /SPVALX/ 6
     5                 KWLKW, KWTKW, KWEKW, KWPA, KWLWSF, KWTWSF,               /SPVALX/ 7
     6                 KWEWSF, IFURTP, IFURFP, IFURWP, IFLRWP, KWWF,            /SPVALX/ 8
     7                 KWFLRW,ILTSP,NINFKY,INFKYP(20),DEFINF(10,4),             LTSYS1   2
     8                 ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM,             DFTEXP 197
     9                 ISPLOCP,ISPDIS,NSPDIS                                    DFTEXP 198
      COMMON /GTVALX/ IGTCP,ISHCP,ICONP,IVTP,IGPCALC,IVTSWP,ISC1P,              -44d5    1
     1                ISC2P,ISS1P,ISS2P,IFTC,ISTC,IFABS,                        /GTVALX/ 3
     2                KWGTC,KWSHC,KWVT,KWSHSW,KWVTSW,KWSC1,KWSC2,               SUBTY8   3
     3                KWSS1,KWSS2,KWFTC,KWSTC,KWFABS,                           WLIB1    2
     4                IUCENTR,IHCOUT,IHROUT,IHIN,ITRANG,IABSANG,ITVANG,         WLIB1    3
     5                INLAYER,IRBVIS,IRBHEMI,ISHDCOF,IGPTHCK,IW3TIR,            WLIB1    4
     6                IEMBIR,IEMFIR,IGPCOND,IGPDCON,IGPVIS,IGPDVIS,             WLIB1    5
     7                IGPDENS,IGPDDEN,IGPPR,IGPDPR,ICOND                        WLIB1    6
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON /LMVALX/                                                           /LMVALX/ 2
     1  ILUMTYP,ILMPTYP,ILMPNO,IBALTYP,ILTGCU,IRADFR,ILUMOUT,IPOWIN,            /LMVALX/ 3
     2  IRCR0,IRCR5,IRCR10,IMAXLMP,ICONFIG,IACCAT,IACCONF,                      /LMVALX/ 4
     3  ILMPCAT,ILMPLUM,ILMPPOW,ILMPDPR,ACF(9,6),PCF(9,6)                       /LMVALX/ 5
      LOGICAL INSP                                                              SPACECU 23
C                                                                               SPACECU 24
      DIMENSION RHOCCA(3), RHOWA(3), RCRA(3), CUA(3,3,3)                        SPACECU 25
      DIMENSION RHOFA(3), CORRA(3,3,3)                                          SPACECU 26
C              REFERENCE VALUES FOR CEILING CAVIITY REFL                        SPACECU 27
      DATA RHOCCA/0.30,0.50,0.80/                                               SPACECU 28
C              REFERENCE VALUES FOR WALL REFLECTANCE                            SPACECU 29
      DATA RHOWA /0.10,0.30,0.50/                                               SPACECU 30
C              REFERENCE VALUES FOR ROOM CAVITY RATIO                           SPACECU 31
      DATA RCRA  /1.,  5.,  10. /                                               SPACECU 32
C              REFERENCE VALUES FOR FLOOR REFLECTANCE                           SPACECU 33
      DATA RHOFA /0.10,0.20,0.30/                                               SPACECU 34
C              CORRECTION FACTORS FOR FLOOR REFL OTHER THAN 0.2                 SPACECU 35
C                  RCR = 1; RCC = .3,.5,.8; RHOF = .1,.2,.3                     SPACECU 36
      DATA CORRA /.973,.956,.929,1.00,1.00,1.00,1.028,1.049,1.082,              SPACECU 37
C                  RCR = 5; RCC = .3,.5,.8; RHOF = .1,.2,.3                     SPACECU 38
     1            .981,.975,.964,1.00,1.00,1.00,1.020,1.027,1.038,              SPACECU 39
C                  RCR = 10;RCC = .3,.5,.8; RHOF = .1,.2,.3                     SPACECU 40
     2            .986,.984,.980,1.00,1.00,1.00,1.015,1.017,1.022 /             SPACECU 41
C                                                                               SPACECU 42
      DIMENSION BLDDI(6), ALDDIJ(6,5)                                           SPACECU 43
C              LUMINAIRE MAINTENANCE CATEG FOR DIRT DEPRECN                     SPACECU 44
      DATA BLDDI /.69, .62, .70, .72, .53, .88/                                 SPACECU 45
C              OPERATING ATMOSPH FACTORS FOR DIRT DEPRECN                       SPACECU 46
      DATA ALDDIJ                                                               SPACECU 47
C              VERY CLEAN                                                       SPACECU 48
     1           /.038,.033,.079,.070,.078,.076,                                SPACECU 49
C              CLEAN                                                            SPACECU 50
     2            .071,.068,.106,.131,.128,.145,                                SPACECU 51
C              MEDIUM                                                           SPACECU 52
     3            .111,.102,.143,.216,.190,.218,                                SPACECU 53
C              DIRTY                                                            SPACECU 54
     4            .162,.147,.184,.314,.249,.284,                                SPACECU 55
C              VERY DIRTY                                                       SPACECU 56
     5            .301,.188,.236,.452,.321,.396 /                               SPACECU 57
C                                                                               SPACECU 58
C              SUM OF AREA*REFL FOR WALL SECTIONS                               SPACECU 59
      RHOW = 0.                                                                 SPACECU 60
C              SUM OF AREA*REFL FOR CEILING SECTIONS                            SPACECU 61
      RHOC = 0.                                                                 SPACECU 62
C              SUM OF AREA*REFL FOR FLOOR SECTIONS                              SPACECU 63
      RHOF = 0.                                                                 SPACECU 64
C              WALL, CEILING, FLOOR AREA                                        SPACECU 65
      ATW  = 0.                                                                 SPACECU 66
      ATC  = 0.                                                                 SPACECU 67
      ATF  = 0.                                                                 SPACECU 68
C                                                                               SPACECU 69
C              INDICATOR FOR FIRST FLOOR SECTION                                SPACECU 70
      IFL1 = 0                                                                  SPACECU 71
C              FLOOR LENGTH AND WIDTH FOR CU CALC                               SPACECU 74
C              INITIALIZE ROOM CAVITY LENGTH AND WIDTH using W&D or             DFTEX3 840
C              TO SQUARE ROOT OF SPACE AREA; FOR ICALL=2 MAY BE MODIFIED        DFTEX3 841
C              TO FLOOR SECTION DIMENSIONS                                      DFTEX3 842
      IF(NOVAL(AA(IAVPSP+11)).NE.0 .and. NOVAL(AA(IAVPSP+12)).NE.0) THEN        DFTEX3 843
         ROOML = AA(IAVPSP+11)                                                  DFTEX3 844
         ROOMW = AA(IAVPSP+12)                                                  DFTEX3 845
         IFL1 = 1                                                               DFTEX3 846
      ELSE                                                                      DFTEX3 847
         ROOML = SQRT(AA(IAVPSP+IAP))                                           DFTEX3 848
         ROOMW = ROOML                                                          DFTEX3 849
      ENDIF                                                                     DFTEX3 850
      IF(ICALL.EQ.1) THEN                                                       LTSYS4   7
         RHOCC = 0.7                                                            LTSYS4   8
         RHOW = 0.5                                                             LTSYS4   9
         RHOF = 0.2                                                             LTSYS4  10
         GO TO 8000                                                             LTSYS4  11
      ENDIF                                                                     LTSYS4  12
C                                                                               SPACECU 80
C              EXTERIOR WALLS                                                   SPACECU 81
C                                                                               SPACECU 82
      DO 1000 IEW = 1,NEW                                                       SPACECU 83
      CALL PTRS(JOPEW,IEW,IRXEW,IDPEW,IAVPEW)                                   SPACECU 84
      IF(IREFTB(4,IRXEW).NE.IRXSP) GO TO 1000                                   SPACECU 85
C              INITIALIZE TOTAL WINDOW AND DOOR AREA IN THIS WALL               SPACECU 86
      AWTW   = 0.                                                               SPACECU 87
      ADTW   = 0.                                                               SPACECU 88
C              IWFC = 1(WALL), 2(FLOOR), 3(CEILING)                             SPACECU 89
C              FLAG IN NSAVE AREA IS 0(WALL), 1(FLOOR), 2(CEILING)              SPACECU 90
C              3(TROMBE WALL NV), 4(TROMBE WALL V)                              SPACECU 91
      IWFC = IA(IDPEW+3) + 1                                                    SPACECU 92
C              SET WFC FLAG FOR TROMBE WALL TO "WALL"                           SPACECU 93
      IF(IA(IDPEW+3).EQ.3.OR.IA(IDPEW+3).EQ.4) IWFC = 1                         SPACECU 94
C              GROSS AREA                                                       SPACECU 95
      IPOLYF = 21                                                               SPACECU 96
      IF( NOVAL(AA(IAVPEW+IPOLYF)).EQ.0 )  THEN                                 FIX8    75
C              RECTANGLE                                                        SPACECU 99
         AEW = AA(IAVPEW+16)*AA(IAVPEW+17)                                      SPACECU100
C              FLOOR LENGTH AND WIDTH FOR CU CALC                               SPACECU101
         IF(IWFC.EQ.2.AND.IFL1.EQ.0.AND.AA(IAVPEW+11).EQ.1.) THEN               SPACECU102
            IFL1 = 1                                                            SPACECU103
            ROOML = AA(IAVPEW+16)                                               SPACECU104
            ROOMW = AA(IAVPEW+17)                                               SPACECU105
         ENDIF                                                                  SPACECU106
      ELSE                                                                      SPACECU107
C              POLYGON                                                          SPACECU108
         IPOLYN = ISYMTB(12,IA(IAVPEW+IPOLYF))                                  SPACECU109
         CALL PTRS(40,IPOLYN,IRXPOL,IDATX,IAVPOLY)                              SPACECU110
         CALL POLYICK(IA(IDATX+1),AA(IAVPOLY+1),AEW,PERIM,0,IERRFL)             LTSYS    7
      ENDIF                                                                     SPACECU112
C              GROSS AREA (INCLUDING WINDOWS AND DOORS)                         SPACECU113
C              AFTER WALL MULTIPLIER                                            SPACECU114
      AEWGR = AEW*AA(IAVPEW+11)                                                 SPACECU115
C                                                                               SPACECU116
C              WINDOWS                                                          SPACECU117
C                                                                               SPACECU118
C              SKIP TROMBE WALLS                                                SPACECU119
      IF(IA(IDPEW+3).GT.2) GO TO 1900                                           SPACECU120
      DO 1800 IWIN = 1,NWIN                                                     SPACECU121
      CALL PTRS(JOPWIN,IWIN,IRXWIN,IDPWIN,IAVPWI)                               SPACECU122
C             If not in this SPACE or no GLASS-TYPE skip                        DFTEX3 851
      IF(IREFTB(4,IRXWIN).ne.IRXEW .OR.                                         DFTEX3 852
     $   NOVAL(IA(IAVPWI+1)).eq.0) GO TO 1800                                   DFTEX3 853
C              AREA = WINMUL*WALLMUL*WINAREA                                    SPACECU124
      AWIN = AMAX1(0.01,AA(IAVPWI+10)*AA(IAVPEW+11)*                            SPACECU125
     1                     AA(IAVPWI+14)*AA(IAVPWI+15))                         SPACECU126
      AWTW   = AWTW + AWIN                                                      SPACECU127
C              GLASS TYPE                                                       SPACECU128
      NGTY = ISYMTB(12,IA(IAVPWI+1))                                            SPACECU129
      CALL PTRS(JOPGT,NGTY,IRXGT,IDPGT,IAVPGT)                                  SPACECU130
      IF(NOVAL(IA(IAVPGT+IGTCP)).NE.0) THEN                                     DFTEX3 854
C              GLASS IS FROM WINDOW LIB; INCR AREA*BACK-REFL                    SPACECU132
         NGTC = ISYMTB(12,IA(IAVPGT+2))                                         SPACECU133
         CALL PTRS(JOPGTC,NGTC,IRXGTC,IDPGTC,IAVPGTC)                           SPACECU134
         RHOWIN = AWIN*AA(IAVPGTC+131)                                          SPACECU135
      ELSE IF(NOVAL(IA(IAVPGT+ISHCP)).EQ.0)  THEN                               DFTEX3 855
         RHOWIN = AWIN*(0.5-0.35*1.0)                                           DFTEX3 856
      ELSE                                                                      SPACECU136
C              GLASS HAS SHADING COEF SPECIFIED.                                SPACECU137
C              INCREMENT AREA*BACK-REFLECTANCE (WHERE BACK REFLECTANCE          SPACECU138
C              IS APPROXIMATED AS 0.5-0.35*SC, BASED ON CORRELATION             SPACECU139
C              FROM WINDOW LIBRARY WHICH IS OK FOR NON-TINTED GLAZING           SPACECU140
C              BUT IS ABOUT 2X TOO HIGH FOR TINTED GLAZING).                    SPACECU141
         RHOWIN = AWIN*(0.5-0.35*AA(IAVPGT+3))                                  SPACECU142
      ENDIF                                                                     SPACECU143
      IF(IWFC.EQ.1) RHOW = RHOW + RHOWIN                                        SPACECU144
      IF(IWFC.EQ.2) RHOF = RHOF + RHOWIN                                        SPACECU145
      IF(IWFC.EQ.3) RHOC = RHOC + RHOWIN                                        SPACECU146
 1800 CONTINUE                                                                  SPACECU147
 1900 CONTINUE                                                                  SPACECU148
C              OPAQUE AREA                                                      SPACECU149
      AEWOP = AMAX1(0.01,AEWGR - AWTW)                                          SPACECU150
C              AREA-WEIGHTED VIS REFL IF WALL                                   SPACECU151
      IF(IWFC.EQ.1) THEN                                                        SPACECU152
         RHOW = RHOW + AEWOP*AA(IAVPEW+12)                                      SPACECU153
         ATW  = ATW + AEWGR                                                     SPACECU154
      ENDIF                                                                     SPACECU155
C              AREA-WEIGHTED VIS REFL IF CEILING                                SPACECU156
      IF(IWFC.EQ.3) THEN                                                        SPACECU157
         RHOC = RHOC + AEWOP*AA(IAVPEW+12)                                      SPACECU158
         ATC  = ATC + AEWGR                                                     SPACECU159
      ENDIF                                                                     SPACECU160
C              AREA-WEIGHTED VIS REFL IF FLOOR                                  SPACECU161
      IF(IWFC.EQ.2) THEN                                                        SPACECU162
         RHOF = RHOF + AEWOP*AA(IAVPEW+12)                                      SPACECU163
         ATF  = ATF + AEWGR                                                     SPACECU164
      ENDIF                                                                     SPACECU165
C                                                                               SPACECU166
 1000 CONTINUE                                                                  SPACECU167
 2000 CONTINUE                                                                  SPACECU168
C                                                                               SPACECU169
C              INTERIOR WALLS                                                   SPACECU170
C                                                                               SPACECU171
      DO 2500 IIW = 1,NIW                                                       SPACECU172
      CALL PTRS(JOPIW,IIW,IRXIW,IDPIW,IAVPIW)                                   SPACECU173
C              INT WALL TYPE: 1=STANDARD, 2=AIR, 3=ADIABATIC, 4=INTERNAL        SPACECU174
C             If no TYPE or NEXT-TO skip                                        DFTEX3 857
      IF(NOVAL(IA(IAVPIW+12)).eq.0 .OR.                                         DFTEX3 858
     $   NOVAL(IA(IAVPIW+1)) .eq.0)  GOTO 2500                                  DFTEX3 859
      IWTYP = ISYMTB(12,IA(IAVPIW+12))                                          SPACECU175
C              SKIP INTERNAL WALLS                                              SPACECU176
      IF(IWTYP.EQ.4) GO TO 2500                                                 SPACECU177
C              SKIP ADIABATIC WALLS NOT DEFINED IN THIS SPACE                   SPACECU178
      IF(IWTYP.EQ.3.AND.IREFTB(4,IRXIW).NE.IRXSP) GO TO 2500                    SPACECU179
C              SKIP STANDARD AND AIR WALLS NOT DEFINED IN THIS                  SPACECU180
C              SPACE OR NEXT-TO SPACE                                           SPACECU181
      IF(IWTYP.LE.2) THEN                                                       SPACECU182
         ISPNT = ISYMTB(12,IA(IAVPIW+1))                                        SPACECU183
         IF(IREFTB(4,IRXIW).NE.IRXSP.AND.ISPNT.NE.ISP) GO TO 2500               SPACECU184
      ENDIF                                                                     SPACECU185
C              IS THIS WALL IN CURRENT SPACE OR NEXT TO IT                      SPACECU186
      INSP   = .TRUE.                                                           SPACECU187
      IF(IREFTB(4,IRXIW).NE.IRXSP) INSP = .FALSE.                               SPACECU188
      JIN    = 1                                                                SPACECU189
      IF(INSP) JIN=0                                                            SPACECU190
C              FLOOR-WALL-CEILING FLAG                                          SPACECU191
      IFLG = IA(IDPIW+3)                                                        SPACECU192
      IWFC = IFLG + 1                                                           SPACECU193
      IF(IFLG.EQ.1.AND.INSP) IWFC = 2                                           SPACECU194
      IF(IFLG.EQ.1.AND.(.NOT.INSP)) IWFC = 3                                    SPACECU195
      IF(IFLG.EQ.2.AND.INSP) IWFC = 3                                           SPACECU196
      IF(IFLG.EQ.2.AND.(.NOT.INSP)) IWFC = 2                                    SPACECU197
C              GROSS AREA                                                       SPACECU198
      IPOLYF = 22                                                               SPACECU199
      IF(NOVAL(AA(IAVPIW+IPOLYF)).EQ.0)  THEN                                   FIX8    76
C              RECTANGLE                                                        SPACECU202
         AINTWL = AA(IAVPIW+17)*AA(IAVPIW+18)                                   SPACECU203
      ELSE                                                                      SPACECU204
C              POLYGON                                                          SPACECU205
         IPOLYN = ISYMTB(12,IA(IAVPIW+IPOLYF))                                  SPACECU206
         CALL PTRS(40,IPOLYN,IRXPOL,IDATX,IAVPOLY)                              SPACECU207
         CALL POLYICK(IA(IDATX+1),AA(IAVPOLY+1),AINTWL,PERIM,0,IERRFL)          LTSYS   10
      ENDIF                                                                     SPACECU209
C                                                                               SPACECU210
C              INTERIOR WINDOWS                                                 SPACECU211
C                                                                               SPACECU212
C              CONSIDER ONLY INTERIOR WINDOWS IN A STANDARD                     SPACECU213
C              I-W BETWEEN A SUNSPACE AND NON-SUNSPACE                          SPACECU214
C                                                                               SPACECU215
      IF(IWTYP.GE.2) GO TO 2498                                                 SPACECU216
C              SUNSPACE FLAG OF WALL'S PARENT SPACE                             SPACECU217
      IRXSPAR = IREFTB(4,IRXIW)                                                 SPACECU218
      IAVSPAR = IREFTB(2,IRXSPAR)+IOPCDT(17,JOPSP)+2*IOPCDT(16,JOPSP)           SPACECU219
C             If no parent SUNSPACE specified                                   DFTEX3 860
      IF(NOVAL(IA(IAVSPAR+153)) .eq. 0)  GOTO 2498                              DFTEX3 861
      ISSPAR = ISYMTB(12,IA(IAVSPAR+153))                                       SPACECU220
C              SUNSPACE FLAG OF WALL'S NEXT-TO SPACE                            SPACECU221
      ISPNT = ISYMTB(12,IA(IAVPIW+1))                                           SPACECU222
      CALL PTRS(JOPSP,ISPNT,IRXSPNT,IDPSNT,IAVPSNT)                             SPACECU223
      IF(NOVAL(IA(IAVPSNT+153)) .eq. 0)  GOTO 2498                              DFTEX3 862
      ISSNT = ISYMTB(12,IA(IAVPSNT+153))                                        SPACECU224
C                                                                               SPACECU225
      IF(ISSPAR.NE.1.AND.ISSNT.NE.1) GO TO 2498                                 SPACECU226
C                                                                               SPACECU227
      AINTWIN = 0.                                                              SPACECU228
C                                                                               SPACECU229
      DO 2100 IWIN = 1,NWIN                                                     SPACECU230
      IRXWIN = IOPCDT(14,JOPWIN) + IWIN - 1                                     SPACECU231
      IF(IREFTB(4,IRXWIN).NE.IRXIW) GO TO 2100                                  SPACECU232
      NWINT = NWINT + 1                                                         SPACECU233
      IDPWIN = IREFTB(2,IRXWIN)                                                 SPACECU234
      IAVPWI = IDPWIN + IOPCDT(17,JOPWIN) + 2*IOPCDT(16,JOPWIN)                 SPACECU235
      AWIN = AMAX1(0.01,AA(IAVPWI+14)*AA(IAVPWI+15)*                            SPACECU236
     1            AA(IAVPWI+10))                                                SPACECU237
C              GLASS TYPE                                                       SPACECU238
      IF(NOVAL(IA(IAVPWI+1)) .eq. 0)  GOTO 2100                                 DFTEX3 863
      NGTY = ISYMTB(12,IA(IAVPWI+1))                                            SPACECU239
      CALL PTRS(JOPGT,NGTY,IRXGT,IDPGT,IAVPGT)                                  SPACECU240
      IF (NOVAL(IA(IAVPGT+IGTCP)).NE.0) THEN                                    DFTEX3 864
         NGTC = ISYMTB(12,IA(IAVPGT+2))                                         SPACECU242
         CALL PTRS(JOPGTC,NGTC,IRXGTC,IDPGTC,IAVPGTC)                           SPACECU243
         RHOWIN = AWIN*AA(IAVPGTC+131)                                          SPACECU244
         NLAY = INT(AA(IAVPGTC+17))                                             SPACECU245
C              REFLECTANCE OF UNGLAZED APERTURE = 1.0                           SPACECU246
C              (ASSUMES EQUAL LIGHT FROM BOTH SIDES)                            SPACECU247
         IF(NLAY.EQ.0) RHOWIN = AWIN                                            SPACECU248
      ELSE IF(NOVAL(IA(IAVPGT+ISHCP)).EQ.0)  THEN                               DFTEX3 865
         RHOWIN = AWIN*(0.5-0.35*1.0)                                           DFTEX3 866
      ELSE                                                                      SPACECU249
C              GLASS HAS SHADING COEF SPECIFIED.                                SPACECU250
C              BACK REFLECTANCE IS APPROXIMATED AS 0.5-0.35*SC, BASED           SPACECU251
C              ON CORRELATION FROM WINDOW LIBRARY WHICH IS OK FOR NON-TINTED    SPACECU252
C              BUT IS ABOUT 2X TOO HIGH FOR TINTED GLAZING.                     SPACECU253
         RHOWIN =  AWIN*(0.5-0.35*AA(IAVPGT+3))                                 SPACECU254
      ENDIF                                                                     SPACECU255
      IF(IWFC.EQ.1) RHOW = RHOW + RHOWIN                                        SPACECU256
      IF(IWFC.EQ.3) RHOC = RHOC + RHOWIN                                        SPACECU257
      IF(IWFC.EQ.2) RHOF = RHOF + RHOWIN                                        SPACECU258
      AINTWIN = AINTWIN + AWIN                                                  SPACECU259
 2100 CONTINUE                                                                  SPACECU260
 2498 CONTINUE                                                                  SPACECU261
C                                                                               SPACECU262
      WMUL = 1.                                                                 SPACECU263
      IF(IWTYP.EQ.1) THEN                                                       SPACECU264
C            FOR SUNSPACE INT WALLS NET AREA = GROSS AREA - WINDOW AREA         SPACECU265
         IF(ISSPAR.EQ.1.OR.ISSNT.EQ.1)                                          SPACECU266
     1      AINTOP = AMAX1(0.001,AINTWL-AINTWIN)                                SPACECU267
C              MULTIPLY WALL AREA BY MULTIPLIER OF SPACE ON                     SPACECU268
C              OTHER SIDE OF WALL FOR STANDARD I-W.                             SPACECU269
C              PTR TO SPACE ADJACENT TO CURRENT SPACE                           SPACECU270
         IAVPADJ = IAVPSNT                                                      SPACECU271
         IF(INSP) IAVPADJ = IAVPSP                                              SPACECU272
         WMUL = AA(IAVPADJ+8)                                                   SPACECU273
         AINTOP = AINTWL*WMUL                                                   SPACECU274
      ELSE                                                                      SPACECU275
         AINTOP = AINTWL                                                        SPACECU276
      ENDIF                                                                     SPACECU277
      IF(INSP) THEN                                                             SPACECU278
         VREFL = AA(IAVPIW+23)                                                  SPACECU279
C              VIS REFL OF AIR WALLS IS 1.0 ASSUMING AS MUCH LIGHT LEAVES       SPACECU280
C              AS ENTERS FROM OTHER SIDE                                        SPACECU281
         IF(IWTYP.EQ.2) VREFL = 1.0                                             SPACECU282
         IF(IWFC.EQ.1) THEN                                                     SPACECU283
            RHOW = RHOW + AINTOP*VREFL                                          SPACECU284
            ATW  = ATW  + AINTWL                                                SPACECU285
         ENDIF                                                                  SPACECU286
         IF(IWFC.EQ.3) THEN                                                     SPACECU287
            RHOC = RHOC + AINTOP*VREFL                                          SPACECU288
            ATC  = ATC + AINTWL                                                 SPACECU289
         ENDIF                                                                  SPACECU290
         IF(IWFC.EQ.2) THEN                                                     SPACECU291
            RHOF = RHOF + AINTOP*VREFL                                          SPACECU292
            ATF  = ATF  + AINTWL                                                SPACECU293
         ENDIF                                                                  SPACECU294
      ELSE                                                                      SPACECU295
         VREFL = AA(IAVPIW+24)                                                  SPACECU296
         IF(IWTYP.EQ.2) VREFL = 1.0                                             SPACECU297
         IF(IWFC.EQ.1) THEN                                                     SPACECU298
            RHOW = RHOW + AINTOP*VREFL                                          SPACECU299
            ATW  = ATW  + AINTWL                                                SPACECU300
         ENDIF                                                                  SPACECU301
         IF(IWFC.EQ.3) THEN                                                     SPACECU302
            RHOC = RHOC + AINTOP*VREFL                                          SPACECU303
            ATC  = ATC + AINTWL                                                 SPACECU304
         ENDIF                                                                  SPACECU305
         IF(IWFC.EQ.2) THEN                                                     SPACECU306
            RHOF = RHOF + AINTOP*VREFL                                          SPACECU307
            ATF  = ATF  + AINTWL                                                SPACECU308
         ENDIF                                                                  SPACECU309
      ENDIF                                                                     SPACECU310
      IF(NOVAL(IA(IAVPIW+IPOLYF)).EQ.0) THEN                                    DFTEX3 867
C              RECTANGLE                                                        SPACECU313
         IF(IWFC.EQ.2.AND.IFL1.EQ.0.AND.WMUL.EQ.1.) THEN                        SPACECU314
            IFL1 = 1                                                            SPACECU315
            ROOML = AA(IAVPIW+17)                                               SPACECU316
            ROOMW = AA(IAVPIW+18)                                               SPACECU317
         ENDIF                                                                  SPACECU318
      ENDIF                                                                     SPACECU319
C                                                                               SPACECU320
 2499 CONTINUE                                                                  SPACECU321
 2500 CONTINUE                                                                  SPACECU322
 3000 CONTINUE                                                                  SPACECU323
C                                                                               SPACECU324
C              UNDERGROUND SURFACES                                             SPACECU325
C                                                                               SPACECU326
      DO 3500 IUG = 1,NUG                                                       SPACECU327
      CALL PTRS(JOPUGW,IUG,IRXUG,IDPUG,IAVPUG)                                  SPACECU328
      IF(IREFTB(4,IRXUG).NE.IRXSP) GO TO 3500                                   SPACECU329
C              WALL-FLOOR-CEILING FLAG                                          SPACECU330
      IWFC = IA(IDPUG+3) + 1                                                    SPACECU331
C              AREA                                                             SPACECU332
      IPOLYF = 17                                                               SPACECU333
      IF(NOVAL(AA(IAVPUG+IPOLYF)).EQ.0)  THEN                                   FIX8    77
C              RECTANGLE                                                        SPACECU336
         AWALL = AMAX1(0.01,AA(IAVPUG+7)*AA(IAVPUG+12)*AA(IAVPUG+13))           SPACECU337
         IF(IWFC.EQ.2.AND.IFL1.EQ.0.AND.AA(IAVPUG+7).EQ.1.) THEN                SPACECU338
            IFL1 = 1                                                            SPACECU339
            ROOML = AA(IAVPUG+12)                                               SPACECU340
            ROOMW = AA(IAVPUG+13)                                               SPACECU341
         ENDIF                                                                  SPACECU342
      ELSE                                                                      SPACECU343
C              POLYGON                                                          SPACECU344
         IPOLYN = ISYMTB(12,IA(IAVPUG+IPOLYF))                                  SPACECU345
         CALL PTRS(40,IPOLYN,IRXPOL,IDATX,IAVPOLY)                              SPACECU346
         CALL POLYICK(IA(IDATX+1),AA(IAVPOLY+1),AREA,PERIM,0,IERRFL)            LTSYS   13
         AWALL = AMAX1(0.01,AA(IAVPUG)*AREA)                                    SPACECU348
      ENDIF                                                                     SPACECU349
      IF(IWFC.EQ.1) THEN                                                        SPACECU350
         RHOW = RHOW + AWALL*AA(IAVPUG+18)                                      SPACECU351
         ATW  = ATW  + AWALL                                                    SPACECU352
      ENDIF                                                                     SPACECU353
      IF(IWFC.EQ.3) THEN                                                        SPACECU354
         RHOC = RHOC + AWALL*AA(IAVPUG+18)                                      SPACECU355
         ATC  = ATC  + AWALL                                                    SPACECU356
      ENDIF                                                                     SPACECU357
      IF(IWFC.EQ.2) THEN                                                        SPACECU358
         RHOF = RHOF + AWALL*AA(IAVPUG+18)                                      SPACECU359
         ATF  = ATF  + AWALL                                                    SPACECU360
      ENDIF                                                                     SPACECU361
 3500 CONTINUE                                                                  SPACECU362
C              AVERAGE WALL, CEILING AND FLOOR REFLECTANCE                      SPACECU363
      RHOW = RHOW/(ATW+0.001)                                                   SPACECU364
      RHOC = RHOC/(ATC+0.001)                                                   SPACECU365
      RHOF = RHOF/(ATF+0.001)                                                   SPACECU366
      IF(RHOW.EQ.0.) RHOW = 0.5                                                 SPACECU367
      IF(RHOC.EQ.0.) RHOC = 0.7                                                 SPACECU368
      IF(RHOF.EQ.0.) RHOF = 0.2                                                 SPACECU369
C              IF LUM-SPACE-DIV NOT 1.0 (SPACE DIVIDED INTO SIMILAR ROOMS       SPACECU379
C              FOR LIGHTING CALC) DETERMINE INPUT FOR CU CALC FOR               SPACECU380
C              INDIVIDUAL ROOM OF AREA = (SPACE AREA)/(LTG-SPACE-DIV) AND       SPACECU381
C              LENGTH = WIDTH = SQRT(ROOM AREA).                                SPACECU382
      NRMLTG = 1                                                                SPACECU383
      IF(NOVAL(AA(IAVPSP+IHP)) .eq. 0)  THEN                                    DFTEX3 868
        SPACEHT = AA(IAVPSP+IVP)/(AA(IAVPSP+IAP)+0.0001)                        DFTEX3 869
      ELSE                                                                      DFTEX3 870
        SPACEHT = AA(IAVPSP+IHP)                                                DFTEX3 871
      ENDIF                                                                     DFTEX3 872
C              Make sure ceiling/floor summed component area is at              -034   110
C              least floor area calculated for SPACE (not sum of                -034   111
C              floor components) and also make wall area at least               -034   112
C              the mimimum possible SPACE perimeter time SPACE height           -034   113
C              (minimum is SPACE is a square)                                   -034   114
      ATC = AMAX1(ATC,AA(IAVPSP+IAP))                                           -034   115
      ATF = AMAX1(ATC,AA(IAVPSP+IAP))                                           -034   116
      ATW = AMAX1(ATW,4.0*SQRT(AA(IAVPSP+IAP))*SPACEHT)                         -034   117
      IF(AA(IAVPSP+151).GT.1.1) THEN                                            SPACECU385
C              FOR CU CALC ASSUME FOOTPRINT OF ROOM IS SQUARE                   SPACECU386
         NRMLTG = INT(AA(IAVPSP+151))                                           SPACECU387
         ROOML = SQRT(AA(IAVPSP+IAP)/NRMLTG)                                    -034   118
         ROOMW = ROOML                                                          SPACECU389
         ATC = ROOML * ROOMW                                                    SPACECU390
         ATW = 4.*ROOML*SPACEHT                                                 -034   119
      ENDIF                                                                     SPACECU392
C                                                                               SPACECU393
C              CALC FORM FACTOR BETWEEN CEILING AND CEILING CAVITY BASE         SPACECU394
C              (FROM IESNA LIGHTING HANDBOOK, 8TH EDITION, P. 406)              SPACECU395
C                                                                               SPACECU396
C              GET X = (CEILING CAVITY LENGTH)/(CEILING CAVITY DEPTH) AND       SPACECU397
C                  Y = (CEILING CAVITY WIDTH)/(CEILING CAVITY DEPTH)            SPACECU398
C                                                                               SPACECU399
      X = ROOML/(AA(IAVPSP+ILUMDIS)+0.001)                                      SPACECU400
      Y = ROOMW/(AA(IAVPSP+ILUMDIS)+0.001)                                      SPACECU401
      X2 = X*X                                                                  SPACECU402
      Y2 = Y*Y                                                                  SPACECU403
      TOPI = 1./PIOVR2                                                          SPACECU404
      TOPIXY = TOPI/(X*Y)                                                       SPACECU405
      TOPIX  = TOPI/X                                                           SPACECU406
      TOPIY  = TOPI/Y                                                           SPACECU407
      AF = TOPIXY*ALOG( SQRT((1+X2)*(1+Y2)/(1+X2+Y2)) )                         SPACECU408
      BF = TOPIX*SQRT(1+X2)*ATAN(Y/SQRT(1+X2))                                  SPACECU409
      CF = TOPIY*SQRT(1+Y2)*ATAN(X/SQRT(1+Y2))                                  SPACECU410
      DF = TOPIX*ATAN(Y) + TOPIY*ATAN(X)                                        SPACECU411
C              FORM FACTOR                                                      SPACECU412
      F = AF + BF + CF - DF                                                     SPACECU413
C                                                                               SPACECU414
C              EFFECTIVE REFLECTANCE OF CEILING CAVITY                          SPACECU415
C              (FROM IESNA LIGHTING HANDBOOK, 8TH EDITION, P. 406)              SPACECU416
C                                                                               SPACECU417
      F1 = 1. - F                                                               SPACECU418
      ATCWF =  ATC*F1/ATW                                                       SPACECU419
      ACC = RHOC*RHOW*F*(2*ATCWF - F)                                           SPACECU420
      BCC = RHOC*F*F                                                            SPACECU421
      CCC = RHOW*ATCWF*F1                                                       SPACECU422
      DCC = RHOC*CCC                                                            SPACECU423
      ECC = RHOW*(1.-2*ATCWF)                                                   SPACECU424
      RHOCC = (ACC + BCC + CCC)/(1. - DCC - ECC)                                SPACECU425
C                                                                               SPACECU426
 8000 CONTINUE                                                                  LTSYS4  13
C                                                                               LTSYS4  14
      IF(NOVAL(AA(IAVPSP+IHP)) .eq. 0)  THEN                                    DFTEX3 873
        SPACEHT = AA(IAVPSP+IVP)/(AA(IAVPSP+IAP)+0.0001)                        DFTEX3 874
      ELSE                                                                      DFTEX3 875
        SPACEHT = AA(IAVPSP+IHP)                                                DFTEX3 876
      ENDIF                                                                     DFTEX3 877
      IF(AA(IAVPSP+151).GT.1.1) THEN                                            LTSYS4  16
         ROOML = SQRT(AA(IAVPSP+6)/INT(AA(IAVPSP+151)))                         LTSYS4  17
         ROOMW = ROOML                                                          LTSYS4  18
      ENDIF                                                                     LTSYS4  19
C              ROOM CAVITY RATIO = 5*(LUMINAIRE TO WORKPLANE DIS)*              SPACECU427
C              (ROOM-LENGTH + ROOM-WIDTH)/(ROOM-LENGTH*ROOM-WIDTH)              SPACECU428
C                                                                               SPACECU429
      DISLMWK = AMAX1(0.0,                                                      SPACECU430
     1    SPACEHT - AA(IAVPSP+ILUMDIS+ILS-1) - AA(IAVPSP+IWKHT))                SPACECU431
      RCR = 5.*DISLMWK*(ROOML+ROOMW)/(ROOML*ROOMW+0.0001)                       SPACECU432
C                                                                               SPACECU433
C              INTERPOLATE IN RHOCC, RHOW AND RCR TO GET CU                     SPACECU434
C              FOR FLOOR CAVITY REFLECTANCE OF 0.2                              SPACECU435
C              (POLIN3 ALSO DOES EXTRAPOLATION, WHICH IS OK                     SPACECU436
C              FOR RHOCC AND RHOW BUT NOT RCR SINCE THE RCR                     SPACECU437
C              POLYNOMIAL DECREASES FROM RCR=0 TO RCR=10                        SPACECU438
C              THEN INCREASES FOR RCR > 10)                                     SPACECU439
C                                                                               SPACECU440
      RHOCC = AMAX1(0.,AMIN1(RHOCC,1.0))                                        SPACECU441
      RHOW  = AMAX1(0.,AMIN1(RHOW,1.0))                                         SPACECU442
      RCR   = AMAX1(0.,AMIN1(RCR,RCRA(3)))                                      SPACECU443
C              I<=>RHOCC, J<=>RHOW, K<=>RCR                                     SPACECU444
      DO I=1,3                                                                  SPACECU445
         DO J=1,3                                                               SPACECU446
            L = 3*(I-1) + J - 1                                                 SPACECU447
            CUA(I,J,1) = AA(IAVPLTG+IRCR0 + L)                                  SPACECU448
            CUA(I,J,2) = AA(IAVPLTG+IRCR5 + L)                                  SPACECU449
            CUA(I,J,3) = AA(IAVPLTG+IRCR10 + L)                                 SPACECU450
         ENDDO                                                                  SPACECU451
      ENDDO                                                                     SPACECU452
      CALL POLIN3(RHOCCA,RHOWA,RCRA,CUA,RHOCC,RHOW,RCR,CU,DCU)                  SPACECU453
C              CORRECT FOR FLOOR CAVITY REFLECTANCE NOT 0.2                     SPACECU454
C              USING INTERPOLATED MULTIPLYING FACTORS FROM                      SPACECU455
C              IESNA LIGHTING HANDBOOK, 8TH EDITION, P. 410                     SPACECU456
      IF(ABS(RHOF-0.2).GT.0.01) THEN                                            LTSYS4  20
         CALL POLIN3(RHOCCA,RHOFA,RCRA,CORRA,RHOCC,RHOF,RCR,CORR,DCORR)         LTSYS4  21
         CU = CU * CORR                                                         LTSYS4  22
      ENDIF                                                                     LTSYS4  23
C              GET DIRT DEPRECIATION FACTOR (FLDD) FROM LUMINAIRE               SPACECU459
C              MAINTENANCE CATEGORY (ILMC), OPERATING ATMOSPHERE                SPACECU460
C              (JOPATM) AND CLEANING CYCLE (CLEANCYC)                           SPACECU461
      IF(NOVAL(IA(IAVPLTG+52)) .ne. 0)  THEN                                    DFTEX3 878
        ILMC = ISYMTB(12,IA(IAVPLTG+52))                                        DFTEX3 879
      ELSE                                                                      DFTEX3 880
        ILMC = 1                                                                DFTEX3 881
      ENDIF                                                                     DFTEX3 882
      IF(NOVAL(IA(IAVPLTG+53)) .ne. 0)  THEN                                    DFTEX3 883
        JOPATM = ISYMTB(12,IA(IAVPLTG+53))                                      DFTEX3 884
      ELSE                                                                      DFTEX3 885
        JOPATM = 1                                                              DFTEX3 886
      ENDIF                                                                     DFTEX3 887
      BLDD = BLDDI(ILMC)                                                        SPACECU464
      ALDD = ALDDIJ(ILMC,JOPATM)                                                SPACECU465
      CLEANCYC = AA(IAVPLTG+54)                                                 SPACECU466
      FLDD = EXP(-ALDD*(CLEANCYC**BLDD))                                        SPACECU467
C              MULTIPLY CU BY DIRT DEPRECIATION FACTOR                          SPACECU468
      CU = CU * FLDD                                                            SPACECU469
      RETURN                                                                    SPACECU470
      END                                                                       SPACECU471
      SUBROUTINE SPACELTG(ICALL,ISP,                                            FIX4    17
     1                    ELECILL,POWTOT,XNOLUM,ELECILTOT,POWTOTTOT)            LTSYS4  25
C                                                                               LTSYS4  26
C              CALLED BY SPACED (ICALL=1) AND SPACEO AND WFRAD (ICALL=2).       LTSYS4  27
C              WHEN CALLED BY SPACED USES DEFAULT VALUES FOR CEILING,           LTSYS4  28
C              WALL AND FLOOR CAVITY REFLECTANCES TO GET ILLUMINANCE.           LTSYS4  29
C              WHEN CALLED BY SPACEO AND WFRAD, DETERMINES CAVITY               LTSYS4  30
C              REFLECTANCES FROM AREA-WEIGHTED ROOM SURFACE REFLECTANCES.       LTSYS4  31
C              CALCULATES CONNECTED LIGHTING POWER WHEN LIGHTING-SYSTEM         LTSYS4  32
C              IS SPECIFIED. A LIGHTING SYSTEM CAN HAVE UP TO 5                 LTSYS4  33
C              SUBSYSTEMS.                                                      LTSYS4  34
C                                                                               SPACELTG 8
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /SPVALX/ IHP, IAP, IVP, ISHPP, IWP, IDPTHP, ISCP, IPRCAP,         /SPVALX/ 2
     1                 IWFP, ILTP, IINFMP, INZHP, IPLP, IPSP, ILKWP,            /SPVALX/ 3
     2                 ITKWP, IEKWP, IPAP, ILWSFP, ITWSFP, IPOLSP,              GEO4     1
     3                 IEQWFP, KWH, KWA, KWV, KWSHP, KWW, KWDPTH,               /SPVALX/ 5
     4                 KWSC, KWLT, KWINFM, KWNZH, KWPL, KWPS,                   /SPVALX/ 6
     5                 KWLKW, KWTKW, KWEKW, KWPA, KWLWSF, KWTWSF,               /SPVALX/ 7
     6                 KWEWSF, IFURTP, IFURFP, IFURWP, IFLRWP, KWWF,            /SPVALX/ 8
     7                 KWFLRW,ILTSP,NINFKY,INFKYP(20),DEFINF(10,4),             LTSYS1   2
     8                 ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM,             DFTEXP 197
     9                 ISPLOCP,ISPDIS,NSPDIS                                    DFTEXP 198
      COMMON /LMVALX/                                                           /LMVALX/ 2
     1  ILUMTYP,ILMPTYP,ILMPNO,IBALTYP,ILTGCU,IRADFR,ILUMOUT,IPOWIN,            /LMVALX/ 3
     2  IRCR0,IRCR5,IRCR10,IMAXLMP,ICONFIG,IACCAT,IACCONF,                      /LMVALX/ 4
     3  ILMPCAT,ILMPLUM,ILMPPOW,ILMPDPR,ACF(9,6),PCF(9,6)                       /LMVALX/ 5
      DIMENSION ELECILL(5),POWTOT(5),XNOLUM(5)                                  SPACELTG17
C                                                                               SPACELTG18
      CALL FILLN(0.,ELECILL,5)                                                  SPACELTG19
      CALL FILLN(0.,POWTOT,5)                                                   SPACELTG20
      CALL FILLN(0.,XNOLUM,5)                                                   SPACELTG21
C              TOTAL ILLUMINANCE AND POWER FOR ALL SUBSYSTEMS                   LTSYS4  35
      ELECILTOT = 0.                                                            LTSYS4  36
      POWTOTTOT = 0.                                                            LTSYS4  37
      CALL PTRS(JOPSP,ISP,IRX,IDP,IAVPTR)                                       FIX4    18
C              N0. OF IDENTICAL ROOMS SPACE IS DIVIDED INTO FOR                 LTSYS4  38
C              LIGHTING CALC (VALUE OF LUM-SPACE-DIV)                           LTSYS4  39
      NRMLTG = 1                                                                SPACELTG23
      IF(AA(IAVPTR+151).GT.1.1) NRMLTG = INT(AA(IAVPTR+151))                    SPACELTG24
C               INITIALIZE NUMBER OF LIGHTING SUBSYSTEMS                        SPACELTG25
      NLTGSYS = 1                                                               SPACELTG26
C               LOOP OVER LIGHTING SUBSYSTEMS                                   SPACELTG27
      DO 350 ILS = 1,5                                                          SPACELTG28
      IF(NOVAL(AA(IAVPTR+ILTGSYS+ILS-1)).EQ.0) GO TO 400                        DFTEX3 888
      NLTGSYS = NLTGSYS + 1                                                     SPACELTG30
C               LIGHTING SYSTEM DATA                                            SPACELTG31
      INLTGS = IA(IAVPTR+ILTGSYS+ILS-1)                                         SPACELTG32
      INLTGS = ISYMTB(12,INLTGS)                                                SPACELTG33
      CALL PTRS(JOPLTGS,INLTGS,IRXLTGS,IDPLTGS,IAVPLTGS)                        SPACELTG34
      IF(NOVAL(IA(IAVPLTGS+21)).ne.0) THEN                                      DFTEX4 477
        ILTCMETH = ISYMTB(12,IA(IAVPLTGS+21))                                   DFTEX4 478
      ELSE                                                                      DFTEX4 479
        AA(IAVPLTGS+21) = REQD                                                  DFTEX4 480
        GOTO 350                                                                DFTEX4 481
      ENDIF                                                                     DFTEX4 482
      IF(ILTCMETH.EQ.1) THEN                                                    DFTEX4 483
C               LGT-CALC-METHOD is LUMENS-POWER                                 DFTEX4 484
C               PER LUMINAIRE FROM LUM-LAMP-LUMENS AND LUM-POWER-IN             SPACELTG41
         OUTLUMP =  AA(IAVPLTGS+25)                                             SPACELTG42
         POWPLUM  = AA(IAVPLTGS+26)                                             SPACELTG43
      ELSE                                                                      SPACELTG44
C               LGT-CALC-METHOD is LUMINAIRE-LAMP                               DFTEX4 485
C               GET LUMEN OUTPUT AND POWER INPUT                                DFTEX4 486
C               PER LUMINAIRE FROM LAMP DATA, LUMINAIRE CONFIGURATION           SPACELTG46
C               (RECESSED-STATIC, RECESS-VENTED, SURFACE-CLOSED, ETC.)          SPACELTG47
C               AND BALLAST TYPE                                                SPACELTG48
C                                                                               SPACELTG49
C               Make sure required data is there before using                   DFTEX4 487
         IF((NOVAL(IA(IAVPLTGS+ILMPTYP)).eq.0) .OR.                             DFTEX4 488
     $      (NOVAL(IA(IAVPLTGS+ILUMTYP)).eq.0))  GOTO 350                       DFTEX4 489
C               LUMINAIRE TYPE DATA FOR LIGHTING SYSTEM                         DFTEX4 490
         NLUMTY = ISYMTB(12,IA(IAVPLTGS+ILUMTYP))                               DFTEX4 491
         CALL PTRS(JOPLUMT,NLUMTY,IRXLUMT,IDPLUMT,IAVPLUMT)                     DFTEX4 492
C               LAMP TYPE DATA FOR LIGHTING SYSTEM                              SPACELTG50
         NLMPTY = ISYMTB(12,IA(IAVPLTGS+ILMPTYP))                               SPACELTG51
         CALL PTRS(JOPLMPT,NLMPTY,IRXLMPT,IDPLMPT,IAVPLMPT)                     SPACELTG52
C               LAMP CATEGORY (FULL-SIZE FLUORESCENT, ETC.)                     SPACELTG53
         ILAMCAT = ISYMTB(12,IA(IAVPLMPT+ILMPCAT))                              SPACELTG54
C               RATED LAMP LUMENS TIMES LUMEN DEPRECIATION                      SPACELTG55
         XLUMLAM = AA(IAVPLMPT+ILMPLUM)*AA(IAVPLMPT+ILMPDPR)                    SPACELTG56
C               RATED LAMP POWER                                                SPACELTG57
         POWLAM  = AA(IAVPLMPT+ILMPPOW)                                         SPACELTG58
C               BALLAST TYPE                                                    SPACELTG59
         IBLTY = 0                                                              SPACELTG60
         IF(NOVAL(AA(IAVPLTGS+IBALTYP)).NE.0)                                   DFTEX3 890
     1      IBLTY = ISYMTB(12,IA(IAVPLTGS+IBALTYP))                             SPACELTG62
C               LUMINAIRE CONFIGURATION                                         SPACELTG63
         IF(NOVAL(IA(IAVPLTGS+ICONFIG)).ne.0) THEN                              DFTEX4 493
           ILUMCON = ISYMTB(12,IA(IAVPLTGS+ICONFIG))                            DFTEX4 494
         ELSE                                                                   DFTEX4 495
           ILUMCON = 1                                                          DFTEX4 496
         ENDIF                                                                  DFTEX4 497
C               CORRECTION FACTORS TO ACCOUNT FOR LAMP/BALLAST                  SPACELTG65
C               INTERACTION AND THERMAL EFFECTS ARE APPLIED TO                  SPACELTG66
C               FULL-SIZE AND COMPACT FLUORESCENTS.                             SPACELTG67
C               APPLICATION CORRECTION FACTOR (ACF) MULTIPLIES                  SPACELTG68
C               LAMP LUMEN OUTPUT.                                              SPACELTG69
C               POWER CORRECTION FACTOR (PCF), WHICH GIVES                      SPACELTG70
C               "ACTIVE POWER," MULTIPLIES USER INPUT NOMINAL                   SPACELTG71
C               LAMP POWER. DERIVED FROM ADVANCED LIGHTING                      SPACELTG72
C               GUIDELINES (DOE, EPRI AND CEC): 1993,                           SPACELTG73
C               P. 3.14-19 AND 6.12.                                            SPACELTG74
C                                                                               SPACELTG75
C               INCANDESCENT                                                    SPACELTG76
         ACFL = 1.0                                                             SPACELTG77
         PCFL = 1.0                                                             SPACELTG78
C               FULL-SIZE FLUORESCENT                                           SPACELTG79
         IF(ILAMCAT.EQ.1.AND.(IBLTY.GE.1.AND.IBLTY.LE.7)) THEN                  SPACELTG80
            ACFL = ACF(IBLTY,ILUMCON)                                           SPACELTG81
            PCFL = PCF(IBLTY,ILUMCON)                                           SPACELTG82
         ENDIF                                                                  SPACELTG83
C               COMPACT FLUORESCENT                                             SPACELTG84
         IF(ILAMCAT.EQ.2.AND.(IBLTY.EQ.8.OR.IBLTY.EQ.9)) THEN                   SPACELTG85
            ACFL = ACF(IBLTY,ILUMCON)                                           SPACELTG86
C                  WITH MAGNETIC BALLAST                                        SPACELTG87
            PCFL = 2.036667 + POWLAM*(-0.0792 + 0.001795*POWLAM)                SPACELTG88
C                  WITH ELECTRONIC BALLAST                                      SPACELTG89
            IF(IBLTY.EQ.9) PCFL = 0.75*PCFL                                     SPACELTG90
         ENDIF                                                                  SPACELTG91
C               HID                                                             SPACELTG92
         IF((ILAMCAT.EQ.5.OR.ILAMCAT.EQ.6).AND.                                 SPACELTG93
     1      (IBLTY.EQ.10.OR.IBLTY.EQ.11)) THEN                                  SPACELTG94
            ACFL = 1.0                                                          SPACELTG95
C                  FOLLOWING IS BASED ON LINEAR FIT TO GE DATA                  SPACELTG96
C                  FOR 250W AND 400W HPS AND METAL HALIDE LAMPS                 SPACELTG97
C                  WITH STANDARD AND LO-LOSS MAGNETIC BALLASTS.                 SPACELTG98
C                    HPS WITH STANDARD BALLAST                                  SPACELTG99
               IF(ILAMCAT.EQ.5.AND.IBLTY.EQ.10)                                 SPACELT100
     1            PCFL = 1.258 - 0.000233*POWLAM                                SPACELT101
C                    HPS WITH LO-LOSS BALLAST                                   SPACELT102
               IF(ILAMCAT.EQ.5.AND.IBLTY.EQ.11)                                 SPACELT103
     1            PCFL = 1.175 - 0.000127*POWLAM                                SPACELT104
C                    MET HALIDE WITH STANDARD BALLAST                           SPACELT105
               IF(ILAMCAT.EQ.6.AND.IBLTY.EQ.10)                                 SPACELT106
     1            PCFL = 1.197 - 0.000180*POWLAM                                SPACELT107
C                    MET HALIDE WITH LO-LOSS BALLAST                            SPACELT108
               IF(ILAMCAT.EQ.6.AND.IBLTY.EQ.11)                                 SPACELT109
     1            PCFL = 1.146 - 0.000120*POWLAM                                SPACELT110
         ENDIF                                                                  SPACELT111
C                                                                               SPACELT112
         XNOLAMP = AA(IAVPLUMT+ILMPNO)                                          SPACELT113
         OUTLUMP = XNOLAMP * XLUMLAM * ACFL                                     SPACELT114
         POWPLUM = XNOLAMP * POWLAM * PCFL                                      SPACELT115
      ENDIF                                                                     SPACELT116
C               COEFFICIENT OF UTILIZATION. IF NOT SPECIFIED,                   SPACELT117
C               CALCULATE FROM LUMINAIRE TYPE AND ROOM PROPERTIES               SPACELT118
      IF(ILTCMETH.eq.0) THEN                                                    DFTEX4 498
         IF(NOVAL(AA(IAVPLTGS+ILTGCU)).eq.0) THEN                               DFTEX4 499
           CALL SPACECU(ICALL,IAVPTR,ISP,IRX,IAVPLUMT,ILS,CU)                   DFTEX4 500
         ELSE                                                                   DFTEX4 501
           CU = AA(IAVPLTGS+ILTGCU)                                             DFTEX4 502
         ENDIF                                                                  DFTEX4 503
      ELSE                                                                      DFTEX4 504
         IF(NOVAL(AA(IAVPLTGS+ILTGCU)).eq.0) THEN                               DFTEX4 505
           CU = 1.0                                                             DFTEX4 506
         ELSE                                                                   DFTEX4 507
           CU = AA(IAVPLTGS+ILTGCU)                                             DFTEX4 508
         ENDIF                                                                  DFTEX4 509
      ENDIF                                                                     DFTEX4 510
      IF(NOVAL(IA(IAVPTR+208)) .ne. 0)  THEN                                    DFTEX4 511
        LSM = ISYMTB(12,IA(IAVPTR+208))                                         DFTEX4 512
      ELSE                                                                      DFTEX4 513
        LSM = 0                                                                 DFTEX4 514
      ENDIF                                                                     DFTEX4 515
      IF(LSM.EQ.1) THEN                                                         DFTEX4 516
C               NO. OF LUMINAIRES SPECIFIED.                                    SPACELT125
C               POWER FOR ALL LUMINAIRES IN SUBZONE                             SPACELT126
         POWTOT(ILS) = AA(IAVPTR+ILUMNO+ILS-1)*POWPLUM*NRMLTG                   SPACELT127
         XNOLUM(ILS) = AA(IAVPTR+ILUMNO+ILS-1)                                  LTSYS4  42
C               ELECTRIC ILLUMINANCE AT WORKPLANE                               SPACELT128
C               (NO. OF LUMINAIRES)*LUMENS/LUMINAIRE*CU/(FLOOR-AREA)            LTSYS4  43
         ELECILL(ILS) = AA(IAVPTR+ILUMNO+ILS-1)*OUTLUMP*CU/                     LTSYS4  44
     1             (AA(IAVPTR+6)/NRMLTG)                                        LTSYS4  45
         ELECILTOT = ELECILTOT + ELECILL(ILS)                                   LTSYS4  46
         POWTOTTOT = POWTOTTOT + POWTOT(ILS)                                    LTSYS4  47
      ENDIF                                                                     SPACELT133
      IF(LSM.EQ.2) THEN                                                         DFTEX4 517
C               ELEC ILLUMINANCE SPECIFIED.                                     SPACELT135
         ELECILL(ILS) = AA(IAVPTR+IELILL+ILS-1)                                 SPACELT136
         ELECILTOT = ELECILTOT + ELECILL(ILS)                                   LTSYS4  49
C               ILLUMINANCE PER LUMINAIRE                                       SPACELT137
         XILLUMP = OUTLUMP*CU/(AA(IAVPTR+6)/NRMLTG)                             LTSYS4  50
C               NO. OF LUMINAIRES REQUIRED                                      SPACELT140
         XNOLUM(ILS) = 1. + AINT(AA(IAVPTR+IELILL+ILS-1)/XILLUMP)               SPACELT141
C               POWER FOR ALL LUMINAIRES                                        SPACELT142
         POWTOT(ILS) = XNOLUM(ILS)*POWPLUM*NRMLTG                               SPACELT143
         POWTOTTOT = POWTOTTOT + POWTOT(ILS)                                    LTSYS4  51
      ENDIF                                                                     SPACELT144
  350 CONTINUE                                                                  SPACELT145
  400 CONTINUE                                                                  SPACELT146
      RETURN                                                                    SPACELT147
      END                                                                       SPACELT148
      SUBROUTINE SHADO                                                          SHADO    2
C                                                                               SHADO    3
C              CALLED BY OUTFIL.                                                SHADO    4
C              ASSEMBLES SHADING BLOCKS FOR BUILDING-SHADES, FIXED-SHADES       SHADO    5
C              SELF SHADES, ATTACHED SHADES (OVERHANG AND FINS ON WINDOWS       SHADO    6
C              AND DOORS) AND SETBACK SHADES. WRITES SHADING BLOCKS TO SF.      SHADO    7
C                                                                               SHADO    8
C              SHADE TYPES: 0 = BUILDING-SHADE   1 = FIXED-SHADE                SHADO    9
C                           2 = SELF SHADE       3 = OVERHANG OR FIN            SHADO   10
C                           4 = SETBACK SHADE                                   SHADO   11
C                                                                               SHADO   12
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON  /BSVALX/ IBSGEO                                                   /BSVALX/ 2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON /JOPP  / JPMOP,JCLOP,JCHOP,JBLOP,JDWOP,JCTOP,JFCOP,JEGOP,          /JOPP1/  2
     $                JTSOP,JHREOP,JLMOP,JPROP                                  /JOPP1/  3
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
C                                                                               SHADO   26
C              INITIALIZE LENGTH OF SHADE BLOCK                                 SHADO   27
      LEN = 0                                                                   SHADO   28
C              START OF OUTPUT BUFFER FOR SHADES                                SHADO   29
      IST = IAX + 1                                                             SHADO   30
C==============BUILDING-SHADES AND FIXED-SHADES======================           SHADO   31
      NGSHAD = IOPCDT(13,JOPSH) + IOPCDT(13,JOPFSH)                             SHADO   32
      IF(NGSHAD.EQ.0) GO TO 1000                                                SHADO   33
      Ngn = IOPCDT(13,JEGOP)                     ! Number of generators         PV2    140
      LENGSH = NGSHAD*LSHADE                                                    SHADO   35
      LEN = LEN + LENGSH                                                        SHADO   36
      CALL CKAA(IA,LENGSH)                                                      SHADO   37
      IPT = IAX                                                                 SHADO   38
      DO 400 ISHTY=1,2                                                          SHADO   39
      JOPSHX = JOPSH                                                            SHADO   40
      IF(ISHTY.EQ.2) JOPSHX = JOPFSH                                            SHADO   41
      NKW  = IOPCDT(10,JOPSHX)                                                  PV2    141
      NSHX = IOPCDT(13,JOPSHX)                                                  SHADO   42
      IF(NSHX.EQ.0) GO TO 400                                                   SHADO   43
      IKW = IOPCDT(9,JOPSHX)                                                    SHADO   44
      IRX0 = IOPCDT(14,JOPSHX)                                                  SHADO   45
      DO ISHD=1,NSHX                                                            SHADO   46
          IRX = IRX0 + ISHD - 1                                                 OUT1    42
          IDP = IREFTB(2,IRX)                                                   OUT1    43
          IAVPTR = MVTOSM(IRX,JOPSHX,0)                                         OUT1    44
          CALL SYMFIL(ISYMTB,KONTXT(1,IKW),NKW,IA(IAVPTR+1))                    GEO4   139
c              Turn on shading report if a PV array attached to this            PV2    142
c              shading surface                                                  PV2    143
          IF (Ngn .GT. 0)  THEN                                                 PV2    144
            NAMPTR = IREFTB(1,IRX)               ! shade name                   PV2    145
            DO  Neq=1,Ngn                                                       PV2    146
              IRXgn = IOPCDT(14,JEGOP) + Neq-1   ! generator ref index          PV2    147
              IDPgn = IREFTB(2,IRXgn)            ! generator data               PV2    148
              INgn  = IREFTB(1,IRXgn)            ! generator name               PV2    149
c                skip if deleted                                                PV2    150
              IF (IDPgn .EQ. 0  .OR.  INgn .EQ. 0)  CYCLE                       PV2    151
c                check if PV array mounted on shade                             PV2    152
              IDPgn3 = IDPgn + IOPCDT(17,JEGOP) + 2*IOPCDT(16,JEGOP)            PV2    153
              IGSgn  = IA(IDPgn3 + (<+gn:BUILDING-SHAD>-<+gn:TYPE>) + 1)        PV2    154
              IF (IGSgn .EQ. NAMPTR)  THEN                                      PV2    155
c                 store ptr to name of generator as flag                        PV2    156
                IA(IAVPTR+19) = INgn                                            PV2    157
                EXIT                                                            PV2    158
              ENDIF                                                             PV2    159
            ENDDO                                                               PV2    160
          ENDIF                                                                 PV2    161
          IA(IPT+1) = IA(IDP+2)                                                 OUT1    45
          CALL MOVEN(AA(IAVPTR+1),AA(IPT+2),5)                                  GEO4   141
          CALL MOVEN(AA(IAVPTR+13),AA(IPT+7),7)                                 PV2    162
          IA(IPT+4) = 0                                                         GEO4   143
          IF (ISHTY.EQ.2) IA(IPT+4) = 1                                         GEO4   144
          IA(IPT+14) = 0                                                        PV2    163
           IPT = IPT + LSHADE                                                   SHADO   52
      ENDDO                                                                     SHADO   53
  400 CONTINUE                                                                  SHADO   54
      IAX = IAX + LENGSH                                                        SHADO   55
 1000 CONTINUE                                                                  SHADO   56
C==============SELF SHADES (CONSIDERED TO BE GLOBAL SHADES)=======              SHADO   57
      NEW = IOPCDT(13,JOPEW)                                                    SHADO   58
      IF(NEW.EQ.0) GO TO 2000                                                   SHADO   59
C              LOOP OVER EXTERIOR WALLS                                         SHADO   60
      DO I=1,NEW                                                                SHADO   61
          IRX = IOPCDT(14,JOPEW) + I - 1                                        SHADO   62
          IDPEW = IREFTB(2,IRX)                                                 SHADO   63
          IAVPEW = IDPEW + IOPCDT(17,JOPEW) + 2*IOPCDT(16,JOPEW)                SHADO   64
C              IS SHADING-SURFACE = YES?                                        SHADO   65
          JSYM = IA(IAVPEW+22)                                                  SHADO   66
          IF(ISYMTB(12,JSYM).EQ.1) THEN                                         SHADO   67
             CALL CKAA(IA,LSHADE)                                               SHADO   68
             NGSHAD = NGSHAD + 1                                                SHADO   69
             LEN = LEN + LSHADE                                                 SHADO   70
C              START OF BLOCK                                                   SHADO   71
             IPT = IAX                                                          SHADO   72
C              ZERO THE BLOCK                                                   SHADO   73
             DO II=1,LSHADE                                                     SHADO   74
                 IA(IPT+II) = 0                                                 SHADO   75
             ENDDO                                                              SHADO   76
C              SHADE GEOMETRY PTR IS WALL GEOMETRY PTR                          SHADO   77
             IA(IPT+1) = IA(IDPEW+12)                                           OUT1    46
C              TRANSMITTANCE AND SCHEDULE PTR                                   SHADO   79
             AA(IPT+2) = 0.                                                     SHADO   80
             IA(IPT+3) = 0                                                      SHADO   81
C              SHADE TYPE                                                       SHADO   82
             IA(IPT+4) = 2                                                      SHADO   83
C              SHADE VISIBLE REFLECTANCE = 1 - WALL SOL ABSORPTANCE             SHADO   84
             ICNS = ISYMTB(12,IA(IAVPEW+1))                                     STBGEO   7
             CALL PTRS(JOPCNS,ICNS,IRXCN,IDPCN,IAVPCN)                          STBGEO   8
             ABSEW = AA(IAVPCN+2)                                               STBGEO   9
             AA(IPT+5) = 1.0 - ABSEW                                            SHADO   89
C              SHADE GROUND REFLECTANCE IS SAME AS WALL'S                       SHADO   90
             AA(IPT+6) = AA(IAVPEW+2)                                           SHADO   91
C              SHADE DIFFUSE REFLECTANCE, SPECULAR REFLECTANCE,                 SHADO   92
C              REFLECTIVE ROUGHNESS, ETC., SAME AS WALL'S                       SHADO   93
             DO J=1,6                                                           SHADO   94
                AA(IPT+6+J) = AA(IAVPEW+22+J)                                   GEO2     2
             ENDDO                                                              SHADO   96
             IAX = IAX + LSHADE                                                 SHADO   97
          ENDIF                                                                 SHADO   98
      ENDDO                                                                     SHADO   99
 2000 CONTINUE                                                                  SHADO  100
C==============OVERHANG AND FINS===================================             SHADO  101
C              FOR EACH EXTERIOR WALL LOOP OVER ATTACHED WINDOWS AND            SHADO  102
C              DOORS, CREATE SHADE BLOCKS FOR OVERHANG AND FINS,                SHADO  103
C              AND ASSOCIATE THEM WITH THE EXTERIOR WALL                        SHADO  104
C                                                                               SHADO  105
C              INITIALIZE TOTAL NUMBER OF OH/FINS FOR ALL EXT WALLS             SHADO  106
      NOHFTO = 0                                                                SHADO  107
      IF(NEW.EQ.0) GO TO 6000                                                   SHADO  108
      DO 4000 I=1,NEW                                                           SHADO  109
      IRXEW = IOPCDT(14,JOPEW) + I - 1                                          SHADO  110
      IDPEW = IREFTB(2,IRXEW)                                                   SHADO  111
      IAVPEW = IDPEW + IOPCDT(17,JOPEW) + 2*IOPCDT(16,JOPEW)                    SHADO  112
C              INITIALIZE NUMBER OF OH/FINS ON THIS WALL                        SHADO  113
      NXSHAD = 0                                                                SHADO  114
C              GET WINDOWS AND DOORS ON THIS WALL                               SHADO  115
C              IATYPE = 1 FOR WINDOW, 2 FOR DOOR                                SHADO  116
      DO 5000 IATYPE=1,2                                                        SHADO  117
C              NUMBER OF WINDOWS OR DOORS                                       SHADO  118
      NAT = IOPCDT(13,JOPWIN)                                                   SHADO  119
      IF(IATYPE.EQ.2) NAT = IOPCDT(13,JOPDR)                                    SHADO  120
      IF(NAT.EQ.0) GO TO 5000                                                   SHADO  121
      JOPAT = JOPWIN                                                            SHADO  122
      IF(IATYPE.EQ.2) JOPAT = JOPDR                                             SHADO  123
      DO 3100 J=1,NAT                                                           SHADO  124
      IRXAT = IOPCDT(14,JOPAT) + J - 1                                          SHADO  125
C              REF TABLE INDEX OF PARENT WALL                                   SHADO  126
      IRXWL = IREFTB(4,IRXAT)                                                   SHADO  127
      IF(IRXWL.NE.IRXEW) GO TO 3100                                             SHADO  128
      IDPAT = IREFTB(2,IRXAT)                                                   SHADO  129
C              OH/FINS FOR THIS WINDOW OR DOOR                                  SHADO  130
      DO 3200 K=1,3                                                             SHADO  131
C              ATTACHMENT NSAVE AREA VALUES:                                    SHADO  132
C              3=PTR TO OH GEOM         4=PTR TO LEFT FIN GEOM                  SHADO  133
C              5=PTR TO RIGHT FIN GEOM  6=PTR TO SETBACK GEOM                   SHADO  134
C              7=PTR TO SETBACK SHADES                                          SHADO  135
      NSVOHF = K+2                                                              SHADO  136
      IF(IA(IDPAT+NSVOHF).EQ.0) GO TO 3200                                      SHADO  137
      CALL CKAA(IA,LSHADE)                                                      SHADO  138
      LEN = LEN + LSHADE                                                        SHADO  139
      NXSHAD = NXSHAD + 1                                                       SHADO  140
      IPT = IAX                                                                 SHADO  141
      DO II=1,LSHADE                                                            SHADO  142
         IA(IPT+II) = 0                                                         SHADO  143
      ENDDO                                                                     SHADO  144
C              SHADE GEOMETRY PTR                                               SHADO  145
      IA(IPT+1) = IA(IDPAT+NSVOHF+6)                                            OUT1    47
C              SHADE TYPE                                                       SHADO  147
      IA(IPT+4) = 3                                                             SHADO  148
C              SHADE VIS REFL = 1 - WALL SOL ABSORPTANCE                        SHADO  149
      ICNS = ISYMTB(12,IA(IAVPEW+1))                                            STBGEO  10
      CALL PTRS(JOPCNS,ICNS,IRXCN,IDPCN,IAVPCN)                                 STBGEO  11
      ABSEW = AA(IAVPCN+2)                                                      STBGEO  12
      AA(IPT+5) = 1.0 - ABSEW                                                   SHADO  153
C              SHADE GROUND REFL SAME AS WALL'S                                 SHADO  154
      AA(IPT+6) = AA(IAVPEW+2)                                                  SHADO  155
C              SHADE DIFFUSE REFL, SPECULAR REFL AND                            SHADO  156
C              REFL ROUGHNESS SAME AS WALL'S                                    SHADO  157
      DO JJ=1,6                                                                 SHADO  158
         AA(IPT+6+JJ) = AA(IAVPEW+22+JJ)                                        GEO2     3
      ENDDO                                                                     SHADO  160
      IAX = IAX + LSHADE                                                        SHADO  161
 3200 CONTINUE                                                                  SHADO  162
 3100 CONTINUE                                                                  SHADO  163
 5000 CONTINUE                                                                  SHADO  164
C              SAVE NUMBER OF OH/FINS ON THIS WALL                              SHADO  165
      IA(IDPEW+10) = NXSHAD                                                     SHADO  166
C              PTR TO FIRST OH/FIN ON THIS WALL                                 SHADO  167
      IA(IDPEW+11) = 0                                                          SHADO  168
      IF(NXSHAD.NE.0) IA(IDPEW+11) = (NGSHAD+NOHFTO)*LSHADE + 1                 SHADO  169
      NOHFTO = NOHFTO + NXSHAD                                                  SHADO  170
 4000 CONTINUE                                                                  SHADO  171
 6000 CONTINUE                                                                  SHADO  172
C==============SETBACK SHADES================================                   SHADO  173
C              INITIALIZE TOTAL NUMBER OF SETBACK SHADES                        SHADO  174
      NSETB = 0                                                                 SHADO  175
C              IT=1 FOR WINDOW, 2 FOR DOOR                                      SHADO  176
      DO 7000 IT=1,2                                                            SHADO  177
      NT = IOPCDT(13,JOPWIN)                                                    SHADO  178
      IF(IT.EQ.2) NT = IOPCDT(13,JOPDR)                                         SHADO  179
      IF(NT.EQ.0) GO TO 5300                                                    SHADO  180
      JOPT = JOPWIN                                                             SHADO  181
      IF(IT.EQ.2) JOPT = JOPDR                                                  SHADO  182
      DO 5100 J=1,NT                                                            SHADO  183
      IRXT = IOPCDT(14,JOPT) + J - 1                                            SHADO  184
      IDPT = IREFTB(2,IRXT)                                                     SHADO  185
C              INITIALIZE PTR TO SETBACK SHADES                                 SHADO  186
      IA(IDPT+7) = 0                                                            SHADO  187
C              ARE THERE SETBACK SHADES (NON-ZERO PTR TO                        SHADO  188
C              SETBACK GEOM)                                                    SHADO  189
      IF(IA(IDPT+6).EQ.0) GO TO 5100                                            SHADO  190
C              REF TABLE INDEX OF PARENT WALL (ONLY WINDOWS IN                  SHADO  191
C              EXTERIOR-WALLS CAN HAVE SETBACK                                  SHADO  192
      IRXEW = IREFTB(4,IRXT)                                                    SHADO  193
      IDPEW = IREFTB(2,IRXEW)                                                   SHADO  194
      IAVPEW = IDPEW + IOPCDT(17,JOPEW) + 2*IOPCDT(16,JOPEW)                    SHADO  195
C              SET PTR TO SETBACK SHADES                                        SHADO  196
      IA(IDPT+7) = (NGSHAD+NOHFTO+NSETB)*LSHADE + 1                             SHADO  197
      NSETB = NSETB + 3                                                         SHADO  198
C              FILL SETBACK SHADE DATA                                          SHADO  199
      DO 5200 K=1,3                                                             SHADO  200
      CALL CKAA(IA,LSHADE)                                                      SHADO  201
      LEN = LEN + LSHADE                                                        SHADO  202
      IPT = IAX                                                                 SHADO  203
      DO II=1,LSHADE                                                            SHADO  204
         IA(IPT+II) = 0                                                         SHADO  205
      ENDDO                                                                     SHADO  206
C              SHADE GEOMETRY PTR                                               SHADO  207
      IA(IPT+1) = IA(IDPT+12) + 13*(K-1)                                        OUT1    48
C              SHADE TYPE                                                       SHADO  209
      IA(IPT+4) = 4                                                             SHADO  210
C              SHADE VIS REFL = 1.0 - WALL SOL ABSORPTANCE                      SHADO  211
      ICNS = ISYMTB(12,IA(IAVPEW+1))                                            STBGEO  13
      CALL PTRS(JOPCNS,ICNS,IRXCN,IDPCN,IAVPCN)                                 STBGEO  14
      ABSEW = AA(IAVPCN+2)                                                      STBGEO  15
      AA(IPT+5) = 1.0 - ABSEW                                                   SHADO  215
C              SHADE GROUND REFL SAME AS WALL'S                                 SHADO  216
      AA(IPT+6) = AA(IAVPEW+2)                                                  SHADO  217
C              SHADE DIFFUSE REFL, SPECULAR REFL AND                            SHADO  218
C              REFL ROUGHNESS SAME AS WALL'S                                    SHADO  219
      DO JJ=1,6                                                                 SHADO  220
         AA(IPT+6+JJ) = AA(IAVPEW+22+JJ)                                        GEO2     4
      ENDDO                                                                     SHADO  222
      IAX = IAX + LSHADE                                                        SHADO  223
 5200 CONTINUE                                                                  SHADO  224
 5100 CONTINUE                                                                  SHADO  225
 5300 CONTINUE                                                                  SHADO  226
 7000 CONTINUE                                                                  SHADO  227
C              WRITE OUT STANDARD FILE                                          SHADO  228
C              TOTAL NUMBER OF SHADES                                           SHADO  229
      NSHTOT = NGSHAD + NOHFTO + NSETB                                          SHADO  230
      IF(NSHTOT.EQ.0) THEN                                                      SHADO  231
         WRITE(ISTNDF) IZERO, IONE                                              SHADO  232
         WRITE (ISTNDF) IZERO                                                   SHADO  233
      ELSE                                                                      SHADO  234
         WRITE(ISTNDF) NSHTOT, LEN                                              SHADO  235
         CALL WRITEN(ISTNDF,IA(IST),LEN)                                        SHADO  236
         IF(IREPRT(32).EQ.1)                                                    SHADO  237
     1   CALL DUMPIT(20HSHADES              ,IA(IST),LEN)                       SHADO  238
      ENDIF                                                                     SHADO  239
C              SET WINDOW BLOCK SF PTR                                          SHADO  240
      IF (LEN.EQ.0)  LEN = 1                                                    SHADO  241
      IWINB = ISHADB + LEN                                                      SHADO  242
      IAX = IST - 1                                                             NEWEXP  57
      RETURN                                                                    SHADO  243
      END                                                                       SHADO  244
      SUBROUTINE SPACED(JREF,JOPCDT,LKDAT,NAMPTR,LSDPTR,LKPTR,Iphase)           DFTEX3 892
C                                                                               SPACEI   3
C                  THIS ROUTINE PROCESSES THE SPACE COMMAND                     SPACEI   4
C                                                                               SPACEI   7
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               SPACEI   9
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /BOX/    BOX(7,6),BOXDEF(7,6)                                     ALPHA   48
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /IWVALX/ IIWCNP, IIWGEO, IIWSAP, IIWARP, IIWTLP, IIWSFP,          /IWVALX/ 2
     1                  IIWLCP,IIWCRP,KWIWAR,IIWVRP                             /IWVALX/ 3
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON  /MESSG/  IU(2),INU(2),IM1(4),IM2(4),IM3(4),IHW(4),IDW(4)          DFTEX3 499
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
      COMMON  /SPVALX/ IHP, IAP, IVP, ISHPP, IWP, IDPTHP, ISCP, IPRCAP,         /SPVALX/ 2
     1                 IWFP, ILTP, IINFMP, INZHP, IPLP, IPSP, ILKWP,            /SPVALX/ 3
     2                 ITKWP, IEKWP, IPAP, ILWSFP, ITWSFP, IPOLSP,              GEO4     1
     3                 IEQWFP, KWH, KWA, KWV, KWSHP, KWW, KWDPTH,               /SPVALX/ 5
     4                 KWSC, KWLT, KWINFM, KWNZH, KWPL, KWPS,                   /SPVALX/ 6
     5                 KWLKW, KWTKW, KWEKW, KWPA, KWLWSF, KWTWSF,               /SPVALX/ 7
     6                 KWEWSF, IFURTP, IFURFP, IFURWP, IFLRWP, KWWF,            /SPVALX/ 8
     7                 KWFLRW,ILTSP,NINFKY,INFKYP(20),DEFINF(10,4),             LTSYS1   2
     8                 ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM,             DFTEXP 197
     9                 ISPLOCP,ISPDIS,NSPDIS                                    DFTEXP 198
      COMMON  /UGVALX/ IUGCNP, IUGGEO, IUGSAP, IUGARP, IUGTLP, IUGSFP,          /UGVALX/ 2
     1                  IUGLCP,IUGCRP,KWUGAR,IUGVRP                             /UGVALX/ 3
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
C                                                                               SPACEI  31
C                                                                               SPACEI  46
      DIMENSION ELECILL(5),POWTOT(5),XNOLUM(5)                                  LTSYS4  52
      DIMENSION IWFNAM(8)                                                       CWF3     5
      CHARACTER*32 WFNAM                                                        CWF3     6
      EQUIVALENCE (WFNAM,IWFNAM(1))                                             CWF3     7
C                                                                               SPACEI  48
C                                                                               SPACEI  50
      IFLRWT = 0                                                                SPACEI  51
      ILTIN  = 0                                                                SPACEI  52
      IMSSG  = MSGTOT(1)                                                        DFTEXP 214
C              SET SOME POINTERS                                                SPACEI  59
      NSAVE = IOPCDT(17,JOPCDT)                                                 OPLST1 356
C              IKW IS THE FIRST KEYWORD FOR COMMAND                             SPACEI  60
      IKW    = IOPCDT(9,JOPCDT)                                                 SPACEI  61
C              NKW IS THE NUMBER OF KEYWORDS FOR THIS COMMAND                   SPACEI  62
      NKW    = IOPCDT(10,JOPCDT)                                                SPACEI  63
C              LVAL IS THE LENGTH OF THE VALUE ARRAY                            SPACEI  64
      LVAL   = IOPCDT(16,JOPCDT)                                                SPACEI  65
C              IAVPT1 IS THE START OF THE VALUE BLOCK                           4XAA   426
      IAVPT1 = IREFTB(2,JREF) + NSAVE                                           DEF2   217
      IAVPTR = IAVPT1 + LVAL                                                    FIX9    19
C              CHECK FOR BOTH FLOOR-WEIGHT AND WEIGHTING-FACTOR                 SPACEI 107
      IF (NOVAL(AA(IAVPTR+IFLRWP)) .NE. 0)  IFLRWT = 1                          SPACEI 108
      IF ((IFLRWT .EQ. 0) .AND. (NOVAL(AA(IAVPTR+ILTP)) .NE. 0))                SPACEI 109
     1   ILTIN = 1                                                              SPACEI 110
      IF (IUNPKB(1,5,IA(IAVPT1+IWFP)).EQ.5 .AND.                                TYP1    50
     1    IUNPKB(1,5,IA(IAVPT1+IFLRWP)).EQ.5)                                   TYP1    51
     $ CALL MSG2(72,KONTXT(1,KWWF+IKW-1),KONTXT(1,KWFLRW+IKW-1),LZ,LZ)          NEWEXP  58
  100 IF(Iphase .ne. 2)  THEN                                                   DFTEX3 895
        CALL LSDFIL(JOPCDT,ISYMTB,KONTXT(1,IKW),NKW,AA(IAVPT1+1),               DFTEX3 896
     $              AA(LKDAT+1),LSDPTR,ISYMTB(1,LKPTR),NAMPTR,LVAL)             DFTEX3 897
        IF(Iphase .eq. 1) RETURN                                                DFTEX3 898
      ELSE                                                                      DFTEX3 899
        IF(IREPRT(35) .eq. 1)                                                   DFTEX3 900
     $    CALL DUMPIT ('ValArray After  Exps',AA(IAVPT1+1),3*LVAL)              DFTEX3 901
      ENDIF                                                                     DFTEX3 902
      IAVPTR = IAVPT1 + 2*LVAL                                                  4XAA   443
      KSOWHA = ITYPLS(UNDEF(3))                                                 DFTEX3 903
C             LTG-SPEC-METHOD                                                   LTSYS4  54
      LSPECM = 0                                                                DFTEX3 904
      IF(NOVAL(IA(IAVPTR+ILSPECM)).ne.0)                                        DFTEX3 905
     $     LSPECM = ISYMTB(12,IA(IAVPTR+ILSPECM))                               DFTEX3 906
C                                                                               LTSYS4  56
C             ERROR CHECKS FOR LTG-SPEC-METHOD = LUMINAIRE-COUNT                LTSYS4  57
C                                                                               LTSYS4  58
      IF(LSPECM.EQ.1) THEN                                                      LTSYS4  59
         IF(NOVAL(AA(IAVPTR+ILTGSYS)).EQ.0) THEN                                DFTEX3 907
            CALL MSG2(50,'LTG-SPEC-METHOD ','LUMINAIRE-COUNT ',                 ERR-01 707
     $                   'LIGHTING-SYSTEM ',II)                                 ERR-01 708
         GO TO 800                                                              LTSYS4  66
         ENDIF                                                                  LTSYS4  67
         DO LZ = 1,5                                                            LTSYS4  68
C              SET LIGHTING-KW, LIGHTING-W/AREA AND ELEC-ILLUMINANCE            LTSYS5   3
C              TO -77777.                                                       LTSYS5   4
            AA(IAVPTR+ILKWP+LZ-1) =SOWHAT                                       DFTEXP 217
            AA(IAVPTR+ILWSFP+LZ-1)=UNUSE                                        DFTEX3 908
            AA(IAVPTR+IELILL+LZ-1)=SOWHAT                                       DFTEXP 219
         ENDDO                                                                  LTSYS5   8
C              CHECK THAT NO-OF-LUMINAIRES IS DEFINED FOR EACH SUBSYSTEM        LTSYS5   9
         DO LZ = 1,5                                                            LTSYS5  10
            ALTSYS = AA(IAVPTR+ILTGSYS+LZ-1)                                    DFTEXP 220
            IF(NOVAL(ALTSYS).EQ.0) GO TO 800                                    DFTEX3 909
            IF(NOVAL(AA(IAVPTR+ILUMNO+LZ-1)).EQ.0) THEN                         DFTEX3 910
               CALL MSG2(124,'LTG-SPEC-METHOD ','LUMINAIRE-COUNT ',             ERR-01 709
     $                       'NO-OF-LUMINAIRES','lighting system ')             ERR-01 710
            GO TO 800                                                           LTSYS4  84
            ENDIF                                                               LTSYS4  85
         ENDDO                                                                  LTSYS4  86
      ENDIF                                                                     LTSYS4  87
C                                                                               LTSYS4  88
C             ERROR CHECKS FOR LTG-SPEC-METHOD = ILLUMINANCE                    LTSYS4  89
C                                                                               LTSYS4  90
      IF(LSPECM.EQ.2) THEN                                                      LTSYS4  91
         IF(NOVAL(AA(IAVPTR+ILTGSYS)).EQ.0) THEN                                DFTEX3 911
         CALL MSG2(50,'LTG-SPEC-METHOD ','ILLUMINANCE     ',                    ERR-01 711
     $                'LIGHTING-SYSTEM ',II)                                    ERR-01 712
         GO TO 800                                                              LTSYS4  98
         ENDIF                                                                  LTSYS4  99
         DO LZ = 1,5                                                            LTSYS4 100
C              SET LIGHTING-KW, LIGHTING-W/AREA AND NO-OF-LUMINAIRES            LTSYS5  21
C              TO -77777.                                                       LTSYS5  22
            AA(IAVPTR+ILKWP+LZ-1) =SOWHAT                                       DFTEXP 223
            AA(IAVPTR+ILWSFP+LZ-1)=UNUSE                                        DFTEX3 912
            AA(IAVPTR+ILUMNO+LZ-1)=SOWHAT                                       DFTEXP 225
         ENDDO                                                                  LTSYS5  26
C              CHECK THAT ELEC-ILLUMINANCE IS DEFINED FOR EACH SUBSYSTEM        LTSYS5  27
         DO LZ = 1,5                                                            LTSYS5  28
            ALTSYS = AA(IAVPTR+ILTGSYS+LZ-1)                                    DFTEXP 226
            IF(NOVAL(ALTSYS).EQ.0) GO TO 800                                    DFTEX3 913
            IF(NOVAL(AA(IAVPTR+IELILL+LZ-1)).EQ.0) THEN                         DFTEX3 914
               CALL MSG2(124,'LTG-SPEC-METHOD ','ILLUMINANCE     ',             ERR-01 713
     $                       'ELEC-ILLUMINANCE','lighting system ')             ERR-01 714
               GO TO 800                                                        LTSYS4 116
            ENDIF                                                               LTSYS4 117
         ENDDO                                                                  LTSYS4 118
C             Can't calc SPACE CU is AREA is unknown (means illegal inp)        DFTEX3 915
         IF(NOVAL(AA(IAVPTR+IAP)).eq.0)  IMSSG = IMSSG - 1                      DFTEX3 916
      ENDIF                                                                     LTSYS4 119
C                                                                               LTSYS4 120
C             IF LTG-SPEC-METHOD = POWER-DEFINITION SET LIGHTING-SYSTEM,        LTSYS5  37
C             NO-OF-LUMINAIRES AND ELEC-ILLUMINANCE TO -77777.                  LTSYS5  38
C                                                                               LTSYS5  39
      IF(LSPECM.EQ.0) THEN                                                      LTSYS5  40
         DO LZ = 1,5                                                            LTSYS5  41
            AA(IAVPTR+ILTGSYS+LZ-1)= UNUSE                                      DFTEX3 917
            AA(IAVPTR+ILUMNO+LZ-1) = UNUSE                                      DFTEX3 918
            AA(IAVPTR+IELILL+LZ-1) = UNUSE                                      DFTEX3 919
         ENDDO                                                                  LTSYS5  45
      ENDIF                                                                     LTSYS5  46
  800 CONTINUE                                                                  LTSYS4 134
C                                                                               LTSYS4 135
C              IF LIGHTING-SYSTEM REQUESTED AND NO ERRORS,                      LTSYS4 136
C              MAKE PRELIMINARY CALL TO SPACELTG WITH DEFAULT CAVITY            LTSYS4 137
C              REFLECTANCES (SINCE ALL ROOM SURFACES MAY NOT HAVE               LTSYS4 138
C              BEEN DEFINED YET). FINAL SPACELTG CALC WITH ACTUAL               LTSYS4 139
C              SURFACE PROPERTIES IS DONE IN SPACEO.                            LTSYS4 140
C                                                                               LTSYS4 141
      IF((NOVAL(AA(IAVPTR+ILTGSYS)).NE.0).and.(MSGTOT(1).LE.IMSSG)) THEN        DFTEX3 920
         ISP = JREF - IOPCDT(14,JOPCDT) + 1                                     LTSYS4 144
         IF(IPDFLG .eq. 1) THEN                                                 DFTEX3 921
           ICALL = 2                                                            DFTEX3 922
         ELSE                                                                   DFTEX3 923
           ICALL = 1                                                            DFTEX3 924
         ENDIF                                                                  DFTEX3 925
         CALL SPACELTG(ICALL,ISP,ELECILL,POWTOT,XNOLUM,                         DFTEX3 926
     1                   ELECILTOT,POWTOTTOT)                                   LTSYS4 146
C              STORE RESULTS FOR DISPLAY                                        LTSYS4 147
         DO ILS = 1,5                                                           LTSYS4 148
            AA(IAVPTR+ILUMNO+ILS-1) = XNOLUM(ILS)                               LTSYS4 149
            AA(IAVPTR+IELILL+ILS-1) = ELECILL(ILS)                              LTSYS4 150
            AA(IAVPTR+ILKWP+ILS-1) = 0.001*POWTOT(ILS)                          DFTEXP 233
         ENDDO                                                                  LTSYS4 152
C              IF DAYLIGHTING = YES, RESET DAYLIGHTING SET POINTS               DFTEX3 927
C              TO BE CONSISTENT WITH ELECTRIC ILLUMINANCE FROM LIGHTING         DFTEX3 928
C              SYSTEM(S) (done when in interactive defaulting mode only)        DFTEX3 929
         IF((ISYMTB(12,IA(IAVPTR+103)).EQ.1). and. (IPDFLG.EQ.1)) THEN          DFTEX3 930
           IF(ABS(AA(IAVPTR+112)-ELECILTOT).GT. 1.0) THEN                       DFTEX3 931
             CALL MSG2(127,1,AA(IAVPTR+112),ISYMTB(1,NAMPTR), ELECILTOT)        DFTEX3 932
             AA(IAVPTR+112) = ELECILTOT                                         DFTEX3 933
           ENDIF                                                                DFTEX3 934
           IF(ABS(AA(IAVPTR+113)-ELECILTOT).GT. 1.0 .AND.                       DFTEX3 935
     $       ITYPLS(AA(IAVPTR+107)).NE.ITYPLS(UNFILD)) THEN                     DFTEX3 936
             CALL MSG2(127,2,AA(IAVPTR+113),ISYMTB(1,NAMPTR), ELECILTOT)        DFTEX3 937
             AA(IAVPTR+113) = ELECILTOT                                         DFTEX3 938
           ENDIF                                                                DFTEX3 939
         ENDIF                                                                  DFTEX3 940
      ENDIF                                                                     LTSYS4 153
      IF (NOVAL(AA(IAVPTR+ILKWP))  .NE. 0  .and.                                DFTEX3 941
     $    NOVAL(AA(IAVPTR+ILWSFP)) .NE. 0)                                      DFTEX3 942
     $ CALL MSG2(59,KONTXT(1,KWLKW+IKW-1),KONTXT(1,KWLWSF+IKW-1),LZ,LZ)         NEWEXP  59
      IF (NOVAL(AA(IAVPTR+ITKWP))  .NE. 0  .and.                                DFTEX3 943
     1    NOVAL(AA(IAVPTR+ITWSFP)) .NE. 0)                                      DFTEX3 944
     $ CALL MSG2(59,KONTXT(1,KWTKW+IKW-1),KONTXT(1,KWTWSF+IKW-1),LZ,LZ)         NEWEXP  60
      IF (NOVAL(AA(IAVPTR+IEKWP))  .NE. 0  .and.                                DFTEX3 945
     1    NOVAL(AA(IAVPTR+IEQWFP)) .NE. 0)                                      DFTEX3 946
     $ CALL MSG2(59,KONTXT(1,KWEKW+IKW-1),KONTXT(1,KWEWSF+IKW-1),LZ,LZ)         NEWEXP  61
C              Calculate total lighting and equipment values and                DFTEXP 234
C              place them into the display variables                            DFTEXP 235
      DO LZ = 1,6                                                               DFTEXP 236
         AA(IAVPTR+ISPDIS+LZ-1) = 0.                                            DFTEXP 237
      ENDDO                                                                     DFTEXP 238
      DO LZ = 1,5                                                               DFTEXP 239
         IF(NOVAL(AA(IAVPTR+ILKWP+LZ-1)).eq.1) THEN                             DFTEXP 240
           AA(IAVPTR+ISPDIS+0) = AA(IAVPTR+ISPDIS+0) +                          DFTEXP 241
     $            AA(IAVPTR+ILKWP+LZ-1)                                         DFTEXP 242
         ENDIF                                                                  DFTEXP 243
         IF(NOVAL(AA(IAVPTR+ILWSFP+LZ-1)).eq.1 .and.                            DFTEXP 244
     $            NOVAL(AA(IAVPTR+IAP)).eq.1) THEN                              DFTEXP 245
           AA(IAVPTR+ISPDIS+0) = AA(IAVPTR+ISPDIS+0) +                          DFTEXP 246
     $            AA(IAVPTR+ILWSFP+LZ-1)*AA(IAVPTR+IAP)*0.001                   DFTEXP 247
         ENDIF                                                                  DFTEXP 248
         IF(NOVAL(AA(IAVPTR+IEKWP+LZ-1)).eq.1) THEN                             DFTEXP 249
           AA(IAVPTR+ISPDIS+2) = AA(IAVPTR+ISPDIS+2) +                          DFTEXP 250
     $            AA(IAVPTR+IEKWP+LZ-1)                                         DFTEXP 251
         ENDIF                                                                  DFTEXP 252
         IF(NOVAL(AA(IAVPTR+IEQWFP+LZ-1)).eq.1 .and.                            DFTEXP 253
     $            NOVAL(AA(IAVPTR+IAP)).eq.1) THEN                              DFTEXP 254
           AA(IAVPTR+ISPDIS+2) = AA(IAVPTR+ISPDIS+2) +                          DFTEXP 255
     $            AA(IAVPTR+IEQWFP+LZ-1)*AA(IAVPTR+IAP)*0.001                   DFTEXP 256
         ENDIF                                                                  DFTEXP 257
      ENDDO                                                                     DFTEXP 258
      IF(NOVAL(AA(IAVPTR+ITKWP)).eq.1)                                          DFTEXP 259
     $         AA(IAVPTR+ISPDIS+4) = AA(IAVPTR+ITKWP)                           DFTEXP 260
      IF(NOVAL(AA(IAVPTR+ITWSFP)).eq.1 .and.                                    NEWEXP  62
     $            NOVAL(AA(IAVPTR+IAP)).eq.1)                                   DFTEXP 262
     $         AA(IAVPTR+ISPDIS+4) =  AA(IAVPTR+ISPDIS+4) +                     DFTEXP 263
     $         AA(IAVPTR+ITWSFP)*AA(IAVPTR+IAP)*0.001                           DFTEXP 264
      IF(NOVAL(AA(IAVPTR+IAP)).eq.1 .and. AA(IAVPTR+IAP).ne.0) THEN             DFTEXP 265
        AA(IAVPTR+ISPDIS+1) = 1000.*AA(IAVPTR+ISPDIS+0)/AA(IAVPTR+IAP)          DFTEXP 266
        AA(IAVPTR+ISPDIS+3) = 1000.*AA(IAVPTR+ISPDIS+2)/AA(IAVPTR+IAP)          DFTEXP 267
        AA(IAVPTR+ISPDIS+5) = 1000.*AA(IAVPTR+ISPDIS+4)/AA(IAVPTR+IAP)          DFTEXP 268
      ENDIF                                                                     DFTEXP 269
C              IF W-F DOESN'T EXIST, CREATE IT                                  CWF3     8
      IF (NOVAL(IA(IAVPTR+IWFP)).EQ.0) THEN                                     CWF3     9
C              CREATE NAME                                                      CWF3    10
          NUMWF = IOPCDT(13,JOPWF) + 1                                          CWF3    11
          CALL FILLN(IBLANK(1),IWFNAM(1),8)                                     CWF3    12
          WRITE (WFNAM,1010) NUMWF                                              CWF3    13
 1010     FORMAT('Weighting Factor',I4,12X)                                     FIX8    78
          CALL SYMDEF(IA(1),IWFNAM,IOPCDT(11,JOPWF),JSYMWF)                     CWF3    15
          CALL INCRRF(IA(1),IA(1),JOPWF,JSYMWF,JREFWF)                          CWF3    16
          IA(IAVPTR+IWFP) = JSYMWF                                              CWF3    17
          IREFTB(2,JREFWF) = IAX                                                CWF3    18
          IWFDP = IAX + IOPCDT(17,JOPWF)                                        CWF3    19
          LVALWF = IOPCDT(16,JOPWF)                                             CWF3    20
          IWFDP2 = IWFDP + LVALWF                                               CWF3    21
          LTOTWF = IOPCDT(17,JOPWF) + 3*LVALWF + IOPCDT(18,JOPWF)               CWF3    22
          CALL CKAA(IA,LTOTWF)                                                  CWF3    23
          CALL FILLN(1,IA(IWFDP+1),LVALWF)                                      DFTEXP 270
          CALL FILLN(UNDEF(1),AA(IWFDP2+1),LVALWF)                              DFTEX4 518
          CALL FILLN(UNDEF(3),AA(IWFDP2+LVALWF+1),LVALWF)                       DFTEX4 519
          IAX = IAX + LTOTWF                                                    CWF3    26
      END IF                                                                    CWF3    27
      IPolyi = ISINP(JREF,NSAVE,IPOLSP ,LKDAT,LVAL,VALUE)                       DFTEX3 947
      IAreai = ISINP(JREF,NSAVE,IAP    ,LKDAT,LVAL,VALUE)                       DFTEX3 948
      Idti   = ISINP(JREF,NSAVE,IDPTHP ,LKDAT,LVAL,VALUE)                       DFTEX3 949
      IWti   = ISINP(JREF,NSAVE,IWP    ,LKDAT,LVAL,VALUE)                       DFTEX3 950
      IF(IPolyi .gt. 0) THEN                                                    DFTEX3 951
        IF(IAreai .gt. 0)                CALL MSG2(60,IM2,IU,IM1,IU)            DFTEX3 952
        IF((Idti.gt.0) .OR. (Iwti.gt.0)) CALL MSG2(60,IM2,IU,IDW,IU)            DFTEX3 953
      ENDIF                                                                     DFTEX3 954
      IF((IAreai.gt.0) .AND. ((Idti.gt.0) .OR. (Iwti.gt.0)))                    DFTEX3 955
     $  CALL MSG2(60,IM1,IU,IDW,IU)                                             DFTEX3 956
      RETURN                                                                    SPACEI 344
      END                                                                       SPACEI 345
      SUBROUTINE SPACEO                                                         SPACEO   2
C                                                                               SPACEO   3
C               WRITE SPACE BLOCK TO STANDARD FILE                              SPACEO   4
C                                                                               SPACEO   5
C               SPACEO USES 27 WORDS OF COMMWK                                  SPACEO   6
C                                                                               SPACEO   7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISPLST/ ISPLST(9999),ISPLOC(9999)                                 -048a    8
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /JOPS  / JSOP,JZOP,JSROP,JCFOP,ISSOPS(7),IZSOPS(3)                 -048b   22
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
      COMMON  /SPVALX/ IHP, IAP, IVP, ISHPP, IWP, IDPTHP, ISCP, IPRCAP,         /SPVALX/ 2
     1                 IWFP, ILTP, IINFMP, INZHP, IPLP, IPSP, ILKWP,            /SPVALX/ 3
     2                 ITKWP, IEKWP, IPAP, ILWSFP, ITWSFP, IPOLSP,              GEO4     1
     3                 IEQWFP, KWH, KWA, KWV, KWSHP, KWW, KWDPTH,               /SPVALX/ 5
     4                 KWSC, KWLT, KWINFM, KWNZH, KWPL, KWPS,                   /SPVALX/ 6
     5                 KWLKW, KWTKW, KWEKW, KWPA, KWLWSF, KWTWSF,               /SPVALX/ 7
     6                 KWEWSF, IFURTP, IFURFP, IFURWP, IFLRWP, KWWF,            /SPVALX/ 8
     7                 KWFLRW,ILTSP,NINFKY,INFKYP(20),DEFINF(10,4),             LTSYS1   2
     8                 ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM,             DFTEXP 197
     9                 ISPLOCP,ISPDIS,NSPDIS                                    DFTEXP 198
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
C                                                                               SPACEO  26
      COMMON /LMVALX/                                                           /LMVALX/ 2
     1  ILUMTYP,ILMPTYP,ILMPNO,IBALTYP,ILTGCU,IRADFR,ILUMOUT,IPOWIN,            /LMVALX/ 3
     2  IRCR0,IRCR5,IRCR10,IMAXLMP,ICONFIG,IACCAT,IACCONF,                      /LMVALX/ 4
     3  ILMPCAT,ILMPLUM,ILMPPOW,ILMPDPR,ACF(9,6),PCF(9,6)                       /LMVALX/ 5
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      EQUIVALENCE (IKW,COMMWK(1)),(NKW,COMMWK(2)),                              SPACEO  27
     1            (IDP,COMMWK(3)),(IAVPTR,COMMWK(4)),                           SPACEO  28
     2            (NAMPTR,COMMWK(5)),(IWPS,COMMWK(6)),                          SPACEO  29
     3            (IAXS,COMMWK(7)),(IST,COMMWK(8)),                             SPACEO  30
     4            (IPT,COMMWK(9)),(IDPN,COMMWK(10)),                            SPACEO  31
     5            (IAPTR,COMMWK(11)),(NIWS,COMMWK(13)),                         SPACEO  32
     6            (IAPTRW,COMMWK(12)),(IAPTRU,COMMWK(14)),                      SPACEO  33
     7            (IWAPTR,COMMWK(15)),                                          SPACEO  34
     8            (ISPEW,COMMWK(16)),(ISPEWN,COMMWK(17)),                       SPACEO  35
     9            (ISPUG,COMMWK(18)),(ISPUGN,COMMWK(19)),                       SPACEO  36
     1            (LVAL,COMMWK(20)),(LEN,COMMWK(21)),                           SPACEO  37
     2            (IEWT,COMMWK(22)),(IUGT,COMMWK(23)),                          SPACEO  38
     3            (IWDP,COMMWK(24)),(IWFT,COMMWK(25)),                          SPACEO  39
     4            (NKWIW,COMMWK(26)),(IKWIW,COMMWK(27))                         SPACEO  40
C                                                                               SPLIST   1
      DIMENSION JSPLST(9999)                                                    -048a   14
C                                                                               SPACEO  41
      DIMENSION ELECILL(5),POWTOT(5),XNOLUM(5)                                  LTSYS4 154
      IKYOP = <+ZX> + 1                                                         -44d5   20
      IWPS   = 1                                                                SPACEO  48
      LEN    = 1                                                                SPACEO  49
C               OBTAIN SOME QUANTITIES FROM THE COMMAND TABLE                   SPACEO  50
      IF (NSP .EQ. 0)  GO TO 1000                                               SPACEO  51
      NKW    = IOPCDT(10,JOPSP)                                                 SPACEO  52
      IKW    = IOPCDT(9,JOPSP)                                                  SPACEO  53
      LVAL   = IOPCDT(16,JOPSP)                                                 SPACEO  55
C               SAVE SPACE FOR OUTPUT RECORD BUFFER                             SPACEO  58
      LEN    = NSP*LSPACE                                                       SPACEO  59
      NIW = IOPCDT(13,JOPIW)                                                    SPACEO  60
      LEN2 = LEN + 2*NIW                                                        SPACEO  61
      CALL CKAA(IA,LEN2)                                                        SPACEO  62
      IAXS   = IAX + LEN                                                        SPACEO  63
C               IST IS WHERE THE OUTPUT BUFFER STARTS                           SPACEO  64
      IST    = IAX + 1                                                          SPACEO  65
C               IPT IS WHERE THE NEXT SPACE GOES                                SPACEO  66
      IPT    = IAX                                                              SPACEO  67
C               FILL OUTPUT BUFFER WITH ZEROES                                  SPACEO  68
      CALL FILLN(0.,AA(IST),LEN2)                                               SPACEO  69
C              LOOP THROUGH INTERIOR WALLS TO CHANGE SYMBOL TABLE               SPACEO  70
C              POINTERS TO VALUES                                               SPACEO  71
      IF (NIW .EQ. 0)  GO TO 30                                                 SPACEO  72
      NKWIW  = IOPCDT(10,JOPIW)                                                 SPACEO  74
      IKWIW  = IOPCDT(9,JOPIW)                                                  SPACEO  75
      DO 20 IW=1,NIW                                                            SPACEO  76
      IRXIW = IOPCDT(14,JOPIW) + IW - 1                                         REFTB1 316
      IAVPTR = MVTOSM(IRXIW,JOPIW,0)                                            OUT1    49
      CALL SYMFIL(ISYMTB,KONTXT(1,IKWIW),NKWIW,IA(IAVPTR+1))                    SPACEO  78
   20 CONTINUE                                                                  REFTB1 318
   30 CONTINUE                                                                  SPACEO  80
      NF = NFL                                                                  ATTRF1 365
      IF (NFL.EQ.0) NF=1                                                        ATTRF1 366
      ISFPTR = 1                                                                ATTRF1 367
C              COUNTER FOR SPACE ORDERING ON SF                                 SPLIST   3
      NSPSF = 0                                                                 SPLIST   4
C              INITIALIZE ARRAY FOR REORDERING ISPLST                           SPLIST   5
      DO J = 1,NSP                                                              SPLIST   6
          JSPLST(J) = ISPLST(J)                                                 SPLIST   7
      ENDDO                                                                     SPLIST   8
C              LOOP OVER FLOORS                                                 ATTRF1 368
      DO 600 IFL=1,NF                                                           ATTRF1 369
        NFLSP = 0                                                               ATTRF1 370
        IF (NFL.GT.0) THEN                                                      ATTRF1 371
          IRXFL = IOPCDT(14,JOPFL) + IFL - 1                                    ATTRF1 372
          IDPFL = IREFTB(2,IRXFL)                                               ATTRF1 373
          IAVPFL = IDPFL + IOPCDT(17,JOPFL) + 2*IOPCDT(16,JOPFL)                4XAA   464
C              STORE SPACE SF PTR IN FLOOR DATA ARRAY                           ATTRF1 375
          IA(IDPFL+3) = ISFPTR                                                  GEO4   146
        ELSE                                                                    ATTRF1 377
          IRXFL = 0                                                             ATTRF1 378
          IDPFL = 0                                                             ATTRF1 379
          IAVPFL = 0                                                            ATTRF1 380
        END IF                                                                  ATTRF1 381
C              LOOP OVER SPACES                                                 ATTRF1 382
        DO 500 ISP=1,NSP                                                        ATTRF1 383
          IRX = IOPCDT(14,JOPSP) + ISP - 1                                      ATTRF1 384
          JOPcur  = JOPSP                                                       FIX14  237
          JREFcur = IRX                                                         FIX14  238
C              IF THERE ARE FLOORS, FIND ALL SPACES IN FLOOR "IRXFL"            ATTRF1 385
          IF (NFL.GT.0 .AND. IREFTB(4,IRX).NE.IRXFL) GO TO 500                  ATTRF1 386
C               PICK UP NAME AND DATA POINTERS                                  ATTRF1 387
          NAMPTR = IREFTB(1,IRX)                                                ATTRF1 389
          IDP = IREFTB(2,IRX)                                                   ATTRF1 390
          IAVPTR = IDP + IOPCDT(17,JOPSP) + 2*IOPCDT(16,JOPSP)                  FIX4    44
C               MOVE IN NAME                                                    ATTRF1 391
          IF (NAMPTR .GT. 0)  CALL MOVEN(ISYMTB(1,NAMPTR),IA(IPT+1),8)          BIGNAM 117
C              SET THE NUMBER OF EW'S AND THE EW SF POINTER                     ATTRF1 393
          IA(IPT+<+NEXTS>+1) = IA(IDP+2)                                        -44d5   21
          IA(IPT+<+MZEXT>+1) = IA(IDP+3)                                        -44d5   22
C              SET THE NUMBER OF UG'S AND THE UG SF POINTER                     ATTRF1 396
          IA(IPT+<+NSUG>+1) = IA(IDP+4)                                         -44d5   23
          IA(IPT+<+MZUG>+1) = IA(IDP+5)                                         -44d5   24
C               SPACE LIST CORRESPONDING TO ORDER OF                            SPLIST   9
C               SPACES ON STANDARD FILE                                         SPLIST  10
          NSPSF = NSPSF + 1                                                     -44d5   25
          DO JSP = 1,NSP                                                        -44d5   26
            IF(ISPLST(JSP).EQ.ISP) JSPLST(JSP) = NSPSF                          -44d5   27
          ENDDO                                                                 -44d5   28
C              ISPLOC(ISP) IS OCCURRENCE NUMBER ON STANDARD FILE FOR            LTSYS3  10
C              SPACE WITH BDL OCCURRENCE NUMBER ISP                             LTSYS3  11
          ISPLOC(ISP) = NSPSF                                                   -44d5   29
C              LOOP THRU INTERIOR WALLS AND FIND THE                            ATTRF1 399
C              ONES FOR THIS SPACE                                              ATTRF1 400
          NIWS   = 0                                                            ATTRF1 401
          IF (NIW .EQ. 0)  GO TO 300                                            ATTRF1 402
          DO 200 IW=1,NIW                                                       ATTRF1 403
          IRXIW = IOPCDT(14,JOPIW) + IW - 1                                     ATTRF1 404
          IWDP = IREFTB(2,IRXIW)                                                ATTRF1 405
          IWVPTR = MSIMPT(IRXIW,JOPIW,0)                                        OUT1    50
          IF (IRX.NE.IREFTB(4,IRXIW)) GO TO 120                                 ATTRF1 406
          NIWS   = NIWS + 1                                                     ATTRF1 407
          IA(IAXS+1) = LIW*(IW-1) + 1                                           ATTRF1 408
          IAXS   = IAXS + 1                                                     ATTRF1 409
          GO TO 200                                                             ATTRF1 410
  120     IF (ISP.NE.IA(IWVPTR+1)) GO TO 200                                    4XAA   466
          NIWS   = NIWS + 1                                                     ATTRF1 412
          IA(IAXS+1) = LIW*(IW-1) + 1                                           ATTRF1 413
          IAXS   = IAXS + 1                                                     ATTRF1 414
  200     CONTINUE                                                              ATTRF1 415
  300     IA(IPT+<+NINTS>+1) = NIWS                                             -44d5   30
          IA(IPT+<+MZINT>+1) = IWPS                                             -44d5   31
          IWPS   = IWPS + NIWS                                                  ATTRF1 418
          IAVPTS = MVTOSM(IRX,JOPSP,0)                                          FIX4    45
c              Set *ICE-RINK flag keyword to be same as associated zone         IcRink   5
          Nzone = IOPCDT(13,JZOP)                                               IcRink   6
          DO  Neq=1,Nzone                                                       IcRink   7
            IRXzn = IOPCDT(14,JZOP) + Neq-1      ! zone ref index               IcRink   8
            IDPzn = IREFTB(2,IRXzn)              ! data pointer                 IcRink   9
            INzn  = IREFTB(1,IRXzn)              ! zone symbol                  IcRink  10
c              skip if deleted                                                  IcRink  11
            IF (IDPzn .EQ. 0  .OR.  INzn .EQ. 0)  CYCLE                         IcRink  12
            IDPzn3 = IDPzn + IOPCDT(17,JZOP) + 2*IOPCDT(16,JZOP)                IcRink  13
c              check if this zone references this space - note that offset      IcRink  14
c              of 5 is for 3 subcommands and *COST                              IcRink  15
            ISPzn  = IA(IDPzn3 + (<+SPACE>-<+ZONE-TYPE>) + 5)                   IcRink  16
            IF (ISPzn .EQ. NAMPTR)  THEN                                        IcRink  17
c                 set space ice-rink flag to zone ice-rink flag                 IcRink  18
              IA(IAVPTS+9) = IA(IDPzn3+(<+zn:ICE-RINK>-<+ZONE-TYPE>)+5)         IcRink  19
              EXIT                                                              IcRink  20
            ENDIF                                                               IcRink  21
          ENDDO                                                                 IcRink  22
C              RESET SPACE->FLOOR-MULTIPLIER TO FLOOR->MULTIPLIER               ATTRF1 420
C              IF FLOOR->MULTIPLIER > 1.0                                       ATTRF1 421
          IF (IAVPFL.GT.0) THEN                                                 ATTRF1 422
            IF (AA(IAVPFL+1).GT.1.0) AA(IAVPTS+152)=AA(IAVPFL+1)                FIX4    46
          END IF                                                                ATTRF1 426
C              CONVERT SYMBOL TABLE POINTERS TO VALUES                          ATTRF1 427
          CALL SYMFIL(ISYMTB,KONTXT(1,IKW),NKW,IA(IAVPTS+1))                    FIX4    47
C              CALCULATE WEIGHTING FACTOR POINTER                               ATTRF1 429
          IF ( (NOVAL(IA(IAVPTS+IWFP)) .NE. 0) .AND.                            FIX4    48
     1       (IA(IAVPTS+IWFP) .NE. 0) )  IA(IAVPTS+IWFP) =                      FIX4    49
     2      1 + (IABS(IA(IAVPTS+IWFP))-1)*LWF                                   FIX4    50
C              MOVE IN DAYLTG REF PTS AND VIEW AZ IN BCS                        LTSYS1 174
C              Move daylighting Ref pts and View AZs (they are in BCS)          -44d5   32
          IRFPT = IA(IDP+9)                                                     -44d5   33
          IF(IRFPT.NE.0) THEN                                                   -44d5   34
            CALL MOVEN(AA(IRFPT+1),AA(IAVPTS+104),3)                            -44d5   35
            IF (METIN.EQ.1)  CALL KDIV(AA(IAVPTS+104),15,1,METIN)               -44d5   36
            AA(IAVPTS+116) = AA(IRFPT+4)                                        -44d5   37
          ENDIF                                                                 -44d5   38
          IRFPT = IA(IDP+10)                                                    -44d5   39
          IF(IRFPT.NE.0) THEN                                                   -44d5   40
            CALL MOVEN(AA(IRFPT+1),AA(IAVPTS+107),3)                            -44d5   41
            IF (METIN.EQ.1)  CALL KDIV(AA(IAVPTS+107),15,1,METIN)               -44d5   42
            AA(IAVPTS+215) = AA(IRFPT+4)                                        -44d5   43
          ENDIF                                                                 -44d5   44
C               CALCULATE CONNECTED LIGHTING POWER WHEN LIGHTING                LTSYS1 186
C               SYSTEM IS SPECIFIED                                             LTSYS1 187
      IF(NOVAL(AA(IAVPTR+ILTGSYS)).NE.0)                                        DFTEX3 957
     1   CALL SPACELTG(2,ISP,ELECILL,POWTOT,XNOLUM,                             FIX4    55
     2                    ELECILTOT,POWTOTTOT)                                  LTSYS4 156
C              IF LIGHTING SYSTEM DEFINED PUT LUMINAIRE POWER IN                LTSYS1 190
C              LIGHTING-KW AND MOVE IN ELEC ILLUMINANCE                         LTSYS1 191
      IF(NOVAL(AA(IAVPTR+ILTGSYS)).NE.0) THEN                                   DFTEX3 958
         MLUMZFR = 1                                                            LTSYS1 195
         DO ILS = 1,5                                                           LTSYS1 196
            AA(IAVPTS+58+ILS-1) = POWTOT(ILS)/1000.                             FIX4    56
            AA(IAVPTS+IELILL+ILS-1) = ELECILL(ILS)                              FIX4    57
            AA(IAVPTS+192+ILS-1) = XNOLUM(ILS)                                  FIX4    58
            AA(IAVPTR+58+ILS-1) = POWTOT(ILS)/1000.                             LTSYS4 158
            AA(IAVPTR+IELILL+ILS-1) = ELECILL(ILS)                              LTSYS4 159
            AA(IAVPTR+192+ILS-1) = XNOLUM(ILS)                                  LTSYS4 160
         ENDDO                                                                  LTSYS1 208
C              IF DAYLIGHTING = YES, RESET DAYLIGHTING SET POINTS               LTSYS1 209
C              TO BE CONSISTENT WITH ELECTRIC ILLUMINANCE FROM LIGHTING         LTSYS1 210
C              SYSTEM(S)                                                        LTSYS1 211
            IF(ISYMTB(12,IA(IAVPTR+103)).EQ.1) THEN                             LTSYS1 212
                  IF(ABS(AA(IAVPTR+112)-ELECILTOT).GT.1.0) THEN                 LTSYS4 161
                     IF(MSGLVL.GE.2) THEN                                       LTSYS4 162
                        CALL MSG2(127,1,AA(IAVPTR+112),                         ERR-01 719
     $                                ISYMTB(1,NAMPTR), ELECILTOT)              ERR-01 720
                     ENDIF                                                      LTSYS4 170
                     AA(IAVPTS+112) = ELECILTOT                                 FIX4    60
                  ENDIF                                                         LTSYS4 172
                  IF(ABS(AA(IAVPTR+113)-ELECILTOT).GT.1.0.AND.                  LTSYS4 173
     1            ITYPLS(AA(IAVPTR+107)).NE.ITYPLS(UNFILD)) THEN                LTSYS4 174
                     IF(MSGLVL.GE.2) THEN                                       LTSYS4 175
                        CALL MSG2(127,2,AA(IAVPTR+113),                         ERR-01 721
     $                                ISYMTB(1,NAMPTR), ELECILTOT)              ERR-01 722
                     ENDIF                                                      LTSYS4 183
                     AA(IAVPTS+113) = ELECILTOT                                 FIX4    62
                  ENDIF                                                         LTSYS4 185
            ENDIF                                                               LTSYS4 186
      ELSE                                                                      LTSYS1 269
C              OTHERWISE, ADD LIGHTING-W/AREA TO LIGHTING-KW                    LTSYS1 270
         DO ILS = 1,5                                                           LTSYS1 271
            AA(IAVPTS+58+ILS-1) = AMAX1(0.,AA(IAVPTR+58+ILS-1))                 FIX4    63
     1        + AMAX1(0.,AA(IAVPTR+91+ILS-1)*AA(IAVPTR+6)/1000.)                FIX4    64
         ENDDO                                                                  LTSYS1 274
      ENDIF                                                                     LTSYS1 275
C              ADD EQUIP-W/AREA TO EQUIP KW                                     LTSYS1 276
      DO IEQ = 1,5                                                              LTSYS1 277
         AA(IAVPTS+69+IEQ-1) = AMAX1(0.,AA(IAVPTR+69+IEQ-1)) +                  FIX4    66
     1      AMAX1(0.,AA(IAVPTR+97+IEQ-1)*AA(IAVPTR+6)/1000.)                    LTSYS1 279
      ENDDO                                                                     LTSYS1 280
C              Calculate total lighting and                                     DFTEXP 271
C              place them into the display variables                            DFTEXP 272
      DO LZ = 1,2                                                               DFTEXP 273
         AA(IAVPTR+ISPDIS+LZ-1) = 0.                                            DFTEXP 274
      ENDDO                                                                     DFTEXP 275
      DO LZ = 1,5                                                               DFTEXP 276
         IF(NOVAL(AA(IAVPTR+ILKWP+LZ-1)).eq.1) THEN                             DFTEXP 277
           AA(IAVPTR+ISPDIS+0) = AA(IAVPTR+ISPDIS+0) +                          DFTEXP 278
     $            AA(IAVPTR+ILKWP+LZ-1)                                         DFTEXP 279
         ENDIF                                                                  DFTEXP 280
         IF(NOVAL(AA(IAVPTR+ILWSFP+LZ-1)).eq.1) THEN                            DFTEXP 281
           AA(IAVPTR+ISPDIS+0) = AA(IAVPTR+ISPDIS+0) +                          DFTEXP 282
     $            AA(IAVPTR+ILWSFP+LZ-1)*AA(IAVPTR+IAP)*0.001                   DFTEXP 283
         ENDIF                                                                  DFTEXP 284
      ENDDO                                                                     DFTEXP 285
      AA(IAVPTR+ISPDIS+1) = 1000.*AA(IAVPTR+ISPDIS+0)/AA(IAVPTR+IAP)            DFTEXP 286
C              MOVE DATA INTO OUTPUT BUFFER                                     FIX4    67
C              Don't transfer BDL only keywords                                 -44d5   45
C              (location + compliance (C- and C-C-) + display keywords)         -44d5   46
C              Also, some new daylighting valiables go to end of block          -44d5   47
          II = <+mz:LastKeyword> - <+DAYLIGHT-GROUP1> + 1                       -045a   13
          JJ = II + (NSPDIS+1+238+3)                                            -047hT   6
          CALL MOVEN(AA(IAVPTS+1),AA(IPT+<+ZX>+1),LVAL-JJ)                      -44d5   50
          CALL MOVEN(AA(IAVPTS+1+LVAL-JJ),                                      -44d5   51
     $                            AA(IPT+<+DAYLIGHT-GROUP1>+1),II)              -44d5   52
C              Convert daylight group keywords to integers                      -44d5   53
          IA(IPT+<+DAYLIGHT-GROUP1>+1) = AA(IPT+<+DAYLIGHT-GROUP1>+1)           -44d5   54
          IA(IPT+<+DAYLIGHT-GROUP2>+1) = AA(IPT+<+DAYLIGHT-GROUP2>+1)           -44d5   55
C              INCREMENT SF BUFFER POINTER                                      ATTRF1 436
          IPT = IPT + LSPACE                                                    ATTRF1 437
C              NUMBER OF SPACES IN FLOOR                                        ATTRF1 438
          IF (NFL.GT.0) THEN                                                    ATTRF1 439
            NFLSP = NFLSP + 1                                                   ATTRF1 440
C              STANDARD FILE POINTER TO SPACES IN FLOOR                         ATTRF1 441
            ISFPTR = IPT + 1 - IAX                                              ATTRF1 442
          END IF                                                                ATTRF1 443
  500   CONTINUE                                                                ATTRF1 444
C              SAVE THE NO. OF SPACES IN THE FLOOR DATA                         ATTRF1 445
        IF(NFL.GT.0) THEN                                                       ATTRF1 446
          IA(IDPFL+2) = NFLSP                                                   GEO4   151
          IF (NFLSP.EQ.0) IA(IDPFL+3)=0                                         GEO4   152
        END IF                                                                  ATTRF1 449
  600 CONTINUE                                                                  ATTRF1 450
C               REORDER ISPLST AND MAKE CONSISTENT WITH                         SPLIST  15
C               USE IN LOADS                                                    SPLIST  16
      DO J = 1,NSP                                                              SPLIST  17
         ISPLST(J) = (JSPLST(J)-1)*LSPACE                                       SPLIST  18
      ENDDO                                                                     SPLIST  19
C               WRITE OUT STANDARD FILE                                         SPACEO 144
      WRITE (ISTNDF) NSP, LEN                                                   SPACEO 145
      CALL WRITEN(ISTNDF,IA(IST),LEN)                                           SPACEO 146
      IF (IREPRT(32) .EQ. 1)                                                    SPACEO 191
     1 CALL DUMPIT(20HSPACE               ,IA(IST),LEN)                         SPACEO 192
      GO TO 2000                                                                SPACEO 195
 1000 WRITE (ISTNDF) IZERO, IONE                                                SPACEO 196
      WRITE (ISTNDF) IZERO                                                      SPACEO 197
      IF (LDSTYP .NE. 3) CALL MSG2(22,IOPCDT(1,JOPSP),DUM,DUM,DUM)              SPACEO 198
 2000 CONTINUE                                                                  SPACEO 199
      JOPcur  = 0                                                               FIX14  239
      JREFcur = 0                                                               FIX14  240
C              SET INTERIOR WALL POINTER SF POINTER                             SPACEO 200
      IIWPB  = ISPB + LEN                                                       SPACEO 201
      IF (NIW .EQ. 0)  GO TO 3000                                               SPACEO 202
C              WRITE OUT IW POINTERS                                            SPACEO 203
      NIWP   = IAXS - IAX - LEN                                                 SPACEO 204
      IST    = IAXS - NIWP + 1                                                  SPACEO 205
      WRITE (ISTNDF) NIWP, NIWP                                                 SPACEO 206
      CALL WRITEN(ISTNDF,IA(IST),NIWP)                                          SPACEO 207
      IF (IREPRT(32) .EQ. 1)                                                    SPACEO 208
     1 CALL DUMPIT(20HI-W POINTERS         ,IA(IST),NIWP)                       SPACEO 209
      IFLB = IIWPB + NIWP                                                       ATTRF1 451
      RETURN                                                                    SPACEO 211
 3000 WRITE (ISTNDF) IZERO,IONE                                                 SPACEO 212
      WRITE (ISTNDF) IZERO                                                      SPACEO 213
      IFLB = IIWPB + 1                                                          ATTRF1 452
      RETURN                                                                    SPACEO 215
      END                                                                       SPACEO 216
      SUBROUTINE SUBTYPERR(NAME,ITYPE)                                          SUBTYPER 2
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      INTEGER NAME(8),ITYPE                                                     SUBTYPER 6
      ISAVE = 0                                                                 SUBTYPER 7
      IT1 = 0                                                                   SUBTYPER 8
      IT2 = 0                                                                   SUBTYPER 9
      IT3 = 0                                                                   SUBTYPER10
      IF (ITYPE.LE.0) RETURN                                                    SUBTYPER11
      CALL UNPAK3(ITYPE,1024,IT1,IT2,IT3)                                       SUBTYPER12
      IF (IT1.LT.IT2) THEN                                                      SUBTYPER13
          ISAVE = IT1                                                           SUBTYPER14
          IT1 = IT2                                                             SUBTYPER15
          IT2 = ISAVE                                                           FIX4    69
      END IF                                                                    SUBTYPER17
      IF (IT2.LT.IT3) THEN                                                      SUBTYPER18
          ISAVE = IT2                                                           SUBTYPER19
          IT2 = IT3                                                             SUBTYPER20
          IT3 = ISAVE                                                           SUBTYPER21
      END IF                                                                    SUBTYPER22
      IF (IT1.LT.IT2) THEN                                                      SUBTYPER23
          ISAVE = IT1                                                           SUBTYPER24
          IT1 = IT2                                                             SUBTYPER25
          IT2 = ISAVE                                                           FIX4    70
      END IF                                                                    SUBTYPER27
      IF (IT2.EQ.0 .AND. IT3.EQ.0) THEN                                         SUBTYPER28
          CALL MSG2(128,NAME(1),ISYMTB(1,IT1),II,II)                            ERR-01 723
      ELSE IF (IT3.EQ.0) THEN                                                   SUBTYPER31
          CALL MSG2(129,NAME(1),ISYMTB(1,IT1),ISYMTB(1,IT2),II)                 ERR-01 724
      ELSE                                                                      SUBTYPER35
          CALL MSG2(130,NAME(1),ISYMTB(1,IT1),ISYMTB(1,IT2),                    ERR-01 725
     $                          ISYMTB(1,IT3))                                  ERR-01 726
      END IF                                                                    SUBTYPER39
      RETURN                                                                    SUBTYPER43
      END                                                                       SUBTYPER44
      SUBROUTINE UGO                                                            UGO      2
C                                                                               UGO      3
C               WRITE THE UNDERGROUND SURFACE BLOCK TO THE STANDARD FILE        UGO      4
C                                                                               UGO      5
C               UGO USES 15 WORDS OF COMMWK                                     UGO      6
C                                                                               UGO      7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON/COUNT/ NOTH,NITH,NSURF,NINSRF                                      OPLST1 259
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
      COMMON  /UGVALX/ IUGCNP, IUGGEO, IUGSAP, IUGARP, IUGTLP, IUGSFP,          /UGVALX/ 2
     1                  IUGLCP,IUGCRP,KWUGAR,IUGVRP                             /UGVALX/ 3
C                                                                               UGO     24
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      EQUIVALENCE (IKW,COMMWK(1)),(NKW,COMMWK(2)),                              UGO     26
     1            (IDP,COMMWK(3)),(NAMPTR,COMMWK(5)),                           UGO     27
     2            (LVAL,COMMWK(6)),(IST,COMMWK(7)),                             UGO     28
     3            (IPT,COMMWK(8)),(ICNST,COMMWK(9)),                            UGO     29
     4            (IAPTR,COMMWK(11)),(ICONSP,COMMWK(12)),                       UGO     30
     5            (LEN,COMMWK(13)),(IAVPTR,COMMWK(14)),                         UGO     31
     6            (NRF,COMMWK(15))                                              UGO     32
C                                                                               UGO     33
      IKYOP = 14                                                                BIGNAM 124
      LEN = 1                                                                   ATTRF1 454
      NUG = IOPCDT(13,JOPUGW)                                                   ATTRF1 455
      IF (NUG.EQ.0) GO TO 1000                                                  ATTRF1 456
      NSP = IOPCDT(13,JOPSP)                                                    ATTRF1 457
      IF (NSP.EQ.0) GO TO 1000                                                  ATTRF1 458
      LEN = NUG*LUG                                                             ATTRF1 459
      NKW = IOPCDT(10,JOPUGW)                                                   ATTRF1 460
      IKW = IOPCDT(9,JOPUGW)                                                    ATTRF1 461
      LVAL = IOPCDT(16,JOPUGW)                                                  ATTRF1 462
C              SAVE SPACE FOR OUTPUT BUFFER                                     ATTRF1 463
      CALL CKAA(IA,LEN)                                                         ATTRF1 464
C              IST IS WHERE THE OUTPUT BUFFER STARTS                            ATTRF1 465
      IST = IAX + 1                                                             ATTRF1 466
C              IPT IS WHERE THE NEXT UGS GOES IN THE OUTPUT BUFFER              ATTRF1 467
      IPT = IAX                                                                 ATTRF1 468
C              FILL OUTPUT BUFFER WITH ZEROES                                   ATTRF1 469
      CALL FILLN(0.,AA(IST),LEN)                                                ATTRF1 470
      ISFPTR = 1                                                                ATTRF1 471
C              LOOP OVER SPACES                                                 ATTRF1 472
      DO 200 ISP=1,NSP                                                          ATTRF1 473
        IRXSP = IOPCDT(14,JOPSP) + ISP - 1                                      ATTRF1 474
        IDPSP = IREFTB(2,IRXSP)                                                 ATTRF1 475
C               DATA PTR FOR PARENT SPACE AND FLOOR                             GEO1   344
        IAVPSP = IDPSP + IOPCDT(17,JOPSP) + 2*IOPCDT(16,JOPSP)                  GEO1   345
        IRXFL = IREFTB(4,IRXSP)                                                 GEO1   346
        IAVPFL = IREFTB(2,IRXFL) + IOPCDT(17,JOPFL) + 2*IOPCDT(16,JOPFL)        GEO1   347
        NSPUG = 0                                                               ATTRF1 476
C              SAVE UGW SF PTR IN SPACE DATA                                    ATTRF1 477
        IA(IDPSP+5) = ISFPTR                                                    GEO4   153
C              LOOP OVER UG WALLS                                               ATTRF1 479
        DO 100 IUG=1,NUG                                                        ATTRF1 480
          IRX = IOPCDT(14,JOPUGW) + IUG - 1                                     ATTRF1 481
C              FIND ALL UG'S IN SPACE "IRXSP"                                   ATTRF1 482
          IF (IREFTB(4,IRX).NE.IRXSP) GO TO 100                                 ATTRF1 483
C              ASSEMBLE SF DATA FOR ALL UG WALLS IN THIS SPACE                  ATTRF1 484
C                                                                               ATTRF1 485
C              PICK UP THE NAME AND DATA POINTER                                ATTRF1 486
          NAMPTR = IREFTB(1,IRX)                                                ATTRF1 487
          IDP = IREFTB(2,IRX)                                                   ATTRF1 488
C              MOVE IN THE NAME                                                 ATTRF1 489
          IF (NAMPTR.GT.0)  CALL MOVEN(ISYMTB(1,NAMPTR),IA(IPT+1),8)            BIGNAM 125
          IF (NAMPTR.EQ.0) CALL MOVEN(IBLANK(1),IA(IPT+1),8)                    BIGNAM 126
C              STORE GEOMETRY POINTER                                           ATTRF1 492
          IA(IPT+9) = IA(IDP+4)                                                 BIGNAM 127
C              STORE FLOOR FLAG                                                 ATTRF1 494
          IA(IPT+10) = IA(IDP+3)                                                BIGNAM 128
C              CONVERT SYMBOL TABLE POINTERS TO VALUES                          ATTRF1 496
          IAVPTR = MVTOSM(IRX,JOPUGW,0)                                         OUT1    53
          CALL SYMFIL(ISYMTB,KONTXT(1,IKW),NKW,IA(IAVPTR+1))                    ATTRF1 498
C              GET POINTER TO CONSTRUCTION INPUT DATA                           ATTRF1 499
          IRXCN = IOPCDT(14,JOPCNS) + IA(IAVPTR+IUGCNP) - 1                     ATTRF1 500
          ICONSP = IREFTB(2,IRXCN)                                              ATTRF1 501
C              CHANGE CONSTRUCTION NO. TO SF POINTER (WO IFR)                   ATTRF1 502
          IA(IAVPTR+IUGCNP) = IA(ICONSP+5)                                      ATTRF1 503
C              INCREMENT COUNTERS                                               ATTRF1 504
          NINSRF = NINSRF + 1                                                   ATTRF1 505
          NSURF  = NSURF + 1                                                    ATTRF1 506
C              MOVE DATA INTO OUTPUT BUFFER                                     ATTRF1 507
          CALL MOVEN(AA(IAVPTR+1),AA(IPT+IKYOP),LVAL-(5+2))                     -047hT   7
C              SAVE CONSTRUCTION SF POINTER (WITH IFR)                          ATTRF1 509
          IA(IPT+48) = IA(ICONSP+4)                                             BIGNAM 129
C              CK IF POLYGON                                                    ATTRF1 511
          IPOLYF = IUGGEO + 9                                                   ATTRF1 512
      IF (NOVAL(AA(IPT+14)).EQ.0) THEN                                          BIGNAM 130
          IF ( NOVAL(AA(IAVPTR+IPOLYF)).EQ.0 )  THEN                            FIX8    79
C              GROSS AREA IF RECTANGLE                                          ATTRF1 515
                  AA(IPT+14) = AA(IAVPTR+IUGGEO+4)*AA(IAVPTR+IUGGEO+5)          BIGNAM 131
          ELSE                                                                  ATTRF1 519
C              IF POLYGON INPUT CALCULATE GROSS AREA                            ATTRF1 520
              IRXPOL = IOPCDT(14,40) + IA(IAVPTR+IPOLYF) - 1                    ATTRF1 521
              IDATX = IREFTB(2,IRXPOL)                                          ATTRF1 522
              IAVPOL = IDATX + IOPCDT(17,JOPPOL) + 2*IOPCDT(16,JOPPOL)          DEF2   220
              CALL POLYICK(IA(IDATX+1),AA(IAVPOL+1),AREA,PERIM,1,IERRFL)        DEF2   221
              AA(IPT+14) = AREA                                                 BIGNAM 132
              IF (METIN.EQ.1) CALL KDIV(AA(IPT+14),9,1,METIN)                   FIX15   61
          END IF                                                                ATTRF1 525
      END IF                                                                    FIX3    22
C               AZIMUTH AND TILT IN BLDG C.S. (RADIANS)                         GEO1   349
          WAZM = AMOD( ( AA(IAVPTR+14)+AA(IAVPSP+4)+AA(IAVPFL+5) )*DTOR,        GEO1   350
     1               6.2831853 )                                                GEO1   351
          WTILT = AA(IAVPTR+15)*DTOR                                            GEO1   352
          AA(IPT+42) = SIN(WAZM)                                                BIGNAM 133
          AA(IPT+43) = COS(WAZM)                                                BIGNAM 134
          AA(IPT+44) = SIN(WTILT)                                               BIGNAM 135
          AA(IPT+45) = COS(WTILT)                                               BIGNAM 136
          AA(IPT+46) = WAZM                                                     BIGNAM 137
          AA(IPT+47) = WTILT                                                    BIGNAM 138
C              STORE I-F-R                                                      ATTRF1 526
          AA(IPT+16) = AA(ICONSP+3)                                             BIGNAM 139
C              CONVERTS  I-F-R                                                  ATTRF1 528
          IF (METIN.EQ.1)  CALL KDIV(AA(IPT+16),32,1,METIN)                     BIGNAM 140
C              NUMBER OF UG'S IN SPACE                                          ATTRF1 530
          NSPUG = NSPUG + 1                                                     ATTRF1 531
C              INCREMENT SF BUFFER POINTER                                      ATTRF1 532
          IPT    = IPT + LUG                                                    ATTRF1 533
C              STANDARD FILE POINTER TO UG'S IN SPACE                           ATTRF1 534
          ISFPTR = IPT + 1 - IAX                                                ATTRF1 535
  100   CONTINUE                                                                ATTRF1 536
C              SAVE THE NO. OF UG'S IN THE SPACE DATA                           ATTRF1 537
        IA(IDPSP+4) = NSPUG                                                     GEO4   154
        IF (NSPUG.EQ.0) IA(IDPSP+5)=0                                           GEO4   155
  200 CONTINUE                                                                  ATTRF1 540
C                WRITE OUT STANDARD FILE                                        UGO    109
      WRITE (ISTNDF) NUG, LEN                                                   UGO    110
      CALL WRITEN(ISTNDF,IA(IST),LEN)                                           UGO    111
      IF (IREPRT(32) .EQ. 1)                                                    UGO    112
     1 CALL DUMPIT(20HUNDERGROUND-SURFACE ,IA(IST),LEN)                         UGO    113
      GO TO 2000                                                                UGO    114
 1000 WRITE (ISTNDF) IZERO, IONE                                                UGO    115
      WRITE (ISTNDF) IZERO                                                      UGO    116
 2000 CONTINUE                                                                  UGO    117
C              SET SPACE SF POINTER                                             ATTRF1 541
      ISPB = IUGB + LEN                                                         ATTRF1 542
      RETURN                                                                    UGO    120
      END                                                                       UGO    121
      SUBROUTINE WALLD(JREF,JOPCDT,IOP,IGEOS,ILCP,ITLP,ICFRP,IARP,              DFTEX3 959
     .                 IVRP,ISAP,LKDAT,NAMPTR,LSDPTR,LKPTR,Iphase)              DFTEX3 960
C                                                                               WALLI    4
C                  THIS ROUTINE PROCESSES THE EXTERIOR-WALL, INTERIOR-          WALLI    5
C                  WALL, AND UNDERGROUND-WALL COMMANDS                          WALLI    6
C                                                                               WALLI    7
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               WALLI   11
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /BOX/    BOX(7,6),BOXDEF(7,6)                                     ALPHA   48
      COMMON  /CNVALX/ KWLAY,KWUV,KWWALP,KWRO,ILAYP,IUVP,IWALPP,IROP            SUBTY8   1
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /EWVALX/ IEWLCP, IEWGEO, IEWCNP, IEWSDP, IEWSAP, IEWTLP,          /EWVALX/ 2
     1                  IEWSFP,IEWCRP,IEWVRP                                    /EWVALX/ 3
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /IWVALX/ IIWCNP, IIWGEO, IIWSAP, IIWARP, IIWTLP, IIWSFP,          /IWVALX/ 2
     1                  IIWLCP,IIWCRP,KWIWAR,IIWVRP                             /IWVALX/ 3
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LBLOCK/ LSFBLK(20),N(20)                                         BLIND    2
      EQUIVALENCE (LWPARB,LSFBLK(4)),(LCB1,LSFBLK(5)),                          /LBLOCK/ 3
     1            (LCB2,LSFBLK(6)),(LCONSB,LSFBLK(6)),                          /LBLOCK/ 4
     2            (LGEOB,LSFBLK(9))                                             BLIND    3
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON  /LYVALX/ IIFRP, IMATST, ITHST, INRFP,                             /LYVALX/ 2
     1                 IUP, ICOMRP, NLAY                                        /LYVALX/ 3
      COMMON  /MESSG/  IU(2),INU(2),IM1(4),IM2(4),IM3(4),IHW(4),IDW(4)          DFTEX3 499
      COMMON  /SPVALX/ IHP, IAP, IVP, ISHPP, IWP, IDPTHP, ISCP, IPRCAP,         /SPVALX/ 2
     1                 IWFP, ILTP, IINFMP, INZHP, IPLP, IPSP, ILKWP,            /SPVALX/ 3
     2                 ITKWP, IEKWP, IPAP, ILWSFP, ITWSFP, IPOLSP,              GEO4     1
     3                 IEQWFP, KWH, KWA, KWV, KWSHP, KWW, KWDPTH,               /SPVALX/ 5
     4                 KWSC, KWLT, KWINFM, KWNZH, KWPL, KWPS,                   /SPVALX/ 6
     5                 KWLKW, KWTKW, KWEKW, KWPA, KWLWSF, KWTWSF,               /SPVALX/ 7
     6                 KWEWSF, IFURTP, IFURFP, IFURWP, IFLRWP, KWWF,            /SPVALX/ 8
     7                 KWFLRW,ILTSP,NINFKY,INFKYP(20),DEFINF(10,4),             LTSYS1   2
     8                 ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM,             DFTEXP 197
     9                 ISPLOCP,ISPDIS,NSPDIS                                    DFTEXP 198
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
      COMMON  /UGVALX/ IUGCNP, IUGGEO, IUGSAP, IUGARP, IUGTLP, IUGSFP,          /UGVALX/ 2
     1                  IUGLCP,IUGCRP,KWUGAR,IUGVRP                             /UGVALX/ 3
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
C                                                                               WALLI   33
C                                                                               WALLI   42
      DIMENSION CFRDF(2,3)                                                      DFTEX3 963
C              SETS THE CRITICAL U-VALUE FOR AIR-TYPE INTERIOR WALLS            WALLI   48
      UCRIT  = 0.709                                                            WALLI   49
      IF(METIN.EQ.1) CALL KDIV(UCRIT,6,1,0)                                     WALLI   50
      CFRDF(1,1) = 1.4                                                          WALLI   51
      CFRDF(2,1) = 1.4                                                          WALLI   52
      CFRDF(1,2) = 2.5                                                          WALLI   53
      CFRDF(2,2) = 0.91                                                         WALLI   54
      CFRDF(1,3) = 0.91                                                         WALLI   55
      CFRDF(2,3) = 2.5                                                          WALLI   56
      IF (METIN .EQ. 1)  CALL KDIV(CFRDF,6,6,0)                                 WALLI   57
C              SET SOME POINTERS                                                WALLI   58
      NSAVE = IOPCDT(17,JOPCDT)                                                 OPLST1 366
C              IKW IS THE FIRST KEYWORD FOR COMMAND                             WALLI   59
      IKW    = IOPCDT(9,JOPCDT)                                                 WALLI   60
C              NKW IS THE NUMBER OF KEYWORDS FOR THIS COMMAND                   WALLI   61
      NKW    = IOPCDT(10,JOPCDT)                                                WALLI   62
C              LVAL IS THE LENGTH OF THE VALUE ARRAY                            WALLI   63
      LVAL   = IOPCDT(16,JOPCDT)                                                WALLI   64
C              LVSTOR IS THE NUMBER OF VALUES STORED IN BLANK COMMON            WALLI   67
      LVSTOR = LVAL + NSAVE                                                     OPLST1 368
C              IAVPT1 IS THE START OF THE VALUE BLOCK                           4XAA   470
      IAXS = IREFTB(2,JREF)                                                     DEF2   224
      IAVPT1 = IAXS + NSAVE                                                     DEF2   225
C              LTOT IS THE TOTAL SIZE OF THE VALUE BLOCK                        4XAA   472
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,JOPCDT)                                 4XAA   473
C              IAVPTR IS THE CURRENT DATA POINTER                               DEF2   226
      IAVPTR = IAVPT1 + LVAL                                                    DEF2   227
C              SET THE WALL-FLOOR-CEILING FLAG                                  WALLI  134
C              IF not PowerDOE defaulting then set LOCATION default             DFTEX3 964
C              based upon command.                                              DFTEX3 965
      ILocRedef = 0                                                             DFTEX3 966
      IF(NOVAL(IA(LKDAT+ILCP)).eq.0)  THEN                                      DFTEX3 967
        IF(IOP .GT. IOPEW)  THEN                                                DFTEX3 968
          IAreaFlg = ISINP(JREF,NSAVE,IARP,LKDAT,LVAL,VALUE)                    DFTEX3 969
        ELSE                                                                    DFTEX3 970
          IAreaFlg = -2                                                         DFTEX3 971
        ENDIF                                                                   DFTEX3 972
        IAreaFlg = ISINP(JREF,NSAVE,IARP,LKDAT,LVAL,VALUE)                      DFTEX4 520
C              Look for command used for object definition                      DFTEX3 974
        IF (IOP .EQ. (IOPEW+1)) THEN                                            DFTEX3 975
C              If ROOF command used                                             DFTEX3 976
          ILocSym = 890                                                         DFTEX3 977
        ELSE IF(IOP .EQ. (IOPUGW+1)) THEN                                       DFTEX3 978
C              If UNDERGROUND-FLOOR command used                                DFTEX3 979
          IF(IAreaFlg .gt. 0)  THEN                                             DFTEX3 980
            ILocSym = 1273                                                      DFTEX3 981
          ELSE                                                                  DFTEX3 982
            ILocSym = 892                                                       DFTEX3 983
          ENDIF                                                                 DFTEX3 984
        ELSE                                                                    DFTEX3 985
C              If EXTERIOR/INTERIOR/UNDERGROUND-WALL command used               DFTEX3 986
C              default based upon TILT                                          DFTEX3 987
C              If TILT < +-30 becomes a CEILING or ROOF                         DFTEX3 988
C              If TILT-180 < +-30 becomes a FLOOR                               DFTEX3 989
          IF(((IOP.EQ.IOPUGW).or.(JOPCDT.EQ.JOPIW)).and.                        DFTEX3 990
     $       (IAreaFlg .gt. 0)) THEN                                            DFTEX3 991
            ILocSym = 1272                                                      DFTEX3 992
          ELSE                                                                  DFTEX3 993
            ILocSym = 891                                                       DFTEX3 994
          ENDIF                                                                 DFTEX3 995
          TILT = 90.                                                            DFTEX3 996
          ITiltType = ISINP(JREF,NSAVE,ITLP,LKDAT,LVAL,VALUE)                   DFTEX3 997
          IF((ITiltType.eq.1).or.(ITiltType.eq.-1)) THEN                        DFTEX3 998
            TILT   = VALUE                                                      DFTEX3 999
          ELSE                                                                  DFTEX31000
            IF(ITiltType.eq.2) ILocRedef = 1                                    DFTEX31001
          ENDIF                                                                 DFTEX31002
          IF(ABS(TILT) .LE. 30.) THEN                                           DFTEX31003
C              EXTERIOR-WALL becomes a ROOF otherwise a CEILING                 DFTEX31004
            IF(IOP .EQ. IOPEW) THEN                                             DFTEX31005
              ILocSym = 890                                                     DFTEX31006
            ELSE                                                                DFTEX31007
              IF(((IOP.EQ.IOPUGW).or.(JOPCDT.EQ.JOPIW)).and.                    DFTEX31008
     $           (IAreaFlg .gt. 0)) THEN                                        DFTEX31009
                ILocSym = 1274                                                  DFTEX31010
              ELSE                                                              DFTEX31011
                ILocSym = 889                                                   DFTEX31012
              ENDIF                                                             DFTEX31013
            ENDIF                                                               DFTEX31014
          ELSE                                                                  DFTEX31015
            IF (ABS(ABS(TILT)-180.) .LE. 30.) THEN                              HVAC28  85
              IF(((IOP.EQ.IOPUGW).or.(JOPCDT.EQ.JOPIW)).and.                    DFTEX31017
     $           (IAreaFlg .gt. 0)) THEN                                        DFTEX31018
                ILocSym = 1273                                                  DFTEX31019
              ELSE                                                              DFTEX31020
                ILocSym = 892                                                   DFTEX31021
              ENDIF                                                             DFTEX31022
            ENDIF                                                               DFTEX31023
          ENDIF                                                                 DFTEX31024
        ENDIF                                                                   DFTEX31025
        IF(ILocRedef .eq. 0) THEN                                               DFTEX31026
          IA(LKDAT+ILCP) = ILocSym                                              DFTEX31027
        ELSE                                                                    DFTEX31028
          IA(LKDAT+ILCP) = ITYPLS(UNDEF(1))                                     DFTEX31029
        ENDIF                                                                   DFTEX31030
      ENDIF                                                                     DFTEX31031
      IF(Iphase .ne. 2)  THEN                                                   DFTEX31032
        CALL LSDFIL(JOPCDT,ISYMTB,KONTXT(1,IKW),NKW,AA(IAVPT1+1),               DFTEX31033
     $              AA(LKDAT+1),LSDPTR,ISYMTB(1,LKPTR),NAMPTR,LVAL)             DFTEX31034
        IF(Iphase .eq. 1) RETURN                                                DFTEX31035
      ELSE                                                                      DFTEX31036
        IF(IREPRT(35) .eq. 1)                                                   DFTEX31037
     $    CALL DUMPIT ('ValArray After  Exps',AA(IAVPT1+1),3*LVAL)              DFTEX31038
      ENDIF                                                                     DFTEX31039
      IAVPTR = IAVPT1 + 2*LVAL                                                  4XAA   488
      IGEO = IAVPT1 + 2*LVAL + IGEOS                                            4XAA   489
      IX = IABS(IREFTB(4,JREF))                                                 OPLST1 370
      INSPTR = IREFTB(2,IX)                                                     REFTB1 342
      IF(NOVAL(IA(IAVPTR+ILCP)) .ne. 0)  THEN                                   DFTEX31040
        IWFC   = ISYMTB(12,IA(IAVPTR+ILCP))                                     DFTEX31041
        IF(IWFC .eq. 1)  THEN                                                   DFTEX31042
          IWFC   = 3                                                            DFTEX31043
        ELSE IF(IWFC .eq. 2) THEN                                               DFTEX31044
          IWFC   = 2                                                            DFTEX31045
        ELSE                                                                    DFTEX31046
          IWFC   = 1                                                            DFTEX31047
        ENDIF                                                                   DFTEX31048
      ELSE                                                                      DFTEX31049
        IWFC   = 1                                                              DFTEX31050
      ENDIF                                                                     DFTEX31051
C              SET DEFAULTS FOR VARIOUS INTERIOR WALL TYPES                     WALLI  205
      IF(JOPCDT.NE.JOPIW) GO TO 2090                                            WALLI  206
      IS     = IA(IAVPTR+3)                                                     WALLI  207
      IF((IS.LE.0) .or. (NOVAL(IS).EQ.0))  GOTO 2100                            DFTEX4 521
      ICNPTR = IREFTB(2,IOPCDT(14,JOPCNS) + ISYMTB(12,IS)-1)                    SYMSIZ 137
     1         + IOPCDT(17,JOPCNS) + 2*IOPCDT(16,JOPCNS)                        4XAA   490
      IFLAG  = 0                                                                WALLI  211
      IWTYPE = IA(IAVPTR+12)                                                    WALLI  212
      NEXTTO = IA(IAVPTR+1)                                                     WALLI  213
      UVAL = AA(ICNPTR+IUVP)                                                    BIGNM4   6
      NRESP = IA(ICNPTR+ILAYP)                                                  BIGNM4   7
C              IF ADIABATIC OR INTERNAL TYPE INTERIOR WALL, SKIP                WALLI  216
      IF(IWTYPE.GE.862) GO TO 2040                                              COMB01  18
C              IF NEXT-TO SPACE DEFINED, SKIP                                   WALLI  218
      IF(NOVAL(NEXTTO).NE.0) GO TO 2010                                         DFTEX31052
      IF(IWTYPE.EQ.860)                                                         ERR-01 727
     $  CALL MSG2(50,'INT-WALL-TYPE   ','STANDARD        ',                     ERR-01 728
     $               'NEXT-TO         ',II)                                     ERR-01 729
      IF(IWTYPE.EQ.861)                                                         ERR-01 730
     $  CALL MSG2(50,'INT-WALL-TYPE   ','AIR             ',                     ERR-01 731
     $               'NEXT-TO         ',II)                                     ERR-01 732
C          IF NEXT-TO SPACE IS SAME AS THIS SPACE, CHANGE TO ADIABATIC          WALLI  226
 2010 IF(NEXTTO.NE.IREFTB(1,IX)) GO TO 2020                                     REFTB1 344
      IA(IAVPTR+12) = 862                                                       COMB01  21
      IWTYPE = 862                                                              COMB01  22
      IF(MSGLVL.LT.3) GO TO 2042                                                WALLI  230
      CALL MSG(69)                                                              ERR-01 733
      IFLAG  = 1                                                                WALLI  235
      GO TO 2042                                                                WALLI  236
C          IF STANDARD TYPE, QUICK INTERIOR WALL WITH U-VALUE > UCRIT           WALLI  237
C              CHANGE TO AIR TYPE AND GIVE WARNING                              WALLI  238
 2020 IF((IWTYPE.NE.860) .OR. (NOVAL(NRESP).NE.0) .OR.                          DFTEX31053
     1   (UVAL.LE.UCRIT)) GOTO 2030                                             DFTEX31054
      IA(IAVPTR+12)=861                                                         COMB01  24
      IF(MSGLVL.LT.3) GO TO 2030                                                WALLI  242
      CALL MSG(72)                                                              ERR-01 734
 2030 IF(IWTYPE.NE.861) GO TO 2090                                              COMB01  25
      IF(NOVAL(NRESP).EQ.0) GOTO 2035                                           DFTEX31055
C              CALL ERROR IF AIR TYPE INTERIOR WALL IS DELAYED                  WALLI  249
      CALL MSG(77)                                                              ERR-01 735
 2035 IF(UVAL.GT.UCRIT) GO TO 2090                                              WALLI  253
C              CALL CAUTION IF U < UCRIT FOR AIR TYPE INTERIOR WALL             WALLI  254
      IF(MSGLVL.LT.3) GO TO 2090                                                WALLI  255
      CALL MSG(80)                                                              ERR-01 736
      GO TO 2090                                                                WALLI  259
 2040 IF(IWTYPE.EQ.863) GO TO 2043                                              COMB01  26
C              INT-WALL-TYPE=ADIABATIC  -- TEST WHETHER NEXT-TO SPACE           WALLI  261
C              IS DEFINED.  IF SO, GIVE CAUTION.                                WALLI  262
      IF(NOVAL(NEXTTO).EQ.0 .OR. IFLAG.EQ.1) GOTO 2042                          DFTEX31056
      IF(MSGLVL.LT.3) GO TO 2042                                                WALLI  264
      CALL MSG(81)                                                              ERR-01 737
C          CAUTION IF U-VALUE TYPE CONSTRUCTION FOR ADIABATIC TYPE WALL         WALLI  269
 2042 IF((NOVAL(NRESP).NE.0)  .OR. (AA(INSPTR+13).NE.0.0) .OR.                  DFTEX31057
     $   (IA(INSPTR+16).NE.0) .OR. (MSGLVL.LT.3) ) GOTO 2090                    DFTEX31058
      CALL MSG(97)                                                              ERR-01 738
      GO TO 2090                                                                WALLI  276
C              INTERNAL TYPE INTERIOR WALL - CHECK THAT NEXT-TO IS              WALLI  277
C              NOT USED                                                         WALLI  278
 2043 IF(NOVAL(NEXTTO).EQ.0) GOTO 2044                                          DFTEX31059
      IF(MSGLVL.LT.3) GO TO 2044                                                WALLI  280
      CALL MSG(104)                                                             ERR-01 739
 2044 IF(NOVAL(NRESP).NE.0) GOTO 2090                                           DFTEX31060
      CALL MSG(105)                                                             ERR-01 740
 2090 CONTINUE                                                                  WALLI  290
C              WARNING FOR FRACTIONAL EXT-WALL MULTIPLIER                       WALLI  291
      IF(JOPCDT.EQ.JOPEW) THEN                                                  WALLI  292
        EWMULT = AA(IAVPTR+11)                                                  WALLI  293
        IF(EWMULT.LE.0.98.AND.EWMULT.GE.0.02.AND.MSGLVL.GE.2) THEN              WALLI  294
          CALL MSG(106)                                                         ERR-01 741
        ENDIF                                                                   WALLI  300
      ENDIF                                                                     WALLI  301
C              SPECIAL ERROR MESSAGES                                           WALLI  302
C                                                                               DFTEX31061
C     For I-W and U-W if AREA specified dont't allow HEIGHT & WIDTH             DFTEX31062
C                     if POLYGON specified don't allow AREA                     DFTEX31063
C     For all walls if POLYGON specified don't allow HEIGHT & WIDTH             DFTEX31064
C                                                                               DFTEX31065
      IPOLYF = IGEOS + 9                                                        DFTEX31066
      IPolyi = ISINP(JREF,NSAVE,IPOLYF ,LKDAT,LVAL,VALUE)                       DFTEX31067
      IF(IOP .GT. IOPEW)  THEN                                                  DFTEX31068
        IAreai = ISINP(JREF,NSAVE,IARP   ,LKDAT,LVAL,VALUE)                     DFTEX31069
      ELSE                                                                      DFTEX31070
        IAreai = -2                                                             DFTEX31071
      ENDIF                                                                     DFTEX31072
      Ihti   = ISINP(JREF,NSAVE,IGEOS+4,LKDAT,LVAL,VALUE)                       DFTEX31073
      IWti   = ISINP(JREF,NSAVE,IGEOS+5,LKDAT,LVAL,VALUE)                       DFTEX31074
      Iloci  = ISINP(JREF,NSAVE,ILCP   ,LKDAT,LVAL,VALUE)                       DFTEX31075
      IF(IPolyi .gt. 0) THEN                                                    DFTEX31076
        IF(JOPCDT.NE.JOPEW) THEN                                                DFTEX31077
          IF(IAreai .gt. 0)                                                     DFTEX31078
     $      CALL MSG2(60,IM2,IU,IM1,IU)                                         DFTEX31079
        ENDIF                                                                   DFTEX31080
        IF((Ihti.gt.0) .OR. (Iwti.gt.0))                                        DFTEX31081
     $    CALL MSG2(60,IM2,IU,IHW,IU)                                           DFTEX31082
      ENDIF                                                                     DFTEX31083
      IF(JOPCDT.NE.JOPEW) THEN                                                  DFTEX31084
        IF((IAreai.gt.0) .AND. ((Ihti.gt.0) .OR. (Iwti.gt.0)))                  DFTEX31085
     $    CALL MSG2(60,IM1,IU,IHW,IU)                                           DFTEX31086
      ENDIF                                                                     DFTEX31087
      IF(Iloci .gt. 0)  THEN                                                    DFTEX31088
        IF(JOPCDT.NE.JOPEW) THEN                                                DFTEX31089
          IF(IAreai .gt. 0)                                                     DFTEX31090
     $      CALL MSG2(60,IM3,IU,IM1,IU)                                         DFTEX31091
        ENDIF                                                                   DFTEX31092
      ENDIF                                                                     DFTEX31093
C              SAVE THE PTR TO THE DATA                                         WALLI  321
 2100 CONTINUE                                                                  DEF2   230
C              SET WALL-FLOOR-CEILING FLAG                                      WALLI  344
      IA(IAXS+3) = IWFC - 1                                                     WALLI  345
      IF (IOP.EQ.JOPTW)  IA(IAXS+3) = 3                                         DEF2   231
      IF (IOP.EQ.JOPTWV) IA(IAXS+3) = 4                                         DEF2   232
      RETURN                                                                    WALLI  350
      END                                                                       WALLI  351
      SUBROUTINE WFASH(FLRWT,ILT,IAPTR)                                         4XAA   492
C                                                                               WFASH    3
C              MOVE ASHRAE WEIGHTING FACTORS INTO W-F DATA ARRAY                WFASH    4
C              INTERPOLATE FOR FLOORWEIGHT NOT EXACTLY 30, 70, OR               WFASH    5
C              130 LB/SQFT                                                      WFASH    6
C                                                                               WFASH    7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
C                                                                               WFASH   11
      DIMENSION SOLWF(3,2), CONDWF(3,2), ATWF(3,4), W1(3), R1P(7)               WFASH   12
      REAL LITEWF(3,5,2)                                                        WFASH   13
C                                                                               WFASH   14
      DATA SOLWF / .224,.197,.187,-.044,-.067,-.097 /                           WFASH   15
      DATA CONDWF / .703,.681,.676,-.523,-.551,-.586 /                          WFASH   16
      DATA LITEWF / .53,.53,.53,.59,.59,.59,.87,.87,.87,                        WFASH   17
     1              .50,.50,.50,.53,.53,.53,                                    WFASH   18
     2              -.35,-.40,-.44,-.41,-.46,-.50,-.69,-.74,-.78,               WFASH   19
     3              -.32,-.37,-.41,-.35,-.40,-.44 /                             WFASH   20
      DATA W1 / .82,.87,.91 /                                                   WFASH   21
      DATA ATWF / 1.68,1.81,1.85,-1.73,-1.89,-1.95,.05,.08,.1,                  WFASH   22
     1            -.82,-.87,-.93 /                                              WFASH   23
      DATA R1,GP / .5257, .009 /                                                WFASH   24
      DATA R1P / .44854,.17614,.26457,.23078,.07313,.28150,.26457 /             WFASH   25
C                                                                               WFASH   26
      CALL CKAA(IA,31)                                                          WFASH   27
      IAXS = IAX                                                                4XAA   493
      IAX = IAPTR                                                               4XAA   494
      CALL FILLN(0.,AA(IAX+1),31)                                               WFASH   28
      IW = 2                                                                    FIX15   62
      IF (ABS(FLRWT-30.).LT.0.1) THEN                                           FIX15   63
          IW = 1                                                                FIX15   64
          GO TO 10                                                              FIX15   65
      ELSE IF (ABS(FLRWT-70.).LT.0.1) THEN                                      FIX15   66
          GO TO 10                                                              FIX15   67
      ELSE IF (ABS(FLRWT-130.).LT.0.1) THEN                                     FIX15   68
          IW = 3                                                                FIX15   69
          GO TO 10                                                              FIX15   70
      END IF                                                                    FIX15   71
C              FLOORWEIGHT NOT EXACTLY 30,70, OR 130.  INTERPOLATE USING        WFASH   30
C              EQUATIONS OF J. KERRISK (SEE J. KERRISK, RESPONSE FACTORS        WFASH   31
C              AND WEIGHTING FACTORS - I, LASL, MAR 7, 1979)                    WFASH   32
      IF(FLRWT.LT.0.1) FLRWT = 0.1                                              WFASH   33
      IF(FLRWT.GT.250.) FLRWT = 250.                                            WFASH   34
      IF(FLRWT.GE.30.0) GO TO 3                                                 WFASH   35
      C = (0.1680 * FLRWT) / R1                                                 WFASH   36
      GO TO 8                                                                   WFASH   37
    3 IF (FLRWT.GT.70.0) GO TO 5                                                WFASH   38
      C = ( 5.040 + ( 0.05354 * ( FLRWT - 30.0) ) ) / R1                        WFASH   39
      GO TO 8                                                                   WFASH   40
    5 C = ( 7.1816 + ( 0.1100 * ( FLRWT - 70.0) ) ) / R1                        WFASH   41
    8 CONTINUE                                                                  WFASH   42
      WONE   = -EXP(-1./(C*R1))                                                 WFASH   43
      ONEPW  = 1. + WONE                                                        WFASH   44
C              AIR TEMPERATURE W.F.                                             WFASH   45
      AA(IAX+1) = C * ONEPW                                                     WFASH   46
      AA(IAX+3) = GP / ONEPW                                                    WFASH   47
      AA(IAX+2) = - ( AA(IAX+1) + AA(IAX+3) )                                   WFASH   48
      AA(IAX+5) = WONE                                                          WFASH   49
C              SOLAR W.F.                                                       WFASH   50
      AA(IAX+7) = 1. - C * R1P(1) * ONEPW                                       WFASH   51
      AA(IAX+8) = 1. - AA(IAX+7) + WONE                                         WFASH   52
      AA(IAX+10)= -WONE                                                         WFASH   53
C              GENERAL LIGHTING W.F.                                            WFASH   54
      AA(IAX+12) = 1. - C * R1P(ILT+2) * ONEPW                                  WFASH   55
      AA(IAX+13) = 1. - AA(IAX+12) + WONE                                       WFASH   56
      AA(IAX+15) = -WONE                                                        WFASH   57
C              TASK LIGHTING W.F.                                               WFASH   58
      AA(IAX+17) = 1. - C * R1P(6) * ONEPW                                      WFASH   59
      AA(IAX+18) = 1. - AA(IAX+17) + WONE                                       WFASH   60
      AA(IAX+20) = -WONE                                                        WFASH   61
C              CONDUCTION WEIGHTING FACTORS                                     WFASH   62
      AA(IAX+27) = 1. - C * R1P(2) * ONEPW                                      WFASH   63
      AA(IAX+28) = 1. - AA(IAX+27) + WONE                                       WFASH   64
      AA(IAX+30) = -WONE                                                        WFASH   65
C              PEOPLE/EQUIPMENT W.F. (SAME AS CONDUCTION W.F.)                  WFASH   66
      AA(IAX+22) = AA(IAX+27)                                                   WFASH   67
      AA(IAX+23) = AA(IAX+28)                                                   WFASH   68
      AA(IAX+25) = AA(IAX+30)                                                   WFASH   69
      GO TO 100                                                                 4XAA   495
C              FLOORWEIGHT IS EXACTLY 30,70, OR 130.  USE ASHRAE W.F.           WFASH   71
   10 CONTINUE                                                                  WFASH   72
      AA(IAX+1) = ATWF(IW,1)                                                    WFASH   76
      AA(IAX+2) = ATWF(IW,2)                                                    WFASH   77
      AA(IAX+3) = ATWF(IW,3)                                                    WFASH   78
      AA(IAX+5) = ATWF(IW,4)                                                    WFASH   79
      AA(IAX+7) = SOLWF(IW,1)                                                   WFASH   80
      AA(IAX+8) = SOLWF(IW,2)                                                   WFASH   81
      AA(IAX+10) = W1(IW)                                                       WFASH   82
      AA(IAX+12) = LITEWF(IW,ILT,1)                                             WFASH   83
      AA(IAX+13) = LITEWF(IW,ILT,2)                                             WFASH   84
      AA(IAX+15) = W1(IW)                                                       WFASH   85
      AA(IAX+17) = LITEWF(IW,4,1)                                               WFASH   86
      AA(IAX+18) = LITEWF(IW,4,2)                                               WFASH   87
      AA(IAX+20) = W1(IW)                                                       WFASH   88
      AA(IAX+22) = CONDWF(IW,1)                                                 WFASH   89
      AA(IAX+23) = CONDWF(IW,2)                                                 WFASH   90
      AA(IAX+25) = W1(IW)                                                       WFASH   91
      AA(IAX+27) = CONDWF(IW,1)                                                 WFASH   92
      AA(IAX+28) = CONDWF(IW,2)                                                 WFASH   93
      AA(IAX+30) = W1(IW)                                                       WFASH   94
  100 IAX = IAXS                                                                4XAA   496
      RETURN                                                                    WFASH   95
      END                                                                       WFASH   96
      SUBROUTINE WFO                                                            WFO      2
C                                                                               WFO      3
C              WRITE ASHRAE WF'S AND CUSTOM WF'S TO STANDARD FILE.              CWF1    34
C                                                                               WFO      5
C              WFO USES 8 WORDS OF COMMWK                                       WFO      6
C                                                                               WFO      7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
C              /SAVE/ is no longer needed.  NSAVE moved to IOPCDT(17,..)        OPLST1 260
      COMMON  /SPVALX/ IHP, IAP, IVP, ISHPP, IWP, IDPTHP, ISCP, IPRCAP,         /SPVALX/ 2
     1                 IWFP, ILTP, IINFMP, INZHP, IPLP, IPSP, ILKWP,            /SPVALX/ 3
     2                 ITKWP, IEKWP, IPAP, ILWSFP, ITWSFP, IPOLSP,              GEO4     1
     3                 IEQWFP, KWH, KWA, KWV, KWSHP, KWW, KWDPTH,               /SPVALX/ 5
     4                 KWSC, KWLT, KWINFM, KWNZH, KWPL, KWPS,                   /SPVALX/ 6
     5                 KWLKW, KWTKW, KWEKW, KWPA, KWLWSF, KWTWSF,               /SPVALX/ 7
     6                 KWEWSF, IFURTP, IFURFP, IFURWP, IFLRWP, KWWF,            /SPVALX/ 8
     7                 KWFLRW,ILTSP,NINFKY,INFKYP(20),DEFINF(10,4),             LTSYS1   2
     8                 ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM,             DFTEXP 197
     9                 ISPLOCP,ISPDIS,NSPDIS                                    DFTEXP 198
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
C                                                                               WFO     23
      EQUIVALENCE (IDP,COMMWK(1)),(NAMPTR,COMMWK(2)),                           WFO     24
     1            (IAPTR,COMMWK(3)),(IST,COMMWK(4)),                            WFO     25
     2            (IPT,COMMWK(5)),(LBLK,COMMWK(6)),                             WFO     26
     3            (NSTOR,COMMWK(7)),(IWF,COMMWK(8))                             WFO     27
      COMMON /ISPLST/ ISPLST(9999),ISPLOC(9999)                                 -048a    8
      COMMON  /WFZDAT/  NW,NWP,LENWF,RINF,FWA,PFA,FLAR,IL,IFUR,MZ,              CWF1    36
     1                  IZ,IFRN,MWFX,NWALLM,MWFQW,MWFG,MWFA,IWFERR,             CWF1    37
     2                  MWFX1,MWFDET,MWFB,MWFC,MWFGS,NWMAX,RRADC,               CWF1    38
     3                  AFRAD,ABSW,FLRFUR,RCONC,RFILM,NOPQ,FREM,SFFLR,          CWF1    39
     4                  UAIW,NWFC(2,3),NWFS,ISPNAM(8)                           CWF1    40
C                                                                               WFO     28
      NWF    = IOPCDT(13,JOPWF)                                                 WFO     29
C              IST IS WHERE THE OUTPUT BUFFER STARTS                            WFO     30
      IST    = IAX + 1                                                          WFO     31
C              IPT IS THE CURRENT OUTPUT BUFFER POINTER                         WFO     32
      IPT    = IAX                                                              WFO     33
      LBLK   = NWF*LWF                                                          WFO     35
C              SAVE SPACE IN BLANK COMMON                                       WFO     37
      CALL CKAA(IA,LBLK)                                                        WFO     38
C              FILL OUTPUT BUFFER WITH ZEROES                                   WFO     39
      CALL FILLN(0.,AA(IST),LBLK)                                               WFO     40
C              MOVE WEIGHTING FACTORS INTO OUTPUT BUFFER                        CWF1   131
      DO 100 I=1,NWF                                                            WFO     41
C              GET NAME AND DATA POINTER                                        WFO     42
      IRX = IOPCDT(14,JOPWF) + I - 1                                            REFTB1 347
      NAMPTR = IREFTB(1,IRX)                                                    REFTB1 348
      IDP = IREFTB(2,IRX)                                                       REFTB1 349
C              MOVE NAME INTO OUTPUT BUFFER                                     WFO     45
      IF (NAMPTR .GT. 0)  CALL MOVEN(ISYMTB(1,NAMPTR),IA(IPT+1),4)              WFO     46
C              MOVE DATA INTO OUTPUT BUFFER                                     WFO     47
      IAVPTR = IDP + IOPCDT(17,JOPWF) + 2*IOPCDT(16,JOPWF)                      4XAA   497
      NSTOR  = LWF - 4                                                          WFO     48
      IF (IDP .GT. 0)  CALL MOVEN(AA(IAVPTR+1),AA(IPT+5),NSTOR)                 CWF1   132
      IPT    = IPT + LWF                                                        WFO     50
  100 CONTINUE                                                                  WFO     52
C              WRITE STANDARD FILE RECORDS                                      WFO     53
  200 WRITE (ISTNDF) NWF,LBLK                                                   WFO     54
      CALL WRITEN(ISTNDF,IA(IST),LBLK)                                          WFO     55
      IF (IREPRT(32) .EQ. 1)                                                    WFO     56
     1 CALL DUMPIT(20HWEIGHTING FACTORS   ,IA(IST),LBLK)                        WFO     57
C                                                                               CWF1   133
C              PRINT WEIGHTING FACTOR SUMMARY REPORT                            CWF1   134
C                                                                               CWF1   135
      IF (IREPRT(11).GT.0) CALL WFREP                                           SUBTY8  37
C              SET WALL PROPERTY BLOCK SF POINTER                               WFO     87
      IWPB   = IWFB + LBLK                                                      WFO     88
      RETURN                                                                    WFO     89
      END                                                                       WFO     90
      SUBROUTINE RESFAC(INAM)                                                   RESFAC   2
C                                                                               RESFAC   3
C              COMMON BLOCKS AND RELATED STATEMENTS                             RESFAC   4
C                                                                               RESFAC   5
      DIMENSION INAM(1)                                                         RESFAC   6
      COMMON  /LAYRD/  NLAYRS, ALAYRD(5,10), AFRI, AFRO                         /LAYRD/  2
C                                                                               RESFAC   8
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /RED/   MRF, U, NRF, COMR, SRFX, SRFY, SRFZ, RFX(105),            /RED/    2
     1                RFY(105), RFZ(105)                                        /RED/    3
C                                                                               RESFAC  13
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
C              DIMENSION STATEMENTS                                             RESFAC  15
C                                                                               RESFAC  16
C                                                                               RESFAC  17
C              EQUIVALENCE STATEMENTS                                           RESFAC  18
C                                                                               RESFAC  19
      DIMENSION XL(10),XK(10),SH(10),DE(10),RES(10),                            RESFAC  20
     1          RESFX(105),RESFY(105),RESFZ(105)                                RESFAC  21
      DOUBLE PRECISION Y0,R,X1,Y1,Z1,BP,AP,DP,XI(100),REFX,REFY,REFZ,           RESFAC  22
     1                 EX,FLOATK,SB,T,FK,RX(100),RY(100),RZ(100)                RESFAC  23
     2                ,FLIM,APP(5),BPP(5),DPP(5),G(10),E(10),                   RESFAC  24
     3                 G1,E1,XA,XA1,XB,XC,XC1,XD,P,XN2,P2,P3,                   CWF1   142
     4                 A(4096),B(4096),D(4096),PHI(4096)                        RESFAC  26
      EQUIVALENCE (M,NLAYRS),(SRFX,SX),                                         RESFAC  27
     1           (SRFY,SY),(SRFZ,SZ),(RFX,RESFX),(RFY,RESFY),                   RESFAC  28
     2           (RFZ,RESFZ),(COMR,CR)                                          RESFAC  29
C                                                                               RESFAC  30
C              EXECUTABLE CODE                                                  RESFAC  31
C                                                                               RESFAC  32
C              RESFAC NEEDS 40K OCTAL FOR ITS ROOT FINDER.  SINCE WE            RESFAC  33
C              DO NOT HAVE ENOUGH CORE FOR THIS AND THE STANDARD FILE,          RESFAC  34
C              WE WRITE THE SF ONTO A TEMPORARY FILE, MAKE SURE WE              RESFAC  35
C              HAVE 40K IN IA, AND THEN READ THE SF BACK IN AT THE END          RESFAC  36
C              OF RESFAC.                                                       RESFAC  37
      CALL FILLN(0.,RFX(1),105)                                                 RESFAC  38
      CALL FILLN(0.,RFY(1),105)                                                 RESFAC  39
      CALL FILLN(0.,RFZ(1),105)                                                 RESFAC  40
      DO 100 I=1,NLAYRS                                                         RESFAC  41
      XL(I)  = ALAYRD(1,I)                                                      RESFAC  42
      XK(I)  = ALAYRD(2,I)                                                      RESFAC  43
      DE(I)  = ALAYRD(3,I)                                                      RESFAC  44
      SH(I)  = ALAYRD(4,I)                                                      RESFAC  45
      RES(I) = ALAYRD(5,I)                                                      RESFAC  46
  100 CONTINUE                                                                  RESFAC  47
      IF (AFRI .LE. 0)  GO TO 110                                               RESFAC  48
      M      = M + 1                                                            RESFAC  49
      IF(M .GT. 10) GOTO 4000                                                   RESFAC  50
      SH(M)  = 0.0                                                              RESFAC  51
      DE(M)  = 0.0                                                              RESFAC  52
      XK(M)  = 0.0                                                              RESFAC  53
      XL(M)  = 0.0                                                              RESFAC  54
      RES(M) = AFRI                                                             RESFAC  55
  110 DO 130 I=1,M                                                              RESFAC  56
      IF (DE(I).EQ.0.0) GO TO 120                                               RESFAC  57
      ALPHA  = SQRT(XK(I)/(DE(I)*SH(I)))                                        RESFAC  58
C              FOR CALCULATING THE RESP. FCTORS IN METRIC UNITS,                RESFAC  59
C              WE ONLY NEED TO CHANGE THE TIME-INTERVAL UNIT                    RESFAC  60
C                              (60=SQRT3600)                                    RESFAC  61
      IF (METIN.EQ.1) ALPHA = ALPHA*60.                                         RESFAC  62
      G(I)   = DBLE( XL(I) / ALPHA )                                            RESFAC  63
      E(I)   = DBLE( XK(I) / ALPHA )                                            RESFAC  64
      GO TO 130                                                                 RESFAC  65
C              RESISTANCE-ONLY LAYER                                            RESFAC  66
  120 C      = 1.0E-3                                                           RESFAC  67
      ALPHA  = SQRT(RES(I))                                                     RESFAC  68
      G(I)   = DBLE( C * ALPHA )                                                RESFAC  69
      E(I)   = DBLE( C / ALPHA )                                                RESFAC  70
  130 CONTINUE                                                                  RESFAC  71
       CALL  ACCUM0( APP )                                                      RESFAC  72
       CALL  ACCUM0( BPP )                                                      RESFAC  73
       CALL  ACCUM0( DPP )                                                      RESFAC  74
      R      = 0.0D0                                                            RESFAC  75
          DO  135  I = 1 , M                                                    RESFAC  76
          IF( XK(I) .GT. 0.0 )  GOTO  134                                       RESFAC  77
              R = R + DBLE( RES(I) )                                            RESFAC  78
              GOTO  135                                                         RESFAC  79
134           R = R + DBLE( XL(I) / XK(I) )                                     RESFAC  80
135       CONTINUE                                                              RESFAC  81
      N2     = 2**(M-1)                                                         RESFAC  82
      DO 170 L=1,N2                                                             RESFAC  83
      L1     = L-1                                                              RESFAC  84
      P      = G(1)                                                             RESFAC  85
      XA     = 1.0D0                                                            RESFAC  86
      XB     = 1.0D0/E(1)                                                       RESFAC  87
      XC     = E(1)                                                             RESFAC  88
      XD     = 1.0D0                                                            RESFAC  89
      IF (M.EQ.1) GO TO 160                                                     RESFAC  90
      DO 150 J=2,M                                                              RESFAC  91
      G1     = G(J)                                                             RESFAC  92
      E1     = E(J)                                                             RESFAC  93
      IF (MOD(L1,2).EQ.0) GO TO 140                                             RESFAC  94
      G1     = -G1                                                              RESFAC  95
      E1     = -E1                                                              RESFAC  96
  140 L1     = L1/2                                                             RESFAC  97
      P      = P+G1                                                             RESFAC  98
      XA1    = XA                                                               RESFAC  99
      XC1    = XC                                                               RESFAC 100
      XA     = XA+XB*E1                                                         RESFAC 101
      XB     = XB+XA1/E1                                                        RESFAC 102
      XC     = XC+XD*E1                                                         RESFAC 103
      XD     = XD+XC1/E1                                                        RESFAC 104
  150 CONTINUE                                                                  RESFAC 105
  160 PHI(L) = P                                                                RESFAC 106
      XN2    = DBLE(N2)                                                         PC     242
      XA     = XA/XN2                                                           RESFAC 108
      XB     = XB/XN2                                                           RESFAC 109
      XD     = XD/XN2                                                           RESFAC 110
      A(L)   = XA                                                               RESFAC 111
      B(L)   = XB                                                               RESFAC 112
      D(L)   = XD                                                               RESFAC 113
      P2     = P*P                                                              RESFAC 114
      P3     = P2*P                                                             RESFAC 115
      CALL ACCUM( P2*XA, APP )                                                  RESFAC 116
      CALL ACCUM( P2*XD, DPP )                                                  RESFAC 117
      CALL ACCUM( P3*XB, BPP )                                                  RESFAC 118
  170 CONTINUE                                                                  RESFAC 119
      CALL ACCUMS( APP, AP )                                                    RESFAC 120
      CALL ACCUMS( BPP, BP )                                                    RESFAC 121
      CALL ACCUMS( DPP, DP )                                                    RESFAC 122
      BP     = BP/6.0D0                                                         RESFAC 123
      CALL ROOTS(R,BP,PHI,A,B,D,XI,RX,RY,RZ,IR,N2)                              RESFAC 124
      IF( IR .EQ. 0 ) GO TO 3000                                                RESFAC 125
      IF(IR.LE.100) GO TO 180                                                   RESFAC 126
      IR     = 100                                                              RESFAC 127
      CALL MSG2(77,INAM(1),K,K,K)                                               RESFAC 128
  180 Y0     = 1.0D0/R                                                          RESFAC 129
      X1     = (R*DP/2.0D0-BP)/R**2                                             RESFAC 130
      Y1     = -BP/R**2                                                         RESFAC 131
      Z1     = (R*AP/2.0D0-BP)/R**2                                             RESFAC 132
      CR     = EXP(-SNGL(XI(1)))                                                RESFAC 133
      SX     = 0.0                                                              RESFAC 134
      SY     = 0.0                                                              RESFAC 135
      SZ     = 0.0                                                              RESFAC 136
      K      = 0                                                                RESFAC 137
  200 K      = K+1                                                              RESFAC 138
      IF (K .EQ. 101) GO TO 350                                                 RESFAC 139
      REFX   = 0.0D0                                                            RESFAC 140
      REFY   = 0.0D0                                                            RESFAC 141
      REFZ   = 0.0D0                                                            RESFAC 142
      IF (K.GE.3) GO TO 230                                                     RESFAC 143
      IF (K.EQ.2) GO TO 220                                                     RESFAC 144
      REFX   = Y0+X1                                                            RESFAC 145
      REFY   = Y0+Y1                                                            RESFAC 146
      REFZ   = Y0+Z1                                                            RESFAC 147
      GO TO 230                                                                 RESFAC 148
  220 REFX   = -X1                                                              RESFAC 149
      REFY   = -Y1                                                              RESFAC 150
      REFZ   = -Z1                                                              RESFAC 151
  230 FLOATK = DBLE(FLOAT(K-1))                                                 RESFAC 152
      DO 300 I=1,IR                                                             RESFAC 153
      EX     = XI(I) * FLOATK                                                   RESFAC 154
      IF (EX .GT. 30.0D0) GO TO 310                                             RESFAC 155
      T      = DEXP(-EX)                                                        RESFAC 156
      SB     = DEXP(-XI(I))                                                     RESFAC 157
      FK     = (SB-2.0D0+1.0D0/SB)*T                                            RESFAC 158
      IF (K.EQ.1) FK=SB                                                         RESFAC 159
      IF (K.EQ.2) FK=SB**2-2.0D0*SB                                             RESFAC 160
      REFX   = REFX+FK*RX(I)                                                    RESFAC 161
      REFY   = REFY+FK*RY(I)                                                    RESFAC 162
      REFZ   = REFZ+FK*RZ(I)                                                    RESFAC 163
  300 CONTINUE                                                                  RESFAC 164
  310 RESFX(K)=SNGL(REFX)                                                       RESFAC 165
      RESFY(K)=SNGL(REFY)                                                       RESFAC 166
      RESFZ(K)=SNGL(REFZ)                                                       RESFAC 167
      SX     = SX+SNGL(REFX)                                                    RESFAC 168
      SY     = SY+SNGL(REFY)                                                    RESFAC 169
      SZ     = SZ+SNGL(REFZ)                                                    RESFAC 170
      IF (K.LE.2) GO TO 200                                                     RESFAC 171
      FLIMS  = .0000001                                                         RESFAC 172
      IF (METIN.EQ.1)  CALL KDIV(FLIMS,6,1,1-METIN)                             RESFAC 173
      FLIM   = DBLE( FLIMS )                                                    RESFAC 174
      IF ((REFX .GT. -FLIM) .AND. (REFY .LT. FLIM) .AND.                        RESFAC 175
     1      (REFZ .GT. -FLIM)) GO TO 350                                        RESFAC 176
      SX1    = RESFX(K-2)-RESFX(K-1)                                            RESFAC 177
      SX2    = RESFX(K-1)-RESFX(K)                                              RESFAC 178
      SY1    = RESFY(K-2)-RESFY(K-1)                                            RESFAC 179
      SY2    = RESFY(K-1)-RESFY(K)                                              RESFAC 180
      SZ1    = RESFZ(K-2)-RESFZ(K-1)                                            RESFAC 181
      SZ2    = RESFZ(K-1)-RESFZ(K)                                              RESFAC 182
      IF((SX2 .GT. 0.0D0) .OR. (SY2 .LT. 0.0D0) .OR.                            RESFAC 183
     1 (SZ2 .GT. 0.0D0)) GO TO 200                                              RESFAC 184
      IF((SX1 .GT. SX2) .OR. (SY1 .LT. SY2) .OR.                                RESFAC 185
     1   (SZ1 .GT. SZ2)) GO TO 200                                              RESFAC 186
      IF ((ABS(RESFX(K)/RESFX(K-1)-CR)/CR .GE. 0.005) .OR.                      RESFAC 187
     1    (ABS(RESFY(K)/RESFY(K-1)-CR)/CR .GE. 0.005) .OR.                      RESFAC 188
     2    (ABS(RESFZ(K)/RESFZ(K-1)-CR)/CR .GE. 0.005)) GO TO 200                RESFAC 189
  350 NRF    = K                                                                RESFAC 190
      U      = 1.0/SNGL(R)                                                      RESFAC 191
      IF (NRF .GE. 100) CALL MSG2(77,INAM(1),K,K,K)                             RESFAC 192
      GO TO 9000                                                                RESFAC 193
 3000 CALL MSG2(79,INAM(1),K,K,K)                                               RESFAC 194
      GO TO 9000                                                                RESFAC 195
 4000 CALL MSG2(62,'MATERIAL LAYERS ',10,9,II)                                  ERR-01 742
 9000 RETURN                                                                    RESFAC 199
      END                                                                       RESFAC 200
      SUBROUTINE ACCUM( X, D )                                                  ACCUM    2
      DOUBLE PRECISION  X, Y, D(5), C(4)                                        ACCUM    3
      DATA  C/1.0D0, 1.0D3, 1.0D6, 1.0D9/                                       ACCUM    4
      Y     = DABS( X )                                                         ACCUM    5
          DO  200  I = 1 , 4                                                    ACCUM    6
          IF( Y .GT. C(I) )  GOTO  200                                          ACCUM    7
              D(I) = D(I) + X                                                   ACCUM    8
              RETURN                                                            ACCUM    9
200       CONTINUE                                                              ACCUM   10
      D(5) = D(5) + X                                                           ACCUM   11
      RETURN                                                                    ACCUM   12
      END                                                                       ACCUM   13
      SUBROUTINE  ACCUM0 ( D )                                                  ACCUM   14
      DOUBLE PRECISION  D(5)                                                    ACCUM   15
          DO  100  I = 1 , 5                                                    ACCUM   16
100       D(I) = 0.0D0                                                          ACCUM   17
      RETURN                                                                    ACCUM   18
      END                                                                       ACCUM   19
      SUBROUTINE  ACCUMS ( D, DS )                                              ACCUM   20
      DOUBLE PRECISION  D(5), DS                                                ACCUM   21
      DS = D(1) + D(2) + D(3) + D(4) + D(5)                                     ACCUM   22
      RETURN                                                                    ACCUM   23
      END                                                                       ACCUM   24
      DOUBLE PRECISION FUNCTION BOFS(N2,B,PHI,X)                                BOFS     2
      DOUBLE PRECISION B(4096),PHI(4096),X,BFD(5)                               BOFS     3
      BOFS   = 0.0D0                                                            BOFS     4
       CALL  ACCUM0( BFD )                                                      BOFS     5
      DO 10 J=1,N2                                                              BOFS     6
      CALL ACCUM( B(J)*DSIN(PHI(J)*X ), BFD )                                   BOFS     7
   10 CONTINUE                                                                  BOFS     8
       CALL  ACCUMS( BFD, BOFS )                                                BOFS     9
      RETURN                                                                    BOFS    10
      END                                                                       BOFS    11
      SUBROUTINE NEWTON(X,Y,ROOT,PHI,B,XD,N2)                                   NEWTON   2
      DOUBLE PRECISION B(4096),PHI(4096),X,Y,ROOT,XD,PJ,BJ,RAT,XN,              NEWTON   3
     .                 XDD(5), XND(5)                                           NEWTON   4
C              FIND ROOT NEAR (X,Y) BY NEWTON-RAPHSON METHOD.                   NEWTON   5
      ROOT   = X                                                                NEWTON   6
      XN     = Y                                                                NEWTON   7
      N = 0                                                                     NEWTON   8
       CALL  ACCUM0( XDD )                                                      NEWTON   9
      DO 60 J=1,N2                                                              NEWTON  10
      PJ     = PHI(J)                                                           NEWTON  11
       CALL  ACCUM( B(J) * PJ * DCOS( PJ * ROOT ), XDD )                        NEWTON  12
   60 CONTINUE                                                                  NEWTON  13
       CALL  ACCUMS( XDD, XD )                                                  NEWTON  14
      GO TO 150                                                                 NEWTON  15
80     CALL  ACCUM0( XDD )                                                      NEWTON  16
       CALL  ACCUM0( XND )                                                      NEWTON  17
      N = N + 1                                                                 NEWTON  18
      IF(N.GT.20) RETURN                                                        NEWTON  19
      DO 140 J = 1,N2                                                           NEWTON  20
      PJ     = PHI(J)                                                           NEWTON  21
      BJ     = B(J)                                                             NEWTON  22
      RAT    =   PJ * ROOT                                                      NEWTON  23
       CALL  ACCUM( BJ * DSIN( RAT ), XND )                                     NEWTON  24
       CALL  ACCUM( BJ * PJ * DCOS( RAT ), XDD )                                NEWTON  25
140   CONTINUE                                                                  NEWTON  26
       CALL  ACCUMS( XDD, XD )                                                  NEWTON  27
       CALL  ACCUMS( XND, XN )                                                  NEWTON  28
  150 RAT    = XN / XD                                                          NEWTON  29
      ROOT   = ROOT-RAT                                                         NEWTON  30
      IF ((RAT .GE. 1.0D-10) .OR. (RAT .LE. -1.0D-10)) GO TO 80                 NEWTON  31
      RETURN                                                                    NEWTON  32
      END                                                                       NEWTON  33
      SUBROUTINE ROOTS(R,BP,PHI,A,B,D,XI,RX,RY,RZ,IR,N2)                        ROOTS    2
      DOUBLE PRECISION PHI(4096), A(4096), B(4096), D(4096)                     ROOTS    3
      DOUBLE PRECISION ROOT,SZMESH,XLIMIT,PI,OLDROT,DELTA,                      ROOTS    4
     1                   EPSILN,X1,X2,X3,Y1,Y2,Y3,XD,                           ROOTS    5
     2                R21,R32,S,DD,AA,C1,XM,RX(100),RY(100),RZ(100),            ROOTS    6
     3                XI(100),R,BP,XDOLD                                        ROOTS    7
      DOUBLE PRECISION BOFS                                                     ROOTS    8
      LOGICAL FLAG                                                              ROOTS    9
C                                                                               ROOTS   10
C              SCAN INTERVAL S FOR ROOTS                                        ROOTS   11
C              INITIALIZE                                                       ROOTS   12
      SZMESH   =   4.0D0                                                        ROOTS   13
      XLIMIT   =   6.0D0                                                        ROOTS   14
      PI     =   3.14159265358D0                                                ROOTS   15
      IR     =   0                                                              ROOTS   16
      FLAG   = .FALSE.                                                          ROOTS   17
      OLDROT = 0.0D0                                                            ROOTS   18
      XDOLD  = 1.0D0                                                            ROOTS   19
      DELTA  = PI / (PHI(1) * SZMESH)                                           ROOTS   20
      EPSILN = DELTA/45.0D0                                                     ROOTS   21
      X1     = DSQRT(R / BP)                                                    ROOTS   22
      Y1     = BOFS(N2,B,PHI,X1)                                                ROOTS   23
    4 X2     = X1 + DELTA                                                       ROOTS   24
      Y2     = BOFS(N2,B,PHI,X2)                                                ROOTS   25
      R21    = Y2 / Y1                                                          ROOTS   26
C              ---                                                              ROOTS   27
C              TEST FOR ODD NUMBER OF ROOTS BETWEEN X1 AND X2 .                 ROOTS   28
    7 IF (R21 .LT. 0.0D0) GO TO 10001                                           ROOTS   29
C TEST FOR POSSIBLE EVEN (.GT. 0) NUMBER OF ROOTS BETWEEN X1 AND X3 .           ROOTS   30
      X3     = X2 + DELTA                                                       ROOTS   31
    9 Y3     = BOFS(N2,B,PHI,X3)                                                ROOTS   32
      R32    = Y3/Y2                                                            ROOTS   33
C TEST FOR MINIMUM IN ABSOLUTE VALUE OF Y BETWEEN X1 AND X3 .                   ROOTS   34
      IF ((R21 .GT. 1.0D0) .OR. (R32 .LT. 1.0D0)) GO TO 13                      ROOTS   35
C              TEST FOR VALUES CLOSE TO AXIS                                    ROOTS   36
      IF ((R21 .LT. 0.5D0) .OR. (R32 .GT. 2.0D0)) GO TO 20001                   ROOTS   37
C              NO ROOT, MOVE FORWARD.                                           ROOTS   38
   13 X1     = X2                                                               ROOTS   39
      IF (X1 .GE. XLIMIT)  RETURN                                               ROOTS   40
      Y1     = Y2                                                               ROOTS   41
      X2     = X3                                                               ROOTS   42
      Y2     = Y3                                                               ROOTS   43
      R21    = R32                                                              ROOTS   44
      GO TO 7                                                                   ROOTS   45
C              FIND ODD ROOT BETWEEN X1 AND X2 .                                ROOTS   46
10001 IF (X2 - X1  .LT.  EPSILN)   GO TO 12002                                  ROOTS   47
C              DIVIDE INTERVAL.                                                 ROOTS   48
10002 Y3     = Y2                                                               ROOTS   49
      X3     = X2                                                               ROOTS   50
      X2     = (X3 + X1) / 2.0D0                                                ROOTS   51
      Y2     = BOFS(N2,B,PHI,X2)                                                ROOTS   52
      R21    = Y2 / Y1                                                          ROOTS   53
C              LOOK AT INTERVAL .                                               ROOTS   54
      IF (R21.LT.0.0D0) GO TO 10001                                             ROOTS   55
      R32    = Y3/Y2                                                            ROOTS   56
      IF ((R21 .GT. 1.0D0) .OR. (R32 .LT. 1.0D0)) GO TO 11101                   ROOTS   57
      IF ((R21 .LT. 0.5D0) .OR. (R32 .GT. 2.0D0)) GO TO 20001                   ROOTS   58
C              NO ROOT, MOVE FORWARD TO CHECK SECOND HALF OF INTERVAL.          ROOTS   59
11101 X1     = X2                                                               ROOTS   60
      Y1     = Y2                                                               ROOTS   61
      X2     = X3                                                               ROOTS   62
      Y2     = Y3                                                               ROOTS   63
      R21    = R32                                                              ROOTS   64
      GO TO 10001                                                               ROOTS   65
C              SMALL INTERVAL, SO USE NEWTON-RAPHSON                            ROOTS   66
12002 CALL NEWTON (X1,Y1,ROOT,PHI,B,XD,N2)                                      ROOTS   67
      IF (ROOT-OLDROT .LT. EPSILN)                                              ROOTS   68
     1            CALL NEWTON(X2,Y2,ROOT,PHI,B,XD,N2)                           ROOTS   69
      IF (ROOT-OLDROT .LT. EPSILN) GO TO  10002                                 ROOTS   70
C              PROCESS ROOT .                                                   ROOTS   71
      IF (XDOLD/XD .GT. 0.0D0) GO TO 250                                        ROOTS   72
      XDOLD  = XD                                                               ROOTS   73
      OLDROT = ROOT                                                             ROOTS   74
      IF(ROOT.GT.XLIMIT) RETURN                                                 ROOTS   75
      IR     = IR + 1                                                           ROOTS   76
      IF(IR.GT.100) RETURN                                                      ROOTS   77
      S      = ROOT * ROOT                                                      ROOTS   78
      DD     = 0.0D0                                                            ROOTS   79
      AA     = 0.0D0                                                            ROOTS   80
      DO 200 J = 1,N2                                                           ROOTS   81
      C1     = DCOS(PHI(J) * ROOT)                                              ROOTS   82
      DD     = DD + D(J) * C1                                                   ROOTS   83
      AA     = AA + A(J) * C1                                                   ROOTS   84
  200 CONTINUE                                                                  ROOTS   85
      XM     = -2.0D0/(S*XD)                                                    ROOTS   86
      RX(IR) = XM * DD                                                          ROOTS   87
      RY(IR) = XM                                                               ROOTS   88
      RZ(IR) = XM * AA                                                          ROOTS   89
      XI(IR) = S                                                                ROOTS   90
C              MOVE FORWARD .                                                   ROOTS   91
      X1     = ROOT + EPSILN                                                    ROOTS   92
      Y1     = BOFS(N2,B,PHI,X1)                                                ROOTS   93
      IF (FLAG) GO TO 12015                                                     ROOTS   94
      GO TO 4                                                                   ROOTS   95
C              HAVE MISSED A ROOT, GO BACK AND LOOK AGAIN                       ROOTS   96
  250 X1     = OLDROT + EPSILN                                                  ROOTS   97
      Y1     = BOFS(N2,B,PHI,X1)                                                ROOTS   98
      DELTA  = DELTA/2.0D0                                                      ROOTS   99
      GO TO 4                                                                   ROOTS  100
C IF I FOUND THE FIRST OF 2 CLOSE ROOTS, THE OTHER COMES BEFORE XOLDND.         ROOTS  101
12015 X2     = XOLDND                                                           ROOTS  102
      Y2     = YOLDND                                                           ROOTS  103
      FLAG   = .FALSE.                                                          ROOTS  104
      R21    = Y2/Y1                                                            ROOTS  105
      IF (R21 .LT. 0.0D0) GO TO 10001                                           ROOTS  106
      X3     = X2 + X2 - X1                                                     ROOTS  107
      GO TO 9                                                                   ROOTS  108
C              SEEK POSSIBLE PAIR OF ROOTS BETWEEN X1 AND X3 .                  ROOTS  109
C              STORE OLD END, DIVIDE INTERVAL.                                  ROOTS  110
20001 XOLDND = X3                                                               ROOTS  111
      YOLDND = Y3                                                               ROOTS  112
      X3     = X2                                                               ROOTS  113
      Y3     = Y2                                                               ROOTS  114
      X2     = (X1 + X3) / 2.0D0                                                ROOTS  115
      Y2     = BOFS(N2,B,PHI,X2)                                                ROOTS  116
C              LOOK AT INTERVAL.                                                ROOTS  117
      IF (R21 .LT. 0.0D0) GO TO 20510                                           ROOTS  118
      R32    = Y3/Y2                                                            ROOTS  119
      IF ((R21 .GT. 1.0D0) .OR. (R32 .LT. 1.0D0)) GO TO 20170                   ROOTS  120
      IF ((R21 .LT. 0.5D0) .OR. (R32 .GT. 2.0D0)) GO TO 20001                   ROOTS  121
C              NO ROOTS IN FIRST PART, SO MOVE FORWARD.                         ROOTS  122
20170 X1     =   X2                                                             ROOTS  123
      Y1     =   Y2                                                             ROOTS  124
      X2     =   X3                                                             ROOTS  125
      Y2     =   Y3                                                             ROOTS  126
      R21    =   R32                                                            ROOTS  127
C              LOOK AT INTERVAL.                                                ROOTS  128
      IF (R21 .LT. 0.0D0) GO TO 20510                                           ROOTS  129
      X3     =   X2  +  X2  -  X1                                               ROOTS  130
      Y3     =   BOFS(N2,B,PHI,X3)                                              ROOTS  131
      R32    = Y3/Y2                                                            ROOTS  132
      IF ((R21 .GT. 1.0D0) .OR. (R32 .LT. 1.0D0)) GO TO 20290                   ROOTS  133
      IF ((R21 .LT. 0.5D0) .OR. (R32 .GT. 2.0D0)) GO TO 20001                   ROOTS  134
C              NO ROOTS IN SECOND PART, SO MOVE FORWARD.                        ROOTS  135
20290 X1     =   X2                                                             ROOTS  136
      Y1     =   Y2                                                             ROOTS  137
      X2     =   X3                                                             ROOTS  138
      Y2     =   Y3                                                             ROOTS  139
      R21    =   R32                                                            ROOTS  140
C              LOOK AT INTERVAL.                                                ROOTS  141
      IF (R21 .LT. 0.0D0) GO TO 20510                                           ROOTS  142
      X3     =   XOLDND                                                         ROOTS  143
      Y3     =   YOLDND                                                         ROOTS  144
      R32    = Y3/Y2                                                            ROOTS  145
      IF ((R21 .GT. 1.0D0) .OR. (R32 .LT. 1.0D0)) GO TO 20390                   ROOTS  146
      IF ((R21 .LT. 0.5D0) .OR. (R32 .GT. 2.0D0)) GO TO 20001                   ROOTS  147
C              NO ROOTS IN THIRD PART, SO MOVE FORWARD.                         ROOTS  148
20390 X1     =   X2                                                             ROOTS  149
      Y1     =   Y2                                                             ROOTS  150
      X2     =   X3                                                             ROOTS  151
      Y2     =   Y3                                                             ROOTS  152
      R21    =   R32                                                            ROOTS  153
C              LOOK AT INTERVAL.                                                ROOTS  154
      IF (R21 .LT. 0.0D0) GO TO 20510                                           ROOTS  155
      X3     =   X2  +  X2  -  X1                                               ROOTS  156
      Y3     =   BOFS(N2,B,PHI,X3)                                              ROOTS  157
      R32    = Y3/Y2                                                            ROOTS  158
      IF ((R21 .GT. 1.0D0) .OR. (R32 .LT. 1.0D0)) GO TO 20490                   ROOTS  159
      IF ((R21 .LT. 0.5D0) .OR. (R32 .GT. 2.0D0)) GO TO 20001                   ROOTS  160
C              NO ROOTS IN FOURTH PART, SO MOVE FORWARD.                        ROOTS  161
20490 X1     =   X2                                                             ROOTS  162
      Y1     =   Y2                                                             ROOTS  163
      GO TO 4                                                                   ROOTS  164
C SEEKING DOUBLE ROOT, FOUND SINGLE.  SEEK ANOTHER SINGLE ROOT BEFORE           ROOTS  165
C              END OF ORIGINAL INTERVAL.                                        ROOTS  166
20510 FLAG   =   .TRUE.                                                         ROOTS  167
      GO TO 10001                                                               ROOTS  168
      END                                                                       ROOTS  169
      SUBROUTINE WFMAIN(MSP)                                                    CWF1   144
C                                                                               CWF1   145
C              CALLED BY WFCALC FOR SPACE MSP WITH FLOOR-WEIGHT = 0             CWF4     1
C              CALCULATES CUSTOM WEIGHTING FACTORS FOR A SPACE.                 CWF1   147
C              SEE SUBROUTINE WFDATA FOR DEFINITION OF VARIABLES.               CWF1   148
C                                                                               CWF1   149
C              CALCULATION SEQUENCE:                                            CWF1   150
C              WFCALC: FOR EACH SPACE, CALLS WFMAIN.                            CWF4     2
C              WFMAIN: CALLS WFDATA TO GET INPUT DATA FOR CWF                   CWF1   152
C                         CALCULATION FOR A SPACE                               CWF1   153
C                      CALLS WFGEN TO GENERATE CWF'S                            CWF1   154
C                         CALLS WFMATG, WHICH SOLVES HEAT BALANCE               CWF1   155
C                            EQUATIONS TO GET SEQUENCE OF COOLING               CWF1   156
C                            LOADS FOR EACH EXCITATION (SOLAR,                  CWF1   157
C                            CONDUCTION, AIR TEMP, ETC.)                        CWF1   158
C                          CALLS WFDECN, WHICH DOES A REGRESSION ON             CWF1   159
C                            EACH COOLING LOAD SEQUENCE TO GET THE              CWF1   160
C                            WEIGHTING FACTORS                                  CWF1   161
C                               CALLS WFQOUT TO REGENERATE THE                  CWF1   162
C                               COOLING LOAD SEQUENCE USING THE                 CWF1   163
C                               CWF'S FOR COMPARISON WITH THE                   CWF1   164
C                               ORIGINAL COOLING LOAD SEQUENCE                  CWF1   165
C                      IF CWF CALC SUCCEEDS (IWFERR = 0), ENTERS CWF'S          CWF4     3
C                      INTO AA ARRAY. OTHERWISE, RETURNS TO WFCALC              CWF4     4
C                      AND ASHRAE WF'S ARE USED.                                CWF4     5
C                                                                               CWF1   167
C                                                                               WFMAIN   6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON /BLDLC/ SITPAR(77),BLDPAR(26)                                      -044e5   1
      COMMON /CLOCK / CLOCK(10)                                                 /CLOCK/  2
      INTEGER ICLOCK8                                                           PC       1
      EQUIVALENCE (ICLOCK8,CLOCK(8))                                            PC       2
      COMMON/COUNT/ NOTH,NITH,NSURF,NINSRF                                      OPLST1 259
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /DDAY/   DDAY(34), NDESDY                                         DDAY1   54
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /HOLALT/ NHOLA(2),IHOLTY(2),IHOLDY(60,2),IHOLMN(60,2)              HOLID1   4
      COMMON  /HREP  / NVTLIM,IVTLIM(2,30),NRB,LRB,NHRP,LHRP,IRB,IHRP,          HVAC7    1
     $                 JRBOP,JHROP                                              HVAC7    2
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IRUNPD/  NRUNPD,IRUNPD(6,15)                                     ALPHA    1
      COMMON /ISPLST/ ISPLST(9999),ISPLOC(9999)                                 -048a    8
      COMMON /ITITLE/ ITITLE(10,5),ITITLT(10,5)                                 FIX11    1
      COMMON  /LBLOCK/ LSFBLK(20),N(20)                                         BLIND    2
      EQUIVALENCE (LWPARB,LSFBLK(4)),(LCB1,LSFBLK(5)),                          /LBLOCK/ 3
     1            (LCB2,LSFBLK(6)),(LCONSB,LSFBLK(6)),                          /LBLOCK/ 4
     2            (LGEOB,LSFBLK(9))                                             BLIND    3
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON  /LIBFLG/ MATFLG, LAYFLG, LSTFLG                                   /LIBFLG/ 2
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON  /MATP/   NMAT, IMATB, LMATB                                       /MATP/   2
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      COMMON/WFAC/NVT(6),NWT(6),V(10,6),W(5,6),CONN                             /WFAC/   2
      COMMON  /WFCOOL/ NQS,CRS,QS(50),DET                                       /WFCOOL/ 2
      COMMON/WFFURN/RCONF,RRADF,CHWT(2),RZFUR(5,2),COMRF(2)                     /WFFURN/ 2
      COMMON/WFLITE/FRIL(5),FRILP(5)                                            /WFLITE/ 2
      COMMON  /WFZDAT/  NW,NWP,LENWF,RINF,FWA,PFA,FLAR,IL,IFUR,MZ,              /WFZDAT/ 2
     1                  IZ,IFRN,MWFX,NWALLM,MWFQW,MWFG,MWFA,IWFERR,             /WFZDAT/ 3
     2                  MWFX1,MWFDET,MWFB,MWFC,MWFGS,NWMAX,RRADC,               /WFZDAT/ 4
     3                  AFRAD,ABSW,FLRFUR,RCONC,RFILM,NOPQ,FREM,SFFLR,          /WFZDAT/ 5
     4                  UAIW,NWFC(2,3),NWFS,ISPNAM(8)                           CWF1   143
C                                                                               WFMAIN  32
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
C                                                                               WFMAIN  33
      COMMON /GTVALX/ IGTCP,ISHCP,ICONP,IVTP,IGPCALC,IVTSWP,ISC1P,              -44d5    1
     1                ISC2P,ISS1P,ISS2P,IFTC,ISTC,IFABS,                        /GTVALX/ 3
     2                KWGTC,KWSHC,KWVT,KWSHSW,KWVTSW,KWSC1,KWSC2,               SUBTY8   3
     3                KWSS1,KWSS2,KWFTC,KWSTC,KWFABS,                           WLIB1    2
     4                IUCENTR,IHCOUT,IHROUT,IHIN,ITRANG,IABSANG,ITVANG,         WLIB1    3
     5                INLAYER,IRBVIS,IRBHEMI,ISHDCOF,IGPTHCK,IW3TIR,            WLIB1    4
     6                IEMBIR,IEMFIR,IGPCOND,IGPDCON,IGPVIS,IGPDVIS,             WLIB1    5
     7                IGPDENS,IGPDDEN,IGPPR,IGPDPR,ICOND                        WLIB1    6
      DIMENSION WWFRZ(100)                                                      WFMAIN  34
C                                                                               WFMAIN  35
C                                                                               WFMAIN  59
      LENWF = 10                                                                WFMAIN  60
C                                                                               WFMAIN  61
      CALL PTRS(JOPSP,MSP,IRXSP,IDPSP,IAVPSP)                                   CWF1   174
C              SPACE NAME                                                       CWF1   175
      NAMPTR = IREFTB(1,IRXSP)                                                  CWF1   176
      IF(NAMPTR.GT.0) CALL MOVEN(ISYMTB(1,NAMPTR),ISPNAM(1),8)                  CWF1   177
      IF(NAMPTR.EQ.0) CALL MOVEN(IBLANK(1),ISPNAM(1),8)                         CWF1   178
C                                                                               WFMAIN 146
C              ORDINAL NUMBER OF WEIGHTING FACTOR BLOCK FOR THIS SPACE          CWF1   179
      IWFPTR = IA(IAVPSP+17)                                                    CWF1   181
      MWF = ISYMTB(12,IWFPTR)                                                   CWF3    29
      CALL PTRS(JOPWF,MWF,IRXWF,IDPWF,IAVPWF)                                   CWF3    30
C                                                                               WFMAIN 156
C              INITIALIZE ERROR FLAG FOR THIS SPACE TO ZERO                     WFMAIN 157
      IWFERR = 0                                                                WFMAIN 158
C              INITIALIZE WF ARRAY                                              WFMAIN 159
      DO 5 I = 1,6                                                              WFMAIN 160
      DO 6 J = 1,10                                                             WFMAIN 161
    6 V(J,I) = 0.                                                               WFMAIN 162
      DO 7 J = 1,5                                                              WFMAIN 163
    7 W(J,I) = 0.                                                               WFMAIN 164
    5 CONTINUE                                                                  WFMAIN 165
C              NUMBER OF SURFACES IN CURRENT SPACE                              WFMAIN 166
      NWP    = 0                                                                WFMAIN 167
C              EXTERIOR WALLS                                                   WFMAIN 168
C              INIT NUMBER OF DIFFERENT SURFACE TYPES IN THIS SPACE             CWF1   186
      NEWC = 0                                                                  CWF1   187
      NIWC = 0                                                                  CWF1   188
      NUWC = 0                                                                  CWF1   189
      NDOORC = 0                                                                CWF1   190
      NWINC = 0                                                                 CWF1   191
      DO 40 IEW = 1,NEW                                                         CWF1   192
      IRXEW = IOPCDT(14,JOPEW) + IEW - 1                                        CWF1   193
      IF(IREFTB(4,IRXEW).NE.IRXSP) GO TO 40                                     CWF1   194
      IDPEW = IREFTB(2,IRXEW)                                                   CWF1   195
      NWP = NWP + 1                                                             CWF1   196
      NEWC = NEWC + 1                                                           CWF1   197
C              COUNT WINDOWS AND DOORS EXCEPT FOR TROMBE WALLS                  CWF1   198
      IF(IA(IDPEW+3).LE.2) THEN                                                 CWF1   199
        DO IWIN = 1,NWIN                                                        CWF1   200
          IRXWIN = IOPCDT(14,JOPWIN) + IWIN - 1                                 CWF1   201
          IF(IREFTB(4,IRXWIN).EQ.IRXEW) THEN                                    CWF1   202
             NWP = NWP + 1                                                      CWF1   203
             NWINC = NWINC + 1                                                  CWF1   204
          ENDIF                                                                 CWF1   205
        ENDDO                                                                   CWF1   206
        DO IDR = 1,NDOOR                                                        CWF1   207
          IRXDR = IOPCDT(14,JOPDR) + IDR - 1                                    CWF1   208
          IF(IREFTB(4,IRXDR).EQ.IRXEW) THEN                                     CWF1   209
             NWP = NWP + 1                                                      CWF1   210
             NDOORC = NDOORC + 1                                                CWF1   211
          ENDIF                                                                 CWF1   212
        ENDDO                                                                   CWF1   213
      ENDIF                                                                     CWF1   214
   40 CONTINUE                                                                  CWF1   215
C              INTERIOR WALLS                                                   CWF1   216
      DO IIW = 1,NIW                                                            CWF1   217
         CALL PTRS(JOPIW,IIW,IRXIW,IDPIW,IAVPIW)                                CWF1   218
         IWTYP = ISYMTB(12,IA(IAVPIW+12))                                       CWF1   219
         IF(IWTYP.GE.3) THEN                                                    CWF1   220
C              ADIABATIC AND INTERNAL WALLS (NO NEXT-TO SPACE)                  CWF1   221
            IF(IREFTB(4,IRXIW).EQ.IRXSP) THEN                                   CWF1   222
               NWP = NWP + 1                                                    CWF1   223
               NIWC = NIWC + 1                                                  CWF1   224
            ENDIF                                                               CWF1   225
         ELSE                                                                   CWF1   226
C              STANDARD AND AIR WALLS                                           CWF1   227
C              SPACE NO. OF NEXT-TO SPACE                                       CWF1   228
         ISPNT = ISYMTB(12,IA(IAVPIW+1))                                        CWF1   229
         IF(IREFTB(4,IRXIW).EQ.IRXSP.OR.ISPNT.EQ.MSP) THEN                      CWF1   230
            NWP = NWP + 1                                                       CWF1   231
            NIWC = NIWC + 1                                                     CWF1   232
         ENDIF                                                                  CWF1   233
         ENDIF                                                                  CWF1   234
      ENDDO                                                                     CWF1   235
C             UNDERGROUND WALLS                                                 CWF1   236
      DO IUG = 1,NUG                                                            CWF1   237
         IRXUG = IOPCDT(14,JOPUGW) + IUG -1                                     CWF1   238
            IF(IREFTB(4,IRXUG).EQ.IRXSP) THEN                                   CWF1   239
               NWP = NWP + 1                                                    CWF1   240
               NUWC = NUWC + 1                                                  CWF1   241
            ENDIF                                                               CWF1   242
      ENDDO                                                                     CWF1   243
C             NUMBER OF OPAQUE SURFACES                                         CWF1   244
      NOPQ = NEWC + NIWC+ NUWC                                                  CWF1   245
C              SUM UA FOR INTERIOR WALLS WITH U-VALUE CHOSEN TO BE LARGE        WFMAIN 185
C              TO ACCOUNT FOR CONVECTIVE HEAT TRANSFER BETWEEN ZONES.           WFMAIN 186
C              UA*TR APPEARS IN HEAT BALANCE FOR AIR TEMP WEIGHTING             WFMAIN 187
C              FACTORS (SEE WFMATG).  DECREMENT NWP SINCE THESE LARGE-          WFMAIN 188
C              U-VALUE WALLS WILL NOT BE CONSIDERED IN HEAT BALANCE FOR         WFMAIN 189
C              SOLAR, LIGHTING, ETC. WEIGHTING FACTORS. (A SIMILAR              WFMAIN 190
C              CHECK FOR WALLS OF THIS TYPE IS MADE IN WFDATA.)                 WFMAIN 191
      UAIW = 0.                                                                 WFMAIN 192
      IF(NIWC.EQ.0) GO TO 60                                                    CWF1   246
      DO 50 IIW = 1,NIW                                                         CWF1   247
      CALL PTRS(JOPIW,IIW,IRXIW,IDPIW,IAVPIW)                                   CWF1   248
      IWTYP = ISYMTB(12,IA(IAVPIW+12))                                          CWF4     6
      IF(IWTYP.GE.3.AND.IREFTB(4,IRXIW).NE.IRXSP) GO TO 50                      CWF4     7
      IF(IWTYP.LE.2) THEN                                                       CWF4     8
         ISPNT = ISYMTB(12,IA(IAVPIW+1))                                        CWF4     9
         IF(IREFTB(4,IRXIW).NE.IRXSP.AND.ISPNT.NE.MSP) GO TO 50                 CWF4    10
      ENDIF                                                                     CWF4    11
C                                                                               CWF1   249
C             COUNT ONLY GLAZED WINDOWS IN STANDARD TYPE INTERIOR               CWF1   250
C             WALLS BETWEEN A SUNSPACE AND NON-SUNSPACE                         CWF1   251
C                                                                               CWF1   252
C             SKIP IF NOT STANDARD I-W                                          CWF1   253
      IF(IWTYP.NE.1) GO TO 39                                                   CWF1   255
C              SUNSPACE FLAG OF WALL'S PARENT SPACE                             CWF1   256
      IRXSPAR = IREFTB(4,IRXIW)                                                 CWF1   257
      IAVSPAR = IREFTB(2,IRXSPAR)+IOPCDT(17,JOPSP)+2*IOPCDT(16,JOPSP)           CWF1   258
      ISSPAR = ISYMTB(12,IA(IAVSPAR+153))                                       LTSYS1 281
C              SUNSPACE FLAG OF WALL'S NEXT-TO SPACE                            CWF1   260
      CALL PTRS(JOPSP,ISPNT,IRXSPNT,IDPSNT,IAVPSNT)                             CWF1   262
      ISSNT = ISYMTB(12,IA(IAVPSNT+153))                                        LTSYS1 282
      IF(ISSPAR.NE.1.AND.ISSNT.NE.1) GO TO 39                                   CWF1   264
      DO IWIN = 1,NWIN                                                          CWF1   265
         CALL PTRS(JOPWIN,IWIN,IRXWIN,IDPWIN,IAVPWIN)                           CWF1   266
         IF(IREFTB(4,IRXWIN).EQ.IRXIW) THEN                                     CWF1   267
C              GLASS TYPE                                                       CWF1   268
            NGTY = ISYMTB(12,IA(IAVPWIN+1))                                     CWF1   269
            CALL PTRS(JOPGT,NGTY,IRXGT,IDPGT,IAVPGT)                            CWF1   270
C              COUNT IF GLAZED APERTURE                                         CWF1   271
      IF (NOVAL(IA(IAVPGT+ISHCP)).NE.0) THEN                                    SUBTY8  38
         NWP = NWP + 1                                                          CWF2     3
      ELSE                                                                      CWF2     4
C              FROM WINDOW LIBRARY                                              CWF2     5
      NGTC = ISYMTB(12,IA(IAVPGT+2))                                            CWF2     6
      CALL PTRS(JOPGTC,NGTC,IRXGTC,IDPGTC,IAVPGTC)                              CWF2     7
         IF(INT(AA(IAVPGTC+INLAYER)).NE.0) NWP = NWP + 1                        CWF2     8
      ENDIF                                                                     CWF2     9
         ENDIF                                                                  CWF1   273
      ENDDO                                                                     CWF1   274
   39 CONTINUE                                                                  CWF1   275
C              U-VALUE FOR INT-WALL-TYPE = AIR                                  CWF1   276
      IF(IWTYP.EQ.2) THEN                                                       CWF1   279
         ICNS = ISYMTB(12,IA(IAVPIW+3))                                         DFTEX4 524
         CALL PTRS(JOPCNS,ICNS,IRXCN,IDPCN,IAVPCN)                              DFTEX4 525
         U    = AMAX1(0.001,AA(IAVPCN+5))                                       DFTEX4 526
         NWP = NWP - 1                                                          CWF1   282
         NOPQ = NOPQ - 1                                                        CWF1   283
         IPOLYF = 22                                                            CWF1   284
         IF(NOVAL(AA(IAVPIW+2)).NE.0) THEN                                      DFTEX4 527
C              USE AREA IF THERE                                                DFTEX4 528
           AINTWL = AA(IAVPIW+2)                                                DFTEX4 529
         ELSE                                                                   DFTEX4 530
           IF(NOVAL(AA(IAVPIW+IPOLYF)).EQ.0)  THEN                              DFTEX4 531
C              RECTANGLE                                                        DFTEX4 532
             AINTWL = AA(IAVPIW+17)*AA(IAVPIW+18)                               DFTEX4 533
           ELSE                                                                 DFTEX4 534
C              POLYGON                                                          DFTEX4 535
             IPOLYN = ISYMTB(12,IA(IAVPIW+IPOLYF))                              DFTEX4 536
             CALL PTRS(40,IPOLYN,IRXPOL,IDATX,IAVPOLY)                          DFTEX4 537
             CALL POLYICK(IA(IDATX+1),AA(IAVPOLY+1),AINTWL,PERIM,0,             DFTEX4 538
     $                    IERRFL)                                               DFTEX4 539
           ENDIF                                                                DFTEX4 540
         ENDIF                                                                  DFTEX4 541
         UAIW = UAIW + U*AINTWL                                                 CWF1   295
      ENDIF                                                                     CWF1   296
   50 CONTINUE                                                                  WFMAIN 230
   60 CONTINUE                                                                  WFMAIN 231
C              ERROR RETURN IF LESS THAN TWO OPAQUE SURFACES                    WFMAIN 232
      IF(NOPQ.GE.2) GO TO 42                                                    WFMAIN 233
      IWFERR = IWFERR+1                                                         WFMAIN 234
      IF(MSGLVL.GT.1) THEN                                                      CWF4    12
      CALL MSG2(63,ISPNAM(1),II,II,II)                                          ERR-01 743
      ENDIF                                                                     CWF4    20
      GO TO 999                                                                 WFMAIN 243
   42 CONTINUE                                                                  WFMAIN 244
C              SET FURNITURE FLAG                                               WFMAIN 245
      IFRN   = 1                                                                WFMAIN 246
      FWA = AA(IAVPSP+102)                                                      LTSYS1 283
      PFA = AA(IAVPSP+16)                                                       CWF1   305
C              AVOID PFA EXACTLY 1.0                                            WFMAIN 249
      IF(PFA.GE.1.0) PFA = 0.99                                                 WFMAIN 250
      IF(PFA.EQ.0.0 .OR. FWA.EQ.0.0 .OR. NOVAL(PFA).EQ.0 .OR.                   NEWEXP  63
     $   NOVAL(FWA).EQ.0) IFRN=0                                                NEWEXP  64
      NWP    = NWP+IFRN                                                         WFMAIN 252
C                                                                               WFMAIN 253
C                                                                               WFMAIN 254
C              GET SPACE IN AA FOR SURFACE DATA                                 WFMAIN 255
C              AND FOR MATRICES USED IN WFMATG                                  WFMAIN 256
C                                                                               WFMAIN 257
      IF(NWP.LE.NWMAX) GO TO 16                                                 WFMAIN 258
C              USE THE SAME AA ARRAY AREA AS THE PREVIOUS SPACE FOR THE         CWF1   306
C              CWF CALCULATION FOR THIS SPACE, BUT GET ADDITIONAL AA            CWF1   307
C              SPACE IF THIS SPACE HAS MORE SURFACES.                           CWF1   308
C              ADDITIONAL STORAGE REQUIRED OVER PREVIOUS SPACE                  WFMAIN 259
      NADD   = NWP*(50+2*NWP) - NWMAX*(50+2*NWMAX) +                            WFMAIN 260
     1   (LENWF + 5)*(NWP - NWMAX)                                              WFMAIN 261
      CALL CKAA(IA,NADD)                                                        WFMAIN 262
      IAX    = IAX + NADD                                                       WFMAIN 263
C              POINTERS FOR ARRAYS USED IN WEIGHTING FACTOR CALCULATION         WFMAIN 264
      MWFQW  = MWFX + NWP*LENWF                                                 WFMAIN 265
      MWFG   = MWFQW + 50*NWP                                                   WFMAIN 266
      MWFA   = MWFG + NWP*NWP                                                   WFMAIN 267
      MWFX1  = MWFA+NWP*NWP                                                     WFMAIN 268
      MWFDET = MWFX1+NWP                                                        WFMAIN 269
      MWFB   = MWFDET + NWP                                                     WFMAIN 270
      MWFC   = MWFB+NWP                                                         WFMAIN 271
      MWFGS  = MWFC + NWP                                                       WFMAIN 272
C              UPDATE MAX NO. OF SURFACES                                       WFMAIN 273
      NWMAX  = NWP                                                              WFMAIN 274
   16 CONTINUE                                                                  WFMAIN 275
      DO I=MWFX,IAX                                                             NEWEXP  65
        IA(I) = 0                                                               NEWEXP  66
      ENDDO                                                                     NEWEXP  67
C              DEBUG PRINT                                                      WFMAIN 276
      IF(IREPRT(35).EQ.0) GO TO 19                                              WFMAIN 277
      WRITE(IOUTPT,17) IZ,NWP,NADD,IAX,NWMAX,LENWF,UAIW                         WFMAIN 278
   17 FORMAT(1H1,41H WFMAIN-IZ,NWP,NADD,IAX,NWMAX,LENWF,UAIW=,6I8,F10.3)        WFMAIN 279
      WRITE(IOUTPT,18) MWFX,MWFQW,MWFG,MWFA,MWFX1,MWFDET,MWFB,MWFC,MWFGS        WFMAIN 280
   18 FORMAT(51H MWFX,MWFQW,MWFG,MWFA,MWFX1,MWFDET,MWFB,MWFC,MWFGS=,            WFMAIN 281
     1   9I8 //)                                                                WFMAIN 282
   19 CONTINUE                                                                  WFMAIN 283
C                                                                               WFMAIN 284
C                                                                               WFMAIN 285
C              GET INPUT DATA                                                   WFMAIN 286
C                                                                               WFMAIN 287
      NWFS   = NWFS + 1                                                         WFMAIN 288
      CALL WFDATA (MSP)                                                         CWF1   309
C                                                                               WFMAIN 290
C                                                                               WFMAIN 291
C              GO ON TO NEXT SPACE IF ERROR                                     WFMAIN 292
      IF(IWFERR.NE.0) GO TO 999                                                 WFMAIN 293
C              CHECK IF TOO FEW DELAYED SURFACES                                CWF4    21
      IF( (NWFC(2,1)*NWFC(2,2).GT.0) .OR. (NWFC(2,1)*NWFC(2,3).GT.0)            CWF4    22
     1  .OR. (NWFC(2,2)*NWFC(2,3).GT.0) ) GO TO 48                              CWF4    23
      IWFERR = IWFERR + 1                                                       CWF4    24
      IF(MSGLVL.GT.1) THEN                                                      CWF4    25
         CALL MSG2(65,ISPNAM(1),NWFC(2,1),NWFC(2,2),NWFC(2,3))                  ERR-01 744
      ENDIF                                                                     CWF4    35
      GO TO 999                                                                 CWF4    36
   48 CONTINUE                                                                  CWF4    37
C                                                                               WFMAIN 317
C              FURNITURE DATA                                                   WFMAIN 318
C                                                                               WFMAIN 319
C              TOTAL AREA OF ALL FLOOR SECTIONS                                 WFMAIN 320
      AFRAD = 0.                                                                WFMAIN 321
      IF(IFRN.EQ.0) GO TO 4005                                                  WFMAIN 322
C              FURNITURE HAS BEEN SPECIFIED.  PRINT ERROR MESSAGE               WFMAIN 323
C              IF FLRFUR IS ZERO                                                WFMAIN 324
      IF(FLRFUR.GT.0.0) GO TO 21                                                WFMAIN 325
      IWFERR = IWFERR + 1                                                       WFMAIN 326
      IF(MSGLVL.GT.1) THEN                                                      CWF4    38
         CALL MSG2(66,ISPNAM(1),II,II,II)                                       ERR-01 745
      ENDIF                                                                     CWF4    49
      GO TO 999                                                                 WFMAIN 335
   21 CONTINUE                                                                  WFMAIN 336
      ISP    = MWFX + NW*LENWF                                                  WFMAIN 337
C              EFFECTIVE AREA OF FURNITURE FOR CONVECTIVE EXCHANGE              WFMAIN 338
      AA(ISP) = FLRFUR * FWA / CHWT(IFUR)                                       WFMAIN 339
C     PUT UPPER LIMIT ON FURN AREA EQUAL TO FLOOR AREA                          WFMAIN 340
      IF(AA(ISP).GT.FLRFUR) AA(ISP) = FLRFUR                                    WFMAIN 341
C              EFFECTIVE AREA OF FURNITURE FOR RADIATIVE EXCHANGE               WFMAIN 342
      AFRAD = AA(ISP)                                                           WFMAIN 343
      IA(ISP+1) = -999                                                          CWF1   316
      AA(ISP+2)=RCONF                                                           WFMAIN 345
      AA(ISP+3)=RRADF                                                           WFMAIN 346
      AA(ISP+5)=0.0                                                             WFMAIN 347
C              SEE SUBROUTINE WFMATG FOR APPORTIONING OF S-F                    WFMAIN 348
C              BETWEEN FURNITURE AND FLOOR                                      WFMAIN 349
      IA(ISP+7)=0                                                               WFMAIN 350
 4005 CONTINUE                                                                  WFMAIN 351
C                                                                               WFMAIN 352
C              DEBUG PRINT OF INPUT DATA                                        WFMAIN 353
C                                                                               WFMAIN 354
      IF(IREPRT(35).EQ.0) GO TO 998                                             WFMAIN 355
      WRITE(IOUTPT,25) (ISPNAM(II),II=1,8),NWP                                  CWF1   317
   25 FORMAT(/ 6H SPACE,3X,8A4,20HNO. OF SURFACES,NWP=,I4)                      CWF1   318
      WRITE(IOUTPT,24) ((NWFC(I,J),J=1,3),I=1,2)                                WFMAIN 358
   24 FORMAT(/16X,5HWALLS,4X,6HFLOORS,2X,8HCEILINGS //                          WFMAIN 359
     1       6H TOTAL,5X,3I10 / 8H DELAYED,3X,3I10)                             WFMAIN 360
      DO 30 I=1,NWP                                                             WFMAIN 361
      ISP    = MWFX+(I-1)*LENWF                                                 WFMAIN 362
      WRITE(IOUTPT,26) I, ISP, AA(ISP), IA(ISP+1), (AA(ISP+J),J=2,6)            WFMAIN 363
     .               , IA(ISP+7), IA(ISP+9)                                     WFMAIN 364
   26 FORMAT(/ 4H IS=,I2,5H ISP=,I10,                                           WFMAIN 365
     1  37H AW,IMP,RCON,RRAD,RFO,Q,RVAL,IST,IWY=                                WFMAIN 366
     2  / 5X,F10.4,I5,5F10.4,2I3)                                               WFMAIN 367
   30 CONTINUE                                                                  WFMAIN 376
      WRITE(IOUTPT,27)RINF,FWA,PFA,FLAR,IL,IFUR,FLRFUR,FREM                     WFMAIN 377
   27 FORMAT(/39H RINF,FWA,PFA,FLAR,IL,IFUR,FLRFUR,FREM=,                       WFMAIN 378
     1  4F10.4,2I4,2F10.4/)                                                     WFMAIN 379
C              RADIATION EXCHANGE MATRIX MULTIPLIERS                            WFMAIN 380
      DO 28 I=1,NWP                                                             WFMAIN 381
      WRITE(IOUTPT,29) ( AA(I+(J-1)*NWP+MWFG-1),J=1,NWP )                       WFMAIN 382
   29 FORMAT(/ 1X,25F5.0)                                                       WFMAIN 383
   28 CONTINUE                                                                  WFMAIN 384
C                                                                               WFMAIN 385
  998 CONTINUE                                                                  WFMAIN 386
C                                                                               WFMAIN 406
C              GENERATE WEIGHTING FACTORS FOR THIS SPACE.  LOOP OVER            WFMAIN 407
C              WEIGHTING FACTOR TYPES -- 1=SOLAR, 2=AIR TEMPERATURE,            WFMAIN 408
C              3=PEOPLE-EQUIPMENT, 4=GENERAL LIGHTING, 5=TASK LIGHTING          WFMAIN 409
C              (ASSUMED FLUORESCENT) 6=CONDUCTION                               LTSYS1 284
C              CALCULATE ONLY AIR TEMP WF IF MOD THERMAL BALANCE RUN            WFMAIN 411
C                                                                               WFMAIN 412
      DO 2000 KW=1,6                                                            WFMAIN 413
      IF(LDSTYP.EQ.2.AND.KW.NE.2) GO TO 2000                                    WFMAIN 414
      IF(KW.EQ.5) IL=1                                                          LTSYS1 285
      NNU    = 3                                                                WFMAIN 416
      NDE    = 2                                                                WFMAIN 417
      IF(KW.NE.2) GO TO 1900                                                    WFMAIN 418
      NNU    = 4                                                                WFMAIN 419
      NDE    = 2                                                                WFMAIN 420
 1900 CONTINUE                                                                  WFMAIN 421
C                                                                               WFMAIN 422
      CALL WFGEN(MSP,KW,NNU,NDE)                                                CWF1   324
C                                                                               WFMAIN 424
C              GO ON TO NEXT SPACE IF ERROR                                     WFMAIN 425
      IF(IWFERR.NE.0) GO TO 999                                                 WFMAIN 426
C                                                                               WFMAIN 427
 2000 CONTINUE                                                                  WFMAIN 428
C                                                                               WFMAIN 429
C              ENTER WEIGHTING FACTORS FOR THIS SPACE                           WFMAIN 430
C              INTO AA ARRAY                                                    WFMAIN 431
C                                                                               WFMAIN 432
C              ORDINAL WF NUMBER FOR THIS SPACE;                                CWF1   325
      ISPWFN = IA(IAVPSP+17)                                                    CWF3    31
      ISPWFN = ISYMTB(12,ISPWFN)                                                CWF3    32
C              WF POINTER                                                       CWF1   328
      CALL PTRS(JOPWF,ISPWFN,IRXWF,IDPWF,IAVPWF)                                CWF1   329
      MWF = IAVPWF                                                              CWF1   330
C     ZERO WEIGHTING FACTOR SECTION OF AA ARRAY                                 WFMAIN 434
      DO 2100 I=1,31                                                            CWF1   331
 2100 AA(MWF+I) = 0.0                                                           WFMAIN 436
C                                                                               WFMAIN 437
C     ENTER WEIGHTING FACTORS FOR THIS SPACE INTO AA ARRAY                      WFMAIN 438
C     ORDER OF ENTRY IS AIR TEMP, SOLAR, GEN. LIGHTING,                         WFMAIN 439
C     TASK LIGHTING, EQUIP/PEOPLE, CONDUCTION                                   WFMAIN 440
C                                                                               WFMAIN 441
C     V WEIGHTING FACTORS (G* FOR AIR TEMP)                                     WFMAIN 442
C                                                                               WFMAIN 443
      NF = NVT(1)                                                               WFMAIN 444
      DO 2301 I=1,NF                                                            WFMAIN 445
 2301 AA(MWF+I+6 ) = V(I,1)                                                     CWF1   332
      NF = NVT(2)                                                               WFMAIN 447
      DO 2302 I=1,NF                                                            WFMAIN 448
 2302 AA(MWF+I   ) = V(I,2)                                                     CWF1   333
      NF = NVT(3)                                                               WFMAIN 450
      DO 2303 I=1,NF                                                            WFMAIN 451
 2303 AA(MWF+I+21) = V(I,3)                                                     CWF1   334
      NF = NVT(4)                                                               WFMAIN 453
      DO 2304 I=1,NF                                                            WFMAIN 454
 2304 AA(MWF+I+11) = V(I,4)                                                     CWF1   335
      NF = NVT(5)                                                               WFMAIN 456
      DO 2305 I=1,NF                                                            WFMAIN 457
 2305 AA(MWF+I+16) = V(I,5)                                                     CWF1   336
      NF = NVT(6)                                                               WFMAIN 459
      DO 2306 I=1,NF                                                            WFMAIN 460
 2306 AA(MWF+I+26) = V(I,6)                                                     CWF1   337
C                                                                               WFMAIN 462
C     W WEIGHTING FACTORS (P FOR AIR TEMP)                                      WFMAIN 463
C     NOTE SIGN CHANGE TO CORRESPOND TO DOE-2 LOADS/SYSTEMS CONVENTION          WFMAIN 464
C                                                                               WFMAIN 465
      NF = NWT(1)                                                               WFMAIN 466
      DO 2401 I=1,NF                                                            WFMAIN 467
 2401 AA(MWF+I+9 ) = -W(I,1)                                                    CWF1   338
      NF = NWT(2)                                                               WFMAIN 469
      DO 2402 I=1,NF                                                            WFMAIN 470
 2402 AA(MWF+I+4 ) =  W(I,2)                                                    CWF1   339
      NF = NWT(3)                                                               WFMAIN 472
      DO 2403 I=1,NF                                                            WFMAIN 473
 2403 AA(MWF+I+24) = -W(I,3)                                                    CWF1   340
      NF = NWT(4)                                                               WFMAIN 475
      DO 2404 I=1,NF                                                            WFMAIN 476
 2404 AA(MWF+I+14) = -W(I,4)                                                    CWF1   341
      NF = NWT(5)                                                               WFMAIN 478
      DO 2405 I=1,NF                                                            WFMAIN 479
 2405 AA(MWF+I+19) = -W(I,5)                                                    CWF1   342
      NF = NWT(6)                                                               WFMAIN 481
      DO 2406 I=1,NF                                                            WFMAIN 482
 2406 AA(MWF+I+29) = -W(I,6)                                                    CWF1   343
C                                                                               WFMAIN 484
C                                                                               WFMAIN 485
      IF(IREPRT(35).EQ.0) GO TO 999                                             WFMAIN 486
      WRITE(IOUTPT,996) (ISPNAM(II),II=1,8), IZ                                 CWF1   344
  996 FORMAT(/1H1,1X,28HWEIGHTING FACTORS FOR SPACE ,8A4,                       CWF1   345
     1 4H IZ=,I2//)                                                             WFMAIN 489
      DO 997 KW=1,6                                                             WFMAIN 490
      IF(KW.EQ.1.AND.LDSTYP.EQ.3) WRITE(IOUTPT,55)                              WFMAIN 491
      IF(KW.EQ.2) WRITE(IOUTPT,75)                                              WFMAIN 492
      IF(KW.EQ.3.AND.LDSTYP.EQ.3) WRITE(IOUTPT,95)                              WFMAIN 493
      IF(KW.EQ.4.AND.LDSTYP.EQ.3) WRITE(IOUTPT,85)                              WFMAIN 494
      IF(KW.EQ.5.AND.LDSTYP.EQ.3) WRITE(IOUTPT,86)                              WFMAIN 495
      IF(KW.EQ.6.AND.LDSTYP.EQ.3) WRITE(IOUTPT,97)                              WFMAIN 496
      IF(LDSTYP.EQ.2.AND.KW.NE.2) GO TO 997                                     WFMAIN 497
      NZ     = NVT(KW)                                                          WFMAIN 498
      WRITE(IOUTPT,65)(V(I,KW),I=1,NZ)                                          WFMAIN 499
   65 FORMAT(/ 15H NU0, NU1, ETC. /(1P5E15.6))                                  WFMAIN 500
      IF(LDSTYP.EQ.2.AND.KW.NE.2) GO TO 997                                     WFMAIN 501
      NZ     = NWT(KW)                                                          WFMAIN 502
      WRITE(IOUTPT,67)(W(I,KW),I=1,NZ)                                          WFMAIN 503
   67 FORMAT(13H W1, W2, ETC. /(1P5E15.6))                                      WFMAIN 504
      WRITE(IOUTPT,127)CONN                                                     WFMAIN 505
  127 FORMAT(/18H ZONE CONDUCTANCE=,1PE15.6)                                    WFMAIN 506
   55 FORMAT(//24H SOLAR WEIGHTING FACTORS)                                     WFMAIN 507
   75 FORMAT(//34H AIR TEMPERATURE WEIGHTING FACTORS)                           WFMAIN 508
   85 FORMAT(//27H LIGHTING WEIGHTING FACTORS)                                  WFMAIN 509
   95 FORMAT(//35H PEOPLE/EQUIPMENT WEIGHTING FACTORS)                          WFMAIN 510
   86 FORMAT(//32H TASK LIGHTING WEIGHTING FACTORS)                             WFMAIN 511
   97 FORMAT(//29H CONDUCTION WEIGHTING FACTORS)                                WFMAIN 512
  997 CONTINUE                                                                  WFMAIN 513
  999 CONTINUE                                                                  WFMAIN 514
       RETURN                                                                   WFMAIN 551
      END                                                                       WFMAIN 552
      BLOCK DATA  DATWF                                                         DATWF    2
C                                                                               DATWF    3
      COMMON/WFFURN/RCONF,RRADF,CHWT(2),RZFUR(5,2),COMRF(2)                     /WFFURN/ 2
      COMMON/WFLITE/FRIL(5),FRILP(5)                                            /WFLITE/ 2
      COMMON  /WFZDAT/  NW,NWP,LENWF,RINF,FWA,PFA,FLAR,IL,IFUR,MZ,              /WFZDAT/ 2
     1                  IZ,IFRN,MWFX,NWALLM,MWFQW,MWFG,MWFA,IWFERR,             /WFZDAT/ 3
     2                  MWFX1,MWFDET,MWFB,MWFC,MWFGS,NWMAX,RRADC,               /WFZDAT/ 4
     3                  AFRAD,ABSW,FLRFUR,RCONC,RFILM,NOPQ,FREM,SFFLR,          /WFZDAT/ 5
     4                  UAIW,NWFC(2,3),NWFS,ISPNAM(8)                           CWF1   143
C                                                                               DATWF    7
      DATA FRIL /.67,.59,.19,.71,.67/,FRILP /1.0,0.09,0.09,1.0,0.09/            DATWF    8
      DATA RCONF, RRADF, CHWT / 1.7, 1.111, 7.0, 20.0 /                         DATWF    9
      DATA RZFUR / 1.91606, -1.83648, -.07546, -.00392, -.00020,                DATWF   10
     1             3.79137, -2.58534, -.65864, -.29885, -.13569 /               DATWF   11
      DATA COMRF / .051772, .4540407 /                                          DATWF   12
      DATA RRADC/1.111/, RCONC/1.753/, RFILM/0.68/                              DATWF   13
      DATA SFFLR/0.6/                                                           DATWF   14
C                                                                               DATWF   15
      END                                                                       DATWF   16
      SUBROUTINE WFDATA(MSP)                                                    CWF1   346
C                                                                               WFDATA   3
C              FILLS AA ARRAY WITH DATA WHICH ARE NEEDED                        WFDATA   4
C              FOR CALCULATING WEIGHTING FACTORS FOR A SPACE.                   WFDATA   5
C                                                                               WFDATA   6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      COMMON/WFFURN/RCONF,RRADF,CHWT(2),RZFUR(5,2),COMRF(2)                     /WFFURN/ 2
      COMMON/WFLITE/FRIL(5),FRILP(5)                                            /WFLITE/ 2
      COMMON  /WFZDAT/  NW,NWP,LENWF,RINF,FWA,PFA,FLAR,IL,IFUR,MZ,              /WFZDAT/ 2
     1                  IZ,IFRN,MWFX,NWALLM,MWFQW,MWFG,MWFA,IWFERR,             /WFZDAT/ 3
     2                  MWFX1,MWFDET,MWFB,MWFC,MWFGS,NWMAX,RRADC,               /WFZDAT/ 4
     3                  AFRAD,ABSW,FLRFUR,RCONC,RFILM,NOPQ,FREM,SFFLR,          /WFZDAT/ 5
     4                  UAIW,NWFC(2,3),NWFS,ISPNAM(8)                           CWF1   143
C                                                                               WFDATA  17
      LOGICAL INSP                                                              WFDATA  18
C                                                                               CWF1   347
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON  /EWVALX/ IEWLCP, IEWGEO, IEWCNP, IEWSDP, IEWSAP, IEWTLP,          /EWVALX/ 2
     1                  IEWSFP,IEWCRP,IEWVRP                                    /EWVALX/ 3
      COMMON  /SPVALX/ IHP, IAP, IVP, ISHPP, IWP, IDPTHP, ISCP, IPRCAP,         /SPVALX/ 2
     1                 IWFP, ILTP, IINFMP, INZHP, IPLP, IPSP, ILKWP,            /SPVALX/ 3
     2                 ITKWP, IEKWP, IPAP, ILWSFP, ITWSFP, IPOLSP,              GEO4     1
     3                 IEQWFP, KWH, KWA, KWV, KWSHP, KWW, KWDPTH,               /SPVALX/ 5
     4                 KWSC, KWLT, KWINFM, KWNZH, KWPL, KWPS,                   /SPVALX/ 6
     5                 KWLKW, KWTKW, KWEKW, KWPA, KWLWSF, KWTWSF,               /SPVALX/ 7
     6                 KWEWSF, IFURTP, IFURFP, IFURWP, IFLRWP, KWWF,            /SPVALX/ 8
     7                 KWFLRW,ILTSP,NINFKY,INFKYP(20),DEFINF(10,4),             LTSYS1   2
     8                 ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM,             DFTEXP 197
     9                 ISPLOCP,ISPDIS,NSPDIS                                    DFTEXP 198
C                                                                               WFDATA  19
C                                                                               CWF2    10
      COMMON /GTVALX/ IGTCP,ISHCP,ICONP,IVTP,IGPCALC,IVTSWP,ISC1P,              -44d5    1
     1                ISC2P,ISS1P,ISS2P,IFTC,ISTC,IFABS,                        /GTVALX/ 3
     2                KWGTC,KWSHC,KWVT,KWSHSW,KWVTSW,KWSC1,KWSC2,               SUBTY8   3
     3                KWSS1,KWSS2,KWFTC,KWSTC,KWFABS,                           WLIB1    2
     4                IUCENTR,IHCOUT,IHROUT,IHIN,ITRANG,IABSANG,ITVANG,         WLIB1    3
     5                INLAYER,IRBVIS,IRBHEMI,ISHDCOF,IGPTHCK,IW3TIR,            WLIB1    4
     6                IEMBIR,IEMFIR,IGPCOND,IGPDCON,IGPVIS,IGPDVIS,             WLIB1    5
     7                IGPDENS,IGPDDEN,IGPPR,IGPDPR,ICOND                        WLIB1    6
C              DEFINITION OF VARIABLES                                          WFDATA  20
C                                                                               WFDATA  21
C              NW = NUMBER OF SURFACES (EXCLUDING FURNITURE) IN ZONE            WFDATA  22
C              NWP=NUMBER OF SURFACES, INCLUDING FURNITURE                      WFDATA  23
C                  AS A PSEUDO SURFACE                                          WFDATA  24
C              RINF=THERMAL RESISTANCE FOR INFILTRATION INTO ZONE               WFDATA  25
C              (1/1.08*INFILTRATION CFM)                                        WFDATA  26
C              SURFACE DATA -- PLACED IN AA ARRAY AT MWFX+(I-1)*LENWF+J,        WFDATA  27
C              WHERE I IS THE SURFACE NUMBER AND J IS GIVEN BELOW               WFDATA  28
C              (MNEMONIC REFERS TO VARIABLE NAME USED                           WFDATA  29
C              IN ORIGINAL LASL CODE)                                           WFDATA  30
C                                                                               WFDATA  31
C              J  MNEMONIC  DEFINITION                                          WFDATA  32
C              -  --------  ----------                                          WFDATA  33
C              0  AW        AREA OF SURFACE                                     WFDATA  34
C              1  IMP       =0 FOR QUICK SURFACES, =-999 FOR FURNITURE,         CWF1   356
C                           =CONST NO. FOR DELAYED SURFACES, EXCEPT             CWF1   357
C                           =-(CONST NO.) FOR DELAYED I-W'S DEFINED             CWF1   358
C                              IN ADJACENT SPACE                                CWF1   359
C              2  RCON      INSIDE CONVECTIVE RESISTANCE                        WFDATA  37
C              3  RRAD      INSIDE RADIATIVE RESISTANCE                         WFDATA  38
C              4  RFO       OUTSIDE FILM RESISTANCE (COMBINED RADIATIVE         WFDATA  39
C                           AND CONVECTIVE)                                     WFDATA  40
C              5  Q         SOLAR RAD ABSORBED AT INSIDE OF SURFACE             WFDATA  41
C              6  RVAL      =0 FOR DELAYED SURFACE, = THERMAL RESISTANCE        WFDATA  42
C                           (SURFACE TO SURFACE) FOR QUICK SURFACES             WFDATA  43
C              7  IST       SURFACE TYPE (1=EXT-WALL, 2=INTERIOR-WALL,          WFDATA  44
C                           3=UNDERGND SURFACE, 4=EXT WIN, -4=INT WIN, 5=DOOR,  WFDATA  45
C                           6=EXTERIOR-WALL WHICH IS FLOOR,                     WFDATA  46
C                           7=INTERIOR-WALL WHICH IS FLOOR,                     WFDATA  47
C                           8=UNDERGROUND-SURFACE WHICH IS FLOOR,               WFDATA  48
C                           0=FURNITURE)                                        WFDATA  49
C               9  IWY      1 IF STANDARD INTERIOR WALL, 0 OTHERWISE            WFDATA  50
C                                                                               WFDATA  51
C              RFILM=STANDARD INSIDE AIR FILM RESISTANCE (COMBINED              WFDATA  52
C                    RADIATIVE AND CONVECTIVE)                                  WFDATA  53
C              RCONC=STANDARD CONVECTIVE AIR FILM RESISTANCE                    WFDATA  54
C              RRADC=STANDARD RADIATIVE AIR FILM RESISTANCE                     WFDATA  55
C              NOPQ=NUMBER OF OPAQUE SURFACES                                   WFDATA  56
C              IE2=NUMBER OF EXTERIOR WALLS                                     WFDATA  57
C              NWI=NUMBER OF WINDOWS                                            WFDATA  58
C              NDOORS=NUMBER OF DOORS                                           WFDATA  59
C              NINTW=NUMBER OF INTERIOR WALLS                                   WFDATA  60
C              NINTWN=NUMBER OF WINDOWS ON AN INTERIOR WALL                     WFDATA  61
C              IU2=NUMBER OF UNDERGROUND SURFACES                               WFDATA  62
C              QTOT=SUM OF INPUT SOLAR FRACTIONS                                WFDATA  63
C              QTOTAD=SUM OF ADJUSTED SOLAR FRACTIONS                           WFDATA  64
C              WCON=GLASS CONDUCTANCE                                           WFDATA  65
C              IWFC = 1 FOR WALL (TILT=10-170), 2 FOR FLOOR                     WFDATA  66
C                   (TILT=170-180), AND 3 FOR CEILING (TILT=0,10)               WFDATA  67
C              NWFC(1,IWFC) = NO. OF SURFACES OF TYPE IWFC                      WFDATA  68
C              NWFC(2,IWFC) = NO. OF DELAYED SURFACES OF TYPE IWFC              WFDATA  69
C                                                                               WFDATA  70
C              FURNITURE-RELATED QUANTITIES                                     WFDATA  71
C                                                                               WFDATA  72
C              IFUR=FURNITURE TYPE                                              WFDATA  73
C                 1=LIGHT CONSTRUCTION, 40 LB/CUFT                              WFDATA  74
C                 2=HEAVY CONSTRUCTION, 80 LB/CUFT                              WFDATA  75
C              RCONF=CONVECTIVE RESISTANCE FROM FURNITURE TO AIR                WFDATA  76
C              RRADF=RADIATIVE RESISTANCE FROM FURNITURE                        WFDATA  77
C              CHWT(K)=CHARACTERISTIC MASS PER UNIT FLOOR AREA FOR              WFDATA  78
C                      FURNITURE TYPE K, K=1,2                                  WFDATA  79
C              RZFUR(J,K)=Z RESPONSE FACTORS FOR FURN TYPE K, J=1,5             WFDATA  80
C              COMRF(K)=COMMON RATIO FOR Z RESPONSE FACTORS                     WFDATA  81
C                       FOR FURN TYPE K                                         WFDATA  82
C              FWA=FURNITURE WEIGHT PER UNIT FLOOR AREA, LB/SF                  WFDATA  83
C              PFA=FRACTION OF FLOOR AREA COVERED BY FURNITURE, 0-1.0           WFDATA  84
C              AFRAD=EFFECTIVE AREA OF FURNITURE FOR RADIATIVE EXCHANGE         WFDATA  85
C              FLAR=FLOOR AREA (AREA IN SPACE COMMAND)                          WFDATA  86
C              FLRFUR=SUM OF AREA OF FLOOR SECTIONS (FROM E-W,I-W, AND          WFDATA  87
C                     U-F COMMANDS)                                             WFDATA  88
C              ASFZ=AREA OF NON-WINDOW SURFACES WITH INPUT S-F=0                WFDATA  89
C              SFFLR=DEFAULT S-F FOR FLOOR WHEN ALL INPUT S-F=0                 WFDATA  90
C                                                                               WFDATA  91
C              RADIATION LOSS QUANTITIES                                        WFDATA  92
C                                                                               WFDATA  93
C              ATNW=TOTAL INSIDE SURF AREA EXCLUDING EXTERIOR WINDOWS           WFDATA  94
C              ATWIN=TOTAL AREA OF EXTERIOR WINDOWS                             WFDATA  95
C              RHOWT=AREA-WEIGHTED REFLECTIVITY OF EXTERIOR WINDOWS             WFDATA  96
C              FWT=AREA-WEIGHTED INWARD-FLOWING FRACTION OF ABSORBED            WFDATA  97
C                  SOLAR RADIATION                                              WFDATA  98
C              ABSW=AVERAGE SOLAR ABSORPTIVITY OF OPAQUE INSIDE SURFACES        WFDATA  99
C              FREM=FRACTION OF INCOMING SOLAR RADIATION WHICH IS NOT           WFDATA 100
C                   REFLECTED BACK OUT WINDOWS                                  WFDATA 101
C                                                                               WFDATA 102
C              LIGHTING-RELATED QUANTITIES                                      WFDATA 103
C                                                                               WFDATA 104
C              IL=LIGHTING TYPE, 1 TO 4 FOR GENERAL LIGHTING,                   WFDATA 105
C                 4 FOR TASK LIGHTING (ASSUMED INCANDESCENT)                    WFDATA 106
C              FRIL(IL)=FRACTION OF LIGHT ENERGY THAT IS RADIATIVE FOR          WFDATA 107
C                       LIGHTING TYPE IL                                        WFDATA 108
C              FRILP(IL)=FRACTION OF LIGHT ENERGY THAT IS RADIATIVE FOR         WFDATA 109
C                       LIGHTING TYPE IL ON BACK SIDE OF FIXTURE                WFDATA 110
C                                                                               WFDATA 111
C                                                                               WFDATA 112
C                                                                               WFDATA 113
C              GENERAL ZONE DATA                                                WFDATA 114
C                                                                               WFDATA 115
C              SPACE POINTERS                                                   CWF1   360
      CALL PTRS(JOPSP,MSP,IRXSP,IDPSP,IAVPSP)                                   CWF1   361
C              SPACE NAME                                                       CWF1   362
      NAMPTR = IREFTB(1,IRXSP)                                                  CWF1   363
      IF(NAMPTR.GT.0) CALL MOVEN(ISYMTB(1,NAMPTR),ISPNAM(1),8)                  CWF1   364
      IF(NAMPTR.EQ.0) CALL MOVEN(IBLANK(1),ISPNAM(1),8)                         CWF1   365
C              FURNITURE TYPE                                                   CWF1   366
      IFUR = ISYMTB(12,IA(IAVPSP+15))                                           CWF1   367
C              INITIALIZE SUM OF SOLAR FRACTIONS INPUT FOR THIS SPACE           WFDATA 117
      QTOT   = 0.                                                               WFDATA 118
C              INITIALIZE SUM OF ADJUSTED SOLAR FRACTIONS                       WFDATA 119
      QTOTAD = 0.                                                               WFDATA 120
C              INITIALIZE TOT INSIDE SURF AREA EXCLUDING EXT WINDOWS            WFDATA 121
      ATNW   = 0.0                                                              WFDATA 122
C              INITIALIZE TOTAL AREA OF EXTERIOR WINDOWS                        WFDATA 123
      ATWIN  = 0.                                                               WFDATA 124
C              INITIALIZE AREA-WEIGHTED EXT WINDOW REFLECTIVITY                 WFDATA 125
      RHOWT  = 0.                                                               WFDATA 126
C              INITIALIZE AVERAGE SOL ABSORPTANCE OF OPAQUE INS SURF            WFDATA 127
      ABSW = 0.                                                                 WFDATA 128
C              INITIALIZE AREA-WEIGHTED INWARD-FLOWING ABSORPTIVITY             WFDATA 129
C              FACTOR                                                           WFDATA 130
      FWT    = 0.                                                               WFDATA 131
      FLAR = AA(IAVPSP+6)                                                       CWF1   368
      IF(METIN.EQ.1) CALL KDIV(FLAR,9,1,METIN)                                  CWF1   369
C              INFILTRATION RESISTANCE (1/(1.08*INFILTRATION CFM))              WFDATA 133
C              INFILTRATION CFM FOR AIR CHANGE RATE OF ONE PER HOUR             WFDATA 134
      SPVOL = AA(IAVPSP+7)                                                      CWF1   370
      IF(METIN.EQ.1) CALL KDIV(SPVOL,10,1,METIN)                                CWF1   371
      CFM = SPVOL/60.                                                           CWF1   372
      RINF   = 1./(1.08*CFM)                                                    WFDATA 136
C                                                                               WFDATA 137
C              SURFACE DATA                                                     WFDATA 138
C                                                                               WFDATA 139
C              SURFACE COUNTER                                                  WFDATA 140
      IS     = 0                                                                WFDATA 141
C              INITIALIZE TOTAL NUMBER OF WINDOWS IN SPACE                      WFDATA 142
      NWINT  = 0                                                                WFDATA 143
C              INITIALIZE WALL, FLOOR, CEILING COUNTER                          WFDATA 144
      DO 5 I=1,3                                                                WFDATA 145
      DO 6 J=1,2                                                                WFDATA 146
      NWFC(J,I) = 0                                                             WFDATA 147
    6 CONTINUE                                                                  WFDATA 148
    5 CONTINUE                                                                  WFDATA 149
C              INITIALIZE RADIATION EXCHANGE MATRIX (USED LATER AS              WFDATA 150
C              MULTIPLIER IN WFMATG)                                            WFDATA 151
      DO 10 I=1,NWP                                                             WFDATA 152
      DO 20 J=1,NWP                                                             WFDATA 153
      IJ     = I + (J-1)*NWP + MWFG - 1                                         WFDATA 154
      AA(IJ) = 1.0                                                              WFDATA 155
   20 CONTINUE                                                                  WFDATA 156
   10 CONTINUE                                                                  WFDATA 157
C                                                                               WFDATA 158
C              --------------                                                   WFDATA 166
C              EXTERIOR WALLS                                                   WFDATA 167
C              --------------                                                   WFDATA 168
C                                                                               WFDATA 169
      DO 1000 IEW = 1,NEW                                                       CWF1   373
      CALL PTRS(JOPEW,IEW,IRXEW,IDPEW,IAVPEW)                                   CWF1   374
      IF(IREFTB(4,IRXEW).NE.IRXSP) GO TO 1000                                   CWF1   375
      IS     = IS+1                                                             WFDATA 174
C              SAVE SURFACE NUMBER FOR THIS WALL FOR USE BELOW                  WFDATA 175
      ISEW   = IS                                                               WFDATA 176
C              INITIALIZE TOTAL WINDOW AND DOOR AREA IN THIS WALL               CWF1   376
      AWTW   = 0.                                                               CWF1   377
      ADTW   = 0.                                                               CWF1   378
      ISP    = MWFX+(IS-1)*LENWF                                                WFDATA 180
      IA(ISP+9) = 0                                                             WFDATA 181
      ISPEW = ISP                                                               CWF1   379
C              GROSS AREA                                                       CWF1   380
      IPOLYF = 21                                                               CWF1   381
      IF( NOVAL(AA(IAVPEW+IPOLYF)).EQ.0 )  THEN                                 FIX8    92
C              RECTANGLE                                                        CWF1   384
         AEW = AA(IAVPEW+16)*AA(IAVPEW+17)                                      CWF1   385
      ELSE                                                                      CWF1   386
C              POLYGON                                                          CWF1   387
         IPOLYN = ISYMTB(12,IA(IAVPEW+IPOLYF))                                  CWF1   388
         CALL PTRS(40,IPOLYN,IRXPOL,IDATX,IAVPOLY)                              CWF1   389
         CALL POLYICK(IA(IDATX+1),AA(IAVPOLY+1),AEW,PERIM,0,IERRFL)             LTSYS   22
      ENDIF                                                                     CWF1   391
C              GROSS AREA (INCLUDING WINDOWS AND DOORS)                         CWF1   392
C              AFTER WALL MULTIPLIER                                            CWF1   393
      IF(METIN.EQ.1) CALL KDIV(AEW,9,1,METIN)                                   CWF1   394
      AEWGR = AEW*AA(IAVPEW+11)                                                 CWF1   395
C              SOLAR FRACTION                                                   CWF1   396
      SFEW = AMAX1(0.0,AA(IAVPEW+9))                                            CWF1   397
C              WALL CONSTRUCTION NO.                                            CWF1   398
      ICNS = ISYMTB(12,IA(IAVPEW+1))                                            CWF1   399
      CALL PTRS(JOPCNS,ICNS,IRXCNS,IDPCNS,IAVPCNS)                              CWF1   400
C              CHECK IF QUICK WALL (No. RESPONSE FACTORS >0)                    DFTEX4 542
      IF(IA(IDPCNS+2).LE.0) GO TO 1010                                          DFTEX4 543
C              THE SURFACE IS DELAYED; SET CONST NO. FOR USE                    CWF1   403
C              IN FUNCTION WFRZ                                                 CWF1   404
      IA(ISP+1) = ICNS                                                          CWF1   405
C              INSIDE FILM RESISTANCE:                                          CWF1   406
C              PTR TO RESPONSE FACTORS WITH IFR (SEE CONSTI)                    CWF1   407
      IRFW = IA(IDPCNS+1)                                                       CWF1   408
C              PTR TO RESPONSE FACTORS WITHOUT IFR                              CWF1   409
      IRF = IRFW + 3*IA(IRFW+2) + 7                                             CWF1   410
C              IFR IS WORD BEFORE RF'S WITHOUT IFR                              CWF1   411
      RIFR = AA(IRF)                                                            CWF1   412
      IF(METIN.EQ.1) CALL KDIV(RIFR,32,1,METIN)                                 CWF1   413
C              IF OUTSIDE ACCEPTABLE RANGE SET TO RFILM                         CWF1   414
      IF(RIFR.LE.0.0.OR.RIFR.GT.1.0) RIFR = RFILM                               CWF1   415
C              CONVECTIVE FILM RESISTANCE                                       WFDATA 210
      AA(ISP+2) = 1.0 / (1.0/RIFR - 1.0/RRADC)                                  WFDATA 211
C              RADIATIVE FILM RESISTANCE                                        WFDATA 212
      AA(ISP+3) = RRADC                                                         WFDATA 213
      GO TO 1020                                                                WFDATA 214
 1010 CONTINUE                                                                  WFDATA 215
C              THE SURFACE IS QUICK                                             WFDATA 216
C              GET SURFACE TO SURFACE RESISTANCE                                WFDATA 217
      R = 1.0/AA(IAVPCNS+5)                                                     SUBTY8  40
      IF(METIN.EQ.1) CALL KDIV(R,32,1,METIN)                                    CWF1   417
      AA(ISP+6) = AMAX1(0.05,R-RFILM)                                           WFDATA 219
C              CONVECTIVE AND RADIATIVE FILM RESISTANCES                        WFDATA 220
      AA(ISP+2) = RCONC                                                         WFDATA 221
      AA(ISP+3) = RRADC                                                         WFDATA 222
      IA(ISP+1)=0                                                               WFDATA 223
C              OUTSIDE FILM RESISTANCE (FOR AVERAGE 5 MPH WIND SPEED)           WFDATA 224
      AA(ISP+4)=0.33                                                            WFDATA 225
 1020 CONTINUE                                                                  WFDATA 226
C              TYPE OF SURFACE                                                  WFDATA 227
      IA(ISP+7)=1                                                               WFDATA 228
C              CHECK IF A FLOOR SECTION                                         WFDATA 229
C              IWFC = 1(WALL), 2(FLOOR), 3(CEILING)                             CWF1   418
C              FLAG IN NSAVE AREA IS 0(WALL), 1(FLOOR), 2(CEILING)              CWF1   419
C              3(TROMBE WALL NV), 4(TROMBE WALL V)                              CWF1   420
      IWFC = IA(IDPEW+3) + 1                                                    CWF1   421
C              SET WFC FLAG FOR TROMBE WALL TO "WALL"                           CWF1   422
      IF(IA(IDPEW+3).EQ.3.OR.IA(IDPEW+3).EQ.4) IWFC = 1                         CWF1   423
      IF(IWFC.EQ.2) IA(ISP+7) = 6                                               WFDATA 233
C              INCREMENT SURFACE-TYPE COUNTER                                   WFDATA 234
      NWFC(1,IWFC) = NWFC(1,IWFC) + 1                                           WFDATA 235
      IF(IA(IDPCNS+2).GT.0) NWFC(2,IWFC) = NWFC(2,IWFC) + 1                     DFTEX4 544
C                                                                               WFDATA 237
C              ----------------------------------                               WFDATA 238
C              ATTACHMENTS (WINDOWS AND/OR DOORS)                               WFDATA 239
C              ----------------------------------                               WFDATA 240
C                                                                               WFDATA 241
C              WINDOWS                                                          WFDATA 242
C                                                                               WFDATA 243
C              SKIP TROMBE WALLS                                                CWF1   425
      IF(IA(IDPEW+3).GT.2) GO TO 1900                                           CWF1   426
C              INITIALIZE NO. OF WINDOWS ON THIS WALL                           CWF1   427
      NWI = 0                                                                   CWF1   428
      DO 1800 IWIN = 1,NWIN                                                     CWF1   429
      CALL PTRS(JOPWIN,IWIN,IRXWIN,IDPWIN,IAVPWI)                               CWF1   430
      IF(IREFTB(4,IRXWIN).NE.IRXEW) GO TO 1800                                  CWF1   431
      IS = IS + 1                                                               CWF1   432
      NWI = NWI + 1                                                             CWF1   433
C              INCREMENT TOTAL NUMBER OF WINDOWS IN THIS SPACE                  CWF1   434
      NWINT = NWINT + 1                                                         CWF1   435
C              ZERO OUT RADIATION EXCHANGE MATRIX TERM FOR THIS                 WFDATA 252
C              WINDOW-WALL COMBINATION SINCE COPLANAR                           WFDATA 253
      IJ     = IS + (ISEW-1)*NWP + MWFG - 1                                     WFDATA 254
      JI     = ISEW + (IS-1)*NWP + MWFG - 1                                     WFDATA 255
      AA(IJ) = 0.0                                                              WFDATA 256
      AA(JI) = 0.0                                                              WFDATA 257
      ISP    = MWFX+(IS-1)*LENWF                                                WFDATA 258
      IA(ISP+9) = 0                                                             WFDATA 259
C              AREA = WINMUL*WALLMUL*WINAREA                                    CWF1   436
      AA(ISP) = AMAX1(0.01,AA(IAVPWI+10)*AA(IAVPEW+11)*                         CWF1   437
     1                     AA(IAVPWI+14)*AA(IAVPWI+15))                         CWF1   438
      IF(METIN.EQ.1) CALL KDIV(AA(ISP),9,1,METIN)                               CWF1   439
      IA(ISP+7)=4                                                               WFDATA 261
      AA(ISP+5)=0.                                                              WFDATA 262
      AA(ISP+4)=0.33                                                            WFDATA 263
C              GLASS TYPE (ALLOW ONLY WINDOW-4 LIBRARY OR                       CWF1   440
C              SHADING COEF; DROP G-T-C <= 11)                                  CWF1   441
      NGTY = ISYMTB(12,IA(IAVPWI+1))                                            CWF1   442
      CALL PTRS(JOPGT,NGTY,IRXGT,IDPGT,IAVPGT)                                  CWF1   443
      IF (NOVAL(IA(IAVPGT+ISHCP)).EQ.0) THEN                                    SUBTY8  42
C              GLASS IS FROM WINDOW-4 LIBRARY -- GET BARE R-VALUE               CWF2    13
         NGTC = ISYMTB(12,IA(IAVPGT+2))                                         CWF2    14
         CALL PTRS(JOPGTC,NGTC,IRXGTC,IDPGTC,IAVPGTC)                           CWF2    15
         ucentr = aa(iavpgtc+iucentr)                                           CWF2    16
         hcout  = aa(iavpgtc+ihcout)                                            CWF2    17
         hrout  = aa(iavpgtc+ihrout)                                            CWF2    18
         hin    = aa(iavpgtc+ihin)                                              CWF2    19
         ucbare = 1./(1./ucentr - 1./(hcout+hrout) - 1./hin)                    CWF2    20
         ucbare = amax1(0.001,ucbare)                                           CWF2    21
         AA(ISP+6) = AMAX1(0.05,5.67826/ucbare)                                 -044c7   4
      ELSE                                                                      CWF2    23
C              GLASS HAS SHADING COEF SPECIFIED                                 CWF2    24
         WCON = AA(IAVPGT+4)                                                    CWF2    25
         IF(METIN.EQ.1) CALL KDIV(WCON,6,1,METIN)                               CWF2    26
         R = 1./(WCON+1.E-9)                                                    CWF2    27
         AA(ISP+6) = AMAX1(0.05,R-RFILM)                                        CWF2    28
      ENDIF                                                                     CWF1   471
      AA(ISP+2) = RCONC                                                         WFDATA 296
      AA(ISP+3) = RRADC                                                         WFDATA 297
      IA(ISP+1) = 0                                                             WFDATA 298
C              CALCULATE SOLAR RADIATION LOSS QUANTITIES                        WFDATA 299
C              INCREMENT SUM OF EXTERIOR WINDOW AREA                            WFDATA 300
      ATWIN  = ATWIN + AA(ISP)                                                  WFDATA 301
      AWTW   = AWTW + AA(ISP)                                                   WFDATA 302
      IF (NOVAL(IA(IAVPGT+ISHCP)).EQ.0) THEN                                    SUBTY8  43
C              GLASS IS FROM WINDOW-4 LIBRARY                                   CWF1   473
C              INCREMENT AREA*BACK-REFLECTANCE, USED IN CALCULATION OF          CWF1   474
C              SOLAR REFLECTED BACK OUT WINDOWS.                                CWF1   475
         NGTC = ISYMTB(12,IA(IAVPGT+2))                                         CWF2    30
         CALL PTRS(JOPGTC,NGTC,IRXGTC,IDPGTC,IAVPGTC)                           CWF2    31
         RHOWT = RHOWT + AA(ISP)*AA(IAVPGTC+131)                                CWF2    32
         NLAY = INT(AA(IAVPGTC+INLAYER))                                        CWF2    33
         IF(NLAY.EQ.0) GO TO 1800                                               CWF2    34
         RO = AA(ISP+4)                                                         CWF1   478
C              RESISTANCE EXCLUDING BOTH AIR FILMS                              CWF1   479
         RBARE = AA(ISP+6)                                                      CWF1   480
C              RESISTANCE INCLUDING BOTH AIR FILMS                              CWF1   481
         RTOT = RO + RBARE + 0.68                                               CWF1   482
C              GAP RESISTANCE                                                   CWF1   483
         RG = 0.                                                                CWF1   484
         IF(NLAY.GT.1) RG = RBARE/(NLAY-1)                                      CWF1   485
C              BACK FLOW FRACTION:                                              CWF1   486
C              FRACTION OF SOLAR RADIATION INCIDENT ON WINDOW FROM              CWF1   487
C              INSIDE THAT IS ABSORBED IN GLASS AND CONDUCTED BACK              CWF1   488
         F = 0.0                                                                CWF1   489
         DO ILAY = 1,NLAY                                                       CWF1   490
            FIL = (RO + (ILAY-1)*RG)/RTOT                                       CWF1   491
            ADIFIL = AA(IAVPGTC+86+11*(ILAY-1))                                 FIXJH3   3
            F = F + FIL*ADIFIL                                                  CWF1   493
         ENDDO                                                                  CWF1   494
      ELSE                                                                      CWF1   495
C              GLASS HAS SHADING COEF SPECIFIED.                                CWF1   496
C              INCREMENT AREA*BACK-REFLECTANCE (WHERE BACK REFLECTANCE          CWF1   497
C              IS APPROXIMATED AS 0.5-0.35*SC, BASED ON CORRELATION             CWF1   498
C              FROM WINDOW LIBRARY WHICH IS OK FOR NON-TINTED GLAZING           CWF1   499
C              BUT IS ABOUT 2X TOO HIGH FOR TINTED GLAZING).                    CWF1   500
         RHOWT = RHOWT + AA(ISP)*(0.5-0.35*AA(IAVPGT+3))                        CWF1   501
C              BACK FLOW FRACTION, FROM WINDOW LIBRARY CORRELATION              CWF1   502
         WCON = AA(IAVPGT+4)                                                    CWF2    35
         IF(METIN.EQ.1) CALL KDIV(WCON,6,1,METIN)                               CWF2    36
         IF(WCON.GT.0.7) THEN                                                   CWF2    37
C              SINGLE PANE                                                      CWF2    38
            F = 0.33*(0.70-0.55*AA(IAVPGT+3))                                   CWF2    39
         ELSE                                                                   CWF2    40
C              MULTIPANE                                                        CWF2    41
            F = 0.075                                                           CWF2    42
         ENDIF                                                                  CWF2    43
      ENDIF                                                                     CWF1   506
      FWT    = FWT + F*AA(ISP)                                                  WFDATA 348
 1800 CONTINUE                                                                  WFDATA 350
C              ZERO OUT RADIATION EXCHANGE MATRIX TERMS FOR                     WFDATA 351
C              WINDOW/WINDOW COMBINATIONS IN THIS WALL                          WFDATA 352
      IF(NWI.LE.1) GO TO 1900                                                   WFDATA 353
      DO 1805 I=1,NWI                                                           WFDATA 354
      DO 1806 J=1,NWI                                                           WFDATA 355
      IF(J.EQ.I) GO TO 1806                                                     WFDATA 356
      IJ     = ISEW + I + (ISEW+J-1)*NWP + MWFG -1                              WFDATA 357
      AA(IJ) = 0.                                                               WFDATA 358
 1806 CONTINUE                                                                  WFDATA 359
 1805 CONTINUE                                                                  WFDATA 360
 1900 CONTINUE                                                                  WFDATA 361
C                                                                               WFDATA 368
C              DOORS                                                            WFDATA 369
C                                                                               WFDATA 370
C              INITIALIZE NO. OF DOORS ON THIS WALL                             CWF1   507
      NDOORS = 0                                                                CWF1   508
      DO 1920 IDR = 1,NDOOR                                                     CWF1   509
      CALL PTRS(JOPDR,IDR,IRXDR,IDPDR,IAVPDR)                                   CWF1   510
      IF(IREFTB(4,IRXDR).NE.IRXEW) GO TO 1920                                   CWF1   511
      NDOORS = NDOORS + 1                                                       CWF1   512
      IS     = IS+1                                                             WFDATA 375
C              ZERO OUT RADIATION EXCHANGE MATRIX TERM FOR THIS                 WFDATA 376
C              DOOR-WALL COMBINATION SINCE COPLANAR                             WFDATA 377
      IJ     = IS + (ISEW-1)*NWP + MWFG -1                                      WFDATA 378
      JI     = ISEW + (IS-1)*NWP + MWFG -1                                      WFDATA 379
      AA(IJ) = 0.                                                               WFDATA 380
      AA(JI) = 0.                                                               WFDATA 381
C              ZERO RADIATION EXCHANGE MATRIX TERMS FOR DOOR/WINDOW             WFDATA 382
C              COMBINATIONS FOR THIS WALL                                       WFDATA 383
      IF(NWI.EQ.0) GO TO 1910                                                   WFDATA 384
      DO 1915 I=1,NWI                                                           WFDATA 385
      IJ     = IS + (ISEW+I-1)*NWP + MWFG - 1                                   WFDATA 386
      JI     = ISEW + I + (IS-1)*NWP + MWFG -1                                  WFDATA 387
      AA(IJ) = 0.                                                               WFDATA 388
      AA(JI) = 0.                                                               WFDATA 389
 1915 CONTINUE                                                                  WFDATA 390
 1910 CONTINUE                                                                  WFDATA 391
      ISP    = MWFX+(IS-1)*LENWF                                                WFDATA 392
      IA(ISP+9) = 0                                                             WFDATA 393
      IA(ISP+7)=5                                                               WFDATA 394
C              AREA = DOOR-AREA*DOOR-MULTIPLIER*WALL-MULTIPLIER                 CWF1   513
      AA(ISP) = AMAX1(0.01,                                                     CWF1   514
     1          AA(IAVPDR+12)*AA(IAVPDR+13)*AA(IAVPDR+8)*AA(IAVPEW+11))         CWF1   515
      IF(METIN.EQ.1) CALL KDIV(AA(ISP),9,1,METIN)                               CWF1   516
C              TOTAL DOOR AREA ON THIS WALL                                     CWF1   517
      ADTW = ADTW + AA(ISP)                                                     CWF1   518
      ATNW   = ATNW+AA(ISP)                                                     WFDATA 397
      ABSW = ABSW + AA(ISP)*AA(IAVPEW+8)                                        CWF1   519
C              CALCULATE SOLAR FRACTION AS SOLAR FRACTION ON WALL               WFDATA 399
C              (INCLUDING DOORS)                                                WFDATA 400
C              TIMES FRACTION OF WALL AREA (LESS WINDOWS) WHICH IS DOOR         WFDATA 401
      AA(ISP+5) = SFEW*AA(ISP)/AMAX1(0.01,AEWGR-AWTW)                           CWF1   520
      QTOTAD = QTOTAD + AA(ISP+5)                                               WFDATA 403
      AA(ISP+4)=0.33                                                            WFDATA 404
      AA(ISP+2)=RCONC                                                           WFDATA 405
      AA(ISP+3)=RRADC                                                           WFDATA 406
C              DOOR CONSTRUCTION NO.                                            CWF1   521
      ICNS = ISYMTB(12,IA(IAVPDR+1))                                            CWF1   522
      CALL PTRS(JOPCNS,ICNS,IRXCNS,IDPCNS,IAVPCNS)                              CWF1   523
c              DOOR R-VALUE                                                     CWF1   524
      R = 1./(AA(IAVPCNS+5)+0.00001)                                            SUBTY8  44
      IF(METIN.EQ.1) CALL KDIV(R,32,1,METIN)                                    CWF1   526
      AA(ISP+6) = AMAX1(0.05,R-RFILM)                                           WFDATA 411
      IA(ISP+1)=0                                                               WFDATA 412
 1920 CONTINUE                                                                  WFDATA 414
C              ZERO OUT RADIATION EXCH@ANGE MATRIX TERMS FOR DOOR/DOOR          WFDATA 415
C              COMBINATIONS IN THIS WALL                                        WFDATA 416
      IF(NDOORS.EQ.1) GO TO 1950                                                WFDATA 417
      DO 1911 I=1,NDOORS                                                        WFDATA 418
      DO 1912 J=1,NDOORS                                                        WFDATA 419
      IF(J.EQ.I) GO TO 1912                                                     WFDATA 420
      IJ     = ISEW + NWI + I + (ISEW+NWI+J-1)*NWP + MWFG -1                    WFDATA 421
      AA(IJ) = 0.                                                               WFDATA 422
 1912 CONTINUE                                                                  WFDATA 423
 1911 CONTINUE                                                                  WFDATA 424
 1950 CONTINUE                                                                  WFDATA 425
C              NET AREA OF EXTERIOR WALL (INCLUDING WALL MULTIPLIER)            CWF1   527
      AEWNET = AMAX1(0.01,AEWGR - AWTW - ADTW)                                  CWF1   528
      AA(ISPEW) = AEWNET                                                        CWF1   529
C              GROSS AREA - WINDOW AREA                                         CWF1   530
      AEWNW = AMAX1(0.01,AEWGR - AWTW)                                          CWF1   531
C              EFFECTIVE SOLAR FRACTION FOR WALL =                              CWF1   532
C              INPUT-SOLAR-FRACTION*(NET-AREA))/[(GROSS-AREA - WINDOW-AREA)     CWF1   533
      AA(ISPEW+5) = SFEW*AEWNET/AEWNW                                           CWF1   534
      QTOTAD = QTOTAD + AA(ISPEW+5)                                             FIX14  241
      QTOT = QTOT + SFEW                                                        CWF1   535
C              AREA-WEIGHTED INSIDE SOLAR ABSORPTANCE                           CWF1   536
      ABSW = ABSW + AA(ISPEW)*AA(IAVPEW+8)                                      CWF1   537
C              INCREMENT NON-WINDOW SURFACE AREA                                CWF1   538
      ATNW = ATNW + AA(ISPEW)                                                   CWF1   539
C                                                                               CWF1   540
 1000 CONTINUE                                                                  WFDATA 427
 2000 CONTINUE                                                                  WFDATA 428
C                                                                               WFDATA 429
C              --------------                                                   WFDATA 430
C              INTERIOR WALLS                                                   WFDATA 431
C              --------------                                                   WFDATA 432
C                                                                               WFDATA 433
      DO 2500 IIW = 1,NIW                                                       CWF1   541
      CALL PTRS(JOPIW,IIW,IRXIW,IDPIW,IAVPIW)                                   CWF1   542
C              INT WALL TYPE: 1=STANDARD, 2=AIR, 3=ADIABATIC, 4=INTERNAL        CWF1   543
      IWTYP = ISYMTB(12,IA(IAVPIW+12))                                          CWF1   544
C              SKIP ADIABATIC AND INTERNAL WALLS NOT                            CWF1   545
C              DEFINED IN THIS SPACE                                            CWF1   546
      IF(IWTYP.GE.3.AND.IREFTB(4,IRXIW).NE.IRXSP) GO TO 2500                    CWF1   547
C              SKIP STANDARD AND AIR WALLS NOT DEFINED IN THIS                  CWF1   548
C              SPACE OR NEXT-TO SPACE                                           CWF1   549
      IF(IWTYP.LE.2) THEN                                                       CWF1   550
         ISPNT = ISYMTB(12,IA(IAVPIW+1))                                        CWF1   551
         IF(IREFTB(4,IRXIW).NE.IRXSP.AND.ISPNT.NE.MSP) GO TO 2500               CWF1   552
      ENDIF                                                                     CWF1   553
      IS     = IS+1                                                             WFDATA 439
      ISP    = MWFX+(IS-1)*LENWF                                                WFDATA 440
C              IS THIS WALL IN CURRENT SPACE OR NEXT TO IT                      WFDATA 442
      INSP   = .TRUE.                                                           WFDATA 443
      IF(IREFTB(4,IRXIW).NE.IRXSP) INSP = .FALSE.                               CWF1   554
      JIN    = 1                                                                WFDATA 445
      IF(INSP) JIN=0                                                            WFDATA 446
C              WALL CONSTRUCTION NO.                                            CWF1   555
      ICNS = ISYMTB(12,IA(IAVPIW+3))                                            CWF1   556
      CALL PTRS(JOPCNS,ICNS,IRXCNS,IDPCNS,IAVPCNS)                              CWF1   557
C              CHECK IF QUICK WALL (No. RESPONSE FACTORS >0)                    DFTEX4 545
      IF(IA(IDPCNS+2).LE.0) GO TO 2510                                          DFTEX4 546
C              THE SURFACE IS DELAYED; SET CONST NO.                            CWF1   560
      IA(ISP+1) = ICNS                                                          CWF1   561
C              INSIDE FILM RESISTANCE:                                          CWF1   562
C              PTR TO RESPONSE FACTORS WITH IFR (SEE CONSTI)                    CWF1   563
      IRFW = IA(IDPCNS+1)                                                       CWF1   564
C              PTR TO RESPONSE FACTORS WITHOUT IFR                              CWF1   565
      IRF = IRFW + 3*IA(IRFW+2) + 7                                             CWF1   566
C              IFR IS WORD BEFORE RF'S WITHOUT IFR                              CWF1   567
      RIFR = AA(IRF)                                                            CWF1   568
      IF(METIN.EQ.1) CALL KDIV(RIFR,32,1,METIN)                                 CWF1   569
C              IF OUTSIDE ACCEPTABLE RANGE, SET TO RFILM                        CWF1   570
      IF(RIFR.LE.0.0.OR.RIFR.GT.1.0) RIFR = RFILM                               CWF1   571
C              COMBINED FILM RESISTANCE ON OTHER SIDE OF WALL                   WFDATA 460
C              AND CONVECTIVE RESISTANCE ON THIS SIDE                           WFDATA 461
      AA(ISP+4) = RFILM                                                         WFDATA 462
      AA(ISP+2) = 1.0/(1.0/RIFR - 1.0/RRADC)                                    WFDATA 463
      IF(.NOT.INSP) AA(ISP+4) = RIFR                                            WFDATA 464
      IF(.NOT.INSP) AA(ISP+2) = RCONC                                           WFDATA 465
C              SWITCH SIGN FOR INTERIOR WALLS DEFINED IN ADJACENT SPACE         WFDATA 467
C              SO X INSTEAD OF Z RESPONSE FACTORS WILL BE PICKED UP BY          WFDATA 468
C              FUNCTION WFRZ                                                    WFDATA 469
      IF(.NOT.INSP) IA(ISP+1) = -IA(ISP+1)                                      CWF1   572
      GO TO 2020                                                                WFDATA 471
 2510 CONTINUE                                                                  WFDATA 472
C              QUICK INTERIOR WALL                                              WFDATA 473
      R = 1./(AA(IAVPCNS+5)+0.00001)                                            SUBTY8  46
      IF(METIN.EQ.1) CALL KDIV(R,32,1,METIN)                                    CWF1   574
C              DO NOT KEEP AIR WALLS OR QUICK ADIABATIC WALLS                   WFDATA 475
      IF(IWTYP.EQ.1.OR.IWTYP.EQ.4) GO TO 2010                                   CWF1   575
      IS = IS - 1                                                               WFDATA 477
      GO TO 2499                                                                WFDATA 478
 2010 CONTINUE                                                                  WFDATA 479
C              SURFACE-TO-SURFACE RESISTANCE                                    WFDATA 480
      AA(ISP+6) = R - 2.*RFILM                                                  CWF1   576
      AA(ISP+2) = RCONC                                                         WFDATA 482
      IA(ISP+1)=0                                                               WFDATA 483
C              FILM RESISTANCE ON OTHER SIDE OF INTERIOR SURFACE                WFDATA 484
      AA(ISP+4)=RFILM                                                           WFDATA 485
 2020 CONTINUE                                                                  WFDATA 486
C              TYPE OF SURFACE                                                  WFDATA 487
      IA(ISP+7)=2                                                               WFDATA 488
C              CHECK IF THIS IS A FLOOR SECTION                                 WFDATA 489
      IFLG = IA(IDPIW+3)                                                        CWF1   577
      IWFC = IFLG + 1                                                           WFDATA 491
      IF(IFLG.EQ.1.AND.INSP) IWFC = 2                                           WFDATA 492
      IF(IFLG.EQ.1.AND.(.NOT.INSP)) IWFC = 3                                    WFDATA 493
      IF(IFLG.EQ.2.AND.INSP) IWFC = 3                                           WFDATA 494
      IF(IFLG.EQ.2.AND.(.NOT.INSP)) IWFC = 2                                    WFDATA 495
      IF(IWFC.EQ.2) IA(ISP+7) = 7                                               WFDATA 496
C              INCREMENT SURFACE-TYPE COUNTER                                   WFDATA 497
      NWFC(1,IWFC) = NWFC(1,IWFC) + 1                                           WFDATA 498
      IF(IA(IDPCNS+2).GT.0) NWFC(2,IWFC) = NWFC(2,IWFC) + 1                     DFTEX4 547
C              GROSS AREA                                                       CWF1   578
      IPOLYF = 22                                                               CWF1   579
c              if area not specified look for POLYGON or use H*W                HVAC11  33
      IF(NOVAL(AA(IAVPIW+2)).EQ.0)  THEN                                        HVAC11  34
      IF( NOVAL(AA(IAVPIW+IPOLYF)).EQ.0 )  THEN                                 FIX8    93
C              RECTANGLE                                                        CWF1   582
         AINTWL = AA(IAVPIW+17)*AA(IAVPIW+18)                                   CWF1   583
      ELSE                                                                      CWF1   584
C              POLYGON                                                          CWF1   585
         IPOLYN = ISYMTB(12,IA(IAVPIW+IPOLYF))                                  CWF1   586
         CALL PTRS(40,IPOLYN,IRXPOL,IDATX,IAVPOLY)                              CWF1   587
         CALL POLYICK(IA(IDATX+1),AA(IAVPOLY+1),AINTWL,PERIM,0,IERRFL)          LTSYS   25
      ENDIF                                                                     CWF1   589
      ELSE                                                                      HVAC11  35
c              if area is specified use it                                      HVAC11  36
         AINTWL = AMAX1(0.01,AA(IAVPIW+2))                                      HVAC11  37
      ENDIF                                                                     HVAC11  38
C              For INTERNAL-type interior wall, use area of both sides          CWF5     1
C              since both sides have heat transfer with space                   CWF5     2
      IF(IWTYP.EQ.4) AINTWL = 2.*AINTWL                                         CWF5     3
      IF(METIN.EQ.1) CALL KDIV(AINTWL,9,1,METIN)                                CWF1   590
      AA(ISP+3)=RRADC                                                           WFDATA 515
C              SOLAR FRACTION                                                   CWF1   591
      AA(ISP+5) = AMAX1(0.,AA(IAVPIW+11))                                       CWF1   592
      IF(INSP) AA(ISP+5) = AMAX1(0.,AA(IAVPIW+10))                              CWF1   593
      QTOT   = QTOT+AA(ISP+5)                                                   WFDATA 517
      QTOTAD = QTOTAD + AA(ISP+5)                                               WFDATA 518
C              SET FLAG USED IN WFRZ                                            WFDATA 529
      IA(ISP+9) = 1                                                             WFDATA 530
      ISIW = IS                                                                 WFDATA 531
      ISPIW = ISP                                                               CWF1   594
C                                                                               WFDATA 532
C              INTERIOR WINDOWS                                                 WFDATA 533
C                                                                               WFDATA 534
C              CONSIDER ONLY INTERIOR WINDOWS IN A STANDARD                     CWF1   595
C              I-W BETWEEN A SUNSPACE AND NON-SUNSPACE                          CWF1   596
C                                                                               CWF1   597
      IF(IWTYP.GE.2) GO TO 2498                                                 CWF1   598
C              SUNSPACE FLAG OF WALL'S PARENT SPACE                             CWF1   599
      IRXSPAR = IREFTB(4,IRXIW)                                                 CWF1   600
      IAVSPAR = IREFTB(2,IRXSPAR)+IOPCDT(17,JOPSP)+2*IOPCDT(16,JOPSP)           CWF1   601
      ISSPAR = ISYMTB(12,IA(IAVSPAR+153))                                       LTSYS1 286
C              SUNSPACE FLAG OF WALL'S NEXT-TO SPACE                            CWF1   603
      ISPNT = ISYMTB(12,IA(IAVPIW+1))                                           CWF1   604
      CALL PTRS(JOPSP,ISPNT,IRXSPNT,IDPSNT,IAVPSNT)                             CWF1   605
      ISSNT = ISYMTB(12,IA(IAVPSNT+153))                                        LTSYS1 287
C                                                                               CWF1   607
      IF(ISSPAR.NE.1.AND.ISSNT.NE.1) GO TO 2498                                 CWF1   608
C                                                                               CWF1   609
      AINTWIN = 0.                                                              CWF1   610
      DO 2100 IWIN = 1,NWIN                                                     CWF1   611
      IRXWIN = IOPCDT(14,JOPWIN) + IWIN - 1                                     CWF1   612
      IF(IREFTB(4,IRXWIN).NE.IRXIW) GO TO 2100                                  CWF1   613
      NWINT = NWINT + 1                                                         CWF1   614
      IDPWIN = IREFTB(2,IRXWIN)                                                 CWF1   615
      IAVPWI = IDPWIN + IOPCDT(17,JOPWIN) + 2*IOPCDT(16,JOPWIN)                 CWF1   616
C              GLASS TYPE                                                       CWF1   617
      NGTY = ISYMTB(12,IA(IAVPWI+1))                                            CWF1   618
      CALL PTRS(JOPGT,NGTY,IRXGT,IDPGT,IAVPGT)                                  CWF1   619
C              SKIP IF UNGLAZED APERTURE                                        CWF1   620
      IF (NOVAL(IA(IAVPGT+ISHCP)).EQ.0) THEN                                    SUBTY8  48
         NGTC = ISYMTB(12,IA(IAVPGT+2))                                         CWF2    45
         CALL PTRS(JOPGTC,NGTC,IRXGTC,IDPGTC,IAVPGTC)                           CWF2    46
         RHOWT = RHOWT + AA(ISP)*AA(IAVPGTC+131)                                CWF2    47
         NLAY = INT(AA(IAVPGTC+17))                                             CWF2    48
         IF(NLAY.EQ.0) GO TO 2100                                               CWF2    49
      ENDIF                                                                     CWF2    50
      IS = IS + 1                                                               WFDATA 547
C              ZERO OUT WINDOW-WALL RAD EXCH TERMS FOR THIS INT WALL            WFDATA 548
      IJ = IS + (ISIW-1)*NWP + MWFG - 1                                         WFDATA 549
      JI = ISIW + (IS-1)*NWP + MWFG - 1                                         WFDATA 550
      AA(IJ) = 0.0                                                              WFDATA 551
      AA(JI) = 0.0                                                              WFDATA 552
      ISP = MWFX + (IS-1)*LENWF                                                 WFDATA 553
      IA(ISP+9) = 0                                                             WFDATA 554
      AA(ISP) = AMAX1(0.01,AA(IAVPWI+14)*AA(IAVPWI+15)*                         CWF1   622
     1            AA(IAVPWI+10))                                                CWF1   623
      IF(METIN.EQ.1) CALL KDIV(AA(ISP),9,1,METIN)                               CWF1   624
      AINTWIN = AINTWIN + AA(ISP)                                               CWF1   625
      IA(ISP+7) = -4                                                            WFDATA 556
      AA(ISP+5) = 0.                                                            WFDATA 557
      AA(ISP+4) = RFILM                                                         WFDATA 558
C              GLASS CONDUCTANCE                                                WFDATA 559
      IF (NOVAL(IA(IAVPGT+ISHCP)).EQ.0) THEN                                    SUBTY8  49
C              GLASS IS FROM WINDOW-4 LIBRARY; GET BARE R-VALUE                 CWF2    52
         NGTC = ISYMTB(12,IA(IAVPGT+2))                                         CWF2    53
         CALL PTRS(JOPGTC,NGTC,IRXGTC,IDPGTC,IAVPGTC)                           CWF2    54
         ucentr = aa(iavpgtc+iucentr)                                           CWF2    55
         hcout  = aa(iavpgtc+ihcout)                                            CWF2    56
         hrout  = aa(iavpgtc+ihrout)                                            CWF2    57
         hin    = aa(iavpgtc+ihin)                                              CWF2    58
         ucbare = 1./(1./ucentr - 1./(hcout+hrout) - 1./hin)                    CWF2    59
         ucbare = amax1(0.001,ucbare)                                           CWF2    60
         AA(ISP+6) = AMAX1(0.05,5.67826/ucbare)                                 -044c7   5
      ELSE                                                                      CWF1   633
C              GLASS HAS SHADING COEF SPECIFIED                                 CWF1   634
         WCON = AA(IAVPGT+4)                                                    CWF1   635
         IF(METIN.EQ.1) CALL KDIV(WCON,6,1,METIN)                               CWF1   636
         R = 1./(WCON+1.E-9)                                                    CWF2    62
         AA(ISP+6) = AMAX1(0.05,R-RFILM)                                        CWF2    63
      ENDIF                                                                     CWF1   653
      AA(ISP+2) = RCONC                                                         WFDATA 582
      AA(ISP+3) = RRADC                                                         WFDATA 583
      IA(ISP+1) = 0                                                             WFDATA 584
 2100 CONTINUE                                                                  CWF1   654
C                                                                               CWF1   655
 2498 CONTINUE                                                                  CWF1   656
C                                                                               CWF1   657
      IF(IWTYP.EQ.1) THEN                                                       CWF1   658
C            FOR SUNSPACE INTERIOR WALLS                                        CWF1   659
C            NET AREA = GROSS AREA - WINDOW AREA                                CWF1   660
      IF(ISSPAR.EQ.1.OR.ISSNT.EQ.1)                                             CWF1   661
     1   AINTWL = AMAX1(0.001,AINTWL-AINTWIN)                                   CWF1   662
C              MULTIPLY WALL AREA BY MULTIPLIER OF SPACE ON                     CWF1   663
C              OTHER SIDE OF WALL FOR STANDARD I-W.                             CWF1   664
C              PTR TO SPACE ADJACENT TO CURRENT SPACE                           CWF1   665
         IAVPADJ = IAVPSNT                                                      CWF1   666
         IF(INSP) IAVPADJ = IAVPSP                                              CWF1   667
         AA(ISPIW) = AINTWL*AA(IAVPADJ+8)                                       CWF1   668
      ELSE                                                                      CWF1   669
         AA(ISPIW) = AINTWL                                                     CWF1   670
      ENDIF                                                                     CWF1   671
      AA(ISPIW) = AMAX1(0.01,AA(ISPIW))                                         CWF1   672
      ATNW = ATNW + AA(ISPIW)                                                   CWF1   673
C              AREA WEIGHTED ABSORPTANCE                                        CWF1   674
      IF(INSP) THEN                                                             CWF1   675
         ABSW = ABSW + AA(ISPIW)*AA(IAVPIW+8)                                   CWF1   676
      ELSE                                                                      CWF1   677
         ABSW = ABSW + AA(ISPIW)*AA(IAVPIW+9)                                   CWF1   678
      ENDIF                                                                     CWF1   679
C                                                                               CWF1   680
 2499 CONTINUE                                                                  CWF1   681
 2500 CONTINUE                                                                  WFDATA 588
 3000 CONTINUE                                                                  WFDATA 589
C                                                                               WFDATA 590
C              --------------------                                             WFDATA 591
C              UNDERGROUND SURFACES                                             WFDATA 592
C              --------------------                                             WFDATA 593
C                                                                               WFDATA 594
      DO 3500 IUG = 1,NUG                                                       CWF1   682
      CALL PTRS(JOPUGW,IUG,IRXUG,IDPUG,IAVPUG)                                  CWF1   683
      IF(IREFTB(4,IRXUG).NE.IRXSP) GO TO 3500                                   CWF1   684
      IS     = IS+1                                                             WFDATA 599
      ISP    = MWFX+(IS-1)*LENWF                                                WFDATA 600
      IA(ISP+9) = 0                                                             WFDATA 601
C              AREA                                                             CWF1   685
      IPOLYF = 17                                                               CWF1   686
c              if area not specified look for POLYGON or use H*W                HVAC11  39
      IF(NOVAL(AA(IAVPUG+1)).EQ.0)  THEN                                        HVAC11  40
      IF(NOVAL(AA(IAVPUG+IPOLYF)).EQ.0)  THEN                                   FIX8    94
C              RECTANGLE                                                        CWF1   689
         AA(ISP) = AMAX1(0.01,AA(IAVPUG+7)*AA(IAVPUG+12)*AA(IAVPUG+13))         CWF1   690
      ELSE                                                                      CWF1   691
C              POLYGON                                                          CWF1   692
         IPOLYN = ISYMTB(12,IA(IAVPUG+IPOLYF))                                  FIXJH3   4
         CALL PTRS(40,IPOLYN,IRXPOL,IDATX,IAVPOLY)                              CWF1   694
         CALL POLYICK(IA(IDATX+1),AA(IAVPOLY+1),AREA,PERIM,0,IERRFL)            LTSYS   28
         AA(ISP) = AMAX1(0.01,AA(IAVPUG+7)*AREA)                                DFTEX4 548
      ENDIF                                                                     CWF1   697
      ELSE                                                                      HVAC11  41
c              if area is specified use it * MULTIPLIER                         HVAC11  42
         AA(ISP) = AMAX1(0.01,AA(IAVPUG+7)*AA(IAVPUG+1))                        HVAC11  43
      ENDIF                                                                     HVAC11  44
      IF(METIN.EQ.1) CALL KDIV(AA(ISP),9,1,METIN)                               CWF1   698
      ATNW   = ATNW+AA(ISP)                                                     WFDATA 604
      ABSW = ABSW + AA(ISP)*AA(IAVPUG+5)                                        CWF1   699
      AA(ISP+3)=RRADC                                                           WFDATA 606
      AA(ISP+5) = AMAX1(0.,AA(IAVPUG+6))                                        CWF1   700
      QTOT   = QTOT+AA(ISP+5)                                                   WFDATA 608
      QTOTAD = QTOTAD + AA(ISP+5)                                               WFDATA 609
C              SET OUTSIDE FILM RESISTANCE TO ZERO                              CWF1   701
      AA(ISP+4) = 0.0                                                           CWF1   702
C              WALL CONSTRUCTION NO.                                            CWF1   703
      ICNS = ISYMTB(12,IA(IAVPUG+2))                                            CWF1   704
      CALL PTRS(JOPCNS,ICNS,IRXCNS,IDPCNS,IAVPCNS)                              CWF1   705
C              CHECK IF QUICK WALL                                              DFTEX4 549
      IF(IA(IDPCNS+2).LE.0) GO TO 3010                                          DFTEX4 550
C              THE SURFACE IS DELAYED; SET CONST NO.                            CWF1   708
      IA(ISP+1) = ICNS                                                          CWF1   709
C              INSIDE FILM RESISTANCE:                                          CWF1   710
C              PTR TO RESPONSE FACTORS WITH IFR (SEE CONSTI)                    CWF1   711
      IRFW = IA(IDPCNS+1)                                                       CWF1   712
C              PTR TO RESPONSE FACTORS WITHOUT IFR                              CWF1   713
      IRF = IRFW + 3*IA(IRFW+2) + 7                                             CWF1   714
C              IFR IS WORD BEFORE RF'S WITHOUT IFR                              CWF1   715
      RIFR = AA(IRF)                                                            CWF1   716
      IF(METIN.EQ.1) CALL KDIV(RIFR,32,1,METIN)                                 CWF1   717
C              IF OUTSIDE ACCEPTABLE RANGE, SET TO RFILM                        CWF1   718
      IF(RIFR.LE.0.0.OR.RIFR.GT.1.0) RIFR = RFILM                               CWF1   719
C              CONVECTIVE FILM RESISTANCE                                       CWF1   720
      AA(ISP+2) = 1.0 / (1.0/RIFR - 1.0/RRADC)                                  CWF1   721
      GO TO 3020                                                                WFDATA 629
 3010 CONTINUE                                                                  WFDATA 630
C              QUICK SURFACE                                                    WFDATA 631
C              GET SURFACE TO SURFACE RESISTANCE                                WFDATA 632
      R = 1./(AA(IAVPCNS+5)+0.00001)                                            SUBTY8  51
      IF(METIN.EQ.1) CALL KDIV(R,32,1,METIN)                                    CWF1   723
      AA(ISP+6) = AMAX1(0.05,R-RFILM)                                           WFDATA 634
      AA(ISP+2) = RCONC                                                         WFDATA 635
      IA(ISP+1)=0                                                               WFDATA 636
 3020 CONTINUE                                                                  WFDATA 637
C              TYPE OF SURFACE                                                  WFDATA 638
      IA(ISP+7)=3                                                               WFDATA 639
C              CHECK IF FLOOR                                                   WFDATA 640
      IWFC = IA(IDPUG+3) + 1                                                    CWF1   724
      IF(IWFC.EQ.2) IA(ISP+7) = 8                                               WFDATA 642
C              INCREMENT SURFACE-TYPE COUNTER                                   WFDATA 643
      NWFC(1,IWFC) = NWFC(1,IWFC) + 1                                           WFDATA 644
      IF(IA(IDPCNS+2).GT.0) NWFC(2,IWFC) = NWFC(2,IWFC) + 1                     DFTEX4 551
 3500 CONTINUE                                                                  WFDATA 647
 4000 CONTINUE                                                                  WFDATA 648
      NW     = IS                                                               WFDATA 649
C                                                                               WFDATA 650
      IF(LDSTYP.EQ.2) GO TO 4004                                                WFDATA 651
C                                                                               WFDATA 652
C              AREA-WEIGHTED WINDOW REFLECTIVITY AND INWARD-FLOWING             WFDATA 653
C              FRACTION OF ABSORBED SOLAR RADIATION                             WFDATA 654
C                                                                               WFDATA 655
      RHOWT  = RHOWT / (ATWIN + 0.0001)                                         WFDATA 656
      RHOWT  = AMAX1 (0.0 , RHOWT)                                              WFDATA 657
      FWT    = FWT / (ATWIN + 0.0001)                                           WFDATA 658
C              AREA-WEIGHTED SOL ABSORPTANCE OF OPAQ INSIDE SURFACES            WFDATA 659
      ABSW = ABSW/(ATNW+0.0001)                                                 WFDATA 660
C              FRACTION OF INCOMING SOLAR RADIATION WHICH IS NOT                WFDATA 661
C              REFLECTED BACK OUT EXTERIOR WINDOWS                              WFDATA 662
      TEMP1  = ABSW + (1.-ABSW) * FWT * ATWIN / (ATNW+ATWIN)                    WFDATA 663
      TEMP2  = 1. - (1.-ABSW) * (1.-(1.-RHOWT)*ATWIN / (ATNW+ATWIN) )           WFDATA 664
      frem = amin1(1.0,temp1/temp2)                                             WFDATA 665
C                                                                               WFDATA 666
      if(ireprt(35).ne.0)                                                       WFDATA 667
     1 write(ioutpt,94000) atnw,atwin,rhowt,fwt,absw,temp1,temp2,frem           WFDATA 668
94000 format(' WFDATA:atnw,atwin,rhowt,fwt,absw,temp1,temp2,frem=',/,           WFDATA 669
     1 1x,8f10.3)                                                               WFDATA 670
C              FINAL APPORTIONMENT OF SOLAR-FRACTIONS (S-F)                     WFDATA 671
C                                                                               WFDATA 672
C              LOOP THRU SURFACES.  CALC. TOTAL AREA OF FLOOR SECTIONS          WFDATA 673
C              (FLRFUR) AND AREA OF NON-WINDOW SURFACES WITH ZERO S-F           WFDATA 674
C              (ASFZ)                                                           WFDATA 675
C                                                                               WFDATA 676
      FLRFUR = 0.                                                               WFDATA 677
      ASFZ = 0.                                                                 WFDATA 678
      DO 4010 I=1,NW                                                            WFDATA 679
      ISP = MWFX + (I-1)*LENWF                                                  WFDATA 680
      IF(IA(ISP+7).EQ.4.OR.IA(ISP+7).EQ.-4) GO TO 4010                          WFDATA 681
      IF(IA(ISP+7).GE.6) FLRFUR = FLRFUR + AA(ISP)                              WFDATA 682
      IF(AA(ISP+5).EQ.0.) ASFZ = ASFZ + AA(ISP)                                 CWF1   726
 4010 CONTINUE                                                                  WFDATA 684
C                                                                               WFDATA 685
C              THERE ARE THREE CASES DEPENDING ON WHETHER NONE, SOME,           WFDATA 686
C              OR ALL OF THE S-F HAVE BEEN SPECIFIED                            WFDATA 687
C                                                                               WFDATA 688
      IF(QTOT.NE.0.) GO TO 4040                                                 WFDATA 689
C                                                                               WFDATA 690
C              CASE(1) -- QTOT = 0  (ALL S-F = 0)                               WFDATA 691
C                                                                               WFDATA 692
      IF(FLRFUR.EQ.0.) GO TO 4020                                               WFDATA 693
C              FLOOR PRESENT, SET S-F ON FLOOR = SFFLR,                         WFDATA 694
C              DISTRIBUTE REMAINDER (1 - SFFLR) ON OTHER SURFACES               WFDATA 695
      DO 4015 I=1,NW                                                            WFDATA 696
      ISP = MWFX + (I-1)*LENWF                                                  WFDATA 697
      IF(IA(ISP+7).EQ.4.OR.IA(ISP+7).EQ.-4) GO TO 4015                          WFDATA 698
      IF(IA(ISP+7).GE.6) AA(ISP+5) = (AA(ISP)/FLRFUR)*SFFLR*FREM                WFDATA 699
      IF(IA(ISP+7).LT.6) AA(ISP+5) = (1.-SFFLR)*FREM*AA(ISP)/                   WFDATA 700
     1   (ATNW-FLRFUR)                                                          WFDATA 701
 4015 CONTINUE                                                                  WFDATA 702
      GO TO 4100                                                                WFDATA 703
 4020 CONTINUE                                                                  WFDATA 704
C              QTOT = 0 AND NO FLOOR.  DISTRIBUTE S-F UNIFORMLY.                WFDATA 705
      DO 4025 I=1,NW                                                            WFDATA 706
      ISP = MWFX + (I-1)*LENWF                                                  WFDATA 707
      IF(IA(ISP+7).EQ.4.OR.IA(ISP+7).EQ.-4) GO TO 4025                          WFDATA 708
      AA(ISP+5) = (AA(ISP)/ATNW)*FREM                                           WFDATA 709
 4025 CONTINUE                                                                  WFDATA 710
      GO TO 4100                                                                WFDATA 711
 4040 CONTINUE                                                                  WFDATA 712
      IF(ASFZ.EQ.0.) GO TO 4060                                                 WFDATA 713
C                                                                               WFDATA 714
C              CASE(2) -- SOME S-F ARE ZERO, OTHERS NOT                         WFDATA 715
C                                                                               WFDATA 716
C              IF QTOT LT 1.0, UNIFORMLY DISTRIBUTE 1-QTOT TO                   WFDATA 717
C              SURFACES WITH S-F=0                                              WFDATA 718
      IF(QTOT.GT.1.0) GO TO 4045                                                WFDATA 719
      DO 4042 I=1,NW                                                            WFDATA 720
      ISP = MWFX + (I-1)*LENWF                                                  WFDATA 721
      IF(IA(ISP+7).EQ.4.OR.IA(ISP+7).EQ.-4) GO TO 4042                          WFDATA 722
      IF(AA(ISP+5).EQ.0.) AA(ISP+5) = (AA(ISP)/ASFZ)*(1.-QTOTAD)                WFDATA 723
      AA(ISP+5) = AA(ISP+5)*FREM                                                WFDATA 724
 4042 CONTINUE                                                                  WFDATA 725
      GO TO 4100                                                                WFDATA 726
 4045 CONTINUE                                                                  WFDATA 727
C              QTOT GT 1.0 BUT SOME S-F = 0.  THIS IS AN INPUT ERROR.           WFDATA 728
      IWFERR = IWFERR + 1                                                       WFDATA 729
      IF(MSGLVL.GT.1) THEN                                                      CWF4    51
         CALL MSG2(67,ISPNAM(1),QTOT,II,II)                                     ERR-01 746
      ENDIF                                                                     CWF4    61
C              GO ON TO NEXT SPACE                                              WFDATA 734
      GO TO 4004                                                                WFDATA 735
 4060 CONTINUE                                                                  WFDATA 736
C                                                                               WFDATA 737
C              CASE(3) -- ALL S-F ARE NON-ZERO                                  WFDATA 738
C                                                                               WFDATA 739
C              WARNING IF QTOT MORE THAN 10 PC FROM 1.0. THEN NORMALIZE.        WFDATA 740
      IF(QTOT.GE.0.9.AND.QTOT.LE.1.1) GO TO 4065                                WFDATA 741
      IF(MSGLVL.GT.1) THEN                                                      CWF4    62
         CALL MSG2(71,ISPNAM(I),QTOT,II,II)                                     ERR-01 747
      ENDIF                                                                     CWF4    68
 4065 DO 4068 I=1,NW                                                            WFDATA 747
      ISP = MWFX + (I-1)*LENWF                                                  WFDATA 748
      AA(ISP+5) = (AA(ISP+5)/QTOTAD)*FREM                                       WFDATA 749
 4068 CONTINUE                                                                  WFDATA 750
 4100 CONTINUE                                                                  WFDATA 751
 4004 CONTINUE                                                                  WFDATA 752
      RETURN                                                                    WFDATA 753
      END                                                                       WFDATA 754
                                                                                WFDATA 755
      SUBROUTINE WFALL(ICALC)                                                   WFALL    2
C                                                                               WFALL    3
C              CALCULATE OR RECALCULATE WEIGHTING FACTORS FOR ALL SPACES        WFALL    4
C                                                                               WFALL    5
C              ICALC=1: CALC. WF'S EVEN IF ALREADY THERE; =0, DON'T             WFALL    6
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
C                                                                               WFALL    9
C              IRDCLC=1 IS A FLAG TO RESORT ITHE SPACE LIST AND REDO            WFALL   10
C              RAD. FRAC. CALC. IF CUSTOM W-F'S                                 WFALL   11
      IRDCLC = 1                                                                WFALL   12
      IAXSAV = IAX                                                              NEWEXP  69
      NUMSP = IOPCDT(13,JOPSP)                                                  WFALL   13
      DO ISP=1,NUMSP                                                            WFALL   14
         JREFSP = IOPCDT(14,JOPSP) + ISP - 1                                    WFALL   15
         CALL WFCALC(JREFSP,IRDCLC,ICALC)                                       WFALL   16
         IRDCLC = 0                                                             WFALL   17
      END DO                                                                    WFALL   18
      IAX    = IAXSAV                                                           NEWEXP  70
      RETURN                                                                    WFALL   19
      END                                                                       WFALL   20
      SUBROUTINE WFCALC(JREF,IRDCLC,ICALC)                                      WFCALC   2
C                                                                               WFCALC   3
C              CALCULATE WEIGHTING FACTORS FOR THE SPACE WHOSE                  WFCALC   4
C              REFERENCE TABLE INDEX IS JREF.  IRDCLC=0 MEANS                   WFCALC   5
C              DON'T RESORT THE SPACE LIST AND DON'T DO THE                     WFCALC   6
C              CALCULATION OF RADIATIVE  FRACTION OF LIGHT HEAT                 WFCALC   7
C              TO OTHER SPACES.  ICALC=1 MEANS DO THE W-F                       WFCALC   8
C              CALCULATION EVEN IF THE W-F'S FOR THE SPACE                      WFCALC   9
C              ALREADY EXIST.                                                   WFCALC  10
C              NOTE: POWERDOE SHOULD ALWAYS USE IRDCALC=1                       WFCALC  11
C                                                                               WFCALC  12
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /SPVALX/ IHP, IAP, IVP, ISHPP, IWP, IDPTHP, ISCP, IPRCAP,         /SPVALX/ 2
     1                 IWFP, ILTP, IINFMP, INZHP, IPLP, IPSP, ILKWP,            /SPVALX/ 3
     2                 ITKWP, IEKWP, IPAP, ILWSFP, ITWSFP, IPOLSP,              GEO4     1
     3                 IEQWFP, KWH, KWA, KWV, KWSHP, KWW, KWDPTH,               /SPVALX/ 5
     4                 KWSC, KWLT, KWINFM, KWNZH, KWPL, KWPS,                   /SPVALX/ 6
     5                 KWLKW, KWTKW, KWEKW, KWPA, KWLWSF, KWTWSF,               /SPVALX/ 7
     6                 KWEWSF, IFURTP, IFURFP, IFURWP, IFLRWP, KWWF,            /SPVALX/ 8
     7                 KWFLRW,ILTSP,NINFKY,INFKYP(20),DEFINF(10,4),             LTSYS1   2
     8                 ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM,             DFTEXP 197
     9                 ISPLOCP,ISPDIS,NSPDIS                                    DFTEXP 198
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON /ISPLST/ ISPLST(9999),ISPLOC(9999)                                 -048a    8
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /WFZDAT/  NW,NWP,LENWF,RINF,FWA,PFA,FLAR,IL,IFUR,MZ,              /WFZDAT/ 2
     1                  IZ,IFRN,MWFX,NWALLM,MWFQW,MWFG,MWFA,IWFERR,             /WFZDAT/ 3
     2                  MWFX1,MWFDET,MWFB,MWFC,MWFGS,NWMAX,RRADC,               /WFZDAT/ 4
     3                  AFRAD,ABSW,FLRFUR,RCONC,RFILM,NOPQ,FREM,SFFLR,          /WFZDAT/ 5
     4                  UAIW,NWFC(2,3),NWFS,ISPNAM(8)                           CWF1   143
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      DIMENSION ISPNM(8)                                                        WFCALC  26
C                                                                               WFCALC  27
      NSP   = IOPCDT(13,JOPSP)                                                  WFCALC  28
      NWIN  = IOPCDT(13,JOPWIN)                                                 WFCALC  29
      NEW   = IOPCDT(13,JOPEW)                                                  WFCALC  30
      NUG   = IOPCDT(13,JOPUGW)                                                 WFCALC  31
      NIW   = IOPCDT(13,JOPIW)                                                  WFCALC  32
      NDOOR = IOPCDT(13,JOPDR)                                                  WFCALC  33
      NWF   = IOPCDT(13,JOPWF)                                                  WFCALC  34
C                                                                               WFCALC  35
C              PREPARE SPACE LIST WRT SPACE TYPE                                WFCALC  36
C                                                                               WFCALC  37
      IF (IRDCLC.EQ.0) GO TO 1000                                               WFCALC  38
      IF( NSP .LE. 9999 )  GOTO  610                                            -048a   15
      WRITE(IOUTPT, 601)                                                        WFCALC  40
  601 FORMAT( 41H0*** ERROR ***  PROGRAM CAPACITY EXCEEDED, 3X,                 WFCALC  41
     1            37H( INCREASE /ISPLST/ IN LDL - WFO    )  )                   WFCALC  42
      CALL  ABT                                                                 WFCALC  43
C              PACK SPACE TYPE AND NUMBER AS TYPE*10000 + SPACE NUMBER          WFCALC  44
  610 DO  620  I = 1 , NSP                                                      WFCALC  45
C              SUNSPACES FIRST, THEN CONDITIONED, THEN UNCONDITIONED            WFCALC  46
      CALL PTRS(JOPSP,I,IRXSP,IDPSP,IAVPSP)                                     WFCALC  47
      ITYP = ISYMTB(12,IA(IAVPSP+18))                                           WFCALC  48
      ISS =  ISYMTB(12,IA(IAVPSP+153))                                          LTSYS1 288
      ISPLST(I) = 10000*(ITYP+1) + I                                            WFCALC  50
      IF (ISS.EQ.1) ISPLST(I) = 10000 + I                                       WFCALC  51
C              CHECK WHETHER LIGHT-HEAT-TO SPACE IS PLENUM OR UNCOND            WFCALC  52
      IF(NOVAL(AA(IAVPSP+137)).EQ.0) GO TO 620                                  DFTEX31094
C              SPACE NO. OF LIGHT-HEAT-TO SPACE                                 WFCALC  54
      ISLTS = ISYMTB(12,IA(IAVPSP+137))                                         LTSYS1 290
      CALL PTRS(JOPSP,ISLTS,IRXLTS,IDPLTS,IAVLTS)                               WFCALC  56
      IF(ISYMTB(12,IA(IAVLTS+18)).NE.1) GO TO 619                               WFCALC  57
         NAMPTR = IREFTB(1,IRXSP)                                               ERR-01 748
         IF(NAMPTR.GT.0) THEN                                                   ERR-01 749
           CALL MOVEN(ISYMTB(1,NAMPTR),ISPNM(1),8)                              ERR-01 750
         ELSE                                                                   ERR-01 751
           CALL MOVEN(IBLANK(1),ISPNM(1),8)                                     ERR-01 752
         ENDIF                                                                  ERR-01 753
         CALL MSG2(64,ISPNM(1),'CONDITIONED ZONE',II,II)                        ERR-01 754
  619 ISS = ISYMTB(12,IA(IAVLTS+153))                                           NEWEX2   5
      IF(ISS.NE.1) GO TO 620                                                    WFCALC  66
         NAMPTR = IREFTB(1,IRXSP)                                               ERR-01 755
         IF(NAMPTR.GT.0) THEN                                                   ERR-01 756
           CALL MOVEN(ISYMTB(1,NAMPTR),ISPNM(1),8)                              ERR-01 757
         ELSE                                                                   ERR-01 758
           CALL MOVEN(IBLANK(1),ISPNM(1),8)                                     ERR-01 759
         ENDIF                                                                  ERR-01 760
         CALL MSG2(64,ISPNM(1),'SUNSPACE        ',II,II)                        ERR-01 761
  620 CONTINUE                                                                  WFCALC  74
      IF( NSP .LT. 2 )  GOTO  650                                               WFCALC  75
  630 IFLAG  = 0                                                                WFCALC  76
C              PUT ISPLST IN ASCENDING ORDER                                    WFCALC  77
      DO  640  I = 2 , NSP                                                      WFCALC  78
      IF( ISPLST(I-1) .LE. ISPLST(I) )  GOTO  640                               WFCALC  79
      J           = ISPLST(I-1)                                                 WFCALC  80
      ISPLST(I-1) = ISPLST(I)                                                   WFCALC  81
      ISPLST(I)   = J                                                           WFCALC  82
      IFLAG  = 1                                                                WFCALC  83
  640 CONTINUE                                                                  WFCALC  84
      IF( IFLAG .NE. 0 )  GOTO  630                                             WFCALC  85
C              TAKE OUT SPACE TYPE FROM THE LIST LEAVING                        WFCALC  86
C              REORDERED SPACE NUMBERS                                          WFCALC  87
  650 DO  660  I = 1 , NSP                                                      WFCALC  88
      ISPLST(I) =  MOD(ISPLST(I),10000)                                         WFCALC  89
  660 CONTINUE                                                                  WFCALC  90
C                                                                               WFCALC  91
C              CALL ROUTINE TO CALC RADIATIVE LIGHT HEAT FRACTIONS              WFCALC  92
C              FOR USE IN CWF CALCULATION                                       WFCALC  93
C                                                                               WFCALC  94
      CALL WFRAD                                                                WFCALC  95
C                                                                               WFCALC  96
C              Before first WF to calc set max num of surfaces to zero          NEWEXP  71
C              to initialize scratch buffer space calc for custom WF's.         NEWEXP  72
C              This is reset in WFMAIN to the number for the current            NEWEXP  73
C              SPACE; it is used to decide if more IA space is needed.          NEWEXP  74
      NWMAX = 0                                                                 NEWEXP  75
C              Set location where WF temp storage is located                    NEWEXP  76
      MWFX = IAX + 1                                                            NEWEXP  77
 1000 IDSP = IREFTB(2,JREF)                                                     WFCALC  97
      IVPSP = IDSP + IOPCDT(17,JOPSP) + 2*IOPCDT(16,JOPSP)                      WFCALC  98
      IWF = IA(IVPSP+IWFP)                                                      WFCALC  99
      IWFN = ISYMTB(12,IWF)                                                     WFCALC 100
      JREFWF = IOPCDT(14,JOPWF) + IWFN - 1                                      WFCALC 101
      IDPWF = IREFTB(2,JREFWF)                                                  WFCALC 102
      IVPWF1 = IDPWF + IOPCDT(17,JOPWF)                                         WFCALC 103
      IF(IUNPKB(1,5,IA(IVPWF1+1)).NE.1) GOTO 5000                               FIX14  242
      IVPWF = IVPWF1 + 2*IOPCDT(16,JOPWF)                                       FIX14  243
      IF (NOVAL(AA(IVPWF+1)).NE.0 .AND. ICALC.EQ.0) GO TO 5000                  FIX14  244
      FLRWT = AA(IVPSP+IFLRWP)                                                  WFCALC 106
      IF (FLRWT.LE.0.) GO TO 2000                                               WFCALC 107
C                                                                               WFCALC 108
C              ASHRAE W-F'S                                                     WFCALC 109
C                                                                               WFCALC 110
      IF (METIN.EQ.1) CALL KDIV(FLRWT,27,1,METIN)                               FIX15   73
 1500 ILT = IA(IVPSP+ILTP)                                                      FIX15   74
      ILT = ISYMTB(12,ILT)                                                      WFCALC 112
      CALL WFASH(FLRWT,ILT,IVPWF)                                               WFCALC 113
      J=IOPCDT(16,JOPWF)                                                        FIX14  245
      DO I=1,J                                                                  FIX14  246
        IA(IVPWF1+I) = IPACKB(1,5,1,IA(IVPWF1+I))                               FIX14  247
      ENDDO                                                                     FIX14  248
      GO TO 5000                                                                WFCALC 115
C                                                                               WFCALC 116
C              CUSTOM W-F'S                                                     WFCALC 117
C                                                                               WFCALC 118
C                                                                               NEWEXP  78
C                                                                               NEWEXP  79
C              CALCULATE CUSTOM WEIGHTING FACTORS for SPACES with               NEWEXP  80
C              FLOOR-WEIGHT = O and store values in WF object data blocks       NEWEXP  81
C                                                                               NEWEXP  82
 2000 CONTINUE                                                                  NEWEXP  83
      MSP = JREF - IOPCDT(14,JOPSP) + 1                                         WFCALC 130
      CALL WFMAIN(MSP)                                                          WFCALC 131
C              USE ASHRAE WF IF CWF CALC FAILS                                  CWF4    70
      IF(IWFERR.NE.0) THEN                                                      CWF4    71
         FLRWT = 70.                                                            CWF4    72
         AA(IVPSP+IFLRWP) = 70.  ! sets FLOOR-WEIGHT                            -045a   14
         GO TO 1500                                                             CWF4    73
      ENDIF                                                                     CWF4    74
 5000 CONTINUE                                                                  WFCALC 132
      RETURN                                                                    WFCALC 133
      END                                                                       WFCALC 134
      SUBROUTINE WFGEN(MSP,IWFT,NNU,NDE)                                        CWF1   731
C                                                                               WFGEN    3
C              CALLS SUBROUTINES WFMATG AND WFDECN (Q.V.) FOR A ZONE            WFGEN    4
C              AND NORMALIZES THE AIR TEMPERATURE WEIGHTING FACTORS             WFGEN    5
C              FACTORS FOR A ZONE                                               WFGEN    6
C                                                                               WFGEN    7
C              CALLING PARAMETERS FOR WFGEN                                     WFGEN    8
C              IWFT = TYPE OF WEIGHTING FACTOR                                  WFGEN    9
C              1 = SOLAR                                                        WFGEN   10
C              2 = AIR TEMPERATURE                                              WFGEN   11
C              3 = PEOPLE/EQUIPMENT                                             WFGEN   12
C              4 = GENERAL LIGHTING                                             WFGEN   13
C              5 = TASK LIGHTING                                                WFGEN   14
C              6 = CONDUCTION                                                   WFGEN   15
C              NNU = NUMBER OF NUMERATOR (V) TERMS DESIRED                      WFGEN   16
C              NDE = NUMBER OF DENOMINATOR (W) TERMS DESIRED                    WFGEN   17
C                                                                               WFGEN   18
C                                                                               WFGEN   19
      COMMON/WFAC/NVT(6),NWT(6),V(10,6),W(5,6),CONN                             /WFAC/   2
C                                                                               WFGEN   21
C              WEIGHTING FACTORS ARE TRANSFERRED IN WFAC.                       WFGEN   22
C              THERE IS SPACE FOR SIX TYPES, L=1,6                              WFGEN   23
C              NVT(L) = NUMBER OF TERMS IN NUMERATOR                            WFGEN   24
C              NWT(L) = NUMBER OF TERMS IN DENOMINATOR AFTER FIRST              WFGEN   25
C              V(M,L) = NUMERATOR TERMS, M=1,NVT(L)                             WFGEN   26
C              W(M,L) = DENOMINATOR TERMS, M=1,NWT(L)                           WFGEN   27
C                                                                               WFGEN   28
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      COMMON  /WFCOOL/ NQS,CRS,QS(50),DET                                       /WFCOOL/ 2
      COMMON  /WFZDAT/  NW,NWP,LENWF,RINF,FWA,PFA,FLAR,IL,IFUR,MZ,              /WFZDAT/ 2
     1                  IZ,IFRN,MWFX,NWALLM,MWFQW,MWFG,MWFA,IWFERR,             /WFZDAT/ 3
     2                  MWFX1,MWFDET,MWFB,MWFC,MWFGS,NWMAX,RRADC,               /WFZDAT/ 4
     3                  AFRAD,ABSW,FLRFUR,RCONC,RFILM,NOPQ,FREM,SFFLR,          /WFZDAT/ 5
     4                  UAIW,NWFC(2,3),NWFS,ISPNAM(8)                           CWF1   143
C                                                                               WFGEN   34
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
C              DATA TRANSFERRED IN WFCOOL                                       WFGEN   36
C                                                                               WFGEN   37
C              NQS = NUMBER OF COOLING LOADS                                    WFGEN   38
C              CRS = COMMON RATIO OF COOLING LOADS                              WFGEN   39
C              QS(I) = COOLING LOADS, I=1,NQS                                   WFGEN   40
C                                                                               WFGEN   41
      KW     = IWFT                                                             WFGEN   42
      IRECAL = IWFT-1                                                           WFGEN   43
      IF(LDSTYP.EQ.2) IRECAL = 0                                                WFGEN   44
      IF(IREPRT(35).NE.1) GO TO 10                                              WFGEN   45
      IF(KW.EQ.1) WRITE(IOUTPT,55)                                              WFGEN   46
      IF(KW.EQ.2) WRITE(IOUTPT,75)                                              WFGEN   47
      IF(KW.EQ.3) WRITE(IOUTPT,95)                                              WFGEN   48
      IF(KW.EQ.4) WRITE(IOUTPT,85)                                              WFGEN   49
      IF(KW.EQ.5) WRITE(IOUTPT,86)                                              WFGEN   50
      IF(KW.EQ.6) WRITE(IOUTPT,97)                                              WFGEN   51
   10 CONTINUE                                                                  WFGEN   52
      CALL WFMATG(MSP,KW,IRECAL)                                                CWF1   732
      IF(IWFERR.NE.0) RETURN                                                    WFGEN   54
      IF(IREPRT(35).EQ.0) GO TO 20                                              WFGEN   55
      WRITE(IOUTPT,59)                                                          WFGEN   56
      WRITE(IOUTPT,57)(QS(J),J=1,NQS),CRS                                       WFGEN   57
   20 CONTINUE                                                                  WFGEN   58
      N1     = NNU                                                              WFGEN   59
      N2     = NDE                                                              WFGEN   60
      ITER = 0                                                                  WFGEN   61
   21 CONTINUE                                                                  WFGEN   62
C                                                                               WFGEN   63
      CALL WFDECN(KW,N1,N2,V(1,KW),W(1,KW))                                     WFGEN   64
      IF (IWFERR.NE.0) RETURN                                                   WFGEN   65
C                                                                               WFGEN   66
C     CHECK IF DECONVOLUTION DETERMINANT IS LARGE ENOUGH                        WFGEN   67
C                                                                               WFGEN   68
      IF(ABS(DET).GT.1.0E-12) GO TO 23                                          WFGEN   69
C                                                                               WFGEN   70
C     DETERMINANT IS NEARLY SINGULAR.  REDUCE NUMBER OF                         WFGEN   71
C     WEIGHTING FACTOR TERMS AND TRY A SECOND TIME.                             WFGEN   72
C     IF ALREADY SECOND TRY, PRINT ERROR MESSAGE AND RETURN.                    WFGEN   73
      IF(ITER.EQ.0) GO TO 22                                                    WFGEN   74
      IWFERR = IWFERR + 1                                                       WFGEN   75
      IF(MSGLVL.GT.1) THEN                                                      CWF4    76
         CALL MSG2(131,ISPNAM(1),KW,DET,II)                                     ERR-01 762
      ENDIF                                                                     CWF4    84
      RETURN                                                                    WFGEN   82
   22 N1 = N1 - 1                                                               WFGEN   83
      N2 = N2 - 1                                                               WFGEN   84
      ITER = ITER + 1                                                           WFGEN   85
      GO TO 21                                                                  WFGEN   86
   23 CONTINUE                                                                  WFGEN   87
      NVT(KW) = N1                                                              WFGEN   88
      NWT(KW) = N2                                                              WFGEN   89
      IRECAL = IRECAL+1                                                         WFGEN   90
C                                                                               WFGEN   91
C              CALCULATE NORMALIZED AIR TEMP WEIGHTING FACTORS (G*)             WFGEN   92
C                                                                               WFGEN   93
      IF(KW.NE.2) RETURN                                                        WFGEN   94
      NVTL   = NVT(2)                                                           WFGEN   95
      NVTLM1 = NVTL-1                                                           WFGEN   96
      NWTL   = NWT(2)                                                           WFGEN   97
      SUMN   = 0.                                                               WFGEN   98
      DO 100 I=1,NVTL                                                           WFGEN   99
  100 SUMN   = SUMN+V(I,2)                                                      WFGEN  100
      SUMD   = 1.                                                               WFGEN  101
      DO 101 I=1,NWTL                                                           WFGEN  102
  101 SUMD   = SUMD+W(I,2)                                                      WFGEN  103
      CONN   = SUMN/SUMD                                                        WFGEN  104
      V(1,2) = (V(1,2)-CONN)/FLAR                                               WFGEN  105
      DO 102 I=2,NVTLM1                                                         WFGEN  106
  102 V(I,2) = (V(I,2)-W(I-1,2)*CONN)/FLAR                                      WFGEN  107
      V(NVTL,2)=V(NVTL,2)/FLAR                                                  WFGEN  108
      RETURN                                                                    WFGEN  109
   59 FORMAT(30H COOLING LOADS INPUT TO WFDECN)                                 WFGEN  110
   55 FORMAT(///// 24H SOLAR WEIGHTING FACTORS //)                              WFGEN  111
   57 FORMAT(/(1P5E15.6))                                                       WFGEN  112
   75 FORMAT(///// 34H AIR TEMPERATURE WEIGHTING FACTORS //)                    WFGEN  113
   85 FORMAT(///// 27H LIGHTING WEIGHTING FACTORS //)                           WFGEN  114
   95 FORMAT(///// 35H PEOPLE/EQUIPMENT WEIGHTING FACTORS //)                   WFGEN  115
   86 FORMAT(///// 32H TASK LIGHTING WEIGHTING FACTORS //)                      WFGEN  116
   97 FORMAT(///// 29H CONDUCTION WEIGHTING FACTORS //)                         WFGEN  117
      END                                                                       WFGEN  118
      FUNCTION WFRZ(J,K)                                                        WFRZ     2
C              CALLED FROM WFMAIN AND WFMATG                                    CWF1   739
C              GETS RESPONSE FACTORS FROM STANDARD FILE                         WFRZ     4
C              J = SURFACE NUMBER                                               WFRZ     5
C              K = RESPONSE FACTOR TERM NUMBER                                  WFRZ     6
C                                                                               WFRZ     7
C              GETS Z RESPONSE FACTORS FOR DELAYED EXTERIOR AND                 WFRZ     8
C              UNDERGROUND WALLS, AND FOR INTERIOR WALLS DEFINED IN             WFRZ     9
C              CURRENT SPACE.  GETS X RESPONSE FACTORS FOR DELAYED              WFRZ    10
C              INTERIOR WALLS DEFINED IN ADJACENT SPACE                         WFRZ    11
C                                                                               WFRZ    12
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON/WFFURN/RCONF,RRADF,CHWT(2),RZFUR(5,2),COMRF(2)                     /WFFURN/ 2
      COMMON  /WFZDAT/  NW,NWP,LENWF,RINF,FWA,PFA,FLAR,IL,IFUR,MZ,              /WFZDAT/ 2
     1                  IZ,IFRN,MWFX,NWALLM,MWFQW,MWFG,MWFA,IWFERR,             /WFZDAT/ 3
     2                  MWFX1,MWFDET,MWFB,MWFC,MWFGS,NWMAX,RRADC,               /WFZDAT/ 4
     3                  AFRAD,ABSW,FLRFUR,RCONC,RFILM,NOPQ,FREM,SFFLR,          /WFZDAT/ 5
     4                  UAIW,NWFC(2,3),NWFS,ISPNAM(8)                           CWF1   143
      WFRZ   = 0.                                                               WFRZ    16
      JSP    = MWFX+(J-1)*LENWF                                                 WFRZ    17
      JP     = IA(JSP+1)                                                        WFRZ    18
C              JP=0 FOR QUICK SURFACE,= -999 FOR FURNITURE,                     CWF1   744
C              =CONSTRUCTION NO. FOR DELAYED SURFACES, EXCEPT                   CWF1   745
C              =-(CONSTRUCTION NO.) FOR DELAYED I-W'S DEFINED                   CWF1   746
C              IN ADJACENT SPACE.                                               CWF1   747
C              IXORZ=9 FOR Z RES FAC'S, =7 FOR X RES FAC'S.                     CWF1   748
C                                                                               WFRZ    24
      IXORZ = 9                                                                 CWF1   749
      IF(JP.GT.0) GO TO 41                                                      CWF1   750
      IF(JP.EQ.0) GO TO 42                                                      CWF1   751
      IF(JP.EQ.-999) GO TO 43                                                   CWF1   752
      IXORZ = 7                                                                 CWF1   753
      JP     = -JP                                                              WFRZ    30
C                                                                               WFRZ    31
C              DELAYED SURFACE                                                  WFRZ    32
C                                                                               WFRZ    33
   41 CONTINUE                                                                  WFRZ    34
      IRXCNS = IOPCDT(14,JOPCNS) + JP - 1                                       CWF1   754
      IDPCNS = IREFTB(2,IRXCNS)                                                 CWF1   755
C              PTR TO RF'S WITH IFR                                             CWF1   756
      IRFW = IA(IDPCNS+1)                                                       CWF1   757
C              PTR TO RF'S WITHOUT IFR                                          CWF1   758
      IRF = IRFW + 3*IA(IRFW+2) + 7                                             CWF1   759
C              NUMBER OF RF'S WITHOUT IFR                                       CWF1   760
      NRF = IA(IRF+2)                                                           CWF1   761
      WY = FLOAT(IA(JSP+9))                                                     CWF1   762
      IF(K.LE.NRF) THEN                                                         CWF1   763
        WFRZ = AA(IRF+IXORZ+(K-1)*3) - WY*AA(IRF+8+(K-1)*3)                     CWF1   764
        IF(METIN.EQ.1) CALL KDIV(WFRZ,6,1,METIN)                                CWF1   765
      ENDIF                                                                     CWF1   766
C              TO AVOID UNDERFLOW LET WFRZ BE ZERO FOR K > NR                   CWF1   767
C              AND COMMON RATIO < 0.01                                          CWF1   768
      IF(AA(IRF+3).LT.0.01) GO TO 100                                           CWF1   769
      IF(K.GT.NRF) THEN                                                         CWF1   770
        WFRZ =(AA(IRF+IXORZ+(NRF-1)*3) - WY*AA(IRF+8+(NRF-1)*3))*               CWF1   771
     1         AA(IRF+3)**(K-NRF)                                               CWF1   772
        IF(METIN.EQ.1) CALL KDIV(WFRZ,6,1,METIN)                                CWF1   773
      ENDIF                                                                     CWF1   774
      GO TO 100                                                                 WFRZ    43
C                                                                               WFRZ    44
C              QUICK SURFACE                                                    WFRZ    45
C                                                                               WFRZ    46
   42 CONTINUE                                                                  WFRZ    47
C              FOR QUICK WALLS, WFRZ=0 FOR K > 2                                WFRZ    48
      IF(K.NE.1) GO TO 100                                                      WFRZ    49
C              FOR QUICK INT WALLS AND INT WINS WFRZ=0 FOR ALL K                WFRZ    50
      IF(IA(JSP+7).EQ.2.OR.IA(JSP+7).EQ.7.OR.IA(JSP+7).EQ.-4) GO TO 100         WFRZ    51
C              QUICK EXTERIOR AND UNDERGROUND WALLS                             WFRZ    52
      WFRZ = 1.0/(AA(JSP+6)+AA(JSP+4))                                          WFRZ    53
      GO TO 100                                                                 WFRZ    54
C                                                                               WFRZ    55
C              FURNITURE                                                        WFRZ    56
C                                                                               WFRZ    57
   43 CONTINUE                                                                  WFRZ    58
      IF(K.GT.5) GO TO 143                                                      WFRZ    59
      WFRZ   = RZFUR(K,IFUR)                                                    WFRZ    60
      GO TO 100                                                                 WFRZ    61
  143 CONTINUE                                                                  WFRZ    62
      WFRZ   = RZFUR(5,IFUR)*COMRF(IFUR)**(K-5)                                 WFRZ    63
  100 CONTINUE                                                                  WFRZ    64
      RETURN                                                                    WFRZ    65
      END                                                                       WFRZ    66
      SUBROUTINE WFREP                                                          WFREP    2
C                                                                               WFREP    3
C              PRINTS WEIGHTING FACTOR SUMMARY REPORT                           WFREP    4
C                                                                               WFREP    5
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON /CLOCK / CLOCK(10)                                                 /CLOCK/  2
      INTEGER ICLOCK8                                                           PC       1
      EQUIVALENCE (ICLOCK8,CLOCK(8))                                            PC       2
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /ITITLE/ ITITLE(10,5),ITITLT(10,5)                                 FIX11    1
      COMMON  /LENGTH/ LWF, LCONSF, LGT, LSHADE, LWNDW, LDOOR, LEW,             /LENGTH/ 2
     1                 LUG, LSPACE, LIW, LFL, LRBF, LHRF, LWINLAY, LMTB         BLIND1   3
      DIMENSION LCOMP(14)                                                       BLIND    5
      EQUIVALENCE (LCOMP(1),LWF)                                                /LENGTH/ 5
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
C                                                                               WFREP   15
      COMMON /IUNITS/ VKONV(300),DUMLOG(4),JUNITS(4,300,2),NUNITS,KUNITS        UNITS1   1
      INTEGER DUMLOG                                                            SUBTY1   1
      DIMENSION IUNITS(4,300)                                                   UNITS1   2
      EQUIVALENCE (IUNITS(1,1),JUNITS(1,1,1))                                   /IUNITS/ 4
      DIMENSION ISPN(7),IWFD(7),AX(64)                                          SUBTY8  57
      DIMENSION WFN1(5),WFN2(6)                                                 WFREP   19
      DATA WFN1/4HV0  ,4HV1  ,4HV2  ,4HW1  ,4HW2  /                             WFREP   20
      DATA WFN2/4HG0* ,4HG1* ,4HG2* ,4HG3* ,4HP1  ,4HP2  /                      WFREP   21
      DATA  IBLNK/4H    /                                                       WFREP   22
C                                                                               WFREP   23
C              FILL ISPN AND IWFD WITH SPACE AND WF POINTERS                    SUBTY8  58
C                                                                               WFREP   25
      IF(NSP.EQ.0) RETURN                                                       WFREP   26
C                                                                               WFREP   53
C              PRINT HEADING                                                    WFREP   54
C                                                                               WFREP   55
      NLEFT = NSP                                                               SUBTY8  59
      NCONT = 0                                                                 SUBTY8  60
   10 CONTINUE                                                                  WFREP   57
      WRITE(IOUTPT,1,ERR=99014)((ITITLE(I,J),I=1,10),J=1,2),                    WFREP   58
     1    (CLOCK(I),I=1,7),ICLOCK8,((ITITLE(I,J),I=1,10),J=3,5)                 PC     249
99014 CONTINUE                                                                  WFREP   60
    1 FORMAT(1H1,20A4,10X,7A4,4H RUN,I2/1H ,30A4)                               WFREP   61
      WRITE(IOUTPT,11)                                                          WFREP   62
   11 FORMAT(39H REPORT- LV-K  WEIGHTING FACTOR SUMMARY)                        WFREP   63
      IF(NCONT.GT.0) GO TO 15                                                   SUBTY8  61
      WRITE(IOUTPT,12)                                                          WFREP   65
   12 FORMAT(1X,130(1H-) /)                                                     WFREP   66
      GO TO 20                                                                  WFREP   67
   15 WRITE(IOUTPT,13)                                                          WFREP   68
   13 FORMAT(1X,111(1H-),11H(CONTINUED),8(1H-) /)                               WFREP   69
   20 CONTINUE                                                                  WFREP   70
C                                                                               WFREP   71
C              PRINT RESULTS                                                    WFREP   72
C                                                                               WFREP   73
      J2 = MIN0(NLEFT,7)                                                        SUBTY8  62
      DO J=1,J2                                                                 SUBTY8  63
          IRXSP = IOPCDT(14,JOPSP) + J + 7*NCONT - 1                            SUBTY8  64
          IVPSP = IREFTB(2,IRXSP) + IOPCDT(17,JOPSP)                            SUBTY8  65
     1            + 2*IOPCDT(16,JOPSP)                                          SUBTY8  66
          IWFSMX = IA(IVPSP+17)                                                 SUBTY8  67
          JWF = ISYMTB(12,IWFSMX)                                               SUBTY8  68
          IRXWF = IOPCDT(14,JOPWF) +JWF - 1                                     SUBTY8  69
          ISPN(J) = IREFTB(1,IRXSP)                                             SUBTY8  70
          IWFD(J) = IREFTB(2,IRXWF) + IOPCDT(17,JOPWF)                          SUBTY8  71
     1              + 2*IOPCDT(16,JOPWF)                                        SUBTY8  72
      END DO                                                                    SUBTY8  73
      WRITE(IOUTPT,29) ((ISYMTB(II,ISPN(J)),II=1,4),J=1,J2)                     SUBTY8  74
   29 FORMAT(' SP NAME--   ',7(4A4,1X))                                         SUBTY8  75
      WRITE(IOUTPT,30) ((ISYMTB(II,ISPN(J)),II=5,8),J=1,J2)                     SUBTY8  76
   30 FORMAT(13X,7(4A4,1X))                                                     SUBTY8  77
      WRITE(IOUTPT,31)                                                          WFREP   81
   31 FORMAT(/ 6H SOLAR / 6H -----)                                             WFREP   82
      DO 32 II=1,5                                                              WFREP   83
      WRITE(IOUTPT,35) WFN1(II),(AA(IWFD(J)+II+6),J=1,J2)                       SUBTY8  78
   35 FORMAT(1X,A4,7X,7(F9.5,8X))                                               WFREP   85
   32 CONTINUE                                                                  WFREP   86
C                                                                               WFREP   87
      WRITE(IOUTPT,40)                                                          WFREP   88
   40 FORMAT(/ 8H GENERAL / 9H LIGHTING)                                        WFREP   89
      WRITE(IOUTPT,41)                                                          WFREP   90
   41 FORMAT(9H --------)                                                       WFREP   91
      DO 42 II=1,5                                                              WFREP   92
      WRITE(IOUTPT,35) WFN1(II),(AA(IWFD(J)+II+11),J=1,J2)                      SUBTY8  79
   42 CONTINUE                                                                  WFREP   94
C                                                                               WFREP   95
      WRITE(IOUTPT,50)                                                          WFREP   96
   50 FORMAT(/ 5H TASK / 9H LIGHTING)                                           WFREP   97
      WRITE(IOUTPT,51)                                                          WFREP   98
   51 FORMAT(9H --------)                                                       WFREP   99
      DO 52 II=1,5                                                              WFREP  100
      WRITE(IOUTPT,35) WFN1(II),(AA(IWFD(J)+II+16),J=1,J2)                      SUBTY8  80
   52 CONTINUE                                                                  WFREP  102
C                                                                               WFREP  103
      WRITE(IOUTPT,60)                                                          WFREP  104
   60 FORMAT(/ 8H PEOPLE- / 10H EQUIPMENT)                                      WFREP  105
      WRITE(IOUTPT,61)                                                          WFREP  106
   61 FORMAT(10H ---------)                                                     WFREP  107
      DO 62 II=1,5                                                              WFREP  108
      WRITE(IOUTPT,35) WFN1(II),(AA(IWFD(J)+II+21),J=1,J2)                      SUBTY8  81
   62 CONTINUE                                                                  WFREP  110
C                                                                               WFREP  111
      WRITE(IOUTPT,70)                                                          WFREP  112
   70 FORMAT(/ 11H CONDUCTION)                                                  WFREP  113
      WRITE(IOUTPT,71)                                                          WFREP  114
   71 FORMAT(11H ----------)                                                    WFREP  115
      DO 72 II=1,5                                                              WFREP  116
      WRITE(IOUTPT,35) WFN1(II),(AA(IWFD(J)+II+26),J=1,J2)                      SUBTY8  82
   72 CONTINUE                                                                  WFREP  118
C                                                                               WFREP  119
      II     = 1                                                                WFREP  120
      IF (METIN.NE.METOUT)  II=2                                                WFREP  121
      WRITE(IOUTPT,80)(JUNITS(J,6,II),J=1,4)                                    WFREP  122
   80 FORMAT(/ 4H AIR / 5H TEMP ,5X,1H(,4A4,1H)  )                              WFREP  123
      WRITE(IOUTPT,81)                                                          WFREP  124
   81 FORMAT(5H ----)                                                           WFREP  125
      DO 82 II=1,6                                                              WFREP  126
      DO 83 J=1,J2                                                              SUBTY8  83
   83 AX(J)  = AA(IWFD(J)+II)                                                   SUBTY8  84
      IF (II.GT.4)  GOTO 84                                                     WFREP  129
      IF (METOUT.EQ.1)  CALL KDIV(AX,6,J2,0)                                    SUBTY8  85
   84 WRITE(IOUTPT,35) WFN2(II),(AX(J),J=1,J2)                                  SUBTY8  86
   82 CONTINUE                                                                  WFREP  132
C                                                                               WFREP  133
      IF (NLEFT.LE.7) GO TO 100                                                 SUBTY8  87
C                                                                               WFREP  135
C              PRINT CONTINUATION PAGE                                          WFREP  136
C                                                                               WFREP  137
      NCONT  = NCONT+1                                                          WFREP  138
      NLEFT = NLEFT - 7                                                         SUBTY8  88
      GO TO 10                                                                  WFREP  139
  100 CONTINUE                                                                  WFREP  140
      WRITE(IOUTPT,200)                                                         WFREP  141
  200 FORMAT(1H1)                                                               WFREP  142
      RETURN                                                                    WFREP  143
      END                                                                       WFREP  144
      SUBROUTINE WFMATG(MSP,IWFT,IRECAL)                                        CWF1   775
C                                                                               WFMATG   3
C              CALCULATES THE SEQUENCE OF HOURLY COOLING LOADS FOR A            WFMATG   4
C              ZONE WHICH IS GENERATED BY A UNIT PULSE OF HEAT FROM             WFMATG   5
C              SOLAR GAIN, PEOPLE/EQUIPMENT, GENERAL LIGHTING,                  WFMATG   6
C              TASK LIGHTING, OR CONDUCTION, --OR BY A UNIT INCREASE            WFMATG   7
C              IN AIR TEMPERATURE.  THE MATRIX RECURSION TECHNIQUE OF           WFMATG   8
C              Z. CUMALI IS USED.                                               WFMATG   9
C                                                                               WFMATG  10
C              CALLING PARAMETERS                                               WFMATG  11
C                                                                               WFMATG  12
C              IWFT = TYPE OF WEIGHTING FACTOR                                  WFMATG  13
C                 1 = SOLAR                                                     WFMATG  14
C                 2 = AIR TEMPERATURE                                           WFMATG  15
C                 3 = PEOPLE/EQUIPMENT                                          WFMATG  16
C                 4 = GENERAL LIGHTING                                          WFMATG  17
C                 5 = TASK LIGHTING                                             WFMATG  18
C                 6 = CONDUCTION                                                WFMATG  19
C              IRECAL = MATRIX PARAMETER RECALCULATION                          WFMATG  20
C                   0 = RECALCULATE                                             WFMATG  21
C                   1 = USE PREVIOUS VALUES                                     WFMATG  22
C                                                                               WFMATG  23
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /WFZDAT/  NW,NWP,LENWF,RINF,FWA,PFA,FLAR,IL,IFUR,MZ,              /WFZDAT/ 2
     1                  IZ,IFRN,MWFX,NWALLM,MWFQW,MWFG,MWFA,IWFERR,             /WFZDAT/ 3
     2                  MWFX1,MWFDET,MWFB,MWFC,MWFGS,NWMAX,RRADC,               /WFZDAT/ 4
     3                  AFRAD,ABSW,FLRFUR,RCONC,RFILM,NOPQ,FREM,SFFLR,          /WFZDAT/ 5
     4                  UAIW,NWFC(2,3),NWFS,ISPNAM(8)                           CWF1   143
C                                                                               WFMATG  26
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      COMMON  /WFCOOL/ NQS,CRS,QS(50),DET                                       /WFCOOL/ 2
      COMMON/WFFURN/RCONF,RRADF,CHWT(2),RZFUR(5,2),COMRF(2)                     /WFFURN/ 2
      COMMON/WFLITE/FRIL(5),FRILP(5)                                            /WFLITE/ 2
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
C                                                                               WFMATG  34
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      DIMENSION QUN(50)                                                         WFMATG  35
      SAVE NWALL,IRECUN,AT,NQUN,CRUN,FC,FR                                      -048   244
C                                                                               WFMATG  36
C                                                                               WFMATG  37
C                                                                               WFMATG  38
C              PRELIMINARY CALCULATIONS                                         WFMATG  39
C                                                                               WFMATG  40
      CALL PTRS(JOPSP,MSP,IRXSP,IDPSP,IAVPSP)                                   CWF1   778
      CRSV   = 0.0                                                              WFMATG  41
      NRH    = 50                                                               WFMATG  42
      IF(IRECAL.GT.0) GO TO 100                                                 WFMATG  43
      IRECUN = 0                                                                WFMATG  44
      NWALL  = NW                                                               WFMATG  45
      IF(IFRN.EQ.1) NWALL=NWALL+1                                               WFMATG  46
      QFLOOR = 0.0                                                              WFMATG  47
      AT     = 0.0                                                              WFMATG  48
C     TOTAL INSIDE SURFACE AREA (INCLUDING FURNITURE, IF ANY)                   WFMATG  49
      DO 10 I=1,NWALL                                                           WFMATG  50
   10 AT     = AT+AA(MWFX+(I-1)*LENWF)                                          WFMATG  51
C              CALCULATE NET SOLAR ON FLOOR (QFLOOR) INCLUDING                  WFMATG  52
C              FURNITURE AND SOLAR ON EACH SECTION OF FLOOR NOT COVERED         WFMATG  53
C              BY FURNITURE (ASSUMES EACH FLOOR SECTION HAS SAME                WFMATG  54
C              FRACTION (PFA) COVERED BY FURNITURE)                             WFMATG  55
      IF(IFRN.EQ.0) GO TO 12                                                    WFMATG  56
      DO 11 I=1,NW                                                              WFMATG  57
      ISP    = MWFX+(I-1)*LENWF                                                 WFMATG  58
      IF(IA(ISP+7).LT.6) GO TO 11                                               WFMATG  59
C              TOTAL SOLAR ON FLOOR, INCLUDING FURNITURE                        WFMATG  60
      QFLOOR = QFLOOR + AA(ISP+5)                                               WFMATG  61
C     SOLAR RADIATION ABSORBED BY THE PART OF THIS FLOOR SECTION NOT            WFMATG  62
C     COVERED BY FURNITURE                                                      WFMATG  63
      AA(ISP+5)=AA(ISP+5)*(1.-PFA)                                              WFMATG  64
   11 CONTINUE                                                                  WFMATG  65
C              SOLAR ON FURNITURE                                               WFMATG  66
      AA(MWFX+(NWALL-1)*LENWF+5)=QFLOOR*PFA                                     WFMATG  67
   12 CONTINUE                                                                  WFMATG  68
      IF(RINF.LE.0.0) RINF = 1.0E15                                             WFMATG  69
C                                                                               WFMATG  70
C              CALCULATE RADIATION CONDUCTORS                                   WFMATG  71
C                                                                               WFMATG  72
      DO 30 I=1,NWALL                                                           WFMATG  73
      ISP    = MWFX+(I-1)*LENWF                                                 WFMATG  74
      AA(MWFGS+I-1) = 0.0                                                       WFMATG  75
      DO 28 J=1,NWALL                                                           WFMATG  76
      JSP    = MWFX+(J-1)*LENWF                                                 WFMATG  77
      IJ1    = I+(J-1)*NWALL+MWFG-1                                             WFMATG  78
      ARAD   = AA(JSP)                                                          WFMATG  79
      IF (IFRN.EQ.1 .AND. J.EQ.NWALL) ARAD = AFRAD                              WFMATG  80
      IF(I.NE.J) GO TO 25                                                       WFMATG  81
      AA(IJ1) = 0.0                                                             WFMATG  82
      GO TO 28                                                                  WFMATG  83
C              THE RADIATION EXCHANGE MATRIX AA(IJ1) IS INITIALIZED             WFMATG  84
C              IN WFMAIN TO 1.0 AND ZEROED IN WFDATA FOR WINDOW-WALL,           WFMATG  85
C              DOOR-WALL, AND DOOR-WINDOW PAIRS WITH THE SAME PARENT            WFMATG  86
C              WALL.  (ALL OTHER SURFACE COMBINATIONS ARE ALLOWED TO            WFMATG  87
C              EXCHANGE RADIATION, EXCEPT A SURFACE IS NOT ALLOWED              WFMATG  88
C              TO EXCHANGE RADIATION WITH ITSELF)                               WFMATG  89
   25 AA(IJ1) = AA(IJ1) * ARAD / (AA(ISP+3)*AT)                                 WFMATG  90
   28 AA(MWFGS+I-1) = AA(MWFGS+I-1)+AA(IJ1)                                     WFMATG  91
   30 AA(ISP+8) = AA(ISP+5)                                                     WFMATG  92
   32 FORMAT(/(1X,1P5E15.6))                                                    WFMATG  93
C                                                                               WFMATG  94
C              SET UP MATRIX AND INVERT                                         WFMATG  95
C                                                                               WFMATG  96
      DO 50 I=1,NWALL                                                           WFMATG  97
      ISP    = MWFX+(I-1)*LENWF                                                 WFMATG  98
      ARAD   = AA(ISP)                                                          WFMATG  99
      IF (IFRN.EQ.1 .AND. I.EQ.NWALL) ARAD = AFRAD                              WFMATG 100
      DO 40 J=1,NWALL                                                           WFMATG 101
      IJ1    = I+(J-1)*NWALL+MWFG-1                                             WFMATG 102
      IJ2    = I+(J-1)*NWALL+MWFA-1                                             WFMATG 103
      IF(I.NE.J) GO TO 38                                                       WFMATG 104
      AA(IJ2) = AA(ISP)*(WFRZ(I,1)+1.0/AA(ISP+2)) + ARAD*AA(MWFGS+I-1)          WFMATG 105
      GO TO 40                                                                  WFMATG 106
   38 AA(IJ2) = -AA(ISP)*AA(IJ1)                                                WFMATG 107
   40 CONTINUE                                                                  WFMATG 108
   50 CONTINUE                                                                  WFMATG 109
      CALL WFINV(AA(MWFA),NWALL,NWALL,AA(MWFX1),AA(MWFDET))                     WFMATG 110
      IF(AA(MWFDET).GT.1.0E-12) GO TO 78                                        WFMATG 111
C              SINGULAR MATRIX                                                  WFMATG 112
      IWFERR = IWFERR+1                                                         WFMATG 113
      IF(MSGLVL.GT.1) THEN                                                      CWF4    86
         CALL MSG2(132,ISYMTB(1,IREFTB(1,IRXSP)),II,II,II)                      -038c    2
      ENDIF                                                                     CWF4    94
      RETURN                                                                    WFMATG 119
   78 CONTINUE                                                                  WFMATG 120
C                                                                               WFMATG 121
C              SET UP SOME PARAMETERS                                           WFMATG 122
C                                                                               WFMATG 123
  100 GO TO(220,240,260,260,260,260),IWFT                                       WFMATG 124
C              SOLAR WEIGHTING FACTORS                                          WFMATG 125
  220 TR     = 0.0                                                              WFMATG 126
      IF(IREPRT(35).EQ.1) WRITE(IOUTPT,32)(AA(MWFX+(I-1)*LENWF+8),              WFMATG 127
     1                                     I=1,NWALL)                           WFMATG 128
      GO TO 69                                                                  WFMATG 129
C              AIR TEMPERATURE WEIGHTING FACTORS                                WFMATG 130
  240 TR     = 1.0                                                              WFMATG 131
      DO 242 I=1,NWALL                                                          WFMATG 132
  242 AA(MWFX+(I-1)*LENWF+8) = 0.0                                              WFMATG 133
      IF(IREPRT(35).EQ.1) WRITE(IOUTPT,32)(AA(MWFX+(I-1)*LENWF+8),              WFMATG 134
     1                                     I=1,NWALL)                           WFMATG 135
      GO TO 69                                                                  WFMATG 136
C              SET UP UNIFORM QF FOR LIGHTING, PEOPLE/EQUIP, OR COND.           WFMATG 137
  260 IF(IRECUN.GT.0) GO TO 150                                                 WFMATG 138
      TR     = 0.0                                                              WFMATG 139
      DO 262 I=1,NW                                                             WFMATG 140
      ISP    = MWFX+(I-1)*LENWF                                                 WFMATG 141
C     APPORTION RADIATION ACCORDING TO SURFACE AREA DIVIDED BY                  WFMATG 142
C     TOTAL SURFACE AREA EXCLUDING FURNITURE                                    WFMATG 143
      AA(ISP+8) = AA(ISP) / (AT - AFRAD)                                        WFMATG 144
C     ADJUST FLOOR SECTIONS FOR FRACTION COVERED BY FURNITURE                   WFMATG 145
      IF(IA(ISP+7).LT.6.OR.IFRN.EQ.0) GO TO 262                                 WFMATG 146
      AA(ISP+8) = AA(ISP+8) * (1. - PFA)                                        WFMATG 147
  262 CONTINUE                                                                  WFMATG 148
      IF(IFRN.EQ.0) GO TO 265                                                   WFMATG 149
C              RADIATION ON FURNITURE                                           WFMATG 150
      AA(MWFX + (NWALL-1)*LENWF + 8) = FLRFUR * PFA / (AT-AFRAD)                WFMATG 151
C              GET FR AND FC FOR CONDUCTION WEIGHTING FACTORS                   WFMATG 152
  265 SUM    = 0.0                                                              WFMATG 153
      DO 268 I=1,NWALL                                                          WFMATG 154
      ISP    = MWFX+(I-1)*LENWF                                                 WFMATG 155
  268 SUM    = SUM+AA(ISP+8)*AA(ISP+2)/(AA(ISP+2)+AA(ISP+3))                    WFMATG 156
      FR     = SUM                                                              WFMATG 157
      FC     = 1.0-FR                                                           WFMATG 158
      IF(IREPRT(35).EQ.0) GO TO 269                                             WFMATG 159
      QFTOT  = 0.                                                               WFMATG 160
      DO 270 I=1,NWALL                                                          WFMATG 161
  270 QFTOT  = QFTOT + AA(MWFX+(I-1)*LENWF+8)                                   WFMATG 162
      WRITE(IOUTPT,32) (AA(MWFX+(I-1)*LENWF+8), I=1,NWALL)                      WFMATG 163
      WRITE(IOUTPT,33) QFTOT                                                    WFMATG 164
   33 FORMAT(/ 7H QFTOT=,F10.5 /)                                               WFMATG 165
  269 CONTINUE                                                                  WFMATG 166
C                                                                               WFMATG 167
C              FIRST HOUR                                                       WFMATG 168
C                                                                               WFMATG 169
   69 CONTINUE                                                                  WFMATG 170
      DO 70 I=1,NWALL                                                           WFMATG 171
      ISP    = MWFX+(I-1)*LENWF                                                 WFMATG 172
   70 AA(MWFB+I-1) = AA(ISP)*TR/AA(ISP+2) + AA(ISP+8)                           WFMATG 173
      CALL WFMPY(NWALL,NWALL,1,AA(MWFA),NWALL,AA(MWFB),                         WFMATG 174
     1  NWALL,AA(MWFX1),NWALL)                                                  WFMATG 175
      IF(IREPRT(35).EQ.1) WRITE(IOUTPT,32)(AA(MWFX1+K-1),K=1,NWALL)             WFMATG 176
      SUM    = 0.0                                                              WFMATG 177
      DO 75 I=1,NWALL                                                           WFMATG 178
      I1     = I+MWFQW-1                                                        WFMATG 179
      ISP    = MWFX+(I-1)*LENWF                                                 WFMATG 180
      AA(I1) = AA(ISP)*(AA(MWFX1+I-1)-TR)/AA(ISP+2)                             WFMATG 181
   75 SUM    = SUM+AA(I1)                                                       WFMATG 182
      QS(1) = SUM - TR*(1./RINF + UAIW)                                         WFMATG 183
      IF(IWFT.EQ.2) QS(1) = -QS(1)                                              WFMATG 184
C                                                                               WFMATG 185
C              SUBSEQUENT HOURS                                                 WFMATG 186
C                                                                               WFMATG 187
      DO 79 I=1,NWALL                                                           WFMATG 188
   79 AA(MWFX+(I-1)*LENWF+8) = 0.0                                              WFMATG 189
      DO 99 L=2,NRH                                                             WFMATG 190
      DO 85 I=1,NWALL                                                           WFMATG 191
      ISP    = MWFX+(I-1)*LENWF                                                 WFMATG 192
      AA(MWFC+I-1) = AA(MWFX1+I-1)*WFRZ(I,L)*AA(ISP)/AA(ISP+2)                  WFMATG 193
      L1     = L-1                                                              WFMATG 194
      IF(L1.LE.1) GO TO 85                                                      WFMATG 195
      DO 82 LP=2,L1                                                             WFMATG 196
      ILP    = I+(L-LP)*NWALL+MWFQW-1                                           WFMATG 197
   82 AA(MWFC+I-1) = AA(MWFC+I-1) - WFRZ(I,LP)*AA(ILP)                          WFMATG 198
   85 AA(MWFC+I-1) = AA(ISP+2)*AA(MWFC+I-1)                                     WFMATG 199
      IL1    = (L-1)*NWALL+MWFQW                                                WFMATG 200
      CALL WFMPY(NWALL,NWALL,1,AA(MWFA),NWALL,AA(MWFC),NWALL,                   WFMATG 201
     1  AA(IL1),NWALL)                                                          WFMATG 202
      SUM    = 0.0                                                              WFMATG 203
      DO 90 I=1,NWALL                                                           WFMATG 204
      IL2    = I+(L-1)*NWALL+MWFQW-1                                            WFMATG 205
      ISP    = MWFX+(I-1)*LENWF                                                 WFMATG 206
      AA(IL2) =                                                                 WFMATG 207
     1    AA(ISP)*AA(IL2)/AA(ISP+2)                                             WFMATG 208
   90 SUM    = SUM-AA(IL2)                                                      WFMATG 209
      QS(L)  = SUM                                                              WFMATG 210
      IF(IWFT.EQ.2) QS(L) = -QS(L)                                              WFMATG 211
      CRS    = QS(L)/QS(L-1)                                                    WFMATG 212
      IF(ABS((CRS-CRSV)/CRS).LT.1.0E-5.AND.L.GE.10) GO TO 120                   -042k6   1
C              CHECK ON L ABOVE REQUIRED TO GIVE SUFFICIENT                     WFMATG 214
C              TERMS FOR DECONVOLUTION (SEE SUBROUTINE WFDECN)                  WFMATG 215
      CRSV   = CRS                                                              WFMATG 216
   99 CONTINUE                                                                  WFMATG 217
      NQS    = NRH                                                              WFMATG 218
      GO TO 140                                                                 WFMATG 219
C                                                                               WFMATG 220
C              COMMON RATIO CONSTANT - END COOLING LOAD CALCULATION             WFMATG 221
C                                                                               WFMATG 222
  120 NQS    = L                                                                WFMATG 223
  140 IF(IWFT.LE.2) RETURN                                                      WFMATG 224
C                                                                               WFMATG 225
C              CALCULATE COOLING LOADS FOR PEOPLE/EQUIP, LIGHTING,              WFMATG 226
C              OR CONDUCTION                                                    WFMATG 227
C                                                                               WFMATG 228
      CRUN   = CRS                                                              -045a   15
      NQUN   = NQS                                                              -045a   16
      IRECUN = 1                                                                -045a   17
      DO  L=1,NQS                                                               -045a   18
        QUN(L) = QS(L)                                                          -045a   19
      ENDDO                                                                     -045a   20
  150 SELECT CASE (IWFT)                                                        -045a   21
      CASE (3,4,5)  ! people/eq, lighting, task lights                          -045a   22
c              weight factors will be 100% radiative; convective split          -045a   23
c              will be calc'd hourly                                            -045a   24
        DO  L=1,NQUN                                                            -045a   25
          QS(L) = QUN(L)                                                        -045a   26
        ENDDO                                                                   -045a   27
        CRS = CRUN                                                              -045a   28
        NQS = NQUN                                                              -045a   29
      CASE (6)  ! conduction                                                    -045a   30
        QS(1) = FC + FR*QUN(1)                                                  -045a   31
        DO  L=2,NQUN                                                            -045a   32
          QS(L) = FR*QUN(L)                                                     -045a   33
        ENDDO                                                                   -045a   34
        IF (IREPRT(35))  WRITE(IOUTPT,188) FR,FC                                -045a   35
  188   FORMAT(6H FR = ,1PE15.6,7X,5HFC = ,1PE15.6//)                           -045a   36
      END SELECT                                                                -045a   37
      RETURN                                                                    WFMATG 261
      END                                                                       WFMATG 262
      SUBROUTINE WFDECN(KW,NNU,NDE,V,W)                                         WFDECN   2
C                                                                               WFDECN   3
C              CALCULATES A SET OF WEIGHTING FACTORS BY DECONVOLVING            WFDECN   4
C              THE SEQUENCE OF COOLING LOADS, QS, CALCULATED BY WFMATG.         WFDECN   5
C              IT USES A SIMULTANEOUS SOLUTION METHOD.                          WFDECN   6
C                                                                               WFDECN   7
C                                                                               WFDECN   8
C              NNU IS THE NUMBER OF NUMERATOR TERMS REQUESTED                   WFDECN   9
C              NDE IS THE NUMBER OF DENOMINATOR TERMS REQUESTED                 WFDECN  10
C                                                                               WFDECN  11
C                                                                               WFDECN  12
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      COMMON  /WFCOOL/ NQS,CRS,QS(50),DET                                       /WFCOOL/ 2
      COMMON  /WFZDAT/  NW,NWP,LENWF,RINF,FWA,PFA,FLAR,IL,IFUR,MZ,              /WFZDAT/ 2
     1                  IZ,IFRN,MWFX,NWALLM,MWFQW,MWFG,MWFA,IWFERR,             /WFZDAT/ 3
     2                  MWFX1,MWFDET,MWFB,MWFC,MWFGS,NWMAX,RRADC,               /WFZDAT/ 4
     3                  AFRAD,ABSW,FLRFUR,RCONC,RFILM,NOPQ,FREM,SFFLR,          /WFZDAT/ 5
     4                  UAIW,NWFC(2,3),NWFS,ISPNAM(8)                           CWF1   143
C                                                                               WFDECN  19
C                                                                               WFDECN  20
      DIMENSION A(10,10),V(10),W(5)                                             WFDECN  21
C              EQUIVALENCE (A(1,1),COMMWK(1))                                   WFDECN  22
C                                                                               WFDECN  23
C                                                                               WFDECN  24
C                                                                               WFDECN  25
      NQTM1  = NQS-1                                                            WFDECN  26
C              -- COMMON RATIO                                                  WFDECN  27
      CR     = QS(NQS)/QS(NQTM1)                                                WFDECN  28
C              -- CALCULATION OF FRACTION LOSS TO OUTSIDE                       WFDECN  29
      SUM    = 0                                                                WFDECN  30
      DO 10 I=1,NQTM1                                                           WFDECN  31
   10 SUM    = SUM+QS(I)                                                        WFDECN  32
      FC     = SUM+QS(NQS)/(1.-CR)                                              WFDECN  33
      M      = NNU + NDE                                                        WFDECN  34
      MM1    = M - 1                                                            WFDECN  35
      NNUP1  = NNU + 1                                                          WFDECN  36
C              -- GENERATION OF THE COEFFICIENT MATRIX                          WFDECN  37
      DO 22 I=1,MM1                                                             WFDECN  38
      V(I)   = QS(I)                                                            WFDECN  39
      DO 21 J=1,NNU                                                             WFDECN  40
      A(I,J) = 0                                                                WFDECN  41
   21 IF(I.EQ.J) A(I,J)=1.                                                      WFDECN  42
      DO 22 J=NNUP1,M                                                           WFDECN  43
      K      = I-1-J+NNUP1                                                      WFDECN  44
      IF(K.GE.1) GO TO 23                                                       WFDECN  45
      A(I,J) = 0                                                                WFDECN  46
      GO TO 22                                                                  WFDECN  47
   23 A(I,J) = -QS(K)                                                           WFDECN  48
   22 CONTINUE                                                                  WFDECN  49
C     FOR SOLAR WEIGHTING FACTORS, A POOR FIT TO THE EXPONENTIAL TAIL           WFDECN  50
C     OF SOME COOLING LOAD SEQUENCES CAN BE IMPROVED BY REQUIRING THE           WFDECN  51
C     WEIGHTING FACTORS TO REPRODUCE THE INPUT COMMON RATIO (I.E.,              WFDECN  52
C     Q(N)=-W1*Q(N-1)-W2*Q(N-2), WITH CR=Q(N)/Q(N-1)=Q(N-1)/Q(N-2),             WFDECN  53
C     REQUIRES W1+W2/CR=-CR)                                                    WFDECN  54
      IF(KW.EQ.1.AND.M.EQ.5) THEN                                               WFDECN  55
        A(4,1)=0.                                                               WFDECN  56
        A(4,2)=0.                                                               WFDECN  57
        A(4,3)=0.                                                               WFDECN  58
        A(4,4)=1.                                                               WFDECN  59
        A(4,5)=1./CR                                                            WFDECN  60
        V(4)  =-CR                                                              WFDECN  61
      END IF                                                                    WFDECN  62
      DO 24 J=1,NNU                                                             WFDECN  63
   24 A(M,J) = 1.                                                               WFDECN  64
      DO 25 J=NNUP1,M                                                           WFDECN  65
   25 A(M,J) = -FC                                                              WFDECN  66
      V(M)   = FC                                                               WFDECN  67
C              -- CALCULATION OF WEIGHTING FACTORS                              WFDECN  68
      CALL WFLSS (M,1,10,A,V)                                                   WFDECN  69
C                                                                               WFDECN  70
      IF(IREPRT(35).NE.0) WRITE(IOUTPT,90) NNU,NDE,DET                          WFDECN  71
   90 FORMAT(/ 16H NNU,NDE,DETERM=,2I5,E15.5/)                                  WFDECN  72
C                                                                               WFDECN  73
C     RETURN IF DETERMINANT IS TOO SMALL.  WFGEN WILL THEN                      WFDECN  74
C     CALL WFDECN A SECOND TIME WITH A REDUCED NUMBER OF                        WFDECN  75
C     WEIGHTING FACTOR TERMS                                                    WFDECN  76
      IF(ABS(DET).LT.1.0E-12) RETURN                                            WFDECN  77
  120 CONTINUE                                                                  WFDECN  78
      DO 26 I=NNUP1,M                                                           WFDECN  79
      K      = I-NNUP1+1                                                        WFDECN  80
   26 W(K)   = V(I)                                                             WFDECN  81
C                                                                               WFDECN  82
C              COOLING LOAD SEQUENCE FROM WEIGHTING FACTORS                     WFDECN  83
C                                                                               WFDECN  84
      CALL WFQOUT (KW,NNU,NDE,NQS,V,W)                                          WFDECN  85
C              -- PRINT RESULTS                                                 WFDECN  86
      IF(IREPRT(35).LT.1) GO TO 103                                             WFDECN  87
      WRITE(IOUTPT,112)(V(I),I=1,NNU)                                           WFDECN  88
      WRITE(IOUTPT,113)(W(I),I=1,NDE)                                           WFDECN  89
      IF(KW.EQ.2) GO TO 102                                                     WFDECN  90
      F      = (V(1)+V(2)+V(3)) / (1.+W(1)+W(2))                                WFDECN  91
      WRITE(IOUTPT,101) F                                                       WFDECN  92
  101 FORMAT(/ 3H F=,F10.4 /)                                                   WFDECN  93
  102 CONTINUE                                                                  WFDECN  94
  103 RETURN                                                                    WFDECN  95
  112 FORMAT(// 27H NU0, NU1, ETC. FROM WFDECN /(1P5E15.6))                     WFDECN  96
  113 FORMAT(// 25H W1, W2, ETC. FROM WFDECN /(1P5E15.6))                       WFDECN  97
C                                                                               WFDECN  98
      END                                                                       WFDECN  99
      SUBROUTINE WFQOUT (KW,NNU,NDE,NQT,V,W)                                    WFQOUT   2
C                                                                               WFQOUT   3
C              RECALCULATES A SET OF COOLING LOADS                              WFQOUT   4
C              FROM THE WEIGHTING FACTORS DETERMINED BY WFDECN AND              WFQOUT   5
C              PRINTS THEM OUT FOR COMPARISON WITH THE COOLING LOADS            WFQOUT   6
C              INPUT TO WFDECN                                                  WFQOUT   7
C                                                                               WFQOUT   8
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      COMMON  /WFZDAT/  NW,NWP,LENWF,RINF,FWA,PFA,FLAR,IL,IFUR,MZ,              /WFZDAT/ 2
     1                  IZ,IFRN,MWFX,NWALLM,MWFQW,MWFG,MWFA,IWFERR,             /WFZDAT/ 3
     2                  MWFX1,MWFDET,MWFB,MWFC,MWFGS,NWMAX,RRADC,               /WFZDAT/ 4
     3                  AFRAD,ABSW,FLRFUR,RCONC,RFILM,NOPQ,FREM,SFFLR,          /WFZDAT/ 5
     4                  UAIW,NWFC(2,3),NWFS,ISPNAM(8)                           CWF1   143
      DIMENSION Q(50),V(10),W(5)                                                WFQOUT  13
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      IWFERR0 = IWFERR                                                          NEWEX2   6
      DO 1 I = 1,NQT                                                            NEWEX2   7
      ISAVE  = I                                                                WFQOUT  15
      Q(I)   = 0.                                                               WFQOUT  16
      DO 2 J = 1,NNU                                                            WFQOUT  17
      K      = I-J+1                                                            WFQOUT  18
      IF(K.NE.1)GO TO 2                                                         WFQOUT  19
      Q(I)   = Q(I)+V(J)                                                        WFQOUT  20
    2 CONTINUE                                                                  WFQOUT  21
      DO 3 J = 1,NDE                                                            WFQOUT  22
      IF((I-J).LT.1)GO TO 3                                                     WFQOUT  23
      Q(I)   = Q(I)-W(J)*Q(I-J)                                                 WFQOUT  24
    3 CONTINUE                                                                  WFQOUT  25
C              CHECK FOR UNPHYSICAL Q VALUE                                     WFQOUT  26
      IF(KW.EQ.2) THEN                                                          WFQOUT  27
C              ERROR IF QOUT IN AIR TEMP WF CALC GOES POSITIVE                  WFQOUT  28
      IF(I.GE.10.AND.Q(I).GT.0.001) GO TO 5                                     WFQOUT  29
      GO TO 1                                                                   WFQOUT  30
      ENDIF                                                                     WFQOUT  31
      IF (Q(I).LT.-.001) GO TO 5                                                WFQOUT  32
      IF (I.EQ.1) GO TO 1                                                       WFQOUT  33
      IF (Q(I).GT.Q(I-1)) GO TO 5                                               WFQOUT  34
      GO TO 1                                                                   WFQOUT  35
    5 CONTINUE                                                                  WFQOUT  36
C              ERROR CONDITION DETECTED                                         WFQOUT  37
      IWFERR = IWFERR + 1                                                       WFQOUT  38
    1 CONTINUE                                                                  WFQOUT  45
   10 CONTINUE                                                                  WFQOUT  46
      IF((IWFERR.gt. IWFERR0).and.(MSGLVL.GT.1)) THEN                           NEWEX2   8
         CALL MSG2(133,ISPNAM(1),II,II,II)                                      NEWEX2   9
      ENDIF                                                                     NEWEX2  10
      IF (IREPRT(35).EQ.1) WRITE(IOUTPT,100) (Q(II),II=1,ISAVE)                 WFQOUT  47
  100 FORMAT(// 26H COOLING LOADS FROM WFDECN /(1P5E15.6))                      WFQOUT  48
C              CHECK FOR UNPHYSICAL VALUE OF 1+W1+W2 FOR                        WFQOUT  49
C              AIR TEMP WEIGHTING FACTORS                                       WFQOUT  50
      IF(KW.EQ.2) THEN                                                          WFQOUT  51
        OPW1W2 = 1.                                                             WFQOUT  52
        DO JJ = 1,NDE                                                           WFQOUT  53
          OPW1W2 = OPW1W2 + W(JJ)                                               WFQOUT  54
        ENDDO                                                                   WFQOUT  55
        IF(OPW1W2.LE.0.) THEN                                                   WFQOUT  56
          IWFERR = IWFERR + 1                                                   WFQOUT  57
          IF(MSGLVL.GT.1) THEN                                                  CWF4   105
             CALL MSG2(134,ISPNAM(1),II,II,II)                                  ERR-01 765
          ENDIF                                                                 CWF4   113
        ENDIF                                                                   WFQOUT  64
      ENDIF                                                                     WFQOUT  65
      RETURN                                                                    WFQOUT  66
      END                                                                       WFQOUT  67
      SUBROUTINE WFMPY(N,M,L,A,IA,B,IB,C,IC)                                    WFMPY    2
C                                                                               WFMPY    3
C              MULTIPLIES MATRIX A BY MATRIX B TO GIVE MATRIX C                 WFMPY    4
C                                                                               WFMPY    5
      DOUBLE PRECISION WFDOT                                                    WFMPY    6
      DIMENSION A(IA,M),B(IB,L),C(IC,L)                                         WFMPY    7
      DO 11 J=1,L                                                               WFMPY    8
      DO 11 I=1,N                                                               WFMPY    9
   11 C(I,J) = REAL(WFDOT(M,A(I,1),IA,B(1,J),1))                                PC     250
      RETURN                                                                    WFMPY   11
      END                                                                       WFMPY   12
      SUBROUTINE WFINV(A,IA,IN,R,DET)                                           WFINV    2
C                                                                               WFINV    3
C              INVERTS MATRIX A                                                 WFINV    4
C                                                                               WFINV    5
      DIMENSION A(IA,IN),DET(1),R(1)                                            CWF1   790
      DOUBLE PRECISION WFDOT,S,SS                                               WFINV    7
      EQUIVALENCE(S,SS)                                                         WFINV    8
      N      = IN                                                               WFINV    9
C              FACTOR MATRIX                                                    WFINV   10
      IX     = 1                                                                WFINV   11
      LE     = N*IA                                                             WFINV   12
      IF(N.GT.1) GO TO 19                                                       WFINV   13
      DET(1) = A(1,1)                                                           WFINV   14
      IF( DET(1).EQ.0.) GO TO 98                                                WFINV   15
      A(1,1) = 1./A(1,1)                                                        WFINV   16
      RETURN                                                                    WFINV   17
   19 DO 20 NR=1,N                                                              WFINV   18
      MR     = NR-1                                                             WFINV   19
      MP     = NR+1                                                             WFINV   20
      T      = 0.                                                               WFINV   21
      DO 25 NT=NR,N                                                             WFINV   22
      S      = DBLE(A(NT,NR))                                                   WFINV   23
      IF(NR.EQ.1) GO TO 24                                                      WFINV   24
      S      = S-WFDOT(MR,A(NT,1),IA,A(IX,1),1)                                 WFINV   25
   24 R(NT)  = S                                                                WFINV   26
      IF(ABS(SS).LE.T) GO TO 25                                                 WFINV   27
      T      = ABS(SS)                                                          WFINV   28
      MX     = NT                                                               WFINV   29
   25 CONTINUE                                                                  WFINV   30
      IF(T.EQ.0.) GO TO 98                                                      WFINV   31
      IF(MX.EQ.NR) GO TO 30                                                     WFINV   32
C              PIVOT                                                            WFINV   33
      T      = R(NR)                                                            WFINV   34
      R(NR)  = R(MX)                                                            WFINV   35
      R(MX)  = T                                                                WFINV   36
      KX     = MX                                                               WFINV   37
      DO 27 J=NR,LE,IA                                                          WFINV   38
      T      = A(J,1)                                                           WFINV   39
      A(J,1) = A(KX,1)                                                          WFINV   40
      A(KX,1)=T                                                                 WFINV   41
   27 KX     = KX+IA                                                            WFINV   42
   30 T      = R(NR)                                                            WFINV   43
      A(NR,NR)=T                                                                WFINV   44
      R(NR)  = MX                                                               WFINV   45
      IF(NR.EQ.N) GO TO 40                                                      WFINV   46
      DO 35 NT=MP,N                                                             WFINV   47
      A(NT,NR)=R(NT)/T                                                          WFINV   48
      S      = DBLE(A(NR,NT))                                                   WFINV   49
      IF(MR.EQ.0)GOTO35                                                         WFINV   50
      S      = S-WFDOT(MR,A(NR,1),IA,A(1,NT),1)                                 WFINV   51
   35 A(NR,NT)=S                                                                WFINV   52
   40 CONTINUE                                                                  WFINV   53
      IX     = IX+IA                                                            WFINV   54
   20 CONTINUE                                                                  WFINV   55
      DET(1) = A(1,1)                                                           WFINV   56
      PROD   = A(1,1)                                                           WFINV   57
      NPROD  = 0                                                                WFINV   58
      DO 110 NR=2,N                                                             WFINV   59
      NE     = 0                                                                WFINV   60
      J      = NR-1                                                             WFINV   61
      DO 114 I=NR,N                                                             WFINV   62
      A(I,J) = -WFDOT(NE,A(NR,J),1,A(I,NR),IA) -A(I,J)                          WFINV   63
  114 NE     = NE+1                                                             WFINV   64
      PROD   = PROD*A(NR,NR)                                                    WFINV   65
10000 IF (ABS(PROD) .LT. 1.)  GO TO 10001                                       WFINV   66
      PROD   = PROD/10.                                                         WFINV   67
      NPROD  = NPROD + 1                                                        WFINV   68
      GO TO 10000                                                               WFINV   69
10001 IF (ABS(PROD) .GE. 0.) GO TO 10002                                        WFINV   70
      PROD   = PROD*10.                                                         WFINV   71
      NPROD  = NPROD - 1                                                        WFINV   72
      GO TO 10001                                                               WFINV   73
10002 CONTINUE                                                                  WFINV   74
  110 CONTINUE                                                                  WFINV   75
      S      = DBLE(1./A(N,N))                                                  WFINV   76
      A(N,N) = S                                                                WFINV   77
      DO 116 I=2,N                                                              WFINV   78
  116 A(N,I-1)=A(N,I-1)*S                                                       WFINV   79
      NE     = 1                                                                WFINV   80
      NC     = N-1                                                              WFINV   81
      NP     = N                                                                WFINV   82
      MC     = N-2                                                              WFINV   83
      DO 120 NR=2,N                                                             WFINV   84
      S      = DBLE(1./A(NC,NC))                                                WFINV   85
      IF(MC.LE.0) GO TO 126                                                     WFINV   86
      DO 124 IR=1,MC                                                            WFINV   87
  124 A(NC,IR)=S*(A(NC,IR)-WFDOT(NE,A(NC,NP),IA,A(NP,IR),1))                    WFINV   88
  126 A(NC,NC)=S*(  1.    -WFDOT(NE,A(NC,NP),IA,A(NP,NC),1))                    WFINV   89
      DO 128 IR=NP,N                                                            WFINV   90
      DET(IR) =-S*WFDOT(NE,A(NC,NP),IA,A(NP,IR),1)                              WFINV   91
  128 CONTINUE                                                                  WFINV   92
      DO 129 IR=NP,N                                                            WFINV   93
  129 A(NC,IR)=DET(IR)                                                          WFINV   94
      MC     = MC-1                                                             WFINV   95
      NC     = NC-1                                                             WFINV   96
      NP     = NP-1                                                             WFINV   97
  120 NE     = NE+1                                                             WFINV   98
      DO 140 IR=2,N                                                             WFINV   99
      J      = N-IR+1                                                           WFINV  100
      K      = R(J)                                                             WFINV  101
      IF(K.EQ.J) GO TO 140                                                      WFINV  102
      DO 144 I=1,N                                                              WFINV  103
      S      = DBLE(A(I,J))                                                     WFINV  104
      A(I,J) = A(I,K)                                                           WFINV  105
  144 A(I,K) = S                                                                WFINV  106
      DET(1) = -DET(1)                                                          WFINV  107
  140 CONTINUE                                                                  WFINV  108
      IF (NPROD .GT. -36)  GO TO 10010                                          WFINV  109
      PROD   = 0.                                                               WFINV  110
      GO TO 10020                                                               WFINV  111
10010 IF (NPROD .LT. 36)  GO TO 10011                                           WFINV  112
      PROD   = 1.0E36                                                           WFINV  113
      GO TO 10020                                                               WFINV  114
10011 IF(NPROD .NE. 0)  PROD = PROD*(10.**NPROD)                                WFINV  115
10020 IF (DET(1) .LT. 0.)  PROD = -PROD                                         WFINV  116
      DET(1) = PROD                                                             WFINV  117
      RETURN                                                                    WFINV  118
   98 CONTINUE                                                                  WFINV  119
      DET(1) = 0.                                                               WFINV  120
      RETURN                                                                    WFINV  121
      END                                                                       WFINV  122
      SUBROUTINE  WFLSS ( N,M,I,A,B )                                           WFLSS    2
C                                                                               WFLSS    3
C              SOLVES THE NON-SINGULAR MATRIX EQUATION AX=B                     WFLSS    4
C                                                                               WFLSS    5
      COMMON  /WFCOOL/ NQS,CRS,QS(50),DET                                       /WFCOOL/ 2
      DIMENSION A(I,N), B(I,M)                                                  WFLSS    7
      DOUBLE PRECISION S1,S2,WFDOT                                              WFLSS    8
      NN     = N                                                                WFLSS    9
      MM     = M                                                                WFLSS   10
      SN     = 1.                                                               WFLSS   11
      DO 9 J = 1,NN                                                             WFLSS   12
      L      = J-1                                                              WFLSS   13
      IF (J.EQ.NN) GO TO 7                                                      WFLSS   14
      T      = ABS(A(J,J))                                                      WFLSS   15
      M1     = J                                                                WFLSS   16
      M2     = J+1                                                              WFLSS   17
      DO 1 K = M2,NN                                                            WFLSS   18
      X      = ABS(A(K,J))                                                      WFLSS   19
      IF (X.LE.T) GO TO 1                                                       WFLSS   20
      T      = X                                                                WFLSS   21
      M1     = K                                                                WFLSS   22
    1 CONTINUE                                                                  WFLSS   23
      IF (M1.EQ.J) GO TO 4                                                      WFLSS   24
      DO 2 K = 1,NN                                                             WFLSS   25
      T      = A(J,K)                                                           WFLSS   26
      A(J,K) = A(M1,K)                                                          WFLSS   27
    2 A(M1,K)=T                                                                 WFLSS   28
      SN     = -SN                                                              WFLSS   29
      IF (MM.LE.0) GO TO 4                                                      WFLSS   30
      DO 3 K = 1,MM                                                             WFLSS   31
      T      = B(J,K)                                                           WFLSS   32
      B(J,K) = B(M1,K)                                                          WFLSS   33
    3 B(M1,K)=T                                                                 WFLSS   34
    4 IF (A(J,J).EQ.0.) GO TO 13                                                WFLSS   35
      DO 6 K = M2,NN                                                            WFLSS   36
      S1     = 0.                                                               WFLSS   37
      S2     = 0.                                                               WFLSS   38
      IF (L.EQ.0) GO TO 5                                                       WFLSS   39
      S1     = WFDOT(L,A(J,1),I,A(1,K),1)                                       WFLSS   40
    5 A(J,K) = (A(J,K)-S1)/A(J,J)                                               WFLSS   41
      S2     = WFDOT(J,A(K,1),I,A(1,M2),1)                                      WFLSS   42
    6 A(K,M2)=A(K,M2)-S2                                                        WFLSS   43
    7 IF (MM.LE.0) GO TO 9                                                      WFLSS   44
      IF (A(J,J).EQ.0.) GO TO 13                                                WFLSS   45
      DO 8 K = 1,MM                                                             WFLSS   46
      S1     = 0.                                                               WFLSS   47
      IF (L.EQ.0) GO TO 8                                                       WFLSS   48
      S1     = WFDOT(L,A(J,1),I,B(1,K),1)                                       WFLSS   49
    8 B(J,K) = (B(J,K)-S1)/A(J,J)                                               WFLSS   50
    9 CONTINUE                                                                  WFLSS   51
      DET    = A(1,1)*SN                                                        WFLSS   52
      IF (ABS(DET).LE.1.0E-12) GO TO 13                                         WFLSS   53
      IF (N.EQ.1) GO TO 15                                                      WFLSS   54
      DO 10 J=2,NN                                                              WFLSS   55
   10 DET    = DET*A(J,J)                                                       WFLSS   56
      IF (ABS(DET).LE.1.0E-12) GO TO 13                                         WFLSS   57
      IF (MM.EQ.0) GO TO 15                                                     WFLSS   58
      M3     = NN-1                                                             WFLSS   59
      DO 12 J=1,MM                                                              WFLSS   60
      DO 11 L=1,M3                                                              WFLSS   61
      M1     = NN-L                                                             WFLSS   62
      S1     = 0.                                                               WFLSS   63
      M2     = M1+1                                                             WFLSS   64
      K      = NN-M2+1                                                          WFLSS   65
      S1     = WFDOT(K,A(M1,M2),I,B(M2,J),1)                                    WFLSS   66
   11 B(M1,J)=B(M1,J)-S1                                                        WFLSS   67
   12 CONTINUE                                                                  WFLSS   68
   13 CONTINUE                                                                  WFLSS   69
   15 RETURN                                                                    WFLSS   70
      END                                                                       WFLSS   71
      SUBROUTINE WFRAD                                                          WFRAD    2
C                                                                               WFRAD    3
C              CALLED BY WFCALC.                                                CWF3    33
C              FOR EACH SPACE FINDS FRACTION OF LIGHT HEAT TO OTHER             WFRAD    5
C              SPACES THAT IS RADIATIVE. DETERMINES LIIGHTING TYPE, IL,         WFRAD    6
C              FOR LIGHTING CWF GENERATION.                                     WFRAD    7
C                                                                               WFRAD    8
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISPLST/ ISPLST(9999),ISPLOC(9999)                                 -048a    8
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON/WFLITE/FRIL(5),FRILP(5)                                            /WFLITE/ 2
      COMMON  /WFZDAT/  NW,NWP,LENWF,RINF,FWA,PFA,FLAR,IL,IFUR,MZ,              /WFZDAT/ 2
     1                  IZ,IFRN,MWFX,NWALLM,MWFQW,MWFG,MWFA,IWFERR,             /WFZDAT/ 3
     2                  MWFX1,MWFDET,MWFB,MWFC,MWFGS,NWMAX,RRADC,               /WFZDAT/ 4
     3                  AFRAD,ABSW,FLRFUR,RCONC,RFILM,NOPQ,FREM,SFFLR,          /WFZDAT/ 5
     4                  UAIW,NWFC(2,3),NWFS,ISPNAM(8)                           CWF1   143
      COMMON  /SPVALX/ IHP, IAP, IVP, ISHPP, IWP, IDPTHP, ISCP, IPRCAP,         /SPVALX/ 2
     1                 IWFP, ILTP, IINFMP, INZHP, IPLP, IPSP, ILKWP,            /SPVALX/ 3
     2                 ITKWP, IEKWP, IPAP, ILWSFP, ITWSFP, IPOLSP,              GEO4     1
     3                 IEQWFP, KWH, KWA, KWV, KWSHP, KWW, KWDPTH,               /SPVALX/ 5
     4                 KWSC, KWLT, KWINFM, KWNZH, KWPL, KWPS,                   /SPVALX/ 6
     5                 KWLKW, KWTKW, KWEKW, KWPA, KWLWSF, KWTWSF,               /SPVALX/ 7
     6                 KWEWSF, IFURTP, IFURFP, IFURWP, IFLRWP, KWWF,            /SPVALX/ 8
     7                 KWFLRW,ILTSP,NINFKY,INFKYP(20),DEFINF(10,4),             LTSYS1   2
     8                 ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM,             DFTEXP 197
     9                 ISPLOCP,ISPDIS,NSPDIS                                    DFTEXP 198
C                                                                               WFRAD   20
      COMMON /LMVALX/                                                           /LMVALX/ 2
     1  ILUMTYP,ILMPTYP,ILMPNO,IBALTYP,ILTGCU,IRADFR,ILUMOUT,IPOWIN,            /LMVALX/ 3
     2  IRCR0,IRCR5,IRCR10,IMAXLMP,ICONFIG,IACCAT,IACCONF,                      /LMVALX/ 4
     3  ILMPCAT,ILMPLUM,ILMPPOW,ILMPDPR,ACF(9,6),PCF(9,6)                       /LMVALX/ 5
      DIMENSION ELECILL(5),POWTOT(5),XNOLUM(5)                                  LTSYS4 188
C              ZERO SPACE NSAVE VARIABLES FOR ACCUMULATING LIGHT HEAT           LTSYS4 189
C              TO OTHER SPACES                                                  WFRAD   22
C                                                                               WFRAD   23
      DO IZ = 1,NSP                                                             WFRAD   24
         CALL PTRS(JOPSP,IZ,IRXSP,IDPSP,IAVPSP)                                 WFRAD   25
         AA(IDPSP+7) = 0.                                                       WFRAD   26
         AA(IDPSP+8) = 0.                                                       WFRAD   27
      ENDDO                                                                     WFRAD   28
C                                                                               WFRAD   29
C              LOOP THRU SPACES TO DETERMINE FRACTION OF LIGHT HEAT             WFRAD   30
C              TO OTHER SPACES THAT IS RADIATIVE. FOR SPACES WITH CWF           WFRAD   31
C              (FLOOR-WEIGHT=0) SAVE RADIATIVE FRACTION IN SPACE NSAVE          WFRAD   32
C              AREA FOR USE BY CWF CALCULATION.                                 WFRAD   33
C                                                                               WFRAD   34
      DO 600 IZ = 1,NSP                                                         WFRAD   35
C              DO CALCULATION IN THE SPACE ORDER GIVEN BY ISPLST                WFRAD   36
C              ISPLST CONTAINS REORDERED ORDINAL SPACE NUMBER                   WFRAD   37
      CALL PTRS(JOPSP,ISPLST(IZ),IRXSP,IDPSP,IAVPSP)                            WFRAD   38
C              MAX HEAT FROM LIGHTS = LIGHTING-KW + LTG W/SF*FLOOR AREA         WFRAD   39
C              (METRIC CONVERSION NOT REQUIRED SINCE ZLTEL, ZLTHT, ZLTHTP       WFRAD   40
C               USED BELOW TO CALCULATE RATIOS)                                 WFRAD   41
      FLRWT = AA(IAVPSP+IFLRWP)                                                 OUT1    54
      IF(NOVAL(AA(IAVPSP+ILTGSYS)).EQ.0) THEN                                   DFTEX31095
         ZLTEL = 0.                                                             LTSYS1 294
         DO ILW = 1,5                                                           LTSYS1 295
            ZLTEL = ZLTEL + AMAX1(0.,AA(IAVPSP+58+ILW-1))*1000 +                LTSYS1 296
     1        AMAX1(0.,AA(IAVPSP+91+ILW-1))*AA(IAVPSP+6)                        LTSYS1 297
         ENDDO                                                                  LTSYS1 298
      ENDIF                                                                     LTSYS1 299
      IWFPTR = IABS(IA(IAVPSP+17))                                              LTSYS1 300
C              LIGHTING TYPE                                                    LTSYS1 301
      JSYM = IA(IAVPSP+45)                                                      LTSYS1 302
      IL = ISYMTB(12,JSYM)                                                      LTSYS1 303
C              IF LIGHTING-SYSTEM DEFINED, GET ELEC POWER FOR                   LTSYS1 304
C              ALL LUMINAIRES (ZLTEL) AND LIGHTING TYPE FOR                     LTSYS1 305
C              FIRST LUMINAIRE TYPE                                             LTSYS1 306
      IF(NOVAL(AA(IAVPSP+ILTGSYS)).EQ.0) GO TO 400                              DFTEX31096
      CALL SPACELTG(2,ISPLST(IZ),ELECILL,POWTOT,XNOLUM,                         FIX4    71
     1                   ELECILTOT,ZLTEL)                                       LTSYS4 191
      INLTGS = ISYMTB(12,IA(IAVPSP+ILTGSYS))                                    LTSYS1 309
      CALL PTRS(JOPLTGS,INLTGS,IRXLTGS,IDPLTGS,IAVPLTGS)                        LTSYS1 310
C              LTG-CALC-METHOD = LUMENS-POWER so can't get data                 -042L2   2
      IF( (NOVAL(IA(IAVPLTGS+21)).EQ.0)  .OR.                                   -042L2   3
     $     (ISYMTB(12,IA(IAVPLTGS+21)).EQ.1) )  GO TO 400                       -042L2   4
C               LUMINAIRE TYPE DATA FOR LIGHTING SYSTEM                         LTSYS1 311
      NLUMTY = ISYMTB(12,IA(IAVPLTGS+ILUMTYP))                                  LTSYS1 312
      CALL PTRS(JOPLUMT,NLUMTY,IRXLUMT,IDPLUMT,IAVPLUMT)                        LTSYS1 313
      IF(NOVAL(AA(IAVPLTGS+ILMPTYP)).EQ.0) THEN                                 DFTEX31097
C               LAMP TYPE NOT DEFINED; GET LUMEN OUTPUT AND POWER INPUT         LTSYS1 315
C               PER LUMINAIRE FROM LUM-LAMP-LUMENS AND LUM-POWER-IN             LTSYS1 316
         OUTLUMP =  AA(IAVPLTGS+25)                                             LTSYS1 317
         POWPLUM  = AA(IAVPLTGS+26)                                             LTSYS1 318
C               IF LUMINAIRE-CONFIG = RECESS-VENTED, LIGHTING-TYPE =            LTSYS1 319
C                  REC-FLUOR-RV (RADFRC = .59)                                  LTSYS1 320
C               OTHERWISE, IF LUMENS/WATT < 40, LIGHTING-TYPE = INCANDESCENT    LTSYS1 321
C                  (RADFRC = .71)                                               LTSYS1 322
C               OTHERWISE LIGHTING-TYPE = REC-FLUOR-NV (RADFRC = .67)           LTSYS1 323
C               LUMINAIRE CONFIGURATION                                         LTSYS1 324
         ILUMCON = ISYMTB(12,IA(IAVPLTGS+ICONFIG))                              LTSYS1 325
         XLUMEFF = OUTLUMP/(POWPLUM+0.0001)                                     LTSYS1 326
         IL = 5                                                                 LTSYS1 327
         IF(ILUMCON.EQ.2) THEN                                                  LTSYS1 328
            IL = 2                                                              LTSYS1 329
         ELSE                                                                   LTSYS1 330
            IF(XLUMEFF.LE.40.) IL = 4                                           LTSYS1 331
         ENDIF                                                                  LTSYS1 332
      ELSE                                                                      LTSYS1 333
C               LAMP TYPE DEFINED; GET LUMEN OUT AND POWER IN                   LTSYS1 334
         NLMPTY = ISYMTB(12,IA(IAVPLTGS+ILMPTYP))                               LTSYS1 335
         CALL PTRS(JOPLMPT,NLMPTY,IRXLMPT,IDPLMPT,IAVPLMPT)                     LTSYS1 336
C               LAMP CATEGORY (FULL-SIZE FLUORESCENT, ETC.)                     LTSYS1 337
         ILAMCAT = ISYMTB(12,IA(IAVPLMPT+ILMPCAT))                              LTSYS1 338
C               LUMINAIRE CONFIGURATION (RECESS-STATIC, ETC.)                   LTSYS1 339
         ILUMCON = ISYMTB(12,IA(IAVPLTGS+ICONFIG))                              LTSYS1 340
         IL = 5                                                                 LTSYS1 341
         IF(ILUMCON.EQ.2) THEN                                                  LTSYS1 342
           IL = 2                                                               LTSYS1 343
         ELSE                                                                   LTSYS1 344
           IF(ILAMCAT.EQ.3.OR.ILAMCAT.EQ.4) IL = 4                              LTSYS1 345
         ENDIF                                                                  LTSYS1 346
      ENDIF                                                                     LTSYS1 347
  400 CONTINUE                                                                  LTSYS1 348
      IWFPTR = IA(IAVPSP+17)                                                    CWF3    36
      MWF = ISYMTB(12,IWFPTR)                                                   CWF3    37
C              SKIP IF PLENUM OR UNCONDITIONED ZONE                             CWF3    38
      IF(ISYMTB(12,IA(IAVPSP+18)).GT.1) GO TO 560                               WFRAD   49
C              USE DEFAULT RADIATIVE FRACTION, UNLESS LIGHT-RAD-FRAC DEFINED    WFRAD   50
      RFRACP = FRILP(IL)                                                        WFRAD   51
      CALL PTRS(JOPWF,MWF,IRXWF,IDPWF,IAVPWF)                                   CWF3    39
C              CHECK LIGHT-RAD-FRAC AND FLOOR-WEIGHT                            CWF3    40
      IF (AA(IAVPSP+142).GT.0.0.AND.FLRWT.EQ.0.) RFRACP=AA(IAVPSP+142)          LTSYS1 349
C              SKIP IF NO LIGHT-HEAT-TO SPACE DEFINED                           WFRAD   58
      IF(NOVAL(AA(IAVPSP+137)).EQ.0) GO TO 555                                  DFTEX31098
C              POINTER TO SPACE RECEIVING HEAT FROM LIGHTS                      WFRAD   60
      ISLTS = ISYMTB(12,IA(IAVPSP+137))                                         LTSYS1 351
      CALL PTRS(JOPSP,ISLTS,IRXLTS,IDPLTS,IAVPLTS)                              WFRAD   62
C              ACCUMULATE LIGHT HEAT TO PLENUM FROM ALL SPACES USING            WFRAD   63
C              THE SAME PLENUM                                                  WFRAD   64
      ZLTHTP = ZLTEL * AA(IAVPSP+127) * AA(IAVPSP+8)                            LTSYS1 352
      AA(IDPLTS+7) = AA(IDPLTS+7) + ZLTHTP * RFRACP                             WFRAD   66
      AA(IDPLTS+8) = AA(IDPLTS+8) + ZLTHTP                                      WFRAD   67
  555 IF(FLRWT.GT.0.) GO TO 600                                                 CWF3    42
      AVRF   = FRIL(IL)                                                         WFRAD   69
C              FOR CUSTOM WEIGHTING FACTORS IN CONDITIONED SPACE                WFRAD   71
      IF(AA(IAVPSP+142).GT.0.0) AVRF = AA(IAVPSP+142)                           LTSYS1 353
      GO TO 599                                                                 WFRAD   73
C              FOR PLENUM OR UNCONDITIONED ZONES                                WFRAD   74
  560 RFRACZ = FRIL(IL)                                                         WFRAD   75
      RFRCZ1 = RFRACZ                                                           WFRAD   76
      IF (AA(IAVPSP+142).GT.0.0.AND.FLRWT.EQ.0.) RFRCZ1 = AA(IAVPSP+142)        LTSYS1 354
      ZLTHT  = ZLTEL*AA(IAVPSP+63)                                              LTSYS1 355
      RADFRC = AA(IDPSP+7) + ZLTHT * RFRCZ1                                     WFRAD   81
      RADSUM = AA(IDPSP+8) + ZLTHT                                              WFRAD   82
      AVRF   = 1.0                                                              WFRAD   83
      IF(RADSUM.NE.0.0) AVRF=RADFRC/RADSUM                                      WFRAD   84
  599 AA(IDPSP+6) = AVRF                                                        WFRAD   85
  600 CONTINUE                                                                  WFRAD   86
      RETURN                                                                    WFRAD   87
      END                                                                       WFRAD   88
       DOUBLE PRECISION FUNCTION WFDOT(N,X,IX,Y,IY)                             WFDOT    2
C                                                                               WFDOT    3
C              CALCULATES THE INNER PRODUCT OF TWO REAL VECTORS, I.E.           WFDOT    4
C                                                                               WFDOT    5
C              WFDOT = SUMMATION  X(1+(I-1)*IX) * Y(1+(I-1)*IY)                 WFDOT    6
C                 I = 1,2,...,N                                                 WFDOT    7
C                                                                               WFDOT    8
C                                                                               WFDOT    9
C              THUS IX IS THE MEMORY SPACING BETWEEN ELEMENTS OF THE            WFDOT   10
C              FIRST VECTOR AND IY IS THE MEMORY SPACING BETWEEN                WFDOT   11
C              ELEMENTS OF THE SECOND VECTOR.                                   WFDOT   12
C              THE ELEMENTS OF X AND Y ARE SINGLE PRECISION, BUT THE SUM        WFDOT   13
C              IS ACCUMULATED IN DOUBLE PRECISION.                              WFDOT   14
       DOUBLE PRECISION SUM                                                     WFDOT   15
C              IF N .LE. 0 RESULT IS ZERO                                       WFDOT   16
      DIMENSION X(1),Y(1)                                                       WFDOT   17
      IF(N.LE.0) GO TO 20                                                       WFDOT   18
      SUM    = 0.                                                               WFDOT   19
      NX     = IX                                                               WFDOT   20
      NY     = IY                                                               WFDOT   21
      J      = 1                                                                WFDOT   22
      K      = 1                                                                WFDOT   23
      DO 10 I=1,N                                                               WFDOT   24
      SUM    = SUM+DBLE(X(J)*Y(K))                                              PC     251
      J      = J+NX                                                             WFDOT   26
   10 K      = K+NY                                                             WFDOT   27
      WFDOT  = SUM                                                              WFDOT   28
      RETURN                                                                    WFDOT   29
   20 WFDOT  = 0.                                                               WFDOT   30
      RETURN                                                                    WFDOT   31
      END                                                                       WFDOT   32
       SUBROUTINE SDL                                                           SDL      2
      RETURN                                                                    SDL    145
      END                                                                       SDL    146
      SUBROUTINE CFOUT                                                          CFOUT    2
C                                                                               CFOUT    3
C                                                                               CFOUT    4
C                            THIS ROUTINE WRITES THE CURVE-FIT                  CFOUT    5
C                            BLOCK TO THE STANDARD FILE                         CFOUT    6
C                                                                               CFOUT    7
C                                                                               CFOUT    8
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON  /CNSTNT/ IZERO,IONE,IBLANK(8),DTOR,PIOVR2,PIOVR4                  CWF1     3
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /JOPS  / JSOP,JZOP,JSROP,JCFOP,ISSOPS(7),IZSOPS(3)                 -048b   23
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON  /PTRSL/  LENGTH,NVECT,NSCHED,NWF,NWPAR,NCONS,NGT,                 /PTRSL/  2
     1                  NGEO, NGSHAD, NWIN, NDOOR, NEW, NUG, NSP, NIWP,         /PTRSL/  3
     2                  NIW,NFL,NWL,ISCB,IWFB,IWPB,ICB1,ICB2,IGTB,IGEOB,        BLIND    6
     3                  ISHADB,IWINB, IDRB, IEWB, IUGB, ISPB, IIWPB,            BLIND    7
     4                  IIWB,IFLB,IWLB,NSHTOT,NEWshade, Icv,Ncv,Lcv,            -045a    1
     5                  xPTRSL                                                  -045a    2
      DIMENSION NCOMP(17), IBLKB(17)                                            BLIND    9
      EQUIVALENCE (NCOMP(1),NVECT),(IBLKB(1),ISCB)                              /PTRSL/  7
      EQUIVALENCE (ICB2,ICONSB)                                                 /PTRSL/  8
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      DIMENSION MAPTYP(15)                                                      DFTEX31101
      DATA MAPTYP /1, 2, 3, 4, 5,                                               Chlr1    6
     &             2, 3, 4, 4, 4,                                               Chlr1    7
     &             5, 4, 3, 4, 0/                                               Chlr1    8
      Ncv   = IOPCDT(13,JCFOP)     ! number of curves                           -045a   41
      Lcv   = <+cv~Len>            ! length of Jcv block                        -045a   42
      IF (Ncv .eq. 0)  GOTO 2000                                                -045a   43
      IKW   = IOPCDT(9,JCFOP)                                                   -045a   44
      NKW   = IOPCDT(10,JCFOP)                                                  -045a   45
      NSAVE = IOPCDT(17,JCFOP)                                                  -045a   46
      LVAL  = IOPCDT(16,JCFOP)                                                  -045a   47
      IST   = IAX + 1               ! where record starts                       -045a   48
      LEN   = Ncv*Lcv               ! total length of record                    -045a   49
      CALL CKAA(IA,LEN)                                                         -045a   50
      CALL FILLN(0,IA(IST),LEN)                                                 -045a   51
                                                                                -045a   52
c              Process each curve                                               -045a   53
      DO  Icrv=1,Ncv                                                            -045a   54
        IRX    = IOPCDT(14,JCFOP) + Icrv - 1                                    -045a   55
        IN     = IREFTB(1,IRX)      ! curve name                                -045a   56
        IDP    = IREFTB(2,IRX)      ! curve data                                -045a   57
        IPT    = IAX + (Icrv-1)*Lcv ! where next data item goes                 -045a   58
        IAVPTR = MVTOSM(IRX,JCFOP,0)                                            -045a   59
        CALL SYMFIL(ISYMTB,KONTXT(1,IKW),NKW-3,IA(IAVPTR+1))                    -045a   60
c              move name to output record (8 words)                             -045a   61
        CALL MOVEN(ISYMTB(1,IN),IA(IPT+1),8)                                    -045a   62
c              translate TYPE and move to output record                         -045a   63
        IF (IA(IAVPTR+1) .ne. 0) THEN                                           -045a   64
          IA(IPT+9) = MAPTYP(IA(IAVPTR+1))                                      -045a   65
        ELSE                                                                    -045a   66
          IA(IPT+9) = 0                                                         -045a   67
        ENDIF                                                                   -045a   68
c              move keyword values starting at output-min (3) thru              -045a   69
c              coefficients (10); 8 total                                       -045a   70
        CALL MOVEN(AA(IAVPTR+3),AA(IPT+10),8)                                   -045a   71
      ENDDO                                                                     -045a   72
                                                                                -045a   73
      WRITE (ISTNDF) Ncv,LEN                                                    -045a   74
      CALL WRITEN (ISTNDF,IA(IST),LEN)                                          CRV1   131
      IF(IREPRT(32) .EQ. 1)                                                     CRV1   132
     1   CALL DUMPIT(20HCURVE-FIT            ,IA(IST),LEN)                      CRV1   133
      GO TO 5000                                                                CRV1   134
 2000 WRITE (ISTNDF) IZERO,IONE                                                 CRV1   135
      WRITE (ISTNDF) IZERO                                                      CRV1   136
 5000 RETURN                                                                    CRV1   137
      END                                                                       CFOUT   73
      BLOCK DATA  DATSDL                                                        DATSDL   2
C                                                                               DATSDL   3
C                   BLOCK DATA ASIGNMENTS                                       DATSDL   4
C                                                                               DATSDL   5
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               DATSDL   7
      COMMON /EPTRS /  IKCZ,IVCZ,IKRAP,IVRAP,IKDZ,IVDZ                          HVAC28  86
      COMMON /EZPTRS/  IKTT,IVTT,IKRZB,IVRZB,IKIAZ,IVIAZ,IKS,IVS                -036    18
      COMMON /ISVS  / ISSVPS(7),IZSVPS(3)                                       -045a   38
      COMMON /JOPS  / JSOP,JZOP,JSROP,JCFOP,ISSOPS(7),IZSOPS(3)                 -048b   23
      COMMON  /PTRSS / IZ,IS,IP,IATT,IEND,                                      -045a   39
     1                 NVECT,NSCHED,NZONE,NSYS,NPLANT,                          /PTRSS/  3
     2                 LPR,NSS,NZD,NCZD,ISYLEN,IZLEN,IZN,ISN,                   BIGNA2  40
     &                 NSSx,NZDx                                                HR     142
C              SET COMPONET BLOCK LENGTHS (SEE READSS IN SYSTEMS)               DATSDL 115
C                    LPR  -  length of BUILDING-HVAC block                      BIGNA2  42
C                    NSS  -            SYSTEM                                   DATSDL 117
C                    NZD  -            ZONE BLOCK WITHIN SYSTEM                 DATSDL 118
C                    NCZD -            ZONE BLOCK                               DATSDL 119
C---  find out LPR, NZD, NCZD  values from EDTT printout                        BIGNA2  43
C---           LPR : <==LPR==> ,  NZD : <==NZD==> ,  NCZD : <==NCZD==>          BIGNA2  44
C---  find out NSS  value from EDTT printout                                    DATSDL 122
C---           NSS : <==NSS==>  ,  see also INITS.56                            DATSDL 123
      DATA LPR   /500/                                                          BIGNA2  45
C                ====>  the following len's must be changed in INITS as well    DATSDL 125
     $    ,NCZD  /<+#NCZD>/                                                     IcRink  23
C                                                                               DATSDL 129
C              INITIALIZE IOPCDT POINTERS                                       DATSDL 130
C              JDSOP = DAY-SCHEDULE                                             DATSDL 131
C              JSCOP = SCHEDULE                                                 DATSDL 132
C              JRBOP = REPORT-BLOCK                                             DATSDL 133
C              JHROP = HOURLY-REPORT                                            DATSDL 134
C              JZOP  = ZONE                                                     DATSDL 136
C              JSROP = SYSTEMS-REPORT                                           DATSDL 137
C              JCFOP = CURVE-FIT                                                DATSDL 138
C              ISSOPS = SYSTEM SUB-COMMANDS                                     DATSDL 139
C              IZSOPS = ZONE   SUB-COMMANDS                                     DATSDL 140
      DATA JSOP  /48/                                                           HVAC   103
     $    ,JZOP  /55/                                                           HVAC   104
     $    ,JSROP /59/                                                           HVAC   105
     $    ,JCFOP /61/                                                           HVAC   107
     $    ,ISSOPS/49,50,51,52,53,54,0/                                          HVAC   108
     $    ,IZSOPS/56,57,58/                                                     HVAC   109
C              INITIALIZE LIST KEYWORD VALUE ARRAY START POSITIONS              DATSDL 153
C              ISSVPS= SUB-COMMANDS IN SYSTEM                                   DATSDL 157
C              IZSVPS= SUB-COMMANDS IN ZONE                                     DATSDL 158
     $    ,ISSVPS/2,3,4,5,6,7,0/                                                DATSDL 162
     $    ,IZSVPS/2,3,4/                                                        DATSDL 163
      DATA                                                                      DFTEX31109
     $     IKRAP /17/                                                           DFTEX31110
     $    ,IKCZ  /373/                                                          DFTEX31111
     $    ,IKDZ  /349/                                                          HVAC28  87
      DATA                                                                      DFTEX31112
     $     IKIAZ  /75/                                                          -036    19
     $    ,IKTT   /73/                                                          DFTEX31114
     $    ,IKRZB  /77/                                                          DFTEX31115
     $    ,IKS   /144/                                                          DFTEX31116
      END                                                                       DATSDL 694
      SUBROUTINE  DRSIN(JREF)                                                   REFTB1 375
C                                                                               DRSIN    3
C                        DRSIN PROCESSES THE DAY-RESET-SCHED COMMAND            DRSIN    4
C                        DRSIN USES .... WORDS OF COMMWK                        DRSIN    5
C                                                                               DRSIN    6
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               DRSIN    8
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /RSCHED/ NDRS(200), NRS(100)                                       /RSCHED/ 2
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION KWD(16,10),DUM1(2),DUM2(2),DUM3(2),DUM4(2),                     KEYSIZ  61
     1                    DUM5(2),DUM6(2),DUM7(2),DUM8(2)                       DRSIN   19
      DIMENSION DUM9(2)                                                         4XAA   504
      EQUIVALENCE (KWD(10,2),DUM1(1)),(KWD(10,3),DUM2(1)),                      ALPHA2 159
     1            (KWD(10,4),DUM3(1)),(KWD(10,5),DUM4(1))                       ALPHA2 160
     2           ,(KWD(10,6),DUM5(1)),(KWD(10,7),DUM6(1)),                      ALPHA2 161
     3            (KWD(10,8),DUM7(1)),(KWD(10,9),DUM8(1))                       ALPHA2 162
      EQUIVALENCE (KWD(10,10),DUM9(1))                                          4XAA   505
      DATA      KWD /                                                           DRSIN   24
     + 4HTYPE,4H    ,4H    ,4H    ,4H    ,4H    ,0,2,1,142,0,1,4*0,             KEYSIZ  62
     1 4HOUTS,4HIDE-,4HHI  ,4H    ,4HO-H ,4H    ,8,1,1,-20,120,2,4*0,           KEYSIZ  63
     2 4HOUTS,4HIDE-,4HLO  ,4H    ,4HO-L ,4H    ,8,1,1,-20,120,3,4*0,           KEYSIZ  64
     3 4HSUPP,4HLY-H,4HI   ,4H    ,4HS-H ,4H    ,1,1,1,0,120,4,4*0,             KEYSIZ  65
     4 4HSUPP,4HLY-L,4HO   ,4H    ,4HS-L ,4H    ,1,1,1,0,120,5,4*0,             KEYSIZ  66
     5 4HSUPP,4HLY-H,4HI-TE,4HMP  ,4HS-H-,4HT   ,1,1,1,0,120,6,4*0,             KEYSIZ  67
     6 4HSUPP,4HLY-L,4HO-TE,4HMP  ,4HS-L-,4HT   ,1,1,1,0,120,7,4*0,             KEYSIZ  68
     7 4HSUPP,4HLY-H,4HI-RA,4HTIO ,4HS-H-,4HR   ,1,1,1,0,120,8,4*0,             KEYSIZ  69
     8 4HSUPP,4HLY-L,4HO-RA,4HTIO ,4HS-L-,4HR   ,1,1,1,0,120,9,4*0,             4XAA   506
     9 4HZZZZ,4H    ,4H    ,4H    ,4H    ,4H    ,1,1,18,0,120,10,4*0 /          4XAA   507
      DATA  KVRT/4HKVRT/                                                        DRSIN   33
      DATA ISTYPE / 423 /                                                       4XAA   508
      DUM1(1) = -20.                                                            DRSIN   34
      DUM1(2) = 120.                                                            DRSIN   35
      DUM2(1) = -20.                                                            DRSIN   36
      DUM2(2) = 120.                                                            DRSIN   37
      DUM3(1) = 0.                                                              DRSIN   38
      DUM3(2) = 120.                                                            DRSIN   39
      DUM4(1) = 0.                                                              DRSIN   40
      DUM4(2) = 120.                                                            DRSIN   41
      DUM5(1) = 0.                                                              DRSIN   42
      DUM5(2) = 120.                                                            DRSIN   43
      DUM6(1) = 0.                                                              DRSIN   44
      DUM6(2) = 120.                                                            DRSIN   45
      DUM7(1) = 0.                                                              DRSIN   46
      DUM7(2) = 120.                                                            DRSIN   47
      DUM8(1) = 0.                                                              DRSIN   48
      DUM8(2) = 120.                                                            DRSIN   49
      DUM9(1) = 0.                                                              4XAA   509
      DUM9(2) = 120.                                                            4XAA   510
      LVAL = IOPCDT(16,3)                                                       4XAA   511
      NSAVE = IOPCDT(17,3)                                                      4XAA   512
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,3)                                      GEO3    88
      IAVPT1 = IAX + NSAVE                                                      4XAA   514
      IAVPTR = IAVPT1 + LVAL                                                    EXPR2  190
      IAVPT3 = IAVPT1 + 2*LVAL                                                  4XAA   516
C              CHECK FOR LABEL                                                  DRSIN   50
      CALL LBLCK                                                                DRSIN   51
C              SAVE THAT IT WAS A D-R-S                                         DRSIN   52
      NDRS(IOPCDT(13,3)) = 1                                                    DRSIN   53
C              CHECK FOR LIKE                                                   DRSIN   54
      CALL LIKINP(ISYMTB,74,LKPTR,3,JREF,0,IERRF)                               DFTEX31117
      IF (IERRF .EQ. 1) THEN                                                    DRSIN   56
          CALL SKPEOC                                                           DRSIN   57
          RETURN                                                                DRSIN   58
      END IF                                                                    DRSIN   59
C              CONVERT TO DATA PTR                                              DRSIN   60
      LKDAT = ISDPTR(AA,AA,LKPTR,3) + NSAVE + 2*LVAL                            4XAA   517
C              CHECK THAT IT WAS A D-R-S                                        DRSIN   62
      IF(LKPTR .EQ. 0)  GO TO 10                                                DRSIN   63
C              GET D-SCHED NUM                                                  DRSIN   64
      I      = ISYMTB(12,LKPTR)                                                 SYMSIZ 145
      IF(NDRS(I) .NE. 1)  CALL MSG2(30,ISYMTB(11,LKPTR),IOPCDT(1,3),            SYMSIZ 146
     1                                 DUM,DUM)                                 DRSIN   67
   10 CONTINUE                                                                  DRSIN   68
C              CHECK FOR ENOUGH SPACE FOR VAL ARRAY                             DRSIN   69
      CALL CKAA(AA,LTOT+5)                                                      4XAA   518
C              FILL DEFAULT AREA WITH REQD                                      DRSIN   71
      CALL INIDAT(3,IA,KWD(1,1),10,IA(IAVPTR+1),IA(IAVPT1+1))                   EXPR2  191
C              GET KEYWORD VALUES                                               DRSIN   73
      CALL SCAN1(3,IA,KWD(1,1),10,IA(IAVPTR+1),IA(IAVPT1+1))                    EXPR2  192
C              CHECK AND REARRANGE FOR DIFFERENT TYPE OF INPUTS                 DRSIN   75
C                     (FOR CONVERSION PURPOSES IN SCEDO)                        DRSIN   76
      IF (LKPTR.EQ.0 .AND. METIN.EQ.1 .AND. (ITYPLS(AA(IAVPTR+4)).NE.           4XAA   521
     1  ITYPLS(UNDEF(1)) .OR. ITYPLS(AA(IAVPTR+5)).NE.ITYPLS(UNDEF(1))))        4XAA   522
     2THEN                                                                      -083    22
          CALL MSG2(135,II,II,II,II)                                            ERR-01 766
      END IF                                                                    -083    28
      DO 20 I=1,4                                                               DRSIN   79
      IF (ITYPLS(AA(IAVPTR+I+5)) .EQ. ITYPLS(UNDEF(1)))  GO TO 20               4XAA   523
      I0 = I                                                                    -083    29
      IF (I.LE.2) I0 = I + 2                                                    -083    30
      AA(IAVPTR+I0+1) = AA(IAVPTR+I+5)                                          4XAA   524
      AA(IAVPT3+I0+1) = AA(IAVPT3+I+5)                                          4XAA   525
      AA(IAVPTR+I+5) = REQD                                                     4XAA   526
      AA(IAVPT3+I+5) = REQD                                                     4XAA   527
      IF ((METIN.EQ.1) .AND. (I.EQ.1 .OR. I.EQ.2)) IA(IAVPT3+26) = KVRT         4XAA   528
   20 CONTINUE                                                                  -083    33
C              SET FOR LIKE FILL                                                DRSIN   89
      LSDPTR = 1                                                                DRSIN   90
      NAMPTR = 1                                                                DRSIN   91
C              CHECK IF DEFAULT FILL                                            DRSIN   92
      IF(LKPTR .GT. 0)  GO TO 1000                                              DRSIN   93
C              GET DEFAULT ARRAY AND D-R-S NAME                                 DRSIN   94
      LSDPTR = 3                                                                DRSIN   95
      LKPTR  = IREFTB(1,JREF)                                                   REFTB1 378
      LKDAT = IAX + LTOT                                                        4XAA   530
C              DEFAULT FOR TYPE                                                 ALPHA2 183
      IA(LKDAT+1) = ISTYPE                                                      4XAA   531
      CALL FILLN(REQD,AA(LKDAT+2),4)                                            4XAA   532
C              SCALE AND BIAS ARE NOT USED IF NO CONVERSION NEEDED              DRSIN   98
      IF (IA(IAVPT3+26).EQ.KVRT) GO TO 1000                                     4XAA   533
      AA(IAVPTR+26) = 1.0                                                       4XAA   534
      AA(IAVPT3+26) = 1.0                                                       4XAA   535
      AA(IAVPTR+27) = 0.0                                                       4XAA   536
      AA(IAVPT3+27) = 0.0                                                       4XAA   537
 1000 CALL LSDFIL(3,ISYMTB,KWD(1,1),5,AA(IAVPT1+1),                             4XAA   538
     1            AA(LKDAT+1),LSDPTR,ISYMTB(1,LKPTR),NAMPTR,LVAL)               FIX7   119
C              CHECK THAT O-H >= O-L                                            DRSIN  104
      IF(AA(IAVPT3+2) .LE. AA(IAVPT3+3))  CALL MSG(91)                          4XAA   539
C              ZERO UNUSED DATA                                                 4XAA   540
      CALL FILLN(0.,AA(IAVPTR+6),20)                                            4XAA   541
      CALL FILLN(0.,AA(IAVPT3+6),20)                                            4XAA   542
C              SAVE DATA POINTER                                                DRSIN  106
      IREFTB(2,JREF) = IAX                                                      REFTB1 379
C              INCREMENT IAX                                                    DRSIN  108
      IAX = IAX + LTOT                                                          4XAA   543
      RETURN                                                                    DRSIN  110
      END                                                                       DRSIN  111
      SUBROUTINE  INITS                                                         INITS    2
C                                                                               INITS    3
C                               INITIALIZATION FOR SDL                          INITS    4
C                                                                               INITS    5
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               INITS    7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /EPTRS /  IKCZ,IVCZ,IKRAP,IVRAP,IKDZ,IVDZ                          HVAC28  86
      COMMON /EZPTRS/  IKTT,IVTT,IKRZB,IVRZB,IKIAZ,IVIAZ,IKS,IVS                -036    18
      COMMON  /HREP  / NVTLIM,IVTLIM(2,30),NRB,LRB,NHRP,LHRP,IRB,IHRP,          HVAC7    1
     $                 JRBOP,JHROP                                              HVAC7    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISVS  / ISSVPS(7),IZSVPS(3)                                       -045a   38
      COMMON /JOPS  / JSOP,JZOP,JSROP,JCFOP,ISSOPS(7),IZSOPS(3)                 -048b   23
      COMMON  /PTRSS / IZ,IS,IP,IATT,IEND,                                      -045a   39
     1                 NVECT,NSCHED,NZONE,NSYS,NPLANT,                          /PTRSS/  3
     2                 LPR,NSS,NZD,NCZD,ISYLEN,IZLEN,IZN,ISN,                   BIGNA2  40
     &                 NSSx,NZDx                                                HR     142
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      COMMON /RSCHED/ NDRS(200), NRS(100)                                       /RSCHED/ 2
      COMMON  /SYSFNS/ JOPSFN,ISYSFN(4,120),ISYSFNT(4,120)                      EXPR2    3
C                                                                               INITS   19
C              SUBR-FUNCTIONS command index                                     COMB05  23
      JOPSFN = 62                                                               COMB05  24
C              USER REPORT STUFF                                                INITS   20
C                                                                               INITS   21
C              SET UP VARIABLE-TYPE ARRAY FOR USER REPS                         INITS   22
C              27 POSS TYPES                                                    FIX14  249
      NVTLIM = 27                                                               FIX14  250
C              10 BUILDING-SYSTEMS                                              BIGNA2  48
      IVTLIM(1,8) = 152                                                         BIGNA2  49
      IVTLIM(2,8) = 10                                                          BIGNA2  50
C              20 GLOBAL ITEMS                                                  COMB01  31
      IVTLIM(1,9) = 114                                                         COMB01  32
      IVTLIM(2,9) = 20                                                          COMB01  33
C              226 SYSTEM HOURLY REPORT VARIABLES                               COMB01  34
      IVTLIM(1,10) = 10                                                         COMB01  35
      IVTLIM(2,10) = 320                                                        -044c    2
C              64 ZONE ITEMS                                                    COMB01  37
      IVTLIM(1,11) = 19                                                         COMB01  38
      IVTLIM(2,11) = 101                                                        -044c    3
C              place holder for future                                          HVAC13   2
      IVTLIM(1,12) =  0                                                         HVAC13   3
      IVTLIM(2,12) =  0                                                         HVAC13   4
C              END-USE items removed                                            DFTEX4 553
C===  IVTLIM(1,13) = 150                                                        DFTEX4 554
C===  IVTLIM(2,13) = 99                                                         DFTEX4 555
      IVTLIM(1,13) = 0                                                          DFTEX4 556
      IVTLIM(2,13) = 0                                                          DFTEX4 557
c              CIRCULATION-LOOP items                                           HVAC9    9
      IVTLIM(1,14) = 62                                                         HVAC9   10
      IVTLIM(2,14) = 50                                                         HVAC13   5
c              PUMP items                                                       HVAC9   12
      IVTLIM(1,15) = 61                                                         HVAC9   13
      IVTLIM(2,15) = 20                                                         HVAC11  46
c              CHILLER items                                                    HVAC9   15
      IVTLIM(1,16) = 63                                                         HVAC9   16
      IVTLIM(2,16) = 36                                                         BIGNA2  54
c              BOILER items                                                     HVAC9   18
      IVTLIM(1,17) = 64                                                         HVAC9   19
      IVTLIM(2,17) = 36                                                         BIGNA2  55
c              DW-HEATER items                                                  HVAC9   21
      IVTLIM(1,18) = 65                                                         HVAC9   22
      IVTLIM(2,18) = 36                                                         BIGNA2  56
c              COOLING-TWR items                                                HVAC9   24
      IVTLIM(1,19) = 66                                                         HVAC9   25
      IVTLIM(2,19) = 30                                                         HVAC9   26
c              PV-MODULE items                                                  PV1      1
      IVTLIM(1,20) = 67                                                         PV1      2
      IVTLIM(2,20) = 20                                                         PV1      3
c              ELEC-GENERATOR items                                             HVAC9   30
      IVTLIM(1,21) = 68                                                         HVAC27   7
      IVTLIM(2,21) = 36                                                         HVAC27   8
c              THERMAL-STORAGE items                                            HVAC9   33
      IVTLIM(1,22) = 69                                                         HVAC18  38
      IVTLIM(2,22) = 15                                                         HVAC18  39
c              ELEC-METER                                                       HVAC7   32
      IVTLIM(1,23) = 85                                                         HVAC7   33
      IVTLIM(2,23) = 22                                                         -044     1
c              FUEL-METER                                                       HVAC7   35
      IVTLIM(1,24) = 86                                                         HVAC7   36
      IVTLIM(2,24) = 22                                                         -044     2
c              STEAM-METER                                                      HVAC7   38
      IVTLIM(1,25) = 87                                                         HVAC7   39
      IVTLIM(2,25) = 21                                                         HVAC18  42
c              CHW-METER                                                        HVAC7   41
      IVTLIM(1,26) = 88                                                         HVAC7   42
      IVTLIM(2,26) = 21                                                         HVAC18  43
c              GROUND-LOOP HEAT-EXCHANGER                                       FIX14  251
      IVTLIM(1,27) = 92                                                         FIX14  252
      IVTLIM(2,27) = 20                                                         FIX14  253
C              INITIALIZE SIZE OF SYSTEM BLOCK                                  INITS   61
C---  find out NSS  value from EDTT printout                                    INITS   62
C---           NSS : <==NSS==>                                                  INITS   63
c           Set block lengths that can be changed by user report requests       INITS   64
c           (see outfis where this increment occurs)                            INITS   65
      NSSx = <+#NSS>                                                            IcRink  25
      NZDx = <+#NZD>                                                            IcRink  26
C                                                                               INITS   68
C              MISC STUFF                                                       INITS   69
C                                                                               INITS   70
C              ISYLEN = LEN OF SYSTEM DATA MINUS ZONES                          INITS   71
      ISYLEN = IOPCDT(9,JSOP) + IOPCDT(10,JSOP) - 1                             INITS   72
      ISYLEN = KONTXT(12,ISYLEN) - 1                                            INITS   73
C              IZLEN = LEN OF ZONE DATA                                         INITS   74
      IZLEN  = IOPCDT(9,JZOP) + IOPCDT(10,JZOP) - 1                             INITS   75
      IZLEN  = KONTXT(12,IZLEN) + KONTXT(9,IZLEN) - 1                           INITS   76
C              GET VALUE ARRAY POINTERS FOR /EPTRS/                             INITS   77
       IF(IKRAP .GT. 400) GOTO 90                                               DFTEX31118
      IKW    = IOPCDT(9,JSOP) - 1                                               INITS   79
      IKRAP  = IKW + IKRAP                                                      DFTEX31119
      IKCZ   = IKW + IKCZ                                                       DFTEX31120
      IKDZ   = IKW + IKDZ                                                       HVAC28  88
      IKW = IOPCDT(9,JZOP) - 1                                                  INITS  108
      IKTT = IKW + IKTT                                                         DFTEX31121
      IKIAZ = IKW + IKIAZ                                                       -036    20
      IKRZB  = IKW + IKRZB                                                      DFTEX31123
      IKS    = IKW + IKS                                                        DFTEX31124
      IVTT =  KONTXT(12,IKTT)                                                   DFTEX31125
      IVIAZ = KONTXT(12,IKIAZ)                                                  -036    21
      IVRZB  = KONTXT(12,IKRZB) - 1                                             DFTEX31127
      IVS    = KONTXT(12,IKS)                                                   DFTEX31128
      IVRAP  = KONTXT(12,IKRAP)                                                 DFTEX31129
      IVCZ   = KONTXT(12,IKCZ)                                                  DFTEX31130
      IVDZ   = KONTXT(12,IKDZ)                                                  HVAC28  89
  90   CONTINUE                                                                 INITS  159
C                                                                               INITS  160
C              ZERO RESET-SCHEDULE AND DAY-RESET-SCHED PTRS                     INITS  161
C                                                                               INITS  162
      DO 100 I=1,200                                                            INITS  163
  100 NDRS(I) = 0                                                               INITS  164
      DO 110 I=1,100                                                            INITS  165
  110 NRS(I) = 0                                                                INITS  166
      RETURN                                                                    INITS  167
      END                                                                       INITS  168
      SUBROUTINE MAKEMM                                                         MAKEMM   2
C                                                                               MAKEMM   3
C              Make a MASTER-METERS command (call from Library)                 MAKEMM   4
C                                                                               MAKEMM   5
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
C                                                                               MAKEMM  10
      DIMENSION MM(8)                                                           MAKEMM  11
C                                                                               MAKEMM  12
      DATA MM /4HDefa,4Hult ,4HMAST,4HER-M,4HETER,4HS   ,4H    ,4H    /         MAKEMM  13
C                                                                               MAKEMM  14
      IF(IOPCDT(13,79) .EQ. 0)  THEN                                            MAKEMM  15
        JOPsav = JOPcur                                                         MAKEMM  16
        JREFsav= JREFcur                                                        MAKEMM  17
        CALL MSG2(49,IOPCDT(1,79),DUM,DUM,DUM)                                  MAKEMM  18
        CALL TBLSCH(MM,LIBIDX,10,NLIB,2,ILX)                                    MAKEMM  19
        JREFcur=IOPCDT(14,79)                                                   MAKEMM  20
        JRF=IOPCDT(14,79)                                                       MAKEMM  21
        JOPcur = 79                                                             MAKEMM  22
        JOP=79                                                                  MAKEMM  23
        IOP=58                                                                  MAKEMM  24
        CALL SYMDEF(ISYMTB,MM,IOPCDT(11,79),JSYM)                               MAKEMM  25
        CALL LIBPRC(JRF,JOP,0,ILX,0,0)                                          MAKEMM  26
        IOPCDT(13,79) = 1                                                       MAKEMM  27
        JOPcur = JOPsav                                                         MAKEMM  28
        JREFcur= JREFsav                                                        MAKEMM  29
        JKWcur = 0                                                              MAKEMM  30
        JTYPcur = 1                                                             MAKEMM  31
      ENDIF                                                                     MAKEMM  32
      RETURN                                                                    MAKEMM  33
      END                                                                       MAKEMM  34
      SUBROUTINE  OUTFIS                                                        OUTFIS   2
C                                                                               OUTFIS   3
C                   WRITE STANDARD FILE                                         OUTFIS   4
C                                                                               OUTFIS   5
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               OUTFIS   7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /CLOCK / CLOCK(10)                                                 /CLOCK/  2
      INTEGER ICLOCK8                                                           PC       1
      EQUIVALENCE (ICLOCK8,CLOCK(8))                                            PC       2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /HREP  / NVTLIM,IVTLIM(2,30),NRB,LRB,NHRP,LHRP,IRB,IHRP,          HVAC7    1
     $                 JRBOP,JHROP                                              HVAC7    2
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON  /IRUNPD/  NRUNPD,IRUNPD(6,15)                                     ALPHA    1
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /ITITLE/ ITITLE(10,5),ITITLT(10,5)                                 FIX11    1
      COMMON /JOPS  / JSOP,JZOP,JSROP,JCFOP,ISSOPS(7),IZSOPS(3)                 -048b   23
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      COMMON  /PTRSS / IZ,IS,IP,IATT,IEND,                                      -045a   39
     1                 NVECT,NSCHED,NZONE,NSYS,NPLANT,                          /PTRSS/  3
     2                 LPR,NSS,NZD,NCZD,ISYLEN,IZLEN,IZN,ISN,                   BIGNA2  40
     &                 NSSx,NZDx                                                HR     142
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      COMMON  /SYSFNS/ JOPSFN,ISYSFN(4,120),ISYSFNT(4,120)                      EXPR2    3
      JOPcur = JSOP                                                             -044c3  10
      IF(IOPCDT(13,JSOP) .EQ. 0)CALL MSG2(22,IOPCDT(1,JSOP),DUM,DUM,DUM)        -044c3  11
      JOPcur = JZOP                                                             -044c3  12
      IF(IOPCDT(13,JZOP) .EQ. 0)CALL MSG2(22,IOPCDT(1,JZOP),DUM,DUM,DUM)        OUTFIS  28
C              CHECK FOR REPORTS                                                OUTFIS  34
      IF(IOPCDT(13,JSROP) .NE. 0)  GO TO 100                                    OUTFIS  35
      JOPcur = JSROP                                                            -044c3  13
C               BACKSPACE AND CALL LSPERI                                       OUTFIS  36
      CALL MSG2(49,IOPCDT(1,JSROP),DUM,DUM,DUM)                                 OUTFIS  37
      CALL BKSPAC                                                               OUTFIS  38
      CALL GENINP(IOPCDT(14,JSROP),JSROP,0)                                     DEF2   247
      CALL DEFFIL(IOPCDT(14,JSROP),JSROP,0,0)                                   DFTEX31131
      IOPCDT(13,JSROP) = 1                                                      COMB05  25
  100 CONTINUE                                                                  OUTFIS  40
C              MOVE SYSTEMS-REPORT DATA TO OUTPUT ARRAY                         ALPHA  179
      IRX = IOPCDT(14,JSROP)                                                    ALPHA  180
      IDP = IREFTB(2,IRX)                                                       ALPHA  181
      LVAL = IOPCDT(16,JSROP)                                                   ALPHA  182
      ISDP = IDP + IOPCDT(17,JSROP) + 3*LVAL                                    4XAA   544
      CALL MOVEN(IA(ISDP+1),IREPRT(1),LVAL)                                     4XAA   545
C              ---                                                              OUTFIS  41
C              --- IF POST-PROC REQUESTED FLAG THE IREPRT() ARRAY               OUTFIS  42
C              ---                                                              OUTFIS  43
      CALL  PPINDP                                                              OUTFIS  44
C              DON'T WRITE STDFILE IF AND FATAL LEVEL ERRORS                    OUTFIS  45
      IF(IFATAL .GT. 0)  GOTO 1000                                              OUTFIS  46
C              INCREASE SIZE OF SYSTEM BLOCK IF SS-J IS REQUESTED               OUTFIS  47
C     INCREASE THE SIZE OF THE SYSTEM BLOCK IF SS-N(HUMIDITY SCATTER) IS REQ.   OUTFIS  48
      IF (IREPRT(29) .NE. 0) THEN                                               COMB03  68
        NSS = NSSx + 275                                                        COMB03  69
      ELSE                                                                      COMB03  70
        NSS = NSSx                                                              COMB03  71
      ENDIF                                                                     COMB03  72
C     INCREASE THE SIZE OF THE ZONE-SYSTEM BLOCK IS SS-O IS REQUESTED           OUTFIS  50
      IF (IREPRT(30) .NE. 0) THEN                                               COMB03  73
        NZD = NZDx + 200                                                        COMB03  74
      ELSE                                                                      COMB03  75
        NZD = NZDx                                                              COMB03  76
      ENDIF                                                                     COMB03  77
C              START OF ZONE TABLES                                             COMB03  85
      IZ     = 1                                                                -045a   75
C              START OF SYSTEM TABLES                                           COMB03  87
      IS     = 0                                                                COMB03  88
C              START OF PLANT TABLES                                            COMB03  89
      IP     = 0                                                                COMB03  90
C              WRITE ZONE REC TO STDFILE                                        OUTFIS  60
      CALL ZONEO                                                                OUTFIS  61
C              WRITE SYSTEM REC TO STDFILE                                      OUTFIS  62
      CALL SYSTO                                                                OUTFIS  63
C            Deleted PAO call ======= but set pointers correctly                COMB01  74
c--- write SYSTEMS-FUNCTIONS array                                              OUTFIS  68
      iavptr = IOPCDT(14,JOPSFN)                                                OUTFIS  69
      lval   = IOPCDT(16,JOPSFN)                                                OUTFIS  70
c$     call  dumpit( 20h          iavptr    , iavptr, 1 )                       OUTFIS  71
c$     call  dumpit( 20hISYSFN(1,1)...+lval , ISYSFN(1,1), lval)                OUTFIS  72
      IF( iavptr .eq. 0 )   THEN                                                OUTFIS  73
          lval = 1                                                              OUTFIS  74
          write( istndf )  iavptr, lval                                         OUTFIS  75
          write( istndf )  iavptr                                               OUTFIS  76
      ELSE                                                                      OUTFIS  77
           call  redef( ISYSFN(1,1), lval )                                     OUTFIS  78
c-------- reorder function names using the number in units field                OUTFIS  79
          ikw  = IOPCDT( 9,JOPSFN)                                              OUTFIS  80
          nkw  = IOPCDT(10,JOPSFN)                                              OUTFIS  81
          I0 = IAX + 1                                                          OUTFIS  82
           call  CKAA( ia, lval )                                               OUTFIS  83
          DO  200  i = 1 , nkw                                                  OUTFIS  84
              ix = ( KONTXT(7,IKW+i-1) - 1 ) * 4  +  I0 + 1                     OUTFIS  85
               call  moven( ISYSFN(1,i), IA(ix), 4 )                            OUTFIS  86
200       CONTINUE                                                              OUTFIS  87
          write( istndf )  iavptr, lval                                         OUTFIS  88
          write( istndf ) (IA(I0+i), i=1,lval)                                  OUTFIS  89
          IAX = I0 - 1                                                          OUTFIS  90
c$         call  dumpit( 20hIA(I0+1)..+lval     , IA(I0+1), lval )              OUTFIS  91
      ENDIF                                                                     OUTFIS  92
      IEND   = IS + NSYS*NSS + NZD*IOPCDT(13,JZOP) - 1                          HR     145
      IATT   = IEND + 1                                                         HVAC2    4
      IF(IFATAL .GT. 0)  GOTO 1000                                              OUTFIS  97
      CALL REDEF(IREPRT,36)                                                     OUTFIS  98
      WRITE (ISTNDF)                                                            HR     146
     &  IEND, NZONE, NSYS, NPLANT, NCZD, NZD, NSS, LPR,                         HR     147
     &  IZ, IS, IP, IATT,                                                       HR     148
     &  IREPRT, CLOCK, ITITLE                                                   HR     150
      IF (IREPRT(32) .NE. 1) GOTO 1000                                          OUTFIS 109
      WRITE(IOUTPT,1) NVECT  ,NSCHED,NZONE ,NSYS  ,NPLANT,                      OUTFIS 110
     1                NCZD  ,NZD   ,NSS   ,LPR   ,                              BIGNA2  65
     2                IZ    ,IS    ,IP    ,IATT                                 -045a   76
      WRITE(IOUTPT,3,ERR=99101) (I,I=1,15),(IREPRT(I),I=1,15),                  OUTFIS 115
     1                          (I,I=16,30),(IREPRT(I),I=16,30),                OUTFIS 116
     2                          (I,I=31,37),(IREPRT(I),I=31,37),                HVAC28  90
     1    (CLOCK(I),I=1,7),ICLOCK8                                              PC     252
99101 CONTINUE                                                                  OUTFIS 119
    1 FORMAT(1H0 /                                                              OUTFIS 120
     1'0NVEC   =',I5,4X,'NSCHED =',I5,4X,'NZONE  =',I5,4X,                      OUTFIS 121
     2'NSYS   =',I5,4X,'NPLANT =',I5,4X /                                       OUTFIS 122
     3'0NCZD   =',I5,4X,'NZD    =',I5,4X,                                       OUTFIS 123
     4'NSS    =',I5,4X,'LPR    =',I5,4X /                                       BIGNA2  67
     5'0IZ     =',I5,4X,                                                        HR     152
     6'IS     =',I5,4X,'IP     =',I5,4X,'IATT   =',I5 /                         OUTFIS 126
     $//)                                                                       OUTFIS 130
    3 FORMAT( / ' REPORT ARRAY :' /  2(15(I4) / 15(I4) //),                     COMB03  92
     1          (7(I4) / 7(I4) //),5X, 7A4, 4H RUN,I2 //)                       HVAC28  91
      FLUSH(ioutpt)                                                             -048   245
 1000 CONTINUE                                                                  OUTFIS 133
      RETURN                                                                    OUTFIS 134
      END                                                                       OUTFIS 135
      SUBROUTINE SYSTIN(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)           DFTEX31132
C                                                                               SYSTIN   3
C                  THIS ROUTINE PROCESSES THE SYSTEM COMMAND                    SYSTIN   4
C                                                                               SYSTIN   5
C                  SYSTIN USES .... WORDS OF COMMWK                             SYSTIN   6
C                                                                               SYSTIN   7
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               SYSTIN   9
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /DFTS  / ISRDFT(380,32)                                            RemPA    3
C********                              NOTE SUBROUTINE KEYVRT                   /DFTS/   3
      COMMON /EPTRS /  IKCZ,IVCZ,IKRAP,IVRAP,IKDZ,IVDZ                          HVAC28  86
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISVS  / ISSVPS(7),IZSVPS(3)                                       -045a   38
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /JOPS  / JSOP,JZOP,JSROP,JCFOP,ISSOPS(7),IZSOPS(3)                 -048b   23
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      EQUIVALENCE (IKW,COMMWK(1)),(NKW,COMMWK(2)),                              COMB02  99
     1            (LVAL,COMMWK(3)),                                             COMB02 100
     2            (INDX,COMMWK(5)),(ISIKW,COMMWK(6)),                           COMB02 101
     3                               (ISNKW,COMMWK(8)),                         COMB02 102
     4            (ISVAL,COMMWK(9)),(ISDAT,COMMWK(10)),                         COMB02 103
     5                                                                          COMB02 104
     6            (ISOP,COMMWK(13)),(ISVP,COMMWK(14))                           COMB02 105
C              SET SOME POINTERS                                                SYSTIN  50
      NSAVE = IOPCDT(17,JOPCDT)                                                 OPLST1 402
C              IKW IS THE FIRST KEYWORD FOR COMMAND                             SYSTIN  51
      IKW    = IOPCDT(9,JOPCDT)                                                 SYSTIN  52
C              NKW IS THE NUMBER OF KEYWORDS FOR THIS COMMAND                   SYSTIN  53
      NKW    = IOPCDT(10,JOPCDT)                                                SYSTIN  54
C              LVAL IS THE LENGTH OF THE VALUE ARRAY                            SYSTIN  55
      LVAL   = IOPCDT(16,JOPCDT)                                                SYSTIN  56
C              IAVPTR IS THE CURRENT VALUE POINTER                              COMB02 106
C              IAVPT1 IS THE START OF THE VALUE BLOCK                           COMB02 107
      IAVPT1 = IREFTB(2,JREF) + NSAVE                                           COMB02 108
      IAVPTR = IAVPT1 + 2*LVAL                                                  COMB02 109
 1000 IF(Iphase .ne. 2)  THEN                                                   DFTEX31133
        CALL LSDFIL(JOPCDT,ISYMTB,KONTXT(1,IKW),NKW,AA(IAVPT1+1),               DFTEX31134
     $              AA(LKDAT+1),LSDFLG,ISYMTB(1,LKPTR),NAMFLG,LVAL)             DFTEX31135
        IF(Iphase .eq. 1) RETURN                                                DFTEX31136
      ELSE                                                                      DFTEX31137
        IF(IREPRT(35) .eq. 1)                                                   DFTEX31138
     $    CALL DUMPIT ('ValArray After  Exps',AA(IAVPT1+1),3*LVAL)              DFTEX31139
      ENDIF                                                                     DFTEX31140
  410 CONTINUE                                                                  SYSTIN 350
      RETURN                                                                    COMB02 129
      END                                                                       SYSTIN 360
      SUBROUTINE  SYSTO                                                         SYSTO    2
C                                                                               SYSTO    3
C                   WRITE SYSTEMS TO STANDARD FILE                              SYSTO    4
C                                                                               SYSTO    5
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               SYSTO    7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /EPTRS /  IKCZ,IVCZ,IKRAP,IVRAP,IKDZ,IVDZ                          HVAC28  86
      COMMON /EZPTRS/  IKTT,IVTT,IKRZB,IVRZB,IKIAZ,IVIAZ,IKS,IVS                -036    18
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /HREP  / NVTLIM,IVTLIM(2,30),NRB,LRB,NHRP,LHRP,IRB,IHRP,          HVAC7    1
     $                 JRBOP,JHROP                                              HVAC7    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISVS  / ISSVPS(7),IZSVPS(3)                                       -045a   38
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /JOPS  / JSOP,JZOP,JSROP,JCFOP,ISSOPS(7),IZSOPS(3)                 -048b   23
      COMMON  /PARMS / PARMS(4), DUM(1)                                         /PARMS/  2
      INTEGER          IPARMS(4), IDUM(1)                                       /PARMS/  3
      EQUIVALENCE      (PARMS(1),IPARMS(1)),(DUM(1),IDUM(1))                    /PARMS/  4
      COMMON  /PTRSS / IZ,IS,IP,IATT,IEND,                                      -045a   39
     1                 NVECT,NSCHED,NZONE,NSYS,NPLANT,                          /PTRSS/  3
     2                 LPR,NSS,NZD,NCZD,ISYLEN,IZLEN,IZN,ISN,                   BIGNA2  40
     &                 NSSx,NZDx                                                HR     142
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON /RSCHED/ NDRS(200), NRS(100)                                       /RSCHED/ 2
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      DIMENSION        ISZTYP(10)                                               COMB03  95
      DATA ISPZ/5/, ISCON/18/, ISUNC/19/, ISPLE/36/, ISSUM/242/                 -035    44
      NSAVE = IOPCDT(17,JSOP)                                                   OPLST1 403
      NSYS   = IOPCDT(13,JSOP)                                                  SYSTO   24
      LVAL = IOPCDT(16,JSOP)                                                    4XAA   667
C              IPT IS WHERE NEXT SYSTEM GOES IN REC                             SYSTO   25
      IPT    = IAX                                                              SYSTO   26
C              IST IS WHERE REC STARTS                                          SYSTO   27
      IST    = IAX + 1                                                          SYSTO   28
C              NSZ IS NUMBER OF TOTAL ZONES IN LISTS                            SYSTO   29
C              COMPUTE LEN OF REC                                               COMB03  97
      LEN    = NSYS*NSS + NZD*IOPCDT(13,JZOP)                                   COMB03  98
C              SAVE ENOUGH SPACE                                                SYSTO   41
      CALL CKAA(IA,LEN)                                                         SYSTO   42
      NSZ    = 0                                                                COMB03  99
C              ISZ IS WHERE THE ZONE LIST FOR THIS SYSTEM GOES                  SYSTO   44
      ISZ    = IPT + NSYS*NSS + 1                                               SYSTO   45
C              FOR EACH SYSTEM  .....                                           SYSTO   46
      DO 300 NS=1,NSYS                                                          SYSTO   47
C              ZERO FILL                                                        SYSTO   51
      CALL FILLN( 0 , AA(IPT+1), NSS )                                          SYSTO   52
C              PICK UP NAME,DATA POINTERS                                       SYSTO   53
      IRX = IOPCDT(14,JSOP) + NS - 1                                            REFTB1 408
      ISD = IREFTB(2,IRX) + NSAVE + 2*LVAL                                      4XAA   671
      IN  = IREFTB(1,IRX)                                                       COMB03 100
      IAZ = 0                                                                   SYSTO   56
      JOPcur  = JSOP                                                            FIX14  254
      JREFcur = IRX                                                             FIX14  255
C              Find the number of each type of ZONE attached to this SYSTEM     COMB03 101
      CALL FILLN(0,ISZTYP(1),10)                                                COMB03 102
C              Save the AHU-CONTROL-ZONE number                                 COMB03 103
C              Throw ERROR if a SYSTEMs CONTROL-ZONE is attached                FIX14  256
C              to another SYSTEM                                                FIX14  257
      IF(NOVAL(IA(ISD+IVCZ)).NE.0)  THEN                                        DFTEX31141
        ISZTYP(5)=ISYMTB(12,IA(ISD+IVCZ))                                       DFTEX31142
        IF(IREFTB(4,IOPCDT(14,JZOP)+ISZTYP(5)-1) .NE. IRX)  THEN                FIX14  260
          CALL MSG2(160,KONTXT(1,IKCZ),ISYMTB(1,IA(ISD+IVCZ)),                  -031    32
     $                  IOPCDT(1,JSOP),ISYMTB(1,IN))                            FIX14  262
        ENDIF                                                                   FIX14  263
      ENDIF                                                                     FIX14  264
C              Throw ERROR if a SYSTEMs DUCT-ZONE is attached                   HVAC28  92
C              to another SYSTEM                                                HVAC28  93
      IF(NOVAL(IA(ISD+IVDZ)).NE.0)  THEN                                        HVAC28  94
        IF(IREFTB(4,IOPCDT(14,JZOP)+ISYMTB(12,IA(ISD+IVDZ))-1)                  HVAC28  95
     $     .NE. IRX)  THEN                                                      HVAC28  96
          CALL MSG2(160,KONTXT(1,IKDZ),ISYMTB(1,IA(ISD+IVDZ)),                  -031    33
     $                  IOPCDT(1,JSOP),ISYMTB(1,IN))                            HVAC28  98
        ENDIF                                                                   HVAC28  99
      ENDIF                                                                     HVAC28 100
      N      = IOPCDT(13,JZOP)                                                  COMB03 105
      DO I=1,N                                                                  COMB03 106
        IF(IREFTB(4,IOPCDT(14,JZOP)+I-1) .EQ. IRX)  THEN                        COMB03 107
          IZN = IREFTB(1,IOPCDT(14,JZOP)+I-1)                                   COMB03 108
          IZD = IREFTB(2,IOPCDT(14,JZOP)+I-1)+IOPCDT(17,JZOP)                   COMB03 109
     $                                       +2*IOPCDT(16,JZOP)                 COMB03 110
          IZT = IA(IZD+1)                                                       COMB03 111
          ISZTYP(1) = ISZTYP(1) + 1                                             COMB03 112
C              IF this is a CONDITIONED ZONE                                    COMB03 113
          IF(    ITYPLS(IZT) .eq. ISCON)  THEN                                  COMB03 114
            ISZTYP(2) = ISZTYP(2) + 1                                           COMB03 115
C              IF this is a UNCONDITIONED ZONE                                  COMB03 116
          ELSEIF(ITYPLS(IZT) .eq. ISUNC)  THEN                                  COMB03 117
            ISZTYP(3) = ISZTYP(3) + 1                                           COMB03 118
C              IF this is a PLENUM ZONE                                         COMB03 119
          ELSEIF(ITYPLS(IZT) .eq. ISPLE)  THEN                                  COMB03 120
            ISZTYP(4) = ISZTYP(4) + 1                                           COMB03 121
          ENDIF                                                                 COMB03 122
        ENDIF                                                                   COMB03 123
      ENDDO                                                                     COMB03 124
      NZS = ISZTYP(1)                                                           COMB03 125
C              throw error if a SYSTEM has no ZONEs                             FIX14  265
      IF(NZS.EQ.0) CALL MSG2(90,IOPCDT(1,JSOP),ISYMTB(1,IN),                    FIX14  266
     $                          IOPCDT(1,JZOP),DUM)                             FIX14  267
C              throw error if a SYSTEM has no CONDITIONED ZONEs                 -033     1
      IF((ISZTYP(2).EQ.0).AND.(IA(ISD+1).NE.ISSUM))                             -035    45
     $  CALL MSG2(90,IOPCDT(1,JSOP),ISYMTB(1,IN),'CONDITIONED ZONE',DUM)        -035    46
C              CHECK FOR R-A-P=PLENUM-ZONES                                     COMB03 142
      IF((IA(ISD+IVRAP).EQ.ISPZ).AND.(ISZTYP(4).EQ.0))                          COMB03 143
     $  CALL MSG2(140,KONTXT(1,IKRAP),ISYMTB(1,ISPZ),                           -044c3  14
     $               ISYMTB(1,ISPZ),ISYMTB(1,IN))                               -044c3  15
C          IF PLENUM ZONES ARE NAMED, ENSURE THAT R-A-P = PLENUM-ZONES          COMB03 146
      IF((ISZTYP(4).NE.0) .AND. (IA(ISD+IVRAP).NE.ISPZ)) THEN                   COMB03 147
        IA(ISD+IVRAP) = ISPZ                                                    COMB03 148
        IF(MSGLVL.GE.2) THEN                                                    COMB03 149
          CALL MSG2(136,ISYMTB(1,IN),II,II,II)                                  ERR-01 767
        ENDIF                                                                   COMB03 154
      ENDIF                                                                     COMB03 155
C              Move data to simulation array (and get ptr to data)              COMB03 156
      ISD = MVTOSM(IRX,JSOP,0)                                                  COMB03 157
C              CONVERT referenced ISYMTB Index their values for simulation      COMB03 158
      CALL SYMFIL(ISYMTB,KONTXT(1,IOPCDT(9,JSOP)),                              SYSTO   75
     1       IOPCDT(10,JSOP)-1,IA(ISD+1))                                       4XAA   675
C              MOVE IN NAME                                                     COMB03 159
      CALL MOVEN(ISYMTB(1,IN),IA(IPT+1),8)                                      COMB03 160
C              Set num of ZONES, COND ZONES, UNCOND ZONES, and PLEN ZONES       COMB03 161
      IA(IPT+9) = ISZTYP(1)                                                     COMB03 162
      IA(IPT+10) = ISZTYP(2)                                                    COMB03 163
      IA(IPT+11) = ISZTYP(3)                                                    COMB03 164
      IA(IPT+12) = ISZTYP(4)                                                    COMB03 165
C              Set ZONE num of AHU-CONTROL-ZONE                                 COMB03 166
      IA(IPT+13) = ISZTYP(5)                                                    COMB03 167
      IA(IPT+14) = 0                                                            COMB03 168
      IA(IPT+15) = 0                                                            COMB03 169
C              COMPUTE AND SAVE WHERE ZONE LIST STARTS (also UNCOND's, PLEN's)  COMB03 170
      IA(IPT+16) = IS + NSYS*NSS +  NSZ *NZD                                    HVAC2    5
      IA(IPT+17) = IS + NSYS*NSS + (NSZ+ISZTYP(2))*NZD                          HVAC2    6
      IA(IPT+18) = IS + NSYS*NSS + (NSZ+ISZTYP(2)+ISZTYP(3))*NZD                HVAC2    7
      IA(IPT+19) = 0                                                            COMB03 174
      IA(IPT+20) = 0                                                            COMB03 175
      IA(IPT+21) = IA(ISD+1)                                                    COMB03 176
C              MOVE DATA IN REC                                                 COMB03 177
      CALL MOVEN(AA(ISD+9),AA(IPT+22),                                          -048e   35
     &           ISYLEN-(8+195+87+7+7+7+69+142+9+3))                            -048e   36
      IPT    = IPT + NSS                                                        COMB03 179
      IF(ISZTYP(5) .EQ. 0) THEN                                                 COMB03 180
        NZC   = 0                                                               COMB03 181
      ELSE                                                                      COMB03 182
        NZC  = 1                                                                COMB03 183
      ENDIF                                                                     COMB03 184
      NZU    = ISZTYP(2)                                                        COMB03 185
      NZP    = ISZTYP(2) + ISZTYP(3)                                            COMB03 186
      NZO    = ISZTYP(2) + ISZTYP(3) + ISZTYP(4)                                COMB03 187
C              LOOP THROUGH LIST                                                COMB03 188
      N      = IOPCDT(13,JZOP)                                                  COMB03 189
      DO 200 I=1,N                                                              COMB03 190
        IF(IREFTB(4,IOPCDT(14,JZOP)+I-1) .EQ. IRX)  THEN                        COMB03 191
          IZN = IREFTB(1,IOPCDT(14,JZOP)+I-1)                                   COMB03 192
          IZD = IREFTB(2,IOPCDT(14,JZOP)+I-1)+IOPCDT(17,JZOP)                   COMB03 193
     $                                       +2*IOPCDT(16,JZOP)                 COMB03 194
          IZT = IA(IZD+1)                                                       COMB03 195
          JOPcur = JSOP                                                         -044c3  16
          JREFcur= IRX                                                          -044c3  17
C              Decide what position this goes into the zone simulation list     COMB03 196
C              CONTROL, CONDITIONED, UNCONDITIONED, PLENUM                      COMB03 197
C              Set up AHU-CONTROL-ZONE                                          COMB03 198
          IF(ISZTYP(5) .EQ. I)  THEN                                            COMB03 199
            NZ  = 1                                                             COMB03 200
          ELSEIF(IZT .EQ. ISCON) THEN                                           COMB03 201
            NZC = NZC + 1                                                       COMB03 202
            NZ  = NZC                                                           COMB03 203
          ELSEIF(IZT .EQ. ISUNC) THEN                                           COMB03 204
            NZU = NZU + 1                                                       COMB03 205
            NZ  = NZU                                                           COMB03 206
          ELSEIF(IZT .EQ. ISPLE) THEN                                           COMB03 207
            NZP = NZP + 1                                                       COMB03 208
            NZ  = NZP                                                           COMB03 209
          ELSE                                                                  COMB03 210
            NZO = NZO + 1                                                       COMB03 211
            NZ  = NZO                                                           COMB03 212
          ENDIF                                                                 COMB03 213
          IF(IZT .EQ. ISCON) THEN                                               COMB03 214
            IF(NOVAL(AA(IZD+IVRZB+1)) .NE. 0) THEN                              COMB03 215
C              TEST FOR CORRECT SYSTEM TYPE, PSZ                                COMB03 216
              ICODE = IA(ISD+1)                                                 REFG    29
              IF(.NOT. ((ICODE .EQ. 2)                                          REFG    30
     &                  .OR. (ICODE .GT. 12  .AND.  ICODE .LT. 16)              REFG    31
     &                  .OR. (ICODE .EQ. 18) .OR. (ICODE .EQ. 19)               REFG    32
     &                  .OR. (ICODE .EQ. 21) .OR. (ICODE .EQ. 28)))             REFG    33
     &           CALL MSG2(86,ISYMTB(1,IN),DUM,DUM,DUM)                         REFG    34
C              TEST FOR REFRIGERATION IN FIRST ZONE ONLY                        COMB03 220
              IF(NZ .NE. 1)                                                     COMB03 221
     $          CALL MSG2(87,ISYMTB(1,IZN),ISYMTB(1,IN),DUM,DUM)                COMB03 222
            ENDIF                                                               COMB03 223
          ENDIF                                                                 -044c3  18
C              CONTROL-ZONE cannot be a SUNSPACE                                -044c3  19
          IF((IA(ISD+1).EQ. 2.or.IA(ISD+1).EQ.17.or.                            -044c3  20
     $        IA(ISD+1).EQ.19.or.IA(ISD+1).EQ.26.or.                            -044c3  21
     $        IA(ISD+1).EQ.27.or.IA(ISD+1).EQ.29) .AND. (NZ .eq.1)) THEN        -044c3  22
            IF(NOVAL(IA(IZD+IVS)) .NE. 0) THEN                                  -044c3  23
              CALL PTRS(JOPSP,ISYMTB(12,IA(IZD+IVS)),                           -044c3  24
     $                    IRXSP,IDPSP,IAVPSP)                                   -044c3  25
              IF(NOVAL(IA(IAVPSP+153)) .NE. 0)  THEN                            -044c3  26
                IF(ISYMTB(12,IA(IAVPSP+153)) .ne. 0) THEN                       -044c3  27
                  CALL MSG2(177,ISYMTB(1,IZN),ISYMTB(1,IN),II,II)               -044c3  28
                END IF                                                          -044c3  29
              END IF                                                            -044c3  30
            ENDIF                                                               -044c3  31
          END IF                                                                -044c3  32
          JOPcur = JZOP                                                         -044c3  33
          JREFcur= IOPCDT(14,JZOP)+I-1                                          -044c3  34
          IF(IZT .EQ. ISCON) THEN                                               -044c3  35
            IF(IA(ISD+1).NE.23) THEN                                            -036    22
C              TERMINAL-TYPE NOT ALLOWED IN NON-PIU SYSTEMS                     -036    23
              IF((IA(IZD+IVTT).NE.224) .and. (IA(IZD+IVTT).NE.IUNUS))           -036    24
     $          CALL MSG2(137,ISYMTB(1,IZN),II,II,II)                           -036    25
            ELSE                                                                -036    26
C             Is there an INDUCED-AIR-ZONE other than itself?                   -036    27
              IF((NOVAL(IA(IZD+IVIAZ)).ne.0).AND.                               -036    28
     $           (IA(IZD+IVIAZ).NE.IZN)) THEN                                   -036    29
                CALL PTRS(JZOP,ISYMTB(12,IA(IZD+IVIAZ)),                        -036    30
     $                    IRXiaz,IDPiaz,IAVPiaz)                                -036    31
C             IAZ terminal-type must be SVAV or not specified                   -036    32
                IF((IA(IAVPiaz+IVTT).NE.224) .AND.                              -036    33
     $             (NOVAL(IA(IAVPiaz+IVTT)).NE.0))                              -036    34
     $            CALL MSG2(138,ISYMTB(1,IZN),ISYMTB(1,IN),                     -036    35
     $                          ISYMTB(1,IREFTB(1,IRXiaz)),                     -036    36
     $                          ISYMTB(1,IA(IAVPiaz+IVTT)))                     -036    37
C             INDUCED-AIR-ZONE MUST be in same SYSTEM                           -036    38
                IF(IREFTB(4,IRXiaz) .NE. IRX)                                   -036    39
     $            CALL MSG2(139,ISYMTB(1,IZN),ISYMTB(1,IN),                     -036    40
     $                          ISYMTB(1,IREFTB(1,IRXiaz)),                     -036    41
     $                          ISYMTB(1,IREFTB(1,IREFTB(4,IRXiaz))))           -036    42
              ENDIF                                                             -036    43
            ENDIF                                                               -036    44
          ENDIF                                                                 COMB03 231
C              FIRST WORD = LOCATION OF ZONE IN ZONE BLOCK                      COMB03 232
          IA(ISZ+(NZ-1)*NZD) = IZ + (I-1)*NCZD                                  COMB03 233
C              ZERO FILL THE REST                                               COMB03 234
          CALL FILLN( 0, AA(ISZ+(NZ-1)*NZD+1), NZD-1 )                          COMB03 235
        ENDIF                                                                   COMB03 236
  200 CONTINUE                                                                  COMB03 237
C              INCREMENT SYSTEMS ZONE DATA LIST POINTER                         COMB03 238
      ISZ    = ISZ + NZD*NZS                                                    COMB03 239
C              INCREMENT TOTAL ZONE COUNTER                                     SYSTO  147
      NSZ    = NSZ + NZS                                                        SYSTO  148
  300 CONTINUE                                                                  SYSTO  161
      ISZ    = ISZ - 1                                                          SYSTO  162
      WRITE (ISTNDF) NSYS, LEN                                                  SYSTO  163
      CALL WRITEN(ISTNDF,IA(IST),LEN)                                           SYSTO  164
      IF(IREPRT(32) .EQ. 1)                                                     SYSTO  165
     1  CALL DUMPIT(20HSYSTEMS              ,IA(IST),LEN)                       SYSTO  166
      IP     = IS + LEN                                                         COMB03 240
      IRB    = IP                                                               COMB03 241
      JOPcur  = 0                                                               FIX14  268
      JREFcur = 0                                                               FIX14  269
      RETURN                                                                    SYSTO  168
      END                                                                       SYSTO  169
      SUBROUTINE ZONEIN(JREF,JOPCDT,LKDAT,NAMFLG,LSDFLG,LKPTR,Iphase)           DFTEX31145
C                                                                               ZONEIN   3
C                  THIS ROUTINE PROCESSES THE ZONE COMMAND                      ZONEIN   4
C                                                                               ZONEIN   5
C                  ZONEI USES .... WORDS OF COMMWK                              ZONEIN   6
C                                                                               ZONEIN   7
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               ZONEIN   9
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /EZPTRS/  IKTT,IVTT,IKRZB,IVRZB,IKIAZ,IVIAZ,IKS,IVS                -036    18
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISVS  / ISSVPS(7),IZSVPS(3)                                       -045a   38
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /JOPS  / JSOP,JZOP,JSROP,JCFOP,ISSOPS(7),IZSOPS(3)                 -048b   23
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      EQUIVALENCE (IKW,COMMWK(1)),(NKW,COMMWK(2)),                              COMB02 131
     1            (LVAL,COMMWK(3)),                                             COMB02 132
     2            (INDX,COMMWK(5)),(ISIKW,COMMWK(6)),                           COMB02 133
     3                               (ISNKW,COMMWK(8)),                         COMB02 134
     4            (ISVAL,COMMWK(9)),(ISDAT,COMMWK(10)),                         COMB02 135
     5                                                                          COMB02 136
     6            (ISOP,COMMWK(13)),(ISVP,COMMWK(14))                           COMB02 137
C                                                                               ZONEIN  28
C              SET SOME POINTERS                                                ZONEIN  33
C              IKW IS THE FIRST KEYWORD FOR COMMAND                             ZONEIN  34
      IKW    = IOPCDT(9,JOPCDT)                                                 ZONEIN  35
C              NKW IS THE NUMBER OF KEYWORDS FOR THIS COMMAND                   ZONEIN  36
      NKW    = IOPCDT(10,JOPCDT)                                                ZONEIN  37
C              LVAL IS THE LENGTH OF THE VALUE ARRAY                            ZONEIN  38
      LVAL   = IOPCDT(16,JOPCDT)                                                ZONEIN  39
      NSAVE = IOPCDT(17,JOPCDT)                                                 GEO2     5
C              IAVPTR IS THE CURRENT VALUE POINTER                              COMB02 138
C              IAVPT1 IS THE START OF THE VALUE BLOCK                           COMB02 139
      IAVPT1 = IREFTB(2,JREF) + NSAVE                                           COMB02 140
      IAVPTR = IAVPT1 + 2*LVAL                                                  COMB02 141
      IF(LSDFLG .EQ. 1) GOTO 1000                                               FIX7   134
 1000 IF(Iphase .ne. 2)  THEN                                                   DFTEX31148
        CALL LSDFIL(JOPCDT,ISYMTB,KONTXT(1,IKW),NKW,AA(IAVPT1+1),               DFTEX31149
     $              AA(LKDAT+1),LSDFLG,ISYMTB(1,LKPTR),NAMFLG,LVAL)             DFTEX31150
        IF(Iphase .eq. 1) RETURN                                                DFTEX31151
      ENDIF                                                                     DFTEX31152
C              Check that the SPACE has not already been assigned               DFTEX31157
      IF(NOVAL(IA(IAVPTR+IVS)).ne.0)  THEN                                      DFTEX31158
        NZ=IOPCDT(13,JOPCDT)                                                    DFTEX31159
        DO I=1,NZ                                                               DFTEX31160
          JREFZN = IOPCDT(14,JOPCDT) + I - 1                                    DFTEX31161
          IDATZN = IREFTB(2,JREFZN)                                             DFTEX31162
          IF((JREFZN.NE.JREF).and.(IDATZN.NE.0))  THEN                          DFTEX31163
            IF(IA(IAVPTR+IVS).eq.IA(IDATZN+NSAVE+LVAL*2+IVS))  THEN             DFTEX31164
              CALL MSG2(154,IOPCDT(1,JOPSP),ISYMTB(1,IA(IAVPTR+IVS)),           DFTEX31165
     $                 IOPCDT(1,JOPCDT),ISYMTB(1,IREFTB(1,JREFZN)))             DFTEX31166
              AA(IAVPTR+IVS) = REQD                                             DFTEX31167
              GOTO 2000                                                         DFTEX31168
            ENDIF                                                               DFTEX31169
          ENDIF                                                                 DFTEX31170
        ENDDO                                                                   DFTEX31171
      ENDIF                                                                     DFTEX31172
 2000 CONTINUE                                                                  DFTEX31173
      RETURN                                                                    COMB02 159
      END                                                                       ZONEIN 210
      SUBROUTINE  ZONEO                                                         ZONEO    2
C                                                                               ZONEO    3
C                   WRITE ZONES TO STANDARD FILE                                ZONEO    4
C                                                                               ZONEO    5
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
C                                                                               ZONEO    7
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /EZPTRS/  IKTT,IVTT,IKRZB,IVRZB,IKIAZ,IVIAZ,IKS,IVS                -036    18
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISVS  / ISSVPS(7),IZSVPS(3)                                       -045a   38
      COMMON /JOPS  / JSOP,JZOP,JSROP,JCFOP,ISSOPS(7),IZSOPS(3)                 -048b   23
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /PTRSS / IZ,IS,IP,IATT,IEND,                                      -045a   39
     1                 NVECT,NSCHED,NZONE,NSYS,NPLANT,                          /PTRSS/  3
     2                 LPR,NSS,NZD,NCZD,ISYLEN,IZLEN,IZN,ISN,                   BIGNA2  40
     &                 NSSx,NZDx                                                HR     142
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      EQUIVALENCE (COMMWK(1),NKW)                                               ZONEO   20
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      DATA ISPLEN /36/                                                          ZONEO   22
      IZN    = 1                                                                ZONEO   23
      ISN    = 1                                                                ZONEO   24
      NZONE  = IOPCDT(13,JZOP)                                                  ZONEO   25
      NSPACE = IOPCDT(13,JOPSP)                                                 DFTEX4 559
      DO J=1,NSPACE                                                             DFTEX4 560
        JREFSP = IOPCDT(14,JOPSP) + J - 1                                       DFTEX4 561
        JSYMSP = IREFTB(1,JREFSP)                                               DFTEX4 562
        JOPcur = JOPSP                                                          DFTEX4 563
        JREFcur= JREFSP                                                         DFTEX4 564
        DO I=1,NZONE                                                            DFTEX4 565
          JREFZN = IOPCDT(14,JZOP) + I - 1                                      DFTEX4 566
          IDATZN = IREFTB(2,JREFZN)                                             DFTEX4 567
          IF(IDATZN.NE.0)  THEN                                                 DFTEX4 568
            IDATZN = IDATZN+IOPCDT(17,JZOP)+2*IOPCDT(16,JZOP)+IVS               DFTEX4 569
            IF((NOVAL(IDATZN).ne.0).AND.(JSYMSP.eq.IA(IDATZN))) GOTO 50         DFTEX4 570
          ENDIF                                                                 DFTEX4 571
        ENDDO                                                                   DFTEX4 572
        CALL MSG2(90,IOPCDT(1,JOPSP),ISYMTB(1,JSYMSP),                          DFTEX4 573
     $               IOPCDT(1,JZOP),I)                                          DFTEX4 574
   50   CONTINUE                                                                DFTEX4 575
      ENDDO                                                                     DFTEX4 576
C              IST IS WHERE REC STARTS                                          ZONEO   26
      IST    = IAX + 1                                                          ZONEO   27
C              IPT IS WHERE NET ZONE GOES                                       ZONEO   28
      IPT    = IAX                                                              ZONEO   29
C              COMPUTE LEN OF REC                                               ZONEO   30
      LEN    = NZONE*NCZD                                                       ZONEO   31
C              SAVE ENOUGH SPACE                                                ZONEO   32
      CALL CKAA(IA,LEN)                                                         ZONEO   33
C              PICK UP REF TABLE POINTER                                        ZONEO   34
C              LOOP THROUGH ZONES                                               ZONEO   37
      DO 100 NZ=1,NZONE                                                         ZONEO   38
C              SAVE NAME                                                        ZONEO   39
      IRX = IOPCDT(14,JZOP) + NZ - 1                                            REFTB1 422
      N = IREFTB(1,IRX)                                                         REFTB1 423
      JOPcur  = JZOP                                                            FIX14  270
      JREFcur = IRX                                                             FIX14  271
C              Zero fill zone block                                             COMB03 242
      CALL FILLN( 0, AA(IPT+1), NCZD )                                          COMB03 243
C              Move in ZONE name                                                COMB03 244
      CALL MOVEN(ISYMTB(1,N),IA(IPT+1),8)                                       COMB03 245
C              PICK UP DATA POINTER                                             ZONEO   45
      IZD = IREFTB(2,IRX) + IOPCDT(17,JZOP) + 2*IOPCDT(16,JZOP)                 4XAA   798
C              Move data to simulation array (and get ptr to data)              COMB03 246
      IZD = MVTOSM(IRX,JZOP,0)                                                  COMB03 247
C              Send flag to simulation that no refig equip in this zone         DFTEX31174
        DO I=1,3                                                                DFTEX31175
          IF(NOVAL(AA(IZD+IVRZB+I-IOPCDT(16,JZOP))) .eq. 0)                     DFTEX31176
     $      AA(IZD+IVRZB+I) = UNFILD                                            DFTEX31177
        ENDDO                                                                   DFTEX31178
C              CONVERT referenced ISYMTB Index their values for simulation      COMB03 248
      NKW = IOPCDT(10,JZOP)                                                     ZONEO   48
      CALL SYMFIL(ISYMTB,KONTXT(1,IOPCDT(9,JZOP)),NKW,IA(IZD+1))                ZONEO   49
C               ZONE-TYPE                                                       COMB03 251
      IA(IPT+15) = IA(IZD+1)                                                    COMB03 252
C               Move rest of keywords into record                               COMB03 253
      CALL MOVEN(AA(IZD+6),AA(IPT+16),IZLEN-(5+7+30+4+7+5))                     -048e   37
      IPT    = IPT + NCZD                                                       ZONEO   70
  100 CONTINUE                                                                  ZONEO   72
C              WRITE REC TO STDFILE                                             ZONEO   73
      WRITE (ISTNDF)  NZONE, LEN                                                ZONEO   74
      CALL WRITEN(ISTNDF,IA(IST),LEN)                                           ZONEO   75
      IF(IREPRT(32) .EQ. 1)                                                     ZONEO   76
     1  CALL DUMPIT(20HZONES                ,IA(IST),LEN)                       ZONEO   77
      IS     = IZ + LEN                                                         ZONEO   78
      JOPcur  = 0                                                               FIX14  272
      JREFcur = 0                                                               FIX14  273
      RETURN                                                                    ZONEO   79
      END                                                                       ZONEO   80
      BLOCK DATA  DATPDL                                                        DATPDL   2
C                                                                               DATPDL   3
C                   BLOCK DATA ASIGNMENTS                                       DATPDL   4
C                                                                               DATPDL   5
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
      COMMON /JOPP  / JPMOP,JCLOP,JCHOP,JBLOP,JDWOP,JCTOP,JFCOP,JEGOP,          COMB03 255
     $                JTSOP,JHREOP,JLMOP,JPROP                                  COMB03 256
      COMMON  /PTRSPN/ IBLOCK(25),NBLOCK(25),LBLOCK(25),IOPBLK(25),             COMB03 257
     $                 NAMBLK(25),NIOP                                          COMB03 258
C                                                                               DATPDL   7
      DATA NIOP  /19/                                                           COMB03 262
      DATA IOPBLK/ 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,                      COMB03 263
     $             73, 74, 75, 76, 77, 78, 79, 80, 82,  0,                      COMB03 264
     $             5*0/                                                         COMB03 265
      DATA IBLOCK/25*0/                                                         COMB03 266
      DATA NBLOCK/25*0/                                                         COMB03 267
      DATA LBLOCK/                                                              IcRink  27
     &            <+#LPM>, <+#LLP>, <+#LCH>, <+#LBL>, <+#LDW>,                  IcRink  28
     &            <+#LTW>, <+#Lpv>, <+#Lgn>, <+#Ltk>, <+#Lhx>,                  IcRink  29
     &            <+#LEC>, <+#Llm>, <+#Lem>, <+#Lfm>, <+#Lsm>,                  IcRink  30
     &            <+#Lcm>, <+#LMM>, <+#LMC>, <+#Lgl>,       0,                  IcRink  31
     $             5*0/                                                         COMB03 270
      DATA NAMBLK/                                                              COMB03 271
     $3HJpm,3HJlp,3HJch,3HJbl,3HJdw,3HJtw,3HJfc,3HJgn,3HJtk,3HJhx,              HVAC18  49
     $3HJec,3HJlm,3HJem,3HJfm,3HJsm,3HJcm,3HJmm,3HJmc,3HJgl,3H   ,              HVAC18  50
     $3H   ,3H   ,3H   ,3H   ,3H   /                                            COMB03 274
      END                                                                       DATPDL 263
      SUBROUTINE  INITP                                                         INITP    2
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /JOPP  / JPMOP,JCLOP,JCHOP,JBLOP,JDWOP,JCTOP,JFCOP,JEGOP,          COMB03 255
     $                JTSOP,JHREOP,JLMOP,JPROP                                  COMB03 256
      COMMON  /PTRSPN/ IBLOCK(25),NBLOCK(25),LBLOCK(25),IOPBLK(25),             COMB03 257
     $                 NAMBLK(25),NIOP                                          COMB03 258
      JPMOP  = IOPBLK(1)                                                        COMB03 279
      JCLOP  = IOPBLK(2)                                                        COMB03 280
      JCHOP  = IOPBLK(3)                                                        COMB03 281
      JBLOP  = IOPBLK(4)                                                        COMB03 282
      JDWOP  = IOPBLK(5)                                                        COMB05  26
      JCTOP  = IOPBLK(6)                                                        COMB03 283
      JFCOP  = IOPBLK(7)                                                        COMB03 284
      JEGOP  = IOPBLK(8)                                                        COMB03 285
      JTSOP  = IOPBLK(9)                                                        COMB03 286
      JHREOP = IOPBLK(10)                                                       COMB03 287
      JLMOP  = IOPBLK(12)                                                       COMB03 288
      JPROP  = 81                                                               COMB03 290
      RETURN                                                                    INITP  178
      END                                                                       INITP  179
      SUBROUTINE  OUTFIP                                                        OUTFIP   2
C                                                                               OUTFIP   3
C                   WRITE STANDARD FILE                                         OUTFIP   4
C                                                                               OUTFIP   5
      COMMON /KEYRD/ KEYREAD, SETUPF, fdfnm, wdfnm, iffnm, lffnm,               /KEYRD/  2
     $               kffnm, str2,                                               /KEYRD/  3
     $               ifdlength, iwdlength, iiflength, ilflength                 /KEYRD/  4
      CHARACTER*256 fdfnm, wdfnm, iffnm, lffnm, kffnm, str2                     /KEYRD/  5
      INTEGER SETUPF                                                            /KEYRD/  6
      INTEGER Name_BoreConfig(17)                                               -044c8   6
      INTEGER Name_BoreConfig2(16)                                              -044c8   7
      INTEGER*2 NGFx, NBx                                                       -044c8   8
      INTEGER*1 Name_Last                                                       -044c8   9
      EQUIVALENCE (Name_BoreConfig(17),Name_Last)                               -044c8  10
      EQUIVALENCE (Name_BoreConfig,Name_BoreConfig2)                            -044c8  11
      Character PathName*256                                                    -048n   45
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /CLOCK / CLOCK(10)                                                 /CLOCK/  2
      INTEGER ICLOCK8                                                           PC       1
      EQUIVALENCE (ICLOCK8,CLOCK(8))                                            PC       2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /JOPS  / JSOP,JZOP,JSROP,JCFOP,ISSOPS(7),IZSOPS(3)                 -048b   23
      COMMON /JOPP  / JPMOP,JCLOP,JCHOP,JBLOP,JDWOP,JCTOP,JFCOP,JEGOP,          COMB03 255
     $                JTSOP,JHREOP,JLMOP,JPROP                                  COMB03 256
      COMMON  /PTRSS / IZ,IS,IP,IATT,IEND,                                      -045a   39
     1                 NVECT,NSCHED,NZONE,NSYS,NPLANT,                          /PTRSS/  3
     2                 LPR,NSS,NZD,NCZD,ISYLEN,IZLEN,IZN,ISN,                   BIGNA2  40
     &                 NSSx,NZDx                                                HR     142
      COMMON  /PTRSPN/ IBLOCK(25),NBLOCK(25),LBLOCK(25),IOPBLK(25),             COMB03 257
     $                 NAMBLK(25),NIOP                                          COMB03 258
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
C              CHECK FOR REPORTS                                                COMB03 306
      IF(IOPCDT(13,JPROP) .EQ. 0)  THEN                                         COMB05  27
C               BACKSPACE AND CALL LSPERI                                       COMB03 308
        CALL MSG2(49,IOPCDT(1,JPROP),DUM,DUM,DUM)                               COMB03 309
        CALL BKSPAC                                                             COMB03 310
        CALL GENINP(IOPCDT(14,JPROP),JPROP,0)                                   COMB03 311
        CALL DEFFIL(IOPCDT(14,JPROP),JPROP,0,0)                                 DFTEX31179
        IOPCDT(13,JPROP) = 1                                                    COMB05  28
      ENDIF                                                                     COMB03 313
C              MOVE PLANT-REPORT DATA TO OUTPUT ARRAY                           COMB03 314
      IRX  = IOPCDT(14,JPROP)                                                   COMB03 315
      IDP  = IREFTB(2,IRX)                                                      COMB03 316
      LVAL = IOPCDT(16,JPROP)                                                   COMB03 317
      ISDP = IDP + IOPCDT(17,JPROP) + 3*LVAL                                    COMB03 318
      CALL MOVEN(IA(ISDP+1),IREPRT(1),LVAL)                                     COMB03 319
C              ---                                                              COMB03 320
C              --- IF POST-PROC REQUESTED FLAG THE IREPRT() ARRAY               COMB03 321
C              ---                                                              COMB03 322
      CALL  PPINDP                                                              COMB03 323
C              CHECK FOR HEATING EQUIPMENT                                      COMB03 324
      IF(IOPCDT(13,JBLOP) .EQ. 0)  CALL MSG(26)                                 COMB03 325
C              CHECK FOR COOLING EQUIPMENT                                      COMB03 326
      IF(IOPCDT(13,JCHOP) .EQ. 0)  CALL MSG(27)                                 COMB03 327
C              CHECK FOR COOLING TOWER                                          COMB03 328
C              NOT NEEDED IF NO COOLING EQUIP                                   COMB03 329
      IF((IOPCDT(13,JCHOP).NE.0) .and. (IOPCDT(13,JCTOP).EQ.0))                 COMB03 330
     $  CALL MSG(28)                                                            COMB03 331
C              DON'T WRITE STDFILE IF AND FATAL LEVEL ERRORS                    COMB03 337
      IF(IFATAL .GT. 0)  GOTO 1000                                              COMB03 338
C              Set start of first equipment object block                        COMB03 339
      IBLOCK(1) = IEND + 1                                                      COMB03 340
      DO IBLK=1,NIOP                                                            COMB03 341
        IF(IOPCDT(13,IOPBLK(IBLK)) .GT. 0)  THEN                                COMB03 342
          IOP   = IOPBLK(IBLK)                                                  COMB03 343
          LBLK  = LBLOCK(IBLK)                                                  COMB03 344
          NSAVE = IOPCDT(17,IOP)                                                COMB03 345
          NBLK  = IOPCDT(13,IOP)                                                COMB03 346
          LVAL  = IOPCDT(16,IOP)                                                COMB03 347
          IKW   = IOPCDT(9,IOP)                                                 DFTEX4 577
          NKW   = IOPCDT(10,IOP)                                                DFTEX4 578
C             Get the length of val array through last-1 keyword                HVAC17 106
C             (Don't transfer child list for ELEC-METER)                        HVAC17 107
          IF(IOP .NE. 75)  THEN                                                 HVAC17 108
            LVALT = IOPCDT(16,IOP)                                              HVAC17 109
          ELSE                                                                  HVAC17 110
            LKW   = IOPCDT( 9,IOP)+IOPCDT(10,IOP)-1                             HVAC17 111
            LVALT = KONTXT(12,LKW) -1                                           HVAC17 112
          ENDIF                                                                 HVAC17 113
C              COMPUTE LEN OF REC                                               COMB03 348
          LEN    = NBLK*LBLK                                                    COMB03 349
C              SAVE ENOUGH SPACE                                                COMB03 350
          CALL CKAA(IA,LEN)                                                     COMB03 351
C              Set number of object for simulation                              COMB03 352
          NBLOCK(IBLK) = NBLK                                                   COMB03 353
C              IPT IS WHERE NEXT OBJECT GOES IN REC                             COMB03 354
          IPT   = IAX                                                           COMB03 355
C              IST IS WHERE REC STARTS                                          COMB03 356
          IST   = IAX + 1                                                       COMB03 357
          DO NS=1,NBLK                                                          COMB03 358
C              ZERO FILL                                                        COMB03 359
            CALL FILLN( 0 , AA(IPT+1), LBLK )                                   COMB03 360
C              PICK UP NAME,DATA POINTERS                                       COMB03 361
            IRX = IOPCDT(14,IOP) + NS - 1                                       COMB03 362
            IN  = IREFTB(1,IRX)                                                 COMB03 363
            ISD = IREFTB(2,IRX) + NSAVE + 2*LVAL                                COMB03 364
            IF(IOPCDT(24,IOP).LT.0) THEN                                        DFTEX4 579
              ITYPE = IA(ISD+1)                                                 DFTEX4 580
              IF(NOVAL(ITYPE).EQ.0) THEN                                        DFTEX4 581
                ITYPE = 1                                                       DFTEX4 582
              ELSE                                                              DFTEX4 583
                ITYPE = ISYMTB(12,ITYPE)                                        DFTEX4 584
              END IF                                                            DFTEX4 585
            ELSE                                                                DFTEX4 586
              ITYPE = 1                                                         DFTEX4 587
            ENDIF                                                               DFTEX4 588
            JOPcur  = IOP                                                       -044c8  12
            JREFcur = IRX                                                       -044c8  13
            JTYPcur = ITYPE                                                     -044c8  14
            JSYMcur = IN                                                        -044c8  15
C              Only put non-deleted objects in record                           COMB03 365
C           IF((IN .gt. 0).and.(ISD.gt.0))  THEN                                COMB03 366
C              Move data to simulation array (and get ptr to data)              COMB03 367
              ISD = MVTOSM(IRX,IOP,0)                                           COMB03 368
C              CONVERT SYMTB POINTERS TO VALUES                                 COMB03 369
              CALL SYMFIL(ISYMTB,KONTXT(1,IKW+(ITYPE-1)*NKW),NKW,               DFTEX4 589
     $                    IA(ISD+1))                                            DFTEX4 590
C              MOVE name to output record                                       COMB03 372
              CALL MOVEN(ISYMTB(1,IN),IA(IPT+1),8)                              COMB03 373
C              MOVE DATA into output record (save space for 15 "mapping" var's) HVAC17 114
c              Do not move compliance keywords and obsolete keywords            -041d    2
              SELECT CASE (IOP)                                                 -041d    3
                CASE (63)        ! Pump                                         -041d    4
                  NumComply = 10                                                -048e   38
                  NumOld    = 0                                                 -041d    6
                CASE (64)        ! Circulation Loop                             -041d    7
                  NumComply = 63 + 81 + 11                                      -047fT  11
                  NumOld    = 0                                                 -041d    9
                CASE (65)        ! Chiller                                      -041d   10
                  NumComply = 20                                                -045     7
                  NumOld    = 0                                                 -041d   12
                CASE (66)        ! Boiler                                       -041d   13
                  NumComply = 14                                                -041d   14
                  NumOld    = 0                                                 -041d   15
                CASE (67)        ! DW Heater                                    -041d   16
                  NumComply = 20                                                -041d   17
                  NumOld    = 0                                                 -041d   18
                CASE (68)        ! Heat Rejection                               -041d   19
                  NumComply = 9                                                 -041d   20
                  NumOld    = 0                                                 -041d   21
                CASE (69)        ! PV Module                                    -042h    1
                  NumComply = 0                                                 -042h    2
                  NumOld    = 5                                                 -042h    3
                CASE (70)        ! Elec Generator                               -042h    4
                  NumComply = 3                                                 -042h    5
                  NumOld    = 3                                                 -042h    6
                CASE (71)        ! Thermal Storage                              -041d   25
                  NumComply = 4                                                 -041d   26
                  NumOld    = 0                                                 -041d   27
                CASE (73)        ! Equip Ctrl                                   -041d   28
                  NumComply = 167                                               -041d   29
                  NumOld    = 0                                                 -041d   30
                CASE (74)        ! Load Management                              -041d   31
                  NumComply = 7                                                 -041d   32
                  NumOld    = 0                                                 -041d   33
                CASE (76)        ! Fuel Meter                                   -041d   34
                  NumComply = 2                                                 -041d   35
                  NumOld    = 0                                                 -041d   36
                CASE Default                                                    -041d   37
                  NumComply = 0                                                 -041d   38
                  NumOld    = 0                                                 -041d   39
              END SELECT                                                        -041d   40
              CALL MOVEN(AA(ISD+1),AA(IPT+24),LVALT-(NumComply+NumOld))         -041d   41
C             if this command can have a parent                                 HVAC17 116
              IF(IOP .EQ. 75)  THEN                                             HVAC17 117
C             if parent exists place parent meter num in rec                    HVAC17 118
C             (for ELEC-METER TYPE=BUILDING or SUB-METER)                       HVAC17 119
                IF(IREFTB(4,IRX) .ne. 0)  THEN                                  -047k   77
                  IA(IPT+<+em;PARENT>+1) =                                      -044c8  16
     $               ISYMTB(12,IREFTB(1,IREFTB(4,IRX)))                         -044c8  17
                ELSE                                                            HVAC17 122
                  IA(IPT+<+em;PARENT>+1) = 0                                    -044c8  18
                ENDIF                                                           HVAC17 124
              ENDIF                                                             HVAC17 125
C             for GOURND-LOO-HX move in G-functions for vert well new           -044c8  19
              IF((IOP .eq. 82).AND.(IA(IPT+<+gl:TYPE>+1).eq. 5)) THEN           -044c8  20
                NG = IA(IPT+<+gl:CONFIGURATION>+1)                              -044c8  21
                IF(NOVAL(NG) .NE. 0) THEN                                       -048   246
C             pick up value array for referenced g-function command             -044c8  23
                IGD = IREFTB(2,IOPCDT(14,95)+NG-1)+IOPCDT(17,95)                -044c8  24
     $                                           +2*IOPCDT(16,95)               -044c8  25
                IGPT = IGD+1                                                    -044c8  26
                NGF  = 27                                                       -044c8  27
                IBPT = IGD+28                                                   -044c8  28
                ILPT = IGD+29                                                   -044c8  29
                NSPV = 8                                                        -044c8  30
                ISPT = IGD+56                                                   -044c8  31
                IG2PT= IGD+64                                                   -044c8  32
                IF(IA(IPT+<+gl:G-FUNCTION-FR>+1).eq. 1) THEN                    -044c8  33
C       if G-FUNCTIONS are custom, fetch from custom library                    -044c8  34
#ifdef _DLL                                                                  /* -048   247 */ 
                  str2 = fdfnm(1:ifdLength)//'LTS_gfnc.bin'                     -048   248
#else                                                                        /* -048   249 */ 
                  str2 = 'LTS_gfnc.bin' ! fdfnm(1:ifdLength)//                  -044c8  35
c              check if file name or path modified via environment              -048n   46
                  str2 = PathName(str2)                                         -048n   47
#endif                                                                       /* -048   250 */ 
                  lenstr2=ifdLength+12                                          -044c8  36
                  OPEN( UNIT=29, FILE=str2, FORM='UNFORMATTED',ERR=10,          -044c8  37
     $                  IOSTAT=io,ACTION='READ',SHARE='DENYNONE',               -044c8  38
     $                  status='OLD',RECL=1829,ACCESS='DIRECT')                 -044c8  39
                  IF(io .ne. 0)  THEN                                           -044c8  40
   10               CALL MSG( 112 )                                             -044c8  41
                    CLOSE ( 29 )                                                -044c8  42
                    GOTO 100                                                    -048   251
                  ELSE                                                          -044c8  44
C       The EED file uses the config num as the rec num - 1                     -044c8  45
c	Record number of LTS g-func of specified borehole configuration               -044c8  46
                    IA(IPT+<+gl:G-FUNCTION-NU>+1) =                             -044c8  47
     $                INT(AA(IPT+<+gl:G-FUNCTION-NU>+1)) + 1                    -044c8  48
                    nREC = IA(IPT+<+gl:G-FUNCTION-NU>+1)                        -044c8  49
c	Read g-functions from the binary file                                         -044c8  50
                    READ (29, REC=nREC, IOSTAT=io, ERR=10)                      -048   252
     $                   Name_BoreConfig2,Name_Last,NBx,NGFx                    -044c8  52
     $                   ,(AA(ISPT-1+I),I=1,NSPV)                               -044c8  53
     $                   ,((AA(IG2PT+(I-1)*NGF+J-1),I=1,NSPV),J=1,NGF)          -044c8  54
     $                   ,((AA(IG2PT+(I-1)*NGF+J-1),I=1,NSPV),J=1,NGF)          -044c8  55
                    IF(io .ne. 0)  GOTO 10                                      -044c8  56
                    CLOSE ( 29 )                                                -044c8  57
                    AA(IBPT) = NBx                                              -044c8  58
                  ENDIF                                                         -044c8  59
                ENDIF                                                           -044c8  60
C       if number of boreholes is 1.0 then just transfer                        -044c8  61
C       single array of g-funtions (single well)                                -044c8  62
                IF(AA(IBPT) .EQ. 1.0) THEN                                      -044c8  63
                  DO JJ=1, NGF                                                  -044c8  64
                    AA(IPT+<+gl:G-FUNCTIONS>+1) = AA(IGPT+JJ-1)                 -044c8  65
                    AA(IPT+<+gl:LN-T/TS>+1)     = AA(ILPT+JJ-1)                 -044c8  66
                  END DO                                                        -044c8  67
                  AA(IPT+<+gl:NUM-BOREHOLES>+1) = AA(IBPT)                      -044c8  68
                  GOTO 100                                                      -048   253
                ENDIF                                                           -044c8  70
 100            CONTINUE                                                        -048   254
C       number of boreholes is greater than 1.0                                 -044c8  71
c       Get g-func for current ratio of borehole spacing to depth               -044c8  72
                RBSD_Current = AA(IPT+<+gl:SPACING>+1) /                        -044c8  73
     $                         AA(IPT+<+gl:DEPTH>+1)                            -044c8  74
                I_RBSD = 1                                                      -044c8  75
                CF_RBSD= 0.                                                     -044c8  76
                IF (RBSD_Current .LE. AA(ISPT)) THEN                            -044c8  77
                  I_RBSD = 1                                                    -044c8  78
                ELSEIF (RBSD_Current .GE. AA(ISPT+NSPV-1)) THEN                 -044c8  79
                  I_RBSD = NSPV                                                 -044c8  80
                ELSE                                                            -044c8  81
                  DO WHILE (RBSD_Current .GT. AA(ISPT+I_RBSD))                  -044c8  82
                  I_RBSD = I_RBSD + 1                                           -044c8  83
                  END DO                                                        -044c8  84
c       Correction factor for current ratio of bore spacing to depth            -044c8  85
                  CF_RBSD =                                                     -044c8  86
     $               (LOG(RBSD_Current)    - LOG(AA(ISPT+I_RBSD-1)))            -044c8  87
     $             / (LOG(AA(ISPT+I_RBSD)) - LOG(AA(ISPT+I_RBSD-1)))            -044c8  88
                ENDIF                                                           -044c8  89
                DO JJ=1, NGF                                                    -044c8  90
                  AA(IPT+<+gl:G-FUNCTIONS>+1) =                                 -044c8  91
     $              AA(IG2PT+(I_RBSD-1)*NGF+JJ-1)                               -044c8  92
                  IF(CF_RBSD .NE. 0.)                                           -044c8  93
     $              AA(IPT+<+gl:G-FUNCTIONS>+1) =                               -044c8  94
     $              AA(IPT+<+gl:G-FUNCTIONS>+1) +                               -044c8  95
     $              CF_RBSD * (AA(IG2PT+(I_RBSD*NGF)+JJ-1)                      -044c8  96
     $                        -AA(IG2PT+(I_RBSD-1)*NGF+JJ-1))                   -044c8  97
                  AA(IPT+<+gl:LN-T/TS>+1) = AA(ILPT+JJ-1)                       -044c8  98
                END DO                                                          -044c8  99
C        Some debugging output                                                  -044c8 100
      IF(IREPRT(35) .eq. 1) THEN                                                -044c8 101
        WRITE (IOUTPT,8810)(AA(IPT+<+gl:NAME>+1),II=1,8),                       -044c8 102
     $  RBSD_Current,AA(ISPT+I_RBSD-1),AA(ISPT+I_RBSD),                         -044c8 103
     $  (AA(IG2PT+(I_RBSD-1)*NGF+JJ-1),                                         -044c8 104
     $   AA(IG2PT+I_RBSD*NGF+JJ-1),JJ=1,27)                                     -044c8 105
 8810   FORMAT(1X,8a4,' g-function pair s/d=',F5.3/28(1X,2F14.8/))              -044c8 106
        WRITE (IOUTPT,8820)(AA(IPT+<+gl:NAME >+1),II=1,8),                      -044c8 107
     $  (AA(IPT+<+gl:G-FUNCTIONS>+1),JJ=1,27)                                   -044c8 108
 8820   FORMAT(1X,8a4,' g-function selected'/27(1X,F14.8/))                     -044c8 109
      ENDIF                                                                     -044c8 110
                AA(IPT+<+gl:NUM-BOREHOLES>+1) = AA(IBPT)                        -044c8 111
c       Correct g-func for current ratio of borehole radius to depth            -044c8 112
                DO JJ=1, NGF                                                    -044c8 113
                  AA(IPT+<+gl:G-FUNCTIONS>+1) =                                 -044c8 114
     $            AA(IPT+<+gl:G-FUNCTIONS>+1) -                                 -044c8 115
     $            LOG(AA(IPT+<+gl:BOREHOLE-DIAM>+1)                             -044c8 116
     $            /(24.0*0.0005*AA(IPT+<+gl:DEPTH>+1)))                         -044c8 117
                END DO                                                          -044c8 118
C        Some debugging output                                                  -044c8 119
      IF(IREPRT(35) .eq. 1) THEN                                                -044c8 120
        WRITE (IOUTPT,8830)(AA(IPT+<+gl:NAME >+1),II=1,8),                      -044c8 121
     $  (AA(IPT+<+gl:G-FUNCTIONS>+1),JJ=1,27)                                   -044c8 122
 8830   FORMAT(1X,8a4,' g-function adjusted'/27(1X,F14.8/))                     -044c8 123
      ENDIF                                                                     -044c8 124
                ELSE                                                            -044c8 125
C             no g-function ... send error message and set error flag           -044c8 126
                  JKWcur  = 3                                                   -044c8 127
                  CALL MSG2(90,IOPCDT(1,82),IA(IPT+1),                          -044c8 128
     $                         IOPCDT(1,95),DUM)                                -044c8 129
                ENDIF                                                           -044c8 130
              ENDIF                                                             -044c8 131
              IPT = IPT + LBLK                                                  COMB03 376
C           ELSE                                                                COMB03 377
C              Remove deleted object from simulation count                      COMB03 378
C             LEN  = LEN  - LBLK                                                COMB03 379
C             IEND = IEND - LBLK                                                COMB03 380
C             NBLOCK(IBLK) = NBLOCK(IBLK) - 1                                   COMB03 381
C           ENDIF                                                               COMB03 382
          ENDDO                                                                 COMB03 383
C              DON'T WRITE STDFILE IF AND FATAL LEVEL ERRORS                    -044c8 132
      IF(IFATAL .GT. 0)  GOTO 1000                                              -044c8 133
C              Set ptr to first object of next block for simulation             COMB03 384
          IF(IBLK .lt. 25)  IBLOCK(IBLK+1) = IEND + LEN + 1                     COMB03 385
C              Increment last word of simulation memory                         COMB03 386
          IEND = IEND + LEN                                                     COMB03 387
C              Write record to standard file                                    COMB03 388
          WRITE (ISTNDF) NBLOCK(IBLK), LEN                                      COMB03 389
          CALL WRITEN(ISTNDF,IA(IST),LEN)                                       COMB03 390
          IF(IREPRT(32) .EQ. 1)                                                 COMB03 391
     $      CALL DUMPIT(IOPCDT(1,IOP),IA(IST),LEN)                              COMB03 392
        ELSE                                                                    COMB03 393
C              Set number of object for simulation                              COMB03 394
          NBLOCK(IBLK)   = 0                                                    COMB03 395
C              Set ptr to first object of next block for simulation             COMB03 396
          IF(IBLK .lt. 25)  IBLOCK(IBLK+1) = IEND + 1 + 1                       HVAC2   14
          IEND = IEND + 1                                                       COMB03 398
          WRITE (ISTNDF) 0, 1                                                   COMB03 399
          WRITE (ISTNDF) 0                                                      COMB03 400
        ENDIF                                                                   COMB03 401
      ENDDO                                                                     COMB03 402
      IATT   = IEND                                                             COMB03 403
      WRITE (ISTNDF) IEND,IATT,IREPRT,IBLOCK,NBLOCK,LBLOCK                      COMB05  30
C                                                                               COMB03 405
      IF (IREPRT(32) .NE. 0) THEN                                               COMB03 406
        WRITE(IOUTPT,1) IEND,                                                   COMB03 407
     $                  NAMBLK,IBLOCK,NBLOCK,LBLOCK,                            COMB03 408
     $                  (I,I=1,36),(IREPRT(I),I=1,36),                          COMB03 409
     $                  (CLOCK(I),I=1,7),ICLOCK8                                COMB03 410
99015 CONTINUE                                                                  COMB03 411
    1 FORMAT(                                                                   COMB03 412
     $         ' Last word of simulation memory from BDL:',I7//                 COMB03 413
     $         ' Simulation pointers: '/3X,25(2X,A3,x)//                        COMB03 414
     $         ' I:',25(I6)/' N:',25(I6)/' L:',25(I6)//                         COMB03 415
     $         ' IREPRT:'//5X,36(I3)/5X,36(I3)//                                COMB03 416
     $         5X,7A4,' RUN',I2)                                                COMB03 417
      FLUSH(ioutpt)                                                             -048   255
      ENDIF                                                                     COMB03 418
 1000 CONTINUE                                                                  COMB03 419
      RETURN                                                                    OUTFIP 236
      END                                                                       OUTFIP 237
      SUBROUTINE CheckBlockRef(Mode, JBlkRef, JREF, IBCname)                    CHKBLK   2
c                                                                               CHKBLK   3
c              Checks to ensure that a BLOCK-CHARGE is referenced by only       CHKBLK   4
c              one UTILITY-RATE, and the BLOCK-CHARGES within that              CHKBLK   5
c              UTILITY-RATE.  Note that the BLOCK-CHARGE may be referenced      CHKBLK   6
c              multiple times, as long as all references are associated         CHKBLK   7
c              with only one UTILITY-RATE and its BLOCK-CHARGES.                CHKBLK   8
c                                                                               CHKBLK   9
c              Mode    = 1  as described above                                  CHKBLK  10
c                        2  check to see if BLOCK-CHARGE is an orphan           CHKBLK  11
c              JBlkRef = the index of the BLOCK-CHARGE in the reference table   CHKBLK  12
c              JREF    = the reference number of the UTILITY-RATE in question   CHKBLK  13
c              IBCname = the pointer to the name of the block charge            CHKBLK  14
c                                                                               CHKBLK  15
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON /PREFIX/ PREFIX(3,10)                                              FIX11    3
      DIMENSION ERRPX(3), WARPX(3), CAUPX(3), DEFPX(3), INPPX(3),               /PREFIX/ 3
     1      LIKPX(3), NOTPX(3), FROPX(3), LIBPX(3), UDFPX(3)                    FIX11    4
      EQUIVALENCE (ERRPX(1),PREFIX(1,1)), (WARPX(1),PREFIX(1,2)),               /PREFIX/ 5
     1            (CAUPX(1),PREFIX(1,3)), (DEFPX(1),PREFIX(1,4)),               /PREFIX/ 6
     2            (INPPX(1),PREFIX(1,5)), (LIKPX(1),PREFIX(1,6)),               /PREFIX/ 7
     3            (FROPX(1),PREFIX(1,7)), (NOTPX(1),PREFIX(1,8)),               FIX11    5
     4            (LIBPX(1),PREFIX(1,9)), (UDFPX(1),PREFIX(1,10))               FIX11    6
C                                                                               /PREFIX/ 9
      COMMON /PTRSE / JUROP, JBCOP, JROP, JEROP, JBAOP, JCCOP,                  /PTRSE/  2
     $                IURBD, IURQS, IURQSF, IURMC,                              /PTRSE/  3
     $                IURECA, IURDC, IURMMC, IURMMDC,                           /PTRSE/  4
     $                IURBC, IURDR, IURMMDR,                                    /PTRSE/  5
     $                IBCSCH, IBCSCHF,                                          /PTRSE/  6
     $                IBCDR, IBCTOU, IBCBA,                                     /PTRSE/  7
     $                IBCBT1, IBCB1, IBCC1, IBCL1, IBCBT2,                      /PTRSE/  8
     $                IRANM, IRASCH, IRASCHF                                    /PTRSE/  9
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
c                                                                               CHKBLK  29
c                                                                               CHKBLK  30
c              pointer to the NSAVE section of the BLOCK-CHARGEs data           CHKBLK  31
      IBCnsave = IREFTB(2,JBlkRef)                                              CHKBLK  32
c              If this BLOCK-CHARGE has already been referenced, the            CHKBLK  33
c              reference table number of its parent UTILITY-RATE was            CHKBLK  34
c              stored in the first position of NSAVE                            CHKBLK  35
      JParentRef = IA(IBCnsave+1)                                               CHKBLK  36
c                                                                               CHKBLK  37
      IF (Mode .EQ. 2)  GOTO 100                                                CHKBLK  38
c                                                                               CHKBLK  39
      IF (JParentRef .GT. 0  .AND.  JParentRef .NE. JREF)  THEN                 CHKBLK  40
c              BLOCK-CHARGE was already referenced by another UTILITY-RATE      CHKBLK  41
c              get the pointer to the parents name                              CHKBLK  42
        IParentName = IREFTB(1,JParentRef)                                      CHKBLK  43
        CALL MSG2(142,ISYMTB(1,IBCname),ISYMTB(1,IParentName),II,II)            ERR-01 773
      ELSE                                                                      CHKBLK  47
c              store reference to this utility rate in the BLOCK-CHARGE         CHKBLK  48
c              data                                                             CHKBLK  49
        IA(IBCnsave+1) = JREF                                                   CHKBLK  50
      ENDIF                                                                     CHKBLK  51
      RETURN                                                                    CHKBLK  52
c                                                                               CHKBLK  53
c              Check to see if BLOCK-CHARGE is an orphan                        CHKBLK  54
  100 IF (JParentRef .EQ. 0)  THEN                                              CHKBLK  55
c              pointer to name of this block-charge                             CHKBLK  56
        IBCname = IREFTB(1,JBlkRef)                                             CHKBLK  57
        CALL MSG2(143,ISYMTB(1,IBCName),II,II,II)                               ERR-01 774
      ENDIF                                                                     CHKBLK  60
      RETURN                                                                    CHKBLK  61
      END                                                                       CHKBLK  69
      SUBROUTINE CheckRatchetRef(Mode, JRatRef, JREF, IBCname)                  CHKRAT   2
c                                                                               CHKRAT   3
c              Checks to ensure that a RATCHET is referenced by only            CHKRAT   4
c              one UTILITY-RATE, and/or the BLOCK-CHARGES within that           CHKRAT   5
c              UTILITY-RATE.  Note that the RATCHET may be referenced           CHKRAT   6
c              multiple times, as long as all references are associated         CHKRAT   7
c              with only one UTILITY-RATE and its BLOCK-CHARGES                 CHKRAT   8
c                                                                               CHKRAT   9
c              Mode    = 1  as described above                                  CHKRAT  10
c                        2  check to see if ratchet is an orphan                CHKRAT  11
c              JRatRef = the index of the ratchet in the reference table        CHKRAT  12
c              JREF    = the reference number of the UTILITY-RATE in question   CHKRAT  13
c              IBCname = the name of the block charge within the UTILITY-RATE   CHKRAT  14
c                        in question which is referencing this ratchet          CHKRAT  15
c                                                                               CHKRAT  16
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON /PREFIX/ PREFIX(3,10)                                              FIX11    3
      DIMENSION ERRPX(3), WARPX(3), CAUPX(3), DEFPX(3), INPPX(3),               /PREFIX/ 3
     1      LIKPX(3), NOTPX(3), FROPX(3), LIBPX(3), UDFPX(3)                    FIX11    4
      EQUIVALENCE (ERRPX(1),PREFIX(1,1)), (WARPX(1),PREFIX(1,2)),               /PREFIX/ 5
     1            (CAUPX(1),PREFIX(1,3)), (DEFPX(1),PREFIX(1,4)),               /PREFIX/ 6
     2            (INPPX(1),PREFIX(1,5)), (LIKPX(1),PREFIX(1,6)),               /PREFIX/ 7
     3            (FROPX(1),PREFIX(1,7)), (NOTPX(1),PREFIX(1,8)),               FIX11    5
     4            (LIBPX(1),PREFIX(1,9)), (UDFPX(1),PREFIX(1,10))               FIX11    6
C                                                                               /PREFIX/ 9
      COMMON /PTRSE / JUROP, JBCOP, JROP, JEROP, JBAOP, JCCOP,                  /PTRSE/  2
     $                IURBD, IURQS, IURQSF, IURMC,                              /PTRSE/  3
     $                IURECA, IURDC, IURMMC, IURMMDC,                           /PTRSE/  4
     $                IURBC, IURDR, IURMMDR,                                    /PTRSE/  5
     $                IBCSCH, IBCSCHF,                                          /PTRSE/  6
     $                IBCDR, IBCTOU, IBCBA,                                     /PTRSE/  7
     $                IBCBT1, IBCB1, IBCC1, IBCL1, IBCBT2,                      /PTRSE/  8
     $                IRANM, IRASCH, IRASCHF                                    /PTRSE/  9
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
c                                                                               CHKRAT  30
c                                                                               CHKRAT  31
c              pointer to the NSAVE section of the RATCHETs data                CHKRAT  32
      IRnsave = IREFTB(2,JRatRef)                                               CHKRAT  33
c              get the pointer to the RATCHET name                              CHKRAT  34
      IRatchetName = IREFTB(1,JRatRef)                                          CHKRAT  35
c              if this RATCHET has already been referenced, the                 CHKRAT  36
c              reference table number of its parent UTILITY-RATE was            CHKRAT  37
c              stored in the first position of NSAVE                            CHKRAT  38
      JParentRef = IA(IRnsave+1)                                                CHKRAT  39
c                                                                               CHKRAT  40
      IF (Mode .EQ. 2)  GOTO 100                                                CHKRAT  41
c                                                                               CHKRAT  42
      IF (JParentRef .GT. 0  .AND.  JParentRef .NE. JREF)  THEN                 CHKRAT  43
c              RATCHET was already referenced by another UTILITY-RATE           CHKRAT  44
c              get the pointer to the ratchets parents name                     CHKRAT  45
        IParentName = IREFTB(1,JParentRef)                                      CHKRAT  46
        IF (IBCname .EQ. 0)  THEN                                               CHKRAT  48
c              this routine was called by a UTILITY-RATE                        CHKRAT  49
          CALL MSG2(144,ISYMTB(1,IRatchetName),ISYMTB(1,IParentName),           ERR-01 775
     $                  II,II)                                                  ERR-01 776
        ELSE                                                                    CHKRAT  52
c              this routine was called by a BLOCK-CHARGE in a                   CHKRAT  53
c              UTILITY-RATE                                                     CHKRAT  54
          CALL MSG2(145,ISYMTB(1,IRatchetName),ISYMTB(1,IParentName),           ERR-01 777
     $                  ISYMTB(1,IBCname),II)                                   ERR-01 778
        ENDIF                                                                   CHKRAT  58
      ELSE                                                                      CHKRAT  59
c              store reference to this utility rate in the ratchet data         CHKRAT  60
        IA(IRnsave+1) = JREF                                                    CHKRAT  61
      ENDIF                                                                     CHKRAT  62
      RETURN                                                                    CHKRAT  63
c                                                                               CHKRAT  64
c              Check to see if RATCHET is an orphan                             CHKRAT  65
  100 IF (JParentRef .EQ. 0)  THEN                                              CHKRAT  66
        CALL MSG2(146,ISYMTB(1,IRatchetName),II,II,II)                          ERR-01 779
      ENDIF                                                                     CHKRAT  69
      RETURN                                                                    CHKRAT  70
      END                                                                       CHKRAT  81
      BLOCK DATA  DATEDL                                                        DATEDL   2
C                                                                               DATEDL   3
      COMMON /PTRSE / JUROP, JBCOP, JROP, JEROP, JBAOP, JCCOP,                  /PTRSE/  2
     $                IURBD, IURQS, IURQSF, IURMC,                              /PTRSE/  3
     $                IURECA, IURDC, IURMMC, IURMMDC,                           /PTRSE/  4
     $                IURBC, IURDR, IURMMDR,                                    /PTRSE/  5
     $                IBCSCH, IBCSCHF,                                          /PTRSE/  6
     $                IBCDR, IBCTOU, IBCBA,                                     /PTRSE/  7
     $                IBCBT1, IBCB1, IBCC1, IBCL1, IBCBT2,                      /PTRSE/  8
     $                IRANM, IRASCH, IRASCHF                                    /PTRSE/  9
c                                                                               HVAC7   45
c              Command indexes for UTILITY-RATE, BLOCK-CHARGE, RATCHET,         HVAC7   46
c              BASELINE and COMPONENT-COST commands                             HVAC7   47
      DATA JUROP, JBCOP, JROP, JBAOP, JCCOP / 89, 90, 91, 87, 86 /              HVAC7   48
c              Command indexes for ECONOMICS-REPORT                             HVAC7   49
      DATA JEROP /88/                                                           HVAC7   50
c                                                                               HVAC7   51
c              Pointers to the VAL-POS in bdlkey for UTILITY-RATE:              HVAC7   52
c              BILLING-DAYS, QUAL-SCH, SCH-FLAG, MONTH-CHGS                     HVAC7   53
      DATA IURBD, IURQS, IURQSF, IURMC  /102,118,119,122/                       HVAC7   54
c              ENERGY-COST-ADJS, DEMAND-CHGS, MIN-MON-CHGS, MON-MON-DEM-CHGS    HVAC7   55
      DATA IURECA, IURDC, IURMMC, IURMMDC /136,149,201,213/                     HVAC7   56
c              BLOCK-CHARGES, DEMAND-RATCHETS, MIN-MON-DEM-RATCHETS             HVAC7   57
      DATA IURBC, IURDR, IURMMDR /177,162,225/                                  HVAC7   58
c                                                                               HVAC7   59
c              Pointers to the VAL-POS in bdlkey for BLOCK-CHARGE:              HVAC7   60
c              BLOCK-SCH, SCH-FLAG                                              HVAC7   61
      DATA IBCSCH, IBCSCHF /1,2/                                                HVAC7   62
c              DEMAND-RATCHETS, TOU-SEASON-LINKS, BLOCKS-ARE                    HVAC7   63
      DATA IBCDR, IBCTOU, IBCBA /3,8,10/                                        HVAC7   64
c              BLOCK1-TYPE, BLOCKS-1, COSTS-1, LIMITS-1, BLOCK2-TYPE            HVAC7   65
      DATA IBCBT1, IBCB1, IBCC1, IBCL1, IBCBT2 /11,12,22,32,42/                 HVAC7   66
c                                                                               HVAC7   67
c              Pointers to the VAL-POS in bdlkey for RATCHET:                   HVAC7   68
c              NUM-MONTHS, RATCHET-SCH, SCH-FLAG                                HVAC7   69
      DATA IRANM, IRASCH, IRASCHF /1,2,3/                                       HVAC7   70
C                                                                               DATEDL  11
      END                                                                       DATEDL  12
      SUBROUTINE ECOUT(IOP, LEN)                                                ECOUT    2
c                                                                               ECOUT    3
c              Outputs the UTILITY-RATE, BLOCK-CHARGE, RATCHET,                 ECOUT    4
c              BASELINE, AND COMPONENT-COST data                                ECOUT    5
c                                                                               ECOUT    6
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
c                                                                               ECOUT    8
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /PTRSE / JUROP, JBCOP, JROP, JEROP, JBAOP, JCCOP,                  /PTRSE/  2
     $                IURBD, IURQS, IURQSF, IURMC,                              /PTRSE/  3
     $                IURECA, IURDC, IURMMC, IURMMDC,                           /PTRSE/  4
     $                IURBC, IURDR, IURMMDR,                                    /PTRSE/  5
     $                IBCSCH, IBCSCHF,                                          /PTRSE/  6
     $                IBCDR, IBCTOU, IBCBA,                                     /PTRSE/  7
     $                IBCBT1, IBCB1, IBCC1, IBCL1, IBCBT2,                      /PTRSE/  8
     $                IRANM, IRASCH, IRASCHF                                    /PTRSE/  9
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
c                                                                               ECOUT   18
      INTEGER NONAME(8)                                                         ECOUT   19
      DATA NONAME  /4HNO  ,4HNAME,                                              ECOUT   20
     $              4HNO  ,4HNAME,                                              ECOUT   21
     $              4HNO  ,4HNAME,                                              ECOUT   22
     $              4HNO  ,4HNAME/                                              ECOUT   23
c                                                                               ECOUT   24
c              Number of commands defined of this type                          ECOUT   25
      NumObjects = IOPCDT(13, IOP)                                              ECOUT   26
c                                                                               ECOUT   27
c              Write blank record if no command of this type                    ECOUT   28
      IF (NumObjects .EQ. 0 )  THEN                                             ECOUT   29
        LEN    = 1                                                              ECOUT   30
        WRITE (ISTNDF) NumObjects, LEN                                          ECOUT   31
        WRITE (ISTNDF) NumObjects                                               ECOUT   32
        GOTO 1000                                                               ECOUT   33
      ENDIF                                                                     ECOUT   34
c                                                                               ECOUT   35
      LVAL  = IOPCDT(16,IOP)                                                    ECOUT   36
      NSAVE = IOPCDT(17,IOP)                                                    ECOUT   37
c              Length of simulation block                                       ECOUT   38
      LBLK  = IOPCDT(18,IOP)                                                    ECOUT   39
c              Length of record                                                 ECOUT   40
      LEN   = NumObjects * LBLK                                                 ECOUT   41
c              save enough space                                                ECOUT   42
      CALL CKAA(IA,LEN)                                                         ECOUT   43
c              IPT is where next object goes in rec                             ECOUT   44
      IPT   = IAX                                                               ECOUT   45
c              IST is where rec starts                                          ECOUT   46
      IST   = IAX + 1                                                           ECOUT   47
c              zero the record                                                  ECOUT   48
      CALL FILLN( 0 , AA(IPT+1), LEN )                                          ECOUT   49
c                                                                               ECOUT   50
c              For each object ....                                             ECOUT   51
      DO  IOBJ=1,NumObjects                                                     ECOUT   52
c              pick up name, simulation data pointers                           ECOUT   53
        IRX = IOPCDT(14,IOP) + IOBJ-1                                           ECOUT   54
        IN  = IREFTB(1,IRX)                                                     ECOUT   55
        ISD = IREFTB(2,IRX) + NSAVE + 2*LVAL                                    ECOUT   56
c              Only put non-deleted objects in record                           ECOUT   57
c       IF(IN .gt. 0  .or.  ISD .gt. 0)  THEN                                   ECOUT   58
c              Move data to simulation array (and get ptr to data)              ECOUT   59
          ISD = MVTOSM(IRX,IOP,0)                                               ECOUT   60
c              Convert SYMTB pointers to values                                 ECOUT   61
          CALL SYMFIL(ISYMTB,KONTXT(1,IOPCDT(9,IOP)),                           ECOUT   62
     $                  IOPCDT(10,IOP),IA(ISD+1))                               ECOUT   63
c              MOVE name to output record                                       ECOUT   64
          IF (IN .GT. 0)  THEN                                                  ECOUT   65
            CALL MOVEN(ISYMTB(1,IN),IA(IPT+1),8)                                ECOUT   66
          ELSE                                                                  ECOUT   67
            CALL MOVEN(NONAME(1),IA(IPT+1),8)                                   ECOUT   68
          ENDIF                                                                 ECOUT   69
c              MOVE DATA into output record                                     ECOUT   70
          CALL MOVEN(AA(ISD+1),AA(IPT+9),LVAL)                                  ECOUT   71
          IPT = IPT + LBLK                                                      ECOUT   72
C       ELSE                                                                    ECOUT   73
C              Remove deleted object from simulation count                      ECOUT   74
C         LEN  = LEN  - LBLK                                                    ECOUT   75
C         IEND = IEND - LBLK                                                    ECOUT   76
C       ENDIF                                                                   ECOUT   77
      ENDDO                                                                     ECOUT   78
c                                                                               ECOUT   79
c              Write record to standard file                                    ECOUT   80
      WRITE (ISTNDF) NumObjects, LEN                                            ECOUT   81
      CALL WRITEN(ISTNDF,IA(IST),LEN)                                           ECOUT   82
c                                                                               ECOUT   83
 1000 IF(IREPRT(32) .EQ. 1)                                                     ECOUT   84
     $      CALL DUMPIT(IOPCDT(1,IOP),IA(IST),LEN)                              ECOUT   85
c                                                                               ECOUT   86
      RETURN                                                                    ECOUT   87
      END                                                                       ECOUT   88
      SUBROUTINE INITE                                                          INITE    2
C                                                                               INITE    3
C              INITIALIZE EDL VARIABLES                                         INITE    4
C                                                                               INITE    5
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
      COMMON /PTRSE / JUROP, JBCOP, JROP, JEROP, JBAOP, JCCOP,                  /PTRSE/  2
     $                IURBD, IURQS, IURQSF, IURMC,                              /PTRSE/  3
     $                IURECA, IURDC, IURMMC, IURMMDC,                           /PTRSE/  4
     $                IURBC, IURDR, IURMMDR,                                    /PTRSE/  5
     $                IBCSCH, IBCSCHF,                                          /PTRSE/  6
     $                IBCDR, IBCTOU, IBCBA,                                     /PTRSE/  7
     $                IBCBT1, IBCB1, IBCC1, IBCL1, IBCBT2,                      /PTRSE/  8
     $                IRANM, IRASCH, IRASCHF                                    /PTRSE/  9
C                                                                               INITE    8
      RETURN                                                                    INITE    9
      END                                                                       INITE   10
      SUBROUTINE URIN(JREF,JOPCDT,ISCFLG,LKDAT,NAMPTR,LSDPTR,LKPTR,             DFTEX31181
     $                Iphase)                                                   DFTEX31182
c                                                                               URIN     3
c              This routine processes the UTILITY-RATE, BLOCK-CHARGE            URIN     4
c              and RATCHET command                                              URIN     5
c                                                                               URIN     6
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /COMMWK/ COMMWK(160)                                               /COMMWK/ 2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON /PREFIX/ PREFIX(3,10)                                              FIX11    3
      DIMENSION ERRPX(3), WARPX(3), CAUPX(3), DEFPX(3), INPPX(3),               /PREFIX/ 3
     1      LIKPX(3), NOTPX(3), FROPX(3), LIBPX(3), UDFPX(3)                    FIX11    4
      EQUIVALENCE (ERRPX(1),PREFIX(1,1)), (WARPX(1),PREFIX(1,2)),               /PREFIX/ 5
     1            (CAUPX(1),PREFIX(1,3)), (DEFPX(1),PREFIX(1,4)),               /PREFIX/ 6
     2            (INPPX(1),PREFIX(1,5)), (LIKPX(1),PREFIX(1,6)),               /PREFIX/ 7
     3            (FROPX(1),PREFIX(1,7)), (NOTPX(1),PREFIX(1,8)),               FIX11    5
     4            (LIBPX(1),PREFIX(1,9)), (UDFPX(1),PREFIX(1,10))               FIX11    6
C                                                                               /PREFIX/ 9
      COMMON /PTRSE / JUROP, JBCOP, JROP, JEROP, JBAOP, JCCOP,                  /PTRSE/  2
     $                IURBD, IURQS, IURQSF, IURMC,                              /PTRSE/  3
     $                IURECA, IURDC, IURMMC, IURMMDC,                           /PTRSE/  4
     $                IURBC, IURDR, IURMMDR,                                    /PTRSE/  5
     $                IBCSCH, IBCSCHF,                                          /PTRSE/  6
     $                IBCDR, IBCTOU, IBCBA,                                     /PTRSE/  7
     $                IBCBT1, IBCB1, IBCC1, IBCL1, IBCBT2,                      /PTRSE/  8
     $                IRANM, IRASCH, IRASCHF                                    /PTRSE/  9
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
c                                                                               URIN    20
      REAL    LimitSize                                                         URIN    21
      INTEGER CUMULATIVE                                                        URIN    22
      DATA CUMULATIVE, LIMITSUM /1053,1048/                                     URIN    23
c                                                                               URIN    24
c                                                                               URIN    25
c              Set some pointers                                                URIN    26
      NSAVE = IOPCDT(17,JOPCDT)                                                 URIN    27
c              IKW is the first keyword for command                             URIN    28
      IKW    = IOPCDT(9,JOPCDT)                                                 URIN    29
c              NKW is the number of keywords for this command                   URIN    30
      NKW    = IOPCDT(10,JOPCDT)                                                URIN    31
c              LVAL is the length of the value array                            URIN    32
      LVAL   = IOPCDT(16,JOPCDT)                                                URIN    33
c              IAVPT1 is the start of the value block                           URIN    34
      IAVPT1 = IREFTB(2,JREF) + NSAVE                                           URIN    35
c              IAVPTR is the current value pointer                              URIN    36
      IAVPTR = IAVPT1 + 2*LVAL                                                  URIN    37
c              LTOT is the total size of the value block                        URIN    38
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,JOPCDT)                                 URIN    39
      IF (ISCFLG.EQ.0) THEN                                                     URIN    40
      IF(Iphase .ne. 2)  THEN                                                   DFTEX31183
        CALL LSDFIL(JOPCDT,ISYMTB,KONTXT(1,IKW),NKW,AA(IAVPT1+1),               DFTEX31184
     $              AA(LKDAT+1),LSDPTR,ISYMTB(1,LKPTR),NAMPTR,LVAL)             DFTEX31185
        IF(Iphase .eq. 1) RETURN                                                DFTEX31186
      ENDIF                                                                     DFTEX31187
      END IF                                                                    URIN    43
c                                                                               URIN    44
c              Special processing and error checking.                           URIN    45
c              pointer to first block charge in reference table                 URIN    46
      JBlkRef1 = IOPCDT(14,JBCOP)                                               URIN    47
c              pointer to first ratchet in reference table                      URIN    48
      JRatRef1 = IOPCDT(14,JROP)                                                URIN    49
c              Jump to appropriate section                                      URIN    50
      JUMP = JOPCDT - 88                                                        URIN    51
      GOTO (1000,2000,3000), JUMP                                               URIN    52
c                                                                               URIN    53
c                                                                               URIN    54
c              UTILITY-RATE (89) Special processing                             URIN    55
 1000 CONTINUE                                                                  URIN    56
c                                                                               HVAC18  51
c                                                                               URIN    85
c              Check to see if any ratchets were referenced by                  URIN    86
c              another UTILITY-RATE                                             URIN    87
c              Loop thru the ratchets listed for this UTILITY-RATE              URIN    88
      DO  I=1,15                                                                URIN    89
c              Number of ratchet in reference table                             URIN    90
        IF(NOVAL(IA(IAVPTR+IURDR+I-1)) .EQ. 0)                                  DFTEX4 591
     $                                                         GOTO 1010        URIN    92
        NRatRef = ISYMTB(12,IA(IAVPTR+IURDR+I-1))                               URIN    93
        JRatRef = JRatRef1 + NRatRef-1                                          URIN    94
c              ratchet found, now check its parent UTILITY-RATE                 URIN    95
        CALL CheckRatchetRef(1, JRatRef, JREF, 0)                               URIN    96
      ENDDO                                                                     URIN    97
c              Repeat for MIN-MON-DEM-RATchets                                  URIN    98
 1010 DO  I=1,15                                                                URIN    99
        IF (NOVAL(IA(IAVPTR+IURMMDR+I-1)) .EQ. 0)                               DFTEX4 592
     $                                                         GOTO 1011        URIN   101
        NRatRef = ISYMTB(12,IA(IAVPTR+IURMMDR+I-1))                             URIN   102
        JRatRef = JRatRef1 + NRatRef-1                                          URIN   103
        CALL CheckRatchetRef(1, JRatRef, JREF, 0)                               URIN   104
      ENDDO                                                                     URIN   105
 1011 CONTINUE                                                                  URIN   106
c                                                                               URIN   107
c              Now loop thru BLOCK-CHARGES                                      URIN   108
      DO 1099  IB=1,20                                                          URIN   109
c              number of BLOCK-CHARGE in reference table                        URIN   110
        IF (NOVAL(IA(IAVPTR+IURBC+IB-1)) .EQ. 0)                                DFTEX4 593
     $                                                         GOTO 1100        URIN   112
        NBlkRef = ISYMTB(12,IA(IAVPTR+IURBC+IB-1))                              URIN   113
c              pointer into reference table                                     URIN   114
        JBlkRef = JBlkRef1 + NBlkRef-1                                          URIN   115
c              pointer to this block-charges working data                       URIN   116
        JBlkDat = IREFTB(2,JBlkRef)                                             URIN   117
     $                          + IOPCDT(17,JBCOP) + 2*IOPCDT(16,JBCOP)         URIN   118
c              pointer to name of this block-charge                             URIN   119
        IBCname = IREFTB(1,JBlkRef)                                             URIN   120
c              check to see if this BLOCK-CHARGE has already been               URIN   121
c              referenced by another UTILITY-RATE                               URIN   122
        CALL CheckBlockRef(1, JBlkRef, JREF, IBCname)                           URIN   123
c              loop thru ratchets on this block-charge and check if             URIN   124
c              any have been already referenced by another UTILITY-RATE         URIN   125
        DO  IR=1,5                                                              URIN   126
c              Number of ratchet in reference table                             URIN   127
          IF (NOVAL(IA(JBlkDat+IBCDR+IR-1)) .EQ. 0)                             DFTEX4 594
     $                                                         GOTO 1020        URIN   129
          NRatRef = ISYMTB(12,IA(JBlkDat+IBCDR+IR-1))                           URIN   130
          JRatRef = JRatRef1 + NRatRef-1                                        URIN   131
c              ratchet found, now check its parent UTILITY-RATE                 URIN   132
          CALL CheckRatchetRef(1, JRatRef, JREF, IBCname)                       URIN   133
        ENDDO                                                                   URIN   134
 1020   CONTINUE                                                                URIN   135
c                                                                               URIN   136
c              Check TOU season links (will repeat the following for 2          URIN   137
c              TOU season links)                                                URIN   138
        NTOU = 0                                                                URIN   139
c              number of TOU linked BLOCK-CHARGE in reference table             URIN   140
 1030   IF (NOVAL(IA(JBlkDat+IBCTOU+NTOU)) .EQ. 0)                              DFTEX4 595
     $                                                         GOTO 1099        URIN   142
        NTouRef = ISYMTB(12,IA(JBlkDat+IBCTOU+NTOU))                            URIN   143
        JTouRef = JBlkRef1 + NTouRef-1                                          URIN   144
c              pointer to name of linked block charge                           URIN   145
        ITouName = IREFTB(1,JTouRef)                                            URIN   146
c              check to see if block is linked to itself                        URIN   147
        IF (JTouRef .EQ. JBlkRef)  THEN                                         URIN   148
          CALL MSG2(148,ISYMTB(1,IBCname),II,II,II)                             ERR-01 781
        ENDIF                                                                   URIN   151
c              Check to see if linked block is linked back.  Loop thru          URIN   152
c              all other block charges on this UTILITY-RATE and see if          URIN   153
c              we find the TOU-linked BLOCK-CHARGE                              URIN   154
        DO 1040  JB=1,20                                                        URIN   155
c              number of BLOCK-CHARGE in reference table                        URIN   156
          IF (NOVAL(IA(IAVPTR+IURBC+JB-1)) .EQ. 0)                              DFTEX4 596
     $                                                        GOTO 1041         URIN   158
          NURBlkRef = ISYMTB(12,IA(IAVPTR+IURBC+JB-1))                          URIN   159
          JURBlkRef = JBlkRef1 + NURBlkRef-1                                    URIN   160
          IF (JURBlkRef .NE. JTouRef)  GOTO 1040                                URIN   161
c              Found it.  Now check to see if linked block-charge               URIN   162
c              is linked back to original                                       URIN   163
            JTouDat = IREFTB(2,JURBlkRef)                                       URIN   164
     $                           + IOPCDT(17,JBCOP) + 2*IOPCDT(16,JBCOP)        URIN   165
            DO  KLINK=1,2                                                       URIN   166
              IF (NOVAL(IA(JTouDat+IBCTOU+KLINK-1)) .NE. 0)  THEN               DFTEX4 597
                NTouRefBack = ISYMTB(12,IA(JTouDat+IBCTOU+KLINK-1))             URIN   169
                JTouRefBack = JBlkRef1 + NTouRefBack-1                          URIN   170
                IF (JTouRefBack .EQ. JBlkRef)  GOTO 1042                        URIN   171
              ENDIF                                                             URIN   172
            ENDDO                                                               URIN   173
c              no common link found                                             URIN   174
            CALL MSG2(149,ISYMTB(1,IBCname),ISYMTB(1,ITouName),II,II)           ERR-01 782
            GOTO 1042                                                           URIN   178
 1040   CONTINUE                                                                URIN   179
c              if here, no link was found to a block-charge within              URIN   180
c              this utility-rate                                                URIN   181
 1041   CALL MSG2(150,ISYMTB(1,IBCname),ISYMTB(1,ITouName),II,II)               ERR-01 783
 1042   CONTINUE                                                                URIN   185
c                                                                               URIN   186
c              Repeat for the second TOU-SEASON-LINK                            URIN   187
        IF (NTOU .EQ. 0)  THEN                                                  URIN   188
          NTOU = 1                                                              URIN   189
          GOTO 1030                                                             URIN   190
        ENDIF                                                                   URIN   191
c              end of BLOCK-CHARGE checks                                       URIN   192
 1099 CONTINUE                                                                  URIN   193
 1100 CONTINUE                                                                  URIN   194
c                                                                               URIN   195
c              End of UTILITY-RATE processing                                   URIN   196
      RETURN                                                                    URIN   197
c                                                                               URIN   198
c                                                                               URIN   199
c              BLOCK-CHARGE (90) Special processing                             URIN   200
 2000 CONTINUE                                                                  URIN   201
c              Initialize block sizes and limits                                URIN   211
      PreviousBlockSize = -1.                                                   URIN   212
      PreviousLimitSize = -1.                                                   URIN   213
c              Format of block entry data - INCREMENTAL or CUMULATIVE           URIN   214
      JBlocksAre = IA(IAVPTR+IBCBA)                                             URIN   215
c              Pointers for error checking within the block entries.            URIN   216
c              First, differential between block data entries                   URIN   217
      Ndiff = IBCBT2 - IBCBT1                                                   URIN   218
c              Start by pointing at the BLOCK1 data                             URIN   219
c              BLOCK1-TYPE                                                      URIN   220
      JBT = IBCBT1                                                              URIN   221
c              BLOCKS-1                                                         URIN   222
      JB  = IBCB1                                                               URIN   223
c              COSTS-1                                                          URIN   224
      JC  = IBCC1                                                               URIN   225
c              LIMITS-1                                                         URIN   226
      JL  = IBCL1                                                               URIN   227
c                                                                               URIN   228
c              Now loop thru all blocks                                         URIN   229
      DO  IB=1,5                                                                URIN   230
c              and all entries within the block                                 URIN   231
        DO  II=1,10                                                             URIN   232
c              pointer to entry in the block size array                         URIN   233
          IF (II .EQ. 1  .AND.  AA(IAVPTR+JB+II-1) .EQ. -77777.)                URIN   234
     $                                                         GOTO 2020        URIN   235
          IF (AA(IAVPTR+JB+II-1) .EQ. -77777.)  GOTO 2010                       URIN   236
c              If BLOCKS-ARE = CUMULATIVE, block size must be at least          URIN   237
c              as large as previous entry                                       URIN   238
          IF (JBlocksAre .EQ. CUMULATIVE)  THEN                                 URIN   239
            BlockSize = AA(IAVPTR+JB+II-1)                                      URIN   240
            IF (BlockSize .GE. PreviousBlockSize)  THEN                         URIN   241
              PreviousBlockSize = BlockSize                                     URIN   242
            ELSE                                                                URIN   243
              CALL MSG2(151,II,II,II,II)                                        ERR-01 785
              GOTO 2020                                                         URIN   246
            ENDIF                                                               URIN   247
          ENDIF                                                                 URIN   248
c              The limit in KWH/KW-LIMITSUM entries must be at least as         URIN   249
c              large as the previous limit                                      URIN   250
          IBlockType = IA(IAVPTR+JBT)                                           URIN   251
          IF (IBlockType .EQ. LIMITSUM)  THEN                                   URIN   252
            LimitSize = AA(IAVPTR+JL+II-1)                                      URIN   253
            IF (LimitSize .GE. PreviousLimitSize)  THEN                         URIN   254
              PreviousLimitSize = LimitSize                                     URIN   255
            ELSE                                                                URIN   256
              CALL MSG2(152,II,II,II,II)                                        ERR-01 786
              GOTO 2020                                                         URIN   259
            ENDIF                                                               URIN   260
          ENDIF                                                                 URIN   261
c              end of entry checks within a block                               URIN   262
        ENDDO                                                                   URIN   263
 2010   CONTINUE                                                                URIN   264
c              increment pointers to the next block                             URIN   265
        JBT = IBCBT1 + Ndiff                                                    URIN   266
        JB  = IBCB1  + Ndiff                                                    URIN   267
        JC  = IBCC1  + Ndiff                                                    URIN   268
        JL  = IBCL1  + Ndiff                                                    URIN   269
c              end of BLOCKx checks                                             URIN   270
      ENDDO                                                                     URIN   271
 2020 CONTINUE                                                                  URIN   272
c                                                                               URIN   273
c              End of BLOCK-CHARGE special processing                           URIN   274
      RETURN                                                                    URIN   275
c                                                                               URIN   276
c                                                                               URIN   277
c              RATCHET (91) special processing                                  URIN   278
 3000 CONTINUE                                                                  URIN   279
c                                                                               URIN   291
c              End of RATCHET special processing                                URIN   292
      RETURN                                                                    URIN   293
      END                                                                       URIN   319
      SUBROUTINE OUTFIE                                                         OUTFIE   2
c                                                                               HVAC7   72
c                   Write STANDARD file for the ECONOMICS simulation            HVAC7   73
c                                                                               HVAC7   74
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /CLOCK / CLOCK(10)                                                 /CLOCK/  2
      INTEGER ICLOCK8                                                           PC       1
      EQUIVALENCE (ICLOCK8,CLOCK(8))                                            PC       2
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /ITITLE/ ITITLE(10,5),ITITLT(10,5)                                 FIX11    1
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON /PTRSE / JUROP, JBCOP, JROP, JEROP, JBAOP, JCCOP,                  /PTRSE/  2
     $                IURBD, IURQS, IURQSF, IURMC,                              /PTRSE/  3
     $                IURECA, IURDC, IURMMC, IURMMDC,                           /PTRSE/  4
     $                IURBC, IURDR, IURMMDR,                                    /PTRSE/  5
     $                IBCSCH, IBCSCHF,                                          /PTRSE/  6
     $                IBCDR, IBCTOU, IBCBA,                                     /PTRSE/  7
     $                IBCBT1, IBCB1, IBCC1, IBCL1, IBCBT2,                      /PTRSE/  8
     $                IRANM, IRASCH, IRASCHF                                    /PTRSE/  9
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
c                                                                               HVAC7   88
c     include 'fsublib.fi'                                                      HVAC7   89
c                                                                               HVAC7   90
c              Dont write STANDARD file if not at least one UTILITY-RATE        HVAC7   91
      IF(IOPCDT(13,JUROP) .EQ. 0)  GOTO 1000                                    HVAC7   92
c              write a record to flag ECONOMICS to run                          HVAC7   93
        I = 123456                                                              HVAC7   94
        WRITE (ISTNDF) I                                                        HVAC7   95
c                                                                               HVAC7   99
c              Check for reports                                                HVAC7  100
      IF(IOPCDT(13,JEROP) .EQ. 0)  THEN                                         HVAC7  101
      JOPcur = JEROP                                                            -044c3  36
c               BACKSPACE AND CALL LSPERI                                       HVAC7  102
        CALL MSG2(49,IOPCDT(1,JEROP),DUM,DUM,DUM)                               HVAC7  103
        CALL BKSPAC                                                             HVAC7  104
        CALL GENINP(IOPCDT(14,JEROP),JEROP,0)                                   HVAC7  105
        CALL DEFFIL(IOPCDT(14,JEROP),JEROP,0,0)                                 DFTEX31188
        IOPCDT(13,JEROP) = 1                                                    HVAC7  107
      ENDIF                                                                     HVAC7  108
c              MOVE ECONOMIC-REPORT DATA TO OUTPUT ARRAY                        HVAC7  109
      IRX  = IOPCDT(14,JEROP)                                                   HVAC7  110
      IDP  = IREFTB(2,IRX)                                                      HVAC7  111
      LVAL = IOPCDT(16,JEROP)                                                   HVAC7  112
      ISDP = IDP + IOPCDT(17,JEROP) + 3*LVAL                                    HVAC7  113
      CALL MOVEN(IA(ISDP+1),IREPRT(1),LVAL)                                     HVAC7  114
c              ---                                                              HVAC7  115
c              --- If POST-PROC requested flag the IREPRT() array               HVAC7  116
c              ---                                                              HVAC7  117
      CALL  PPINDP                                                              HVAC7  118
C              CHECK FOR BASELINE                                               FIX6   139
      IF(IOPCDT(13,87) .EQ. 0)  THEN                                            FIX6   140
      JOPcur = 87                                                               -044c3  37
C               BACKSPACE AND CALL to make object                               FIX6   141
        CALL MSG2(49,IOPCDT(1,87),DUM,DUM,DUM)                                  FIX6   142
        CALL BKSPAC                                                             FIX6   143
        CALL GENINP(IOPCDT(14,87),87,0)                                         FIX6   144
        CALL DEFFIL(IOPCDT(14,87),87,0,0)                                       DFTEX31189
        IOPCDT(13,87) = 1                                                       FIX6   146
      ENDIF                                                                     FIX6   147
c              Dont write STDFILE if any fatal level errors                     HVAC7  119
      IF(IFATAL .GT. 0)  GOTO 1000                                              HVAC7  120
c                                                                               HVAC7  121
c              Start of SCHEDULE table                                          HVAC7  122
      ISCB = 0                                                                  HVAC7  123
c              output the SCHEDULES                                             HVAC7  124
      CALL SCEDO(NVECT,ISCB,NSCHED,LENSCH)                                      HVAC7  125
      ISCB = ISCB + 1                                                           HVAC7  126
c              output the RATCHETs                                              HVAC7  127
      IRA  = ISCB + LENSCH                                                      HVAC7  128
      NRA  = IOPCDT(13, JROP)                                                   HVAC7  129
      JOPcur = JROP                                                             -044c3  38
c              check to see if any RATCHETs defined but not referenced          HVAC7  130
      IF (NRA .GT. 0)  THEN                                                     HVAC7  131
        JRatRef1 = IOPCDT(14,JROP)                                              HVAC7  132
        DO  NR=1,NRA                                                            HVAC7  133
          JRatRef = JRatRef1 + NR-1                                             HVAC7  134
          JREFcur = JRatRef                                                     -044c3  39
          CALL CheckRatchetRef(2, JRatRef, 0, 0)                                HVAC7  135
        ENDDO                                                                   HVAC7  136
      ENDIF                                                                     HVAC7  137
      LRA  = IOPCDT(18, JROP)                                                   HVAC7  138
      CALL ECOUT(JROP, LENRA)                                                   HVAC7  139
c              output the BLOCK-CHARGEs                                         HVAC7  140
      IBC  = IRA + LENRA                                                        HVAC7  141
      NBC  = IOPCDT(13, JBCOP)                                                  HVAC7  142
      JOPcur = JBCOP                                                            -044c3  40
c              check to see if any BLOCK-CHARGEs defined but not referenced     HVAC7  143
      IF (NBC .GT. 0)  THEN                                                     HVAC7  144
        JBlkRef1 = IOPCDT(14,JBCOP)                                             HVAC7  145
        DO  NB=1,NBC                                                            HVAC7  146
          JBlkRef = JBlkRef1 + NB-1                                             HVAC7  147
          JREFcur = JBlkRef                                                     -044c3  41
          CALL CheckBlockRef(2, JBlkRef, xxx, xxx)                              -048s    2
        ENDDO                                                                   HVAC7  149
      ENDIF                                                                     HVAC7  150
      LBC  = IOPCDT(18, JBCOP)                                                  HVAC7  151
      CALL ECOUT(JBCOP, LENBC)                                                  HVAC7  152
c              output the UTILITY-RATEs                                         HVAC7  153
      IUR  = IBC + LENBC                                                        HVAC7  154
      NUR  = IOPCDT(13, JUROP)                                                  HVAC7  155
      LUR  = IOPCDT(18, JUROP)                                                  HVAC7  156
      CALL ECOUT(JUROP, LENUR)                                                  HVAC7  157
c              output the BASELINE data                                         HVAC7  158
      IBA  = IUR + LENUR                                                        HVAC7  159
      NBA  = IOPCDT(13, JBAOP)                                                  HVAC7  160
      LBA  = IOPCDT(18, JBAOP)                                                  HVAC7  161
      CALL ECOUT(JBAOP, LENBA)                                                  HVAC7  162
c              output the COMPONENT-COSTs                                       HVAC7  163
      ICC  = IBA + LENBA                                                        HVAC7  164
      NCC  = IOPCDT(13, JCCOP)                                                  HVAC7  165
      LCC  = IOPCDT(18, JCCOP)                                                  HVAC7  166
      CALL ECOUT(JCCOP, LENCC)                                                  HVAC7  167
c                                                                               HVAC7  168
c              overall length of AA simulation record                           HVAC7  169
      LEN = ICC-1 + LENCC                                                       HVAC7  170
c                                                                               HVAC7  171
      CALL REDEF(IREPRT,36)                                                     HVAC7  172
C              If ES-F is requested, make sure ES-E is on so that               -034   126
C              ES-F is possible                                                 -034   127
      IF((IREPRT(21) .ne. 0).and.(IREPRT(20) .eq. 0))                           -034   128
     $  IREPRT(20) = IREPRT(21)                                                 -034   129
c                                                                               HVAC7  173
      WRITE (ISTNDF)  (CLOCK(I),I=1,10), ((ITITLE(I,J),I=1,10),J=1,5),          HVAC7  174
     $ ISCB, NVECT, NSCHED, LENSCH,                                             HVAC7  175
     $ IUR,NUR,LUR, IBC,NBC,LBC, IRA,NRA,LRA, IBA,NBA,LBA, ICC,NCC,LCC,         HVAC7  176
     $ (IBCBT2-IBCBT1), (IREPRT(I),I=1,37), LEN                                 HVAC7  177
c                                                                               HVAC7  178
c              Check for debug print                                            HVAC7  179
      IF (IREPRT(32) .EQ. 1)  THEN                                              HVAC7  180
        WRITE (IOUTPT,9000) ISCB, NVECT, NSCHED, LENSCH,                        HVAC7  181
     $    IUR,NUR,LUR, IBC,NBC,LBC, IRA,NRA,LRA, IBA,NBA,LBA,                   HVAC7  182
     $    ICC,NCC,LCC                                                           HVAC7  183
 9000 FORMAT('   ISCB NVECT  NSCH  LSCH   IUR   NUR   LUR'                      HVAC7  184
     $   /1X,  7I6,                                                             HVAC7  185
     $   /1X,'    IBC   NBC   LBC   IRA   NRA   LRA   IBA   NBA   LBA'          HVAC7  186
     $   /1X,  9I6,                                                             HVAC7  187
     $   /1X,'    ICC   NCC   LCC'                                              HVAC7  188
     $   /1X,  3I6)                                                             HVAC7  189
        CALL DUMPIT(20HECONOMICS-REPORT    ,IREPRT,37)                          HVAC7  190
c       CALL DUMPIT(20HAA                  ,AA(1),LEN)                          HVAC7  191
      ENDIF                                                                     HVAC7  192
c                                                                               HVAC7  193
 1000 CONTINUE                                                                  HVAC7  194
      JOPcur = 0                                                                -044c3  42
      JREFcur= 0                                                                -044c3  43
      RETURN                                                                    COMB04   3
      END                                                                       COMB04   4
      SUBROUTINE PDL                                                            COMB04   5
      RETURN                                                                    COMB04   6
      END                                                                       COMB04   7
      SUBROUTINE EDL                                                            COMB04   8
      RETURN                                                                    COMB04   9
      END                                                                       OUTFIE 617
      SUBROUTINE PRNTVL(JOPCDT,JREF)                                            PRNTVL   2
C                                                                               PRNTVL   3
C              Do the DIAGNOSTIC=COMMENTS print of the values of an             PRNTVL   4
C              instance of a command                                            PRNTVL   5
C                                                                               PRNTVL   6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON /JOPS  / JSOP,JZOP,JSROP,JCFOP,ISSOPS(7),IZSOPS(3)                 -048b   23
      COMMON /ISVS  / ISSVPS(7),IZSVPS(3)                                       -045a   38
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /SPVALX/ IHP, IAP, IVP, ISHPP, IWP, IDPTHP, ISCP, IPRCAP,         /SPVALX/ 2
     1                 IWFP, ILTP, IINFMP, INZHP, IPLP, IPSP, ILKWP,            /SPVALX/ 3
     2                 ITKWP, IEKWP, IPAP, ILWSFP, ITWSFP, IPOLSP,              GEO4     1
     3                 IEQWFP, KWH, KWA, KWV, KWSHP, KWW, KWDPTH,               /SPVALX/ 5
     4                 KWSC, KWLT, KWINFM, KWNZH, KWPL, KWPS,                   /SPVALX/ 6
     5                 KWLKW, KWTKW, KWEKW, KWPA, KWLWSF, KWTWSF,               /SPVALX/ 7
     6                 KWEWSF, IFURTP, IFURFP, IFURWP, IFLRWP, KWWF,            /SPVALX/ 8
     7                 KWFLRW,ILTSP,NINFKY,INFKYP(20),DEFINF(10,4),             LTSYS1   2
     8                 ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM,             DFTEXP 197
     9                 ISPLOCP,ISPDIS,NSPDIS                                    DFTEXP 198
      INTEGER DASHES(8),LITFIL(8),MSGNM0(6),IDTYPE(2,6),NAME(8)                 PRNTVL  17
      INTEGER ISCVX1(7),ISCVXN(7),ISCVX(7),JOPSCM(7)                            PRNTVL  18
      DATA DASHES /8*4H- - /                                                    PRNTVL  19
      DATA LITFIL /8*4H    /                                                    PRNTVL  20
      DATA KBLANK /4H    /                                                      PRNTVL  21
      DATA MSGNM0 /9,161,39,31,1,169/                                           PRNTVL  22
      DATA IDTYPE /5,6,3,4,5,6,9,10,1,2,7,8/                                    PRNTVL  23
C                                                                               PRNTVL  24
      IF (JOPCDT.EQ.0) RETURN                                                   PRNTVL  25
      NKW = IOPCDT(10,JOPCDT)                                                   PRNTVL  26
      IF (NKW.EQ.0) RETURN                                                      PRNTVL  27
      CALL FILLN(KBLANK,NAME(1),8)                                              PRNTVL  28
      IKW = IOPCDT(9,JOPCDT)                                                    bug     16
      LVAL = IOPCDT(16,JOPCDT)                                                  PRNTVL  30
      NSAVE = IOPCDT(17,JOPCDT)                                                 PRNTVL  31
      IF (JREF.GT.0) THEN                                                       PRNTVL  32
C              IA index of start of data for command                            PRNTVL  33
          IDX0 = IREFTB(2,JREF)                                                 PRNTVL  34
C              reference table index of liked command                           PRNTVL  35
          JREFLK = IREFTB(3,JREF)                                               PRNTVL  36
          JSYMX = IREFTB(1,JREF)                                                PRNTVL  37
      ELSE                                                                      PRNTVL  38
          IDX0 = IOPCDT(14,JOPCDT)                                              PRNTVL  39
          JREFLK = 0                                                            PRNTVL  40
          JSYMX = 0                                                             PRNTVL  41
      END IF                                                                    PRNTVL  42
      IF(IOPCDT(24,JOPCDT).LT.0) THEN                                           DFTEX4 598
        ITYPE = IA(IDX0+NSAVE+2*LVAL+1)                                         DFTEX4 599
        IF(NOVAL(ITYPE).EQ.0) THEN                                              DFTEX4 600
          ITYPE = 1                                                             DFTEX4 601
        ELSE                                                                    DFTEX4 602
          ITYPE = ISYMTB(12,ITYPE)                                              DFTEX4 603
        END IF                                                                  DFTEX4 604
        IKW = IKW + (ITYPE-1)*NKW                                               DFTEX4 605
        JTYPcur = ITYPE                                                         DFTEX4 606
      ENDIF                                                                     DFTEX4 607
      IF (JSYMX.GT.0) THEN                                                      PRNTVL  43
          CALL MOVEN(ISYMTB(1,JSYMX),NAME(1),8)                                 PRNTVL  44
      ELSE                                                                      PRNTVL  45
          CALL MOVEN(IOPCDT(1,JOPCDT),NAME(1),4)                                PRNTVL  46
      END IF                                                                    PRNTVL  47
      CALL MSG2(27,NAME,NAME,NAME,NAME)                                         PRNTVL  48
      CALL FILLN(KBLANK,NAME(1),8)                                              PRNTVL  49
      JSYMLK = 0                                                                PRNTVL  50
C              FILL SOME SUBCOMMAND INDEX ARRAYS                                PRNTVL  51
      NSC = 0                                                                   PRNTVL  52
      CALL FILLN(0,ISCVX1(1),7)                                                 PRNTVL  53
      CALL FILLN(0,ISCVXN(1),7)                                                 PRNTVL  54
      CALL FILLN(0,ISCVX(1),7)                                                  PRNTVL  55
      CALL FILLN(0,JOPSCM(1),7)                                                 PRNTVL  56
      IF (JOPCDT.EQ.JSOP) THEN                                                  PRNTVL  57
          NSC = 6                                                               PRNTVL  58
          CALL MOVEN(ISSOPS(1),JOPSCM(1),7)                                     PRNTVL  59
          CALL MOVEN(ISSVPS(1),ISCVX(1),7)                                      PRNTVL  60
      ELSE IF (JOPCDT.EQ.JZOP) THEN                                             PRNTVL  61
          NSC = 3                                                               PRNTVL  62
          CALL MOVEN(IZSOPS(1),JOPSCM(1),3)                                     PRNTVL  63
          CALL MOVEN(IZSVPS(1),ISCVX(1),3)                                      PRNTVL  64
      ELSE IF (JOPCDT.EQ.JOPSP) THEN                                            PRNTVL  65
          NSC = 1                                                               PRNTVL  66
          JOPSCM(1) = JOPSC                                                     PRNTVL  67
          ISCVX(1) = ISCP                                                       PRNTVL  68
      END IF                                                                    PRNTVL  69
      IF (NSC.GT.0) THEN                                                        PRNTVL  70
          DO I=1,NSC                                                            PRNTVL  71
              ISCVXN(I) = IDX0 + NSAVE + 2*LVAL + IOPCDT(16,JOPSCM(I))          PRNTVL  72
              IKW1 = IOPCDT(9,JOPSCM(I))                                        PRNTVL  73
              ISCVX1(I) = IDX0 + NSAVE + 2*LVAL + KONTXT(12,IKW1)               PRNTVL  74
          END DO                                                                PRNTVL  75
      END IF                                                                    PRNTVL  76
C              Loop over various sources of input.  ILSLD=1 is user             PRNTVL  77
C              input; 2 is library; 3 is subcommand; 4 is like;                 PRNTVL  78
C              5 is default;                                                    PRNTVL  79
      DO 1000 ILSLD=1,6                                                         PRNTVL  80
      IF (ILSLD.EQ.4 .AND. JREFLK.EQ.0) GO TO 1000                              PRNTVL  81
      IF (ILSLD.EQ.5 .AND. JREFLK.GT.0) GO TO 1000                              PRNTVL  82
      IF (ILSLD.EQ.4) THEN                                                      PRNTVL  83
          JSYMLK = IREFTB(1,JREFLK)                                             PRNTVL  84
          CALL MOVEN(ISYMTB(1,JSYMLK),NAME(1),8)                                PRNTVL  85
      ELSE                                                                      PRNTVL  86
          CALL MOVEN(DASHES(1),NAME(1),8)                                       PRNTVL  87
      END IF                                                                    PRNTVL  88
      LEAD = 1                                                                  PRNTVL  89
      JK = 0                                                                    PRNTVL  90
      KTYPE = 0                                                                 PRNTVL  91
      M = 0                                                                     PRNTVL  92
      MSGNUM = 0                                                                PRNTVL  93
      JSYM = 0                                                                  PRNTVL  94
      JSSCX = 0                                                                 PRNTVL  95
      JSSCXS = 0                                                                PRNTVL  96
      IDX1S = 0                                                                 PRNTVL  97
C              loop over each keyword                                           PRNTVL  98
  100 JK = JK + 1                                                               PRNTVL  99
      JKWcur = JK                                                               FIX14  279
      IF (JK.GT.NKW) THEN                                                       FIX14  280
        JKWcur = 0                                                              FIX14  281
        GOTO 1000                                                               FIX14  282
      ENDIF                                                                     FIX14  283
      JKX = IKW + JK - 1                                                        PRNTVL 101
      KTYPE = KONTXT(8,JKX)                                                     PRNTVL 102
      NWDS = KONTXT(9,JKX)                                                      PRNTVL 103
C              number of words per list element (possibly greater than 1        PRNTVL 104
C              for literals)                                                    PRNTVL 105
      NWPI = 1                                                                  PRNTVL 106
      IF (KTYPE.EQ.4) NWPI = KONTXT(10,JKX)                                     PRNTVL 107
      IDX1 = KONTXT(12,JKX) - KONTXT(12,IKW) + 1                                PRNTVL 108
      IF (IDX1.LE.IDX1S) GO TO 100                                              PRNTVL 109
      IDX1S = IDX1                                                              PRNTVL 110
      IDX = IDX0 + IDX1                                                         PRNTVL 111
      IDTX = IDX + NSAVE                                                        PRNTVL 112
      IVX = IDTX + 2*LVAL                                                       PRNTVL 113
      IDT = IUNPKB(1,5,IA(IDTX))                                                PRNTVL 114
C         No input, skip                                                        PRNTVL 115
      IF (IDT.EQ.0) GO TO 100                                                   PRNTVL 116
      IF (ITYPLS(AA(IVX)).EQ.ITYPLS(UNDEF(3))) GO TO 100                        PRNTVL 118
      IF (ITYPLS(AA(IVX)).EQ.ITYPLS(UNDEF(4))) GO TO 100                        PRNTVL 119
      INCR = 1                                                                  PRNTVL 120
      IF (KTYPE.EQ.4) INCR=NWPI                                                 PRNTVL 121
C              Loop over all the items in a value list                          PRNTVL 122
      DO 500 IWD=1,NWDS,INCR                                                    PRNTVL 123
C         Wrong kind of input, skip                                             PRNTVL 124
      IF (ITYPLS(AA(IVX)).EQ.ITYPLS(UNDEF(3))) GO TO 100                        PRNTVL 127
      IF (ITYPLS(AA(IVX)).EQ.ITYPLS(UNDEF(4))) GO TO 100                        PRNTVL 128
      IF (IDT.NE.IDTYPE(1,ILSLD) .AND. IDT.NE.IDTYPE(2,ILSLD)) GO TO 100        PRNTVL 129
C              If subcommand fill, don't do input print                         PRNTVL 130
      JSSCX = 0                                                                 PRNTVL 131
      ISCF = 0                                                                  PRNTVL 132
C              6th bit of data type flags whether data value came               PRNTVL 133
C              from a subcommand.                                               PRNTVL 134
      IF (JREF.GT.0 .AND. IOPCDT(11,JOPCDT).NE.99) THEN                         PRNTVL 135
          ISCF = IUNPKB(6,6,IA(IDTX))                                           PRNTVL 136
      END IF                                                                    PRNTVL 137
      IF (ILSLD.EQ.1 .AND. ISCF.GT.0)  GO TO 100                                PRNTVL 138
      IF (ILSLD.EQ.3) THEN                                                      PRNTVL 139
C              Not a subcommand, so skip                                        PRNTVL 140
          IF (JREF.EQ.0) GO TO 100                                              PRNTVL 141
          IF (ISCF.EQ.0) GO TO 100                                              PRNTVL 142
          IA(IDTX)=IPACKB(6,6,0,IA(IDTX))                                       PRNTVL 143
          ISCX = 0                                                              PRNTVL 144
C              Check value range of subcommand to find out which                PRNTVL 145
C              subcommand data came from.                                       PRNTVL 146
          IF (NSC.GT.0) THEN                                                    PRNTVL 147
              DO I=1,NSC                                                        PRNTVL 148
                  IF (IVX.GE.ISCVX1(I) .AND. IVX.LE.ISCVXN(I)) ISCX=I           PRNTVL 149
              END DO                                                            PRNTVL 150
          END IF                                                                PRNTVL 151
C              Set the subcommand symbol table index                            PRNTVL 152
          IF (ISCX.GT.0) JSSCX=IA(IDX0+NSAVE+LVAL+ISCVX(ISCX))                  PRNTVL 153
C              Otherwise check for s-c name change                              PRNTVL 154
          IF (JSSCX.NE.JSSCXS) THEN                                             PRNTVL 155
              LEAD =1                                                           PRNTVL 156
              CALL MOVEN(ISYMTB(1,JSSCX),NAME(1),8)                             PRNTVL 157
          END IF                                                                PRNTVL 158
          JSSCXS = JSSCX                                                        PRNTVL 159
      END IF                                                                    PRNTVL 160
C              Set the message number                                           PRNTVL 161
      M = MSGNM0(ILSLD)                                                         PRNTVL 162
C              If value is not numeric                                          PRNTVL 163
      IF (KTYPE.EQ.4 .OR. KTYPE.EQ.2 .OR. KTYPE.EQ.3 .OR. KTYPE.EQ.8            PRNTVL 164
     1    .OR. KTYPE.EQ.10 .OR. KTYPE.EQ.12 .OR. KTYPE.EQ.13 .OR.               PRNTVL 165
     2    KTYPE.EQ.18 .OR. KTYPE.EQ.20) M=M+4                                   PRNTVL 166
      MSGNUM = M                                                                PRNTVL 167
C              If REQUIRED/UNUSED                                               FIX14  284
      IF(ITYPLS(AA(IVX)).EQ.ITYPLS(UNDEF(1))  .or.                              FIX14  285
     $   ITYPLS(AA(IVX)).EQ.ITYPLS(UNDEF(2)) ) THEN                             FIX14  286
C              If not processing a sub-command                                  FIX14  287
        IF((JOPCDT .NE. 9) .and.                                                FIX14  288
     $     (JOPCDT.LT.49 .or. JOPCDT.GT.54) .and.                               FIX14  289
     $     (JOPCDT.LT.56 .or. JOPCDT.GT.58) ) THEN                              FIX14  290
C              If REQUIRED then throw ERROR                                     FIX14  291
          IF(ITYPLS(AA(IVX)).EQ.ITYPLS(UNDEF(1))) THEN                          FIX14  292
            CALL MSG2(24,NAME,KONTXT(1,JKX),IUNDEF,LEAD)                        FIX14  293
          ENDIF                                                                 FIX14  294
C              If UNUSED and not an expression result then throw WARNING        FIX14  295
          IF((ITYPLS(AA(IVX)).EQ.ITYPLS(UNDEF(2))) .and.                        FIX14  296
     $       (ITYPLS(AA(IVX-LVAL)).EQ.ITYPLS(UNDEF(2)))  ) THEN                 bug     17
            I = IUNPKB(1,5,AA(IVX-2*LVAL))                                      FIX14  298
            IF(I.NE. 2 .and. I.NE. 4 .and. I.NE. 6 .and. I.NE. 8 .and.          bug     18
     $         I.NE.10 .and. I.NE.12 .and. I.NE.14) THEN                        bug     19
              CALL MSG2(47,NAME,KONTXT(1,JKX),IUNUSE,LEAD)                      bug     20
C             remove unused flag and replace with initialization value          bug     21
C             of type DOE-2 default value                                       bug     22
              AA(IVX-2*LVAL) = TYPLS(IPACKB(1,5,1,AA(IVX-2*LVAL)))              bug     23
              AA(IVX-LVAL)   = UNDEF(1)                                         bug     24
            ENDIF                                                               bug     25
          ENDIF                                                                 FIX14  302
        ENDIF                                                                   FIX14  303
        LEAD=0                                                                  FIX14  304
        GOTO 100                                                                FIX14  305
C              Print numbers                                                    FIX14  306
      ELSE IF (KTYPE.EQ.1 .OR. KTYPE.EQ.6 .OR. KTYPE.EQ.5) THEN                 FIX14  307
          IF (LEAD.EQ.0) MSGNUM = M + 2                                         PRNTVL 170
          CALL MSG2(MSGNUM,NAME,KONTXT(1,JKX),IA(IVX),KONTXT(7,JKX))            PRNTVL 171
          LEAD = 0                                                              PRNTVL 172
C              Print symbols                                                    PRNTVL 173
      ELSE IF (KTYPE.EQ.2 .OR. KTYPE.EQ.3 .OR. KTYPE.EQ.8 .OR.                  PRNTVL 174
     1         KTYPE.EQ.10) THEN                                                PRNTVL 175
          IF (LEAD.EQ.0) MSGNUM = M + 2                                         PRNTVL 176
          JSYM = IA(IVX)                                                        PRNTVL 177
          IF(JSYM.GT.0) THEN                                                    FIX14  308
            IF(JSYM.LE.NSYMTB) THEN                                             FIX14  309
              CALL MSG2(MSGNUM,NAME,KONTXT(1,JKX),                              FIX14  310
     $                         ISYMTB(1,JSYM),KONTXT(7,JKX))                    FIX14  311
            ELSE                                                                FIX14  312
              CALL MSG2(MSGNUM,NAME,KONTXT(1,JKX),                              FIX14  313
     $             '** EXPRESSION ERROR - NO NAME **',KONTXT(7,JKX))            FIX14  314
            ENDIF                                                               FIX14  315
            LEAD=0                                                              FIX14  316
          ENDIF                                                                 FIX14  317
C              PRINT OPTIONAL LISTS                                             PRNTVL 181
      ELSE IF (KTYPE.GE.11 .AND. KTYPE.LE.19) THEN                              PRNTVL 182
          ILP = IA(IVX)                                                         PRNTVL 183
          NLV = IA(ILP)                                                         PRNTVL 184
          DO ILX=1,NLV                                                          PRNTVL 185
              IF (LEAD.EQ.0) MSGNUM = M + 2                                     PRNTVL 186
C              Optional list of numbers                                         PRNTVL 187
              IF (KTYPE.EQ.11 .OR. KTYPE.EQ.15 .OR. KTYPE.EQ.16) THEN           PRNTVL 188
                  CALL MSG2(MSGNUM,NAME,KONTXT(1,JKX),IA(ILP+ILX+1),            PRNTVL 189
     1                      KONTXT(7,JKX))                                      PRNTVL 190
                  LEAD = 0                                                      PRNTVL 191
C              Optional list of symbols                                         PRNTVL 192
              ELSEIF(KTYPE.EQ.12 .OR. KTYPE.EQ.13 .OR. KTYPE.EQ.18) THEN        PRNTVL 193
                  JSYM = IA(ILP+ILX+1)                                          PRNTVL 194
                  IF (JSYM.GT.0) CALL MSG2(MSGNUM,NAME,KONTXT(1,JKX),           PRNTVL 195
     1                                     ISYMTB(1,JSYM),KONTXT(7,JKX))        PRNTVL 196
                  IF (JSYM.GT.0) LEAD = 0                                       PRNTVL 197
              END IF                                                            PRNTVL 198
          END DO                                                                PRNTVL 199
C              Print CHILDREN (get from reference table for child command)      PRNTVL 200
      ELSE IF (KTYPE.EQ.20) THEN                                                PRNTVL 201
          JOPCDTc = JOPSRC(11,KONTXT(10,JKX))                                   PRNTVL 202
          ILX = IOPCDT(14,JOPCDTc)                                              PRNTVL 203
          ILP = ILX + IOPCDT(13,JOPCDTc) - 1                                    PRNTVL 204
          DO JREFc=ILX,ILP                                                      PRNTVL 205
              IF (LEAD.EQ.0) MSGNUM = M + 2                                     PRNTVL 206
              IF (IREFTB(4,JREFc) .EQ. JREF) THEN                               PRNTVL 207
                  JSYM = IREFTB(1,JREFc)                                        PRNTVL 208
                  IF (JSYM.NE.0) THEN                                           PRNTVL 209
                       CALL MSG2(MSGNUM,NAME,KONTXT(1,JKX),                     PRNTVL 210
     1                           ISYMTB(1,JSYM),KONTXT(7,JKX))                  PRNTVL 211
                       LEAD = 0                                                 PRNTVL 212
                  END IF                                                        PRNTVL 213
              END IF                                                            PRNTVL 214
          ENDDO                                                                 PRNTVL 215
C              Print literals                                                   PRNTVL 216
      ELSE IF (KTYPE.EQ.4) THEN                                                 PRNTVL 217
          NWLEFT = NWPI                                                         PRNTVL 218
          NL = NWPI/8                                                           PRNTVL 219
          DO IL=1,NL                                                            PRNTVL 220
              IF (LEAD.EQ.0) MSGNUM = M + 2                                     PRNTVL 221
              CALL FILLN(KBLANK,LITFIL(1),8)                                    PRNTVL 222
              NWPRNT = MIN0(NWLEFT,8)                                           PRNTVL 223
              CALL MOVEN(IA(IVX+(IL-1)*8),LITFIL(1),NWPRNT)                     PRNTVL 224
              CALL MSG2(MSGNUM,NAME,KONTXT(1,JKX),LITFIL(1),                    PRNTVL 225
     1                  KONTXT(7,JKX))                                          PRNTVL 226
              LEAD = 0                                                          PRNTVL 227
              NWLEFT = NWLEFT - 8                                               PRNTVL 228
          END DO                                                                PRNTVL 229
      END IF                                                                    PRNTVL 230
      IVX = IVX + INCR                                                          PRNTVL 231
  500 IDTX = IDTX + INCR                                                        PRNTVL 232
      GO TO 100                                                                 PRNTVL 233
 1000 CONTINUE                                                                  PRNTVL 234
      RETURN                                                                    PRNTVL 235
      END                                                                       PRNTVL 236
      SUBROUTINE RNGCHK(JOPCDT,JREF)                                            RNGCHK   2
C                                                                               RNGCHK   3
C              Do a numeric value range check on the values of an               RNGCHK   4
C              instance of a command                                            RNGCHK   5
C                                                                               RNGCHK   6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      COMMON /JOPS  / JSOP,JZOP,JSROP,JCFOP,ISSOPS(7),IZSOPS(3)                 -048b   23
      COMMON /ISVS  / ISSVPS(7),IZSVPS(3)                                       -045a   38
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON  /SPVALX/ IHP, IAP, IVP, ISHPP, IWP, IDPTHP, ISCP, IPRCAP,         /SPVALX/ 2
     1                 IWFP, ILTP, IINFMP, INZHP, IPLP, IPSP, ILKWP,            /SPVALX/ 3
     2                 ITKWP, IEKWP, IPAP, ILWSFP, ITWSFP, IPOLSP,              GEO4     1
     3                 IEQWFP, KWH, KWA, KWV, KWSHP, KWW, KWDPTH,               /SPVALX/ 5
     4                 KWSC, KWLT, KWINFM, KWNZH, KWPL, KWPS,                   /SPVALX/ 6
     5                 KWLKW, KWTKW, KWEKW, KWPA, KWLWSF, KWTWSF,               /SPVALX/ 7
     6                 KWEWSF, IFURTP, IFURFP, IFURWP, IFLRWP, KWWF,            /SPVALX/ 8
     7                 KWFLRW,ILTSP,NINFKY,INFKYP(20),DEFINF(10,4),             LTSYS1   2
     8                 ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM,             DFTEXP 197
     9                 ISPLOCP,ISPDIS,NSPDIS                                    DFTEXP 198
C              If no command table index then return                            RNGCHK  18
      IF (JOPCDT.EQ.0) RETURN                                                   RNGCHK  19
      NKW    = IOPCDT(10,JOPCDT)                                                RNGCHK  20
C              If no keyword for this command then return                       RNGCHK  21
      IF (NKW.EQ.0) RETURN                                                      RNGCHK  22
      IKW    = IOPCDT(9,JOPCDT)                                                 RNGCHK  23
      LVAL   = IOPCDT(16,JOPCDT)                                                RNGCHK  24
      NSAVE  = IOPCDT(17,JOPCDT)                                                RNGCHK  25
C             pickup pointer to object data                                     RNGCHK  26
      IF (JREF.GT.0) THEN                                                       RNGCHK  27
C              reference table for this command                                 RNGCHK  28
          IDX0  = IREFTB(2,JREF)                                                RNGCHK  29
          JSYMX = IREFTB(1,JREF)                                                RNGCHK  30
      ELSE                                                                      RNGCHK  31
C              no reference table for this command                              RNGCHK  32
          IDX0   = IOPCDT(14,JOPCDT)                                            RNGCHK  33
          JREFLK = 0                                                            RNGCHK  34
          JSYMX  = 0                                                            RNGCHK  35
      END IF                                                                    RNGCHK  36
C              if negative type command get TYPE and get keyword list           RNGCHK  37
      IF(IOPCDT(24,JOPCDT).LT.0) THEN                                           RNGCHK  38
        ITYPE = IA(IDX0+NSAVE+2*LVAL+1)                                         RNGCHK  39
        IF(NOVAL(ITYPE).EQ.0) THEN                                              RNGCHK  40
          ITYPE = 1                                                             RNGCHK  41
        ELSE                                                                    RNGCHK  42
          ITYPE = ISYMTB(12,ITYPE)                                              RNGCHK  43
        END IF                                                                  RNGCHK  44
        IKW     = IKW + (ITYPE-1)*NKW                                           RNGCHK  45
        JTYPcur = ITYPE                                                         RNGCHK  46
      ENDIF                                                                     RNGCHK  47
      JK     = 0                                                                RNGCHK  48
      KTYPE  = 0                                                                RNGCHK  49
      JSYM   = 0                                                                RNGCHK  50
      IDX1S  = 0                                                                RNGCHK  51
C              loop over each keyword                                           RNGCHK  52
  100 JK     = JK + 1                                                           RNGCHK  53
      JKWcur = JK                                                               RNGCHK  54
      IF (JK.GT.NKW) THEN                                                       RNGCHK  55
        JKWcur = 0                                                              RNGCHK  56
        GOTO 1000                                                               RNGCHK  57
      ENDIF                                                                     RNGCHK  58
      JKX    = IKW + JK - 1                                                     RNGCHK  59
      KTYPE  = KONTXT(8,JKX)                                                    RNGCHK  60
      NWDS   = KONTXT(9,JKX)                                                    RNGCHK  61
C              number of words per list element (possibly greater than 1        RNGCHK  62
C              for literals)                                                    RNGCHK  63
      NWPI   = 1                                                                RNGCHK  64
      IF (KTYPE.EQ.4) NWPI = KONTXT(10,JKX)                                     RNGCHK  65
C              Skip keyword if not numeric input                                RNGCHK  66
      IF ((KTYPE.NE. 1).AND.(KTYPE.NE. 5).AND.(KTYPE.NE. 6).AND.                RNGCHK  67
     $    (KTYPE.NE.11).AND.(KTYPE.NE.15).AND.(KTYPE.NE.16)) GO TO 100          RNGCHK  68
      IDX1   = KONTXT(12,JKX) - KONTXT(12,IKW) + 1                              RNGCHK  69
C              skip if skeyword uses same value as last keyword                 RNGCHK  70
      IF (IDX1.LE.IDX1S) GO TO 100                                              RNGCHK  71
      IDX1S  = IDX1                                                             RNGCHK  72
      IDX    = IDX0 + IDX1                                                      RNGCHK  73
      IDTX   = IDX + NSAVE                                                      RNGCHK  74
      IVX    = IDTX + 2*LVAL                                                    RNGCHK  75
C              No input, skip                                                   RNGCHK  76
      INCR   = 1                                                                RNGCHK  77
      IF (KTYPE.EQ.4) INCR=NWPI                                                 RNGCHK  78
      VMIN   = TYPLS(KONTXT(10,JKX))                                            RNGCHK  79
      VMAX   = TYPLS(KONTXT(11,JKX))                                            RNGCHK  80
C              IF NO BOUNDS                                                     RNGCHK  81
      IF ((VMIN.EQ.0).AND.(VMAX.EQ.0)) GO TO 100                                RNGCHK  82
C              SET HIGH-CAUTION FLAG                                            RNGCHK  83
      HICAUT = 0.                                                               RNGCHK  84
      IF (KTYPE.EQ.1 .OR. KTYPE.EQ.11) HICAUT=1.                                RNGCHK  85
C              Loop over all the items in a value list                          RNGCHK  86
      DO IWD=1,NWDS,INCR                                                        RNGCHK  87
        IDT    = IUNPKB(1,5,IA(IDTX))                                           RNGCHK  88
C              Wrong kind of input, skip                                        RNGCHK  89
        IF (IDT.EQ.0) GO TO 450                                                 RNGCHK  90
        IF (NOVAL(AA(IVX)).EQ.0) GO TO 450                                      RNGCHK  91
C       IF (IDT.NE. .AND. IDT.NE.) GO TO 450                                    RNGCHK  92
        IF (KTYPE.LE.10) THEN                                                   RNGCHK  93
C              If value is not optional list                                    RNGCHK  94
          V = AA(IVX)                                                           RNGCHK  95
C              IF OUTSIDE BOUNDS                                                RNGCHK  96
          IF (V.LT.VMIN) THEN                                                   RNGCHK  97
            CALL MSG2 (28, KONTXT(10,JKX),KONTXT(11,JKX),DUM,DUM)               RNGCHK  98
          ENDIF                                                                 RNGCHK  99
          IF (V.GT.VMAX) THEN                                                   RNGCHK 100
C              IF NO BOUNDS                                                     RNGCHK 101
            IF (HICAUT.EQ.0.) THEN                                              RNGCHK 102
              CALL MSG2 (28,KONTXT(10,JKX),KONTXT(11,JKX),DUM,DUM)              RNGCHK 103
            ELSE                                                                RNGCHK 104
              CALL MSG2 (18,KONTXT(11,JKX),DUM,DUM,DUM)                         RNGCHK 105
            ENDIF                                                               RNGCHK 106
          ENDIF                                                                 RNGCHK 107
        ELSE                                                                    RNGCHK 108
C              Optional list of numbers                                         RNGCHK 109
          ILP = IA(IVX)                                                         RNGCHK 110
          NLV = IA(ILP)                                                         RNGCHK 111
          DO ILX=1,NLV                                                          RNGCHK 112
            V = AA(ILP+ILX+1)                                                   RNGCHK 113
C              IF OUTSIDE BOUNDS                                                RNGCHK 114
            IF (V.LT.VMIN) THEN                                                 RNGCHK 115
              CALL MSG2 (28, KONTXT(10,JKX),KONTXT(11,JKX),DUM,DUM)             RNGCHK 116
            ENDIF                                                               RNGCHK 117
            IF (V.GT.VMAX) THEN                                                 RNGCHK 118
C              IF NO BOUNDS                                                     RNGCHK 119
              IF (HICAUT.EQ.0.) THEN                                            RNGCHK 120
                CALL MSG2 (28,KONTXT(10,JKX),KONTXT(11,JKX),DUM,DUM)            RNGCHK 121
              ELSE                                                              RNGCHK 122
                CALL MSG2 (18,KONTXT(11,JKX),DUM,DUM,DUM)                       RNGCHK 123
              ENDIF                                                             RNGCHK 124
            ENDIF                                                               RNGCHK 125
          END DO                                                                RNGCHK 126
        END IF                                                                  RNGCHK 127
  450   IVX = IVX + INCR                                                        RNGCHK 128
        IDTX = IDTX + INCR                                                      RNGCHK 129
      ENDDO                                                                     RNGCHK 130
      GO TO 100                                                                 RNGCHK 131
 1000 CONTINUE                                                                  RNGCHK 132
      RETURN                                                                    RNGCHK 133
      END                                                                       RNGCHK 134
                                                                                -048   256
#if _WIN64                                                                   /* -048   257 */ 
      integer*8                                                                 -048   258
#else                                                                        /* -048   259 */ 
      integer*4                                                                 -048   260
#endif                                                                       /* -048   261 */ 
     &        function INIT_BDL( )                                              -048   262
      USE, INTRINSIC :: ISO_C_BINDING                                           -048   263
      USE BDLSTRUCT                                                             -048   264
      USE ERR_MOD                                                               -048   265
      USE MSGBOX                                                                -048   266
                                                                                INITBDL  3
      COMMON /DFT_STR/ numDFT,idftStr(3,1024)                                   -042L5b 19
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON /MOD_STRUCT/                                                       /MODSTR/ 2
     $ iNumMods,OrigData,iModData(35000)                                        -048y    1
      integer iNumMods,iOrigData,iModData                                       DFTEXP   9
      integer mod_struct_vars(35002)                                            -048y    2
      equivalence (mod_struct_vars(1),iNumMods),(OrigData,iOrigData)            DFTEXP  11
      COMMON /EXP_DLList/ expDLList(1000000)                                    -042c    6
      integer expDLList                                                         NEWEXP   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /HREP  / NVTLIM,IVTLIM(2,30),NRB,LRB,NHRP,LHRP,IRB,IHRP,          HVAC7    1
     $                 JRBOP,JHROP                                              HVAC7    2
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /IPARAM/ NPARAM, MPARAM, IPARAM(17,6000)                           -048t    1
      COMMON /IUNITS/ VKONV(300),DUMLOG(4),JUNITS(4,300,2),NUNITS,KUNITS        UNITS1   1
      INTEGER DUMLOG                                                            SUBTY1   1
      DIMENSION IUNITS(4,300)                                                   UNITS1   2
      EQUIVALENCE (IUNITS(1,1),JUNITS(1,1,1))                                   /IUNITS/ 4
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /KEYRD/ KEYREAD, SETUPF, fdfnm, wdfnm, iffnm, lffnm,               /KEYRD/  2
     $               kffnm, str2,                                               /KEYRD/  3
     $               ifdlength, iwdlength, iiflength, ilflength                 /KEYRD/  4
      CHARACTER*256 fdfnm, wdfnm, iffnm, lffnm, kffnm, str2                     /KEYRD/  5
      INTEGER SETUPF                                                            /KEYRD/  6
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      common  /MINC/   NINC, incfil(9), incnum(9), incsil(9), isilnt            /MINC/   2
     1               , incprL                                                   /MINC/   3
     2               , incprf, curfnm, incfnm(9)                                /MINC/   4
      character*256  incprf, curfnm, incfnm                                     -042L5b 21
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      IPDFLG = 1                                                                INITBDL 26
      SETUPF = 0                                                                INITBDL 27
      KEYREAD= 0                                                                INITBDL 28
c        initialize libraries to empty                                          INITBDL 29
      NLIB   = 0                                                                INITBDL 30
      NUSLIB = 0                                                                INITBDL 31
c        initialize predefined symbol count                                     INITBDL 32
      NPreDef= 0                                                                INITBDL 33
      CALL FILLN(0,LUSIDX,300000)                                               -48p    10
      NumNewRef = 0                                                             INITBDL 35
C        these are passed by calling application on subsequent calls            INITBDL 36
      args.NoScrnMsg   = 0                                                      INITBDL 37
      args.fDirLgth    = 0                                                      INITBDL 38
      args.wDirLgth    = 0                                                      INITBDL 39
      args.iFileLgth   = 0                                                      INITBDL 40
C        these are set after keyword file is read - initialize to zero          INITBDL 41
C        and set after keyword records are read                                 INITBDL 42
C              number and type of units on keyword file - set after DOEBDL(0)   INITBDL 43
      args.nUnits      = 0                                                      INITBDL 44
      args.kUnit       = 0                                                      INITBDL 45
C        number of commands in command table - set after LDLKEY read            INITBDL 46
      args.nCommands    = 0                                                     INITBDL 47
      args.nDOE2ver     = 0                                                     INITBDL 48
      args.pCallbackFunc= 0                                                     INITBDL 49
      pcallbackfuncERR  = 0                                                     INITBDL 50
C        setup some 32-bit far pointers to BDL memory for PD access             INITBDL 51
      args.commandPtr       = LOC(IOPCDT)                                       INITBDL 52
      args.nSymbolPtr       = LOC(NSYMTB)                                       INITBDL 53
      args.unitConvPtr      = LOC(VKONV)                                        INITBDL 54
      args.unitsBlockPtr    = LOC(JUNITS)                                       INITBDL 55
      args.unitsTypePtr     = LOC(METIN)                                        INITBDL 56
      args.undefPtr         = LOC(UNDEF)                                        INITBDL 57
      args.libIndexPtr      = LOC(NUSLIB)                                       INITBDL 58
      args.parametersPtr    = LOC(NPARAM)                                       INITBDL 59
      args.AA_ArrayPtr      = LOC(AA)                                           INITBDL 60
      args.IaxPtr           = LOC(IAX)                                          INITBDL 61
      args.nvtlimPTR        = LOC(NVTLIM)                                       INITBDL 62
      args.ivtlimPTR        = LOC(IVTLIM)                                       INITBDL 63
      args.LibLnkPTR        = LOC(LIBLNK)                                       INITBDL 64
      args.nLibLkPTR        = LOC(NLIBLK)                                       INITBDL 65
      args.expStructPtr     = LOC(exp_struct_vars(1))                           INITBDL 66
      args.errStructPtr     = LOC(pcallbackfuncERR)                             INITBDL 67
      args.modStructPtr     = LOC(mod_struct_vars(1))                           INITBDL 68
      args.dftStructPtr     = LOC(numDFT)                                       INITBDL 69
      args.expDepLstListPtr = LOC(expDLList)                                    INITBDL 70
      loc_args = LOC( args )                                                    INITBDL 71
      INIT_BDL = loc_args                                                       INITBDL 72
C        set up expression structures                                           INITBDL 73
      numDFT = 0                                                                INITBDL 74
      call filln(0,expDLList      ,1000000)                                     INITBDL 75
      call filln(0,exp_struct_vars,1424)                                        INITBDL 76
      call filln(0,mod_struct_vars,35002)                                       -048y    4
      call filln(0,idftStr(1,1),1024)                                           INITBDL 79
      call initbdlstruct(c_loc(args))                                           -048   267
      call initmodstruct(c_loc(mod_struct_vars))                                -048   268
      RETURN                                                                    INITBDL 82
      END                                                                       INITBDL 83
      integer function READ_KEY( )                                              READKEY  2
      IRETURN= 0                                                                READKEY  3
      READ_KEY = IRETURN                                                        READKEY  4
      RETURN                                                                    READKEY  5
      END                                                                       READKEY  6
      integer function SETUP_BDL( )                                             SETUPBDL 2
      USE BDLSTRUCT                                                             -048   269
      USE MSGBOX                                                                -048   270
      COMMON /DFT_STR/ numDFT,idftStr(3,1024)                                   -042L5b 19
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /KEYRD/ KEYREAD, SETUPF, fdfnm, wdfnm, iffnm, lffnm,               /KEYRD/  2
     $               kffnm, str2,                                               /KEYRD/  3
     $               ifdlength, iwdlength, iiflength, ilflength                 /KEYRD/  4
      CHARACTER*256 fdfnm, wdfnm, iffnm, lffnm, kffnm, str2                     /KEYRD/  5
      INTEGER SETUPF                                                            /KEYRD/  6
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
      Imsgflg= args.NoScrnMsg                                                   SETUPBDL 9
      KEYREAD= 0                                                                SETUPBDL10
      IRETURN= 0                                                                SETUPBDL11
      CALL SETUP ( -1, IRETURN )                                                SETUPBDL12
      IF(IRETURN .EQ. 0)  CALL LDLKEY                                           SETUPBDL13
      CLOSE( KEYFIL )                                                           SETUPBDL14
      CLOSE( LIBFIL )                                                           SETUPBDL15
      CLOSE( IUSLIB )                                                           SETUPBDL16
      CLOSE( ISTNDF )                                                           SETUPBDL17
      CLOSE( INPUT )                                                            SETUPBDL18
      CLOSE( IOUTPT )                                                           SETUPBDL19
      CLOSE( ICTRL )                                                            SETUPBDL20
      CLOSE( 80 )                                                               SETUPBDL21
      CLOSE( 22 )                                                               SETUPBDL22
      CLOSE( 15 )                                                               SETUPBDL23
      SETUP_BDL = IRETURN                                                       SETUPBDL24
      RETURN                                                                    SETUPBDL25
      END                                                                       SETUPBDL26
      SUBROUTINE SETUP( ICALL, IRETURN )                                        SETUP    2
      USE BDLSTRUCT                                                             -048   271
      USE MSGBOX                                                                -048   272
      USE ERR_MOD                                                               -048   273
      COMMON /DFT_STR/ numDFT,idftStr(3,1024)                                   -042L5b 19
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /IUNITS/ VKONV(300),DUMLOG(4),JUNITS(4,300,2),NUNITS,KUNITS        UNITS1   1
      INTEGER DUMLOG                                                            SUBTY1   1
      DIMENSION IUNITS(4,300)                                                   UNITS1   2
      EQUIVALENCE (IUNITS(1,1),JUNITS(1,1,1))                                   /IUNITS/ 4
      COMMON /KEYRD/ KEYREAD, SETUPF, fdfnm, wdfnm, iffnm, lffnm,               /KEYRD/  2
     $               kffnm, str2,                                               /KEYRD/  3
     $               ifdlength, iwdlength, iiflength, ilflength                 /KEYRD/  4
      CHARACTER*256 fdfnm, wdfnm, iffnm, lffnm, kffnm, str2                     /KEYRD/  5
      INTEGER SETUPF                                                            /KEYRD/  6
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      common  /MINC/   NINC, incfil(9), incnum(9), incsil(9), isilnt            /MINC/   2
     1               , incprL                                                   /MINC/   3
     2               , incprf, curfnm, incfnm(9)                                /MINC/   4
      character*256  incprf, curfnm, incfnm                                     -042L5b 21
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
                                                                                SETUP   15
      IUSLIB = 4                                                                SETUP   16
      LIBFIL = 10                                                               SETUP   17
      IW4FIL = 12                                                               SETUP   18
      IRETURN= 0                                                                SETUP   19
c                                                                               SETUP   20
      write(wdfnm,'(64A4)')(args.wDirLoc(i), i=1,args.wDirLgth)                 SETUP   21
      write(fdfnm,'(64A4)')(args.fDirLoc(i), i=1,args.fDirLgth)                 SETUP   22
      write(iffnm,'(64A4)')(args.iFileLoc(i),i=1,args.iFileLgth)                SETUP   23
      write(lffnm,'(32A4)')(args.lFileLoc(i),i=1,args.lFileLgth)                SETUP   24
      iwdLength = args.wDirLgth  * 4                                            SETUP   25
      ifdLength = args.fDirLgth  * 4                                            SETUP   26
      iffLength = args.iFileLgth * 4                                            SETUP   27
      ilfLength = args.lFileLgth * 4                                            SETUP   28
      IF(METIN .eq. 0) THEN                                                     SETUP   29
        kffnm  = fdfnm(1:ifdLength)//'BDLKEY.BIN'                               SETUP   30
        kffnml = ifdLength + 10                                                 SETUP   31
      ELSE                                                                      SETUP   32
        kffnm  = fdfnm(1:ifdLength)//'BDLKEYm.BIN'                              SETUP   33
        kffnml = ifdLength + 11                                                 SETUP   34
      ENDIF                                                                     SETUP   35
c              find input file name (assume form name.inp)                      SETUP   36
      DO I=1,iffLength                                                          SETUP   37
        IF(iffnm(iffLength-I+1:iffLength-I+1) .eq. '.')  THEN                   -44d5   56
          ifflen  = iffLength-I+1                                               -44d5   57
	  GOTO 5                                                                       SETUP   40
	ENDIF                                                                          SETUP   41
      ENDDO                                                                     SETUP   42
      ifflen  = iffLength                                                       SETUP   43
    5 curfnm = wdfnm(1:iwdLength)//iffnm                                        SETUP   44
c              Open OUTPUT file (replace old file if this is initial            SETUP   45
c              project read or import, add to end if PD server                  SETUP   46
c              function - defalut, geometry, fetch, etc. - call)                SETUP   47
      IF(ICALL .le. 0)  THEN                                                    SETUP   48
        str2 = wdfnm(1:iwdLength)//'DOEBDL.OUT'                                 SETUP   49
        lenstr2 = iwdLength + 10                                                SETUP   50
        OPEN( IOUTPT, FILE= str2,recl=1024,ACTION='READWRITE',IOSTAT=io,        SETUP   51
     $  ERR=11,SHARE='DENYWR',carriagecontrol='FORTRAN',                        -048   274
     $  STATUS='UNKNOWN')                                                       -048   275
        IF(io .ne. 0)  GOTO 11                                                  SETUP   53
        REWIND IOUTPT                                                           SETUP   54
        WRITE (IOUTPT,                                                          SETUP   55
     $    '(47H DOEBDL.out contains DOE-2.2 BDL output details)')               SETUP   56
        CLOSE (IOUTPT)                                                          SETUP   57
        IF(iffnm(ifflen:ifflen) .eq. '.')  THEN                                 SETUP   58
	  str2 = wdfnm(1:iwdLength)//iffnm(1:ifflen)//'BDL'                            SETUP   59
          lenstr2 = iwdLength + ifflen + 3                                      SETUP   60
        ELSE                                                                    SETUP   61
          str2 = wdfnm(1:iwdLength)//'DOEBDL.OUT'                               SETUP   62
          lenstr2 = iwdLength + 10                                              SETUP   63
	ENDIF                                                                          SETUP   64
        OPEN( IOUTPT, FILE= str2,recl=1024,ACTION='READWRITE',IOSTAT=io,        SETUP   65
     $  ERR=11,SHARE='DENYWR',carriagecontrol='FORTRAN',                        -048   276
     $  STATUS='UNKNOWN')                                                       -048   277
        IF(io .ne. 0)  GOTO 11                                                  SETUP   67
      ELSE                                                                      SETUP   68
        str2 = wdfnm(1:iwdLength)//'DOEBDL.OUT'                                 SETUP   69
        lenstr2 = iwdLength + 10                                                SETUP   70
        OPEN( IOUTPT, FILE= str2,recl=1024,ACTION='READWRITE',IOSTAT=io,        SETUP   71
     $  ERR=11,SHARE='DENYWR', carriagecontrol='FORTRAN',                       -048   278
     $  STATUS='UNKNOWN', ACCESS='append')                                      -048   279
        IF(io .ne. 0)  GOTO 11                                                  SETUP   74
      ENDIF                                                                     SETUP   75
c              Open INPUT file                                                  SETUP   76
      str2 = curfnm                                                             SETUP   77
      lenstr2 = iwdLength + iffLength                                           SETUP   78
      IF((ICALL .ge. 0) .and. (ICALL .le. 1))  THEN                             SETUP   79
        open ( INPUT, file=curfnm,ERR=10,ACTION='READ',IOSTAT=io,               SETUP   80
     $         SHARE='DENYNONE',STATUS='OLD')                                   SETUP   81
      ELSE                                                                      SETUP   82
        open ( INPUT, file=curfnm,ERR=10,IOSTAT=io,                             SETUP   83
     $         SHARE='DENYNONE',STATUS='UNKNOWN')                               SETUP   84
      ENDIF                                                                     SETUP   85
      IF(io .ne. 0)  GOTO 10                                                    SETUP   86
c                                                                               SETUP   87
      IF(ilfLength .gt. 0) THEN                                                 SETUP   88
        str2=lffnm                                                              SETUP   89
        lenstr2 = ilfLength                                                     SETUP   90
        OPEN( IUSLIB, FILE= lffnm, FORM='FORMATTED',ERR=10,IOSTAT=io,           SETUP   91
     $        ACTION='READ',SHARE='DENYNONE',status='UNKNOWN')                  SETUP   92
        IF(io .ne. 0)  GOTO 10                                                  SETUP   93
      ELSE                                                                      SETUP   94
        str2='USER LIBRARY FILE NAME WAS NOT SPECIFIED'                         SETUP   95
        lenstr2 = 40                                                            SETUP   96
        GOTO 10                                                                 SETUP   97
      ENDIF                                                                     SETUP   98
c                                                                               SETUP   99
      str2 = wdfnm(1:iwdLength)//iffnm(1:ifflen)//'STD'                         SETUP  100
      lenstr2 = iwdLength + ifflen + 3                                          SETUP  101
      OPEN( ISTNDF, FILE=str2,ERR=10,ACTION='READWRITE',IOSTAT=io,              SETUP  102
     $       SHARE='DENYNONE',FORM='UNFORMATTED', STATUS='UNKNOWN' )            SETUP  103
      IF(io .ne. 0)  GOTO 10                                                    SETUP  104
c                                                                               SETUP  105
      str2 = wdfnm(1:iwdLength)//iffnm(1:ifflen)//'CTL'                         SETUP  106
      lenstr2 = iwdLength + ifflen + 3                                          SETUP  107
      OPEN( ICTRL , FILE= str2,ERR=10,ACTION='READWRITE',IOSTAT=io,             SETUP  108
     $      SHARE='DENYWR',FORM='UNFORMATTED', STATUS='UNKNOWN' )               SETUP  109
      IF(io .ne. 0)  GOTO 10                                                    SETUP  110
c                                                                               SETUP  111
      IF(METIN .eq. 0) THEN                                                     SETUP  112
        str2 = fdfnm(1:ifdLength)//'BDLLIB.DAT'                                 SETUP  113
        lenstr2 = ifdLength + 10                                                SETUP  114
      ELSE                                                                      SETUP  115
        str2 = fdfnm(1:ifdLength)//'BDLLIBm.DAT'                                SETUP  116
        lenstr2 = ifdLength + 11                                                SETUP  117
      ENDIF                                                                     SETUP  118
      OPEN( LIBFIL, FILE=str2, FORM='FORMATTED',ERR=10,IOSTAT=io,               SETUP  119
     $      ACTION='READ',SHARE='DENYNONE', status='UNKNOWN')                   SETUP  120
      IF(io .ne. 0)  GOTO 10                                                    SETUP  121
      ilinex = 0                                                                SETUP  122
      iulinx = 0                                                                SETUP  123
c                                                                               SETUP  124
      str2 = wdfnm(1:iwdLength)//iffnm(1:ifflen)//'LOG'                         SETUP  125
      lenstr2 = iwdLength + ifflen + 3                                          SETUP  126
      open( 15 , file= str2,ERR=10,ACTION='READWRITE',IOSTAT=io,                SETUP  127
     $      FORM='FORMATTED',SHARE='DENYWR', status='UNKNOWN' )                 SETUP  128
      IF(io .ne. 0)  GOTO 10                                                    SETUP  129
C                                                                               SETUP  130
      str2=kffnm                                                                SETUP  131
      lenstr2 = kffnml                                                          SETUP  132
      IF( ICALL .LE. 1 ) THEN                                                   SETUP  133
        OPEN( KEYFIL,FILE=kffnm,ERR=10,ACTION='READ',IOSTAT=io,                 SETUP  134
     $        SHARE='DENYWR',STATUS='OLD' )                                     SETUP  135
        IF(io .ne. 0)  GOTO 10                                                  SETUP  136
        CLOSE (KEYFIL)                                                          SETUP  137
      ENDIF                                                                     SETUP  138
      IF( ICALL .GE. 1 ) RETURN                                                 SETUP  139
      OPEN(KEYFIL,FILE=kffnm,RECL=550000,RECORDTYPE='variable',                 SETUP  140
     $     ACTION='READ',SHARE='DENYWR',FORM='UNFORMATTED',STATUS='OLD')        SETUP  141
#ifdef _DLL                                                                  /* -048   280 */ 
      CALL DOEBDL(0)                                                            -048   281
#else                                                                        /* -048   282 */ 
C     CALL DOEBDL(0)                                                            SETUP  142
#endif                                                                       /* -048   283 */ 
      CLOSE (KEYFIL)                                                            SETUP  143
      args.nUnits = NUNITS                                                      SETUP  144
      args.kUnit = KUNITS                                                       SETUP  145
c                                                                               SETUP  146
C              SWITCH LITTERALS-UNITS SYMBOLS IF NECESSARY                      SETUP  147
      IF (METIN.NE.METKVT)  THEN                                                SETUP  148
        DO I=1,300                                                              SETUP  149
          DO J=1,4                                                              SETUP  150
            K            = JUNITS(J,I,1)                                        SETUP  151
            JUNITS(J,I,1)= JUNITS(J,I,2)                                        SETUP  152
            JUNITS(J,I,2)= K                                                    SETUP  153
          ENDDO                                                                 SETUP  154
        ENDDO                                                                   SETUP  155
        METKVT = METIN                                                          SETUP  156
      ENDIF                                                                     SETUP  157
      SETUPF  = 1                                                               SETUP  158
      KEYREAD = 0                                                               SETUP  159
      RETURN                                                                    SETUP  160
   10 WRITE (IOUTPT,9010) str2(1:lenstr2)                                       SETUP  161
 9010 FORMAT(' ERROR: Cannot open a required file: '/1X,A/                      SETUP  162
     $' It does not exist or is in use. Correct this and retry.')               SETUP  163
   11 IF (Imsgflg .eq. 0)                                                       045a1    4
     &  Irv= messageboxi( NULL, 'ERROR: Cannot open a required file '           045a1    5
     $//char(10)//char(13)//char(10)//char(13)//str2(1:lenstr2)                 SETUP  165
     $//char(10)//char(13)//char(10)//char(13)//                                SETUP  166
     $'It does not exist or is in use.  Please correct this '//                 SETUP  167
     $'problem and retry'                                                       SETUP  168
     $//char(0),'DOE-2.2 BDL Server - SETUP'//char(0),                          SETUP  169
     $MB_OK + MB_ICONSTOP + MB_TASKMODAL )                                      SETUP  170
      IRETURN = -1                                                              SETUP  171
      RETURN                                                                    SETUP  172
      END                                                                       SETUP  173
      SUBROUTINE LDLKEY                                                         LDLKEY   2
      USE BDLSTRUCT                                                             -048   284
      USE MSGBOX                                                                -048   285
      USE ERR_MOD                                                               -048   286
                                                                                LDLKEY   5
      COMMON /DFT_STR/ numDFT,idftStr(3,1024)                                   -042L5b 19
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      DIMENSION CONTXT(16,37500),KONTXT(16,37500)                               PC22     1
      EQUIVALENCE (CONTXT(1,1),KONTXT(1,1)),                                    /CONTXT/ 3
     1            (CONTXT(1,1),AA(1))                                           /CONTXT/ 4
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /KEYRD/ KEYREAD, SETUPF, fdfnm, wdfnm, iffnm, lffnm,               /KEYRD/  2
     $               kffnm, str2,                                               /KEYRD/  3
     $               ifdlength, iwdlength, iiflength, ilflength                 /KEYRD/  4
      CHARACTER*256 fdfnm, wdfnm, iffnm, lffnm, kffnm, str2                     /KEYRD/  5
      INTEGER SETUPF                                                            /KEYRD/  6
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON /IUNITS/ VKONV(300),DUMLOG(4),JUNITS(4,300,2),NUNITS,KUNITS        UNITS1   1
      INTEGER DUMLOG                                                            SUBTY1   1
      DIMENSION IUNITS(4,300)                                                   UNITS1   2
      EQUIVALENCE (IUNITS(1,1),JUNITS(1,1,1))                                   /IUNITS/ 4
      COMMON /KEYLEN/  NCONTX,ICONTX,IDFT,NDFT,IEXP,NEXP,LKEYAA,KEYFLG          /KEYLEN/ 2
      COMMON /NSYMTB/ NSYMTB, MSYMTB, NPreDef                                   DFTEX3   5
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON  /SPVALX/ IHP, IAP, IVP, ISHPP, IWP, IDPTHP, ISCP, IPRCAP,         /SPVALX/ 2
     1                 IWFP, ILTP, IINFMP, INZHP, IPLP, IPSP, ILKWP,            /SPVALX/ 3
     2                 ITKWP, IEKWP, IPAP, ILWSFP, ITWSFP, IPOLSP,              GEO4     1
     3                 IEQWFP, KWH, KWA, KWV, KWSHP, KWW, KWDPTH,               /SPVALX/ 5
     4                 KWSC, KWLT, KWINFM, KWNZH, KWPL, KWPS,                   /SPVALX/ 6
     5                 KWLKW, KWTKW, KWEKW, KWPA, KWLWSF, KWTWSF,               /SPVALX/ 7
     6                 KWEWSF, IFURTP, IFURFP, IFURWP, IFLRWP, KWWF,            /SPVALX/ 8
     7                 KWFLRW,ILTSP,NINFKY,INFKYP(20),DEFINF(10,4),             LTSYS1   2
     8                 ILTGSYS,ILUMNO,ILUMDIS,IWKHT,IELILL,ILSPECM,             DFTEXP 197
     9                 ISPLOCP,ISPDIS,NSPDIS                                    DFTEXP 198
                                                                                LDLKEY  21
	  INTEGER TEMP                                                                 LDLKEY  22
      IF(KEYREAD .eq. 1)  RETURN                                                LDLKEY  23
C               open keyword file                                               LDLKEY  24
      OPEN( KEYFIL,FILE=kffnm,RECL=550000,RECORDTYPE='variable',                LDLKEY  25
     1  ACTION='READ',SHARE='DENYWR',FORM='UNFORMATTED',STATUS='OLD')           LDLKEY  26
      REWIND KEYFIL                                                             LDLKEY  27
      READ (KEYFIL)                                                             LDLKEY  28
C               INITIALIZE ZERO LEVEL STUFF                                     LDLKEY  29
      CALL INIT0(IA,0)                                                          LDLKEY  30
C               READ LENGTH RECORD FROM KEYWORD FILE                            LDLKEY  31
      READ (KEYFIL) KUNITS,NSYMTB,MSYMTB,NCONTX,ICONTX,NOPCDT,                  LDLKEY  32
     1              IDFT, NDFT, IEXP, NEXP, LKEYAA                              LDLKEY  33
C               MAKE ROOM FOR LEN WORDS IN IA                                   LDLKEY  34
      CALL CKAA(IA,LKEYAA+1000)                                                 LDLKEY  35
C               READ IN SYMBOL, CONTEXT, COMMAND, AND DEFAULT TABLES            LDLKEY  36
      READ (KEYFIL) ((ISYMTB(I,J), I=1,16), J=1,NSYMTB),                        LDLKEY  37
     1              ((KONTXT(I,J), I=1,16), J=ICONTX,NCONTX),                   LDLKEY  38
     2              ((IOPCDT(I,J), I=1,24), J=1,NOPCDT)                         LDLKEY  39
      READ (KEYFIL) (IA(I),I=IDFT,NDFT)                                         LDLKEY  40
      IF(IEXP .NE. 0)  THEN                                                     LDLKEY  41
C               READ IN DEFAULT EXPRESSION RECORD (if there)                    LDLKEY  42
        READ (KEYFIL) (IA(I),I=IEXP,NEXP)                                       LDLKEY  43
      ELSE                                                                      LDLKEY  44
        READ (KEYFIL)                                                           LDLKEY  45
      ENDIF                                                                     LDLKEY  46
C                                                                               LDLKEY  47
C                                                                               LDLKEY  48
C              CONVERTS  KEYLIB IF NECESSARY.                                   LDLKEY  49
      CLOSE (KEYFIL)                                                            LDLKEY  50
   30 IF(METIN.NE.KUNITS) CALL KEYVRT(1-METIN,LEN,AA, IDUM )                    LDLKEY  51
C                                                                               LDLKEY  52
C               SET IAX TO CURRENT LAST WORD USED                               LDLKEY  53
      IAX    = LKEYAA                                                           LDLKEY  54
      KEYFLG = 0                                                                LDLKEY  55
C               INITIALIZE LDL STUFF                                            LDLKEY  56
      CALL INITL                                                                LDLKEY  57
      CALL INITS                                                                LDLKEY  58
      CALL INITP                                                                LDLKEY  59
      CALL INITE                                                                LDLKEY  60
      LDSTYP = 1                                                                LDLKEY  61
      args.nCommands     = NOPCDT                                               LDLKEY  62
      CALL RDDFTS                                                               LDLKEY  63
      KEYREAD = 1                                                               LDLKEY  64
      RETURN                                                                    LDLKEY  65
      END                                                                       LDLKEY  66
      integer function IMPORT_BDL ( )                                           IMPRTBDL 2
      USE BDLSTRUCT                                                             -048   287
      USE MSGBOX                                                                -048   288
      USE ERR_MOD                                                               -048   289
                                                                                IMPRTBDL 5
      COMMON /DFT_STR/ numDFT,idftStr(3,1024)                                   -042L5b 19
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /KEYRD/ KEYREAD, SETUPF, fdfnm, wdfnm, iffnm, lffnm,               /KEYRD/  2
     $               kffnm, str2,                                               /KEYRD/  3
     $               ifdlength, iwdlength, iiflength, ilflength                 /KEYRD/  4
      CHARACTER*256 fdfnm, wdfnm, iffnm, lffnm, kffnm, str2                     /KEYRD/  5
      INTEGER SETUPF                                                            /KEYRD/  6
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      common  /MINC/   NINC, incfil(9), incnum(9), incsil(9), isilnt            /MINC/   2
     1               , incprL                                                   /MINC/   3
     2               , incprf, curfnm, incfnm(9)                                /MINC/   4
      character*256  incprf, curfnm, incfnm                                     -042L5b 21
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
      Imsgflg= args.NoScrnMsg                                                   IMPRTBDL18
      IRETURN = 0                                                               IMPRTBDL19
      IF( SETUPF .eq. 0)  THEN                                                  IMPRTBDL20
        CALL SETUP( 0, IRETURN )                                                IMPRTBDL21
      ELSE                                                                      IMPRTBDL22
        CALL SETUP( 1, IRETURN )                                                IMPRTBDL23
      ENDIF                                                                     IMPRTBDL24
      IF(IRETURN .NE. 0) THEN                                                   IMPRTBDL25
        IFATAL = -1                                                             IMPRTBDL26
        GOTO 10                                                                 IMPRTBDL27
      ENDIF                                                                     IMPRTBDL28
      IFATAL = 0                                                                IMPRTBDL29
      KRDNUM = 0                                                                IMPRTBDL30
      Ibkspf = 0                                                                IMPRTBDL31
      ITERM  = 0                                                                IMPRTBDL32
      KARD(81) = HOLL(14)                                                       IMPRTBDL33
      KARD(82) = HOLL(14)                                                       IMPRTBDL34
      KARDX  = 81                                                               IMPRTBDL35
      KARDI1 = 1                                                                IMPRTBDL36
      KARDI2 = 81                                                               IMPRTBDL37
      NOVRL  = 1                                                                IMPRTBDL38
      IPDFLG = 2                                                                IMPRTBDL39
      JOPcur = 0                                                                IMPRTBDL40
      JREFcur= 0                                                                IMPRTBDL41
      JKWcur = 0                                                                IMPRTBDL42
      JTYPcur= 1                                                                IMPRTBDL43
      CALL LDL(1)                                                               IMPRTBDL44
      IPDFLG = 1                                                                IMPRTBDL45
C     IF( IFATAL .ne. 0)                                                        IMPRTBDL46
C    $Irv= messageboxi( NULL, 'ERRORs were found during '//                     IMPRTBDL47
C    $   'the import of the BDL file'//char(10)//char(13)//                     IMPRTBDL48
C    $   '(importfile.BDL in the import directory contains details)'            IMPRTBDL49
C    $   //char(0),'DOE-2.2 BDL Server'//char(0), MB_OK                         IMPRTBDL50
C    $   + MB_ICONSTOP + MB_TASKMODAL )                                         IMPRTBDL51
      FLUSH( IOUTPT )                                                           -048   290
   10 CLOSE( LIBFIL )                                                           IMPRTBDL53
      CLOSE( IUSLIB )                                                           IMPRTBDL54
      CLOSE( ISTNDF )                                                           IMPRTBDL55
      CLOSE( INPUT )                                                            IMPRTBDL56
      CLOSE( IOUTPT )                                                           IMPRTBDL57
      CLOSE( ICTRL )                                                            IMPRTBDL58
      CLOSE( 80 )                                                               IMPRTBDL59
      CLOSE( 22 )                                                               IMPRTBDL60
      CLOSE( 15 )                                                               IMPRTBDL61
      IMPORT_BDL = IFATAL                                                       IMPRTBDL62
      RETURN                                                                    IMPRTBDL63
      END                                                                       IMPRTBDL64
      integer function READ_BDL ( )                                             READBDL  2
      USE BDLSTRUCT                                                             -048   291
      USE MSGBOX                                                                -048   292
      USE ERR_MOD                                                               -048   293
                                                                                READBDL  6
      COMMON /DFT_STR/ numDFT,idftStr(3,1024)                                   -042L5b 19
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON /KEYRD/ KEYREAD, SETUPF, fdfnm, wdfnm, iffnm, lffnm,               /KEYRD/  2
     $               kffnm, str2,                                               /KEYRD/  3
     $               ifdlength, iwdlength, iiflength, ilflength                 /KEYRD/  4
      CHARACTER*256 fdfnm, wdfnm, iffnm, lffnm, kffnm, str2                     /KEYRD/  5
      INTEGER SETUPF                                                            /KEYRD/  6
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      common  /MINC/   NINC, incfil(9), incnum(9), incsil(9), isilnt            /MINC/   2
     1               , incprL                                                   /MINC/   3
     2               , incprf, curfnm, incfnm(9)                                /MINC/   4
      character*256  incprf, curfnm, incfnm                                     -042L5b 21
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
                                                                                READBDL 16
      Imsgflg= args.NoScrnMsg                                                   READBDL 17
      KEYREAD= 0                                                                READBDL 18
      IRETURN= 0                                                                READBDL 19
      IFATAL = 0                                                                READBDL 20
      CALL SETUP( 0, IRETURN )                                                  READBDL 21
      IF(IRETURN .NE. 0) THEN                                                   READBDL 22
        IFATAL = -1                                                             READBDL 23
        GOTO 10                                                                 READBDL 24
      ENDIF                                                                     READBDL 25
      IPDFLG = 2                                                                READBDL 26
      JOPcur = 0                                                                READBDL 27
      JREFcur= 0                                                                READBDL 28
      JKWcur = 0                                                                READBDL 29
      JTYPcur= 1                                                                READBDL 30
#ifdef _DLL                                                                  /* -048   294 */ 
      CALL DOEBDL(1)                                                            -048   295
#else                                                                        /* -048   296 */ 
C     CALL DOEBDL(1)                                                            READBDL 31
#endif                                                                       /* -048   297 */ 
      IPDFLG = 1                                                                READBDL 32
C     IF( IFATAL .ne. 0)                                                        READBDL 33
C    $Irv= messageboxi( NULL, 'ERRORs were found during '//                     READBDL 34
C    $   'the reading of the project BDL file'//char(10)//char(13)//            READBDL 35
C    $   '(projectname.BDL in project directory contains details)'              READBDL 36
C    $   //char(0),'DOE-2.2 BDL Server'//char(0), MB_OK                         READBDL 37
C    $   + MB_ICONSTOP + MB_TASKMODAL )                                         READBDL 38
      FLUSH( IOUTPT )                                                           -048   298
   10 CLOSE( LIBFIL )                                                           READBDL 40
      CLOSE( IUSLIB )                                                           READBDL 41
      CLOSE( ISTNDF )                                                           READBDL 42
      CLOSE( INPUT )                                                            READBDL 43
      CLOSE( IOUTPT )                                                           READBDL 44
      CLOSE( ICTRL )                                                            READBDL 45
      CLOSE( 80 )                                                               READBDL 46
      CLOSE( 22 )                                                               READBDL 47
      CLOSE( 15 )                                                               READBDL 48
      READ_BDL = IFATAL                                                         READBDL 49
      RETURN                                                                    READBDL 50
      END                                                                       READBDL 51
      SUBROUTINE LOADS_WSF                                                      LOADSWSF 2
      USE BDLSTRUCT                                                             -048   299
      USE ERR_MOD                                                               -048   300
                                                                                LOADSWSF 3
      COMMON /DFT_STR/ numDFT,idftStr(3,1024)                                   -042L5b 19
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON /CTRL/  NOVRL,NPRUN,ISOLAR,LDSTYP,METIN,METOUT,METKVT              /CTRL/   2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /IUNITS/ VKONV(300),DUMLOG(4),JUNITS(4,300,2),NUNITS,KUNITS        UNITS1   1
      INTEGER DUMLOG                                                            SUBTY1   1
      DIMENSION IUNITS(4,300)                                                   UNITS1   2
      EQUIVALENCE (IUNITS(1,1),JUNITS(1,1,1))                                   /IUNITS/ 4
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /KEYRD/ KEYREAD, SETUPF, fdfnm, wdfnm, iffnm, lffnm,               /KEYRD/  2
     $               kffnm, str2,                                               /KEYRD/  3
     $               ifdlength, iwdlength, iiflength, ilflength                 /KEYRD/  4
      CHARACTER*256 fdfnm, wdfnm, iffnm, lffnm, kffnm, str2                     /KEYRD/  5
      INTEGER SETUPF                                                            /KEYRD/  6
CALL,/LIBFLG/                                                                   LOADSWSF15
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      common  /MINC/   NINC, incfil(9), incnum(9), incsil(9), isilnt            /MINC/   2
     1               , incprL                                                   /MINC/   3
     2               , incprf, curfnm, incfnm(9)                                /MINC/   4
      character*256  incprf, curfnm, incfnm                                     -042L5b 21
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /CLOCK / CLOCK(10)                                                 LOADSWSF20
      INTEGER         ICLOCK8                                                   LOADSWSF21
      CHARACTER*40    CLOCK_CHAR                                                LOADSWSF22
      EQUIVALENCE     (CLOCK_CHAR,CLOCK)                                        LOADSWSF23
      EQUIVALENCE     (ICLOCK8,CLOCK(8))                                        LOADSWSF24
                                                                                LOADSWSF25
      DATA IEND /4H .. /                                                        LOADSWSF27
                                                                                LOADSWSF28
C              UPDATE TIME AND DATE                                             LOADSWSF29
      CALL GETDAT ( ICDY,ICDM,ICDD )                                            LOADSWSF30
      CALL GETTIM ( ITDH,ITDM,ITDS,ITDHS )                                      LOADSWSF31
      WRITE (CLOCK_CHAR(:24),2001)ICDM,ICDD,ICDY,ITDH,ITDM,ITDS                 LOADSWSF32
 2001 FORMAT (I2,'/',I2.2,'/',I4,4X,I2,':',I2.2,':',I2.2)                       LOADSWSF33
      Imsgflg= args.NoScrnMsg                                                   LOADSWSF34
      KRDNUM = 2000000                                                          LOADSWSF35
      Ibkspf = 0                                                                LOADSWSF36
      ITERM  = 0                                                                LOADSWSF37
      KARD(81) = HOLL(14)                                                       LOADSWSF38
      KARD(82) = HOLL(14)                                                       LOADSWSF39
      KARDX  = 1                                                                LOADSWSF40
      KARDI1 = 1                                                                LOADSWSF41
      KARDI2 = 81                                                               LOADSWSF42
      DO I=1,20                                                                 LOADSWSF43
        CALL A4A1( IEND, KARD(1+(I-1)*4), 4 )                                   LOADSWSF44
      ENDDO                                                                     LOADSWSF45
      REWIND  ISTNDF                                                            LOADSWSF46
      CALL CHKPRN(IREFTB,ISYMTB)                                                LOADSWSF47
C               CHECK FOR REFERENCED BUT UNDEFINED SYMBOLS                      LOADSWSF48
      CALL SYMCK(ISYMTB,IERR)                                                   LOADSWSF49
C              CHECK THAT SCHEDULE AND DAY-SCHEDULE TYPES MATCH                 LOADSWSF50
      IF(IERR .EQ. 0)  CALL SCHTYP                                              LOADSWSF51
C              WRITE OUT SF RECORDS                                             LOADSWSF52
      CALL OUTFIL                                                               LOADSWSF53
C        Add dummy record for loads functions to ISTNDF                         LOADSWSF54
      WRITE(ISTNDF) 0,0                                                         LOADSWSF55
      CALL OUTFIS                                                               LOADSWSF56
C        Add dummy record for systems functions to ISTNDF                       LOADSWSF57
      CALL OUTFIP                                                               LOADSWSF58
      WRITE(ISTNDF) 0,0                                                         LOADSWSF59
      CALL OUTFIE                                                               LOADSWSF60
      REWIND  ICTRL                                                             LOADSWSF61
      IF(METIN .EQ. 1)  THEN                                                    LOADSWSF62
        WRITE (ICTRL) VKONV,JUNITS                                              LOADSWSF63
      ELSE                                                                      LOADSWSF64
        WRITE (ICTRL) VKONV,((JUNITS(I,J,2),I=1,4),J=1,300)                     LOADSWSF65
     $                     ,((JUNITS(I,J,1),I=1,4),J=1,300)                     LOADSWSF66
      ENDIF                                                                     LOADSWSF67
      WRITE ( ICTRL ) 1,1,1,1,1,(0,i=1,198),0,(0,i=1,99)                        LOADSWSF68
      FLUSH( IOUTPT )                                                           -048   301
   10 CLOSE( KEYFIL )                                                           LOADSWSF70
      CLOSE( LIBFIL )                                                           LOADSWSF71
      CLOSE( IUSLIB )                                                           LOADSWSF72
      CLOSE( ISTNDF )                                                           LOADSWSF73
      CLOSE( INPUT )                                                            LOADSWSF74
      CLOSE( IOUTPT )                                                           LOADSWSF75
      CLOSE( ICTRL )                                                            LOADSWSF76
      CLOSE( 80 )                                                               LOADSWSF77
      CLOSE( 22 )                                                               LOADSWSF78
      CLOSE( 15 )                                                               LOADSWSF79
                                                                                LOADSWSF80
      RETURN                                                                    LOADSWSF81
      END                                                                       LOADSWSF82
      integer function CALC_GEO ( )                                             CALCGEO  2
      USE BDLSTRUCT                                                             -048   302
      USE MSGBOX                                                                -048   303
      USE ERR_MOD                                                               -048   304
                                                                                CALCGEO  6
      COMMON /DFT_STR/ numDFT,idftStr(3,1024)                                   -042L5b 19
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /KEYRD/ KEYREAD, SETUPF, fdfnm, wdfnm, iffnm, lffnm,               /KEYRD/  2
     $               kffnm, str2,                                               /KEYRD/  3
     $               ifdlength, iwdlength, iiflength, ilflength                 /KEYRD/  4
      CHARACTER*256 fdfnm, wdfnm, iffnm, lffnm, kffnm, str2                     /KEYRD/  5
      INTEGER SETUPF                                                            /KEYRD/  6
CALL,/LIBFLG/                                                                   CALCGEO 12
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      common  /MINC/   NINC, incfil(9), incnum(9), incsil(9), isilnt            /MINC/   2
     1               , incprL                                                   /MINC/   3
     2               , incprf, curfnm, incfnm(9)                                /MINC/   4
      character*256  incprf, curfnm, incfnm                                     -042L5b 21
                                                                                CALCGEO 15
      Imsgflg= args.NoScrnMsg                                                   CALCGEO 16
      IRETURN= 0                                                                CALCGEO 17
      IFATAL = 0                                                                CALCGEO 18
      CALL SETUP( 2, IRETURN )                                                  CALCGEO 19
      IF(IRETURN .NE. 0) THEN                                                   CALCGEO 20
        IFATAL = -1                                                             CALCGEO 21
        GOTO 10                                                                 CALCGEO 22
      ENDIF                                                                     CALCGEO 23
      JOPcur = 0                                                                CALCGEO 24
      JREFcur= 0                                                                CALCGEO 25
      JKWcur = 0                                                                CALCGEO 26
      JTYPcur= 1                                                                CALCGEO 27
      CALL GEOALL                                                               CALCGEO 28
      FLUSH( IOUTPT )                                                           -048   305
   10 CLOSE( KEYFIL )                                                           CALCGEO 30
      CLOSE( LIBFIL )                                                           CALCGEO 31
      CLOSE( IUSLIB )                                                           CALCGEO 32
      CLOSE( ISTNDF )                                                           CALCGEO 33
      CLOSE( INPUT )                                                            CALCGEO 34
      CLOSE( IOUTPT )                                                           CALCGEO 35
      CLOSE( ICTRL )                                                            CALCGEO 36
      CLOSE( 80 )                                                               CALCGEO 37
      CLOSE( 22 )                                                               CALCGEO 38
      CLOSE( 15 )                                                               CALCGEO 39
                                                                                CALCGEO 40
      CALC_GEO = 1                                                              CALCGEO 41
      RETURN                                                                    CALCGEO 42
      END                                                                       CALCGEO 43
      integer function PD_DOEBDLE ( )                                           PDBDLE   2
                                                                                PDBDLE   3
C        Expression Module to BDL interface routine                             PDBDLE   4
C        command and arguments passed in bdl_str                                PDBDLE   5
C        args.pd_opcode - operation to perform                                  PDBDLE   6
c               1 - redo geometry calc                                          PDBDLE   7
c               2 - default fill                                                PDBDLE   8
c               3 - write standard file                                         PDBDLE   9
c               4 - library fetch                                               PDBDLE  10
c               5 - create/reuse object                                         PDBDLE  11
C        args.pd_sub_opcode - suboperation code                                 PDBDLE  12
c               0 - redo geometry/default calc (for all)                        PDBDLE  13
c               1 - redo geometry/default calc (for specified object)           PDBDLE  14
c               n - index (into libidx(10,1000) for library fetch               PDBDLE  15
C        args.pd_opcdt_indx - specified object cmd table index                  PDBDLE  16
C        args.pd_ref_tbl_indx - specified object ref table index                PDBDLE  17
                                                                                PDBDLE  18
      USE BDLSTRUCT                                                             -048   306
      USE MSGBOX                                                                -048   307
      USE ERR_MOD                                                               -048   308
      COMMON /DFT_STR/ numDFT,idftStr(3,1024)                                   -042L5b 19
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
                                                                                PDBDLE  34
      character*70 rlen                                                         PDBDLE  35
                                                                                PDBDLE  36
      IFATALS = IFATAL                                                          PDBDLE  37
      IFATALS = IFATAL                                                          -044c3  44
      rlen = ' '                                                                -044c3  45
                                                                                PDBDLE  38
C              Set BDL line number to 3000000 if this is an interactive call    PDBDLE  39
      IF( iBDLcall .eq. 0)  KRDNUM = 3000000                                    PDBDLE  40
      IF( args.pd_opcode .eq. 1)  THEN                                          PDBDLE  41
        IF( args.pd_sub_opcode .eq. 0)  THEN                                    PDBDLE  42
          CALL GEOALL                                                           PDBDLE  43
        ELSE                                                                    PDBDLE  44
          jopcdt = args.pd_opcdt_indx                                           PDBDLE  45
          jref   = args.pd_ref_tbl_indx                                         PDBDLE  46
          IF( jopcdt .eq. JOPFL ) CALL GEOFLR(JREF,JOPCDT)                      PDBDLE  47
          IF( jopcdt .eq. JOPSP ) CALL GEOSP(JREF,JOPCDT)                       PDBDLE  48
          IF( jopcdt .eq. JOPSH .or. jopcdt .eq. JOPFSH)                        PDBDLE  49
     $                            CALL GEOSHD(JREF,JOPCDT)                      PDBDLE  50
          IF( jopcdt .eq. JOPEW .or. jopcdt .eq. JOPUGW .or.                    PDBDLE  51
     $        jopcdt .eq. JOPIW .or. jopcdt .eq. JOPTW)                         PDBDLE  52
     $                            CALL GEOWL(JREF,JOPCDT)                       PDBDLE  53
          IF( jopcdt .eq. JOPWIN .or. jopcdt .eq. JOPDR)                        PDBDLE  54
     $                            CALL GEOATT(JREF,JOPCDT)                      PDBDLE  55
        ENDIF                                                                   PDBDLE  56
      ELSEIF ((args.pd_opcode .eq. 2) .AND. (numDFT .gt. 0))  THEN              PDBDLE  57
        DO i=1,numDFT                                                           PDBDLE  58
          Iphase = idftStr(3,i)                                                 PDBDLE  59
          jopcdt = idftStr(1,i)                                                 PDBDLE  60
          jref   = idftStr(2,i)                                                 PDBDLE  61
          iop    = IOPCDT(7,jopcdt)                                             PDBDLE  62
          JOPcur = jopcdt                                                       PDBDLE  63
          JREFcur= jref                                                         PDBDLE  64
          JTYPcur= 1                                                            PDBDLE  65
          ISDflg = 0                                                            PDBDLE  66
          LIBflg = 0                                                            PDBDLE  67
          JKWcur = 0                                                            PDBDLE  68
          IF(Iphase .le. 2)  THEN                                               PDBDLE  69
            IF(Iphase .eq. 0) IPDFLG = 2                                        PDBDLE  70
            IF(JREFcur.ne.0)                                                    PDBDLE  71
     $        IREFTB(5,JREFcur)=IPACKB(1,2,0,IREFTB(5,JREFcur))                 PDBDLE  72
            call DEFFIL( jref, jopcdt, iop, Iphase )                            PDBDLE  73
            IF(Iphase .eq. 0) IPDFLG = 1                                        PDBDLE  74
          ELSE IF(Iphase .eq. 3)  THEN                                          PDBDLE  75
            IF(JSYMLX .GT. 0)  CALL LIBREF                                      PDBDLE  76
          ELSE IF(Iphase .eq. 4)  THEN                                          PDBDLE  77
            CALL RNGCHK(JOPCDT,JREF)                                            PDBDLE  78
          ENDIF                                                                 PDBDLE  79
        ENDDO                                                                   PDBDLE  80
      ELSEIF ( args.pd_opcode .eq. 3)  THEN                                     PDBDLE  81
        JOPcur = 0                                                              PDBDLE  82
        JREFcur= 0                                                              PDBDLE  83
        JKWcur = 0                                                              PDBDLE  84
        JTYPcur= 1                                                              PDBDLE  85
        ISDflg = 0                                                              PDBDLE  86
        LIBflg = 0                                                              PDBDLE  87
        call LOADS_WSF                                                          PDBDLE  88
      ELSEIF ( args.pd_opcode .eq. 4)  THEN                                     PDBDLE  89
c            fetch a library item                                               PDBDLE  90
        jopcdt = args.pd_opcdt_indx                                             PDBDLE  91
        jref   = args.pd_ref_tbl_indx                                           PDBDLE  92
        ilx    = args.pd_sub_opcode                                             PDBDLE  93
        JOPcur = jopcdt                                                         PDBDLE  94
        JREFcur= jref                                                           PDBDLE  95
        JTYPcur= 1                                                              PDBDLE  96
        IF(JREFcur.ne.0)                                                        PDBDLE  97
     $    IREFTB(5,JREFcur)=IPACKB(1,2,0,IREFTB(5,JREFcur))                     PDBDLE  98
        JKWcur = 0                                                              PDBDLE  99
        ISDflg = 0                                                              PDBDLE 100
        LIBflg = 2                                                              PDBDLE 101
        ilinex = 0                                                              PDBDLE 102
        iulinx = 0                                                              PDBDLE 103
        ITMFLG = 1                                                              PDBDLE 104
c            do default lib reference fetches, then library fetch               PDBDLE 105
C            requested, and then check for more default lib references          PDBDLE 106
        IF(JSYMLX .GT. 0)  CALL LIBREF                                          PDBDLE 107
        call LIBPRC( JREF, JOPCDT, 1, ILX, 1, 1 )                               PDBDLE 108
        IF(JSYMLX .GT. 0)  CALL LIBREF                                          PDBDLE 109
c            check that all childern have parents                               PDBDLE 110
        call CHKPRN(IA,IA)                                                      PDBDLE 111
C            CHECK FOR REFERENCED BUT UNDEFINED SYMBOLS                         PDBDLE 112
        call SYMCK(ISYMTB,IERR)                                                 PDBDLE 113
C            CHECK THAT SCHEDULE AND DAY-SCHEDULE TYPES MATCH                   PDBDLE 114
        IF(IERR .EQ. 0)  call SCHTYP                                            PDBDLE 115
        LIBflg = 0                                                              PDBDLE 116
      ELSEIF ( args.pd_opcode .eq. 5)  THEN                                     PDBDLE 117
c            define a new object                                                PDBDLE 118
        jopcdt = args.pd_opcdt_indx                                             PDBDLE 119
        jref   = args.pd_ref_tbl_indx                                           PDBDLE 120
        JOPcur = jopcdt                                                         PDBDLE 121
        call MKBDLOBJ( jopcdt, jref, args.pd_object_name )                      PDBDLE 122
        args.pd_opcdt_indx   = jopcdt                                           PDBDLE 123
        args.pd_ref_tbl_indx = jref                                             PDBDLE 124
      ELSEIF ( args.pd_opcode .eq. 6)  THEN                                     PDBDLE 125
c            Future Use                                                         PDBDLE 126
      ENDIF                                                                     PDBDLE 127
      FLUSH( IOUTPT )                                                           -048   309
      IFATALS = IFATAL - IFATALS                                                PDBDLE 129
      IF( (IFATALS.gt.0).and.(args.pd_opcode .ne. 2) )  THEN                    PDBDLE 130
        IF(args.pd_opcode .eq. 2)  THEN                                         PDBDLE 131
          write(rlen,'(17HWhile defaulting ,4A4,1H ,8A4,1H.)')                  PDBDLE 132
     $    (IOPCDT(i,jopcdt),i=1,4),(ISYMTB(i,IREFTB(1,jref)),i=1,8)             PDBDLE 133
        ELSEIF(args.pd_opcode .eq. 4) THEN                                      PDBDLE 134
          write(rlen,'(15HWhile fetching ,8A4,18H (Library Entry # ,            PDBDLE 135
     $                i4,1h))') (LUSIDX(i,ILX),i=1,8),ILX                       PDBDLE 136
        ENDIF                                                                   PDBDLE 139
        if(rlen .ne. ' ')  THEN                                                 PDBDLE 140
          l = len(rlen) - 1                                                     PDBDLE 141
          ii=1                                                                  PDBDLE 142
  907       if((rlen(ii:ii+1).eq.'  ').or.(rlen(ii:ii+1).eq.' ,').or.           PDBDLE 143
     $         (rlen(ii:ii+1).eq.' .')) THEN                                    PDBDLE 144
              rlen(ii:)=rlen(ii+1:)                                             PDBDLE 145
              l = l - 1                                                         PDBDLE 146
              ii=ii-1                                                           PDBDLE 147
            ENDIF                                                               PDBDLE 148
          ii=ii+1                                                               PDBDLE 149
          if(ii .lt. l)  goto 907                                               PDBDLE 150
        endif                                                                   PDBDLE 151
        IF(Imsgflg .eq. 0) THEN                                                 PDBDLE 152
          Irv= messageboxi( NULL, 'Problems were encountered by BDL: '          PDBDLE 153
     $    //char(10)//char(13)//rlen//char(10)//char(13)//                      PDBDLE 154
     $    '(DOEBDL.out in project directory may contain more detail)'           PDBDLE 155
     $    //char(0),'DOE-2.2 BDL Server'//char(0), MB_OK                        PDBDLE 156
     $    + MB_ICONINFORMATION + MB_TASKMODAL )                                 PDBDLE 157
        ENDIF                                                                   PDBDLE 158
      ENDIF                                                                     PDBDLE 159
      PD_DOEBDLE = IFATALS                                                      PDBDLE 160
      RETURN                                                                    PDBDLE 161
      END                                                                       PDBDLE 162
      integer function PD_DOEBDL ( )                                            PDBDL    2
                                                                                PDBDL    3
C        Interactive application to BDL interface routine                       PDBDL    4
C        command and arguments passed in bdl_str                                PDBDL    5
C        args.pd_opcode - operation to perform                                  PDBDL    6
c               1 - redo geometry calc                                          PDBDL    7
c               2 - default fill                                                PDBDL    8
c               3 - write standard file                                         PDBDL    9
c               4 - library fetch                                               PDBDL   10
c               5 - create/reuse object                                         PDBDL   11
C        args.pd_sub_opcode - suboperation code                                 PDBDL   12
c               0 - redo geometry/default calc (for all)                        PDBDL   13
c               1 - redo geometry/default calc (for specified object)           PDBDL   14
c               n - index (into libidx(10,1000) for library fetch               PDBDL   15
C        args.pd_opcdt_indx - specified object cmd table index                  PDBDL   16
C        args.pd_ref_tbl_indx - specified object ref table index                PDBDL   17
                                                                                PDBDL   18
      USE BDLSTRUCT                                                             -048   310
      USE MSGBOX                                                                -048   311
      USE ERR_MOD                                                               -048   312
      COMMON /DFT_STR/ numDFT,idftStr(3,1024)                                   -042L5b 19
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
                                                                                PDBDL   34
      character*70 rlen                                                         PDBDL   35
                                                                                PDBDL   36
      Imsgflg= args.NoScrnMsg                                                   PDBDL   37
      IFATAL = 0                                                                PDBDL   38
      rlen = ' '                                                                -044c3  46
                                                                                PDBDL   39
      KRDNUM = 3000000                                                          PDBDL   40
      IRETURN= 0                                                                PDBDL   41
      CALL SETUP( 2, IRETURN )                                                  PDBDL   42
      IF(IRETURN .NE. 0) THEN                                                   PDBDL   43
        IFATAL = -1                                                             PDBDL   44
        GOTO 10                                                                 PDBDL   45
      ENDIF                                                                     PDBDL   46
                                                                                PDBDL   47
      IF( args.pd_opcode .eq. 1)  THEN                                          PDBDL   48
        IF( args.pd_sub_opcode .eq. 0)  THEN                                    PDBDL   49
          CALL GEOALL                                                           PDBDL   50
        ELSE                                                                    PDBDL   51
          jopcdt = args.pd_opcdt_indx                                           PDBDL   52
          jref   = args.pd_ref_tbl_indx                                         PDBDL   53
          IF( jopcdt .eq. JOPFL ) CALL GEOFLR(JREF,JOPCDT)                      PDBDL   54
          IF( jopcdt .eq. JOPSP ) CALL GEOSP(JREF,JOPCDT)                       PDBDL   55
          IF( jopcdt .eq. JOPSH .or. jopcdt .eq. JOPFSH)                        PDBDL   56
     $                            CALL GEOSHD(JREF,JOPCDT)                      PDBDL   57
          IF( jopcdt .eq. JOPEW .or. jopcdt .eq. JOPUGW .or.                    PDBDL   58
     $        jopcdt .eq. JOPIW .or. jopcdt .eq. JOPTW)                         PDBDL   59
     $                            CALL GEOWL(JREF,JOPCDT)                       PDBDL   60
          IF( jopcdt .eq. JOPWIN .or. jopcdt .eq. JOPDR)                        PDBDL   61
     $                            CALL GEOATT(JREF,JOPCDT)                      PDBDL   62
        ENDIF                                                                   PDBDL   63
      ELSEIF ((args.pd_opcode .eq. 2) .AND. (numDFT .gt. 0))  THEN              PDBDL   64
        DO i=1,numDFT                                                           PDBDL   65
          Iphase = idftStr(3,i)                                                 PDBDL   66
          jopcdt = idftStr(1,i)                                                 PDBDL   67
          jref   = idftStr(2,i)                                                 PDBDL   68
          iop    = IOPCDT(7,jopcdt)                                             PDBDL   69
          JOPcur = jopcdt                                                       PDBDL   70
          JREFcur= jref                                                         PDBDL   71
          JTYPcur= 1                                                            PDBDL   72
          ISDflg = 0                                                            PDBDL   73
          LIBflg = 0                                                            PDBDL   74
          JKWcur = 0                                                            PDBDL   75
          IF(Iphase .le. 2)  THEN                                               PDBDL   76
            IF(Iphase .eq. 0) IPDFLG = 2                                        PDBDL   77
            IF(JREFcur.ne.0)                                                    PDBDL   78
     $        IREFTB(5,JREFcur)=IPACKB(1,2,0,IREFTB(5,JREFcur))                 PDBDL   79
            call DEFFIL( jref, jopcdt, iop, Iphase )                            PDBDL   80
            IF(Iphase .eq. 0) IPDFLG = 1                                        PDBDL   81
          ELSE IF(Iphase .eq. 3)  THEN                                          PDBDL   82
            IF(JSYMLX .GT. 0)  CALL LIBREF                                      PDBDL   83
          ELSE IF(Iphase .eq. 4)  THEN                                          PDBDL   84
            CALL RNGCHK(JOPCDT,JREF)                                            PDBDL   85
          ENDIF                                                                 PDBDL   86
        ENDDO                                                                   PDBDL   87
      ELSEIF ( args.pd_opcode .eq. 3)  THEN                                     PDBDL   88
        JOPcur = 0                                                              PDBDL   89
        JREFcur= 0                                                              PDBDL   90
        JKWcur = 0                                                              PDBDL   91
        JTYPcur= 1                                                              PDBDL   92
        ISDflg = 0                                                              PDBDL   93
        LIBflg = 0                                                              PDBDL   94
        call LOADS_WSF                                                          PDBDL   95
      ELSEIF ( args.pd_opcode .eq. 4)  THEN                                     PDBDL   96
c            fetch a library item                                               PDBDL   97
        jopcdt = args.pd_opcdt_indx                                             PDBDL   98
        jref   = args.pd_ref_tbl_indx                                           PDBDL   99
        ilx    = args.pd_sub_opcode                                             PDBDL  100
        JOPcur = jopcdt                                                         PDBDL  101
        JREFcur= jref                                                           PDBDL  102
        JTYPcur= 1                                                              PDBDL  103
        IF(JREFcur.ne.0)                                                        PDBDL  104
     $    IREFTB(5,JREFcur)=IPACKB(1,2,0,IREFTB(5,JREFcur))                     PDBDL  105
        JKWcur = 0                                                              PDBDL  106
        ISDflg = 0                                                              PDBDL  107
        LIBflg = 2                                                              PDBDL  108
        ilinex = 0                                                              PDBDL  109
        iulinx = 0                                                              PDBDL  110
        ITMFLG = 1                                                              PDBDL  111
c            do default lib reference fetches, then library fetch               PDBDL  112
C            requested, and then check for more default lib references          PDBDL  113
        IF(JSYMLX .GT. 0)  CALL LIBREF                                          PDBDL  114
        call LIBPRC( JREF, JOPCDT, 1, ILX, 1, 1 )                               PDBDL  115
        IF(JSYMLX .GT. 0)  CALL LIBREF                                          PDBDL  116
c            check that all childern have parents                               PDBDL  117
        call CHKPRN(IA,IA)                                                      PDBDL  118
C            CHECK FOR REFERENCED BUT UNDEFINED SYMBOLS                         PDBDL  119
        call SYMCK(ISYMTB,IERR)                                                 PDBDL  120
C            CHECK THAT SCHEDULE AND DAY-SCHEDULE TYPES MATCH                   PDBDL  121
        IF(IERR .EQ. 0)  call SCHTYP                                            PDBDL  122
        LIBflg = 0                                                              PDBDL  123
      ELSEIF ( args.pd_opcode .eq. 5)  THEN                                     PDBDL  124
c            define a new object                                                PDBDL  125
        jopcdt = args.pd_opcdt_indx                                             PDBDL  126
        jref   = args.pd_ref_tbl_indx                                           PDBDL  127
        JOPcur = jopcdt                                                         PDBDL  128
        call MKBDLOBJ( jopcdt, jref, args.pd_object_name )                      PDBDL  129
        args.pd_opcdt_indx   = jopcdt                                           PDBDL  130
        args.pd_ref_tbl_indx = jref                                             PDBDL  131
      ENDIF                                                                     PDBDL  132
      FLUSH( IOUTPT )                                                           -048   313
   10 CLOSE( KEYFIL )                                                           PDBDL  134
      CLOSE( LIBFIL )                                                           PDBDL  135
      CLOSE( IUSLIB )                                                           PDBDL  136
      CLOSE( ISTNDF )                                                           PDBDL  137
      CLOSE( INPUT )                                                            PDBDL  138
      CLOSE( IOUTPT )                                                           PDBDL  139
      CLOSE( ICTRL )                                                            PDBDL  140
      CLOSE( 80 )                                                               PDBDL  141
      CLOSE( 22 )                                                               PDBDL  142
      CLOSE( 15 )                                                               PDBDL  143
      IF((IFATAL.gt.0).and.(args.pd_opcode .ne. 2).and.                         PDBDL  144
     $   (IRETURN.eq.0))  THEN                                                  PDBDL  145
        IF(args.pd_opcode .eq. 2)  THEN                                         PDBDL  146
          write(rlen,'(17HWhile defaulting ,4A4,1H ,8A4,1H.)')                  PDBDL  147
     $    (IOPCDT(i,jopcdt),i=1,4),(ISYMTB(i,IREFTB(1,jref)),i=1,8)             PDBDL  148
        ELSEIF(args.pd_opcode .eq. 4) THEN                                      PDBDL  149
          write(rlen,'(15HWhile fetching ,8A4,18H (Library Entry # ,            PDBDL  150
     $                i4,1h))') (LUSIDX(i,ILX),i=1,8),ILX                       PDBDL  151
        ENDIF                                                                   PDBDL  154
        if(rlen .ne. ' ')  THEN                                                 PDBDL  155
          l = len(rlen) - 1                                                     PDBDL  156
          ii=1                                                                  PDBDL  157
  907       if((rlen(ii:ii+1).eq.'  ').or.(rlen(ii:ii+1).eq.' ,').or.           PDBDL  158
     $         (rlen(ii:ii+1).eq.' .')) THEN                                    PDBDL  159
              rlen(ii:)=rlen(ii+1:)                                             PDBDL  160
              l = l - 1                                                         PDBDL  161
              ii=ii-1                                                           PDBDL  162
            ENDIF                                                               PDBDL  163
          ii=ii+1                                                               PDBDL  164
          if(ii .lt. l)  goto 907                                               PDBDL  165
        endif                                                                   PDBDL  166
        IF(Imsgflg .eq. 0) THEN                                                 PDBDL  167
          Irv= messageboxi( NULL, 'Problems were encountered by BDL: '          PDBDL  168
     $    //char(10)//char(13)//rlen//char(10)//char(13)//                      PDBDL  169
     $    '(DOEBDL.out in project directory may contain more detail)'           PDBDL  170
     $    //char(0),'DOE-2.2 BDL Server'//char(0), MB_OK                        PDBDL  171
     $    + MB_ICONINFORMATION + MB_TASKMODAL )                                 PDBDL  172
        ENDIF                                                                   PDBDL  173
      ENDIF                                                                     PDBDL  174
      PD_DOEBDL = IFATAL                                                        PDBDL  175
      RETURN                                                                    PDBDL  176
      END                                                                       PDBDL  177
      integer function BDLEXPGLOBAL ( )                                         BDLEXPG  2
                                                                                BDLEXPG  3
C        Interactive application to BDL Expression Module interface routine     BDLEXPG  4
C        command and arguments passed in bdl_str                                BDLEXPG  5
C        args.pd_opcode - operation to perform                                  BDLEXPG  6
c               1 - redo geometry calc                                          BDLEXPG  7
c               2 - default fill                                                BDLEXPG  8
c               3 - write standard file                                         BDLEXPG  9
c               4 - library fetch                                               BDLEXPG 10
c               5 - create/reuse object                                         BDLEXPG 11
C        args.pd_sub_opcode - suboperation code                                 BDLEXPG 12
c               0 - redo geometry/default calc (for all)                        BDLEXPG 13
c               1 - redo geometry/default calc (for specified object)           BDLEXPG 14
c               n - index (into libidx(10,1000) for library fetch               BDLEXPG 15
C        args.pd_opcdt_indx - specified object cmd table index                  BDLEXPG 16
C        args.pd_ref_tbl_indx - specified object ref table index                BDLEXPG 17
                                                                                BDLEXPG 18
      USE BDLSTRUCT                                                             -048   314
      USE MSGBOX                                                                -048   315
      USE ERR_MOD                                                               -048   316
      COMMON /DFT_STR/ numDFT,idftStr(3,1024)                                   -042L5b 19
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      COMMON  /JOPX/   JOPSP, JOPWIN, JOPCNS, JOPLAY, JOPEW, IOPEW,             /JOPX/   2
     1                 JOPUGW, IOPUGW, JOPSC, JOPMAT, JOPIW, JOPGT,             /JOPX/   3
     2                 JOPWIL,JOPSH, JOPDS, JOPSCH, JOPSPR, JOPDD,              BLIND    1
     3                 JOPLR, JOPHR, JOPRB, JOPDR, JOPWF, JOPTW,                /JOPX/   5
     4                 JOPTWV,JOPWP,JOPFL,JOPBP,JOPRP,JOPFSH,JOPPOL,            DEF3     3
     5                 JOPTIT,JOPGTC,JOPLTGS,JOPLUMT,JOPLMPT,JOPHOL,            -048b    2
     6                 JOPPD                                                    -048b    3
      COMMON /LIBIDX/ NUSLIB,LUSIDX(10,30000),IULINX,                           -48p     1
     1                NLIB  ,LIBIDX(10,30000),ILINEX,  JSYMLX, NumNewRef        -48p     2
      COMMON /LIBLNK/ LIBLNK(10,30000)                                          -48p     3
      COMMON /NLIBLK/ NLIBLK,MLIBLK                                             DFTEX3   4
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
                                                                                BDLEXPG 35
      Imsgflg= args.NoScrnMsg                                                   BDLEXPG 36
      IFATALS = IFATAL                                                          BDLEXPG 37
                                                                                BDLEXPG 38
      IF(ifunction.ne.11 .AND. ifunction.ne.12 .AND.                            BDLEXPG 39
     $   ifunction.ne.23 .AND. ifunction.ne.27 .AND.                            BDLEXPG 40
     $   ifunction.ne.29) THEN                                                  BDLEXPG 41
        IRETURN= 0                                                              BDLEXPG 42
        CALL SETUP( 2, IRETURN )                                                BDLEXPG 43
        IF(IRETURN .NE. 0) THEN                                                 BDLEXPG 44
          IFATAL = -1                                                           BDLEXPG 45
          GOTO 10                                                               BDLEXPG 46
        ENDIF                                                                   BDLEXPG 47
      ENDIF                                                                     BDLEXPG 48
      irv= bdlexpglobalfunc()                                                   BDLEXPG 49
      FLUSH( IOUTPT )                                                           -048   317
   10 CLOSE( KEYFIL )                                                           BDLEXPG 51
      CLOSE( LIBFIL )                                                           BDLEXPG 52
      CLOSE( IUSLIB )                                                           BDLEXPG 53
      CLOSE( ISTNDF )                                                           BDLEXPG 54
      CLOSE( INPUT )                                                            BDLEXPG 55
      CLOSE( IOUTPT )                                                           BDLEXPG 56
      CLOSE( ICTRL )                                                            BDLEXPG 57
      CLOSE( 80 )                                                               BDLEXPG 58
      CLOSE( 22 )                                                               BDLEXPG 59
      CLOSE( 15 )                                                               BDLEXPG 60
      IFATALS = IFATAL - IFATALS                                                BDLEXPG 61
      BDLEXPGLOBAL= IFATALS                                                     BDLEXPG 62
      RETURN                                                                    BDLEXPG 63
      END                                                                       BDLEXPG 64
      SUBROUTINE MKBDLOBJ (JOPCDT,JREF,NAME)                                    MKBDLOBJ 2
C                                                                               MKBDLOBJ 3
C              CREATES A COMMAND OBJECT                                         MKBDLOBJ 4
C              makes (updates) symbol table entry                               MKBDLOBJ 5
C              makes (if exists) reference table entry                          MKBDLOBJ 6
C              crates value array (and NSVE) space                              MKBDLOBJ 7
C              initializes ther Ref. tbl. and Value Array                       MKBDLOBJ 8
C                 for new (re)use                                               MKBDLOBJ 9
C         JOPCDT input - is command table index of object to create             MKBDLOBJ10
C         JREF input/output - input is parent ref. tbl. index (if used)         MKBDLOBJ11
C                             output is new (reused) ref. tbl. index            MKBDLOBJ12
C                                                                               MKBDLOBJ13
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
      common /HOLL/   HOLL(30),KCTAB,KCDOLR,KCNUMB,KCE,KCQUO,KCDQUO,            EXPR2    1
     1                KCLCRL,KCRCRL,IHOLTY                                      SUBTY7   1
        integer       HOLL                                                      /HOLL/   3
      equivalence  (KCSP,HOLL(14)), (KCCMMA,HOLL(12)), (KCLBRA,HOLL(17))        /HOLL/   4
     1         , (KCRBRA,HOLL(18)), (KCLPAR,HOLL(15)), (KCRPAR,HOLL(16))        /HOLL/   5
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON  /IOPCDT/  IOPCDT(24,100), NOPCDT,                                 FIX6     1
     $                  JOPcur,JREFcur,JKWcur,JTYPcur,JSYMcur,                  -042L5b  4
     $                  LIBflg,ISDflg                                           -042L5b  5
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      DIMENSION ISYMTB(16,37500)                                                PC22     2
      EQUIVALENCE (ISYMTB(1,1),IA(1))                                           /ISYMTB/ 3
C                                                                               /ISYMTB/ 4
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /PDSTAT/ IPDFLG,ITMFLG,Imsgflg,IwinReturn                          -042L5b 20
      DIMENSION IREFTB(5,200000)                                                FIX6     3
      EQUIVALENCE (IREFTB(1,1), IA(1))                                          /REFTB/  3
      COMMON /UNDEF /  UNDEF(4), IUNDEF(8), IUNUSE(8)                           FIX11    7
      EQUIVALENCE (UNDEF(1),REQD,IREQD,IUNDE),                                  /UNDEF/  3
     1            (UNDEF(2),UNUSE,IUNUS),                                       /UNDEF/  4
     2            (UNDEF(3),SOWHAT,ISOWHA),                                     /UNDEF/  5
     3            (UNDEF(4),UNFILD,IUNFIL)                                      /UNDEF/  6
C                                                                               /UNDEF/  7
      integer NAME(8)                                                           MKBDLOBJ24
C              set current object error/expression pointers                     MKBDLOBJ25
      JOPcur = JOPCDT                                                           MKBDLOBJ26
      JREFcur= 0                                                                MKBDLOBJ27
      JKWcur = 0                                                                MKBDLOBJ28
      JTYPcur= 1                                                                MKBDLOBJ29
C                                                                               MKBDLOBJ30
      DO I=1,8                                                                  MKBDLOBJ31
        LABEL(I) = NAME(I)                                                      MKBDLOBJ32
      END DO                                                                    MKBDLOBJ33
C              save parent index                                                MKBDLOBJ34
      JPRNREF= JREF                                                             MKBDLOBJ35
C              GET SYMBOL TYPE                                                  MKBDLOBJ36
      ISTYPE = IOPCDT(11,JOPCDT)                                                MKBDLOBJ37
C              IF COMMAND USES DIFF COMMAND*S REF TBL                           MKBDLOBJ38
      IF (IOPCDT(12,JOPCDT).LT.0) JOPCDT = -IOPCDT(12,JOPCDT)                   MKBDLOBJ39
C              NSAVE IS THE NUMBER OF ITEMS BEFORE THE VALUE ARRAY              MKBDLOBJ40
      NSAVE = IOPCDT(17,JOPCDT)                                                 MKBDLOBJ41
C              LVAL IS THE NUMBER OF VALUES FOR THIS COMMAND                    MKBDLOBJ42
      LVAL   = IOPCDT(16,JOPCDT)                                                MKBDLOBJ43
C              LTOT IS THE TOTAL SIZE OF THE VALUE BLOCK                        MKBDLOBJ44
      LTOT = NSAVE + 3*LVAL + IOPCDT(18,JOPCDT)                                 MKBDLOBJ45
C              MAKE SURE THERE IS ENOUGH SPACE FOR VALUE ARRAY                  MKBDLOBJ46
      CALL CKAA(IA,LTOT)                                                        MKBDLOBJ47
C              check if this command is named                                   MKBDLOBJ48
      IF (ISTYPE.EQ.0) THEN                                                     MKBDLOBJ49
C              if it has not been previously created                            MKBDLOBJ50
        IF (IOPCDT(14,JOPCDT).EQ.0) THEN                                        MKBDLOBJ51
C              check for max number of this object                              MKBDLOBJ52
          IF(IOPCDT(12,JOPCDT) .ne. 0)                                          MKBDLOBJ53
     $         CALL MEMCK(IOPCDT(13,JOPCDT),IOPCDT(13,JOPCDT))                  MKBDLOBJ54
C              save index of value array                                        MKBDLOBJ55
          IOPCDT(14,JOPCDT) = IAX                                               MKBDLOBJ56
C              Set index for val array                                          MKBDLOBJ57
          IAPTR = IAX                                                           MKBDLOBJ58
C              INCREMENT THE AA INDEX                                           MKBDLOBJ59
          IAX = IAX + LTOT                                                      MKBDLOBJ60
        ELSE                                                                    MKBDLOBJ61
C              if it has been previously created use old data space             MKBDLOBJ62
          IAPTR = IOPCDT(14,JOPCDT)                                             MKBDLOBJ63
        ENDIF                                                                   MKBDLOBJ64
C              ZERO THE WHOLE AREA                                              MKBDLOBJ65
        CALL FILLN(0,IA(IAPTR+1),LTOT)                                          MKBDLOBJ66
C              UNDEFined fill the user input value array                        MKBDLOBJ67
        CALL FILLN(undef(1),IA(IAPTR+1+NSAVE+LVAL),LVAL)                        MKBDLOBJ68
C              pass JREF as 0 to flag no reference table                        MKBDLOBJ69
        JREF = 0                                                                MKBDLOBJ70
      ELSE                                                                      MKBDLOBJ71
C              uname'd command                                                  MKBDLOBJ72
C              DEFINE SYMBOL                                                    MKBDLOBJ73
C              if called interactive set BDL line number (if needed)            MKBDLOBJ74
        KARDSAV = KRDNUM                                                        MKBDLOBJ75
        IF(IPDFLG .EQ. 1 .and. KRDNUM .LE. 0)  KRDNUM = 3000000                 MKBDLOBJ76
        CALL SYMDEF (IA, LABEL, ISTYPE, JSYM)                                   MKBDLOBJ77
C              if new occurance of object create new ref. tbl. entry and        MKBDLOBJ78
C              value array                                                      MKBDLOBJ79
        IF (ISYMTB(12,JSYM).EQ.0) THEN                                          MKBDLOBJ80
C              INCR REFERENCES                                                  MKBDLOBJ81
          CALL INCRRF(IA(1),IA(1),JOPCDT,JSYM,JREF)                             MKBDLOBJ82
C              set value array index in reference table                         MKBDLOBJ83
          IREFTB(2,JREF) = IAX                                                  MKBDLOBJ84
C              Set index for val array                                          MKBDLOBJ85
          IAPTR = IAX                                                           MKBDLOBJ86
C              INCREMENT THE AA INDEX                                           MKBDLOBJ87
          IAX = IAX + LTOT                                                      MKBDLOBJ88
C              else reuse old ref. tbl. and value array                         MKBDLOBJ89
        ELSE                                                                    MKBDLOBJ90
          JREF = IOPCDT(14,JOPCDT) + ISYMTB(12,JSYM) - 1                        MKBDLOBJ91
C              Set index for val array                                          MKBDLOBJ92
          IAPTR = IREFTB(2,JREF)                                                MKBDLOBJ93
        END IF                                                                  MKBDLOBJ94
C              ZERO THE WHOLE AREA                                              MKBDLOBJ95
        CALL FILLN(0,IA(IAPTR+1),LTOT)                                          MKBDLOBJ96
C              UNDEFined/NOdefault fill the user input/display value array      MKBDLOBJ97
        CALL FILLN(undef(1),IA(IAPTR+1+NSAVE+LVAL),LVAL)                        MKBDLOBJ98
        CALL FILLN(undef(3),IA(IAPTR+1+NSAVE+2*LVAL),LVAL)                      MKBDLOBJ99
C              set ref. tbl. index of parent                                    MKBDLOB100
        IREFTB(4,JREF) = JPRNREF                                                MKBDLOB101
C              save ref. tbl. position of last occurance of this                MKBDLOB102
C              object type for use by create of children                        MKBDLOB103
        IOPCDT(22,JOPCDT) = JREF                                                MKBDLOB104
        JREFcur= JREF                                                           MKBDLOB105
C              restore old BDL line number                                      MKBDLOB106
        KRDNUM = KARDSAV                                                        MKBDLOB107
      ENDIF                                                                     MKBDLOB108
      RETURN                                                                    MKBDLOB109
      END                                                                       MKBDLOB110
      SUBROUTINE F0                                                             F0       2
C---                                                                            F0       3
      COMMON  /FBUF/   IBUF0(80), IBUF(1062), JBUF, NBUF, IEOF0                 /FBUF/   2
     1               , IBUFEF, LINENO                                           /FBUF/   3
      COMMON  /FCHARS/ KCSP  , KCMUL , KCLPAR, KCPERD, KCCOMA, KCQUOT           /FCHARS/ 2
     1               , KCEQL , KCDOLR, KCPLUS, KCMIN , KCC   , KCE              /FCHARS/ 3
     2               , KCEOS , KCEOF , KCRPAR,         KLc   , KLe              /FCHARS/ 4
      COMMON  /FFLAGS/ IFFLAG, IFLABL(4), IFLEVL, NUMOVL, NFERR                 /FFLAGS/ 2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /FMODFT/ MODFTN                                                   /FMODFT/ 2
      COMMON  /FPTRB/  NCODE, ICODE0, LCODE, NCONT, LCONT, ICONT0               /FPTRB/  2
     1               , NLITT, LLITT, ILITT0                                     /FPTRB/  3
     2               , NGLBT, IGLBT0, JGLBT, IAGLBT                             /FPTRB/  4
     3               , NLABT, LLABT, ILABT0, JLABT, IALABT                      /FPTRB/  5
     4               , LSYMT, NSYMT, ISYMT0, JSYMT, IASYMT, MSYMT0,MSYMT        /FPTRB/  6
      COMMON  /FSTACK/ NOPCST, LOPCST, IOPCST(100),   ISTERR                    /FSTACK/ 2
     1               , NOPRST, LOPRST, IOPRST(4,100)                            /FSTACK/ 3
     2               , NACCUM, MACCUM, LACCUM                                   /FSTACK/ 4
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON  /KEYP/   KEYP                                                     /KEYP/   2
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
C---                                                                            F0      17
      DIMENSION  IFLABT(5,100)                                                  F0      18
      DIMENSION  KCFUNC(4), KCNAME(4), KCLEVL(4),ICLEVL(4),ILEVLT(7,7)          F0      19
C---                                                                            F0      20
      DATA  LFLABT/100/                                                         F0      21
      DATA  KCFUNC/ 4HFUNC, 4HTION, 4H    , 4H     /                            F0      22
      DATA  KCNAME/ 4HNAME, 4H    , 4H    , 4H     /                            F0      23
      DATA  KCLEVL/ 4HLEVE, 4HL   , 4H    , 4H     /                            F0      24
      DATA  NLEVLT/ 7 /                                                         F0      25
      DATA  ILEVLT/ 4HBUIL, 4HDING, 4H    , 4H    , 4HBLDG, 4H    , 1           F0      26
     1            , 4HSPAC, 4HE   , 4H    , 4H    , 4H    , 4H    , 2           F0      27
     2            , 4HEXTE, 4HRIOR, 4H-WAL, 4HL   , 4HE-W , 4H    , 3           F0      28
     3            , 4HINTE, 4HRIOR, 4H-WAL, 4HL   , 4HI-W , 4H    , 4           F0      29
     4            , 4HUNDE, 4HRGRO, 4HUND-, 4HWALL, 4HUG-W, 4H    , 5           F0      30
     5            , 4HWIND, 4HOW  , 4H    , 4H    , 4HWI  , 4H    , 6           F0      31
     6            , 4HDOOR, 4H    , 4H    , 4H    , 4H    , 4H    , 7           F0      32
     7            /                                                             F0      33
C---                                                                            F0      34
C$    WRITE( 66, 902 ) IFLABL, NUMOVL, IAX, IAXMAX, KORE                        F0      35
C$902 FORMAT( ' >>> F0 ---  IFLABL='4A4, '  NUMOVL='I5,                         F0      36
C$   .        '  IAX='I5 '  IAXMAX='I5 '  KORE='I5 )                            F0      37
C---                                                                            F0      38
      NUMOVL = ( KEYP - 4 ) / 4  +  1                                           F0      39
       CALL  FIOPCI                                                             F0      40
      IAX    = 1                                                                F0      41
      NFLABT = 0                                                                F0      42
      NFERR  = 0                                                                F0      43
C---                                                                            F0      44
C--- READ THE GLOBAL VARIABLES TABLE                                            F0      45
C---                                                                            F0      46
      READ(KEYFIL)  I1, LREC, ISIMNX, I2                                        F0      47
      IA0 = IAX                                                                 F0      48
      IA1 = IA0 + 1                                                             F0      49
      IA2 = IA1 + LREC - 1                                                      F0      50
       CALL  CKAA( IA, LREC)                                                    F0      51
      IAX = IAX + LREC                                                          F0      52
      READ(KEYFIL)  (IA(I), I=IA1,IA2)                                          F0      53
      LSYMT = IA(IA0+1)                                                         F0      54
      LCONT = IA(IA0+2)                                                         F0      55
      LLITT = IA(IA0+3)                                                         F0      56
      LLABT = IA(IA0+4)                                                         F0      57
      NGLBT = IA(IA0+5)                                                         F0      58
C---                                                                            F0      59
      IGLBT0 = IA0 + 5                                                          F0      60
      MSYMT0 = IGLBT0 + NGLBT * 8                                               F0      61
      ISYMT0 = MSYMT0 + LSYMT                                                   F0      62
      ILABT0 = ISYMT0 + LSYMT * 8                                               F0      63
      ILITT0 = ILABT0 + LLABT * 5                                               F0      64
      ICONT0 = ILITT0 + LLITT                                                   F0      65
      ICODE0 = ICONT0 + LCONT                                                   F0      66
C$    WRITE( 66, 901 ) ISYMT0, LSYMT, ILABT0, LLABT, ILITT0, LLITT              F0      67
C$   .            , ICONT0, LCONT, ICODE0                                       F0      68
C$901 FORMAT( ' -- F0     --- ISYMT='I6,I5, '  ILABT='I6,I5                     F0      69
C$   .            , '  ILITT='I6,I5, '  ICONT='I6,I5, '  ICODE0='I6 )           F0      70
C---                                                                            F0      71
      LCODE = 4000                                                              F0      72
      LREC  = ICODE0 + LCODE - ISYMT0                                           F0      73
       CALL  CKAA( IA, LREC )                                                   F0      74
      IAX = IAX + LREC                                                          F0      75
C                                                                               F0      76
C--- READ A KEYWORD AND CK IF IT IS (NAME) OR (LEVEL)                           F0      77
C                                                                               F0      78
1000  CONTINUE                                                                  F0      79
       CALL  FILLN( KCSP, IFLABL, 4 )                                           F0      80
       CALL  FILLN( KCSP, ICLEVL, 4 )                                           F0      81
1050  CALL  GETCS                                                               F0      82
      IF( ITERM .NE. 0 )  GOTO  3000                                            F0      83
          if ( KOMPAR( ISYMU, KCNAME, 4 ) .ne. 0 )     goto  1100               F0      84
          if ( KOMPAR( ISYMU, KCLEVL, 4 ) .ne. 0 )     goto  2100               F0      85
C....................................... ERR-65  UNRECOGNIZIBLE KEYWORD         F0      86
               CALL  FERR( 65, ISYMB, IDUM )                                    F0      87
              GOTO  1050                                                        F0      88
C                                                                               F0      89
C--- GET LABEL NAME                                                             F0      90
C                                                                               F0      91
1100  IF( IFLABL(1) .EQ. KCSP )  GOTO  1150                                     F0      92
C........................................... ERR-66  KEYWORD REPEATED =         F0      93
           CALL  FERR( 66, KCNAME, IDUM )                                       F0      94
1150   CALL  GETCS                                                              F0      95
      IF( ITERM .EQ. 0 )  GOTO  1200                                            F0      96
C......................................... ERR-38  FUNCTION NAME MISSING        F0      97
           CALL  FERR( 38, IDUM, IDUM )                                         F0      98
          GOTO  3000                                                            F0      99
1200   CALL  MOVEN( ISYMB, IFLABL, 4 )                                          F0     100
      IF( NFLABT .EQ. 0 )  GOTO  1500                                           F0     101
              DO  1300  I = 1 , NFLABT                                          F0     102
              IF( KOMPAR( IFLABL, IFLABT(1,I), 4 ) .NE. 0 )  GOTO  1400         F0     103
1300          CONTINUE                                                          F0     104
          GOTO  1500                                                            F0     105
C....................................... ERR-39  FUNCTION DEFINED BEFORE        F0     106
C                                                 SEE LINE 0000                 F0     107
1400           CALL  FERR( 39, IFLABT(5,I), IDUM )                              F0     108
              GOTO  1900                                                        F0     109
1500  IF( NFLABT .LT. LFLABT )  GOTO  1600                                      F0     110
C....................................... ERR-40  MAX NUMBER OF FUNCTIONS        F0     111
C                                          EXCEEDED                             F0     112
           CALL  FERR( 40, LFLABT, IDUM )                                       F0     113
          GOTO  1900                                                            F0     114
1600  NFLABT = NFLABT + 1                                                       F0     115
      CALL  MOVEN( IFLABL, IFLABT(1,NFLABT), 4 )                                F0     116
      IFLABT(5,NFLABT) = KRDNUM                                                 F0     117
1900  IF( ITERM .EQ. 0 )  GOTO  1050                                            F0     118
          GOTO  3000                                                            F0     119
C                                                                               F0     120
C--- CK FUNCTION LEVEL                                                          F0     121
C                                                                               F0     122
2100  IF( ICLEVL(1) .EQ. KCSP )  GOTO  2150                                     F0     123
C........................................... ERR-66  KEYWORD REPEATED =         F0     124
           CALL  FERR( 66, KCLEVL, IDUM )                                       F0     125
2150   CALL  GETCS                                                              F0     126
      IF( ITERM .EQ. 0 )  GOTO  2200                                            F0     127
C................................................. ERR-41  LEVEL MISSING        F0     128
          GOTO  2900                                                            F0     129
C..................... SEARCH LEVEL IN TABLE                                    F0     130
2200       call  moven( ISYMU, ICLEVL, 4 )                                      F0     131
           call  TBLSCH( ISYMU, ILEVLT, 7, NLEVLT, 1, IX )                      F0     132
      IF( IX .NE. 0 )  GOTO  2400                                               F0     133
C............................................... ERR-42  BAD LEVEL VALUE        F0     134
           CALL  FERR( 42, ISYMB, IDUM )                                        F0     135
          GOTO  2500                                                            F0     136
2400  IFLEVL = ILEVLT(7,IX)                                                     F0     137
2500   CALL  GETCS                                                              F0     138
      IF( ITERM .NE. 0 )  GOTO  2900                                            F0     139
C.............................................. ERR-43  COMMAND ENDS BAD        F0     140
           CALL  FERR( 43, IDUM, IDUM )                                         F0     141
2900  IF( ITERM .EQ. 0 )  GOTO  1050                                            F0     142
C---                                                                            F0     143
3000  CONTINUE                                                                  F0     144
      IF( IFLABL(1) .EQ. KCSP )   CALL  FERR( 38, IDUM, IDUM )                  F0     145
      IF( ITERM .EQ. 0 )   CALL  SKPEOC                                         F0     146
C---                                                                            F0     147
      MACCUM = 0                                                                F0     148
      NSYMT  = 0                                                                F0     149
      NCONT  = 0                                                                F0     150
      NLITT  = 0                                                                F0     151
      NCODE  = 0                                                                F0     152
      NBUF   = 0                                                                F0     153
      JBUF   = 1                                                                F0     154
      MODFTN = 0                                                                F0     155
50     call  GETCS                                                              F0     156
      if ( ITERM + IDELIM .ne. 0 )     goto  800                                F0     157
           call  F0CK( ISYMU, IFN0 )                                            F0     158
      IF( IFN0 .EQ. 0 )  GOTO  800                                              F0     159
      GOTO  ( 100, 200, 300 ), IFN0                                             F0     160
C--- ASSIGN                                                                     F0     161
100    CALL  FASGN                                                              F0     162
      GOTO  50                                                                  F0     163
C--- COMPUTE                                                                    F0     164
200   MODFTN = 1                                                                F0     165
CD      CALL  FDEBGD                                                            F0     166
       CALL  FPRDEF                                                             F0     167
       CALL  FCOMPU                                                             F0     168
      MODFTN = 0                                                                F0     169
       CALL  MOVEN( KARD(1), IBUF(1), KARDI2 )                                  F0     170
       CALL  ECHO                                                               F0     171
       CALL  GETCS                                                              F0     172
               call  F0CK( ISYMU, IFN0 )                                        F0     173
      IF( IFN0 .EQ. 3 )  GOTO  330                                              F0     174
                  if ( KOMPAR( ISYMU, KCFUNC, 4 ) .ne. 0 )    goto  1000        F0     175
      KARDX = 1                                                                 F0     176
      GOTO  900                                                                 F0     177
C--- END-FUNCTION                                                               F0     178
300   CONTINUE                                                                  F0     179
C............................ ERR-44  MISPOSITIONED END-FUNCTION COMMAND        F0     180
       CALL  FERR( 44, IDUM, IDUM )                                             F0     181
330   IF( ITERM .EQ. 0 )    CALL  GETCS                                         F0     182
      GOTO  900                                                                 F0     183
C---                                                                            F0     184
C.................................. ERR-45  UNRECOGNIZIBLE COMMAND=....         F0     185
800    CALL  FERR( 45, ISYMB, IDUM )                                            F0     186
      GOTO  330                                                                 F0     187
C---                                                                            F0     188
900   CONTINUE                                                                  F0     189
      IFATAL = IFATAL + NFERR                                                   F0     190
      MSGTOT(1) = MSGTOT(1) + NFERR                                             F0     191
C$    WRITE( 66, 912 )                                                          F0     192
C$912 FORMAT( ' -F0-- END    <<<<<' )                                           F0     193
      RETURN                                                                    F0     194
      END                                                                       F0     195
      SUBROUTINE  F0CK( ISYMB, IFN0 )                                           F0CK     2
C---                                                                            F0CK     3
C--- CK ISYMB IN 0 LEVEL COMANDS                                                F0CK     4
C---    RETURN  IFN0 = 0  ERR, =1 ASSIGN-VARIABLES, =2 CALCULATE                F0CK     5
C---    =3 END-FUNCTION                                                         F0CK     6
C---                                                                            F0CK     7
      DIMENSION  ISYMB(4)                                                       F0CK     8
      INTEGER  IFN0CM(4,4)                                                      F0CK     9
          DATA  IFN0CM/4HASSI, 4HGN  , 4H    , 4H    ,                          F0CK    10
     1                 4HCALC, 4HULAT, 4HE   , 4H    ,                          F0CK    11
     2                 4HEND-, 4HFUNC, 4HTION, 4H    ,                          F0CK    12
     3                 4*0/                                                     F0CK    13
C---                                                                            F0CK    14
          DO  200  I = 1 , 4                                                    F0CK    15
          IFN0 = I                                                              F0CK    16
              DO  100  J = 1 , 4                                                F0CK    17
              IF( ISYMB(J) .NE. IFN0CM(J,I) )  GOTO  200                        F0CK    18
100           CONTINUE                                                          F0CK    19
          GOTO  900                                                             F0CK    20
200       CONTINUE                                                              F0CK    21
      IFN0 = 0                                                                  F0CK    22
900   RETURN                                                                    F0CK    23
      END                                                                       F0CK    24
      SUBROUTINE  FARITH ( IFARIT, IARITE )                                     FARITH   2
C---                                                                            FARITH   3
C--- PROCESS ARITHMETIC EXPRESSIONS                                             FARITH   4
C---                                                                            FARITH   5
C---                                                                            FARITH   6
C------- IFARIT=1 FOR ARITHMETIC STATEMENT                                      FARITH   7
C-------       =2 FOR IF STATEMENT                                              FARITH   8
C-------       =3 FOR PRINT STATEMENT                                           FARITH   9
C-------       =4 FOR CALL STATEMENT                                            FARITH  10
C---                                                                            FARITH  11
      COMMON  /FGNCHV/ JCH, JDIGCK, LTMP, ITMP(32)                              /FGNCHV/ 2
      COMMON  /FOPCD/  IOPT(4,45), LOPT, JOPT, JOPT1, IOP, IOP1                 /FOPCD/  2
     1               , KKPLUS, KKMIN,  KKDIV,  KKLPAR, KKRPAR, KKPWR            /FOPCD/  3
     2               , KKEQL,  KKOR,   KKAND,  KKNOT,  KKCALL, KKUMIN           /FOPCD/  4
     3               , KKNOOP, KKEOS,  KKLD,   KKRMIN, KKRDIV, KKRPWR           /FOPCD/  5
     4               , KKGOTO, KKEND,  KKIFGO, KKCOMA, KKRET,  KKSTOP           /FOPCD/  6
     5               , KKPRIN, KKERR,  KKDIM1, KKDIM2, KKDIM3, KKMARK           /FOPCD/  7
     6               , KKPEQL, KKEQS,  KKNEQS, KKRD  , KKWR  , KKEOF            /FOPCD/  8
     7               , KKREW , KKUNIT,  JFTNSG                                  /FOPCD/  9
      COMMON  /FOPRNV/ ITOKTY, ANUMBR, ISYMBL(8), IOPRER                        PARAM   21
     1               , IOPRID, IOPRMO, IOPRTY, IOPRVA                           /FOPRNV/ 3
          DIMENSION         IOPR(4)                                             /FOPRNV/ 4
              EQUIVALENCE  (IOPR(1), IOPRID)                                    /FOPRNV/ 5
      COMMON  /FPQRT/  IPID, IPMO, IPTY, IPVA, IQID, IQMO, IQTY, IQVA           /FPQRT/  2
     1               , IRID, IRMO, IRTY, IRVA, ITID, ITMO, ITTY, ITVA           /FPQRT/  3
          DIMENSION  IP(4), IQ(4), IR(4), IT(4)                                 /FPQRT/  4
              EQUIVALENCE  (IP(1),IPID), (IQ(1),IQID), (IR(1),IRID)             /FPQRT/  5
     1                   , (IT(1),ITID)                                         /FPQRT/  6
      COMMON  /FPTRB/  NCODE, ICODE0, LCODE, NCONT, LCONT, ICONT0               /FPTRB/  2
     1               , NLITT, LLITT, ILITT0                                     /FPTRB/  3
     2               , NGLBT, IGLBT0, JGLBT, IAGLBT                             /FPTRB/  4
     3               , NLABT, LLABT, ILABT0, JLABT, IALABT                      /FPTRB/  5
     4               , LSYMT, NSYMT, ISYMT0, JSYMT, IASYMT, MSYMT0,MSYMT        /FPTRB/  6
      COMMON  /FSTACK/ NOPCST, LOPCST, IOPCST(100),   ISTERR                    /FSTACK/ 2
     1               , NOPRST, LOPRST, IOPRST(4,100)                            /FSTACK/ 3
     2               , NACCUM, MACCUM, LACCUM                                   /FSTACK/ 4
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
C---                                                                            FARITH  19
C$    WRITE( 66,  901 )  IFARIT                                                 FARITH  20
C$901 FORMAT( ' >> FARITH ---  IFARIT='I2 )                                     FARITH  21
C---                                                                            FARITH  22
      IARITE = 0                                                                FARITH  23
C--- INITIALIZE STACKS                                                          FARITH  24
      NOPCST = 0                                                                FARITH  25
      NOPRST = 0                                                                FARITH  26
      ISTERR = 0                                                                FARITH  27
      NACCUM = 0                                                                FARITH  28
      IOP    = KKNOOP                                                           FARITH  29
      IOP1   = KKNOOP                                                           FARITH  30
      JOPT1  = KKNOOP                                                           FARITH  31
      JOPT2  = KKNOOP                                                           FARITH  32
C---                                                                            FARITH  33
      IF( IFARIT .EQ. 1 )  GOTO  10000                                          FARITH  34
1000   CALL  FOPRND( IDUM1, IDUM1 )                                             FARITH  35
C............................................. ITOKTY=-1 IF NULL OPERAND        FARITH  36
      IF( ITOKTY .EQ. -1 )  GOTO  30240                                         FARITH  37
      IF( IOPRER .NE. 1 )  GOTO  10000                                          FARITH  38
C.................................................... ERR-60  BAD NUMBER        FARITH  39
           CALL  FERR( 60, ANUMBR, IDUM )                                       FARITH  40
C>>>>>>>>>>>>>>>>>>>>>???????????????? SKIP ???????????                         FARITH  41
C                                                                               FARITH  42
10000  CALL  FOPRP                                                              FARITH  43
      IF( ISTERR .NE. 0 )  GOTO  90000                                          FARITH  44
      JOPT1 = JOPT                                                              FARITH  45
      IF( JOPT .EQ. KKEOS  )  GOTO  10300                                       FARITH  46
      IF( JOPT .EQ. KKLPAR )  GOTO  41000                                       FARITH  47
10200 IF( JOPT .EQ. KKRPAR )  GOTO  42000                                       FARITH  48
10300 CONTINUE                                                                  FARITH  49
C---                                                                            FARITH  50
20100  CALL  FACCE2( IFACC2 )                                                   FARITH  51
      IF( IFACC2 .EQ. 0 )  GOTO  20700                                          FARITH  52
          IF( JOPT .EQ. KKEOS )  GOTO  20200                                    FARITH  53
            IF( IOP .EQ. KKCOMA )  GOTO  30100                                  FARITH  54
              IF( IOPT(3,JOPT) .GT. IOPT(3,IOP) )  GOTO  20400                  FARITH  55
                  IF( IOPT(3,JOPT) .NE. IOPT(3,IOP) )  GOTO  20200              FARITH  56
                      IF( JOPT .EQ. KKEQL )  GOTO  20400                        FARITH  57
20200      CALL  FOPGEN( IFOPGE )                                               FARITH  58
          IF( ISTERR .NE. 0 )  GOTO  90000                                      FARITH  59
          IF( IFOPGE .EQ. 0 )  GOTO  20400                                      FARITH  60
20300          CALL  FREM2                                                      FARITH  61
              GOTO  20100                                                       FARITH  62
20400     IF( JOPT .EQ. KKEOS )  GOTO  20600                                    FARITH  63
              IF( JOPT .NE. KKCOMA )  GOTO  30100                               FARITH  64
              IF( IOP .EQ. KKCALL )  GOTO  30100                                FARITH  65
C................................................ ZAP ERR FOR PRINT STMT        FARITH  66
20500         IF( IFARIT .EQ. 3 )  GOTO  20560                                  FARITH  67
C..................................................... ERR-12  BAD COMMA        FARITH  68
                   CALL  FERR( 12, IDUM, IDUM )                                 FARITH  69
                   CALL  FPUSH2( KKNOOP )                                       FARITH  70
                  IF( ISTERR .NE. 0 )  GOTO  90000                              FARITH  71
                  GOTO  30200                                                   FARITH  72
20560         IARITE = 12                                                       FARITH  73
              GOTO  90000                                                       FARITH  74
20600     IF( (IOP .NE. KKLPAR) .AND.                                           FARITH  75
     1        (IOP .NE. KKCALL) )   GOTO  20650                                 FARITH  76
C....................................................... ERR-13  UNBAL (        FARITH  77
               CALL  FERR( 13, IDUM, IDUM )                                     FARITH  78
              GOTO  20300                                                       FARITH  79
20650      CALL  FREM2                                                          FARITH  80
           CALL  FACCE2( IFACC2 )                                               FARITH  81
          IF( IFACC2 .EQ. 0 )  GOTO  90000                                      FARITH  82
              GOTO  20600                                                       FARITH  83
20700 IF( JOPT .EQ. KKCOMA )  GOTO  20500                                       FARITH  84
          IF( JOPT .NE. KKEOS  )  GOTO  30100                                   FARITH  85
              IF( IOP .EQ. KKEQL )  GOTO  90000                                 FARITH  86
                  IF( IFARIT .EQ. 3 )  GOTO  20800                              FARITH  87
C..................................................... ERR-14  = MISSING        FARITH  88
                       CALL  FERR( 14, IDUM, IDUM )                             FARITH  89
                      GOTO  90000                                               FARITH  90
20800             IARITE = 14                                                   FARITH  91
                  GOTO  90000                                                   FARITH  92
C                                                                               FARITH  93
C                                                                               FARITH  94
30100  CALL  FPUSH2( JOPT )                                                     FARITH  95
30200 IF( ISTERR .NE. 0     )  GOTO  90000                                      FARITH  96
      IF( JOPT   .EQ. KKEOS )  GOTO  90000                                      FARITH  97
           CALL  FIOPCK                                                         FARITH  98
30240     IF( JOPT .EQ. KKERR  )  GOTO  30300                                   FARITH  99
          IF( JOPT .NE. KKEOS  )  GOTO  30300                                   FARITH 100
              IF( JOPT1 .EQ. KKRPAR )  GOTO  20100                              FARITH 101
C............................................... ERR-15  OPERAND MISSING        FARITH 102
                   CALL  FERR( 15, IDUM, IDUM )                                 FARITH 103
                  GOTO  20100                                                   FARITH 104
C                                                                               FARITH 105
30300 IF( JOPT .EQ. KKERR )  GOTO  30800                                        FARITH 106
          JOPT2 = JOPT1                                                         FARITH 107
          JOPT1 = JOPT                                                          FARITH 108
          IF( JOPT2 .EQ. KKRPAR )  GOTO  30600                                  FARITH 109
C........................................................ 9 = .GT. LEVEL        FARITH 110
              IF( IOPT(3,JOPT2) .GT. 9 )  GOTO  30500                           FARITH 111
                  IF( JOPT .EQ. KKPLUS )  GOTO  30200                           FARITH 112
                  IF( JOPT .NE. KKMIN )  GOTO  30400                            FARITH 113
                      JOPT = KKUMIN                                             FARITH 114
                      GOTO  20100                                               FARITH 115
30400             IF( JOPT .EQ. KKNOT )  GOTO  10200                            FARITH 116
30500         IF( JOPT .EQ. KKLPAR )  GOTO  30100                               FARITH 117
C.................................................. ERR-16  OPERAND MISS        FARITH 118
                   CALL  FERR( 16, IDUM, IDUM )                                 FARITH 119
                  IF( JOPT .EQ. KKRPAR )  GOTO  10200                           FARITH 120
                  IF( JOPT .NE. KKLPAR )  GOTO  30200                           FARITH 121
                      GOTO  30100                                               FARITH 122
30600     IF( JOPT .NE. KKLPAR )  GOTO  30700                                   FARITH 123
C................................................. ERR-17  OPERATOR MISS        FARITH 124
               CALL  FERR( 17, IDUM, IDUM )                                     FARITH 125
                CALL  FPUSH2( KKNOOP )                                          FARITH 126
               IF( ISTERR .NE. 0 )  GOTO  90000                                 FARITH 127
              GOTO  30100                                                       FARITH 128
30700     IF( JOPT .NE. KKNOT )  GOTO  10200                                    FARITH 129
C.............................................. ERR-18  BAD OPERATOR SEQ        FARITH 130
               CALL  FERR( 18, IDUM, IDUM )                                     FARITH 131
              GOTO  30200                                                       FARITH 132
30800 IF( JOPT1 .NE. KKRPAR )  GOTO  1000                                       FARITH 133
C................................................. ERR-19  OPERATOR MISS        FARITH 134
           CALL  FERR( 19, IDUM, IDUM )                                         FARITH 135
           CALL  FPUSH2( KKNOOP )                                               FARITH 136
          IF( ISTERR .NE. 0 )  GOTO  90000                                      FARITH 137
          GOTO  1000                                                            FARITH 138
C                                                                               FARITH 139
C                                                                               FARITH 140
C------- PROCESS (                                                              FARITH 141
41000 JOPT = KKCALL                                                             FARITH 142
      GOTO  30100                                                               FARITH 143
C                                                                               FARITH 144
C------- PROCESS )                                                              FARITH 145
42000  CALL  FACCE2( IFACC2 )                                                   FARITH 146
      IF( IFACC2 .EQ. 0 )  GOTO  42500                                          FARITH 147
       CALL  FREM2                                                              FARITH 148
       CALL  FOPGEN( IFOPGE )                                                   FARITH 149
      IF( ISTERR .NE. 0 )  GOTO  90000                                          FARITH 150
      IF( IFOPGE .NE. 0 )  GOTO  42000                                          FARITH 151
      IF( (IOP .NE. KKCALL) .AND.                                               FARITH 152
     1    (IOP .NE. KKPRIN) )  GOTO  30200                                      FARITH 153
          IOP = KKCOMA                                                          FARITH 154
           CALL  FOPGEN( IFOPGE )                                               FARITH 155
          IF( IOP .EQ. KKPRIN )  GOTO  90000                                    FARITH 156
          IF( ISTERR .NE. 0 )  GOTO  90000                                      FARITH 157
          IOP = KKCALL                                                          FARITH 158
          IF( FPOP1( IP ) .EQ. 0 )  GOTO  30200                                 FARITH 159
          IF( IPTY .EQ. 0 )  GOTO  42400                                        FARITH 160
              IF( IPTY .GT. 3 )  KKK = KKCALL                                   FARITH 161
              IF( IPTY .EQ. 3 )  KKK = KKDIM3                                   FARITH 162
              IF( IPTY .EQ. 2 )  KKK = KKDIM2                                   FARITH 163
              IF( IPTY .EQ. 1 )  KKK = KKDIM1                                   FARITH 164
42300          CALL  FPUTOP( KKK, IP )                                          FARITH 165
              NACCUM = NACCUM + 1                                               FARITH 166
C............................................. FN RETURNS RESULT IN TOS         FARITH 167
              IPVA   = NACCUM                                                   FARITH 168
              IPID   = 4                                                        FARITH 169
              IPTY   = 0                                                        FARITH 170
42400     IPMO = 0                                                              FARITH 171
           CALL  FPUSH1( IP )                                                   FARITH 172
          IF( ISTERR .NE. 0 )  GOTO  90000                                      FARITH 173
          GOTO  30200                                                           FARITH 174
42500 IARITE = 20                                                               FARITH 175
C............................................. NO ERROR FOR IF STATEMENT        FARITH 176
      IF( IFARIT .EQ. 2 )  GOTO  90000                                          FARITH 177
C....................................................... ERR-20  UNBAL )        FARITH 178
       CALL  FERR( 20, IDUM, IDUM )                                             FARITH 179
C                                                                               FARITH 180
C                                                                               FARITH 181
C---                                                                            FARITH 182
90000 CONTINUE                                                                  FARITH 183
C.................................. ERR-27  ARITH EXPRESSION TOO COMPLEX        FARITH 184
      IF( NACCUM .GT. LACCUM )   CALL  FERR( 27, IDUM, IDUM )                   FARITH 185
C$    WRITE( 66, 902 )  IARITE                                                  FARITH 186
C$902 FORMAT( ' << FARITH ---  IARITE=',I2 )                                    FARITH 187
      RETURN                                                                    FARITH 188
      END                                                                       FARITH 189
      SUBROUTINE  FASGN                                                         FASGN    2
C---                                                                            FASGN    3
C--- PROCESS ASSIGN COMMAND                                                     FASGN    4
C---                                                                            FASGN    5
      COMMON  /FCHARS/ KCSP  , KCMUL , KCLPAR, KCPERD, KCCOMA, KCQUOT           /FCHARS/ 2
     1               , KCEQL , KCDOLR, KCPLUS, KCMIN , KCC   , KCE              /FCHARS/ 3
     2               , KCEOS , KCEOF , KCRPAR,         KLc   , KLe              /FCHARS/ 4
      COMMON  /FGNCHV/ JCH, JDIGCK, LTMP, ITMP(32)                              /FGNCHV/ 2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /FOPCD/  IOPT(4,45), LOPT, JOPT, JOPT1, IOP, IOP1                 /FOPCD/  2
     1               , KKPLUS, KKMIN,  KKDIV,  KKLPAR, KKRPAR, KKPWR            /FOPCD/  3
     2               , KKEQL,  KKOR,   KKAND,  KKNOT,  KKCALL, KKUMIN           /FOPCD/  4
     3               , KKNOOP, KKEOS,  KKLD,   KKRMIN, KKRDIV, KKRPWR           /FOPCD/  5
     4               , KKGOTO, KKEND,  KKIFGO, KKCOMA, KKRET,  KKSTOP           /FOPCD/  6
     5               , KKPRIN, KKERR,  KKDIM1, KKDIM2, KKDIM3, KKMARK           /FOPCD/  7
     6               , KKPEQL, KKEQS,  KKNEQS, KKRD  , KKWR  , KKEOF            /FOPCD/  8
     7               , KKREW , KKUNIT,  JFTNSG                                  /FOPCD/  9
      COMMON  /FOPRNV/ ITOKTY, ANUMBR, ISYMBL(8), IOPRER                        PARAM   21
     1               , IOPRID, IOPRMO, IOPRTY, IOPRVA                           /FOPRNV/ 3
          DIMENSION         IOPR(4)                                             /FOPRNV/ 4
              EQUIVALENCE  (IOPR(1), IOPRID)                                    /FOPRNV/ 5
      COMMON  /FPTRB/  NCODE, ICODE0, LCODE, NCONT, LCONT, ICONT0               /FPTRB/  2
     1               , NLITT, LLITT, ILITT0                                     /FPTRB/  3
     2               , NGLBT, IGLBT0, JGLBT, IAGLBT                             /FPTRB/  4
     3               , NLABT, LLABT, ILABT0, JLABT, IALABT                      /FPTRB/  5
     4               , LSYMT, NSYMT, ISYMT0, JSYMT, IASYMT, MSYMT0,MSYMT        /FPTRB/  6
      COMMON /ISYMB/  ISYMB(20),LSYMB,ISYMU(8),ITERM,IDELIM,LABEL(8)            SYMSIZ   1
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
C---                                                                            FASGN   15
      data    KCDIV / 1h/ /                                                     FASGN   16
      INTEGER  FIDIGC                                                           CWF1   791
C---                                                                            FASGN   18
      DIMENSION  ICTABL(2), ICSCH(3), ICSCHN(4)                                 FASGN   19
          DATA   ICTABL/ 4HTABL, 4HE    /                                       FASGN   20
     1         , ICSCH / 4HSCHE, 4HDULE, 4H    /                                FASGN   21
     2         , ICSCHN/ 4HSCHE, 4HDULE, 4H-NAM, 4HE    /                       FASGN   22
C---                                                                            FASGN   23
C$    WRITE(6,'('' FASGN  -->'')')                                              FASGN   24
c                                                                               FASGN   25
c---- get local variable name                                                   FASGN   26
c                                                                               FASGN   27
100    call  GETCS                                                              FASGN   28
       call  UPPER4( ISYMB, ISYMBL, 4 )                                         FASGN   29
      if ( ITERM .eq. 1 )     then                                              FASGN   30
          goto  9000                                                            FASGN   31
      endif                                                                     FASGN   32
c                                                                               FASGN   33
c---- ck if it is a FORTRAN variable                                            FASGN   34
c                                                                               FASGN   35
      kx2 = KARDX - 1                                                           FASGN   36
      do  300  kx = KARDSX , kx2                                                FASGN   37
c................................................. ERR-46  BAD VARIABLE NAME    FASGN   38
          K = KARD(kx)                                                          FASGN   39
          if ( (K.eq.KCDOLR) .or. (K.eq.KCPERD) .or. (K.eq.KCCOMA) .or.         FASGN   40
     1         (K.eq.KCLPAR) .or. (K.eq.KCRPAR) .or. (K.eq.KCMUL ) .or.         FASGN   41
     2         (K.eq.KCPLUS) .or. (K.eq.KCMIN ) .or. (K.eq.KCQUOT) .or.         FASGN   42
     3         (K.eq.KCEQL ) .or. (K.eq.KCDIV ) )     goto  8046                FASGN   43
300   continue                                                                  FASGN   44
      if ( FIDIGC( KARD(KARDSX) ) .lt. 0 )    goto  400                         FASGN   45
C................. ERR-46  VARIABLE NAME STARTS W NUMBER                        FASGN   46
           call  FERR( 46, ISYMB, IDUM )                                        FASGN   47
          GOTO  100                                                             FASGN   48
400    CALL  FSYMS                                                              FASGN   49
      IF( JSYMT .EQ. 0 )  GOTO  600                                             FASGN   50
C................. ERR-33  LOCAL VARIABLE ALREADY ASSIGNED                      FASGN   51
           CALL  FERR( 33, ISYMBL, IDUM )                                       FASGN   52
          GOTO  700                                                             FASGN   53
600    CALL  FSYMSE                                                             FASGN   54
c                                                                               FASGN   55
c---- NOW PROCESS THE GLOBAL VARIABLE                                           FASGN   56
c---- get number or parameter or 'SCHEDULE(', 'SCHEDULE-NAME(', 'TABLE('        FASGN   57
c                                                                               FASGN   58
700    call  GETCS                                                              FASGN   59
       call  UPPER4( ISYMB, ISYMBL, 8 )                                         PARAM   22
      if ( (ITERM + IDELIM .ne. 0) .or. (ISYMB(1) .eq. KCSP) )    then          FASGN   61
C........... ERR-34  GLOBAL VARIABLE NAME BAD OR MISSING                        FASGN   62
          goto 8034                                                             FASGN   63
      endif                                                                     FASGN   64
c                                                                               FASGN   65
c---- ck if number or not                                                       FASGN   66
c                                                                               FASGN   67
       call  a4a1( ISYMB, itmp, 1 )                                             FASGN   68
      if ( ( itmp(1) .ne. KCPERD ) .and.                                        FASGN   69
     1     ( itmp(1) .ne. KCMIN  ) .and.                                        FASGN   70
     2     ( FIDIGC( itmp(1) ) .lt. 0 ) )    goto  900                          FASGN   71
           if ( atof( ISYMB, LSYMB, 1, ANUMBR ) .ne. 0. )     goto  800         FIXJH1  39
C...................... ERR-60  BAD NUMBER                                      FASGN   73
                CALL  FERR( 60, ANUMBR, IDUM )                                  FASGN   74
C........ value = numeric.   ISYMTB(4,.)=7, ISYMTB(5,.)=NUMBER                  FASGN   75
800       IA(IASYMT+4) = 7                                                      FASGN   76
          AA(IASYMT+5) = ANUMBR                                                 FASGN   77
          GOTO  100                                                             FASGN   78
c                                                                               FASGN   79
c---- value = symbolic, ck for 'TABLE(', 'SCHEDULE-NAME(', 'SCHEDULE('          FASGN   80
c                                                                               FASGN   81
900   ITOKTY = 2                                                                FASGN   82
      if ( (ISYMBL(1) .EQ. ICTABL(1)) .AND.                                     FASGN   83
     1     (ISYMBL(2) .EQ. ICTABL(2)) )    GOTO 2000                            FASGN   84
      if ( (ISYMBL(1) .EQ. ICSCHN(1)) .AND. (ISYMBL(2) .EQ. ICSCHN(2))          FASGN   85
     1.AND.(ISYMBL(3) .EQ. ICSCHN(3)) .AND. (ISYMBL(4) .EQ. ICSCHN(4))          FASGN   86
     2       )    GOTO  3000                                                    FASGN   87
      IF( (ISYMBL(1) .EQ. ICSCH(1)) .AND. (ISYMBL(2) .EQ. ICSCH(2))             FASGN   88
     1   .AND.(ISYMBL(3) .EQ. ICSCH(3)) )    GOTO  3010                         FASGN   89
c---- global variable name , first ck parameter table                           FASGN   90
       CALL  FPARAM                                                             FASGN   91
      IF( ITOKTY .eq. 1 )  GOTO  800                                            FASGN   92
       CALL  FGLBTS                                                             FASGN   93
      IF( JGLBT .NE. 0 )  GOTO  1100                                            FASGN   94
C................. ERR-35  UNKNOWN GLOBAL VARIABLE                              FASGN   95
           CALL  FERR( 35, ISYMBL, IDUM )                                       FASGN   96
          GOTO  100                                                             FASGN   97
1100  IA(IASYMT+4) = 1                                                          FASGN   98
      IA(IASYMT+5) = IAGLBT                                                     FASGN   99
      GOTO  100                                                                 FASGN  100
c                                                                               FASGN  101
c---- 'TABLE(' .  ISYMTB(4,.)=5, ISYMTB(5,.)=CONSTANTS TABLE PTR                FASGN  102
c                                                                               FASGN  103
2000  ITBLBG = NCONT + 1                                                        FASGN  104
      IATBSY = IASYMT                                                           FASGN  105
      IA(IATBSY+5) = ITBLBG                                                     FASGN  106
      IA(IATBSY+4) = 5                                                          FASGN  107
      IA(IATBSY+8) = 0                                                          FASGN  108
      I1     = ITBLBG                                                           FASGN  109
2100   call  GETCS                                                              FASGN  110
      if ( ISYMB(1) .ne. KCLPAR )    then                                       FASGN  111
           call  BKSPAC                                                         FASGN  112
          goto  2900                                                            FASGN  113
      endif                                                                     FASGN  114
          DO  2300  I = 1 , 2                                                   FASGN  115
               call  GETCS                                                      FASGN  116
               call  MOVEN( ISYMB, ISYMBL, 8 )                                  PARAM   23
              if ( ITERM+IDELIM .ne. 0 )     then                               FASGN  118
C.................... ERR-54  TABLE VALUE BAD OR MISSING                        FASGN  119
                  goto  8054                                                    FASGN  120
              endif                                                             FASGN  121
       call  a4a1( ISYMB, itmp, 1 )                                             FASGN  122
      if ( ( itmp(1) .ne. KCPERD ) .and.                                        FASGN  123
     1     ( itmp(1) .ne. KCMIN  ) .and.                                        FASGN  124
     2     ( FIDIGC( itmp(1) ) .lt. 0 ) )    goto  2250                         FASGN  125
                  if ( atof( ISYMB, LSYMB, 1, ANUMBR ) .ne. 0.)                 FIXJH1  40
     $               goto 2270                                                  FIXJH1  41
C............................. ERR-60  BAD NUMBER                               FASGN  127
                       CALL  FERR( 60, ANUMBR, IDUM )                           FASGN  128
                      goto    8000                                              FASGN  129
2250          ITOKTY = 2                                                        FASGN  130
               CALL  FPARAM                                                     FASGN  131
              IF( ITOKTY .EQ. 1 )  GOTO  2270                                   FASGN  132
C......................... ERR-55  TABLE VALUE IS NOT A PARAM                   FASGN  133
                   CALL  FERR( 55, ISYMBL, IDUM )                               FASGN  134
2270          IF( NCONT .LT. LCONT )  GOTO  2280                                FASGN  135
C......................... ERR-31  CONSTANTS TABLE OVERFLOV                     FASGN  136
                   CALL  FERR( 31, IDUM, IDUM )                                 FASGN  137
2280          NCONT = NCONT + 1                                                 FASGN  138
              AA(ICONT0+NCONT) = ANUMBR                                         FASGN  139
C$            WRITE(6,'('' FASGN  ---  NCONT=''I5''  ANUMBR=''G14.7)')          FASGN  140
C$   1                                 NCONT, ANUMBR                            FASGN  141
2300      CONTINUE                                                              FASGN  142
          IA(IATBSY+8) = IA(IATBSY+8) + 1                                       FASGN  143
           call  GETCS                                                          FASGN  144
          if ( ISYMB(1) .ne. KCRPAR )     then                                  FASGN  145
C................ ERR-57  RIGHT PAREN MISSING                                   FASGN  146
              goto  8057                                                        FASGN  147
          endif                                                                 FASGN  148
          IF( (I1 .EQ. ITBLBG) .OR. (NCONT .NE. I1 + 3) )  GOTO  2420           FASGN  149
C..................... ERR-58  TABLE X VALUES ARE NOT IN INCREASING ORDER       FASGN  150
              IF( AA(ICONT0+NCONT-3) .GE. AA(ICONT0+NCONT-1) )                  FASGN  151
     1         CALL  FERR( 58, AA(ICONT0+NCONT-3), AA(ICONT0+NCONT-1) )         FASGN  152
2420      I1 = NCONT - 1                                                        FASGN  153
          GOTO  2100                                                            FASGN  154
2900  IF( NCONT .GE. ITBLBG+3 )  GOTO  2910                                     FASGN  155
C................. ERR-59  TABLE HAS .LT. 2 PAIRS OF VALUES                     FASGN  156
           CALL  FERR( 59, IDUM, IDUM )                                         FASGN  157
2910  CONTINUE                                                                  FASGN  158
2990  CONTINUE                                                                  FASGN  159
      GOTO  100                                                                 FASGN  160
C-------- PROCESS SCHEDULE                                                      FASGN  161
C-------- IF ACCESS BY PTR  ISYMTB(4,.)=2, ISYMTB(5,.)=GLOBAL TABLE PTR         FASGN  162
C-------- IF ACCESS BY NAME ISYMTB(4,.)=3, ISYMTB(5,.)=LITERAL TABLE PTR        FASGN  163
3000  ISCHNF = 1                                                                FASGN  164
      GOTO  3014                                                                FASGN  165
3010  ISCHNF = 0                                                                FASGN  166
3014   call  GETCS                                                              FASGN  167
      if ( ISYMB(1) .ne. KCLPAR )     then                                      FASGN  168
C............ ERR-47  SCHEDULE LPAR MISSING                                     FASGN  169
          goto  8047                                                            FASGN  170
      endif                                                                     FASGN  171
       call  GETCS                                                              FASGN  172
       call  MOVEN( ISYMB, ISYMBL, 8 )                                          PARAM   24
      if ( ITERM+IDELIM .ne. 0 )     then                                       FASGN  174
C............ ERR-48  SCHEDULE NAME BAD OR MISSING                              FASGN  175
          goto  8048                                                            FASGN  176
      endif                                                                     FASGN  177
      ITOKTY = 2                                                                FASGN  178
       CALL  FPARAM                                                             FASGN  179
      IF( ITOKTY .NE. 1 )  GOTO  3060                                           FASGN  180
C................. ERR-51  PARAMETER CHANGED SCHEDULE TO NUMBER                 FASGN  181
           CALL  FERR( 51, ISYMBL, IDUM )                                       FASGN  182
          GOTO  3900                                                            FASGN  183
3060  IF( ISCHNF .EQ. 0 )  GOTO  3100                                           FASGN  184
          IF( NLITT+8 .LE. LLITT )  GOTO  3070                                  PARAM   25
C..................... ERR-50  LITERALS TABLE OVERFLOW                          FASGN  186
               CALL  FERR( 50, IDUM, IDUM )                                     FASGN  187
              GOTO  3900                                                        FASGN  188
3070       CALL  MOVEN( ISYMBL, IA(ILITT0+NLITT+1), 8 )                         PARAM   26
          IA(IASYMT+4) = 3                                                      FASGN  190
          IA(IASYMT+5) = NLITT                                                  FASGN  191
          NLITT = NLITT + 8                                                     PARAM   27
          GOTO  3900                                                            FASGN  193
3100   call  UPPER4( ISYMBL, ISYMBL, 4 )                                        FASGN  194
       CALL  FGLBTS                                                             FASGN  195
      IF( JGLBT .NE. 0 )  GOTO  3120                                            FASGN  196
C................. ERR-63  UNKNOWN SCHEDULE POINTER NAME=                       FASGN  197
           CALL  FERR( 63, ISYMBL, IDUM )                                       FASGN  198
          GOTO  3900                                                            FASGN  199
3120  IF( IA(IAGLBT+5) .LT. 10 )  GOTO  3190                                    FASGN  200
C................. ERR-64  GLOBAL NAME IS NOT SCHEDULE POINTER=                 FASGN  201
           CALL  FERR( 64, ISYMBL, IDUM )                                       FASGN  202
          GOTO  3900                                                            FASGN  203
3190  IA(IASYMT+4) = 2                                                          FASGN  204
      IA(IASYMT+5) = IAGLBT                                                     FASGN  205
3900  CONTINUE                                                                  FASGN  206
       call  GETCS                                                              FASGN  207
      if ( ISYMB(1) .ne. KCRPAR )     then                                      FASGN  208
c............ ERR-49 ... schedule name rpar missing                             FASGN  209
          goto  8049                                                            FASGN  210
      endif                                                                     FASGN  211
      GOTO  100                                                                 FASGN  212
C---                                                                            FASGN  213
9000  CONTINUE                                                                  FASGN  214
C$    WRITE(6,'('' FASGN  <--'')')                                              FASGN  215
      RETURN                                                                    FASGN  216
C................. ERR-34  GLOBAL VARIABLE NAME BAD OR MISSING                  FASGN  217
8034       CALL  FERR( 34, ISYMBL, IDUM )                                       FASGN  218
                                          goto    8000                          FASGN  219
c................. ERR-46  BAD VARIABLE NAME                                    FASGN  220
8046       call  FERR( 46, ISYMB, IDUM )                                        FASGN  221
                                          goto    8000                          FASGN  222
C................. ERR-47  SCHEDULE LPAR MISSING                                FASGN  223
8047       CALL  FERR( 47, IDUM, IDUM )                                         FASGN  224
                                          goto    8000                          FASGN  225
C................. ERR-48  SCHEDULE NAME BAD OR MISSING                         FASGN  226
8048       CALL  FERR( 48, ISYMBL, IDUM )                                       FASGN  227
                                          goto    8000                          FASGN  228
c................. ERR-49 ... schedule name rpar missing                        FASGN  229
8049       call  FERR( 49, ISYMB, IDUM )                                        FASGN  230
                                          goto    8000                          FASGN  231
C......................... ERR-52  TABLE LPAR MISSING                           FASGN  232
8052               CALL  FERR( 52, IDUM, IDUM )                                 FASGN  233
                                          goto  8000                            FASGN  234
C......................... ERR-54  TABLE VALUE BAD OR MISSING                   FASGN  235
8054               CALL  FERR( 54, ISYMBL, IDUM )                               FASGN  236
                                                  GOTO  8000                    FASGN  237
C..................... ERR-57  RIGHT PAREN MISSING                              FASGN  238
8057           CALL  FERR( 57, IDUM, IDUM )                                     FASGN  239
                                              goto    8000                      FASGN  240
c                                                                               FASGN  241
c---- skip to EOL                                                               FASGN  242
c                                                                               FASGN  243
8000   call  SKPEOC                                                             FASGN  244
      END                                                                       FASGN  245
      BLOCK DATA FBLKD                                                          FBLKD    2
C---                                                                            FBLKD    3
C--- BLOCK DATA FOR FUNCTION INPUT PROCESSOR                                    FBLKD    4
C---                                                                            FBLKD    5
C---                                                                            FBLKD    6
      COMMON  /FCHARS/ KCSP  , KCMUL , KCLPAR, KCPERD, KCCOMA, KCQUOT           /FCHARS/ 2
     1               , KCEQL , KCDOLR, KCPLUS, KCMIN , KCC   , KCE              /FCHARS/ 3
     2               , KCEOS , KCEOF , KCRPAR,         KLc   , KLe              /FCHARS/ 4
      COMMON  /FLIBFT/ NLIBFT, LIBFT(3,30)                                      /FLIBFT/ 2
      COMMON  /FOPCD/  IOPT(4,45), LOPT, JOPT, JOPT1, IOP, IOP1                 /FOPCD/  2
     1               , KKPLUS, KKMIN,  KKDIV,  KKLPAR, KKRPAR, KKPWR            /FOPCD/  3
     2               , KKEQL,  KKOR,   KKAND,  KKNOT,  KKCALL, KKUMIN           /FOPCD/  4
     3               , KKNOOP, KKEOS,  KKLD,   KKRMIN, KKRDIV, KKRPWR           /FOPCD/  5
     4               , KKGOTO, KKEND,  KKIFGO, KKCOMA, KKRET,  KKSTOP           /FOPCD/  6
     5               , KKPRIN, KKERR,  KKDIM1, KKDIM2, KKDIM3, KKMARK           /FOPCD/  7
     6               , KKPEQL, KKEQS,  KKNEQS, KKRD  , KKWR  , KKEOF            /FOPCD/  8
     7               , KKREW , KKUNIT,  JFTNSG                                  /FOPCD/  9
      COMMON  /FSTACK/ NOPCST, LOPCST, IOPCST(100),   ISTERR                    /FSTACK/ 2
     1               , NOPRST, LOPRST, IOPRST(4,100)                            /FSTACK/ 3
     2               , NACCUM, MACCUM, LACCUM                                   /FSTACK/ 4
C---                                                                            FBLKD   11
          DATA  KCSP  /4H    /, KCMUL /4H*   /, KCLPAR/4H(   /                  FBLKD   12
     1        , KCPERD/4H.   /, KCCOMA/4H,   /, KCQUOT/4H'   /                  FBLKD   13
     2        , KCEQL /4H=   /, KCDOLR/4H$   /, KCPLUS/4H+   /                  FBLKD   14
     3        , KCMIN /4H-   /, KCC   /4HC   /, KCE   /4HE   /                  FBLKD   15
     4        , KCEOS /4HEOS /, KCEOF /4HEOF /, KCRPAR/4H)   /                  FBLKD   16
      data  KLc / 1hc /,  KLe / 1he /                                           FBLKD   17
C---                                                                            FBLKD   18
          DATA   LIBFT/ 4HSIN ,4H    , 1,  4HCOS ,4H    , 2                     FBLKD   19
     1                , 4HATAN,4H    , 3,  4HALOG,4H    , 4                     FBLKD   20
     2                , 4HABS ,4H    , 5,  4HEXP ,4H    , 6                     FBLKD   21
     3                , 4HRAND,4H    , 7,  4HSQRT,4H    , 8                     FBLKD   22
     4                , 4HALOG,4H10  , 9,  4HAMOD,4H    ,10                     FBLKD   23
     5                , 4HAMAX,4H    ,11,  4HAMIN,4H    ,12                     FBLKD   24
     6                , 4HPWL ,4H    ,13,  4HINT ,4H    ,14                     FBLKD   25
     7                , 4HACCE,4HSS  ,15,  4HSTOR,4HE   ,16                     FBLKD   26
     8                , 4HIACC,4HESS ,17,  4HISTO,4HRE  ,18                     FBLKD   27
     8                , 4HGETA,4HA   ,19,  4HH   ,4h    ,20                     FBLKD   28
     9                , 4HV   ,4H    ,21,  4HRHFU,4HNC  ,22                     FBLKD   29
     1                , 4HWBFS,4H    ,23,  4HWFUN,4HC   ,24                     FBLKD   30
     2                , 4HCVAL,4H    ,25,  4HGET ,4H    ,26                     FBLKD   31
     3                , 4HPUT ,4H    ,27,  4HGETI,4H    ,28                     FBLKD   32
     4                , 4HPUTI,4H    ,29,  4H----,4H    ,30                     FBLKD   33
     5                /, NLIBFT/29/                                             FBLKD   34
C---                                                                            FBLKD   35
      DATA  IOPT/ 4H+   , 1,10, 1,   4H-   , 2,10, 2,   4H*   , 3,11, 3         FBLKD   36
     1          , 4H/   , 4,11, 4,   4H(   , 5, 2,-1,   4H)   , 6, 1,-2         FBLKD   37
     2          , 4H**  , 7,13, 7,   4H=   , 8, 3,19                            FBLKD   38
     3          , 4HOR. , 9, 6,15,   4HEQ. ,10, 9, 9,   4HNE. ,11, 9,10         FBLKD   39
     4          , 4HGT. ,12, 9,11,   4HGE. ,13, 9,12,   4HLT. ,14, 9,13         FBLKD   40
     5          , 4HLE. ,15, 9,14,   4HAND.,16, 7,16,   4HNOT.,17, 8,18         FBLKD   41
     6          , 4H,   ,18, 4,21,   4HU-  ,19,14,17,   4HNOOP,20,10,25         FBLKD   42
     7          , 4HEOS ,21,-9,-3,   4HLD  ,22,-9,20,   4HR-  ,23,10, 5         FBLKD   43
     8          , 4HR/  ,24,11, 6,   4HR** ,25,13, 8,   4HGOTO,26,-9,34         FBLKD   44
     9          , 4HEND ,27, 0,26,   4HIFGO,28, 0,23,   4HCALL,29, 2,24         FBLKD   45
     1          , 4HRET ,30, 0,27,   4HSTOP,31, 0,28,   4HPRIN,32,-9,29         FBLKD   46
     2          , 4HERR ,33,-9,-9,   4HDIM1,34,-9,30,   4HDIM2,35,-9,31         FBLKD   47
     3          , 4HDIM3,36,-9,32,   4HMARK,37,-9,33,   4HP=  ,38,-9,22         FBLKD   48
     4          , 4HEQS ,39,-9,35,   4HNEQS,40,-9,36,   4HRD  ,41,-9,37         FBLKD   49
     5          , 4HWR  ,42,-9,38,   4HEOF ,43,-9,39,   4HREW ,44,-9,40         FBLKD   50
     6          , 4HUNIT,45,-9,41 /                                             FBLKD   51
      DATA  LOPT/45/                                                            FBLKD   52
        DATA  KKPLUS/ 1/, KKMIN / 2/, KKDIV / 4/, KKLPAR/ 5/, KKRPAR/ 6/        FBLKD   53
     1      , KKPWR / 7/, KKEQL / 8/, KKOR  / 9/, KKAND /16/, KKNOT /17/        FBLKD   54
     2      , KKCOMA/18/, KKUMIN/19/, KKNOOP/20/, KKEOS /21/, KKLD  /22/        FBLKD   55
     3      , KKRMIN/23/, KKRDIV/24/, KKRPWR/25/, KKGOTO/26/, KKEND /27/        FBLKD   56
     4      , KKIFGO/28/, KKCALL/29/, KKRET /30/, KKSTOP/31/, KKPRIN/32/        FBLKD   57
     5      , KKERR /33/, KKDIM1/34/, KKDIM2/35/, KKDIM3/36/, KKMARK/37/        FBLKD   58
     6      , KKPEQL/38/, KKEQS /39/, KKNEQS/40/, KKRD/41/  , KKWR/42/          FBLKD   59
     7      , KKEOF/43/ , KKREW/44/ , KKUNIT/45/                                FBLKD   60
C---                                                                            FBLKD   61
          DATA  LOPCST/100/, LOPRST/100/                                        FBLKD   62
          DATA  LACCUM/100/                                                     FBLKD   63
C---                                                                            FBLKD   64
      END                                                                       FBLKD   65
      SUBROUTINE  FCOMPU                                                        FCOMPU   2
C---                                                                            FCOMPU   3
C--- PROCESS COMPUTE COMMAND                                                    FCOMPU   4
C---                                                                            FCOMPU   5
      COMMON  /FBUF/   IBUF0(80), IBUF(1062), JBUF, NBUF, IEOF0                 /FBUF/   2
     1               , IBUFEF, LINENO                                           /FBUF/   3
      COMMON  /FCHARS/ KCSP  , KCMUL , KCLPAR, KCPERD, KCCOMA, KCQUOT           /FCHARS/ 2
     1               , KCEQL , KCDOLR, KCPLUS, KCMIN , KCC   , KCE              /FCHARS/ 3
     2               , KCEOS , KCEOF , KCRPAR,         KLc   , KLe              /FCHARS/ 4
      COMMON  /FGNCHV/ JCH, JDIGCK, LTMP, ITMP(32)                              /FGNCHV/ 2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /FOPCD/  IOPT(4,45), LOPT, JOPT, JOPT1, IOP, IOP1                 /FOPCD/  2
     1               , KKPLUS, KKMIN,  KKDIV,  KKLPAR, KKRPAR, KKPWR            /FOPCD/  3
     2               , KKEQL,  KKOR,   KKAND,  KKNOT,  KKCALL, KKUMIN           /FOPCD/  4
     3               , KKNOOP, KKEOS,  KKLD,   KKRMIN, KKRDIV, KKRPWR           /FOPCD/  5
     4               , KKGOTO, KKEND,  KKIFGO, KKCOMA, KKRET,  KKSTOP           /FOPCD/  6
     5               , KKPRIN, KKERR,  KKDIM1, KKDIM2, KKDIM3, KKMARK           /FOPCD/  7
     6               , KKPEQL, KKEQS,  KKNEQS, KKRD  , KKWR  , KKEOF            /FOPCD/  8
     7               , KKREW , KKUNIT,  JFTNSG                                  /FOPCD/  9
      COMMON  /FOPRNV/ ITOKTY, ANUMBR, ISYMBL(8), IOPRER                        PARAM   21
     1               , IOPRID, IOPRMO, IOPRTY, IOPRVA                           /FOPRNV/ 3
          DIMENSION         IOPR(4)                                             /FOPRNV/ 4
              EQUIVALENCE  (IOPR(1), IOPRID)                                    /FOPRNV/ 5
      COMMON  /FPTRB/  NCODE, ICODE0, LCODE, NCONT, LCONT, ICONT0               /FPTRB/  2
     1               , NLITT, LLITT, ILITT0                                     /FPTRB/  3
     2               , NGLBT, IGLBT0, JGLBT, IAGLBT                             /FPTRB/  4
     3               , NLABT, LLABT, ILABT0, JLABT, IALABT                      /FPTRB/  5
     4               , LSYMT, NSYMT, ISYMT0, JSYMT, IASYMT, MSYMT0,MSYMT        /FPTRB/  6
      COMMON  /FSTACK/ NOPCST, LOPCST, IOPCST(100),   ISTERR                    /FSTACK/ 2
     1               , NOPRST, LOPRST, IOPRST(4,100)                            /FSTACK/ 3
     2               , NACCUM, MACCUM, LACCUM                                   /FSTACK/ 4
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
C---                                                                            FCOMPU  15
      DIMENSION  IPGOTO(4)                                                      FCOMPU  16
C---                                                                            FCOMPU  17
      INTEGER  FIDIGC, FNUMC0                                                   FCOMPU  18
C---                                                                            FCOMPU  19
          DATA   IPGOTO/ 5, 0, 0, 0 /                                           FCOMPU  20
C---                                                                            FCOMPU  21
C$    WRITE( 66, 901 )                                                          FCOMPU  22
C$901 FORMAT( ' >> FCOMPU ---' )                                                FCOMPU  23
      NLABT  = 0                                                                FCOMPU  24
      IEOF0  = 0                                                                FCOMPU  25
      IFFLG  = 0                                                                FCOMPU  26
      IBUFEF = 1                                                                FCOMPU  27
c---- initialize IBUF(7) to non-'END' to fool subr FRDBUF .                     FCOMPU  28
      IBUF(7) = KCMIN                                                           FCOMPU  29
1000   CALL  FRDBUF                                                             FCOMPU  30
      IF( IBUFEF .NE. 0 )  GOTO  9000                                           FCOMPU  31
      ILABLV = NCODE + 1                                                        FCOMPU  32
C--- CK LABEL FIELD                                                             FCOMPU  33
      NNBUF  = NBUF                                                             FCOMPU  34
      NBUF   = 6                                                                FCOMPU  35
C.............................................. 1 = ARITHMETIC STATEMENT        FCOMPU  36
      ILABTY = 1                                                                FCOMPU  37
      LABEL  = 0                                                                FCOMPU  38
       CALL  FIGNCH                                                             FCOMPU  39
      IF( JCH .EQ. KCEOS )  GOTO  2990                                          FCOMPU  40
          IF( FIDIGC( JCH ) .LT. 0 )  GOTO  2800                                FCOMPU  41
              ANUMBR = 0.                                                       FCOMPU  42
              DPFLG  = 0.                                                       FCOMPU  43
              IF( FNUMC0( ANUMBR, DPFLG ) .EQ. 0 )  GOTO  2800                  FCOMPU  44
                  LABEL = ANUMBR + 0.01                                         FCOMPU  45
                  IF( LABEL .EQ. 0 )  GOTO  2800                                FCOMPU  46
C...... CK IF LABEL REDEFINED                                                   FCOMPU  47
                   CALL  FLABSR( LABEL )                                        FCOMPU  48
                  IF( IA(IALABT+3) .EQ. 0 )  GOTO  2900                         FCOMPU  49
C................................................ ERR-1  LABEL REDEFINED        FCOMPU  50
                       CALL  FERR( 1, IA(IALABT+3), IDUM )                      FCOMPU  51
                      GOTO  2890                                                FCOMPU  52
C...................................................... ERR-2  BAD LABEL        FCOMPU  53
2800       CALL  FERR( 2, IDUM, IDUM )                                          FCOMPU  54
2890      LABEL  = 0                                                            FCOMPU  55
2900      ILABEL = IALABT                                                       FCOMPU  56
2990  CONTINUE                                                                  FCOMPU  57
C                                                                               FCOMPU  58
C--- PUT NOOP CODE WITH LINENO                                                  FCOMPU  59
C                                                                               FCOMPU  60
      IF( MOD( IA(ICODE0+NCODE), 256 ) .EQ. IOPT(2,KKNOOP) )                    FCOMPU  61
     1                                                NCODE = NCODE - 1         FCOMPU  62
      IPGOTO(4) = LINENO                                                        FCOMPU  63
       CALL  FPUTOP( KKNOOP, IPGOTO )                                           FCOMPU  64
C                                                                               FCOMPU  65
C--- DETERMINE STATEMENT TYPE                                                   FCOMPU  66
C---     END, GOTO, IF(, CONTINUE, SUBROUTINE, RETURN, PRINT, CALL,             FCOMPU  67
C---     DIMENSION                                                              FCOMPU  68
C                                                                               FCOMPU  69
      NBUF = NNBUF                                                              FCOMPU  70
      JBUF = 6                                                                  FCOMPU  71
       CALL  FIGNCH                                                             FCOMPU  72
      IF( JCH .EQ. KCEOS )  GOTO  7000                                          FCOMPU  73
3000   CALL  FOPRND( ITOKTY, IOPRER )                                           FCOMPU  74
C.............................................. UNRECOGNIZIBLE STATEMENT        FCOMPU  75
      IF( ITOKTY .NE. 2 )  GOTO  8000                                           FCOMPU  76
       CALL  FTNSCK( JFTNST, JFTNSG )                                           FCOMPU  77
C.................................................... CK IF ARITHMETIC          FCOMPU  78
      IF( JFTNSG .EQ. 0 )  GOTO  4000                                           FCOMPU  79
C.................................................... IGNORED STATEMENTS        FCOMPU  80
      IF( JFTNSG .LT. 0 )  GOTO  8200                                           FCOMPU  81
      GOTO( 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 ), JFTNSG             FCOMPU  82
C------ ( IF  ) ------                                                          FCOMPU  83
C................................................ IF NO ( GIVE ERR              FCOMPU  84
1     IF( JOPT .NE. KKLPAR )  GOTO  10080                                       FCOMPU  85
       CALL  FARITH( 2, IARITE )                                                FCOMPU  86
      IF( IARITE .EQ. 20 )  GOTO  10040                                         FCOMPU  87
C.............................................. ERR-28  BAD IF STATEMENT        FCOMPU  88
           CALL  FERR( 28, IDUM, IDUM )                                         FCOMPU  89
          GOTO  7000                                                            FCOMPU  90
10040 IFFLG  = NCODE + 1                                                        FCOMPU  91
       CALL  FPUTOP( KKIFGO, IPGOTO )                                           FCOMPU  92
      GOTO  3000                                                                FCOMPU  93
C............................ ERR-9  BAD USAGE OF FORTRAN RESERVED KEYWD        FCOMPU  94
10080  CALL  FERR( 9, IDUM, IDUM )                                              FCOMPU  95
      GOTO  7000                                                                FCOMPU  96
C------ ( GOTO ) ------                                                         FCOMPU  97
C............................................... BAD GOTO TERMINATOR            FCOMPU  98
2     IF( JOPT .NE. KKEOS )  GOTO  20080                                        FCOMPU  99
C............................................... IF BAD NUMBER GIVE ERR         FCOMPU 100
      IF( FSTON( NGOTO ) .EQ. 0 )  GOTO  20082                                  FCOMPU 101
           CALL  FLABSR( NGOTO )                                                FCOMPU 102
          IPGOTO(4) = JLABT                                                     FCOMPU 103
           CALL  FPUTOP( KKGOTO, IPGOTO )                                       FCOMPU 104
          GOTO  7000                                                            FCOMPU 105
C........................................... ERR-5  BAD GOTO  TERMINATOR        FCOMPU 106
20080  CALL  FERR( 5, IDUM, IDUM )                                              FCOMPU 107
      GOTO  7000                                                                FCOMPU 108
C.......................................... ERR-6  BAD GOTO STATEMENT NO        FCOMPU 109
20082  CALL  FERR( 6, IDUM, IDUM )                                              FCOMPU 110
      GOTO  7000                                                                FCOMPU 111
C------ ( CONTINUE  ) ------                                                    FCOMPU 112
C............................................. ERR-7  CONT STMT ENDS BAD        FCOMPU 113
3     IF( JOPT .NE. KKEOS )   CALL  FERR( 7, IDUM, IDUM )                       FCOMPU 114
      GOTO  7000                                                                FCOMPU 115
C------ ( RETURN  ) ------                                                      FCOMPU 116
C........................................... ERR-8  RETURN STMT ENDS BAD        FCOMPU 117
4     IF( JOPT .NE. KKEOS )   CALL  FERR( 8, IDUM, IDUM )                       FCOMPU 118
       CALL  FPUTOP( KKRET, IPGOTO )                                            FCOMPU 119
      GOTO  7000                                                                FCOMPU 120
C------ ( END  ) ------                                                         FCOMPU 121
5      CALL  FPASS2( IA(ISYMT0+1) )                                             FCOMPU 122
      GOTO  9000                                                                FCOMPU 123
C------ ( SUBROUTINE ) ------                                                   FCOMPU 124
6     CONTINUE                                                                  FCOMPU 125
      GOTO  8200                                                                FCOMPU 126
C------ ( STOP ) ------                                                         FCOMPU 127
7      CALL  FPUTOP( KKSTOP, IPGOTO )                                           FCOMPU 128
          GOTO  7000                                                            FCOMPU 129
C------ ( PRINT )                                                               FCOMPU 130
8     IF( (JOPT .EQ. KKEOS) .OR. (JOPT .EQ. KKCOMA) )  GOTO  80090              FCOMPU 131
C........................................... ERR-29  BAD PRINT STATEMENT        FCOMPU 132
80080      CALL  FERR( 29, IDUM, IDUM )                                         FCOMPU 133
          GOTO  7000                                                            FCOMPU 134
80090 IF( FSTON( IFORNU ) .EQ. 0 )  GOTO  80080                                 FCOMPU 135
      IOOP   = KKPRIN                                                           FCOMPU 136
      IOUNIT = 0                                                                FCOMPU 137
80100  CALL  FLABSR( IFORNU )                                                   FCOMPU 138
      IF( IA(IALABT+3) .EQ. 0 )  GOTO  80300                                    FCOMPU 139
          IF( IA(IALABT+5) .EQ. 3 )  GOTO  80500                                FCOMPU 140
C........................................... ERR-30.1  STMT NO REF NON-F        FCOMPU 141
               CALL  FERR( 30, IA(IALABT+3), IDUM )                             FCOMPU 142
              GOTO  80500                                                       FCOMPU 143
80300 IF( IA(IALABT+4) .EQ. 0 )  GOTO  80400                                    FCOMPU 144
      IF( (IFORNU.NE.LABEL) .AND.                                               FCOMPU 145
     1    (IA(IALABT+4).EQ.LINENO) )  GOTO  80400                               FCOMPU 146
C........................................................ 3 = FORMAT            FCOMPU 147
          IF( IA(IALABT+5) .EQ. 3 )  GOTO  80320                                FCOMPU 148
C........................................... ERR-30.2  STMT NO REF NON-F        FCOMPU 149
               CALL  FERR( 30, IA(IALABT+4), IDUM )                             FCOMPU 150
80320     CONTINUE                                                              FCOMPU 151
C......................................................... 3 = FORMAT           FCOMPU 152
80400 IA(IALABT+5) = 3                                                          FCOMPU 153
80500 IF( JOPT .EQ. KKEOS )  GOTO  80600                                        FCOMPU 154
80520      CALL  FARITH( 3, IARITE )                                            FCOMPU 155
C...................................... 12= BAD COMMA, 14= EQUAL MISSING        FCOMPU 156
          IF( (IARITE.NE.12) .AND. (IARITE.NE.14) )  GOTO  80080                FCOMPU 157
           CALL  FPUTOP( KKCOMA, IOPRST(1,1) )                                  FCOMPU 158
          IF( JOPT .NE. KKEOS  )  GOTO  80520                                   FCOMPU 159
80600 IF( IOOP .EQ. KKPRIN )  GOTO  80650                                       FCOMPU 160
          IPGOTO(4) = IOUNIT                                                    FCOMPU 161
           CALL  FPUTOP( KKUNIT, IPGOTO )                                       FCOMPU 162
80650 IPGOTO(4) = JLABT                                                         FCOMPU 163
       CALL  FPUTOP( IOOP, IPGOTO )                                             FCOMPU 164
      GOTO  7000                                                                FCOMPU 165
C------ ( FORMAT )                                                              FCOMPU 166
9     IF( JOPT .NE. KKLPAR )  GOTO  8000                                        FCOMPU 167
      IF( LABEL .NE. 0 )  GOTO  90020                                           FCOMPU 168
C......................................... ERR-25  FORMAT NUMBER MISSING        FCOMPU 169
           CALL  FERR( 25, IDUM, IDUM )                                         FCOMPU 170
          GOTO  7000                                                            FCOMPU 171
C.................................................. TRIM THE FORMAT DATA        FCOMPU 172
90020 I2 = NBUF - JBUF                                                          FCOMPU 173
          DO  90030  I = 1 , I2                                                 FCOMPU 174
          IF( IBUF(NBUF) .NE. KCSP )  GOTO  90040                               FCOMPU 175
          NBUF = NBUF - 1                                                       FCOMPU 176
90030     CONTINUE                                                              FCOMPU 177
90040 JBUF = JBUF - 1                                                           FCOMPU 178
      IBUF(JBUF) = KCLPAR                                                       FCOMPU 179
       CALL  PACKWD( NBUF-JBUF+1, IBUF(JBUF)                                    FCOMPU 180
     1             , LLITT-NLITT, IA(ILITT0+NLITT+1), NWDS )                    FCOMPU 181
C.............................................. ERR-26  FORMAT TABLE OVF        FCOMPU 182
      IF( NWDS .LT. 0 )   CALL  FERR( 26, IDUM, IDUM )                          FCOMPU 183
C........................................................... 3 = FORMAT         FCOMPU 184
      ILABTY = 3                                                                FCOMPU 185
      ILABLV = NLITT + 1                                                        FCOMPU 186
      NLITT  = NLITT + NWDS                                                     FCOMPU 187
      GOTO  7000                                                                FCOMPU 188
C------ ( CALL )                                                                FCOMPU 189
10    CONTINUE                                                                  FCOMPU 190
      GOTO  8200                                                                FCOMPU 191
C--- ( READ )                                                                   FCOMPU 192
11    IOOP = KKRD                                                               FCOMPU 193
      GOTO  12000                                                               FCOMPU 194
C--- ( WRITE )                                                                  FCOMPU 195
12    IOOP = KKWR                                                               FCOMPU 196
12000 IF( JOPT .NE. KKLPAR )  GOTO  4000                                        FCOMPU 197
       CALL  FOPRND( ITOKTY, IOPRER )                                           FCOMPU 198
      IF( (ITOKTY .EQ. 1) .AND. (IOPRER .EQ. 0) )  GOTO  12290                  FCOMPU 199
C................................... ERR-67  BAD READ OR WRITE STATEMENT        FCOMPU 200
12280      CALL  FERR( 67, IDUM, IDUM )                                         FCOMPU 201
          GOTO  7000                                                            FCOMPU 202
12290 IOUNIT = INT( ANUMBR + 0.0001 )                                           FCOMPU 203
      IF( (JOPT .NE. KKRPAR) .AND. (JOPT .NE. KKCOMA) )  GOTO  12280            FCOMPU 204
      JLABT = 0                                                                 FCOMPU 205
      IF( JOPT .EQ. KKCOMA )  GOTO  12300                                       FCOMPU 206
           CALL  FIOPCK                                                         FCOMPU 207
          GOTO  80500                                                           FCOMPU 208
12300  CALL  FOPRND( ITOKTY, IOPRER )                                           FCOMPU 209
      IF( (ITOKTY .NE. 1) .OR. (IOPRER .NE. 0) .OR.                             FCOMPU 210
     1    (JOPT .NE. KKRPAR) )  GOTO  12280                                     FCOMPU 211
      IFORNU = INT( ANUMBR + 0.0001 )                                           FCOMPU 212
       CALL  FIOPCK                                                             FCOMPU 213
      GOTO  80100                                                               FCOMPU 214
C------ ( ENDFILE )                                                             FCOMPU 215
13    IOOP = KKEOF                                                              FCOMPU 216
      GOTO  14050                                                               FCOMPU 217
C------ ( REWIND )                                                              FCOMPU 218
14    IOOP = KKREW                                                              FCOMPU 219
14050 IF( FSTON( IOUNIT ) .NE. 0 )  GOTO  14090                                 FCOMPU 220
C........................................ ERR-68  BAD ENDFILE, OR REWIND        FCOMPU 221
14080      CALL  FERR( 68, IDUM, IDUM )                                         FCOMPU 222
          GOTO  7000                                                            FCOMPU 223
14090 IF( JOPT .NE. KKEOS )  GOTO  14080                                        FCOMPU 224
      IPGOTO(4) = IOUNIT                                                        FCOMPU 225
       CALL  FPUTOP( IOOP, IPGOTO )                                             FCOMPU 226
      GOTO  7000                                                                FCOMPU 227
C--- CK IF ARITHMETIC EXP                                                       FCOMPU 228
4000  IF( (JOPT .NE. KKEQL) .AND. (JOPT .NE. KKLPAR) )  GOTO  8000              FCOMPU 229
       CALL  FARITH( 1, IARITE )                                                FCOMPU 230
C--- PUT IF STATEMENT JUMP ADDR                                                 FCOMPU 231
7000  CONTINUE                                                                  FCOMPU 232
7100  IF( IFFLG .EQ. 0 )  GOTO  7200                                            FCOMPU 233
          IPGOTO(4) = NCODE + 1                                                 FCOMPU 234
          NCODE = IFFLG - 1                                                     FCOMPU 235
           CALL  FPUTOP( KKIFGO, IPGOTO )                                       FCOMPU 236
          NCODE  = IPGOTO(4) - 1                                                FCOMPU 237
          IFFLG = 0                                                             FCOMPU 238
C--- PUT LABEL IN TABLE                                                         FCOMPU 239
7200  IF( LABEL .EQ. 0 )  GOTO  7900                                            FCOMPU 240
          IALABT = ILABEL                                                       FCOMPU 241
          IA(IALABT+2) = ILABLV                                                 FCOMPU 242
          IA(IALABT+3) = LINENO                                                 FCOMPU 243
          IA(IALABT+5) = ILABTY                                                 FCOMPU 244
7900  CONTINUE                                                                  FCOMPU 245
      GOTO  1000                                                                FCOMPU 246
C....................................... ERR-4  UNRECOGNIZIBLE STATEMENT        FCOMPU 247
8000   CALL  FERR( 4, IDUM, IDUM )                                              FCOMPU 248
      GOTO  7100                                                                FCOMPU 249
C------ ( DIMENSION, COMMON ) ------                                            FCOMPU 250
8200  WRITE(IOUTPT, 801)                                                        FCOMPU 251
801   FORMAT( 92X, 25H*** STATEMENT IGNORED *** )                               FCOMPU 252
      GOTO  7000                                                                FCOMPU 253
C---                                                                            FCOMPU 254
9000  CONTINUE                                                                  FCOMPU 255
C$    WRITE( 66, 909 )                                                          FCOMPU 256
C$909 FORMAT( ' << FCOMPU ---' )                                                FCOMPU 257
      RETURN                                                                    FCOMPU 258
      END                                                                       FCOMPU 259
      SUBROUTINE  FDEBGD                                                        FDEBGD   2
C---                                                                            FDEBGD   3
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /FPTRB/  NCODE, ICODE0, LCODE, NCONT, LCONT, ICONT0               /FPTRB/  2
     1               , NLITT, LLITT, ILITT0                                     /FPTRB/  3
     2               , NGLBT, IGLBT0, JGLBT, IAGLBT                             /FPTRB/  4
     3               , NLABT, LLABT, ILABT0, JLABT, IALABT                      /FPTRB/  5
     4               , LSYMT, NSYMT, ISYMT0, JSYMT, IASYMT, MSYMT0,MSYMT        /FPTRB/  6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
C---                                                                            FDEBGD   7
      WRITE(IOUTPT,7001)  NGLBT                                                 FDEBGD   8
7001  FORMAT( 16H0-FDEBGD- NGLBT=, I4 )                                         FDEBGD   9
C>>> CDC <<<                                                                    FDEBGD  10
      IF( NGLBT .GT. 0 )   WRITE( IOUTPT, 7002 )  (I, (                         FDEBGD  11
     1                IA(IGLBT0+I*8-8+J)                                        FDEBGD  12
     2             , J=1,4) , (IA(IGLBT0+I*8-8+J), J=5,8), I=1,NGLBT)           FDEBGD  13
7002  FORMAT( 2H (, I3, 2H) ,4A4, 3I3, I5,                                      FDEBGD  14
     1    8X, 2H (, I3, 2H) ,4A4, 3I3, I5,                                      FDEBGD  15
     2    8X, 2H (, I3, 2H) ,4A4, 3I3, I5 )                                     FDEBGD  16
C---                                                                            FDEBGD  17
      WRITE(IOUTPT,7003)  NSYMT                                                 FDEBGD  18
7003  FORMAT( 16H0-FDEBGD- NSYMT=, I4 )                                         FDEBGD  19
      IF( NSYMT .GT. 0 )                                                        FDEBGD  20
     1    WRITE(IOUTPT,7004) (I, (IA(ISYMT0+I*8-8+J), J=1,8), I=1,NSYMT)        FDEBGD  21
7004  FORMAT( 2H (, I3, 2H) , 2A4, 6I4 )                                        FDEBGD  22
      RETURN                                                                    FDEBGD  23
      END                                                                       FDEBGD  24
      SUBROUTINE  FDUMP                                                         FDUMP    2
C---                                                                            FDUMP    3
C--- DUMP STANDARD FILE FUNCTION RECORD                                         FDUMP    4
C---                                                                            FDUMP    5
        CHARACTER*16    IOPR_CHAR                                               FDUMP    6
          EQUIVALENCE ( IOPR_CHAR, IOPR )                                       FDUMP    7
        CHARACTER*16    IOPRTM_CHAR                                             FDUMP    8
          EQUIVALENCE ( IOPRTM_CHAR, IOPRTM )                                   FDUMP    9
      COMMON  /FCHARS/ KCSP  , KCMUL , KCLPAR, KCPERD, KCCOMA, KCQUOT           /FCHARS/ 2
     1               , KCEQL , KCDOLR, KCPLUS, KCMIN , KCC   , KCE              /FCHARS/ 3
     2               , KCEOS , KCEOF , KCRPAR,         KLc   , KLe              /FCHARS/ 4
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /FLIBFT/ NLIBFT, LIBFT(3,30)                                      /FLIBFT/ 2
      COMMON  /FOPCD/  IOPT(4,45), LOPT, JOPT, JOPT1, IOP, IOP1                 /FOPCD/  2
     1               , KKPLUS, KKMIN,  KKDIV,  KKLPAR, KKRPAR, KKPWR            /FOPCD/  3
     2               , KKEQL,  KKOR,   KKAND,  KKNOT,  KKCALL, KKUMIN           /FOPCD/  4
     3               , KKNOOP, KKEOS,  KKLD,   KKRMIN, KKRDIV, KKRPWR           /FOPCD/  5
     4               , KKGOTO, KKEND,  KKIFGO, KKCOMA, KKRET,  KKSTOP           /FOPCD/  6
     5               , KKPRIN, KKERR,  KKDIM1, KKDIM2, KKDIM3, KKMARK           /FOPCD/  7
     6               , KKPEQL, KKEQS,  KKNEQS, KKRD  , KKWR  , KKEOF            /FOPCD/  8
     7               , KKREW , KKUNIT,  JFTNSG                                  /FOPCD/  9
      COMMON  /FPTRB/  NCODE, ICODE0, LCODE, NCONT, LCONT, ICONT0               /FPTRB/  2
     1               , NLITT, LLITT, ILITT0                                     /FPTRB/  3
     2               , NGLBT, IGLBT0, JGLBT, IAGLBT                             /FPTRB/  4
     3               , NLABT, LLABT, ILABT0, JLABT, IALABT                      /FPTRB/  5
     4               , LSYMT, NSYMT, ISYMT0, JSYMT, IASYMT, MSYMT0,MSYMT        /FPTRB/  6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
C---                                                                            FDUMP   16
      DIMENSION  IAOPCD(50), IOPR(4), IOPRTM(4)                                 FDUMP   17
C---                                                                            FDUMP   18
      DATA  KCD0D/4H-0- /                                                       FDUMP   19
C---                                                                            FDUMP   20
      WRITE( IOUTPT, 901 )  NSYMT, NCODE, NLITT, NCONT                          FDUMP   21
  901 FORMAT( 1H1, 9H   NSYMT=,I3, 8H  NCODE=,I4                                FDUMP   22
     1                       , 9H   NLITT=,I3, 8H  NCONT=,I3 )                  FDUMP   23
C--- DUMP SYMBOL TABLE                                                          FDUMP   24
      WRITE( IOUTPT, 902 )  ISYMT0, NSYMT                                       FDUMP   25
  902 FORMAT( //, 21H0--- SYMBOL TABLE ---, 2I5, / )                            FDUMP   26
      WRITE(IOUTPT,903 ) (I, (IA(ISYMT0+I*8-8+J), J=1,8), I=1,NSYMT)            FDUMP   27
  903 FORMAT( I5, 2H- , 2A4, 6I6 )                                              FDUMP   28
C--- DUMP CONSTANTS TABLE                                                       FDUMP   29
      WRITE( IOUTPT, 904 )  ICONT0, NCONT                                       FDUMP   30
  904 FORMAT( //, 24H0--- CONSTANTS TABLE ---, 2I5, / )                         FDUMP   31
      IF(NCONT.GT.0)  WRITE( IOUTPT, 905 ) (I, AA(ICONT0+I), I=1,NCONT)         FDUMP   32
  905 FORMAT( I5, 2H- , G20.8 )                                                 FDUMP   33
C--- DUMP LITERALS TABLE                                                        FDUMP   34
      WRITE( IOUTPT, 914 )  ILITT0, NLITT                                       FDUMP   35
  914 FORMAT( //, 23H0--- LITERALS TABLE ---, 2I5, / )                          FDUMP   36
      IF( NLITT .LT. 1 )  GOTO  420                                             FDUMP   37
          I1 = 1                                                                FDUMP   38
410       I2 = I1 + 9                                                           FDUMP   39
          IF( I2 .GT. NLITT )  I2 = NLITT                                       FDUMP   40
          WRITE( IOUTPT, 915 ) I1, (IA(ILITT0+I), I=I1,I2)                      FDUMP   41
915       FORMAT( 1X, I4, 1H=, 10A11 )                                          FDUMP   42
          I1 = I1 + 10                                                          FDUMP   43
          IF( I2 .NE. NLITT )  GOTO  410                                        FDUMP   44
420   CONTINUE                                                                  FDUMP   45
C--- DUMP CODE TABLE                                                            FDUMP   46
      NTMP = 0                                                                  FDUMP   47
          DO  500  I = 1 , LOPT                                                 FDUMP   48
          IF( IOPT(4,I) .LT. 1 )  GOTO  500                                     FDUMP   49
              IAOPCD(IOPT(4,I)) = IOPT(1,I)                                     FDUMP   50
500       CONTINUE                                                              FDUMP   51
      WRITE( IOUTPT, 906 )                                                      FDUMP   52
  906 FORMAT( //, 19H0--- CODE TABLE ---,/ )                                    FDUMP   53
          DO  200  I = 1 , NCODE                                                FDUMP   54
          IOPR(1) = KCSP                                                        FDUMP   55
          IOPR(2) = KCSP                                                        FDUMP   56
          IOPR(3) = KCSP                                                        FDUMP   57
          IOPR(4) = KCSP                                                        FDUMP   58
          NOA4FL = 0                                                            FDUMP   59
          NOPC = MOD( IA(ICODE0+I), 256 )                                       FDUMP   60
          NOPR = IA(ICODE0+I) / 256  -  100000                                  FDUMP   61
          IAOPC = IAOPCD(NOPC)                                                  FDUMP   62
          KK = NOPR                                                             FDUMP   63
          IF( (IAOPC .NE. IOPT(1,KKPRIN)) .AND.                                 FDUMP   64
     1        (IAOPC .NE. IOPT(1,KKRD  )) .AND.                                 FDUMP   65
     2        (IAOPC .NE. IOPT(1,KKWR  )) )  GOTO  1004                         FDUMP   66
      WRITE(IOPR_CHAR(:16),2)  KK                                               FDUMP   67
2             FORMAT( 5H-LIT-,I5,6X )                                           FDUMP   68
              NOA4FL = 1                                                        FDUMP   69
              GOTO  2000                                                        FDUMP   70
1004      IF( IAOPC .NE. IOPT(1,KKCALL) )  GOTO  1010                           FDUMP   71
              IF( KK .GE. 0 )  GOTO  1010                                       FDUMP   72
                  KK = - KK                                                     FDUMP   73
                  IOPR(1) = LIBFT(1,KK)                                         FDUMP   74
                  IOPR(2) = LIBFT(2,KK)                                         FDUMP   75
                  GOTO  1090                                                    FDUMP   76
1010      IF( NOPC .LE. 22 )  GOTO  1015                                        FDUMP   77
      WRITE(IOPR_CHAR(:16),3)  KK                                               FDUMP   78
3             FORMAT( I5, 11X )                                                 FDUMP   79
              NOA4FL = 1                                                        FDUMP   80
              GOTO  2000                                                        FDUMP   81
1015      IF( KK .NE. 0 )  GOTO  1020                                           FDUMP   82
              IOPR(1) = KCD0D                                                   FDUMP   83
              GOTO  1090                                                        FDUMP   84
1020      IF( KK .GT. 0 )  GOTO  1060                                           FDUMP   85
      WRITE(IOPR_CHAR(:16),102)  AA(ICONT0+NCONT+1+KK)                          FDUMP   86
102           FORMAT( G16.6 )                                                   FDUMP   87
              NOA4FL = 1                                                        FDUMP   88
              GOTO  1090                                                        FDUMP   89
1060      KK1 = ISYMT0 + (KK-1)*8                                               FDUMP   90
          IOPR(1) = IA(KK1+1)                                                   FDUMP   91
          IOPR(2) = IA(KK1+2)                                                   FDUMP   92
          IOPR(3) = KCSP                                                        FDUMP   93
          IOPR(4) = KCSP                                                        FDUMP   94
1090      CONTINUE                                                              FDUMP   95
          IF( KK .EQ. 0 )  NTMP = NTMP - 1                                      FDUMP   96
2000      IF( (IAOPC .EQ. IOPT(1,KKCALL)) .OR. (IAOPC .EQ. IOPT(1,KKLD))        FDUMP   97
     1   .OR. (IAOPC .EQ. IOPT(1,KKUMIN)) .OR. (IAOPC .EQ.IOPT(1,KKNOT))        FDUMP   98
     2      )  NTMP = NTMP + 1                                                  FDUMP   99
          IF( IAOPC .EQ. IOPT(1,KKNOOP) )  NTMP = 0                             FDUMP  100
          IF( (IAOPC.EQ.IOPT(1,KKEQL)) .OR.                                     FDUMP  101
     1        (IAOPC.EQ.IOPT(1,KKPEQL))  ) NTMP = NTMP - 1                      FDUMP  102
          IF( NOA4FL .EQ. 0 )  GOTO  3000                                       FDUMP  103
C                                                                               FDUMP  104
CDC>>> CONVERT 2A10 TO 4A4                                                      FDUMP  105
       CALL  MOVEN( IOPR, IOPRTM, 4 )                                           FDUMP  106
      READ(IOPRTM_CHAR(:16),9) IOPR                                             FDUMP  107
9     FORMAT( 4A4 )                                                             FDUMP  108
C                                                                               FDUMP  109
3000      CONTINUE                                                              FDUMP  110
          WRITE(IOUTPT,907) I, NOPC, NOPR, IAOPC, IOPR, NTMP                    FDUMP  111
907       FORMAT( I5,1H., I4, I5, 10X,A4,3X,4A4, 7H     T ,I2)                  FDUMP  112
200       CONTINUE                                                              FDUMP  113
      END                                                                       FDUMP  114
      SUBROUTINE  FERR( IERRNO, IERRA1, IERRA2 )                                FERR     2
C---                                                                            FERR     3
C--- PRINT FN ERR  MSG                                                          FERR     4
C---                                                                            FERR     5
      COMMON  /FFLAGS/ IFFLAG, IFLABL(4), IFLEVL, NUMOVL, NFERR                 /FFLAGS/ 2
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
C---                                                                            FERR     8
      DIMENSION  IERM1(3), IERRA1(4)                                            FERR     9
          DATA   IERM1   /4H --E,4HRROR,4H--  /                                 FERR    10
C---                                                                            FERR    11
C$    WRITE( 66, 901 )  IERRNO                                                  FERR    12
C$901 FORMAT( ' -- FERR   --- IERRNO=' I3 )                                     FERR    13
      IF( IERRNO .GT. 30 )  GOTO  100                                           FERR    14
      GOTO  ( 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15                       FERR    15
     1      ,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30), IERRNO              FERR    16
100   IF( IERRNO .GT. 70 )  GOTO  110                                           FERR    17
      I = IERRNO - 30                                                           FERR    18
      GOTO  ( 31, 32, 33, 34, 35, 36, 37, 38, 39, 40                            FERR    19
     1      , 41, 42, 43, 44, 45, 46, 47, 48, 49, 50                            FERR    20
     2      , 51, 52, 53, 54, 55, 56, 57, 58, 59, 60                            FERR    21
     3      , 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 ), I                       FERR    22
110   I = IERRNO - 70                                                           FERR    23
      GOTO  ( 71, 72, 73, 74, 75, 76, 77, 78, 79, 80                            FERR    24
     1      ), I                                                                FERR    25
1     WRITE(IOUTPT,1001)  IERM1, IERRA1(1)                                      FERR    26
1001  FORMAT( 3A4, 36HSTATEMENT LABEL REDEFINED - SEE LINE, I5 )                FERR    27
          GOTO  90000                                                           FERR    28
2     WRITE(IOUTPT,1002)  IERM1                                                 FERR    29
1002  FORMAT( 3A4, 19HBAD STATEMENT LABEL )                                     FERR    30
          GOTO  90000                                                           FERR    31
3     WRITE(IOUTPT,1003)  IERM1                                                 FERR    32
1003  FORMAT( 3A4, 30HSTATEMENT LABEL TABLE OVERFLOW )                          FERR    33
       CALL  ABT                                                                FERR    34
          GOTO  90000                                                           FERR    35
4     WRITE(IOUTPT,1004)  IERM1                                                 FERR    36
1004  FORMAT( 3A4, 24HUNRECOGNIZIBLE STATEMENT )                                FERR    37
          GOTO  90000                                                           FERR    38
5     WRITE(IOUTPT,1005)  IERM1                                                 FERR    39
1005  FORMAT( 3A4, 23HGOTO STATEMENT ENDS BAD )                                 FERR    40
          GOTO  90000                                                           FERR    41
6     WRITE(IOUTPT,1006)  IERM1                                                 FERR    42
1006  FORMAT( 3A4, 25HBAD GOTO STATEMENT NUMBER )                               FERR    43
          GOTO  90000                                                           FERR    44
7     WRITE(IOUTPT,1007)  IERM1                                                 FERR    45
1007  FORMAT( 3A4, 28HCONTINUE STATEMENT ENDS BAD )                             FERR    46
          GOTO  90000                                                           FERR    47
8     WRITE(IOUTPT,1008)  IERM1                                                 FERR    48
1008  FORMAT( 3A4, 26HRETURN STATEMENT ENDS BAD )                               FERR    49
          GOTO  90000                                                           FERR    50
9     WRITE(IOUTPT,1009)  IERM1                                                 FERR    51
1009  FORMAT( 3A4, 34HBAD USAGE OF FORTRAN RESERVED WORD )                      FERR    52
          GOTO  90000                                                           FERR    53
10    WRITE(IOUTPT,1010)  IERM1, (IERRA1(I), I=1,2)                             FERR    54
1010  FORMAT( 3A4, 31HVARIABLE NAME USED AS FUNCTION=, 2A4 )                    FERR    55
          GOTO  90000                                                           FERR    56
11    WRITE(IOUTPT,1011)  IERM1, (IERRA1(I), I=1,2)                             FERR    57
1011  FORMAT( 3A4, 31HFUNCTION NAME USED AS VARIABLE=, 2A4 )                    FERR    58
          GOTO  90000                                                           FERR    59
12    WRITE(IOUTPT,1012)  IERM1                                                 FERR    60
1012  FORMAT( 3A4,  9HBAD COMMA )                                               FERR    61
          GOTO  90000                                                           FERR    62
13    WRITE(IOUTPT,1013)  IERM1                                                 FERR    63
1013  FORMAT( 3A4, 12HUNBALANCED ( )                                            FERR    64
          GOTO  90000                                                           FERR    65
14    WRITE(IOUTPT,1014)  IERM1                                                 FERR    66
1014  FORMAT( 3A4, 18HEQUAL SIGN MISSING )                                      FERR    67
          GOTO  90000                                                           FERR    68
15    WRITE(IOUTPT,1015)  IERM1                                                 FERR    69
1015  FORMAT( 3A4, 15HOPERAND MISSING )                                         FERR    70
          GOTO  90000                                                           FERR    71
16    WRITE(IOUTPT,1016)  IERM1                                                 FERR    72
1016  FORMAT( 3A4, 15HOPERAND MISSING )                                         FERR    73
          GOTO  90000                                                           FERR    74
17    WRITE(IOUTPT,1017)  IERM1                                                 FERR    75
1017  FORMAT( 3A4, 16HOPERATOR MISSING )                                        FERR    76
          GOTO  90000                                                           FERR    77
18    WRITE(IOUTPT,1018)  IERM1                                                 FERR    78
1018  FORMAT( 3A4, 23HBAD OPERATOR SEQUENCING )                                 FERR    79
          GOTO  90000                                                           FERR    80
19    WRITE(IOUTPT,1019)  IERM1                                                 FERR    81
1019  FORMAT( 3A4, 16HOPERATOR MISSING )                                        FERR    82
          GOTO  90000                                                           FERR    83
20    WRITE(IOUTPT,1020)  IERM1                                                 FERR    84
1020  FORMAT( 3A4, 12HUNBALANCED ) )                                            FERR    85
          GOTO  90000                                                           FERR    86
21    WRITE(IOUTPT,1021)  IERM1                                                 FERR    87
1021  FORMAT( 3A4, 10HMIXED MODE )                                              FERR    88
          GOTO  90000                                                           FERR    89
22    WRITE(IOUTPT,1022)  IERM1                                                 FERR    90
1022  FORMAT( 3A4, 36HNUMERIC OPERAND IN LOGICAL OPERATION )                    FERR    91
          GOTO  90000                                                           FERR    92
23    WRITE(IOUTPT,1023)  IERM1                                                 FERR    93
1023  FORMAT( 3A4, 36HBAD EXPRESSION TO THE LEFT OF = SIGN )                    FERR    94
          GOTO  90000                                                           FERR    95
24    WRITE(IOUTPT,1024)  IERM1, IERRA1(1), IERRA2                              FERR    96
1024  FORMAT( 3A4, 16HSTATEMENT NUMBER, I6, 19H  MISSING, SEE LINE,I6 )         FERR    97
          GOTO  90000                                                           FERR    98
25    WRITE(IOUTPT,1025)  IERM1                                                 FERR    99
1025  FORMAT( 3A4, 21HFORMAT NUMBER MISSING )                                   FERR   100
          GOTO  90000                                                           FERR   101
26    WRITE(IOUTPT,1026)  IERM1                                                 FERR   102
1026  FORMAT( 3A4, 22HFORMATS TABLE OVERFLOW )                                  FERR   103
       CALL  ABT                                                                FERR   104
27    WRITE(IOUTPT,1027)  IERM1                                                 FERR   105
1027  FORMAT( 3A4, 33HARITHMETIC EXPRESSION TOO COMPLEX )                       FERR   106
          GOTO  90000                                                           FERR   107
28    WRITE(IOUTPT,1028)  IERM1                                                 FERR   108
1028  FORMAT( 3A4, 16HBAD IF STATEMENT )                                        FERR   109
          GOTO  90000                                                           FERR   110
29    WRITE(IOUTPT,1029)  IERM1                                                 FERR   111
1029  FORMAT( 3A4, 19HBAD PRINT STATEMENT )                                     FERR   112
          GOTO  90000                                                           FERR   113
30    WRITE(IOUTPT,1030)  IERM1, IERRA1(1)                                      FERR   114
1030  FORMAT( 3A4, 36HSTATEMENT NO REFERRED TO NON-FORMAT,,                     FERR   115
     1             10H  SEE LINE, I6 )                                          FERR   116
          GOTO  90000                                                           FERR   117
31    WRITE(IOUTPT,1031)  IERM1                                                 FERR   118
1031  FORMAT( 3A4, 24HCONSTANTS TABLE OVERFLOW )                                FERR   119
           CALL  ABT                                                            FERR   120
32    WRITE(IOUTPT,1032)  IERM1                                                 FERR   121
1032  FORMAT( 3A4, 13HEQUAL MISSING )                                           FERR   122
          GOTO  90000                                                           FERR   123
33    WRITE(IOUTPT,1033)  IERM1, (IERRA1(I), I=1,4)                             FERR   124
1033  FORMAT( 3A4, 33HLOCAL VARIABLE ALREADY ASSIGNED= , 4A4 )                  FERR   125
          GOTO  90000                                                           FERR   126
34    WRITE(IOUTPT,1034)  IERM1, (IERRA1(I), I=1,4)                             FERR   127
1034  FORMAT( 3A4, 36HGLOBAL VARIABLE NAME BAD OR MISSING=, 4A4 )               FERR   128
          GOTO  90000                                                           FERR   129
35    WRITE(IOUTPT,1035)  IERM1, (IERRA1(I), I=1,4)                             FERR   130
1035  FORMAT( 3A4, 25HUNKNOWN GLOBAL VARIABLE= , 4A4 )                          FERR   131
          GOTO  90000                                                           FERR   132
36    WRITE(IOUTPT,1036)  IERM1                                                 FERR   133
1036  FORMAT( 3A4, 30HSYMBOL TABLE CAPACITY EXCEEDED )                          FERR   134
           CALL  ABT                                                            FERR   135
37    WRITE(IOUTPT,1037)  IERM1                                                 FERR   136
1037  FORMAT( 3A4, 25HBAD ARITHMETIC EXPRESSION )                               FERR   137
          GOTO  90000                                                           FERR   138
38    WRITE(IOUTPT,1038)  IERM1                                                 FERR   139
1038  FORMAT( 3A4, 24HFUNCTION NAME IS MISSING )                                FERR   140
          GOTO  90000                                                           FERR   141
39    WRITE(IOUTPT,1039)  IERM1, IERRA1(1)                                      FERR   142
1039  FORMAT( 3A4, 34HFUNCTION DEFINED BEFORE - SEE LINE, I5 )                  FERR   143
          GOTO  90000                                                           FERR   144
40    WRITE(IOUTPT,1040)  IERM1                                                 FERR   145
1040  FORMAT( 3A4, 32HMAX NUMBER OF FUNCTIONS EXCEEDED )                        FERR   146
          GOTO  90000                                                           FERR   147
41    WRITE(IOUTPT,1041)  IERM1                                                 FERR   148
1041  FORMAT( 3A4, 13HLEVEL MISSING )                                           FERR   149
          GOTO  90000                                                           FERR   150
42    WRITE(IOUTPT,1042)  IERM1, (IERRA1(I), I=1,4)                             FERR   151
1042  FORMAT( 3A4, 16HBAD LEVEL VALUE=, 4A4 )                                   FERR   152
          GOTO  90000                                                           FERR   153
43    WRITE(IOUTPT,1043)  IERM1                                                 FERR   154
1043  FORMAT( 3A4, 16HCOMMAND ENDS BAD )                                        FERR   155
          GOTO  90000                                                           FERR   156
44    WRITE(IOUTPT,1044)  IERM1                                                 FERR   157
1044  FORMAT( 3A4, 34HMISPOSITIONED END-FUNCTION COMMAND )                      FERR   158
          GOTO  90000                                                           FERR   159
45    WRITE(IOUTPT,1045)  IERM1, (IERRA1(I), I=1,4)                             FERR   160
1045  FORMAT( 3A4, 32HUNRECOGNIZIBLE FUNCTION COMMAND=, 4A4 )                   FERR   161
          GOTO  90000                                                           FERR   162
46    WRITE(IOUTPT,1046)  IERM1, (IERRA1(I), I=1,4)                             FERR   163
1046  FORMAT( 3A4, 18HBAD VARIABLE NAME=, 4A4 )                                 FERR   164
          GOTO  90000                                                           FERR   165
47    WRITE(IOUTPT,1047)  IERM1                                                 FERR   166
1047  FORMAT( 3A4, 32HSCHEDULE NAME LEFT PAREN MISSING )                        FERR   167
          GOTO  90000                                                           FERR   168
48    WRITE(IOUTPT,1048)  IERM1, (IERRA1(I), I=1,4)                             FERR   169
1048  FORMAT( 3A4, 29HSCHEDULE NAME BAD OR MISSING=, 4A4 )                      FERR   170
          GOTO  90000                                                           FERR   171
49    WRITE(IOUTPT,1049)  IERM1                                                 FERR   172
1049  FORMAT( 3A4, 33HSCHEDULE NAME RIGHT PAREN MISSING )                       FERR   173
          GOTO  90000                                                           FERR   174
50    WRITE(IOUTPT,1050)  IERM1                                                 FERR   175
1050  FORMAT( 3A4, 23HLITERALS TABLE OVERFLOW )                                 FERR   176
           CALL  ABT                                                            FERR   177
51    WRITE(IOUTPT,1051)  IERM1, (IERRA1(I), I=1,4)                             FERR   178
1051  FORMAT( 3A4,42HPARAMETER NAME CHANGED SCHEDULE TO NUMBER=, 4A4 )          FERR   179
          GOTO  90000                                                           FERR   180
52    WRITE(IOUTPT,1052)  IERM1                                                 FERR   181
1052  FORMAT( 3A4, 24HTABLE LEFT PAREN MISSING )                                FERR   182
          GOTO  90000                                                           FERR   183
53    WRITE(IOUTPT,1053)  IERM1                                                 FERR   184
1053  FORMAT( 3A4, 19HTABLE VALUE MISSING )                                     FERR   185
          GOTO  90000                                                           FERR   186
54    WRITE(IOUTPT,1054)  IERM1, (IERRA1(I), I=1,4)                             FERR   187
1054  FORMAT( 3A4, 27HTABLE VALUE BAD OR MISSING=, 4A4 )                        FERR   188
          GOTO  90000                                                           FERR   189
55    WRITE(IOUTPT,1055)  IERM1, (IERRA1(I), I=1,4)                             FERR   190
1055  FORMAT( 3A4, 44HTABLE VALUE IS SYMBOLIC BUT NOT A PARAMETER=,4A4 )        FERR   191
          GOTO  90000                                                           FERR   192
56    WRITE(IOUTPT,1056)  IERM1                                                 FERR   193
1056  FORMAT( 3A4, 13HCOMMA MISSING )                                           FERR   194
          GOTO  90000                                                           FERR   195
57    WRITE(IOUTPT,1057)  IERM1                                                 FERR   196
1057  FORMAT( 3A4, 19HRIGHT PAREN MISSING )                                     FERR   197
          GOTO  90000                                                           FERR   198
58    WRITE(IOUTPT,1058)  IERM1                                                 FERR   199
1058  FORMAT( 3A4, 38HTABLE X VALUES NOT IN INCREASING ORDER )                  FERR   200
          GOTO  90000                                                           FERR   201
59    WRITE(IOUTPT,1059)  IERM1                                                 FERR   202
1059  FORMAT( 3A4, 37HTABLE HAS LESS THAN 2 PAIRS OF VALUES )                   FERR   203
          GOTO  90000                                                           FERR   204
60    WRITE(IOUTPT,1060)  IERM1                                                 FERR   205
1060  FORMAT( 3A4, 10HBAD NUMBER )                                              FERR   206
          GOTO  90000                                                           FERR   207
61    WRITE(IOUTPT,1061)  IERM1, (IERRA1(I), I=1,4)                             FERR   208
1061  FORMAT( 3A4, 50HWRITE-PROTECTED VARIABLE TO THE LEFT OF EQUAL SIGN        FERR   209
     1     ,5H ,   , 35HCANNOT CHANGE CONTENTS OF VARIABLE=, 4A4 )              FERR   210
          GOTO  90000                                                           FERR   211
62    WRITE(IOUTPT,1062)  IERM1                                                 FERR   212
1062  FORMAT( 3A4, 36HLOGICAL OPERAND IN NUMERIC OPERATION )                    FERR   213
          GOTO  90000                                                           FERR   214
63    WRITE(IOUTPT,1063)  IERM1, (IERRA1(I), I=1,4)                             FERR   215
1063  FORMAT( 3A4, 31HUNKNOWN SCHEDULE POINTER NAME =, 4A4 )                    FERR   216
          GOTO  90000                                                           FERR   217
64    WRITE(IOUTPT,1064)  IERM1, (IERRA1(I), I=1,4)                             FERR   218
1064  FORMAT( 3A4, 37HGLOBAL NAME IS NOT SCHEDULE POINTER =, 4A4 )              FERR   219
          GOTO  90000                                                           FERR   220
65    WRITE(IOUTPT,1065)  IERM1, (IERRA1(I), I=1,4)                             FERR   221
1065  FORMAT( 3A4, 25HUNRECOGNIZIBLE KEYWORD = , 4A4 )                          FERR   222
          GOTO  90000                                                           FERR   223
66    WRITE(IOUTPT,1066)  IERM1, (IERRA1(I), I=1,4)                             FERR   224
1066  FORMAT( 3A4, 19HKEYWORD REPEATED = , 4A4 )                                FERR   225
          GOTO  90000                                                           FERR   226
67    WRITE(IOUTPT,1067)  IERM1                                                 FERR   227
1067  FORMAT( 3A4, 27HBAD READ OR WRITE STATEMENT )                             FERR   228
          GOTO  90000                                                           FERR   229
68    WRITE(IOUTPT,1068)  IERM1                                                 FERR   230
1068  FORMAT( 3A4, 31HBAD REWIND OR ENDFILE STATEMENT )                         FERR   231
          GOTO  90000                                                           FERR   232
69    write( IOUTPT, 1069 )  IERM1                                              FERR   233
1069  format( 3a4, 27hTOO MANY CONTINUATION LINES )                             FERR   234
          GOTO  90000                                                           FERR   235
70    WRITE(IOUTPT,1070)  IERM1                                                 FERR   236
1070  FORMAT( 3A4,  2H70 )                                                      FERR   237
          GOTO  90000                                                           FERR   238
71    WRITE(IOUTPT,1071)  IERM1                                                 FERR   239
1071  FORMAT( 3A4,  2H71 )                                                      FERR   240
          GOTO  90000                                                           FERR   241
72    WRITE(IOUTPT,1072)  IERM1                                                 FERR   242
1072  FORMAT( 3A4,  2H72 )                                                      FERR   243
          GOTO  90000                                                           FERR   244
73    WRITE(IOUTPT,1073)  IERM1                                                 FERR   245
1073  FORMAT( 3A4,  2H73 )                                                      FERR   246
          GOTO  90000                                                           FERR   247
74    WRITE(IOUTPT,1074)  IERM1                                                 FERR   248
1074  FORMAT( 3A4,  2H74 )                                                      FERR   249
          GOTO  90000                                                           FERR   250
75    WRITE(IOUTPT,1075)  IERM1                                                 FERR   251
1075  FORMAT( 3A4,  2H75 )                                                      FERR   252
          GOTO  90000                                                           FERR   253
76    WRITE(IOUTPT,1076)  IERM1                                                 FERR   254
1076  FORMAT( 3A4,  2H76 )                                                      FERR   255
          GOTO  90000                                                           FERR   256
77    WRITE(IOUTPT,1077)  IERM1                                                 FERR   257
1077  FORMAT( 3A4,  2H77 )                                                      FERR   258
          GOTO  90000                                                           FERR   259
78    WRITE(IOUTPT,1078)  IERM1                                                 FERR   260
1078  FORMAT( 3A4,  2H78 )                                                      FERR   261
          GOTO  90000                                                           FERR   262
79    WRITE(IOUTPT,1079)  IERM1                                                 FERR   263
1079  FORMAT( 3A4,  2H79 )                                                      FERR   264
          GOTO  90000                                                           FERR   265
80    WRITE(IOUTPT,1080)  IERM1                                                 FERR   266
1080  FORMAT( 3A4,  2H80 )                                                      FERR   267
          GOTO  90000                                                           FERR   268
C---                                                                            FERR   269
90000 CONTINUE                                                                  FERR   270
      NFERR = NFERR + 1                                                         FERR   271
      RETURN                                                                    FERR   272
      END                                                                       FERR   273
      SUBROUTINE  FGLBTS                                                        FGLBTS   2
C---                                                                            FGLBTS   3
C--- SEARCH ISYMBL(1-4) IN GLOBAL SYMBOL TABLE                                  FGLBTS   4
C---                                                                            FGLBTS   5
C------- DIM  XX(8,NGLBT)                                                       FGLBTS   6
C------- JGLBT= JJ NUMBER OF FOUND ENTRY.  (I.E. XX(1,JGLBT)= FOUND ENTRY)      FGLBTS   7
C------- IAGLBT= IA BIAS TO VALUE LOCATION. (I.E. IA(IAGLBT+1)= START OF DATA)  FGLBTS   8
C---                                                                            FGLBTS   9
      COMMON  /FOPRNV/ ITOKTY, ANUMBR, ISYMBL(8), IOPRER                        PARAM   21
     1               , IOPRID, IOPRMO, IOPRTY, IOPRVA                           /FOPRNV/ 3
          DIMENSION         IOPR(4)                                             /FOPRNV/ 4
              EQUIVALENCE  (IOPR(1), IOPRID)                                    /FOPRNV/ 5
      COMMON  /FPTRB/  NCODE, ICODE0, LCODE, NCONT, LCONT, ICONT0               /FPTRB/  2
     1               , NLITT, LLITT, ILITT0                                     /FPTRB/  3
     2               , NGLBT, IGLBT0, JGLBT, IAGLBT                             /FPTRB/  4
     3               , NLABT, LLABT, ILABT0, JLABT, IALABT                      /FPTRB/  5
     4               , LSYMT, NSYMT, ISYMT0, JSYMT, IASYMT, MSYMT0,MSYMT        /FPTRB/  6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
C---                                                                            FGLBTS  13
      DIMENSION  ISYTMP(4)                                                      FGLBTS  14
C---                                                                            FGLBTS  15
          DO  50  I = 1 , 4                                                     FGLBTS  16
C>>> CDC <<<                                                                    FGLBTS  17
          ISYTMP(I) =                                                           FGLBTS  18
     2                       ISYMBL(I)                                          FGLBTS  19
50        CONTINUE                                                              FGLBTS  20
      I1 = 1                                                                    FGLBTS  21
      IF( NGLBT .EQ. 0 )  GOTO  800                                             FGLBTS  22
          I2 = NGLBT                                                            FGLBTS  23
          K0 = IGLBT0 - 8                                                       FGLBTS  24
100           II = ( I1 + I2 )  /  2                                            FGLBTS  25
              II2 = II + II                                                     FGLBTS  26
              II4 = II2 + II2                                                   FGLBTS  27
              K = K0  +  II4 + II4                                              FGLBTS  28
              DO  200  I = 1 , 4                                                FGLBTS  29
              IF( ISYTMP(I) .GT. IA(K+I) )  GOTO  300                           FGLBTS  30
              IF( ISYTMP(I) .LT. IA(K+I) )  GOTO  400                           FGLBTS  31
200           CONTINUE                                                          FGLBTS  32
          GOTO  700                                                             FGLBTS  33
300           IF( I1 .EQ. I2 )  GOTO  800                                       FGLBTS  34
              I1 = II + 1                                                       FGLBTS  35
              GOTO  100                                                         FGLBTS  36
400           IF( I1 .EQ. I2 )  GOTO  800                                       FGLBTS  37
              I2 = II                                                           FGLBTS  38
              GOTO  100                                                         FGLBTS  39
800   JGLBT = 0                                                                 FGLBTS  40
      IAGLBT = 0                                                                FGLBTS  41
      GOTO  900                                                                 FGLBTS  42
700       JGLBT = II                                                            FGLBTS  43
          IAGLBT = K                                                            FGLBTS  44
900   CONTINUE                                                                  FGLBTS  45
C$    WRITE( 66, 901 ) ISYMBL, JGLBT, IAGLBT                                    FGLBTS  46
C$901 FORMAT( ' -- GLBTSR --- ISYMBL='4A4 '  JGLBT='I6 '  IAGLBT='I6 )          FGLBTS  47
      RETURN                                                                    FGLBTS  48
      END                                                                       FGLBTS  49
      INTEGER  FUNCTION  FIDIGC ( ICH )                                         FIDIGC   2
C---                                                                            FIDIGC   3
C--- CK IF ICH IS A DIGIT                                                       FIDIGC   4
C--- RETURN -1 IF NOT A DIGIT, ELSE RETURN NUMBER 0-9                           FIDIGC   5
C---                                                                            FIDIGC   6
      COMMON  /FGNCHV/ JCH, JDIGCK, LTMP, ITMP(32)                              /FGNCHV/ 2
C---                                                                            FIDIGC   8
      DIMENSION  IDIGS(10)                                                      FIDIGC   9
C---                                                                            FIDIGC  10
      DATA  IDIGS/ 1H0, 1H1, 1H2, 1H3, 1H4, 1H5, 1H6, 1H7, 1H8, 1H9 /           FIDIGC  11
C---                                                                            FIDIGC  12
          DO  100  I = 1 , 10                                                   FIDIGC  13
          J = I                                                                 FIDIGC  14
          IF( ICH .EQ. IDIGS(I) )  GOTO  200                                    FIDIGC  15
100       CONTINUE                                                              FIDIGC  16
      J = 0                                                                     FIDIGC  17
200   FIDIGC = J - 1                                                            FIDIGC  18
      JDIGCK = FIDIGC                                                           FIDIGC  19
      RETURN                                                                    FIDIGC  20
      END                                                                       FIDIGC  21
      SUBROUTINE  FIGNCH                                                        FIGNCH   2
C---                                                                            FIGNCH   3
C--- GET NEXT CH                                                                FIGNCH   4
C--- SKIP OVER COMMENT FIELDS $...$                                             FIGNCH   5
C--- JCH= KCEOS  FOR  EOS,  =KCEOF  FOR EOF,  =CHAR  FOR LEGAL CH               FIGNCH   6
C--- IF MODFTN > 0 SKIP OVER BLANKS                                             FIGNCH   7
C---                                                                            FIGNCH   8
      COMMON  /FBUF/   IBUF0(80), IBUF(1062), JBUF, NBUF, IEOF0                 /FBUF/   2
     1               , IBUFEF, LINENO                                           /FBUF/   3
      COMMON  /FCHARS/ KCSP  , KCMUL , KCLPAR, KCPERD, KCCOMA, KCQUOT           /FCHARS/ 2
     1               , KCEQL , KCDOLR, KCPLUS, KCMIN , KCC   , KCE              /FCHARS/ 3
     2               , KCEOS , KCEOF , KCRPAR,         KLc   , KLe              /FCHARS/ 4
      COMMON  /FGNCHV/ JCH, JDIGCK, LTMP, ITMP(32)                              /FGNCHV/ 2
      COMMON  /FMODFT/ MODFTN                                                   /FMODFT/ 2
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
C---                                                                            FIGNCH  15
100   IF( JBUF .LT. NBUF )  GOTO  200                                           FIGNCH  16
          IF( MODFTN .NE. 0 )  GOTO  600                                        FIGNCH  17
           CALL  KRDRD                                                          FIGNCH  18
          IF( IEOF .EQ. 1 )  GOTO  800                                          FIGNCH  19
           CALL  MOVEN( KARD(1), IBUF(1), KARDI2 )                              FIGNCH  20
C$    WRITE( 66, 902 )  KRDNUM, (KARD(I), I=1,KARDI2)                           FIGNCH  21
C$902 FORMAT( 2H0* I4, 3H *  80A1, / )                                          FIGNCH  22
          NBUF = KARDI2                                                         FIGNCH  23
          JBUF = 0                                                              FIGNCH  24
200   JBUF = JBUF + 1                                                           FIGNCH  25
      IF( (MODFTN.GT.0) .AND. (IBUF(JBUF).EQ.KCSP ) )  GOTO  100                FIGNCH  26
      JCH = IBUF(JBUF)                                                          FIGNCH  27
C---                                                                            FIGNCH  28
      IF( MODFTN .NE. 0 )  GOTO  700                                            FIGNCH  29
      IF( JCH .NE. KCPERD )  GOTO  300                                          FIGNCH  30
          IF( JBUF .GE. NBUF )  GOTO  700                                       FIGNCH  31
              IF( IBUF(JBUF+1) .NE. KCPERD )  GOTO  700                         FIGNCH  32
                  JBUF = JBUF + 1                                               FIGNCH  33
                  GOTO  600                                                     FIGNCH  34
300   IF( JCH .NE. KCDOLR )  GOTO  700                                          FIGNCH  35
      IF( JBUF .EQ. 80 )  GOTO  400                                             FIGNCH  36
          I1 = JBUF + 1                                                         FIGNCH  37
              DO  320  I = I1 , 80                                              FIGNCH  38
              JBUF = I                                                          FIGNCH  39
              IF( IBUF(I) .EQ. KCDOLR )  GOTO  400                              FIGNCH  40
320           CONTINUE                                                          FIGNCH  41
400   CONTINUE                                                                  FIGNCH  42
      GOTO  100                                                                 FIGNCH  43
600       JCH = KCEOS                                                           FIGNCH  44
          GOTO  900                                                             FIGNCH  45
700   CONTINUE                                                                  FIGNCH  46
      GOTO  900                                                                 FIGNCH  47
800       JCH = KCEOF                                                           FIGNCH  48
900   CONTINUE                                                                  FIGNCH  49
C$    WRITE( 66, 901 )  JBUF, JCH                                               FIGNCH  50
C$901 FORMAT( ' ---- FIGNCH  ---  JBUF=' I3 '  JCH=' A4 )                       FIGNCH  51
      RETURN                                                                    FIGNCH  52
      END                                                                       FIGNCH  53
      SUBROUTINE  FIOPCK                                                        FIOPCK   2
C---                                                                            FIOPCK   3
C--- CK IF JCH IS AN OPERATOR, IF YES INCREMENT ICOL TO PAST LAST               FIOPCK   4
C---     CH OF OP                                                               FIOPCK   5
C--- JOPT=KKERR  IF ERR,  =KKEOS  IF EOS,EOF                                    FIOPCK   6
C---                                                                            FIOPCK   7
      COMMON  /FBUF/   IBUF0(80), IBUF(1062), JBUF, NBUF, IEOF0                 /FBUF/   2
     1               , IBUFEF, LINENO                                           /FBUF/   3
      COMMON  /FCHARS/ KCSP  , KCMUL , KCLPAR, KCPERD, KCCOMA, KCQUOT           /FCHARS/ 2
     1               , KCEQL , KCDOLR, KCPLUS, KCMIN , KCC   , KCE              /FCHARS/ 3
     2               , KCEOS , KCEOF , KCRPAR,         KLc   , KLe              /FCHARS/ 4
      COMMON  /FGNCHV/ JCH, JDIGCK, LTMP, ITMP(32)                              /FGNCHV/ 2
      COMMON  /FOPCD/  IOPT(4,45), LOPT, JOPT, JOPT1, IOP, IOP1                 /FOPCD/  2
     1               , KKPLUS, KKMIN,  KKDIV,  KKLPAR, KKRPAR, KKPWR            /FOPCD/  3
     2               , KKEQL,  KKOR,   KKAND,  KKNOT,  KKCALL, KKUMIN           /FOPCD/  4
     3               , KKNOOP, KKEOS,  KKLD,   KKRMIN, KKRDIV, KKRPWR           /FOPCD/  5
     4               , KKGOTO, KKEND,  KKIFGO, KKCOMA, KKRET,  KKSTOP           /FOPCD/  6
     5               , KKPRIN, KKERR,  KKDIM1, KKDIM2, KKDIM3, KKMARK           /FOPCD/  7
     6               , KKPEQL, KKEQS,  KKNEQS, KKRD  , KKWR  , KKEOF            /FOPCD/  8
     7               , KKREW , KKUNIT,  JFTNSG                                  /FOPCD/  9
C---                                                                            FIOPCK  12
      DIMENSION  I1TMP(4), ISOPTC(18), ISOPTN(18)                               FIOPCK  13
C---                                                                            FIOPCK  14
100   IF( JCH .NE. KCSP )  GOTO  200                                            FIOPCK  15
           CALL  FIGNCH                                                         FIOPCK  16
          GOTO  100                                                             FIOPCK  17
200   IF( (JCH .EQ. KCEOS) .OR. (JCH .EQ. KCEOF) )  GOTO  970                   FIOPCK  18
      IFLAG = JCH                                                               FIOPCK  19
      IF( JCH .NE. KCPERD )  GOTO  400                                          FIOPCK  20
C... CK OPS STARTING W '.'                                                      FIOPCK  21
      IF( JBUF .GT. NBUF-3 )  GOTO  980                                         FIOPCK  22
          I1TMP(1) = IBUF(JBUF+1)                                               FIOPCK  23
          I1TMP(2) = IBUF(JBUF+2)                                               FIOPCK  24
          I1TMP(3) = IBUF(JBUF+3)                                               FIOPCK  25
          if ( i1tmp(3) .eq. KCSP )    i1tmp(3) = KCDOLR                        FIOPCK  26
          I1TMP(4) = KCSP                                                       FIOPCK  27
          IF( (JBUF .LT. NBUF-3) .AND. (I1TMP(3).NE.KCPERD) )                   FIOPCK  28
     1                                    I1TMP(4) = IBUF(JBUF+4)               FIOPCK  29
                   call  A1A4( I1TMP, IFLAG, 1 )                                FIOPCK  30
                   call  UPPER4( IFLAG, IFLAG, 1 )                              FIOPCK  31
400       I1 = 1                                                                FIOPCK  32
          I2 = 18                                                               FIOPCK  33
C>>> CDC <<<                                                                    FIOPCK  34
410       II = ( I1 + I2 )  /  2                                                FIOPCK  35
          IF( IFLAG .GT. ISOPTC(II) )  GOTO  430                                FIOPCK  36
          IF( IFLAG .LT. ISOPTC(II) )  GOTO  440                                FIOPCK  37
              JOPT = ISOPTN(II)                                                 FIOPCK  38
              GOTO  600                                                         FIOPCK  39
430       IF( I1 .EQ. I2 )  GOTO  980                                           FIOPCK  40
              I1 = II + 1                                                       FIOPCK  41
              GOTO  410                                                         FIOPCK  42
440       IF( I1 .EQ. I2 )  GOTO  980                                           FIOPCK  43
              I2 = II                                                           FIOPCK  44
              GOTO  410                                                         FIOPCK  45
C                                                                               FIOPCK  46
600       IF( (JCH.NE.KCMUL) .OR. (JBUF.GT.NBUF-1) ) GOTO  700                  FIOPCK  47
          IF( IBUF(JBUF+1) .NE. KCMUL )  GOTO  700                              FIOPCK  48
               CALL  FIGNCH                                                     FIOPCK  49
              JOPT = KKPWR                                                      FIOPCK  50
              GOTO  900                                                         FIOPCK  51
700   IF( (JOPT.EQ.KKAND) .OR. (JOPT.EQ.KKNOT) )   CALL  FIGNCH                 FIOPCK  52
      IF( (JOPT.LT.9 ) .OR. (JOPT.GT.17) )  GOTO  900                           FIOPCK  53
           CALL  FIGNCH                                                         FIOPCK  54
           CALL  FIGNCH                                                         FIOPCK  55
           CALL  FIGNCH                                                         FIOPCK  56
900    CALL  FIGNCH                                                             FIOPCK  57
920   CONTINUE                                                                  FIOPCK  58
C$    WRITE( 66, 901 )  JOPT, JCH, (IOPT(JX,JOPT), JX=1,4)                      FIOPCK  59
C$901 FORMAT(' -- FIOPCK  --- JOPT='I2'  JCH='A4'  IOPT(1-4,.)=' A4,3I3)        FIOPCK  60
      RETURN                                                                    FIOPCK  61
970   JOPT = KKEOS                                                              FIOPCK  62
      GOTO  920                                                                 FIOPCK  63
980   JOPT = KKERR                                                              FIOPCK  64
      GOTO  920                                                                 FIOPCK  65
C---                                                                            FIOPCK  66
C--- INITIALIZE ISOPT BY MOVING SEARCHABLE OPERATORS IN SORTED ORDER            FIOPCK  67
C---                                                                            FIOPCK  68
      ENTRY  FIOPCI                                                             FIOPCK  69
C---                                                                            FIOPCK  70
          DO  20100  I = 1 , 18                                                 FIOPCK  71
C>>> CDC <<<                                                                    FIOPCK  72
          ISOPTC(I) =                                                           FIOPCK  73
     2                       IOPT(1,I)                                          FIOPCK  74
          ISOPTN(I) = IOPT(2,I)                                                 FIOPCK  75
20100     CONTINUE                                                              FIOPCK  76
20200 IFLAG = 0                                                                 FIOPCK  77
          DO  20300  I = 2 , 18                                                 FIOPCK  78
          IF( ISOPTC(I-1) .LE. ISOPTC(I) )  GOTO  20300                         FIOPCK  79
              I1 = ISOPTC(I-1)                                                  FIOPCK  80
              I2 = ISOPTN(I-1)                                                  FIOPCK  81
              ISOPTC(I-1) = ISOPTC(I)                                           FIOPCK  82
              ISOPTN(I-1) = ISOPTN(I)                                           FIOPCK  83
              ISOPTC(I)   = I1                                                  FIOPCK  84
              ISOPTN(I)   = I2                                                  FIOPCK  85
              IFLAG = 1                                                         FIOPCK  86
20300     CONTINUE                                                              FIOPCK  87
      IF( IFLAG .NE. 0 )  GOTO  20200                                           FIOPCK  88
      RETURN                                                                    FIOPCK  89
      END                                                                       FIOPCK  90
      SUBROUTINE  FLABSR ( LABEL )                                              FLABSR   2
C---                                                                            FLABSR   3
C--- SEARCH LABEL IN LABEL TABLE,   SET JLABT  TO FIND SUBSCRIPT                FLABSR   4
C---                                    IALABT TO FIND POINTER                  FLABSR   5
C---    IF NOT FOUND A NEW ENTRY IS CREATED                                     FLABSR   6
C---                                                                            FLABSR   7
      COMMON  /FBUF/   IBUF0(80), IBUF(1062), JBUF, NBUF, IEOF0                 /FBUF/   2
     1               , IBUFEF, LINENO                                           /FBUF/   3
      COMMON  /FPTRB/  NCODE, ICODE0, LCODE, NCONT, LCONT, ICONT0               /FPTRB/  2
     1               , NLITT, LLITT, ILITT0                                     /FPTRB/  3
     2               , NGLBT, IGLBT0, JGLBT, IAGLBT                             /FPTRB/  4
     3               , NLABT, LLABT, ILABT0, JLABT, IALABT                      /FPTRB/  5
     4               , LSYMT, NSYMT, ISYMT0, JSYMT, IASYMT, MSYMT0,MSYMT        /FPTRB/  6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
C---                                                                            FLABSR  11
      IALABT = ILABT0                                                           FLABSR  12
      IF( NLABT .LT. 1 )  GOTO  300                                             FLABSR  13
          DO  200  I = 1 , NLABT                                                FLABSR  14
          IF( LABEL .EQ. IA(IALABT+1) )  GOTO  400                              FLABSR  15
              IALABT = IALABT + 5                                               FLABSR  16
200       CONTINUE                                                              FLABSR  17
300   I = NLABT + 1                                                             FLABSR  18
C--- CREATE NEW ENTRY IN LABEL TABLE                                            FLABSR  19
      IF( NLABT .GE. LLABT )  GOTO  800                                         FLABSR  20
      NLABT = NLABT + 1                                                         FLABSR  21
      IA(IALABT+1) = LABEL                                                      FLABSR  22
      IA(IALABT+2) = 0                                                          FLABSR  23
      IA(IALABT+3) = 0                                                          FLABSR  24
C--- PUT REFERENCE FLAG                                                         FLABSR  25
400   IA(IALABT+4) = LINENO                                                     FLABSR  26
      JLABT = I                                                                 FLABSR  27
900   RETURN                                                                    FLABSR  28
C................................................ ERR-3  LABEL TABLE OVF        FLABSR  29
800    CALL  FERR( 3, IDUM, IDUM )                                              FLABSR  30
      GOTO  900                                                                 FLABSR  31
      END                                                                       FLABSR  32
      FUNCTION  FLITCO ( ILITNM, IVARTY )                                       FLITCO   2
C---                                                                            FLITCO   3
C--- COLLECT A LITERAL VALUE                                                    FLITCO   4
C---                                                                            FLITCO   5
C--- FLITCO=0,2 IF OK,  =1 IF ERR, =3 IF NULL                                   FLITCO   6
C---                                                                            FLITCO   7
      COMMON  /FGNCHV/ JCH, JDIGCK, LTMP, ITMP(32)                              /FGNCHV/ 2
      COMMON  /FCHARS/ KCSP  , KCMUL , KCLPAR, KCPERD, KCCOMA, KCQUOT           /FCHARS/ 2
     1               , KCEQL , KCDOLR, KCPLUS, KCMIN , KCC   , KCE              /FCHARS/ 3
     2               , KCEOS , KCEOF , KCRPAR,         KLc   , KLe              /FCHARS/ 4
C---                                                                            FLITCO  10
      DIMENSION  ILITNM(4)                                                      FLITCO  11
C---                                                                            FLITCO  12
      IVARTY = 3                                                                FLITCO  13
      FLITCO = 0                                                                FLITCO  14
      LTMP   = 0                                                                FLITCO  15
          DO  200  I = 1 , 16                                                   FLITCO  16
           CALL  FIGNCH                                                         FLITCO  17
          IF( (JCH .EQ. KCEOS) .OR. (JCH .EQ. KCEOF) )  GOTO  300               FLITCO  18
          IF( JCH .EQ. KCQUOT )  GOTO  400                                      FLITCO  19
          LTMP = I                                                              FLITCO  20
          ITMP(I) = JCH                                                         FLITCO  21
200       CONTINUE                                                              FLITCO  22
      FLITCO = 1                                                                FLITCO  23
      GOTO  400                                                                 FLITCO  24
300       FLITCO = 2                                                            FLITCO  25
400   IF( LTMP .EQ. 0 )  FLITCO = 3                                             FLITCO  26
       CALL  FILLN( KCSP, ITMP(LTMP+1), 16-LTMP )                               FLITCO  27
       call  A1A4( ITMP, ILITNM, 4 )                                            FLITCO  28
      IF( FLITCO .EQ. 2 )  RETURN                                               FLITCO  29
           CALL  FIGNCH                                                         FLITCO  30
           CALL  FIOPCK                                                         FLITCO  31
      RETURN                                                                    FLITCO  32
      END                                                                       FLITCO  33
      INTEGER  FUNCTION  FNUMC0 ( X, DPFLG )                                    FNUMC0   2
C---                                                                            FNUMC0   3
C--- PROCEDURE FOR FNUMCO                                                       FNUMC0   4
C---                                                                            FNUMC0   5
C---                                                                            FNUMC0   6
C--- FNUMC0 = 1 IF EOS, ELSE = 0                                                FNUMC0   7
C---                                                                            FNUMC0   8
      COMMON  /FCHARS/ KCSP  , KCMUL , KCLPAR, KCPERD, KCCOMA, KCQUOT           /FCHARS/ 2
     1               , KCEQL , KCDOLR, KCPLUS, KCMIN , KCC   , KCE              /FCHARS/ 3
     2               , KCEOS , KCEOF , KCRPAR,         KLc   , KLe              /FCHARS/ 4
      COMMON  /FGNCHV/ JCH, JDIGCK, LTMP, ITMP(32)                              /FGNCHV/ 2
      COMMON  /FMODFT/ MODFTN                                                   /FMODFT/ 2
C---                                                                            FNUMC0  12
      INTEGER  FIDIGC                                                           FNUMC0  13
C---                                                                            FNUMC0  14
C$    WRITE( 66, 901 )  X, DPFLG, JCH                                           FNUMC0  15
C$901 FORMAT( ' >>>> FNUMC0 ---   X='G16.8,'  DPFLG='G16.8,'  JCH='A4 )         FNUMC0  16
      FNUMC0 = 1                                                                FNUMC0  17
      IF( JCH .EQ. KCPERD )  GOTO  300                                          FNUMC0  18
200       IF( DPFLG .NE. 0. )  GOTO  250                                        FNUMC0  19
              X = X * 10. + FLOAT( JDIGCK )                                     FNUMC0  20
              GOTO  300                                                         FNUMC0  21
250       DPFLG = DPFLG / 10.                                                   FNUMC0  22
          X = X + DPFLG * FLOAT( JDIGCK )                                       FNUMC0  23
300    CALL  FIGNCH                                                             FNUMC0  24
      IF( (JCH .EQ. KCEOS) .OR. (JCH .EQ. KCEOF) )  GOTO  900                   FNUMC0  25
          IF( JCH .EQ. KCSP )  GOTO  400                                        FNUMC0  26
          IF( FIDIGC( JCH ) .GE. 0 )  GOTO  200                                 FNUMC0  27
              FNUMC0 = 0                                                        FNUMC0  28
              GOTO  900                                                         FNUMC0  29
400       IF( MODFTN .NE. 0 )  GOTO  300                                        FNUMC0  30
900   CONTINUE                                                                  FNUMC0  31
C$    WRITE( 66, 902 )  FNUMC0, X, DPFLG, JCH                                   FNUMC0  32
C$902 FORMAT( ' <<<< FNUMC0 --- ='I3,'  X='G16.8,'  DPFLG='G16.8,               FNUMC0  33
C$   .                               '  JCH='A4 )                               FNUMC0  34
      RETURN                                                                    FNUMC0  35
      END                                                                       FNUMC0  36
      INTEGER  FUNCTION  FNUMCO ( X, DPFLG, IVARTY )                            FNUMCO   2
C---                                                                            FNUMCO   3
C--- COLLECT A NUMBER                                                           FNUMCO   4
C---                                                                            FNUMCO   5
C---                                                                            FNUMCO   6
C--- FNUMCO=0, IF OK,  =1 IF ERR                                                FNUMCO   7
C---                                                                            FNUMCO   8
C--- FIRST DIGIT OR . MUST BE THE CURRENT JCH                                   FNUMCO   9
C---                                                                            FNUMCO  10
      COMMON  /FCHARS/ KCSP  , KCMUL , KCLPAR, KCPERD, KCCOMA, KCQUOT           /FCHARS/ 2
     1               , KCEQL , KCDOLR, KCPLUS, KCMIN , KCC   , KCE              /FCHARS/ 3
     2               , KCEOS , KCEOF , KCRPAR,         KLc   , KLe              /FCHARS/ 4
      COMMON  /FGNCHV/ JCH, JDIGCK, LTMP, ITMP(32)                              /FGNCHV/ 2
      COMMON  /FMODFT/ MODFTN                                                   /FMODFT/ 2
      COMMON  /FOPCD/  IOPT(4,45), LOPT, JOPT, JOPT1, IOP, IOP1                 /FOPCD/  2
     1               , KKPLUS, KKMIN,  KKDIV,  KKLPAR, KKRPAR, KKPWR            /FOPCD/  3
     2               , KKEQL,  KKOR,   KKAND,  KKNOT,  KKCALL, KKUMIN           /FOPCD/  4
     3               , KKNOOP, KKEOS,  KKLD,   KKRMIN, KKRDIV, KKRPWR           /FOPCD/  5
     4               , KKGOTO, KKEND,  KKIFGO, KKCOMA, KKRET,  KKSTOP           /FOPCD/  6
     5               , KKPRIN, KKERR,  KKDIM1, KKDIM2, KKDIM3, KKMARK           /FOPCD/  7
     6               , KKPEQL, KKEQS,  KKNEQS, KKRD  , KKWR  , KKEOF            /FOPCD/  8
     7               , KKREW , KKUNIT,  JFTNSG                                  /FOPCD/  9
C---                                                                            FNUMCO  15
      INTEGER  FIDIGC, FNUMC0                                                   FNUMCO  16
C---                                                                            FNUMCO  17
C$    WRITE( 66, 901 )  X, DPFLG, JCH                                           FNUMCO  18
C$901 FORMAT( ' >>> FNUMCO --- X=',G16.8, '  DPFLG=',G16.8,'  JCH=',A4)         FNUMCO  19
      FNUMCO = 0                                                                FNUMCO  20
      IVARTY = 1                                                                FNUMCO  21
      XX     = 0.                                                               FNUMCO  22
      E      = 0.                                                               FNUMCO  23
      IESIGN = 0                                                                FNUMCO  24
      MANSGN = 0                                                                FNUMCO  25
C---                                                                            FNUMCO  26
      IF( JCH .NE. KCMIN )  GOTO  130                                           FNUMCO  27
          MANSGN = -1                                                           FNUMCO  28
           CALL  FIGNCH                                                         FNUMCO  29
          IF( ( FIDIGC( JCH ) .LT. 0 ) .AND. ( JCH .NE. KCPERD ) )              FNUMCO  30
     1        GOTO  800                                                         FNUMCO  31
130   IF( JCH .EQ. KCPERD )  GOTO  160                                          FNUMCO  32
150   IF( FNUMC0( XX, DPFLG ) .EQ. 1 )  GOTO  500                               FNUMCO  33
          IF( JCH .NE. KCPERD )  GOTO  200                                      FNUMCO  34
160           CONTINUE                                                          FNUMCO  35
               CALL  FIOPCK                                                     FNUMCO  36
              IF( JOPT .NE. KKERR )  GOTO  900                                  FNUMCO  37
              IF( DPFLG .NE. 0 )  GOTO  800                                     FNUMCO  38
                  DPFLG = 1.                                                    FNUMCO  39
                  IF( FNUMC0( XX, DPFLG ) .EQ. 1 )  GOTO  500                   FNUMCO  40
200               if ( (JCH .ne. KCE) .and. (JCH .ne. KLe) )   goto  500        FNUMCO  41
               CALL  FIGNCH                                                     FNUMCO  42
              IF( (JCH .EQ. KCEOS) .OR. (JCH .EQ. KCEOF) )  GOTO  800           FNUMCO  43
              IF( JCH .EQ. KCPLUS )  GOTO  300                                  FNUMCO  44
                  IF( JCH .NE. KCMIN )  GOTO  400                               FNUMCO  45
                      IESIGN = -1                                               FNUMCO  46
300            CALL  FIGNCH                                                     FNUMCO  47
              IF( (JCH .EQ. KCEOS) .OR. (JCH .EQ. KCEOF) )  GOTO  800           FNUMCO  48
400               IF( FIDIGC( JCH ) .LT. 0 )  GOTO  800                         FNUMCO  49
                      DUM = 0                                                   FNUMCO  50
                      IDUM = FNUMC0( E, DUM )                                   FNUMCO  51
500       IF( (MODFTN .EQ. 0) .AND. (JCH .EQ. KCSP) )  GOTO  600                FNUMCO  52
               CALL  FIOPCK                                                     FNUMCO  53
              IF( JOPT .EQ. KKERR )  GOTO  800                                  FNUMCO  54
                  GOTO  900                                                     FNUMCO  55
600        CALL  FIOPCK                                                         FNUMCO  56
          GOTO  900                                                             FNUMCO  57
800           FNUMCO = 1                                                        FNUMCO  58
900       IE = INT( E + 0.001 )                                                 FNUMCO  59
          IF( IESIGN .LT. 0 )  IE = -IE                                         FNUMCO  60
          XX = XX * ( 10. ** IE )                                               FNUMCO  61
      IF( MANSGN .LT. 0 )  XX = - XX                                            FNUMCO  62
      X = XX                                                                    FNUMCO  63
C$    WRITE( 66, 902 )  FNUMCO, XX, DPFLG, JCH                                  FNUMCO  64
C$902 FORMAT( ' <<< FNUMCO --- =',I3,'  X=',G16.8,'  DPFLG='G16.8,              FNUMCO  65
C$   .                      '  JCH=',A4 )                                       FNUMCO  66
      RETURN                                                                    FNUMCO  67
      END                                                                       FNUMCO  68
      SUBROUTINE  FOPGEN ( IFOPGE )                                             FOPGEN   2
C---                                                                            FOPGEN   3
C--- PRODUCE ARITHMETIC CODE                                                    FOPGEN   4
C---                                                                            FOPGEN   5
      COMMON  /FOPCD/  IOPT(4,45), LOPT, JOPT, JOPT1, IOP, IOP1                 /FOPCD/  2
     1               , KKPLUS, KKMIN,  KKDIV,  KKLPAR, KKRPAR, KKPWR            /FOPCD/  3
     2               , KKEQL,  KKOR,   KKAND,  KKNOT,  KKCALL, KKUMIN           /FOPCD/  4
     3               , KKNOOP, KKEOS,  KKLD,   KKRMIN, KKRDIV, KKRPWR           /FOPCD/  5
     4               , KKGOTO, KKEND,  KKIFGO, KKCOMA, KKRET,  KKSTOP           /FOPCD/  6
     5               , KKPRIN, KKERR,  KKDIM1, KKDIM2, KKDIM3, KKMARK           /FOPCD/  7
     6               , KKPEQL, KKEQS,  KKNEQS, KKRD  , KKWR  , KKEOF            /FOPCD/  8
     7               , KKREW , KKUNIT,  JFTNSG                                  /FOPCD/  9
      COMMON  /FOPRNV/ ITOKTY, ANUMBR, ISYMBL(8), IOPRER                        PARAM   21
     1               , IOPRID, IOPRMO, IOPRTY, IOPRVA                           /FOPRNV/ 3
          DIMENSION         IOPR(4)                                             /FOPRNV/ 4
              EQUIVALENCE  (IOPR(1), IOPRID)                                    /FOPRNV/ 5
      COMMON  /FPQRT/  IPID, IPMO, IPTY, IPVA, IQID, IQMO, IQTY, IQVA           /FPQRT/  2
     1               , IRID, IRMO, IRTY, IRVA, ITID, ITMO, ITTY, ITVA           /FPQRT/  3
          DIMENSION  IP(4), IQ(4), IR(4), IT(4)                                 /FPQRT/  4
              EQUIVALENCE  (IP(1),IPID), (IQ(1),IQID), (IR(1),IRID)             /FPQRT/  5
     1                   , (IT(1),ITID)                                         /FPQRT/  6
      COMMON  /FSTACK/ NOPCST, LOPCST, IOPCST(100),   ISTERR                    /FSTACK/ 2
     1               , NOPRST, LOPRST, IOPRST(4,100)                            /FSTACK/ 3
     2               , NACCUM, MACCUM, LACCUM                                   /FSTACK/ 4
C---                                                                            FOPGEN  10
      DIMENSION  IQZERO(4)                                                      FOPGEN  11
          DATA   IQZERO/ 4*0 /                                                  FOPGEN  12
C---                                                                            FOPGEN  13
C$    WRITE( 66, 901 )  IOPT(1,IOP), NACCUM                                     FOPGEN  14
C$901 FORMAT( ' >> FOPGEN   ---  IOPT(1,IOP)='A4, '   NACCUM=', I3 )            FOPGEN  15
C$    WRITE( 66, 903 )  (I, IOPCST(I), I=1,NOPCST)                              FOPGEN  16
C$903 FORMAT( '                IOPCST() =' 10(I3 '-'I2',') )                    FOPGEN  17
C$    WRITE( 66, 904 )  (I, (IOPRST(J,I), J=1,4), I=1,NOPRST)                   FOPGEN  18
C$904 FORMAT( '                IOPRST(,)=' 5(I3 '-'4I3',') )                    FOPGEN  19
C............................................................ 3 = LEV(=)        FOPGEN  20
      IF( IOPT(3,IOP) .LT. 3 )  GOTO  80000                                     FOPGEN  21
      IF( FPOP1( IQ ) .EQ. 0 )  GOTO  90000                                     FOPGEN  22
      IF( IOP .EQ. KKNOOP )  GOTO  90000                                        FOPGEN  23
      IF( IOP .NE. KKCOMA )  GOTO  20300                                        FOPGEN  24
          GOTO  56000                                                           FOPGEN  25
20300 IF(  (IOP .NE. KKUMIN) .AND. (IOP .NE. KKNOT)  )  GOTO  20400             FOPGEN  26
           CALL  MOVEN( IQ, IP, 4 )                                             FOPGEN  27
          GOTO  20600                                                           FOPGEN  28
20400 IF( FPOP1( IP ) .EQ. 0 )  GOTO  90000                                     FOPGEN  29
20600 IF( (IOP .EQ. KKNOT) .OR. (IOP .EQ. KKAND) .OR.                           FOPGEN  30
     1    (IOP .EQ. KKOR) )  GOTO  20700                                        FOPGEN  31
C........................................................... 2 = LOGICAL        FOPGEN  32
          IF( (IPMO .NE. 2) .AND. (IQMO .NE. 2) )  GOTO  20620                  FOPGEN  33
C.......................... ERR-62  LOGICAL OPERAND IN NUMERIC OPERATION        FOPGEN  34
               CALL  FERR( 62, IDUM, IDUM )                                     FOPGEN  35
              IPMO = 0                                                          FOPGEN  36
              IQMO = 0                                                          FOPGEN  37
              GOTO  20900                                                       FOPGEN  38
20620     IF( IPMO .EQ. IQMO )  GOTO  20900                                     FOPGEN  39
C.................................................... ERR-21  MIXED MODE        FOPGEN  40
               CALL  FERR( 21, IDUM, IDUM )                                     FOPGEN  41
              IQMO = IPMO                                                       FOPGEN  42
              GOTO  20900                                                       FOPGEN  43
20700     IF( (IPMO .EQ. 2) .AND. (IQMO .EQ. 2) )  GOTO  20900                  FOPGEN  44
C.......................... ERR-22  NUMERIC OPERAND IN LOGICAL OPERATION        FOPGEN  45
               CALL  FERR( 22, IDUM, IDUM )                                     FOPGEN  46
              IPMO = 2                                                          FOPGEN  47
              IQMO = 2                                                          FOPGEN  48
20900 CONTINUE                                                                  FOPGEN  49
C--------- EQUAL SIGN                                                           FOPGEN  50
      IF( IOP .NE. KKEQL )  GOTO  30400                                         FOPGEN  51
          IF( IPID .EQ. 2 )  GOTO  30200                                        FOPGEN  52
C......................................... ERR-23  BAD EXPR TO LEFT OF =        FOPGEN  53
               CALL  FERR( 23, IDUM, IDUM )                                     FOPGEN  54
30200      CALL  MOVEN( IP, IT, 4 )                                             FOPGEN  55
           CALL  MOVEN( IQ, IP, 4 )                                             FOPGEN  56
           CALL  MOVEN( IT, IQ, 4 )                                             FOPGEN  57
C                                                                               FOPGEN  58
30400  CALL  MOVEN( IP, IR, 4 )                                                 FOPGEN  59
C--------- UNARY OPERATIONS                                                     FOPGEN  60
      IF( .NOT. ( (IOP.EQ.KKUMIN) .OR. (IOP.EQ.KKNOT) )  )  GOTO  50000         FOPGEN  61
          NACCUM = NACCUM + 1                                                   FOPGEN  62
          GOTO  57000                                                           FOPGEN  63
C                                                                               FOPGEN  64
C---------- PRODUCE  LD ( P )  CODE                                             FOPGEN  65
50000 IF( .NOT. ( (IPID.NE.4) .AND. (IQID.NE.4) )  )  GOTO  54000               FOPGEN  66
          NACCUM = NACCUM + 1                                                   FOPGEN  67
          IF( NACCUM .GT. MACCUM )  MACCUM = NACCUM                             FOPGEN  68
           CALL  FPUTOP( KKLD, IP )                                             FOPGEN  69
C..................................................... 4 = TEMP                 FOPGEN  70
          IPID = 4                                                              FOPGEN  71
          IPVA = NACCUM                                                         FOPGEN  72
          GOTO  57000                                                           FOPGEN  73
C                                                                               FOPGEN  74
C---------- SWAP P , Q FIELDS AND CHANGE OPCODE TO REVERSE OPCODE               FOPGEN  75
54000 IF( .NOT.(                                                                FOPGEN  76
     1         ( (IPID.NE.4) .AND. (IQID.EQ.4) ) .OR.                           FOPGEN  77
     2         ( (IPID.EQ.4) .AND. (IQID.EQ.4) .AND. (IPVA.GT.IQVA) )           FOPGEN  78
     3         ) )  GOTO  56000                                                 FOPGEN  79
C......................................................... 9 = LEV(.GT.)        FOPGEN  80
      IF( IOPT(3,IOP) .EQ. 9 )  GOTO  56000                                     FOPGEN  81
          IF( IOP .EQ. KKMIN )  IOP = KKRMIN                                    FOPGEN  82
          IF( IOP .EQ. KKDIV )  IOP = KKRDIV                                    FOPGEN  83
          IF( IOP .EQ. KKPWR )  IOP = KKRPWR                                    FOPGEN  84
           CALL  MOVEN( IP, IT, 4 )                                             FOPGEN  85
           CALL  MOVEN( IQ, IP, 4 )                                             FOPGEN  86
           CALL  MOVEN( IT, IQ, 4 )                                             FOPGEN  87
C                                                                               FOPGEN  88
C---------- IF Q = TEMP PRODUCE THE ( OP 0 ) CODE                               FOPGEN  89
56000 IF( IQID .NE. 4 )  GOTO  57000                                            FOPGEN  90
           CALL  FPUTOP( IOP, IQZERO )                                          FOPGEN  91
          GOTO  58000                                                           FOPGEN  92
C                                                                               FOPGEN  93
C---------- PRODUCE ( OP Q ) CODE                                               FOPGEN  94
57000  CALL  FPUTOP( IOP, IQ )                                                  FOPGEN  95
58000 IF( IQID .EQ. 4 )  NACCUM = NACCUM - 1                                    FOPGEN  96
      IF( NACCUM .GE. 0 )  GOTO  58200                                          FOPGEN  97
C................................................. ERR-37  BAD ARITH EXP        FOPGEN  98
           CALL  FERR( 37, IDUM, IDUM )                                         FOPGEN  99
          ISTERR = 1                                                            FOPGEN 100
          GOTO  80000                                                           FOPGEN 101
C.......................................... RESULT MODE=LOGICAL FOR .GT.        FOPGEN 102
58200 IF( IOPT(3,IOP) .EQ. 9 )  IRMO = 2                                        FOPGEN 103
C                                                                               FOPGEN 104
      IF( IOP .EQ. KKCOMA )  GOTO  90000                                        FOPGEN 105
C---------- UPDATE OPERAND STACK                                                FOPGEN 106
      IRID = 4                                                                  FOPGEN 107
      IRTY = 0                                                                  FOPGEN 108
      IRVA = NACCUM                                                             FOPGEN 109
       CALL  FPUSH1( IR )                                                       FOPGEN 110
      GOTO  90000                                                               FOPGEN 111
C                                                                               FOPGEN 112
80000 IFOPGE = 0                                                                FOPGEN 113
      GOTO  99000                                                               FOPGEN 114
90000 IFOPGE = 1                                                                FOPGEN 115
99000 CONTINUE                                                                  FOPGEN 116
C$    WRITE( 66, 902 )  IFOPGE, NACCUM                                          FOPGEN 117
C$902 FORMAT( ' << FOPGEN   ---  IFOPGE=' I2, '   NACCUM=', I3 )                FOPGEN 118
C$    WRITE( 66, 903 )  (I, IOPCST(I), I=1,NOPCST)                              FOPGEN 119
C$    WRITE( 66, 904 )  (I, (IOPRST(J,I), J=1,4), I=1,NOPRST)                   FOPGEN 120
      RETURN                                                                    FOPGEN 121
      END                                                                       FOPGEN 122
      SUBROUTINE  FOPRND ( ITOKT, IOPRE )                                       FOPRND   2
C---                                                                            FOPRND   3
C--- GET NEXT OPERAND AND OPERATOR                                              FOPRND   4
C---                                                                            FOPRND   5
C---                                                                            FOPRND   6
      COMMON  /FCHARS/ KCSP  , KCMUL , KCLPAR, KCPERD, KCCOMA, KCQUOT           /FCHARS/ 2
     1               , KCEQL , KCDOLR, KCPLUS, KCMIN , KCC   , KCE              /FCHARS/ 3
     2               , KCEOS , KCEOF , KCRPAR,         KLc   , KLe              /FCHARS/ 4
      COMMON  /FGNCHV/ JCH, JDIGCK, LTMP, ITMP(32)                              /FGNCHV/ 2
      COMMON  /FOPCD/  IOPT(4,45), LOPT, JOPT, JOPT1, IOP, IOP1                 /FOPCD/  2
     1               , KKPLUS, KKMIN,  KKDIV,  KKLPAR, KKRPAR, KKPWR            /FOPCD/  3
     2               , KKEQL,  KKOR,   KKAND,  KKNOT,  KKCALL, KKUMIN           /FOPCD/  4
     3               , KKNOOP, KKEOS,  KKLD,   KKRMIN, KKRDIV, KKRPWR           /FOPCD/  5
     4               , KKGOTO, KKEND,  KKIFGO, KKCOMA, KKRET,  KKSTOP           /FOPCD/  6
     5               , KKPRIN, KKERR,  KKDIM1, KKDIM2, KKDIM3, KKMARK           /FOPCD/  7
     6               , KKPEQL, KKEQS,  KKNEQS, KKRD  , KKWR  , KKEOF            /FOPCD/  8
     7               , KKREW , KKUNIT,  JFTNSG                                  /FOPCD/  9
      COMMON  /FOPRNV/ ITOKTY, ANUMBR, ISYMBL(8), IOPRER                        PARAM   21
     1               , IOPRID, IOPRMO, IOPRTY, IOPRVA                           /FOPRNV/ 3
          DIMENSION         IOPR(4)                                             /FOPRNV/ 4
              EQUIVALENCE  (IOPR(1), IOPRID)                                    /FOPRNV/ 5
C---                                                                            FOPRND  11
      INTEGER  FIDIGC, FNUMCO                                                   FOPRND  12
C---                                                                            FOPRND  13
C$    WRITE( 66, 901 )  JCH                                                     FOPRND  14
C$901 FORMAT( ' >> FOPRND --  JCH=' A1 )                                        FOPRND  15
      ITOKTY = -1                                                               FOPRND  16
      IOPRER = 0                                                                FOPRND  17
      ANUMBR = 0.                                                               FOPRND  18
      DPFLG  = 0.                                                               FOPRND  19
       CALL  FIOPCK                                                             FOPRND  20
      IF( JOPT .NE. KKERR )  GOTO 990                                           FOPRND  21
C---                                                                            FOPRND  22
      IF( ( JCH .EQ. KCPERD )  .OR.                                             FOPRND  23
     1    ( FIDIGC( JCH ) .GE. 0 ) )  GOTO  350                                 FOPRND  24
              GOTO  400                                                         FOPRND  25
350       IF( FNUMCO( ANUMBR, DPFLG, ITOKTY ) .EQ. 0 )  GOTO  900               FOPRND  26
              IOPRER = 1                                                        FOPRND  27
              GOTO  900                                                         FOPRND  28
400   IF( JCH .NE. KCQUOT )  GOTO  500                                          FOPRND  29
          IF( FLITCO( ISYMBL, ITOKTY ) .EQ. 0 )  GOTO  900                      FOPRND  30
              IOPRER = 2                                                        FOPRND  31
              GOTO  900                                                         FOPRND  32
500       IF( FVARCO( ISYMBL, ITOKTY ) .EQ. 0 )  GOTO  900                      FOPRND  33
              IOPRER = 3                                                        FOPRND  34
900   IF( IOPRER .EQ. 0 )  GOTO 990                                             FOPRND  35
          IF( JOPT .EQ. KKEOS )  GOTO 990                                       FOPRND  36
950            CALL  FIGNCH                                                     FOPRND  37
               CALL  FIOPCK                                                     FOPRND  38
              IF( JOPT .EQ. KKERR )  GOTO  950                                  FOPRND  39
990   ITOKT = ITOKTY                                                            FOPRND  40
      IOPRE = IOPRER                                                            FOPRND  41
C$    WRITE( 66, 903 )  ITOKTY, IOPRER, ANUMBR, ISYMBL                          FOPRND  42
C$903 FORMAT( ' << FOPRND --- ITOKTY=' I3 '  IOPRER=' I3,                       FOPRND  43
C$   1                     '  ANUMBR='F18.3, '  ISYMBL='4A4 )                   FOPRND  44
      RETURN                                                                    FOPRND  45
      END                                                                       FOPRND  46
      SUBROUTINE  FOPRP                                                         FOPRP    2
C---                                                                            FOPRP    3
C--- PROCESS THE OPERAND FIELD AND PUSH IT INTO OPERAND STACK                   FOPRP    4
C---                                                                            FOPRP    5
      COMMON  /FOPCD/  IOPT(4,45), LOPT, JOPT, JOPT1, IOP, IOP1                 /FOPCD/  2
     1               , KKPLUS, KKMIN,  KKDIV,  KKLPAR, KKRPAR, KKPWR            /FOPCD/  3
     2               , KKEQL,  KKOR,   KKAND,  KKNOT,  KKCALL, KKUMIN           /FOPCD/  4
     3               , KKNOOP, KKEOS,  KKLD,   KKRMIN, KKRDIV, KKRPWR           /FOPCD/  5
     4               , KKGOTO, KKEND,  KKIFGO, KKCOMA, KKRET,  KKSTOP           /FOPCD/  6
     5               , KKPRIN, KKERR,  KKDIM1, KKDIM2, KKDIM3, KKMARK           /FOPCD/  7
     6               , KKPEQL, KKEQS,  KKNEQS, KKRD  , KKWR  , KKEOF            /FOPCD/  8
     7               , KKREW , KKUNIT,  JFTNSG                                  /FOPCD/  9
      COMMON  /FOPRNV/ ITOKTY, ANUMBR, ISYMBL(8), IOPRER                        PARAM   21
     1               , IOPRID, IOPRMO, IOPRTY, IOPRVA                           /FOPRNV/ 3
          DIMENSION         IOPR(4)                                             /FOPRNV/ 4
              EQUIVALENCE  (IOPR(1), IOPRID)                                    /FOPRNV/ 5
      COMMON  /FPTRB/  NCODE, ICODE0, LCODE, NCONT, LCONT, ICONT0               /FPTRB/  2
     1               , NLITT, LLITT, ILITT0                                     /FPTRB/  3
     2               , NGLBT, IGLBT0, JGLBT, IAGLBT                             /FPTRB/  4
     3               , NLABT, LLABT, ILABT0, JLABT, IALABT                      /FPTRB/  5
     4               , LSYMT, NSYMT, ISYMT0, JSYMT, IASYMT, MSYMT0,MSYMT        /FPTRB/  6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
C---                                                                            FOPRP   10
      equivalence ( ANUMBR, INUMBR )                                            FOPRP   11
C$    WRITE( 66, 901 )                                                          FOPRP   12
C$901 FORMAT( ' >> FOPRP  ---' )                                                FOPRP   13
      IF( ITOKTY .EQ. 2 )  GOTO  10000                                          FOPRP   14
c--- convert literal to constant                                                FOPRP   15
      if ( ITOKTY .eq. 3 )    then                                              FOPRP   16
          ITOKTY = 1                                                            FOPRP   17
          INUMBR = ISYMBL(1)                                                    FOPRP   18
      endif                                                                     FOPRP   19
C-------                                                                        FOPRP   20
C------- ENTER CONSTANT INTO CONSTANTS TABLE                                    FOPRP   21
C-------                                                                        FOPRP   22
      IF( NCONT .EQ. 0 )  GOTO  300                                             FOPRP   23
              DO  200  I = 1 , NCONT                                            FOPRP   24
              if( INUMBR .eq. IA(ICONT0+I) )    goto  500                       FOPRP   25
200           CONTINUE                                                          FOPRP   26
          IF( NCONT .GE. LCONT )  GOTO  800                                     FOPRP   27
300   NCONT = NCONT + 1                                                         FOPRP   28
          IA(ICONT0+NCONT) = INUMBR                                             FOPRP   29
      I = NCONT                                                                 FOPRP   30
500   IOPRID = 1                                                                FOPRP   31
      IOPRMO = 0                                                                FOPRP   32
      IOPRTY = 0                                                                FOPRP   33
      IOPRVA = I                                                                FOPRP   34
      GOTO  50000                                                               FOPRP   35
C............................................ ERR-31  CONSTANT TABLE OVF        FOPRP   36
800    CALL  FERR( 31, IDUM, IDUM )                                             FOPRP   37
      GOTO  50000                                                               FOPRP   38
C---                                                                            FOPRP   39
C--- PROCESS SYMBOLIC OPERAND                                                   FOPRP   40
C---                                                                            FOPRP   41
10000  CALL  FSYMS                                                              FOPRP   42
      IF( JSYMT .GT. 0 )  GOTO  10200                                           FOPRP   43
           CALL  FSYMSE                                                         FOPRP   44
          IA(IASYMT+4) = 7                                                      FOPRP   45
C............................ INITIALIZE LOCAL VARIABLE TO ZERO                 FOPRP   46
          IA(IASYMT+5) = 0                                                      FOPRP   47
10200 IOPRID = 2                                                                FOPRP   48
      IOPRTY = IA(IASYMT+6)                                                     FOPRP   49
      IOPRMO = IA(IASYMT+7)                                                     FOPRP   50
      IOPRVA = JSYMT                                                            FOPRP   51
C------- CK LEFT PAREN RELATED CONDITIONS                                       FOPRP   52
      IF( JOPT .NE. KKLPAR )  GOTO  10400                                       FOPRP   53
          IF( IOPRTY .NE. 0 )  GOTO  10500                                      FOPRP   54
C......................................... ERR-10  VAR NAME USED AS FUNC        FOPRP   55
               CALL  FERR( 10, ISYMBL, IDUM )                                   FOPRP   56
              IOPRTY = 4                                                        FOPRP   57
              GOTO  10500                                                       FOPRP   58
10400     IF( IOPRTY .EQ. 0 )  GOTO  10500                                      FOPRP   59
C........................................... ERR-11  FN NAME USED AS VAR        FOPRP   60
               CALL  FERR( 11, ISYMBL, IDUM )                                   FOPRP   61
              IOPRTY = 0                                                        FOPRP   62
10500 CONTINUE                                                                  FOPRP   63
C--- ENTER OPERAND IN OPERAND STACK                                             FOPRP   64
50000  CALL  FPUSH1( IOPR )                                                     FOPRP   65
C$    WRITE( 66, 902 )                                                          FOPRP   66
C$902 FORMAT( ' << FOPRP  ---' )                                                FOPRP   67
      RETURN                                                                    FOPRP   68
      END                                                                       FOPRP   69
      SUBROUTINE  FPARAM                                                        FPARAM   2
C---                                                                            FPARAM   3
C--- SEARCH PARAMETER TABLE AND SUBSTITUTE ISYMBL                               FPARAM   4
C--- IF NUMERIC SUBSTITUTION CHANGE ITOKTY                                      FPARAM   5
C---                                                                            FPARAM   6
      COMMON  /FOPRNV/ ITOKTY, ANUMBR, ISYMBL(8), IOPRER                        PARAM   21
     1               , IOPRID, IOPRMO, IOPRTY, IOPRVA                           /FOPRNV/ 3
          DIMENSION         IOPR(4)                                             /FOPRNV/ 4
              EQUIVALENCE  (IOPR(1), IOPRID)                                    /FOPRNV/ 5
      COMMON /IPARAM/ NPARAM, MPARAM, IPARAM(17,6000)                           -048t    1
C---                                                                            FPARAM   9
      IF( NPARAM .LT. 1 )  GOTO  900                                            FPARAM  10
          DO  200  I = 1 , NPARAM                                               FPARAM  11
          IF( KOMPAR( ISYMBL, IPARAM(1,I), 8 ) .NE. 0 )  GOTO  300              PARAM   28
200       CONTINUE                                                              FPARAM  13
      GOTO  900                                                                 FPARAM  14
300   IF( IPARAM(9,I) .EQ. 0 )  GOTO  400                                       PARAM   29
          ITOKTY = 1                                                            FPARAM  16
          ANUMBR = TYPLS( IPARAM(10,I) )                                        PARAM   30
C$    WRITE( 66, 901 ) ISYMBL, ANUMBR                                           FPARAM  18
C$901 FORMAT( ' --- FPARAM ---  ISYMBL=' 4A4, '  ANUMBR=' G20.8 )               FPARAM  19
          GOTO  900                                                             FPARAM  20
400    CALL  MOVEN( IPARAM(10,I), ISYMBL, 8 )                                   PARAM   31
C$    WRITE( 66, 902 ) (IPARAM(J,I), J=1,4), ISYMBL                             FPARAM  22
C$902 FORMAT( ' --- FPARAM ---  ISYMBL=' 4A4, '  REPLACEMENT=' 4A4 )            FPARAM  23
900   RETURN                                                                    FPARAM  24
      END                                                                       FPARAM  25
      SUBROUTINE  FPASS2 ( ISYMT )                                              FPASS2   2
C---                                                                            FPASS2   3
C--- PROCESS SECOND PASS OF CODE                                                FPASS2   4
C---                                                                            FPASS2   5
      COMMON  /FFLAGS/ IFFLAG, IFLABL(4), IFLEVL, NUMOVL, NFERR                 /FFLAGS/ 2
      COMMON  /FCHARS/ KCSP  , KCMUL , KCLPAR, KCPERD, KCCOMA, KCQUOT           /FCHARS/ 2
     1               , KCEQL , KCDOLR, KCPLUS, KCMIN , KCC   , KCE              /FCHARS/ 3
     2               , KCEOS , KCEOF , KCRPAR,         KLc   , KLe              /FCHARS/ 4
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      COMMON  /FOPCD/  IOPT(4,45), LOPT, JOPT, JOPT1, IOP, IOP1                 /FOPCD/  2
     1               , KKPLUS, KKMIN,  KKDIV,  KKLPAR, KKRPAR, KKPWR            /FOPCD/  3
     2               , KKEQL,  KKOR,   KKAND,  KKNOT,  KKCALL, KKUMIN           /FOPCD/  4
     3               , KKNOOP, KKEOS,  KKLD,   KKRMIN, KKRDIV, KKRPWR           /FOPCD/  5
     4               , KKGOTO, KKEND,  KKIFGO, KKCOMA, KKRET,  KKSTOP           /FOPCD/  6
     5               , KKPRIN, KKERR,  KKDIM1, KKDIM2, KKDIM3, KKMARK           /FOPCD/  7
     6               , KKPEQL, KKEQS,  KKNEQS, KKRD  , KKWR  , KKEOF            /FOPCD/  8
     7               , KKREW , KKUNIT,  JFTNSG                                  /FOPCD/  9
      COMMON  /FPTRB/  NCODE, ICODE0, LCODE, NCONT, LCONT, ICONT0               /FPTRB/  2
     1               , NLITT, LLITT, ILITT0                                     /FPTRB/  3
     2               , NGLBT, IGLBT0, JGLBT, IAGLBT                             /FPTRB/  4
     3               , NLABT, LLABT, ILABT0, JLABT, IALABT                      /FPTRB/  5
     4               , LSYMT, NSYMT, ISYMT0, JSYMT, IASYMT, MSYMT0,MSYMT        /FPTRB/  6
      COMMON  /NSTDR1/ NSTDR1                                                   /NSTDR1/ 2
      COMMON  /REPORT/ IREPRT(37)                                               /REPORT/ 2
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
C---                                                                            FPASS2  14
      DIMENSION  ISYMT(8,1)                                                     FPASS2  15
      DIMENSION  LIDNM(2,7)                                                     FPASS2  16
C---                                                                            FPASS2  17
      DATA  LIDNM/ 4H(GLO, 4HBAL),  4H(SCH, 4HED) ,  4H(SCH, 4H-NM)             FPASS2  18
     1           , 4H????, 4H????,  4H(TAB, 4HLE) ,  4H(LIB, 4H.FN)             FPASS2  19
     2           , 4H**LO, 4HCAL*/                                              FPASS2  20
      DATA  IC0/ 0 /                                                            FPASS2  21
C---                                                                            FPASS2  22
C$    WRITE( 66, 901 )                                                          FPASS2  23
C$901 FORMAT( ' >> FPASS2 ---' )                                                FPASS2  24
C---                                                                            FPASS2  25
C--- PUT END-OF-CODE                                                            FPASS2  26
C---                                                                            FPASS2  27
      NCODE =  NCODE + 1                                                        FPASS2  28
      IA(ICODE0+NCODE) = ( 0 + 100000 ) * 256  +  KKEND                         FPASS2  29
C---                                                                            FPASS2  30
C--- CK UNDEFINED LABELS                                                        FPASS2  31
C---                                                                            FPASS2  32
      IF( NLABT .EQ. 0 )  GOTO  10400                                           FPASS2  33
          DO  10200  JLABT = 1 , NLABT                                          FPASS2  34
          IALABT = ( JLABT - 1 ) * 5  +  ILABT0                                 FPASS2  35
C.......................... ERR-24  STATEMENT NO II MISSING, SEE LINE NN        FPASS2  36
          IF( IA(IALABT+3) .EQ. 0 )                                             FPASS2  37
     1                 CALL  FERR( 24, IA(IALABT+1), IA(IALABT+4) )             FPASS2  38
10200     CONTINUE                                                              FPASS2  39
10400 continue                                                                  FPASS2  40
C---                                                                            FPASS2  41
C--- RENUMBER SYMBOL TABLE ENTRIES BY ELIMINATING UNUSED SYMBOLS                FPASS2  42
C---          NOTE THAT ISYMT(8,.) = NEW SYMBOL NUMBER, OR =0                   FPASS2  43
C---                                                                            FPASS2  44
      JSYMT = 0                                                                 FPASS2  45
      IF( NSYMT .EQ. 0 )  GOTO  30000                                           FPASS2  46
              DO  20400  KSYMT = 1 , NSYMT                                      FPASS2  47
C..................... MOVE TABLE-ENTRIES-COUNT FROM ISYMT(8,.) TO (7,.)        FPASS2  48
              IF( ISYMT(4,KSYMT).EQ.5 )  ISYMT(7,KSYMT) = ISYMT(8,KSYMT)        FPASS2  49
              ISYMT(8,KSYMT) = 0                                                FPASS2  50
              IF( ISYMT(3,KSYMT) .EQ. 0 )  GOTO  20400                          FPASS2  51
              IF( (ISYMT(4,KSYMT) .EQ. 6) .AND.                                 FPASS2  52
     1            (ISYMT(5,KSYMT) .LT. 0) )  GOTO  20400                        FPASS2  53
                  JSYMT = JSYMT + 1                                             FPASS2  54
                  ISYMT(8,KSYMT) = JSYMT                                        FPASS2  55
20400         CONTINUE                                                          FPASS2  56
C---                                                                            FPASS2  57
C--- PROCESS THE SECOND PASS OF CODE.  PUT OPCODE NUMBER, GOTO ADDRESSES        FPASS2  58
C---                                       AND SYMBOL TABLE ADDRESSES           FPASS2  59
C---                                                                            FPASS2  60
30000 IPC = ICODE0                                                              FPASS2  61
30200 IPC = IPC + 1                                                             FPASS2  62
      KOPR = IA(IPC) / 256  -  100000                                           FPASS2  63
      KOPT = MOD( IA(IPC), 256 )                                                FPASS2  64
      IOPCNW = IOPT(4,KOPT)                                                     FPASS2  65
      IOPRNW = KOPR                                                             FPASS2  66
          IF( (KOPT .EQ. KKEND)  .OR. (KOPT .EQ. KKNOOP) .OR.                   FPASS2  67
     1        (KOPT .EQ. KKRET)  .OR. (KOPT .EQ. KKSTOP) .OR.                   FPASS2  68
     2        (KOPT .EQ. KKMARK) .OR. (KOPT .EQ. KKIFGO) .OR.                   FPASS2  69
     3        (KOPT .EQ. KKUNIT) .OR. (KOPT .EQ. KKEOF ) .OR.                   FPASS2  70
     4        (KOPT .EQ. KKREW )     )  GOTO  30900                             FPASS2  71
          IF( (KOPT .NE. KKGOTO) .AND. (KOPT .NE. KKPRIN) .AND.                 FPASS2  72
     1        (KOPT .NE. KKRD  ) .AND. (KOPT .NE. KKWR  ))  GOTO  30300         FPASS2  73
              IF( KOPR .EQ. 0 )  GOTO  30900                                    FPASS2  74
                  IALABT = ( KOPR - 1 ) * 5  +  ILABT0                          FPASS2  75
                  IOPRNW =  IA(IALABT+2)                                        FPASS2  76
                  GOTO  30900                                                   FPASS2  77
30300     IF( KOPT .NE. KKCALL )  GOTO  30400                                   FPASS2  78
              IF( ISYMT(5,KOPR) .GT. 0 )  GOTO  30400                           FPASS2  79
                  IOPRNW = ISYMT(5,KOPR)                                        FPASS2  80
                  GOTO  30900                                                   FPASS2  81
30400      CONTINUE                                                             FPASS2  82
30500     IF( KOPR .EQ. 0 )  GOTO  30900                                        FPASS2  83
          IF( KOPR .GT. 0 )  GOTO  30600                                        FPASS2  84
C.......................................... REASSIGN CONSTANT TABLE PTR         FPASS2  85
              IOPRNW = - NCONT - 1 - KOPR                                       FPASS2  86
              GOTO  30900                                                       FPASS2  87
30600     IOPRNW = ISYMT(8,KOPR)                                                FPASS2  88
30900     CONTINUE                                                              FPASS2  89
          IA(IPC) = ( IOPRNW + 100000 ) * 256  +  IOPCNW                        FPASS2  90
          IF( KOPT .NE. KKEND  )  GOTO  30200                                   FPASS2  91
C---                                                                            FPASS2  92
C--- SHRINK THE SYMBOL TABLE BY ELIMINATING THE UNUSED ENTRIES                  FPASS2  93
C--- ALSO STUFF GLOBAL TABLE ACCESS CODES FOR EACH SYMBOL TABLE ENTRY           FPASS2  94
C---                                                                            FPASS2  95
      IF( NSYMT .EQ. 0 )  GOTO  40900                                           FPASS2  96
          DO  40500  KSYMT = 1 , NSYMT                                          FPASS2  97
          IF( ISYMT(8,KSYMT) .EQ. 0 )  GOTO  40500                              FPASS2  98
              KK = ISYMT(8,KSYMT)                                               FPASS2  99
               CALL  MOVEN( ISYMT(1,KSYMT), ISYMT(1,KK), 8 )                    FPASS2 100
C........................................ SKIP IF LOCATION ID .NE. 1            FPASS2 101
              IF( (ISYMT(4,KK) .NE. 1) .AND.                                    FPASS2 102
     1            (ISYMT(4,KK) .NE. 2) )  GOTO  40500                           FPASS2 103
                  IAGLBT = ISYMT(5,KK)                                          FPASS2 104
                  ISYMT(5,KK) = IA(IAGLBT+5)                                    FPASS2 105
                  ISYMT(6,KK) = IABS( IA(IAGLBT+6) )                            FPASS2 106
                  ISYMT(7,KK) = IABS( IA(IAGLBT+7) )                            FPASS2 107
                  ISYMT(8,KK) = IABS( IA(IAGLBT+8) )                            FPASS2 108
40500     CONTINUE                                                              FPASS2 109
40900 NSYMT = JSYMT                                                             FPASS2 110
C---                                                                            FPASS2 111
C--- SORT AND PRINT SYMBOL TABLE                                                FPASS2 112
C---                                                                            FPASS2 113
      IF( NSYMT .EQ. 0 )  GOTO  50300                                           FPASS2 114
              DO  50200  I = 1 , NSYMT                                          FPASS2 115
              IA(MSYMT0+I) = ISYMT0  +  ( I - 1 ) * 8                           FPASS2 116
50200         CONTINUE                                                          FPASS2 117
50300 IF( NSYMT .LT. 2 )  GOTO  50500                                           FPASS2 118
          IFLAG = 0                                                             FPASS2 119
              DO  50490  I = 2 , NSYMT                                          FPASS2 120
              I1 = IA(MSYMT0+I-1)                                               FPASS2 121
              I2 = IA(MSYMT0+I)                                                 FPASS2 122
                  if ( fc8le( IA(I1+1), IA(I2+1) ) .ne. 0 )  goto  50490        FPASS2 123
50420             IFLAG = 1                                                     FPASS2 124
                  IA(MSYMT0+I-1) = I2                                           FPASS2 125
                  IA(MSYMT0+I)   = I1                                           FPASS2 126
50490         CONTINUE                                                          FPASS2 127
          IF( IFLAG .NE. 0 )  GOTO  50300                                       FPASS2 128
50500 IF( NSYMT .EQ. 0 )  GOTO  50900                                           FPASS2 129
          WRITE( IOUTPT, 1 )                                                    FPASS2 130
1         FORMAT( 1H0, 45H---------------------------------------------         FPASS2 131
     1               , 25H S Y M B O L   T A B L E                              FPASS2 132
     2               , 45H---------------------------------------------         FPASS2 133
     3               , / )                                                      FPASS2 134
          WRITE( IOUTPT, 2 )  (  ( IA(IA(MSYMT0+I)+J), J=1,2 )                  FPASS2 135
     1                        ,  ( LIDNM(J,IA(IA(MSYMT0+I)+4)), J=1,2 )         FPASS2 136
     2                        ,  I=1,NSYMT)                                     FPASS2 137
2         FORMAT( 1X, 2A4,1X,2A4, 7X, 2A4,1X,2A4, 7X, 2A4,1X,2A4,               FPASS2 138
     1            7X, 2A4,1X,2A4, 7X, 2A4,1X,2A4 )                              FPASS2 139
          WRITE( IOUTPT, 3 )                                                    FPASS2 140
3         FORMAT( 1H0, 45H---------------------------------------------         FPASS2 141
     1               , 25H-------------------------                             FPASS2 142
     2               , 45H---------------------------------------------         FPASS2 143
     3               , / )                                                      FPASS2 144
50900 CONTINUE                                                                  FPASS2 145
C---                                                                            FPASS2 146
C--- MOVE LOCAL CONSTANTS FROM SYMBOL TABLE TO VALUE ARRAY LOCATIONS            FPASS2 147
C---                                                                            FPASS2 148
      IF( NSYMT .EQ. 0 )  GOTO  60200                                           FPASS2 149
          IASYMT =  ISYMT0                                                      FPASS2 150
              DO  60100  I = 1 , NSYMT                                          FPASS2 151
              AA(MSYMT0+I) = 0                                                  FPASS2 152
              IF( IA(IASYMT+4) .EQ. 7 )  AA(MSYMT0+I) = AA(IASYMT+5)            FPASS2 153
              IASYMT = IASYMT + 8                                               FPASS2 154
60100         CONTINUE                                                          FPASS2 155
60200 CONTINUE                                                                  FPASS2 156
C---                                                                            FPASS2 157
C--- OUTPUT TWO RECORDS TO STANDARD FILE                                        FPASS2 158
C---                                                                            FPASS2 159
      IF( NSYMT .GT. 0 )  GOTO  70220                                           FPASS2 160
          NSYMT = 1                                                             FPASS2 161
           CALL  FILLN( KCSP, IA(ISYMT0+1), 2 )                                 FPASS2 162
           CALL  FILLN( 0, IA(ISYMT0+3), 6 )                                    FPASS2 163
C............................................................. 7 = LOCAL        FPASS2 164
          IA(ISYMT0+4) = 7                                                      FPASS2 165
70220 IF( NCONT .GT. 0 )  GOTO  70230                                           FPASS2 166
          NCONT = 1                                                             FPASS2 167
          IA(ICONT0+1) = 0                                                      FPASS2 168
70230 IF( NLITT .GT. 0 )  GOTO  70240                                           FPASS2 169
          NLITT = 1                                                             FPASS2 170
          IA(ILITT0+1) = KCSP                                                   FPASS2 171
70240 IF( NCODE .GT. 0 )  GOTO  70250                                           FPASS2 172
          NCODE = 1                                                             FPASS2 173
          IA(ICODE0+1) = IOPT(4,KKEND)                                          FPASS2 174
70250 CONTINUE                                                                  FPASS2 175
      LSFREC = NSYMT*8 + NCODE + NLITT + NCONT + 15 + NSYMT + 1                 FPASS2 176
      WRITE( ISTNDF )  NUMOVL, LSFREC                                           FPASS2 177
      WRITE( ISTNDF )  IFLABL, LSFREC, NLITT , NCONT , NCODE, ICONT0            FPASS2 178
     1               , IFLEVL, NSYMT , ISYMT0, ICODE0, ILITT0, 0                FPASS2 179
     2               , ((ISYMT(J,I), J=1,8), I=1,NSYMT)                         FPASS2 180
     3               , (IA(ICODE0+I), I=1,NCODE)                                FPASS2 181
     4               , (AA(ILITT0+I), I=1,NLITT)                                FPASS2 182
     5               , (AA(ICONT0+I), I=1,NCONT)                                FPASS2 183
     6               , IC0, (AA(MSYMT0+I), I=1,NSYMT)                           FPASS2 184
      NSTDR1 = NSTDR1 + 2                                                       FPASS2 185
C---                                                                            FPASS2 186
90000 CONTINUE                                                                  FPASS2 187
C$    IF( IREPRT(32) .EQ. 1 )    CALL  FDUMP                                    FPASS2 188
C$    WRITE( 66, 902 ) LSFREC                                                   FPASS2 189
C$902 FORMAT( ' << FPASS2 ---  LSFREC=' I6 )                                    FPASS2 190
      RETURN                                                                    FPASS2 191
      END                                                                       FPASS2 192
      function  fc8le ( ixa, ixb )                                              FPASS2 193
c                                                                               FPASS2 194
c--- if ixa(1-2) is lexographically le ixb(1-2) return 1 , else return 0        FPASS2 195
c                                                                               FPASS2 196
      integer  ixa(2), ixb(2)                                                   FPASS2 197
c---                                                                            FPASS2 198
      character*8    ca    , cb                                                 FPASS2 199
        integer     ica(2), icb(2)                                              FPASS2 200
          equivalence (ca, ica(1)),  (cb, icb(1))                               FPASS2 201
      logical  lle                                                              FPASS2 202
c---                                                                            FPASS2 203
      ica(1) = ixa(1)                                                           FPASS2 204
      ica(2) = ixa(2)                                                           FPASS2 205
      icb(1) = ixb(1)                                                           FPASS2 206
      icb(2) = ixb(2)                                                           FPASS2 207
      if ( lle( ca, cb ) )     then                                             FPASS2 208
          fc8le = 1                                                             FPASS2 209
      else                                                                      FPASS2 210
          fc8le = 0                                                             FPASS2 211
      endif                                                                     FPASS2 212
      return                                                                    FPASS2 213
      end                                                                       FPASS2 214
      SUBROUTINE  FPRDEF                                                        FPRDEF   2
C---                                                                            FPRDEF   3
C--- PREDEFINE BUILT-IN SYMBOLS IN SYMBOL TABLE                                 FPRDEF   4
C---                                                                            FPRDEF   5
      COMMON  /FLIBFT/ NLIBFT, LIBFT(3,30)                                      /FLIBFT/ 2
      COMMON  /FOPRNV/ ITOKTY, ANUMBR, ISYMBL(8), IOPRER                        PARAM   21
     1               , IOPRID, IOPRMO, IOPRTY, IOPRVA                           /FOPRNV/ 3
          DIMENSION         IOPR(4)                                             /FOPRNV/ 4
              EQUIVALENCE  (IOPR(1), IOPRID)                                    /FOPRNV/ 5
      COMMON  /FPTRB/  NCODE, ICODE0, LCODE, NCONT, LCONT, ICONT0               /FPTRB/  2
     1               , NLITT, LLITT, ILITT0                                     /FPTRB/  3
     2               , NGLBT, IGLBT0, JGLBT, IAGLBT                             /FPTRB/  4
     3               , NLABT, LLABT, ILABT0, JLABT, IALABT                      /FPTRB/  5
     4               , LSYMT, NSYMT, ISYMT0, JSYMT, IASYMT, MSYMT0,MSYMT        /FPTRB/  6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
C---                                                                            FPRDEF  10
C---                                                                            FPRDEF  11
          DO  300  I = 1 , NLIBFT                                               FPRDEF  12
          ISYMBL(1) = LIBFT(1,I)                                                FPRDEF  13
          ISYMBL(2) = LIBFT(2,I)                                                FPRDEF  14
           CALL  FSYMS                                                          FPRDEF  15
          IF( JSYMT .GT. 0 )  GOTO  200                                         FPRDEF  16
           CALL  FSYMSE                                                         FPRDEF  17
200       IA(IASYMT+4) = 6                                                      FPRDEF  18
          IA(IASYMT+5) = -LIBFT(3,I)                                            FPRDEF  19
          IA(IASYMT+6) = 4                                                      FPRDEF  20
300       CONTINUE                                                              FPRDEF  21
      RETURN                                                                    FPRDEF  22
      END                                                                       FPRDEF  23
      SUBROUTINE  FPUSH1 ( ID )                                                 FPUSH1   2
C---                                                                            FPUSH1   3
C--- PUSH ID(1-4) INTO OPERAND STACK                                            FPUSH1   4
C------- RETURN ISTERR=1 IF ERR                                                 FPUSH1   5
C---                                                                            FPUSH1   6
      COMMON  /FSTACK/ NOPCST, LOPCST, IOPCST(100),   ISTERR                    /FSTACK/ 2
     1               , NOPRST, LOPRST, IOPRST(4,100)                            /FSTACK/ 3
     2               , NACCUM, MACCUM, LACCUM                                   /FSTACK/ 4
C---                                                                            FPUSH1   8
      DIMENSION  ID(4)                                                          FPUSH1   9
C---                                                                            FPUSH1  10
      IF( NOPRST .EQ. LOPRST )  GOTO  800                                       FPUSH1  11
          NOPRST = NOPRST + 1                                                   FPUSH1  12
           CALL  MOVEN( ID, IOPRST(1,NOPRST), 4 )                               FPUSH1  13
900   CONTINUE                                                                  FPUSH1  14
C$    WRITE( 66, 901 )  NOPRST, ID                                              FPUSH1  15
C$901 FORMAT( ' -- FPUSH1  --- NOPRST=' I3,                                     FPUSH1  16
C$   1                     '  IID=' I1 '  IMO='I1'  ITY='I1'  IVAL='I4)         FPUSH1  17
C$    WRITE( 66, 914 )  (I, (IOPRST(J,I), J=1,4), I=1,NOPRST)                   FPUSH1  18
C$914 FORMAT( '                IOPRST(,)=' 5(I3 '-'4I3',') )                    FPUSH1  19
      RETURN                                                                    FPUSH1  20
800   ISTERR = 1                                                                FPUSH1  21
C...................................... ERR-27.1  EXPRESSION TOO COMPLEX        FPUSH1  22
       CALL  FERR( 27, IDUM, IDUM )                                             FPUSH1  23
      GOTO  900                                                                 FPUSH1  24
      END                                                                       FPUSH1  25
      FUNCTION  FPOP1 ( ID )                                                    FPUSH1  26
C---                                                                            FPUSH1  27
C--- POP OPERAND STACK INTO ID(1-4)                                             FPUSH1  28
C------- RETURN 0 IF ERR.                                                       FPUSH1  29
C---                                                                            FPUSH1  30
      COMMON  /FSTACK/ NOPCST, LOPCST, IOPCST(100),   ISTERR                    /FSTACK/ 2
     1               , NOPRST, LOPRST, IOPRST(4,100)                            /FSTACK/ 3
     2               , NACCUM, MACCUM, LACCUM                                   /FSTACK/ 4
C---                                                                            FPUSH1  32
      DIMENSION  ID(4)                                                          FPUSH1  33
C---                                                                            FPUSH1  34
      IF( NOPRST .LT. 1 )  GOTO  1800                                           FPUSH1  35
           CALL  MOVEN( IOPRST(1,NOPRST), ID, 4 )                               FPUSH1  36
          NOPRST = NOPRST - 1                                                   FPUSH1  37
          FPOP1 = 1                                                             FPUSH1  38
          GOTO  1900                                                            FPUSH1  39
1800  FPOP1 = 0                                                                 FPUSH1  40
1900  CONTINUE                                                                  FPUSH1  41
C$    WRITE( 66, 902 )  FPOP1, NOPRST, ID                                       FPUSH1  42
C$902 FORMAT( ' -- FPOP1   --- FPOP1=' F3.0 '  NOPRST=' I3,                     FPUSH1  43
C$   1                     '  IID='I1 '  IMO='I1'  ITY='I1'  IVAL='I4)          FPUSH1  44
C$    WRITE( 66, 914 )  (I, (IOPRST(J,I), J=1,4), I=1,NOPRST)                   FPUSH1  45
C$914 FORMAT( '                IOPRST(,)=' 5(I3 '-'4I3',') )                    FPUSH1  46
      RETURN                                                                    FPUSH1  47
      END                                                                       FPUSH1  48
      SUBROUTINE  FPUSH2 ( ID )                                                 FPUSH1  49
C---                                                                            FPUSH1  50
C--- PUSH ID INTO OPCODE STACK                                                  FPUSH1  51
C------- RETURN ISTERR=1 IF ERR                                                 FPUSH1  52
C---                                                                            FPUSH1  53
      COMMON  /FSTACK/ NOPCST, LOPCST, IOPCST(100),   ISTERR                    /FSTACK/ 2
     1               , NOPRST, LOPRST, IOPRST(4,100)                            /FSTACK/ 3
     2               , NACCUM, MACCUM, LACCUM                                   /FSTACK/ 4
C---                                                                            FPUSH1  55
      IF( NOPCST .EQ. LOPCST )  GOTO  2800                                      FPUSH1  56
          NOPCST = NOPCST + 1                                                   FPUSH1  57
          IOPCST(NOPCST) = ID                                                   FPUSH1  58
2900  CONTINUE                                                                  FPUSH1  59
C$    WRITE( 66, 903 )  ID, NOPCST                                              FPUSH1  60
C$903 FORMAT( ' -- FPUSH2  --- ID=' I3 '  NOPCST=' I3 )                         FPUSH1  61
C$    WRITE( 66, 923 )  (I, IOPCST(I), I=1,NOPCST)                              FPUSH1  62
C$923 FORMAT( '                IOPCST() =' 10(I3 '-'I2',') )                    FPUSH1  63
      RETURN                                                                    FPUSH1  64
2800  ISTERR = 1                                                                FPUSH1  65
C...................................... ERR-27.2  EXPRESSION TOO COMPLEX        FPUSH1  66
       CALL  FERR( 27, IDUM, IDUM )                                             FPUSH1  67
      GOTO  2900                                                                FPUSH1  68
      END                                                                       FPUSH1  69
      SUBROUTINE  FREM2                                                         FPUSH1  70
C---                                                                            FPUSH1  71
C--- REMOVE TOP OF OPCODE STACK                                                 FPUSH1  72
C---                                                                            FPUSH1  73
      COMMON  /FSTACK/ NOPCST, LOPCST, IOPCST(100),   ISTERR                    /FSTACK/ 2
     1               , NOPRST, LOPRST, IOPRST(4,100)                            /FSTACK/ 3
     2               , NACCUM, MACCUM, LACCUM                                   /FSTACK/ 4
C---                                                                            FPUSH1  75
      IF( NOPCST .LT. 1 )  GOTO  3800                                           FPUSH1  76
          NOPCST = NOPCST - 1                                                   FPUSH1  77
3900  CONTINUE                                                                  FPUSH1  78
C$    WRITE( 66, 904 )  ISTERR, NOPCST                                          FPUSH1  79
C$904 FORMAT( ' -- FREM2   --- ISTERR=' I2 '  NOPCST='I3)                       FPUSH1  80
C$    WRITE( 66, 923 )  (I, IOPCST(I), I=1,NOPCST)                              FPUSH1  81
C$923 FORMAT( '                IOPCST() =' 10(I3 '-'I2',') )                    FPUSH1  82
      RETURN                                                                    FPUSH1  83
3800  ISTERR = 1                                                                FPUSH1  84
C...................................... ERR-27.3  EXPRESSION TOO COMPLEX        FPUSH1  85
       CALL  FERR( 27, IDUM, IDUM )                                             FPUSH1  86
      GOTO  3900                                                                FPUSH1  87
      END                                                                       FPUSH1  88
      SUBROUTINE  FACCE2 ( IFACC2 )                                             FPUSH1  89
C---                                                                            FPUSH1  90
C--- PUT TOP OF OPCODE STACK INTO IOP, WITHOUT POPPING                          FPUSH1  91
C--- ALSO PUT LAST IOP INTO IOP1                                                FPUSH1  92
C------- RETURN IFACC2=0 IF ERR.                                                FPUSH1  93
C---                                                                            FPUSH1  94
      COMMON  /FOPCD/  IOPT(4,45), LOPT, JOPT, JOPT1, IOP, IOP1                 /FOPCD/  2
     1               , KKPLUS, KKMIN,  KKDIV,  KKLPAR, KKRPAR, KKPWR            /FOPCD/  3
     2               , KKEQL,  KKOR,   KKAND,  KKNOT,  KKCALL, KKUMIN           /FOPCD/  4
     3               , KKNOOP, KKEOS,  KKLD,   KKRMIN, KKRDIV, KKRPWR           /FOPCD/  5
     4               , KKGOTO, KKEND,  KKIFGO, KKCOMA, KKRET,  KKSTOP           /FOPCD/  6
     5               , KKPRIN, KKERR,  KKDIM1, KKDIM2, KKDIM3, KKMARK           /FOPCD/  7
     6               , KKPEQL, KKEQS,  KKNEQS, KKRD  , KKWR  , KKEOF            /FOPCD/  8
     7               , KKREW , KKUNIT,  JFTNSG                                  /FOPCD/  9
      COMMON  /FSTACK/ NOPCST, LOPCST, IOPCST(100),   ISTERR                    /FSTACK/ 2
     1               , NOPRST, LOPRST, IOPRST(4,100)                            /FSTACK/ 3
     2               , NACCUM, MACCUM, LACCUM                                   /FSTACK/ 4
C---                                                                            FPUSH1  97
      IF( NOPCST .LT. 1 )  GOTO  4800                                           FPUSH1  98
          IOP1 = IOP                                                            FPUSH1  99
          IOP  = IOPCST(NOPCST)                                                 FPUSH1 100
          IFACC2 = 1                                                            FPUSH1 101
          GOTO  4900                                                            FPUSH1 102
4800  IFACC2 = 0                                                                FPUSH1 103
4900  CONTINUE                                                                  FPUSH1 104
C$    WRITE( 66, 905 )  IFACC2, IOP, IOP1, NOPCST                               FPUSH1 105
C$905 FORMAT( ' -- FACCE2 --- IFACC2=' I2 '  IOP=' I3,                          FPUSH1 106
C$   1                     '  IOP1=' I3 '  NOPCST=' I3 )                        FPUSH1 107
C$    WRITE( 66, 923 )  (I, IOPCST(I), I=1,NOPCST)                              FPUSH1 108
C$923 FORMAT( '                IOPCST() =' 10(I3 '-'I2',') )                    FPUSH1 109
      RETURN                                                                    FPUSH1 110
      END                                                                       FPUSH1 111
      SUBROUTINE  FPUTOP ( KOPTX, KOPRND )                                      FPUTOP   2
C---                                                                            FPUTOP   3
C--- PRODUCE ONE PACKED WORD OF OPCODE + OPERAND                                FPUTOP   4
C---     INCREMENT NCODE , AND STUFF OP IN ARRAY                                FPUTOP   5
C---                                                                            FPUTOP   6
      COMMON  /FOPCD/  IOPT(4,45), LOPT, JOPT, JOPT1, IOP, IOP1                 /FOPCD/  2
     1               , KKPLUS, KKMIN,  KKDIV,  KKLPAR, KKRPAR, KKPWR            /FOPCD/  3
     2               , KKEQL,  KKOR,   KKAND,  KKNOT,  KKCALL, KKUMIN           /FOPCD/  4
     3               , KKNOOP, KKEOS,  KKLD,   KKRMIN, KKRDIV, KKRPWR           /FOPCD/  5
     4               , KKGOTO, KKEND,  KKIFGO, KKCOMA, KKRET,  KKSTOP           /FOPCD/  6
     5               , KKPRIN, KKERR,  KKDIM1, KKDIM2, KKDIM3, KKMARK           /FOPCD/  7
     6               , KKPEQL, KKEQS,  KKNEQS, KKRD  , KKWR  , KKEOF            /FOPCD/  8
     7               , KKREW , KKUNIT,  JFTNSG                                  /FOPCD/  9
      COMMON  /FPTRB/  NCODE, ICODE0, LCODE, NCONT, LCONT, ICONT0               /FPTRB/  2
     1               , NLITT, LLITT, ILITT0                                     /FPTRB/  3
     2               , NGLBT, IGLBT0, JGLBT, IAGLBT                             /FPTRB/  4
     3               , NLABT, LLABT, ILABT0, JLABT, IALABT                      /FPTRB/  5
     4               , LSYMT, NSYMT, ISYMT0, JSYMT, IASYMT, MSYMT0,MSYMT        /FPTRB/  6
      COMMON /IAX   / IAX, IADIM, IADIMV, IAXMAX, KORE                          /IAX/    2
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
C---                                                                            FPUTOP  11
      DIMENSION  KOPRND(4)                                                      FPUTOP  12
C---                                                                            FPUTOP  13
      KOPRID = KOPRND(1)                                                        FPUTOP  14
      KOPRMO = KOPRND(2)                                                        FPUTOP  15
      KOPRTY = KOPRND(3)                                                        FPUTOP  16
      KOPRVA = KOPRND(4)                                                        FPUTOP  17
      KOPT   = KOPTX                                                            FPUTOP  18
C---                                                                            FPUTOP  19
C.......................................... 5 = LABEL                           FPUTOP  20
      IF( KOPRID .NE. 5 )  GOTO  400                                            FPUTOP  21
          IOPRN = KOPRVA                                                        FPUTOP  22
          GOTO  700                                                             FPUTOP  23
C.......................................... 2 = SYMBOLIC                        FPUTOP  24
400   IF( KOPRID .NE. 2 )  GOTO  600                                            FPUTOP  25
          IASYMT = ISYMT0  +  (KOPRVA-1) * 8                                    FPUTOP  26
C............................................ 1 = GLOBAL VARIABLE               FPUTOP  27
          if ( IA(IASYMT+4) .eq. 1 )    then                                    FPUTOP  28
            IAGLBT = IA(IASYMT+5)                                               FPUTOP  29
            if ( (KOPT .eq. KKEQL   .or.                                        FPUTOP  30
     1            ( KOPT .eq. KKCOMA  .and.  JFTNSG .eq. 11 )                   FPUTOP  31
     2           )  .and.   IA(IAGLBT+7) .lt. 0                                 FPUTOP  32
     3         )     call  FERR( 61, IA(IASYMT),IDUM)                           FPUTOP  33
C...................... ERR-61  CANNOT STORE IN WRITE-PROTECTED VARIABLE        FPUTOP  34
            if ( KOPT .eq. KKEQL  .and.  IABS( IA(IAGLBT+6) ) .eq. 2            FPUTOP  35
     1         )    KOPT = KKPEQL                                               FPUTOP  36
          endif                                                                 FPUTOP  37
C.......................................... PUT SYMBOL ASSIGNED FLAG            FPUTOP  38
          if ( (KOPT .eq. KKEQL)   .or.                                         FPUTOP  39
     1         ( KOPT .eq. KKCOMA  .and.  JFTNSG .eq. 11 )                      FPUTOP  40
     2       )    then                                                          FPUTOP  41
            if ( IA(IASYMT+3) .lt. 2 )   IA(IASYMT+3) = IA(IASYMT+3) + 2        FPUTOP  42
            goto  600                                                           FPUTOP  43
          endif                                                                 FPUTOP  44
C.......................................... PUT SYMBOL USED FLAG                FPUTOP  45
500       IF( (IA(IASYMT+3).EQ.2) .OR. (IA(IASYMT+3).EQ.0) )                    FPUTOP  46
     1                        IA(IASYMT+3) = IA(IASYMT+3) + 1                   FPUTOP  47
600   IOPRN = 0                                                                 FPUTOP  48
      IF( KOPRID .EQ. 2 )  IOPRN = KOPRVA                                       FPUTOP  49
      IF( KOPRID .EQ. 1 )  IOPRN = - KOPRVA                                     FPUTOP  50
      IF( KOPRID .EQ. 4 )  IOPRN = 0                                            FPUTOP  51
C---                                                                            FPUTOP  52
700   NCODE = NCODE + 1                                                         FPUTOP  53
      IF( NCODE .LE. LCODE )  GOTO  720                                         FPUTOP  54
           CALL  CKAA( IA, 2000 )                                               FPUTOP  55
          IAX   = IAX + 2000                                                    FPUTOP  56
          LCODE = LCODE + 2000                                                  FPUTOP  57
720   IA(ICODE0+NCODE) = ( IOPRN + 100000 ) * 256  +  IOPT(2,KOPT)              FPUTOP  58
C$    WRITE( 66, 901 ) NCODE, IOPT(1,KOPT), IOPRN, KOPRID                       FPUTOP  59
C$901 FORMAT( ' -- FPUTOP  ---  NCODE=', I3,'  CODE= 'A4 '  IOPRN='I4,          FPUTOP  60
C$   1                      '  KOPRID=' I1 )                                    FPUTOP  61
      RETURN                                                                    FPUTOP  62
      END                                                                       FPUTOP  63
      SUBROUTINE  FRDBUF                                                        FRDBUF   2
C---                                                                            FRDBUF   3
C--- READ A LINE OF FORTRAN AND BUFFER IT                                       FRDBUF   4
C---                                                                            FRDBUF   5
      COMMON  /FBUF/   IBUF0(80), IBUF(1062), JBUF, NBUF, IEOF0                 /FBUF/   2
     1               , IBUFEF, LINENO                                           /FBUF/   3
      COMMON  /FCHARS/ KCSP  , KCMUL , KCLPAR, KCPERD, KCCOMA, KCQUOT           /FCHARS/ 2
     1               , KCEQL , KCDOLR, KCPLUS, KCMIN , KCC   , KCE              /FCHARS/ 3
     2               , KCEOS , KCEOF , KCRPAR,         KLc   , KLe              /FCHARS/ 4
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
      common /KARD/   KARD(4096), KRDNUM, KARDX , KARDSX, KRDX, KRDSX           /KARD/   2
     1              , KARDXP,KARDI1,KARDI2,KARDIM,IEOF,iBkspF,KRDSAV(82)        LIB1     1
      COMMON /LISTD / LISTOP(4,15), IDBLSP, NARROW, NOECHO, IECHO,              FIX14    4
     $                MSGTOT(10),   MSGLVL, ABTLVL, IFATAL, NOLIMS,             FIX14    5
     $                LIBLST,       KVTLST, NAMDEF                              FIX14    6
      INTEGER ABTLVL                                                            /LISTD/  4
C---                                                                            FRDBUF  11
      data  KCN / 1hN /,  KLn / 1hn /,  KCD / 1hD /,  KLd / 1hd /               FRDBUF  12
C---                                                                            FRDBUF  13
c$    write(6,'('' frdbuf --> IBUFEF=''i3''  IEOF0=''i2)') IBUFEF, IEOF0        FRDBUF  14
      NOECHX = NOECHO                                                           FRDBUF  15
      LINENO = KRDNUM                                                           FRDBUF  16
      JBUF = 7 - 66                                                             FRDBUF  17
      IF( IBUFEF .NE. 0 )  GOTO  400                                            FRDBUF  18
100   IF( IEOF0  .NE. 0 )  GOTO  880                                            FRDBUF  19
      LINENO = KRDNUM                                                           FRDBUF  20
               call  MOVEN( KARD(KARDI1), IBUF(1), 6 )                          FRDBUF  21
200   JBUF = JBUF + 66                                                          FRDBUF  22
              if ( JBUF+65 .gt. 1062 )     goto  820                            FRDBUF  23
               call  MOVEN( KARD(KARDI1+6), IBUF(JBUF), 66 )                    FRDBUF  24
300           NOECHO = NOECHX                                                   FRDBUF  25
               call  ECHO                                                       FRDBUF  26
400   NOECHO = 1                                                                FRDBUF  27
       CALL  KRDRD                                                              FRDBUF  28
C$    WRITE( 66, 901 )  KRDNUM, (KARD(I), I=1,KARDI2)                           FRDBUF  29
C$901 FORMAT( 2H0* I4, 3H * 80A1, / )                                           FRDBUF  30
      IF( IEOF .NE. 0 )  GOTO  800                                              FRDBUF  31
              if ( ( KARD(KARDI1) .eq. KCC ) .or.                               FRDBUF  32
     1             ( KARD(KARDI1) .eq. KLc ) )     goto  300                    FRDBUF  33
              if ( KARD(KARDI1+5) .eq. KCSP )     goto  900                     FRDBUF  34
c---- ck leading spaces followed by 'END' .                                     FRDBUF  35
          do  i = 7 , JBUF + 65                                                 FRDBUF  36
              if ( IBUF(i) .ne. KCSP )    goto  510                             FRDBUF  37
          enddo                                                                 FRDBUF  38
          i = 7                                                                 FRDBUF  39
510       if ( ( IBUF(6)  .eq. KCSP ) .and.                                     FRDBUF  40
     1         ((IBUF(i)  .eq. KCE) .or. (IBUF(i)  .eq. KLe) ) .and.            FRDBUF  41
     2         ((IBUF(i+1).eq. KCN) .or. (IBUF(i+1).eq. KLn) ) .and.            FRDBUF  42
     3         ((IBUF(i+2).eq. KCD) .or. (IBUF(i+2).eq. KLd) ) )goto 900        FRDBUF  43
      GOTO  200                                                                 FRDBUF  44
900   NBUF = JBUF + 65                                                          FRDBUF  45
      IF( IBUFEF .EQ. 0 )  GOTO  990                                            FRDBUF  46
          IBUFEF = 0                                                            FRDBUF  47
          GOTO  100                                                             FRDBUF  48
990   JBUF = 0                                                                  FRDBUF  49
      NOECHO = NOECHX                                                           FRDBUF  50
c$    write(6,'('' frdbuf <-- IBUFEF=''i3''  IEOF0=''i2''  JBUF=''i3            FRDBUF  51
c$   1          ''  NBUF=''i3)')  IBUFEF, IEOF0, JBUF, NBUF                     FRDBUF  52
      RETURN                                                                    FRDBUF  53
800   IEOF0 = 1                                                                 FRDBUF  54
      goto  900                                                                 FRDBUF  55
c---- err : too many continuation lines                                         FRDBUF  56
820    call  FERR( 69, IDUM, IDUM )                                             FRDBUF  57
      JBUF = JBUF - 66                                                          FRDBUF  58
      goto  900                                                                 FRDBUF  59
880   IBUFEF = 1                                                                FRDBUF  60
      NBUF   = 0                                                                FRDBUF  61
      goto  990                                                                 FRDBUF  62
      END                                                                       FRDBUF  63
      FUNCTION  FSTON ( NUM )                                                   FSTON    2
C---                                                                            FSTON    3
C--- CONVERT ITMP(1-LTMP) TO INTEGER NUMBER                                     FSTON    4
C---     RETURN FSTON=1 IF OK ELSE RETURN FSTON=0                               FSTON    5
C---                                                                            FSTON    6
      COMMON  /FGNCHV/ JCH, JDIGCK, LTMP, ITMP(32)                              /FGNCHV/ 2
C---                                                                            FSTON    8
      INTEGER  FIDIGC                                                           FSTON    9
C---                                                                            FSTON   10
      FSTON = 1                                                                 FSTON   11
      NUM    = 0                                                                FSTON   12
      I      = 0                                                                FSTON   13
      IF( LTMP .LT. 1 )  GOTO  800                                              FSTON   14
200   I = I + 1                                                                 FSTON   15
      IF( I .GT. LTMP )  GOTO  900                                              FSTON   16
          N = FIDIGC( ITMP(I) )                                                 FSTON   17
          IF( N .LT. 0 )  GOTO  800                                             FSTON   18
          NUM = 10 * NUM  +  N                                                  FSTON   19
          GOTO  200                                                             FSTON   20
800   FSTON = 0                                                                 FSTON   21
900   CONTINUE                                                                  FSTON   22
C$    WRITE( 66, 901 )  FSTON, NUM                                              FSTON   23
C$901 FORMAT( ' -- FSTON ---  FSTON=',F4.1,'  NUM=',I8 )                        FSTON   24
      RETURN                                                                    FSTON   25
      END                                                                       FSTON   26
      SUBROUTINE  FSYMS                                                         FSYMS    2
C---                                                                            FSYMS    3
C--- SEARCH ISYMBL(1-2) IN IA(ISYMT0+1-2,8)                                     FSYMS    4
C---     RETURN FIND INDEX IN JSYMT,  POINTER TO IA ARRAY IN IASYMT             FSYMS    5
C---                                                                            FSYMS    6
      COMMON  /FOPRNV/ ITOKTY, ANUMBR, ISYMBL(8), IOPRER                        PARAM   21
     1               , IOPRID, IOPRMO, IOPRTY, IOPRVA                           /FOPRNV/ 3
          DIMENSION         IOPR(4)                                             /FOPRNV/ 4
              EQUIVALENCE  (IOPR(1), IOPRID)                                    /FOPRNV/ 5
      COMMON  /FPTRB/  NCODE, ICODE0, LCODE, NCONT, LCONT, ICONT0               /FPTRB/  2
     1               , NLITT, LLITT, ILITT0                                     /FPTRB/  3
     2               , NGLBT, IGLBT0, JGLBT, IAGLBT                             /FPTRB/  4
     3               , NLABT, LLABT, ILABT0, JLABT, IALABT                      /FPTRB/  5
     4               , LSYMT, NSYMT, ISYMT0, JSYMT, IASYMT, MSYMT0,MSYMT        /FPTRB/  6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
C---                                                                            FSYMS   10
      IASYMT = ISYMT0                                                           FSYMS   11
      IF( NSYMT .LT. 1 )  GOTO  800                                             FSYMS   12
              DO  300  JSYMT = 1 , NSYMT                                        FSYMS   13
              IF( ISYMBL(1) .NE. IA(IASYMT+1) )  GOTO  250                      FSYMS   14
              IF( ISYMBL(2) .EQ. IA(IASYMT+2) )  GOTO  900                      FSYMS   15
250           IASYMT = IASYMT + 8                                               FSYMS   16
300           CONTINUE                                                          FSYMS   17
800   JSYMT = 0                                                                 FSYMS   18
900   CONTINUE                                                                  FSYMS   19
C$    WRITE( 66, 905 )  ISYMBL, JSYMT, IASYMT                                   FSYMS   20
C$905 FORMAT( ' -- FSYMS  --- ISYMBL=' 4A4 '  JSYMT=' I6 '  IASYMT='I6 )        FSYMS   21
C$    IF( JSYMT .NE. 0 )  WRITE( 66, 904 )  (IA(IASYMT+J), J=1,8)               FSYMS   22
C$904 FORMAT( 22X, 2A4, 6I6 )                                                   FSYMS   23
      RETURN                                                                    FSYMS   24
      END                                                                       FSYMS   25
      SUBROUTINE  FSYMSE                                                        FSYMS   26
C---                                                                            FSYMS   27
C--- ENTER ISYMBL(1-2) TO SYMBOL TABLE IN IA ARRAY                              FSYMS   28
C---                                                                            FSYMS   29
      COMMON  /FOPRNV/ ITOKTY, ANUMBR, ISYMBL(8), IOPRER                        PARAM   21
     1               , IOPRID, IOPRMO, IOPRTY, IOPRVA                           /FOPRNV/ 3
          DIMENSION         IOPR(4)                                             /FOPRNV/ 4
              EQUIVALENCE  (IOPR(1), IOPRID)                                    /FOPRNV/ 5
      COMMON  /FPTRB/  NCODE, ICODE0, LCODE, NCONT, LCONT, ICONT0               /FPTRB/  2
     1               , NLITT, LLITT, ILITT0                                     /FPTRB/  3
     2               , NGLBT, IGLBT0, JGLBT, IAGLBT                             /FPTRB/  4
     3               , NLABT, LLABT, ILABT0, JLABT, IALABT                      /FPTRB/  5
     4               , LSYMT, NSYMT, ISYMT0, JSYMT, IASYMT, MSYMT0,MSYMT        /FPTRB/  6
#ifdef _DLL                                                                  /* -048a    1 */ 
      COMMON  //       AA(75 000 000)                                           -048a    2
          INTEGER      IA(75 000 000)                                           -048a    3
#else                                                                        /* -048a    4 */ 
      COMMON  //       AA(75 000 000)                                           -048a    5
          INTEGER      IA(75 000 000)                                           -048a    6
#endif                                                                       /* -048a    7 */ 
      EQUIVALENCE (AA(1),IA(1))                                                 /BLANK/  4
C                                                                               /BLANK/  5
C---                                                                            FSYMS   33
      IF( NSYMT .GE. LSYMT )  GOTO  1800                                        FSYMS   34
          IASYMT = ISYMT0  +  NSYMT * 8                                         FSYMS   35
          IA(IASYMT+1) = ISYMBL(1)                                              FSYMS   36
          IA(IASYMT+2) = ISYMBL(2)                                              FSYMS   37
           CALL  FILLN( 0, IA(IASYMT+3), 6 )                                    FSYMS   38
          NSYMT = NSYMT + 1                                                     FSYMS   39
          JSYMT = NSYMT                                                         FSYMS   40
1900  CONTINUE                                                                  FSYMS   41
C$    WRITE( 66, 906 )  ISYMBL(1), ISYMBL(2), NSYMT, IASYMT                     FSYMS   42
C$906 FORMAT( ' -- FSYMSE --- ISYMBL=' 2A4 '  NSYT='I6 '  IASYMT='I6)           FSYMS   43
      RETURN                                                                    FSYMS   44
C................................ ERR-36  SYMBOL TABLE CAPACITY EXCEEDED        FSYMS   45
1800   CALL  FERR( 36, IDUM, IDUM )                                             FSYMS   46
      GOTO  1900                                                                FSYMS   47
      END                                                                       FSYMS   48
      SUBROUTINE  FTNSCK ( JFTNST, JFTNSG )                                     FTNSCK   2
C---                                                                            FTNSCK   3
C--- CK IF ITMP CONTAINS FORTRAN STATEMENT KEYWORDS                             FTNSCK   4
C---    IF YES ITMP IS SHIFTED LEFT BY THE LENGTH OF KEYWORD                    FTNSCK   5
C---                                                                            FTNSCK   6
      COMMON  /FGNCHV/ JCH, JDIGCK, LTMP, ITMP(32)                              /FGNCHV/ 2
      COMMON  /FOPRNV/ ITOKTY, ANUMBR, ISYMBL(8), IOPRER                        PARAM   21
     1               , IOPRID, IOPRMO, IOPRTY, IOPRVA                           /FOPRNV/ 3
          DIMENSION         IOPR(4)                                             /FOPRNV/ 4
              EQUIVALENCE  (IOPR(1), IOPRID)                                    /FOPRNV/ 5
C---                                                                            FTNSCK   9
      DIMENSION  IFTNTB(135)                                                    FTNSCK  10
C---                                                                            FTNSCK  11
      DATA  IFTNTB/ 3, 1, 1HI,1HF,1H                                            FTNSCK  12
     1            , 4, 2, 1HG,1HO,1HT,1HO                                       FTNSCK  13
     2            , 9, 3, 1HC,1HO,1HN,1HT,1HI,1HN,1HU,1HE,1H                    FTNSCK  14
     3            , 7, 4, 1HR,1HE,1HT,1HU,1HR,1HN,1H                            FTNSCK  15
     4            , 4, 5, 1HE,1HN,1HD,1H                                        FTNSCK  16
     5            ,10, 6, 1HS,1HU,1HB,1HR,1HO,1HU,1HT,1HI,1HN,1HE               FTNSCK  17
     6            , 4, 7, 1HS,1HT,1HO,1HP                                       FTNSCK  18
     7            , 5, 8, 1HP,1HR,1HI,1HN,1HT                                   FTNSCK  19
     8            , 7, 9, 1HF,1HO,1HR,1HM,1HA,1HT,1H                            FTNSCK  20
     9            , 4,10, 1HC,1HA,1HL,1HL                                       FTNSCK  21
     1            , 5,11, 1HR,1HE,1HA,1HD,1H                                    FTNSCK  22
     2            , 6,12, 1HW,1HR,1HI,1HT,1HE,1H                                FTNSCK  23
     3            , 7,13, 1HE,1HN,1HD,1HF,1HI,1HL,1HE                           FTNSCK  24
     4            , 6,14, 1HR,1HE,1HW,1HI,1HN,1HD                               FTNSCK  25
     4            , 9,-1, 1HD,1HI,1HM,1HE,1HN,1HS,1HI,1HO,1HN                   FTNSCK  26
     5            , 6,-1, 1HC,1HO,1HM,1HM,1HO,1HN                               FTNSCK  27
     6            , 4,-1, 1HR,1HE,1HA,1HL, 0 /                                  FTNSCK  28
C---                                                                            FTNSCK  29
      I = 1                                                                     FTNSCK  30
       call  A4A1( ISYMBL, ITMP, 4 )                                            FTNSCK  31
100   L = IFTNTB(I)                                                             FTNSCK  32
      IF( L .EQ. 0 )  GOTO  800                                                 FTNSCK  33
          JFTNST = I                                                            FTNSCK  34
          JFTNSG = IFTNTB(I+1)                                                  FTNSCK  35
              DO  200  J = 1 , L                                                FTNSCK  36
              IF( IFTNTB(I+J+1) .NE. ITMP(J) )  GOTO  300                       FTNSCK  37
200           CONTINUE                                                          FTNSCK  38
           CALL  MOVEN( ITMP(L+1), ITMP(1), 32-L )                              FTNSCK  39
      LTMP = LTMP - L                                                           FTNSCK  40
       call  FILLN( IFTNTB(5) , ITMP(LTMP+1), 32-LTMP )                         FTNSCK  41
       call  A1A4( ITMP, ISYMBL, 4 )                                            FTNSCK  42
          GOTO  900                                                             FTNSCK  43
300   I = I + L + 2                                                             FTNSCK  44
      GOTO  100                                                                 FTNSCK  45
800   JFTNST = 0                                                                FTNSCK  46
      JFTNSG = 0                                                                FTNSCK  47
900   CONTINUE                                                                  FTNSCK  48
C$    WRITE( 66, 909 )  JFTNSG, ITMP                                            FTNSCK  49
C$909 FORMAT( ' -- FTNSCK --- JFTNSG=',I2,'  ITMP(1-32)=',32A1 )                FTNSCK  50
      RETURN                                                                    FTNSCK  51
      END                                                                       FTNSCK  52
      FUNCTION  FVARCO ( IVARNM, IVARTY )                                       FVARCO   2
C---                                                                            FVARCO   3
C--- COLLECT A VARIABLE NAME                                                    FVARCO   4
C---                                                                            FVARCO   5
C---     FVARCO=0  IF OK,  =1 IF ERR                                            FVARCO   6
C>>>>>>>> MUST GUARD FOR .GT. 32 LENGTH                                         FVARCO   7
C---                                                                            FVARCO   8
      COMMON  /FCHARS/ KCSP  , KCMUL , KCLPAR, KCPERD, KCCOMA, KCQUOT           /FCHARS/ 2
     1               , KCEQL , KCDOLR, KCPLUS, KCMIN , KCC   , KCE              /FCHARS/ 3
     2               , KCEOS , KCEOF , KCRPAR,         KLc   , KLe              /FCHARS/ 4
      COMMON  /FGNCHV/ JCH, JDIGCK, LTMP, ITMP(32)                              /FGNCHV/ 2
      COMMON  /FOPCD/  IOPT(4,45), LOPT, JOPT, JOPT1, IOP, IOP1                 /FOPCD/  2
     1               , KKPLUS, KKMIN,  KKDIV,  KKLPAR, KKRPAR, KKPWR            /FOPCD/  3
     2               , KKEQL,  KKOR,   KKAND,  KKNOT,  KKCALL, KKUMIN           /FOPCD/  4
     3               , KKNOOP, KKEOS,  KKLD,   KKRMIN, KKRDIV, KKRPWR           /FOPCD/  5
     4               , KKGOTO, KKEND,  KKIFGO, KKCOMA, KKRET,  KKSTOP           /FOPCD/  6
     5               , KKPRIN, KKERR,  KKDIM1, KKDIM2, KKDIM3, KKMARK           /FOPCD/  7
     6               , KKPEQL, KKEQS,  KKNEQS, KKRD  , KKWR  , KKEOF            /FOPCD/  8
     7               , KKREW , KKUNIT,  JFTNSG                                  /FOPCD/  9
C---                                                                            FVARCO  12
      DIMENSION  IVARNM(4)                                                      FVARCO  13
C---                                                                            FVARCO  14
C$    WRITE( 66, 901 )  JCH                                                     FVARCO  15
C$901 FORMAT( ' >> FVARCO --- JCH=', A1 )                                       FVARCO  16
      FVARCO = 0                                                                FVARCO  17
      IVARTY = 2                                                                FVARCO  18
          DO  200  I = 1 , 32                                                   FVARCO  19
          LTMP    = I                                                           FVARCO  20
          ITMP(I) = JCH                                                         FVARCO  21
           CALL  FIGNCH                                                         FVARCO  22
           CALL  FIOPCK                                                         FVARCO  23
          IF( JOPT .NE. KKERR )  GOTO  300                                      FVARCO  24
200       CONTINUE                                                              FVARCO  25
      FVARCO = 1                                                                FVARCO  26
300    CALL  FILLN ( KCSP , ITMP(LTMP+1), 32-LTMP )                             FVARCO  27
       call  A1A4( ITMP, IVARNM, 4 )                                            FVARCO  28
       call  UPPER4( IVARNM, IVARNM, 4 )                                        FVARCO  29
C$    WRITE( 66, 907 )  FVARCO, IVARNM, IOPT(1,JOPT), LTMP                      FVARCO  30
C$907 FORMAT( ' << FVARCO --- FVARCO=' F4.1 ' IVARNM=', 4A4,                    FVARCO  31
C$   1                      ' OPCODE=' A4,  ' LTMP=',I3 )                       FVARCO  32
      RETURN                                                                    FVARCO  33
      END                                                                       FVARCO  34
      SUBROUTINE  PACKWD ( NI1, I1, LWD, IWD, NWD )                             PACKWD   2
C---                                                                            PACKWD   3
C--- PACK NI1 CHARS IN I1 INTO NWD WORDS IN IWD                                 PACKWD   4
C---    I1 IS A1 FORMAT,  IWD IS A(N) FORMAT WITH N DEPENDING ON THE CPU        PACKWD   5
C---    LWD IS THE LENGTH OF AVAILABLE WORDS,  IF MORE IWD OVERFLOWS LWD        PACKWD   6
C---        NWD = -LWD,  ELSE  NWD = NUMBER OF WORDS FILLED                     PACKWD   7
C---                                                                            PACKWD   8
      DIMENSION  I1(4), IWD(1)                                                  PACKWD   9
C---                                                                            PACKWD  10
      COMMON  /FILES / KEYFIL,LIBFIL,IUSLIB,ISTNDF,                             /FILES/  2
     1                 INPUT,INCOPY,INFIL,ICTRL,ICOSTF,IOUTPT,ITMPFL,           /FILES/  3
     2                 IW4FIL                                                   /FILES/  4
C---                                                                            PACKWD  12
CVAX  DATA  IBYPWD/ 4 /                                                         PACKWD  13
      DATA  IBYPWD/ 4 /                                                         PACKWD  14
      NWD = ( NI1 + IBYPWD - 1 ) / IBYPWD                                       PACKWD  15
      NW  = NWD                                                                 PACKWD  16
      IF( NWD .GT. LWD )  NW = LWD                                              PACKWD  17
      IF( NWD .GT. LWD )  NWD = - NWD                                           PACKWD  18
      NNI1 = NI1                                                                PACKWD  19
      IF( NW .NE. NWD )  NNI1 = NW * IBYPWD                                     PACKWD  20
       CALL  A1A4( I1, IWD, NW )                                                PACKWD  21
      RETURN                                                                    PACKWD  22
      END                                                                       PACKWD  23
      SUBROUTINE ZeroBlock(Istart, Iend)                                        ZeroBk   2
c                                                                               ZeroBk   3
c              Initializes a block of variables to zero                         ZeroBk   4
c                                                                               ZeroBk   5
c              Istart  The first variable in the block                          ZeroBk   6
c              Iend    The last  variable in the block                          ZeroBk   7
c                                                                               ZeroBk   8
C              DEVELOPED BY                                                     CREDIT   2
C                            W. F. Buhl                                         COMB03   1
C                            A. E. Erdem                                        COMB03   2
C                            F. C. Winkelmann                                   COMB03   3
C                            Lawrence Berkeley National Laboratory              COMB03   4
C                            University of California                           COMB03   5
C                                                                               COMB03   6
C                            J. J. Hirsch                                       COMB03   7
C                            S. D. Gates                                        COMB03   8
C                            James J. Hirsch & Associates                       COMB03   9
C                            Camarillo, California                              COMB03  10
C Portions Copyright (c) 1997 by Lawrence Berkeley National Laboratory and      COMB03  11
C Portions Copyright (c) 1997 by James J. Hirsch. All Rights Reserved.          COMB03  12
C Portions developed under University of California/USDOE Purchase Order        COMB03  13
C #4607010 with JJ Hirsch and covered by above copyrights.                      COMB03  14
c                                                                               ZeroBk  10
cDEC$ NOOPTIMIZE                                                                -048   318
      DIMENSION Istart(1)                                                       ZeroBk  11
      INTEGER Flag                                                              ZeroBk  12
      DATA    Flag /-99999/                                                     ZeroBk  13
c                                                                               ZeroBk  14
      Iend = Flag                                                               ZeroBk  15
      I = 1                                                                     ZeroBk  16
      DO                                                                        ZeroBk  17
        IF (Istart(I) .NE. Flag)  THEN                                          ZeroBk  18
          Istart(I) = 0                                                         ZeroBk  19
          I = I + 1                                                             ZeroBk  20
        ELSE                                                                    ZeroBk  21
          Istart(I) = 0                                                         ZeroBk  22
          Iend      = 0                                                         ZeroBk  23
          EXIT                                                                  ZeroBk  24
        ENDIF                                                                   ZeroBk  25
      ENDDO                                                                     ZeroBk  26
c                                                                               ZeroBk  27
      RETURN                                                                    ZeroBk  28
      END                                                                       ZeroBk  29
